{"version":3,"sources":["../../credentials/CalendlyApi.credentials.ts"],"sourcesContent":["import type {\n\tICredentialDataDecryptedObject,\n\tICredentialTestRequest,\n\tICredentialType,\n\tIHttpRequestOptions,\n\tINodeProperties,\n} from 'n8n-workflow';\n\nconst getAuthenticationType = (data: string): 'accessToken' | 'apiKey' => {\n\t// The access token is a JWT, so it will always include dots to separate\n\t// header, payoload and signature.\n\treturn data.includes('.') ? 'accessToken' : 'apiKey';\n};\n\nexport class CalendlyApi implements ICredentialType {\n\tname = 'calendlyApi';\n\n\tdisplayName = 'Calendly API';\n\n\tdocumentationUrl = 'calendly';\n\n\tproperties: INodeProperties[] = [\n\t\t// Change name to Personal Access Token once API Keys\n\t\t// are deprecated\n\t\t{\n\t\t\tdisplayName: 'API Key or Personal Access Token',\n\t\t\tname: 'apiKey',\n\t\t\ttype: 'string',\n\t\t\ttypeOptions: { password: true },\n\t\t\tdefault: '',\n\t\t},\n\t];\n\n\tasync authenticate(\n\t\tcredentials: ICredentialDataDecryptedObject,\n\t\trequestOptions: IHttpRequestOptions,\n\t): Promise<IHttpRequestOptions> {\n\t\t//check whether the token is an API Key or an access token\n\t\tconst { apiKey } = credentials as { apiKey: string };\n\t\tconst tokenType = getAuthenticationType(apiKey);\n\t\t// remove condition once v1 is deprecated\n\t\t// and only inject credentials as an access token\n\t\tif (tokenType === 'accessToken') {\n\t\t\trequestOptions.headers!.Authorization = `Bearer ${apiKey}`;\n\t\t} else {\n\t\t\trequestOptions.headers!['X-TOKEN'] = apiKey;\n\t\t}\n\t\treturn requestOptions;\n\t}\n\n\ttest: ICredentialTestRequest = {\n\t\trequest: {\n\t\t\tbaseURL: 'https://calendly.com',\n\t\t\turl: '/api/v1/users/me',\n\t\t},\n\t};\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA,MAAM,wBAAwB,CAAC,SAA2C;AAGzE,SAAO,KAAK,SAAS,GAAG,IAAI,gBAAgB;AAC7C;AAEO,MAAM,YAAuC;AAAA,EAA7C;AACN,gBAAO;AAEP,uBAAc;AAEd,4BAAmB;AAEnB,sBAAgC;AAAA;AAAA;AAAA,MAG/B;AAAA,QACC,aAAa;AAAA,QACb,MAAM;AAAA,QACN,MAAM;AAAA,QACN,aAAa,EAAE,UAAU,KAAK;AAAA,QAC9B,SAAS;AAAA,MACV;AAAA,IACD;AAmBA,gBAA+B;AAAA,MAC9B,SAAS;AAAA,QACR,SAAS;AAAA,QACT,KAAK;AAAA,MACN;AAAA,IACD;AAAA;AAAA,EAtBA,MAAM,aACL,aACA,gBAC+B;AAE/B,UAAM,EAAE,OAAO,IAAI;AACnB,UAAM,YAAY,sBAAsB,MAAM;AAG9C,QAAI,cAAc,eAAe;AAChC,qBAAe,QAAS,gBAAgB,UAAU,MAAM;AAAA,IACzD,OAAO;AACN,qBAAe,QAAS,SAAS,IAAI;AAAA,IACtC;AACA,WAAO;AAAA,EACR;AAQD;","names":[]}