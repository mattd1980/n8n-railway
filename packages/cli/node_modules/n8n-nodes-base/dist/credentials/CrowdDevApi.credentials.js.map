{"version":3,"sources":["../../credentials/CrowdDevApi.credentials.ts"],"sourcesContent":["import type {\n\tIAuthenticateGeneric,\n\tICredentialTestRequest,\n\tICredentialType,\n\tINodeProperties,\n} from 'n8n-workflow';\n\nexport class CrowdDevApi implements ICredentialType {\n\tname = 'crowdDevApi';\n\n\tdisplayName = 'crowd.dev API';\n\n\tdocumentationUrl = 'crowddev';\n\n\tproperties: INodeProperties[] = [\n\t\t{\n\t\t\tdisplayName: 'URL',\n\t\t\tname: 'url',\n\t\t\ttype: 'string',\n\t\t\tdefault: 'https://app.crowd.dev',\n\t\t},\n\t\t{\n\t\t\tdisplayName: 'Tenant ID',\n\t\t\tname: 'tenantId',\n\t\t\ttype: 'string',\n\t\t\tdefault: '',\n\t\t},\n\t\t{\n\t\t\tdisplayName: 'Token',\n\t\t\tname: 'token',\n\t\t\ttype: 'string',\n\t\t\ttypeOptions: {\n\t\t\t\tpassword: true,\n\t\t\t},\n\t\t\tdefault: '',\n\t\t},\n\t\t{\n\t\t\tdisplayName: 'Ignore SSL Issues (Insecure)',\n\t\t\tname: 'allowUnauthorizedCerts',\n\t\t\ttype: 'boolean',\n\t\t\tdescription: 'Whether to connect even if SSL certificate validation is not possible',\n\t\t\tdefault: false,\n\t\t},\n\t];\n\n\t// This allows the credential to be used by other parts of n8n\n\t// stating how this credential is injected as part of the request\n\t// An example is the Http Request node that can make generic calls\n\t// reusing this credential\n\tauthenticate: IAuthenticateGeneric = {\n\t\ttype: 'generic',\n\t\tproperties: {\n\t\t\theaders: {\n\t\t\t\tAuthorization: '={{\"Bearer \" + $credentials.token}}',\n\t\t\t},\n\t\t},\n\t};\n\n\t// The block below tells how this credential can be tested\n\ttest: ICredentialTestRequest = {\n\t\trequest: {\n\t\t\tmethod: 'POST',\n\t\t\tbaseURL: '={{$credentials.url.replace(/\\\\/$/, \"\") + \"/api/tenant/\" + $credentials.tenantId}}',\n\t\t\turl: '/member/query',\n\t\t\tskipSslCertificateValidation: '={{ $credentials.allowUnauthorizedCerts }}',\n\t\t\tbody: {\n\t\t\t\tlimit: 1,\n\t\t\t\toffset: 0,\n\t\t\t},\n\t\t},\n\t};\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAOO,MAAM,YAAuC;AAAA,EAA7C;AACN,gBAAO;AAEP,uBAAc;AAEd,4BAAmB;AAEnB,sBAAgC;AAAA,MAC/B;AAAA,QACC,aAAa;AAAA,QACb,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,MACV;AAAA,MACA;AAAA,QACC,aAAa;AAAA,QACb,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,MACV;AAAA,MACA;AAAA,QACC,aAAa;AAAA,QACb,MAAM;AAAA,QACN,MAAM;AAAA,QACN,aAAa;AAAA,UACZ,UAAU;AAAA,QACX;AAAA,QACA,SAAS;AAAA,MACV;AAAA,MACA;AAAA,QACC,aAAa;AAAA,QACb,MAAM;AAAA,QACN,MAAM;AAAA,QACN,aAAa;AAAA,QACb,SAAS;AAAA,MACV;AAAA,IACD;AAMA;AAAA;AAAA;AAAA;AAAA,wBAAqC;AAAA,MACpC,MAAM;AAAA,MACN,YAAY;AAAA,QACX,SAAS;AAAA,UACR,eAAe;AAAA,QAChB;AAAA,MACD;AAAA,IACD;AAGA;AAAA,gBAA+B;AAAA,MAC9B,SAAS;AAAA,QACR,QAAQ;AAAA,QACR,SAAS;AAAA,QACT,KAAK;AAAA,QACL,8BAA8B;AAAA,QAC9B,MAAM;AAAA,UACL,OAAO;AAAA,UACP,QAAQ;AAAA,QACT;AAAA,MACD;AAAA,IACD;AAAA;AACD;","names":[]}