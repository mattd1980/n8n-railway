{"version":3,"sources":["../../credentials/CustomerIoApi.credentials.ts"],"sourcesContent":["import { ApplicationError } from 'n8n-workflow';\nimport type {\n\tICredentialDataDecryptedObject,\n\tICredentialType,\n\tIHttpRequestOptions,\n\tINodeProperties,\n} from 'n8n-workflow';\n\nexport class CustomerIoApi implements ICredentialType {\n\tname = 'customerIoApi';\n\n\tdisplayName = 'Customer.io API';\n\n\tdocumentationUrl = 'customerIo';\n\n\tproperties: INodeProperties[] = [\n\t\t{\n\t\t\tdisplayName: 'Tracking API Key',\n\t\t\tname: 'trackingApiKey',\n\t\t\ttype: 'string',\n\t\t\ttypeOptions: { password: true },\n\t\t\tdefault: '',\n\t\t\tdescription: 'Required for tracking API',\n\t\t\trequired: true,\n\t\t},\n\t\t{\n\t\t\tdisplayName: 'Region',\n\t\t\tname: 'region',\n\t\t\ttype: 'options',\n\t\t\toptions: [\n\t\t\t\t{\n\t\t\t\t\tname: 'EU region',\n\t\t\t\t\tvalue: 'track-eu.customer.io',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'Global region',\n\t\t\t\t\tvalue: 'track.customer.io',\n\t\t\t\t},\n\t\t\t],\n\t\t\tdefault: 'track.customer.io',\n\t\t\tdescription: 'Should be set based on your account region',\n\t\t\thint: 'The region will be omitted when being used with the HTTP node',\n\t\t\trequired: true,\n\t\t},\n\t\t{\n\t\t\tdisplayName: 'Tracking Site ID',\n\t\t\tname: 'trackingSiteId',\n\t\t\ttype: 'string',\n\t\t\tdefault: '',\n\t\t\tdescription: 'Required for tracking API',\n\t\t},\n\t\t{\n\t\t\tdisplayName: 'App API Key',\n\t\t\tname: 'appApiKey',\n\t\t\ttype: 'string',\n\t\t\ttypeOptions: { password: true },\n\t\t\tdefault: '',\n\t\t\tdescription: 'Required for App API',\n\t\t},\n\t];\n\n\tasync authenticate(\n\t\tcredentials: ICredentialDataDecryptedObject,\n\t\trequestOptions: IHttpRequestOptions,\n\t): Promise<IHttpRequestOptions> {\n\t\t// @ts-ignore\n\t\tconst url = new URL(requestOptions.url ? requestOptions.url : requestOptions.uri);\n\t\tif (\n\t\t\turl.hostname === 'track.customer.io' ||\n\t\t\turl.hostname === 'track-eu.customer.io' ||\n\t\t\turl.hostname === 'api.customer.io' ||\n\t\t\turl.hostname === 'api-eu.customer.io'\n\t\t) {\n\t\t\tconst basicAuthKey = Buffer.from(\n\t\t\t\t`${credentials.trackingSiteId}:${credentials.trackingApiKey}`,\n\t\t\t).toString('base64');\n\t\t\t// @ts-ignore\n\t\t\tObject.assign(requestOptions.headers, { Authorization: `Basic ${basicAuthKey}` });\n\t\t} else if (\n\t\t\turl.hostname === 'beta-api.customer.io' ||\n\t\t\turl.hostname === 'beta-api-eu.customer.io'\n\t\t) {\n\t\t\t// @ts-ignore\n\t\t\tObject.assign(requestOptions.headers, {\n\t\t\t\tAuthorization: `Bearer ${credentials.appApiKey as string}`,\n\t\t\t});\n\t\t} else {\n\t\t\tthrow new ApplicationError('Unknown way of authenticating', { level: 'warning' });\n\t\t}\n\n\t\treturn requestOptions;\n\t}\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAiC;AAQ1B,MAAM,cAAyC;AAAA,EAA/C;AACN,gBAAO;AAEP,uBAAc;AAEd,4BAAmB;AAEnB,sBAAgC;AAAA,MAC/B;AAAA,QACC,aAAa;AAAA,QACb,MAAM;AAAA,QACN,MAAM;AAAA,QACN,aAAa,EAAE,UAAU,KAAK;AAAA,QAC9B,SAAS;AAAA,QACT,aAAa;AAAA,QACb,UAAU;AAAA,MACX;AAAA,MACA;AAAA,QACC,aAAa;AAAA,QACb,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,UACR;AAAA,YACC,MAAM;AAAA,YACN,OAAO;AAAA,UACR;AAAA,UACA;AAAA,YACC,MAAM;AAAA,YACN,OAAO;AAAA,UACR;AAAA,QACD;AAAA,QACA,SAAS;AAAA,QACT,aAAa;AAAA,QACb,MAAM;AAAA,QACN,UAAU;AAAA,MACX;AAAA,MACA;AAAA,QACC,aAAa;AAAA,QACb,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,QACT,aAAa;AAAA,MACd;AAAA,MACA;AAAA,QACC,aAAa;AAAA,QACb,MAAM;AAAA,QACN,MAAM;AAAA,QACN,aAAa,EAAE,UAAU,KAAK;AAAA,QAC9B,SAAS;AAAA,QACT,aAAa;AAAA,MACd;AAAA,IACD;AAAA;AAAA,EAEA,MAAM,aACL,aACA,gBAC+B;AAE/B,UAAM,MAAM,IAAI,IAAI,eAAe,MAAM,eAAe,MAAM,eAAe,GAAG;AAChF,QACC,IAAI,aAAa,uBACjB,IAAI,aAAa,0BACjB,IAAI,aAAa,qBACjB,IAAI,aAAa,sBAChB;AACD,YAAM,eAAe,OAAO;AAAA,QAC3B,GAAG,YAAY,cAAc,IAAI,YAAY,cAAc;AAAA,MAC5D,EAAE,SAAS,QAAQ;AAEnB,aAAO,OAAO,eAAe,SAAS,EAAE,eAAe,SAAS,YAAY,GAAG,CAAC;AAAA,IACjF,WACC,IAAI,aAAa,0BACjB,IAAI,aAAa,2BAChB;AAED,aAAO,OAAO,eAAe,SAAS;AAAA,QACrC,eAAe,UAAU,YAAY,SAAmB;AAAA,MACzD,CAAC;AAAA,IACF,OAAO;AACN,YAAM,IAAI,qCAAiB,iCAAiC,EAAE,OAAO,UAAU,CAAC;AAAA,IACjF;AAEA,WAAO;AAAA,EACR;AACD;","names":[]}