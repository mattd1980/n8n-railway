{"version":3,"sources":["../../credentials/InvoiceNinjaApi.credentials.ts"],"sourcesContent":["import type {\n\tICredentialDataDecryptedObject,\n\tICredentialTestRequest,\n\tICredentialType,\n\tIHttpRequestOptions,\n\tINodeProperties,\n} from 'n8n-workflow';\n\nexport class InvoiceNinjaApi implements ICredentialType {\n\tname = 'invoiceNinjaApi';\n\n\tdisplayName = 'Invoice Ninja API';\n\n\tdocumentationUrl = 'invoiceNinja';\n\n\tproperties: INodeProperties[] = [\n\t\t{\n\t\t\tdisplayName: 'URL',\n\t\t\tname: 'url',\n\t\t\ttype: 'string',\n\t\t\tdefault: '',\n\t\t\thint: 'Default URL for v4 is https://app.invoiceninja.com, for v5 it is https://invoicing.co',\n\t\t},\n\t\t{\n\t\t\tdisplayName: 'API Token',\n\t\t\tname: 'apiToken',\n\t\t\ttype: 'string',\n\t\t\ttypeOptions: { password: true },\n\t\t\tdefault: '',\n\t\t},\n\t\t{\n\t\t\tdisplayName: 'Secret',\n\t\t\tname: 'secret',\n\t\t\ttype: 'string',\n\t\t\ttypeOptions: { password: true },\n\t\t\tdefault: '',\n\t\t\thint: 'This is optional, enter only if you did set a secret in your app and only if you are using v5',\n\t\t},\n\t];\n\n\ttest: ICredentialTestRequest = {\n\t\trequest: {\n\t\t\tbaseURL: '={{$credentials?.url}}',\n\t\t\turl: '/api/v1/clients',\n\t\t\tmethod: 'GET',\n\t\t},\n\t};\n\n\tasync authenticate(\n\t\tcredentials: ICredentialDataDecryptedObject,\n\t\trequestOptions: IHttpRequestOptions,\n\t): Promise<IHttpRequestOptions> {\n\t\tconst VERSION_5_TOKEN_LENGTH = 64;\n\t\tconst { apiToken, secret } = credentials;\n\t\tconst tokenLength = (apiToken as string).length;\n\n\t\tif (tokenLength < VERSION_5_TOKEN_LENGTH) {\n\t\t\trequestOptions.headers = {\n\t\t\t\tAccept: 'application/json',\n\t\t\t\t'X-Ninja-Token': apiToken,\n\t\t\t};\n\t\t} else {\n\t\t\trequestOptions.headers = {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t'X-API-TOKEN': apiToken,\n\t\t\t\t'X-Requested-With': 'XMLHttpRequest',\n\t\t\t\t'X-API-SECRET': secret || '',\n\t\t\t};\n\t\t}\n\t\treturn requestOptions;\n\t}\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAQO,MAAM,gBAA2C;AAAA,EAAjD;AACN,gBAAO;AAEP,uBAAc;AAEd,4BAAmB;AAEnB,sBAAgC;AAAA,MAC/B;AAAA,QACC,aAAa;AAAA,QACb,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,QACT,MAAM;AAAA,MACP;AAAA,MACA;AAAA,QACC,aAAa;AAAA,QACb,MAAM;AAAA,QACN,MAAM;AAAA,QACN,aAAa,EAAE,UAAU,KAAK;AAAA,QAC9B,SAAS;AAAA,MACV;AAAA,MACA;AAAA,QACC,aAAa;AAAA,QACb,MAAM;AAAA,QACN,MAAM;AAAA,QACN,aAAa,EAAE,UAAU,KAAK;AAAA,QAC9B,SAAS;AAAA,QACT,MAAM;AAAA,MACP;AAAA,IACD;AAEA,gBAA+B;AAAA,MAC9B,SAAS;AAAA,QACR,SAAS;AAAA,QACT,KAAK;AAAA,QACL,QAAQ;AAAA,MACT;AAAA,IACD;AAAA;AAAA,EAEA,MAAM,aACL,aACA,gBAC+B;AAC/B,UAAM,yBAAyB;AAC/B,UAAM,EAAE,UAAU,OAAO,IAAI;AAC7B,UAAM,cAAe,SAAoB;AAEzC,QAAI,cAAc,wBAAwB;AACzC,qBAAe,UAAU;AAAA,QACxB,QAAQ;AAAA,QACR,iBAAiB;AAAA,MAClB;AAAA,IACD,OAAO;AACN,qBAAe,UAAU;AAAA,QACxB,gBAAgB;AAAA,QAChB,eAAe;AAAA,QACf,oBAAoB;AAAA,QACpB,gBAAgB,UAAU;AAAA,MAC3B;AAAA,IACD;AACA,WAAO;AAAA,EACR;AACD;","names":[]}