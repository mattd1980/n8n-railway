{"version":3,"sources":["../../../nodes/SurveyMonkey/GenericFunctions.ts"],"sourcesContent":["import type {\n\tIExecuteFunctions,\n\tILoadOptionsFunctions,\n\tIDataObject,\n\tIHookFunctions,\n\tIWebhookFunctions,\n\tJsonObject,\n\tIHttpRequestMethods,\n\tIRequestOptions,\n} from 'n8n-workflow';\nimport { NodeApiError } from 'n8n-workflow';\n\nexport async function surveyMonkeyApiRequest(\n\tthis: IExecuteFunctions | IWebhookFunctions | IHookFunctions | ILoadOptionsFunctions,\n\tmethod: IHttpRequestMethods,\n\tresource: string,\n\n\tbody: IDataObject = {},\n\tquery: IDataObject = {},\n\turi?: string,\n\toption: IDataObject = {},\n) {\n\tconst authenticationMethod = this.getNodeParameter('authentication', 0);\n\n\tconst endpoint = 'https://api.surveymonkey.com/v3';\n\n\tlet options: IRequestOptions = {\n\t\theaders: {\n\t\t\t'Content-Type': 'application/json',\n\t\t},\n\t\tmethod,\n\t\tbody,\n\t\tqs: query,\n\t\turi: uri || `${endpoint}${resource}`,\n\t\tjson: true,\n\t};\n\n\tif (!Object.keys(body).length) {\n\t\tdelete options.body;\n\t}\n\tif (!Object.keys(query).length) {\n\t\tdelete options.qs;\n\t}\n\toptions = Object.assign({}, options, option);\n\n\ttry {\n\t\tif (authenticationMethod === 'accessToken') {\n\t\t\tconst credentials = await this.getCredentials('surveyMonkeyApi');\n\n\t\t\t(options.headers as IDataObject).Authorization = `bearer ${credentials.accessToken}`;\n\n\t\t\treturn await this.helpers.request(options);\n\t\t} else {\n\t\t\treturn await this.helpers.requestOAuth2?.call(this, 'surveyMonkeyOAuth2Api', options);\n\t\t}\n\t} catch (error) {\n\t\tthrow new NodeApiError(this.getNode(), error as JsonObject);\n\t}\n}\n\nexport async function surveyMonkeyRequestAllItems(\n\tthis: IHookFunctions | IExecuteFunctions | ILoadOptionsFunctions | IWebhookFunctions,\n\tpropertyName: string,\n\tmethod: IHttpRequestMethods,\n\tendpoint: string,\n\n\tbody: IDataObject = {},\n\tquery: IDataObject = {},\n): Promise<any> {\n\tconst returnData: IDataObject[] = [];\n\n\tlet responseData;\n\tquery.page = 1;\n\tquery.per_page = 100;\n\tlet uri: string | undefined;\n\n\tdo {\n\t\tresponseData = await surveyMonkeyApiRequest.call(this, method, endpoint, body, query, uri);\n\t\turi = responseData.links.next;\n\t\treturnData.push.apply(returnData, responseData[propertyName] as IDataObject[]);\n\t} while (responseData.links.next);\n\n\treturn returnData;\n}\n\nexport function idsExist(ids: string[], surveyIds: string[]) {\n\tfor (const surveyId of surveyIds) {\n\t\tif (!ids.includes(surveyId)) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA,0BAA6B;AAE7B,eAAsB,uBAErB,QACA,UAEA,OAAoB,CAAC,GACrB,QAAqB,CAAC,GACtB,KACA,SAAsB,CAAC,GACtB;AACD,QAAM,uBAAuB,KAAK,iBAAiB,kBAAkB,CAAC;AAEtE,QAAM,WAAW;AAEjB,MAAI,UAA2B;AAAA,IAC9B,SAAS;AAAA,MACR,gBAAgB;AAAA,IACjB;AAAA,IACA;AAAA,IACA;AAAA,IACA,IAAI;AAAA,IACJ,KAAK,OAAO,GAAG,QAAQ,GAAG,QAAQ;AAAA,IAClC,MAAM;AAAA,EACP;AAEA,MAAI,CAAC,OAAO,KAAK,IAAI,EAAE,QAAQ;AAC9B,WAAO,QAAQ;AAAA,EAChB;AACA,MAAI,CAAC,OAAO,KAAK,KAAK,EAAE,QAAQ;AAC/B,WAAO,QAAQ;AAAA,EAChB;AACA,YAAU,OAAO,OAAO,CAAC,GAAG,SAAS,MAAM;AAE3C,MAAI;AACH,QAAI,yBAAyB,eAAe;AAC3C,YAAM,cAAc,MAAM,KAAK,eAAe,iBAAiB;AAE/D,MAAC,QAAQ,QAAwB,gBAAgB,UAAU,YAAY,WAAW;AAElF,aAAO,MAAM,KAAK,QAAQ,QAAQ,OAAO;AAAA,IAC1C,OAAO;AACN,aAAO,MAAM,KAAK,QAAQ,eAAe,KAAK,MAAM,yBAAyB,OAAO;AAAA,IACrF;AAAA,EACD,SAAS,OAAO;AACf,UAAM,IAAI,iCAAa,KAAK,QAAQ,GAAG,KAAmB;AAAA,EAC3D;AACD;AAEA,eAAsB,4BAErB,cACA,QACA,UAEA,OAAoB,CAAC,GACrB,QAAqB,CAAC,GACP;AACf,QAAM,aAA4B,CAAC;AAEnC,MAAI;AACJ,QAAM,OAAO;AACb,QAAM,WAAW;AACjB,MAAI;AAEJ,KAAG;AACF,mBAAe,MAAM,uBAAuB,KAAK,MAAM,QAAQ,UAAU,MAAM,OAAO,GAAG;AACzF,UAAM,aAAa,MAAM;AACzB,eAAW,KAAK,MAAM,YAAY,aAAa,YAAY,CAAkB;AAAA,EAC9E,SAAS,aAAa,MAAM;AAE5B,SAAO;AACR;AAEO,SAAS,SAAS,KAAe,WAAqB;AAC5D,aAAW,YAAY,WAAW;AACjC,QAAI,CAAC,IAAI,SAAS,QAAQ,GAAG;AAC5B,aAAO;AAAA,IACR;AAAA,EACD;AACA,SAAO;AACR;","names":[]}