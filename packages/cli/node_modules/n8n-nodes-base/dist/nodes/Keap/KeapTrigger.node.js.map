{"version":3,"sources":["../../../nodes/Keap/KeapTrigger.node.ts"],"sourcesContent":["import { capitalCase } from 'change-case';\nimport type {\n\tIHookFunctions,\n\tIWebhookFunctions,\n\tIDataObject,\n\tILoadOptionsFunctions,\n\tINodePropertyOptions,\n\tINodeType,\n\tINodeTypeDescription,\n\tIWebhookResponseData,\n} from 'n8n-workflow';\nimport { NodeConnectionTypes } from 'n8n-workflow';\n\nimport { keapApiRequest } from './GenericFunctions';\n\nexport class KeapTrigger implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'Keap Trigger',\n\t\tname: 'keapTrigger',\n\t\t// eslint-disable-next-line n8n-nodes-base/node-class-description-icon-not-svg\n\t\ticon: 'file:keap.png',\n\t\tgroup: ['trigger'],\n\t\tversion: 1,\n\t\tsubtitle: '={{$parameter[\"eventId\"]}}',\n\t\tdescription: 'Starts the workflow when Infusionsoft events occur',\n\t\tdefaults: {\n\t\t\tname: 'Keap Trigger',\n\t\t},\n\t\tinputs: [],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tcredentials: [\n\t\t\t{\n\t\t\t\tname: 'keapOAuth2Api',\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t],\n\t\twebhooks: [\n\t\t\t{\n\t\t\t\tname: 'default',\n\t\t\t\thttpMethod: 'POST',\n\t\t\t\tresponseMode: 'onReceived',\n\t\t\t\tpath: 'webhook',\n\t\t\t},\n\t\t],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Event Name or ID',\n\t\t\t\tname: 'eventId',\n\t\t\t\ttype: 'options',\n\t\t\t\tdescription:\n\t\t\t\t\t'Choose from the list, or specify an ID using an <a href=\"https://docs.n8n.io/code/expressions/\">expression</a>',\n\t\t\t\ttypeOptions: {\n\t\t\t\t\tloadOptionsMethod: 'getEvents',\n\t\t\t\t},\n\t\t\t\tdefault: '',\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'RAW Data',\n\t\t\t\tname: 'rawData',\n\t\t\t\ttype: 'boolean',\n\t\t\t\tdefault: false,\n\t\t\t\tdescription: 'Whether to return the data exactly in the way it got received from the API',\n\t\t\t},\n\t\t],\n\t};\n\n\tmethods = {\n\t\tloadOptions: {\n\t\t\t// Get all the event types to display them to user so that they can\n\t\t\t// select them easily\n\t\t\tasync getEvents(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst returnData: INodePropertyOptions[] = [];\n\t\t\t\tconst hooks = await keapApiRequest.call(this, 'GET', '/hooks/event_keys');\n\t\t\t\tfor (const hook of hooks) {\n\t\t\t\t\tconst hookName = hook;\n\t\t\t\t\tconst hookId = hook;\n\t\t\t\t\treturnData.push({\n\t\t\t\t\t\tname: capitalCase((hookName as string).replace('.', ' ')),\n\t\t\t\t\t\tvalue: hookId as string,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn returnData;\n\t\t\t},\n\t\t},\n\t};\n\n\twebhookMethods = {\n\t\tdefault: {\n\t\t\tasync checkExists(this: IHookFunctions): Promise<boolean> {\n\t\t\t\tconst eventId = this.getNodeParameter('eventId') as string;\n\t\t\t\tconst webhookUrl = this.getNodeWebhookUrl('default');\n\t\t\t\tconst webhookData = this.getWorkflowStaticData('node');\n\n\t\t\t\tconst responseData = await keapApiRequest.call(this, 'GET', '/hooks', {});\n\n\t\t\t\tfor (const existingData of responseData) {\n\t\t\t\t\tif (\n\t\t\t\t\t\texistingData.hookUrl === webhookUrl &&\n\t\t\t\t\t\texistingData.eventKey === eventId &&\n\t\t\t\t\t\texistingData.status === 'Verified'\n\t\t\t\t\t) {\n\t\t\t\t\t\t// The webhook exists already\n\t\t\t\t\t\twebhookData.webhookId = existingData.key;\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn false;\n\t\t\t},\n\t\t\tasync create(this: IHookFunctions): Promise<boolean> {\n\t\t\t\tconst eventId = this.getNodeParameter('eventId') as string;\n\t\t\t\tconst webhookData = this.getWorkflowStaticData('node');\n\t\t\t\tconst webhookUrl = this.getNodeWebhookUrl('default');\n\n\t\t\t\tconst body = {\n\t\t\t\t\teventKey: eventId,\n\t\t\t\t\thookUrl: webhookUrl,\n\t\t\t\t};\n\n\t\t\t\tconst responseData = await keapApiRequest.call(this, 'POST', '/hooks', body);\n\n\t\t\t\tif (responseData.key === undefined) {\n\t\t\t\t\t// Required data is missing so was not successful\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\twebhookData.webhookId = responseData.key as string;\n\n\t\t\t\treturn true;\n\t\t\t},\n\t\t\tasync delete(this: IHookFunctions): Promise<boolean> {\n\t\t\t\tconst webhookData = this.getWorkflowStaticData('node');\n\n\t\t\t\tif (webhookData.webhookId !== undefined) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tawait keapApiRequest.call(this, 'DELETE', `/hooks/${webhookData.webhookId}`);\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Remove from the static workflow data so that it is clear\n\t\t\t\t\t// that no webhooks are registered anymore\n\t\t\t\t\tdelete webhookData.webhookId;\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\t\t\t},\n\t\t},\n\t};\n\n\tasync webhook(this: IWebhookFunctions): Promise<IWebhookResponseData> {\n\t\tconst rawData = this.getNodeParameter('rawData') as boolean;\n\t\tconst headers = this.getHeaderData() as IDataObject;\n\t\tconst bodyData = this.getBodyData();\n\n\t\tif (headers['x-hook-secret']) {\n\t\t\t// Is a create webhook confirmation request\n\t\t\tconst res = this.getResponseObject();\n\t\t\tres.set('x-hook-secret', headers['x-hook-secret'] as string);\n\t\t\tres.status(200).end();\n\t\t\treturn {\n\t\t\t\tnoWebhookResponse: true,\n\t\t\t};\n\t\t}\n\n\t\tif (rawData) {\n\t\t\treturn {\n\t\t\t\tworkflowData: [this.helpers.returnJsonArray(bodyData)],\n\t\t\t};\n\t\t}\n\n\t\tconst responseData: IDataObject[] = [];\n\t\tfor (const data of bodyData.object_keys as IDataObject[]) {\n\t\t\tresponseData.push({\n\t\t\t\teventKey: bodyData.event_key,\n\t\t\t\tobjectType: bodyData.object_type,\n\t\t\t\tid: data.id,\n\t\t\t\ttimestamp: data.timestamp,\n\t\t\t\tapiUrl: data.apiUrl,\n\t\t\t});\n\t\t}\n\t\treturn {\n\t\t\tworkflowData: [this.helpers.returnJsonArray(responseData)],\n\t\t};\n\t}\n}\n"],"mappings":"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","names":[]}