{"version":3,"sources":["../../../nodes/RabbitMQ/RabbitMQ.node.ts"],"sourcesContent":["/* eslint-disable n8n-nodes-base/node-filename-against-convention */\nimport type * as amqplib from 'amqplib';\nimport type {\n\tIExecuteFunctions,\n\tICredentialsDecrypted,\n\tICredentialTestFunctions,\n\tIDataObject,\n\tINodeCredentialTestResult,\n\tINodeExecutionData,\n\tINodeType,\n\tINodeTypeDescription,\n\tJsonObject,\n} from 'n8n-workflow';\nimport { NodeApiError, NodeConnectionTypes, NodeOperationError } from 'n8n-workflow';\n\nimport {\n\tparsePublishArguments,\n\trabbitmqConnect,\n\trabbitmqConnectExchange,\n\trabbitmqConnectQueue,\n} from './GenericFunctions';\nimport type { Options, RabbitMQCredentials } from './types';\n\nexport class RabbitMQ implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'RabbitMQ',\n\t\tname: 'rabbitmq',\n\t\ticon: 'file:rabbitmq.svg',\n\t\tgroup: ['transform'],\n\t\tversion: [1, 1.1],\n\t\tdescription: 'Sends messages to a RabbitMQ topic',\n\t\tdefaults: {\n\t\t\tname: 'RabbitMQ',\n\t\t},\n\t\tusableAsTool: true,\n\t\tinputs: [NodeConnectionTypes.Main],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tcredentials: [\n\t\t\t{\n\t\t\t\tname: 'rabbitmq',\n\t\t\t\trequired: true,\n\t\t\t\ttestedBy: 'rabbitmqConnectionTest',\n\t\t\t},\n\t\t],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Operation',\n\t\t\t\tname: 'operation',\n\t\t\t\ttype: 'hidden',\n\t\t\t\tnoDataExpression: true,\n\t\t\t\tdefault: 'sendMessage',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\t'@version': [1],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t// To remove when action view is fixed\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Send a Message to RabbitMQ',\n\t\t\t\t\t\tvalue: 'sendMessage',\n\t\t\t\t\t\taction: 'Send a Message to RabbitMQ',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Delete From Queue',\n\t\t\t\t\t\tvalue: 'deleteMessage',\n\t\t\t\t\t\taction: 'Delete From Queue',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Operation',\n\t\t\t\tname: 'operation',\n\t\t\t\ttype: 'options',\n\t\t\t\tnoDataExpression: true,\n\t\t\t\tdefault: 'sendMessage',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\t'@version': [1.1],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Send a Message to RabbitMQ',\n\t\t\t\t\t\tvalue: 'sendMessage',\n\t\t\t\t\t\taction: 'Send a Message to RabbitMQ',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Delete From Queue',\n\t\t\t\t\t\tvalue: 'deleteMessage',\n\t\t\t\t\t\taction: 'Delete From Queue',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName:\n\t\t\t\t\t'Will delete an item from the queue triggered earlier in the workflow by a RabbitMQ Trigger node',\n\t\t\t\tname: 'deleteMessage',\n\t\t\t\ttype: 'notice',\n\t\t\t\tdefault: '',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['deleteMessage'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Mode',\n\t\t\t\tname: 'mode',\n\t\t\t\ttype: 'options',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\thide: {\n\t\t\t\t\t\toperation: ['deleteMessage'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Queue',\n\t\t\t\t\t\tvalue: 'queue',\n\t\t\t\t\t\tdescription: 'Publish data to queue',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Exchange',\n\t\t\t\t\t\tvalue: 'exchange',\n\t\t\t\t\t\tdescription: 'Publish data to exchange',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'queue',\n\t\t\t\tdescription: 'To where data should be moved',\n\t\t\t},\n\n\t\t\t// ----------------------------------\n\t\t\t//         Queue\n\t\t\t// ----------------------------------\n\t\t\t{\n\t\t\t\tdisplayName: 'Queue / Topic',\n\t\t\t\tname: 'queue',\n\t\t\t\ttype: 'string',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tmode: ['queue'],\n\t\t\t\t\t},\n\t\t\t\t\thide: {\n\t\t\t\t\t\toperation: ['deleteMessage'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdefault: '',\n\t\t\t\tplaceholder: 'queue-name',\n\t\t\t\tdescription: 'Name of the queue to publish to',\n\t\t\t},\n\n\t\t\t// ----------------------------------\n\t\t\t//         Exchange\n\t\t\t// ----------------------------------\n\n\t\t\t{\n\t\t\t\tdisplayName: 'Exchange',\n\t\t\t\tname: 'exchange',\n\t\t\t\ttype: 'string',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tmode: ['exchange'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdefault: '',\n\t\t\t\tplaceholder: 'exchange-name',\n\t\t\t\tdescription: 'Name of the exchange to publish to',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Type',\n\t\t\t\tname: 'exchangeType',\n\t\t\t\ttype: 'options',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tmode: ['exchange'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Direct',\n\t\t\t\t\t\tvalue: 'direct',\n\t\t\t\t\t\tdescription: 'Direct exchange type',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Topic',\n\t\t\t\t\t\tvalue: 'topic',\n\t\t\t\t\t\tdescription: 'Topic exchange type',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Headers',\n\t\t\t\t\t\tvalue: 'headers',\n\t\t\t\t\t\tdescription: 'Headers exchange type',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Fanout',\n\t\t\t\t\t\tvalue: 'fanout',\n\t\t\t\t\t\tdescription: 'Fanout exchange type',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'fanout',\n\t\t\t\tdescription: 'Type of exchange',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Routing Key',\n\t\t\t\tname: 'routingKey',\n\t\t\t\ttype: 'string',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tmode: ['exchange'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdefault: '',\n\t\t\t\tplaceholder: 'routing-key',\n\t\t\t\tdescription: 'The routing key for the message',\n\t\t\t},\n\n\t\t\t// ----------------------------------\n\t\t\t//         Default\n\t\t\t// ----------------------------------\n\n\t\t\t{\n\t\t\t\tdisplayName: 'Send Input Data',\n\t\t\t\tname: 'sendInputData',\n\t\t\t\ttype: 'boolean',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['sendMessage'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdefault: true,\n\t\t\t\tdescription: 'Whether to send the data the node receives as JSON',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Message',\n\t\t\t\tname: 'message',\n\t\t\t\ttype: 'string',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tsendInputData: [false],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdefault: '',\n\t\t\t\tdescription: 'The message to be sent',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Options',\n\t\t\t\tname: 'options',\n\t\t\t\ttype: 'collection',\n\t\t\t\tdefault: {},\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['sendMessage'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tplaceholder: 'Add option',\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Alternate Exchange',\n\t\t\t\t\t\tname: 'alternateExchange',\n\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\t\t'/mode': ['exchange'],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t'An exchange to send messages to if this exchange canâ€™t route them to any queues',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Arguments',\n\t\t\t\t\t\tname: 'arguments',\n\t\t\t\t\t\tplaceholder: 'Add Argument',\n\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t'Arguments to add, See <a href=\"https://amqp-node.github.io/amqplib/channel_api.html#channel_publish\" target=\"_blank\">here</a> for valid options',\n\t\t\t\t\t\ttype: 'fixedCollection',\n\t\t\t\t\t\ttypeOptions: {\n\t\t\t\t\t\t\tmultipleValues: true,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tdefault: {},\n\t\t\t\t\t\toptions: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: 'argument',\n\t\t\t\t\t\t\t\tdisplayName: 'Argument',\n\t\t\t\t\t\t\t\tvalues: [\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tdisplayName: 'Key',\n\t\t\t\t\t\t\t\t\t\tname: 'key',\n\t\t\t\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tdisplayName: 'Value',\n\t\t\t\t\t\t\t\t\t\tname: 'value',\n\t\t\t\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Auto Delete Queue',\n\t\t\t\t\t\tname: 'autoDelete',\n\t\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\t\tdefault: false,\n\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t'Whether the queue will be deleted when the number of consumers drops to zero',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Durable',\n\t\t\t\t\t\tname: 'durable',\n\t\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\t\tdefault: true,\n\t\t\t\t\t\tdescription: 'Whether the queue will survive broker restarts',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Exclusive',\n\t\t\t\t\t\tname: 'exclusive',\n\t\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\t\t'/mode': ['queue'],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\tdefault: false,\n\t\t\t\t\t\tdescription: 'Whether to scope the queue to the connection',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Headers',\n\t\t\t\t\t\tname: 'headers',\n\t\t\t\t\t\tplaceholder: 'Add Header',\n\t\t\t\t\t\tdescription: 'Headers to add',\n\t\t\t\t\t\ttype: 'fixedCollection',\n\t\t\t\t\t\ttypeOptions: {\n\t\t\t\t\t\t\tmultipleValues: true,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tdefault: {},\n\t\t\t\t\t\toptions: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: 'header',\n\t\t\t\t\t\t\t\tdisplayName: 'Header',\n\t\t\t\t\t\t\t\tvalues: [\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tdisplayName: 'Key',\n\t\t\t\t\t\t\t\t\t\tname: 'key',\n\t\t\t\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tdisplayName: 'Value',\n\t\t\t\t\t\t\t\t\t\tname: 'value',\n\t\t\t\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t],\n\t};\n\n\tmethods = {\n\t\tcredentialTest: {\n\t\t\tasync rabbitmqConnectionTest(\n\t\t\t\tthis: ICredentialTestFunctions,\n\t\t\t\tcredential: ICredentialsDecrypted,\n\t\t\t): Promise<INodeCredentialTestResult> {\n\t\t\t\ttry {\n\t\t\t\t\tconst connection = await rabbitmqConnect(credential.data as RabbitMQCredentials);\n\t\t\t\t\tawait connection.close();\n\t\t\t\t} catch (error) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tstatus: 'Error',\n\t\t\t\t\t\tmessage: error.message,\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\treturn {\n\t\t\t\t\tstatus: 'OK',\n\t\t\t\t\tmessage: 'Connection successful!',\n\t\t\t\t};\n\t\t\t},\n\t\t},\n\t};\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t\tlet channel: amqplib.Channel | undefined;\n\t\ttry {\n\t\t\tconst items = this.getInputData();\n\t\t\tconst operation = this.getNodeParameter('operation', 0);\n\t\t\tif (operation === 'deleteMessage') {\n\t\t\t\tthis.sendResponse(items[0].json);\n\t\t\t\treturn [items];\n\t\t\t}\n\t\t\tconst mode = (this.getNodeParameter('mode', 0) as string) || 'queue';\n\t\t\tconst returnItems: INodeExecutionData[] = [];\n\t\t\tif (mode === 'queue') {\n\t\t\t\tconst queue = this.getNodeParameter('queue', 0) as string;\n\n\t\t\t\tconst options = this.getNodeParameter('options', 0, {}) as Options;\n\n\t\t\t\tchannel = await rabbitmqConnectQueue.call(this, queue, options);\n\n\t\t\t\tconst sendInputData = this.getNodeParameter('sendInputData', 0) as boolean;\n\n\t\t\t\tlet message: string;\n\t\t\t\tconst queuePromises = [];\n\t\t\t\tfor (let i = 0; i < items.length; i++) {\n\t\t\t\t\tif (sendInputData) {\n\t\t\t\t\t\tmessage = JSON.stringify(items[i].json);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tmessage = this.getNodeParameter('message', i) as string;\n\t\t\t\t\t}\n\n\t\t\t\t\tlet headers: IDataObject = {};\n\t\t\t\t\tif (\n\t\t\t\t\t\toptions.headers &&\n\t\t\t\t\t\t((options.headers as IDataObject).header! as IDataObject[]).length\n\t\t\t\t\t) {\n\t\t\t\t\t\tconst itemOptions = this.getNodeParameter('options', i, {});\n\t\t\t\t\t\tconst additionalHeaders: IDataObject = {};\n\t\t\t\t\t\t((itemOptions.headers as IDataObject).header as IDataObject[]).forEach(\n\t\t\t\t\t\t\t(header: IDataObject) => {\n\t\t\t\t\t\t\t\tadditionalHeaders[header.key as string] = header.value;\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t);\n\t\t\t\t\t\theaders = additionalHeaders;\n\t\t\t\t\t}\n\n\t\t\t\t\tqueuePromises.push(\n\t\t\t\t\t\tchannel.sendToQueue(queue, Buffer.from(message), {\n\t\t\t\t\t\t\theaders,\n\t\t\t\t\t\t\t...parsePublishArguments(options),\n\t\t\t\t\t\t}),\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tconst promisesResponses = await Promise.allSettled(queuePromises);\n\n\t\t\t\t// @ts-ignore\n\t\t\t\tpromisesResponses.forEach((response: JsonObject) => {\n\t\t\t\t\tif (response.status !== 'fulfilled') {\n\t\t\t\t\t\tif (!this.continueOnFail()) {\n\t\t\t\t\t\t\tthrow new NodeApiError(this.getNode(), response);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// Return the actual reason as error\n\t\t\t\t\t\t\treturnItems.push({\n\t\t\t\t\t\t\t\tjson: {\n\t\t\t\t\t\t\t\t\terror: response.reason,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturnItems.push({\n\t\t\t\t\t\tjson: {\n\t\t\t\t\t\t\tsuccess: response.value,\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\t\tawait channel.close();\n\t\t\t\tawait channel.connection.close();\n\t\t\t} else if (mode === 'exchange') {\n\t\t\t\tconst exchange = this.getNodeParameter('exchange', 0) as string;\n\t\t\t\tconst routingKey = this.getNodeParameter('routingKey', 0) as string;\n\n\t\t\t\tconst options = this.getNodeParameter('options', 0, {}) as Options;\n\n\t\t\t\tchannel = await rabbitmqConnectExchange.call(this, exchange, options);\n\n\t\t\t\tconst sendInputData = this.getNodeParameter('sendInputData', 0) as boolean;\n\n\t\t\t\tlet message: string;\n\n\t\t\t\tconst exchangePromises = [];\n\t\t\t\tfor (let i = 0; i < items.length; i++) {\n\t\t\t\t\tif (sendInputData) {\n\t\t\t\t\t\tmessage = JSON.stringify(items[i].json);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tmessage = this.getNodeParameter('message', i) as string;\n\t\t\t\t\t}\n\n\t\t\t\t\tlet headers: IDataObject = {};\n\t\t\t\t\tif (\n\t\t\t\t\t\toptions.headers &&\n\t\t\t\t\t\t((options.headers as IDataObject).header! as IDataObject[]).length\n\t\t\t\t\t) {\n\t\t\t\t\t\tconst itemOptions = this.getNodeParameter('options', i, {});\n\t\t\t\t\t\tconst additionalHeaders: IDataObject = {};\n\t\t\t\t\t\t((itemOptions.headers as IDataObject).header as IDataObject[]).forEach(\n\t\t\t\t\t\t\t(header: IDataObject) => {\n\t\t\t\t\t\t\t\tadditionalHeaders[header.key as string] = header.value;\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t);\n\t\t\t\t\t\theaders = additionalHeaders;\n\t\t\t\t\t}\n\n\t\t\t\t\texchangePromises.push(\n\t\t\t\t\t\tchannel.publish(exchange, routingKey, Buffer.from(message), {\n\t\t\t\t\t\t\theaders,\n\t\t\t\t\t\t\t...parsePublishArguments(options),\n\t\t\t\t\t\t}),\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tconst promisesResponses = await Promise.allSettled(exchangePromises);\n\n\t\t\t\t// @ts-ignore\n\t\t\t\tpromisesResponses.forEach((response: JsonObject) => {\n\t\t\t\t\tif (response.status !== 'fulfilled') {\n\t\t\t\t\t\tif (!this.continueOnFail()) {\n\t\t\t\t\t\t\tthrow new NodeApiError(this.getNode(), response);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// Return the actual reason as error\n\t\t\t\t\t\t\treturnItems.push({\n\t\t\t\t\t\t\t\tjson: {\n\t\t\t\t\t\t\t\t\terror: response.reason,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturnItems.push({\n\t\t\t\t\t\tjson: {\n\t\t\t\t\t\t\tsuccess: response.value,\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\t\tawait channel.close();\n\t\t\t\tawait channel.connection.close();\n\t\t\t} else {\n\t\t\t\tthrow new NodeOperationError(this.getNode(), `The operation \"${mode}\" is not known!`);\n\t\t\t}\n\n\t\t\treturn [returnItems];\n\t\t} catch (error) {\n\t\t\tif (channel) {\n\t\t\t\tawait channel.close();\n\t\t\t\tawait channel.connection.close();\n\t\t\t}\n\t\t\tthrow error;\n\t\t}\n\t}\n}\n"],"mappings":"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","names":[]}