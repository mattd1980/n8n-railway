{"version":3,"sources":["../../../nodes/RabbitMQ/RabbitMQTrigger.node.ts"],"sourcesContent":["/* eslint-disable n8n-nodes-base/node-filename-against-convention */\nimport type { Message } from 'amqplib';\nimport type {\n\tIDeferredPromise,\n\tIExecuteResponsePromiseData,\n\tINodeProperties,\n\tINodeType,\n\tINodeTypeDescription,\n\tIRun,\n\tITriggerFunctions,\n\tITriggerResponse,\n} from 'n8n-workflow';\nimport { NodeConnectionTypes, NodeOperationError } from 'n8n-workflow';\n\nimport { rabbitDefaultOptions } from './DefaultOptions';\nimport { MessageTracker, rabbitmqConnectQueue, parseMessage } from './GenericFunctions';\nimport type { TriggerOptions } from './types';\n\nexport class RabbitMQTrigger implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'RabbitMQ Trigger',\n\t\tname: 'rabbitmqTrigger',\n\t\ticon: 'file:rabbitmq.svg',\n\t\tgroup: ['trigger'],\n\t\tversion: 1,\n\t\tdescription: 'Listens to RabbitMQ messages',\n\t\teventTriggerDescription: '',\n\t\tdefaults: {\n\t\t\tname: 'RabbitMQ Trigger',\n\t\t},\n\t\ttriggerPanel: {\n\t\t\theader: '',\n\t\t\texecutionsHelp: {\n\t\t\t\tinactive:\n\t\t\t\t\t\"<b>While building your workflow</b>, click the 'execute step' button, then trigger a Rabbit MQ event. This will trigger an execution, which will show up in this editor.<br /> <br /><b>Once you're happy with your workflow</b>, <a data-key='activate'>activate</a> it. Then every time a change is detected, the workflow will execute. These executions will show up in the <a data-key='executions'>executions list</a>, but not in the editor.\",\n\t\t\t\tactive:\n\t\t\t\t\t\"<b>While building your workflow</b>, click the 'execute step' button, then trigger a Rabbit MQ event. This will trigger an execution, which will show up in this editor.<br /> <br /><b>Your workflow will also execute automatically</b>, since it's activated. Every time a change is detected, this node will trigger an execution. These executions will show up in the <a data-key='executions'>executions list</a>, but not in the editor.\",\n\t\t\t},\n\t\t\tactivationHint:\n\t\t\t\t\"Once you’ve finished building your workflow, <a data-key='activate'>activate</a> it to have it also listen continuously (you just won’t see those executions here).\",\n\t\t},\n\t\tinputs: [],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tcredentials: [\n\t\t\t{\n\t\t\t\tname: 'rabbitmq',\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Queue / Topic',\n\t\t\t\tname: 'queue',\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: '',\n\t\t\t\tplaceholder: 'queue-name',\n\t\t\t\tdescription: 'The name of the queue to read from',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Options',\n\t\t\t\tname: 'options',\n\t\t\t\ttype: 'collection',\n\t\t\t\tdefault: {},\n\t\t\t\tplaceholder: 'Add option',\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Content Is Binary',\n\t\t\t\t\t\tname: 'contentIsBinary',\n\t\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\t\tdefault: false,\n\t\t\t\t\t\tdescription: 'Whether to save the content as binary',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Delete From Queue When',\n\t\t\t\t\t\tname: 'acknowledge',\n\t\t\t\t\t\ttype: 'options',\n\t\t\t\t\t\toptions: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: 'Execution Finishes',\n\t\t\t\t\t\t\t\tvalue: 'executionFinishes',\n\t\t\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t\t\t'After the workflow execution finished. No matter if the execution was successful or not.',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: 'Execution Finishes Successfully',\n\t\t\t\t\t\t\t\tvalue: 'executionFinishesSuccessfully',\n\t\t\t\t\t\t\t\tdescription: 'After the workflow execution finished successfully',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: 'Immediately',\n\t\t\t\t\t\t\t\tvalue: 'immediately',\n\t\t\t\t\t\t\t\tdescription: 'As soon as the message got received',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: 'Specified Later in Workflow',\n\t\t\t\t\t\t\t\tvalue: 'laterMessageNode',\n\t\t\t\t\t\t\t\tdescription: 'Using a RabbitMQ node to remove the item from the queue',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t\tdefault: 'immediately',\n\t\t\t\t\t\tdescription: 'When to acknowledge the message',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'JSON Parse Body',\n\t\t\t\t\t\tname: 'jsonParseBody',\n\t\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\t\thide: {\n\t\t\t\t\t\t\t\tcontentIsBinary: [true],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\tdefault: false,\n\t\t\t\t\t\tdescription: 'Whether to parse the body to an object',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Only Content',\n\t\t\t\t\t\tname: 'onlyContent',\n\t\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\t\thide: {\n\t\t\t\t\t\t\t\tcontentIsBinary: [true],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\tdefault: false,\n\t\t\t\t\t\tdescription: 'Whether to return only the content property',\n\t\t\t\t\t},\n\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Parallel Message Processing Limit',\n\t\t\t\t\t\tname: 'parallelMessages',\n\t\t\t\t\t\ttype: 'number',\n\t\t\t\t\t\tdefault: -1,\n\t\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\t\thide: {\n\t\t\t\t\t\t\t\tacknowledge: ['immediately'],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\tdescription: 'Max number of executions at a time. Use -1 for no limit.',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Binding',\n\t\t\t\t\t\tname: 'binding',\n\t\t\t\t\t\tplaceholder: 'Add Binding',\n\t\t\t\t\t\tdescription: 'Add binding to queu',\n\t\t\t\t\t\ttype: 'fixedCollection',\n\t\t\t\t\t\ttypeOptions: {\n\t\t\t\t\t\t\tmultipleValues: true,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tdefault: {},\n\t\t\t\t\t\toptions: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: 'bindings',\n\t\t\t\t\t\t\t\tdisplayName: 'Binding',\n\t\t\t\t\t\t\t\tvalues: [\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tdisplayName: 'Exchange',\n\t\t\t\t\t\t\t\t\t\tname: 'exchange',\n\t\t\t\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\t\t\t\t\tplaceholder: 'exchange',\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tdisplayName: 'RoutingKey',\n\t\t\t\t\t\t\t\t\t\tname: 'routingKey',\n\t\t\t\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\t\t\t\t\tplaceholder: 'routing-key',\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t\t...rabbitDefaultOptions,\n\t\t\t\t].sort((a, b) => {\n\t\t\t\t\tif (\n\t\t\t\t\t\t(a as INodeProperties).displayName.toLowerCase() <\n\t\t\t\t\t\t(b as INodeProperties).displayName.toLowerCase()\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn -1;\n\t\t\t\t\t}\n\t\t\t\t\tif (\n\t\t\t\t\t\t(a as INodeProperties).displayName.toLowerCase() >\n\t\t\t\t\t\t(b as INodeProperties).displayName.toLowerCase()\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn 1;\n\t\t\t\t\t}\n\t\t\t\t\treturn 0;\n\t\t\t\t}) as INodeProperties[],\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName:\n\t\t\t\t\t\"To delete an item from the queue, insert a RabbitMQ node later in the workflow and use the 'Delete from queue' operation\",\n\t\t\t\tname: 'laterMessageNode',\n\t\t\t\ttype: 'notice',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\t'/options.acknowledge': ['laterMessageNode'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdefault: '',\n\t\t\t},\n\t\t],\n\t};\n\n\tasync trigger(this: ITriggerFunctions): Promise<ITriggerResponse> {\n\t\tconst queue = this.getNodeParameter('queue') as string;\n\t\tconst options = this.getNodeParameter('options', {}) as TriggerOptions;\n\t\tconst channel = await rabbitmqConnectQueue.call(this, queue, options);\n\n\t\tif (this.getMode() === 'manual') {\n\t\t\tconst manualTriggerFunction = async () => {\n\t\t\t\t// Do only catch a single message when executing manually, else messages will leak\n\t\t\t\tawait channel.prefetch(1);\n\n\t\t\t\tconst processMessage = async (message: Message | null) => {\n\t\t\t\t\tif (message !== null) {\n\t\t\t\t\t\tconst item = await parseMessage(message, options, this.helpers);\n\t\t\t\t\t\tchannel.ack(message);\n\t\t\t\t\t\tthis.emit([[item]]);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.emitError(new Error('Connection got closed unexpectedly'));\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\tconst existingMessage = await channel.get(queue);\n\t\t\t\tif (existingMessage) await processMessage(existingMessage);\n\t\t\t\telse await channel.consume(queue, processMessage);\n\t\t\t};\n\n\t\t\tconst closeFunction = async () => {\n\t\t\t\tawait channel.close();\n\t\t\t\tawait channel.connection.close();\n\t\t\t\treturn;\n\t\t\t};\n\n\t\t\treturn {\n\t\t\t\tcloseFunction,\n\t\t\t\tmanualTriggerFunction,\n\t\t\t};\n\t\t}\n\n\t\tconst parallelMessages = options.parallelMessages ?? -1;\n\t\tif (isNaN(parallelMessages) || parallelMessages === 0 || parallelMessages < -1) {\n\t\t\tthrow new NodeOperationError(\n\t\t\t\tthis.getNode(),\n\t\t\t\t'Parallel message processing limit must be a number greater than zero (or -1 for no limit)',\n\t\t\t);\n\t\t}\n\n\t\tlet acknowledgeMode = options.acknowledge ?? 'immediately';\n\n\t\tif (parallelMessages !== -1 && acknowledgeMode === 'immediately') {\n\t\t\t// If parallel message limit is set, then the default mode is \"executionFinishes\"\n\t\t\t// unless acknowledgeMode got set specifically. Be aware that the mode \"immediately\"\n\t\t\t// can not be supported in this case.\n\t\t\tacknowledgeMode = 'executionFinishes';\n\t\t}\n\n\t\tconst messageTracker = new MessageTracker();\n\t\tlet closeGotCalled = false;\n\n\t\tif (parallelMessages !== -1) {\n\t\t\tawait channel.prefetch(parallelMessages);\n\t\t}\n\n\t\tchannel.on('close', () => {\n\t\t\tif (!closeGotCalled) {\n\t\t\t\tthis.emitError(new Error('Connection got closed unexpectedly'));\n\t\t\t}\n\t\t});\n\n\t\tconst consumerInfo = await channel.consume(queue, async (message) => {\n\t\t\tif (message !== null) {\n\t\t\t\ttry {\n\t\t\t\t\tif (acknowledgeMode !== 'immediately') {\n\t\t\t\t\t\tmessageTracker.received(message);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst item = await parseMessage(message, options, this.helpers);\n\n\t\t\t\t\tlet responsePromise: IDeferredPromise<IRun> | undefined = undefined;\n\t\t\t\t\tlet responsePromiseHook: IDeferredPromise<IExecuteResponsePromiseData> | undefined =\n\t\t\t\t\t\tundefined;\n\t\t\t\t\tif (acknowledgeMode !== 'immediately' && acknowledgeMode !== 'laterMessageNode') {\n\t\t\t\t\t\tresponsePromise = this.helpers.createDeferredPromise();\n\t\t\t\t\t} else if (acknowledgeMode === 'laterMessageNode') {\n\t\t\t\t\t\tresponsePromiseHook = this.helpers.createDeferredPromise<IExecuteResponsePromiseData>();\n\t\t\t\t\t}\n\t\t\t\t\tif (responsePromiseHook) {\n\t\t\t\t\t\tthis.emit([[item]], responsePromiseHook, undefined);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.emit([[item]], undefined, responsePromise);\n\t\t\t\t\t}\n\t\t\t\t\tif (responsePromise && acknowledgeMode !== 'laterMessageNode') {\n\t\t\t\t\t\t// Acknowledge message after the execution finished\n\t\t\t\t\t\tawait responsePromise.promise.then(async (data: IRun) => {\n\t\t\t\t\t\t\tif (data.data.resultData.error) {\n\t\t\t\t\t\t\t\t// The execution did fail\n\t\t\t\t\t\t\t\tif (acknowledgeMode === 'executionFinishesSuccessfully') {\n\t\t\t\t\t\t\t\t\tchannel.nack(message);\n\t\t\t\t\t\t\t\t\tmessageTracker.answered(message);\n\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tchannel.ack(message);\n\t\t\t\t\t\t\tmessageTracker.answered(message);\n\t\t\t\t\t\t});\n\t\t\t\t\t} else if (responsePromiseHook && acknowledgeMode === 'laterMessageNode') {\n\t\t\t\t\t\tawait responsePromiseHook.promise.then(() => {\n\t\t\t\t\t\t\tchannel.ack(message);\n\t\t\t\t\t\t\tmessageTracker.answered(message);\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Acknowledge message directly\n\t\t\t\t\t\tchannel.ack(message);\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\tconst workflow = this.getWorkflow();\n\t\t\t\t\tconst node = this.getNode();\n\t\t\t\t\tif (acknowledgeMode !== 'immediately') {\n\t\t\t\t\t\tmessageTracker.answered(message);\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.logger.error(\n\t\t\t\t\t\t`There was a problem with the RabbitMQ Trigger node \"${node.name}\" in workflow \"${workflow.id}\": \"${error.message}\"`,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tnode: node.name,\n\t\t\t\t\t\t\tworkflowId: workflow.id,\n\t\t\t\t\t\t},\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tconst consumerTag = consumerInfo.consumerTag;\n\n\t\t// The \"closeFunction\" function gets called by n8n whenever\n\t\t// the workflow gets deactivated and can so clean up.\n\t\tconst closeFunction = async () => {\n\t\t\tcloseGotCalled = true;\n\t\t\ttry {\n\t\t\t\treturn await messageTracker.closeChannel(channel, consumerTag);\n\t\t\t} catch (error) {\n\t\t\t\tconst workflow = this.getWorkflow();\n\t\t\t\tconst node = this.getNode();\n\t\t\t\tthis.logger.error(\n\t\t\t\t\t`There was a problem closing the RabbitMQ Trigger node connection \"${node.name}\" in workflow \"${workflow.id}\": \"${error.message}\"`,\n\t\t\t\t\t{\n\t\t\t\t\t\tnode: node.name,\n\t\t\t\t\t\tworkflowId: workflow.id,\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t}\n\t\t};\n\n\t\treturn {\n\t\t\tcloseFunction,\n\t\t};\n\t}\n}\n"],"mappings":"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","names":["closeFunction"]}