{"version":3,"sources":["../../../nodes/Onfleet/Onfleet.ts"],"sourcesContent":["import moment from 'moment-timezone';\nimport type {\n\tIDataObject,\n\tIExecuteFunctions,\n\tIHookFunctions,\n\tILoadOptionsFunctions,\n\tINodeExecutionData,\n\tIWebhookFunctions,\n} from 'n8n-workflow';\nimport { NodeOperationError } from 'n8n-workflow';\n\nimport { onfleetApiRequest, onfleetApiRequestAllItems } from './GenericFunctions';\nimport type {\n\tOnfleetAdmins,\n\tOnfleetCloneOverrideTaskOptions,\n\tOnfleetCloneTask,\n\tOnfleetCloneTaskOptions,\n\tOnfleetDestination,\n\tOnfleetHubs,\n\tOnfleetListTaskFilters,\n\tOnfleetRecipient,\n\tOnfleetTask,\n\tOnfleetTaskComplete,\n\tOnfleetTaskUpdate,\n\tOnfleetTeamAutoDispatch,\n\tOnfleetTeams,\n\tOnfleetWebhook,\n\tOnfleetWorker,\n\tOnfleetWorkerEstimates,\n\tOnfleetWorkerFilter,\n\tOnfleetWorkerSchedule,\n\tOnfleetWorkerScheduleEntry,\n} from './interfaces';\n\nconst formatAddress = (\n\tunparsed: boolean,\n\taddress: string | undefined,\n\taddressNumber: string | undefined,\n\taddressStreet: string | undefined,\n\taddressCity: string | undefined,\n\taddressCountry: string | undefined,\n\tadditionalFields: IDataObject,\n): OnfleetDestination => {\n\tlet destination: OnfleetDestination;\n\tif (unparsed) {\n\t\tdestination = { address: { unparsed: address } };\n\t} else {\n\t\tdestination = {\n\t\t\taddress: {\n\t\t\t\tnumber: addressNumber,\n\t\t\t\tstreet: addressStreet,\n\t\t\t\tcity: addressCity,\n\t\t\t\tcountry: addressCountry,\n\t\t\t},\n\t\t};\n\t}\n\n\t// Adding destination extra fields\n\tif (additionalFields.addressName) {\n\t\tdestination.address.name = additionalFields.addressName as string;\n\t}\n\tif (additionalFields.addressApartment) {\n\t\tdestination.address.apartment = additionalFields.addressApartment as string;\n\t}\n\tif (additionalFields.addressState) {\n\t\tdestination.address.state = additionalFields.addressState as string;\n\t}\n\tif (additionalFields.addressPostalCode) {\n\t\tdestination.address.postalCode = additionalFields.addressPostalCode as string;\n\t}\n\tif (additionalFields.addressNotes) {\n\t\tdestination.notes = additionalFields.addressNotes as string;\n\t}\n\treturn destination;\n};\n\nexport class Onfleet {\n\t/**\n\t * Returns a valid formatted destination object\n\t * @param unparsed Whether the address is parsed or not\n\t * @param address Destination address\n\t * @param addressNumber Destination number\n\t * @param addressStreet Destination street\n\t * @param addressCity Destination city\n\t * @param addressCountry Destination country\n\t * @param additionalFields Destination additional fields\n\t */\n\n\t/**\n\t * Gets the properties of a destination according to the operation chose\n\t * @param item Current execution data\n\t * @param operation Current destination operation\n\t * @param shared Whether the collection is in other resource or not\n\t */\n\tstatic getDestinationFields(\n\t\tthis: IWebhookFunctions | IHookFunctions | IExecuteFunctions | ILoadOptionsFunctions,\n\t\titem: number,\n\t\toperation: string,\n\t\tshared: { parent: string } | boolean = false,\n\t): OnfleetDestination | OnfleetDestination[] | null {\n\t\tif (['create', 'update'].includes(operation)) {\n\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\t/*               Get fields for create and update a destination               */\n\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\tif (shared !== false) {\n\t\t\t\tlet destination;\n\t\t\t\tif (typeof shared === 'boolean' && shared) {\n\t\t\t\t\tconst { destinationProperties = {} } = this.getNodeParameter(\n\t\t\t\t\t\t'destination',\n\t\t\t\t\t\titem,\n\t\t\t\t\t) as IDataObject;\n\t\t\t\t\tdestination = destinationProperties;\n\t\t\t\t} else if (typeof shared !== 'boolean') {\n\t\t\t\t\tconst { destination: destinationCollection = {} } = this.getNodeParameter(\n\t\t\t\t\t\tshared.parent,\n\t\t\t\t\t\titem,\n\t\t\t\t\t) as IDataObject;\n\t\t\t\t\tdestination = (destinationCollection as IDataObject).destinationProperties;\n\t\t\t\t}\n\n\t\t\t\tif (!destination || Object.keys(destination as IDataObject).length === 0) {\n\t\t\t\t\treturn [];\n\t\t\t\t}\n\n\t\t\t\tconst {\n\t\t\t\t\tunparsed,\n\t\t\t\t\taddress,\n\t\t\t\t\taddressNumber,\n\t\t\t\t\taddressStreet,\n\t\t\t\t\taddressCity,\n\t\t\t\t\taddressCountry,\n\t\t\t\t\t...additionalFields\n\t\t\t\t} = destination as IDataObject;\n\t\t\t\treturn formatAddress(\n\t\t\t\t\tunparsed as boolean,\n\t\t\t\t\taddress as string,\n\t\t\t\t\taddressNumber as string,\n\t\t\t\t\taddressStreet as string,\n\t\t\t\t\taddressCity as string,\n\t\t\t\t\taddressCountry as string,\n\t\t\t\t\tadditionalFields as IDataObject,\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tlet address, addressNumber, addressStreet, addressCity, addressCountry;\n\t\t\t\tconst unparsed = this.getNodeParameter('unparsed', item) as boolean;\n\t\t\t\tif (unparsed) {\n\t\t\t\t\taddress = this.getNodeParameter('address', item) as string;\n\t\t\t\t} else {\n\t\t\t\t\taddressNumber = this.getNodeParameter('addressNumber', item) as string;\n\t\t\t\t\taddressStreet = this.getNodeParameter('addressStreet', item) as string;\n\t\t\t\t\taddressCity = this.getNodeParameter('addressCity', item) as string;\n\t\t\t\t\taddressCountry = this.getNodeParameter('addressCountry', item) as string;\n\t\t\t\t}\n\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', item) as IDataObject;\n\n\t\t\t\treturn formatAddress(\n\t\t\t\t\tunparsed,\n\t\t\t\t\taddress,\n\t\t\t\t\taddressNumber,\n\t\t\t\t\taddressStreet,\n\t\t\t\t\taddressCity,\n\t\t\t\t\taddressCountry,\n\t\t\t\t\tadditionalFields,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * Gets the properties of an administrator according to the operation chose\n\t * @param item Current execution data\n\t * @param operation Current administrator operation\n\t */\n\tstatic getAdminFields(\n\t\tthis: IExecuteFunctions,\n\t\titem: number,\n\t\toperation: string,\n\t): OnfleetAdmins | null {\n\t\tif (operation === 'create') {\n\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\t/*                         Get fields for create admin                        */\n\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\tconst name = this.getNodeParameter('name', item) as string;\n\t\t\tconst email = this.getNodeParameter('email', item) as string;\n\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', item);\n\n\t\t\tconst adminData: OnfleetAdmins = { name, email };\n\t\t\t// Adding additional fields\n\t\t\tObject.assign(adminData, additionalFields);\n\n\t\t\treturn adminData;\n\t\t} else if (operation === 'update') {\n\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\t/*                         Get fields for update admin                        */\n\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\tconst updateFields = this.getNodeParameter('updateFields', item);\n\t\t\tconst adminData: OnfleetAdmins = {};\n\t\t\tif (!Object.keys(updateFields).length) {\n\t\t\t\tthrow new NodeOperationError(this.getNode(), 'Select at least one field to be updated');\n\t\t\t}\n\t\t\t// Adding additional fields\n\t\t\tObject.assign(adminData, updateFields);\n\t\t\treturn adminData;\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * Gets the properties of a hub according to the operation chose\n\t * @param item Current execution data\n\t * @param operation Current hub operation\n\t */\n\tstatic getHubFields(\n\t\tthis: IExecuteFunctions,\n\t\titem: number,\n\t\toperation: string,\n\t): OnfleetHubs | null {\n\t\tif (operation === 'create') {\n\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\t/*                          Get fields for create hub                         */\n\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\tconst destination = Onfleet.getDestinationFields.call(\n\t\t\t\tthis,\n\t\t\t\titem,\n\t\t\t\toperation,\n\t\t\t\ttrue,\n\t\t\t) as OnfleetDestination;\n\t\t\tconst name = this.getNodeParameter('name', item) as string;\n\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', item);\n\n\t\t\tconst hubData: OnfleetHubs = { name, ...destination };\n\n\t\t\t// Adding additional fields\n\t\t\tObject.assign(hubData, additionalFields);\n\n\t\t\treturn hubData;\n\t\t} else if (operation === 'update') {\n\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\t/*                          Get fields for update hub                         */\n\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\tconst destination = Onfleet.getDestinationFields.call(this, item, operation, {\n\t\t\t\tparent: 'updateFields',\n\t\t\t}) as OnfleetDestination;\n\t\t\tconst hubData: OnfleetHubs = { ...destination };\n\n\t\t\t// Adding additional fields\n\t\t\tconst updateFields = this.getNodeParameter('updateFields', item);\n\n\t\t\tif (!Object.keys(updateFields).length) {\n\t\t\t\tthrow new NodeOperationError(this.getNode(), 'Select at least one field to be updated');\n\t\t\t}\n\n\t\t\tObject.assign(hubData, updateFields);\n\t\t\treturn hubData;\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * Gets the properties of a worker according to the operation chose\n\t * @param item Current execution data\n\t * @param operation Current worker operation\n\t */\n\tstatic getWorkerFields(\n\t\tthis: IExecuteFunctions,\n\t\titem: number,\n\t\toperation: string,\n\t): OnfleetWorker | OnfleetWorkerFilter | OnfleetWorkerSchedule | null {\n\t\tif (operation === 'create') {\n\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\t/*                        Get fields for create worker                        */\n\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\tconst name = this.getNodeParameter('name', item) as string;\n\t\t\tconst phone = this.getNodeParameter('phone', item) as string;\n\t\t\tconst teams = this.getNodeParameter('teams', item) as string[];\n\t\t\tconst workerData: OnfleetWorker = { name, phone, teams };\n\n\t\t\t// Adding additional fields\n\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', item);\n\n\t\t\tif (additionalFields.vehicle) {\n\t\t\t\tconst { vehicleProperties } = additionalFields.vehicle as IDataObject;\n\t\t\t\tObject.assign(workerData, { vehicle: vehicleProperties });\n\t\t\t\tdelete additionalFields.vehicle;\n\t\t\t}\n\n\t\t\tObject.assign(workerData, additionalFields);\n\n\t\t\treturn workerData;\n\t\t} else if (operation === 'update') {\n\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\t/*                        Get fields for update worker                        */\n\t\t\t/* -------------------------------------------------------------------------- */\n\n\t\t\tconst workerData: OnfleetWorker = {};\n\n\t\t\t// Adding additional fields\n\t\t\tconst updateFields = this.getNodeParameter('updateFields', item);\n\n\t\t\tif (!Object.keys(updateFields).length) {\n\t\t\t\tthrow new NodeOperationError(this.getNode(), 'Select at least one field to be updated');\n\t\t\t}\n\n\t\t\tObject.assign(workerData, updateFields);\n\t\t\treturn workerData;\n\t\t} else if (operation === 'get') {\n\t\t\tconst options = this.getNodeParameter('options', item, {});\n\t\t\tconst workerFilter: OnfleetWorkerFilter = {};\n\t\t\tif (options.filter) {\n\t\t\t\toptions.filter = (options.filter as string[]).join(',');\n\t\t\t}\n\t\t\tif (typeof options.analytics === 'boolean') {\n\t\t\t\toptions.analytics = options.analytics ? 'true' : 'false';\n\t\t\t}\n\t\t\tObject.assign(workerFilter, options);\n\t\t\treturn workerFilter;\n\t\t} else if (operation === 'getAll') {\n\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\t/*                    Get fields for get and getAll workers                   */\n\t\t\t/* -------------------------------------------------------------------------- */\n\n\t\t\tconst options = this.getNodeParameter('options', item, {});\n\t\t\tconst filters = this.getNodeParameter('filters', item, {});\n\t\t\tconst workerFilter: OnfleetWorkerFilter = {};\n\n\t\t\tif (filters.states) {\n\t\t\t\tfilters.states = (filters.states as number[]).join(',');\n\t\t\t}\n\t\t\tif (filters.teams) {\n\t\t\t\tfilters.teams = (filters.teams as string[]).join(',');\n\t\t\t}\n\t\t\tif (filters.phones) {\n\t\t\t\tfilters.phones = (filters.phones as string[]).join(',');\n\t\t\t}\n\t\t\tif (options.filter) {\n\t\t\t\toptions.filter = (options.filter as string[]).join(',');\n\t\t\t}\n\n\t\t\tObject.assign(workerFilter, options);\n\t\t\tObject.assign(workerFilter, filters);\n\t\t\treturn workerFilter;\n\t\t} else if (operation === 'setSchedule') {\n\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\t/*                            Set a worker schedule                           */\n\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\tconst { scheduleProperties } = this.getNodeParameter('schedule', item) as IDataObject;\n\t\t\tconst entries = ((scheduleProperties as IDataObject[]) || []).map((entry) => {\n\t\t\t\tconst { timezone, date, shifts } = entry;\n\t\t\t\tconst { shiftsProperties } = shifts as IDataObject;\n\t\t\t\treturn {\n\t\t\t\t\ttimezone: timezone as string,\n\t\t\t\t\tdate: moment(date as Date).format('YYYY-MM-DD'),\n\t\t\t\t\tshifts: (shiftsProperties as IDataObject[]).map(({ start, end }) => [\n\t\t\t\t\t\tnew Date(start as Date).getTime(),\n\t\t\t\t\t\tnew Date(end as Date).getTime(),\n\t\t\t\t\t]),\n\t\t\t\t} as OnfleetWorkerScheduleEntry;\n\t\t\t});\n\t\t\treturn { entries } as OnfleetWorkerSchedule;\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * Gets the properties of a webhooks according to the operation chose\n\t * @param item Current execution data\n\t * @param operation Current webhooks operation\n\t */\n\tstatic getWebhookFields(\n\t\tthis: IExecuteFunctions,\n\t\titem: number,\n\t\toperation: string,\n\t): OnfleetWebhook | null {\n\t\tif (operation === 'create') {\n\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\t/*                        Get fields for create webhook                       */\n\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\tconst url = this.getNodeParameter('url', item) as string;\n\t\t\tconst name = this.getNodeParameter('name', item) as string;\n\t\t\tconst trigger = this.getNodeParameter('trigger', item) as number;\n\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', item);\n\n\t\t\tconst webhookData: OnfleetWebhook = { url, name, trigger };\n\t\t\t// Adding additional fields\n\t\t\tObject.assign(webhookData, additionalFields);\n\n\t\t\treturn webhookData;\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * Returns a valid formatted recipient object\n\t * @param name Recipient name\n\t * @param phone Recipient phone\n\t * @param additionalFields Recipient additional fields\n\t */\n\tstatic formatRecipient(\n\t\tname: string,\n\t\tphone: string,\n\t\tadditionalFields: IDataObject,\n\t\toptions: IDataObject = {},\n\t): OnfleetRecipient {\n\t\tconst recipient: OnfleetRecipient = { name, phone };\n\n\t\t// Adding recipient extra fields\n\t\tif (additionalFields.recipientNotes) {\n\t\t\trecipient.notes = additionalFields.recipientNotes as string;\n\t\t}\n\t\tif (additionalFields.recipientSkipSMSNotifications) {\n\t\t\trecipient.skipSMSNotifications = additionalFields.recipientSkipSMSNotifications as boolean;\n\t\t}\n\t\tif ('recipientSkipPhoneNumberValidation' in options) {\n\t\t\trecipient.skipPhoneNumberValidation =\n\t\t\t\t(options.recipientSkipPhoneNumberValidation as boolean) || false;\n\t\t}\n\n\t\treturn recipient;\n\t}\n\n\t/**\n\t * Gets the properties of a recipient according to the operation chose\n\t * @param item Current execution data\n\t * @param operation Current recipient operation\n\t * @param shared Whether the collection is in other resource or not\n\t */\n\tstatic getRecipientFields(\n\t\tthis: IWebhookFunctions | IHookFunctions | IExecuteFunctions | ILoadOptionsFunctions,\n\t\titem: number,\n\t\toperation: string,\n\t\tshared = false,\n\t): OnfleetRecipient | OnfleetRecipient[] | null {\n\t\tif (operation === 'create') {\n\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\t/*                       Get fields to create recipient                       */\n\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\tif (shared) {\n\t\t\t\tconst { recipient: recipientData = {} } = this.getNodeParameter(\n\t\t\t\t\t'additionalFields',\n\t\t\t\t\titem,\n\t\t\t\t\t{},\n\t\t\t\t) as IDataObject;\n\t\t\t\tconst options = this.getNodeParameter('options', item, {}) as IDataObject;\n\t\t\t\tconst { recipientProperties: recipient = {} } = recipientData as IDataObject;\n\t\t\t\tif (!recipient || Object.keys(recipient).length === 0) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\tconst {\n\t\t\t\t\trecipientName: name,\n\t\t\t\t\trecipientPhone: phone,\n\t\t\t\t\t...additionalFields\n\t\t\t\t} = recipient as IDataObject;\n\t\t\t\treturn Onfleet.formatRecipient(\n\t\t\t\t\tname as string,\n\t\t\t\t\tphone as string,\n\t\t\t\t\tadditionalFields as IDataObject,\n\t\t\t\t\toptions,\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tconst name = this.getNodeParameter('recipientName', item) as string;\n\t\t\t\tconst phone = this.getNodeParameter('recipientPhone', item) as string;\n\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', item) as IDataObject;\n\t\t\t\tconst options = this.getNodeParameter('options', item) as IDataObject;\n\t\t\t\treturn Onfleet.formatRecipient(name, phone, additionalFields, options);\n\t\t\t}\n\t\t} else if (operation === 'update') {\n\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\t/*                       Get fields to update recipient                       */\n\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\tconst {\n\t\t\t\trecipientName: name = '',\n\t\t\t\trecipientPhone: phone = '',\n\t\t\t\t...additionalFields\n\t\t\t} = this.getNodeParameter('updateFields', item) as IDataObject;\n\n\t\t\tconst recipientData: OnfleetRecipient = {};\n\n\t\t\t// Adding additional fields\n\t\t\tif (name) {\n\t\t\t\trecipientData.name = name as string;\n\t\t\t}\n\t\t\tif (phone) {\n\t\t\t\trecipientData.phone = phone as string;\n\t\t\t}\n\t\t\tObject.assign(recipientData, additionalFields);\n\t\t\treturn recipientData;\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * Gets the properties of a task according to the operation chose\n\t * @param item Current execution data\n\t * @param operation Current task operation\n\t */\n\tstatic getTaskFields(\n\t\tthis: IWebhookFunctions | IHookFunctions | IExecuteFunctions | ILoadOptionsFunctions,\n\t\titem: number,\n\t\toperation: string,\n\t):\n\t\t| OnfleetListTaskFilters\n\t\t| OnfleetTask\n\t\t| OnfleetCloneTask\n\t\t| OnfleetTaskComplete\n\t\t| OnfleetTaskUpdate\n\t\t| null {\n\t\tif (operation === 'create') {\n\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\t/*                         Get fields to create a task                        */\n\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', item) as IDataObject;\n\t\t\tconst destination = Onfleet.getDestinationFields.call(\n\t\t\t\tthis,\n\t\t\t\titem,\n\t\t\t\toperation,\n\t\t\t\ttrue,\n\t\t\t) as OnfleetDestination;\n\n\t\t\t// Adding recipients information\n\t\t\tconst recipient = Onfleet.getRecipientFields.call(\n\t\t\t\tthis,\n\t\t\t\titem,\n\t\t\t\toperation,\n\t\t\t\ttrue,\n\t\t\t) as OnfleetRecipient;\n\n\t\t\tconst taskData: OnfleetTask = { destination, recipients: [recipient] };\n\t\t\tconst { completeAfter = null, completeBefore = null, ...extraFields } = additionalFields;\n\t\t\tif (completeAfter) taskData.completeAfter = new Date(completeAfter as Date).getTime();\n\t\t\tif (completeBefore) taskData.completeBefore = new Date(completeBefore as Date).getTime();\n\n\t\t\tObject.assign(taskData, extraFields);\n\t\t\treturn taskData;\n\t\t} else if (operation === 'update') {\n\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\t/*                          Get fields to update task                         */\n\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\tconst updateFields = this.getNodeParameter('updateFields', item) as IDataObject;\n\t\t\tconst taskData: OnfleetTaskUpdate = {};\n\n\t\t\tif (!Object.keys(updateFields).length) {\n\t\t\t\tthrow new NodeOperationError(this.getNode(), 'Select at least one field to be updated');\n\t\t\t}\n\n\t\t\tconst { completeAfter = null, completeBefore = null, ...extraFields } = updateFields;\n\t\t\tif (completeAfter) taskData.completeAfter = new Date(completeAfter as Date).getTime();\n\t\t\tif (completeBefore) taskData.completeBefore = new Date(completeBefore as Date).getTime();\n\t\t\tObject.assign(taskData, extraFields);\n\t\t\treturn taskData;\n\t\t} else if (operation === 'clone') {\n\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\t/*                          Get fields to clone task                          */\n\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\tconst overrideFields = this.getNodeParameter('overrideFields', item) as IDataObject;\n\n\t\t\tconst options: OnfleetCloneTaskOptions = {};\n\t\t\tif (overrideFields.includeMetadata) {\n\t\t\t\toptions.includeMetadata = overrideFields.includeMetadata as boolean;\n\t\t\t}\n\n\t\t\tif (overrideFields.includeBarcodes) {\n\t\t\t\toptions.includeBarcodes = overrideFields.includeBarcodes as boolean;\n\t\t\t}\n\n\t\t\tif (overrideFields.includeDependencies) {\n\t\t\t\toptions.includeDependencies = overrideFields.includeDependencies as boolean;\n\t\t\t}\n\n\t\t\t// Adding overrides data\n\t\t\tconst { notes, pickupTask, serviceTime, completeAfter, completeBefore } = overrideFields;\n\t\t\tconst overridesData = {} as OnfleetCloneOverrideTaskOptions;\n\n\t\t\tif (notes) overridesData.notes = notes as string;\n\t\t\tif (typeof pickupTask !== 'undefined') overridesData.pickupTask = pickupTask as boolean;\n\t\t\tif (serviceTime) overridesData.serviceTime = serviceTime as number;\n\t\t\tif (completeAfter) overridesData.completeAfter = new Date(completeAfter as Date).getTime();\n\t\t\tif (completeBefore) overridesData.completeBefore = new Date(completeBefore as Date).getTime();\n\n\t\t\tif (overridesData && Object.keys(overridesData).length > 0) {\n\t\t\t\toptions.overrides = overridesData;\n\t\t\t}\n\n\t\t\treturn { options } as OnfleetCloneTask;\n\t\t} else if (operation === 'getAll') {\n\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\t/*                          Get fields to list tasks                          */\n\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\tconst filters = this.getNodeParameter('filters', item) as IDataObject;\n\t\t\tconst listTaskData: OnfleetListTaskFilters = {};\n\n\t\t\tconst allStates = '0,1,2,3';\n\n\t\t\tconst twoWeeksInMilisecods = () => 604800 * 1000;\n\n\t\t\t// Adding extra fields to search tasks\n\t\t\tif (filters.from) {\n\t\t\t\tlistTaskData.from = new Date(filters.from as Date).getTime();\n\t\t\t} else {\n\t\t\t\tlistTaskData.from = new Date().getTime() - twoWeeksInMilisecods();\n\t\t\t}\n\t\t\tif (filters.to) {\n\t\t\t\tlistTaskData.to = new Date(filters.to as Date).getTime();\n\t\t\t}\n\t\t\tif (filters.state) {\n\t\t\t\tlistTaskData.state = (filters.state as number[]).join(',');\n\t\t\t\tif (listTaskData.state.includes('all')) {\n\t\t\t\t\tlistTaskData.state = allStates;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn listTaskData;\n\t\t} else if (operation === 'complete') {\n\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\t/*                        Get fields to complete a task                       */\n\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', item) as IDataObject;\n\t\t\tconst success = this.getNodeParameter('success', item) as boolean;\n\t\t\tconst taskData: OnfleetTaskComplete = { completionDetails: { success } };\n\t\t\tif (additionalFields.notes) {\n\t\t\t\ttaskData.completionDetails.notes = additionalFields.notes as string;\n\t\t\t}\n\t\t\treturn taskData;\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * Gets the properties of a team according to the operation chose\n\t * @param item Current execution data\n\t * @param operation Current team operation\n\t */\n\tstatic getTeamFields(\n\t\tthis: IExecuteFunctions,\n\t\titem: number,\n\t\toperation: string,\n\t): OnfleetTeams | OnfleetWorkerEstimates | OnfleetTeamAutoDispatch | null {\n\t\tif (operation === 'create') {\n\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\t/*                         Get fields to create a team                        */\n\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\tconst name = this.getNodeParameter('name', item) as string;\n\t\t\tconst workers = this.getNodeParameter('workers', item) as string[];\n\t\t\tconst managers = this.getNodeParameter('managers', item) as string[];\n\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', item);\n\n\t\t\tconst teamData: OnfleetTeams = { name, workers, managers };\n\t\t\t// Adding additional fields\n\t\t\tObject.assign(teamData, additionalFields);\n\n\t\t\treturn teamData;\n\t\t} else if (operation === 'update') {\n\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\t/*                         Get fields to update a team                        */\n\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\tconst teamData: OnfleetTeams = {};\n\t\t\t// Adding additional fields\n\t\t\tconst updateFields = this.getNodeParameter('updateFields', item);\n\n\t\t\tif (!Object.keys(updateFields).length) {\n\t\t\t\tthrow new NodeOperationError(this.getNode(), 'Select at least one field to be updated');\n\t\t\t}\n\n\t\t\tObject.assign(teamData, updateFields);\n\t\t\treturn teamData;\n\t\t} else if (operation === 'getTimeEstimates') {\n\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\t/*      Get driver time estimates for tasks that haven't been created yet     */\n\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\tconst {\n\t\t\t\tdropOff = {},\n\t\t\t\tpickUp = {},\n\t\t\t\t...additionalFields\n\t\t\t} = this.getNodeParameter('filters', item);\n\t\t\tconst { dropOffProperties = {} } = dropOff as IDataObject;\n\t\t\tconst { pickUpProperties = {} } = pickUp as IDataObject;\n\t\t\tconst hasPickUp = pickUp && Object.keys(pickUpProperties as IDataObject).length > 0;\n\t\t\tconst hasDropOff =\n\t\t\t\tdropOffProperties && Object.keys(dropOffProperties as IDataObject).length > 0;\n\n\t\t\tif (!hasPickUp && !hasDropOff) {\n\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t'At least 1 of Drop-Off location or Pick-Up location must be selected',\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tconst workerTimeEstimates = {} as OnfleetWorkerEstimates;\n\t\t\tif (hasPickUp) {\n\t\t\t\tconst {\n\t\t\t\t\tpickupLongitude: longitude,\n\t\t\t\t\tpickupLatitude: latitude,\n\t\t\t\t\tpickupTime,\n\t\t\t\t} = pickUpProperties as IDataObject;\n\t\t\t\tworkerTimeEstimates.pickupLocation = `${longitude},${latitude}`;\n\t\t\t\tif (pickupTime) {\n\t\t\t\t\tworkerTimeEstimates.pickupTime = moment(new Date(pickupTime as Date))\n\t\t\t\t\t\t.local()\n\t\t\t\t\t\t.unix();\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (hasDropOff) {\n\t\t\t\tconst { dropOffLongitude: longitude, dropOffLatitude: latitude } =\n\t\t\t\t\tdropOffProperties as IDataObject;\n\t\t\t\tworkerTimeEstimates.dropoffLocation = `${longitude},${latitude}`;\n\t\t\t}\n\n\t\t\tObject.assign(workerTimeEstimates, additionalFields);\n\t\t\treturn workerTimeEstimates;\n\t\t} else if (operation === 'autoDispatch') {\n\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\t/*                  Dynamically dispatching tasks on the fly                  */\n\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\tconst teamAutoDispatch = {} as OnfleetTeamAutoDispatch;\n\t\t\tconst {\n\t\t\t\tscheduleTimeWindow = {},\n\t\t\t\ttaskTimeWindow = {},\n\t\t\t\tendingRoute = {},\n\t\t\t\t...additionalFields\n\t\t\t} = this.getNodeParameter('additionalFields', item);\n\t\t\tconst { endingRouteProperties = {} } = endingRoute as IDataObject;\n\t\t\tconst { scheduleTimeWindowProperties = {} } = scheduleTimeWindow as IDataObject;\n\t\t\tconst { taskTimeWindowProperties = {} } = taskTimeWindow as IDataObject;\n\n\t\t\tif (\n\t\t\t\tscheduleTimeWindowProperties &&\n\t\t\t\tObject.keys(scheduleTimeWindowProperties as IDataObject).length > 0\n\t\t\t) {\n\t\t\t\tconst { startTime, endTime } = scheduleTimeWindowProperties as IDataObject;\n\t\t\t\tteamAutoDispatch.scheduleTimeWindow = [\n\t\t\t\t\tmoment(new Date(startTime as Date))\n\t\t\t\t\t\t.local()\n\t\t\t\t\t\t.unix(),\n\t\t\t\t\tmoment(new Date(endTime as Date))\n\t\t\t\t\t\t.local()\n\t\t\t\t\t\t.unix(),\n\t\t\t\t];\n\t\t\t}\n\n\t\t\tif (endingRouteProperties && Object.keys(endingRouteProperties as IDataObject).length > 0) {\n\t\t\t\tconst { routeEnd, hub } = endingRouteProperties as IDataObject;\n\t\t\t\tteamAutoDispatch.routeEnd = {\n\t\t\t\t\tanywhere: null,\n\t\t\t\t\thub: `hub://${hub}`,\n\t\t\t\t\tteam_hub: 'teams://DEFAULT',\n\t\t\t\t\tworker_routing_address: 'workers://ROUTING_ADDRESS',\n\t\t\t\t}[routeEnd as string] as string;\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\ttaskTimeWindowProperties &&\n\t\t\t\tObject.keys(taskTimeWindowProperties as IDataObject).length > 0\n\t\t\t) {\n\t\t\t\tconst { startTime, endTime } = taskTimeWindowProperties as IDataObject;\n\t\t\t\tteamAutoDispatch.taskTimeWindow = [\n\t\t\t\t\tmoment(new Date(startTime as Date))\n\t\t\t\t\t\t.local()\n\t\t\t\t\t\t.unix(),\n\t\t\t\t\tmoment(new Date(endTime as Date))\n\t\t\t\t\t\t.local()\n\t\t\t\t\t\t.unix(),\n\t\t\t\t];\n\t\t\t}\n\n\t\t\tObject.assign(teamAutoDispatch, additionalFields);\n\t\t\treturn teamAutoDispatch;\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * Execute the task operations\n\t * @param resource Resource to be executed (Task)\n\t * @param operation Operation to be executed\n\t * @param items Number of items to process by the node\n\t */\n\tstatic async executeTaskOperations(\n\t\tthis: IWebhookFunctions | IHookFunctions | IExecuteFunctions | ILoadOptionsFunctions,\n\t\tresource: string,\n\t\toperation: string,\n\t\titems: INodeExecutionData[],\n\t): Promise<IDataObject | IDataObject[]> {\n\t\tif (operation === 'create' && Object.keys(items).length > 1) {\n\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\t/*                       Create multiple tasks by batch                       */\n\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\tconst path = `${resource}/batch`;\n\t\t\tconst tasksData = {\n\t\t\t\ttasks: items.map((_item, index) => Onfleet.getTaskFields.call(this, index, operation)),\n\t\t\t};\n\t\t\tconst { tasks: tasksCreated } = await onfleetApiRequest.call(this, 'POST', path, tasksData);\n\t\t\treturn tasksCreated;\n\t\t}\n\n\t\tconst responseData = [];\n\t\tfor (const key of Object.keys(items)) {\n\t\t\tconst index = Number(key);\n\t\t\ttry {\n\t\t\t\tif (operation === 'create') {\n\t\t\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\t\t\t/*                              Create a new task                             */\n\t\t\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\t\t\tconst taskData = Onfleet.getTaskFields.call(this, index, operation);\n\t\t\t\t\tif (!taskData) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tresponseData.push(await onfleetApiRequest.call(this, 'POST', resource, taskData));\n\t\t\t\t} else if (operation === 'get') {\n\t\t\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\t\t\t/*                              Get a single task                             */\n\t\t\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\t\t\tconst id = this.getNodeParameter('id', index) as string;\n\t\t\t\t\tconst shortId = String(id).length <= 8;\n\t\t\t\t\tconst path = `${resource}${shortId ? '/shortId' : ''}/${id}`;\n\t\t\t\t\tresponseData.push(await onfleetApiRequest.call(this, 'GET', path));\n\t\t\t\t} else if (operation === 'clone') {\n\t\t\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\t\t\t/*                                Clone a task                                */\n\t\t\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\t\t\tconst id = this.getNodeParameter('id', index) as string;\n\n\t\t\t\t\tconst taskData = Onfleet.getTaskFields.call(this, index, operation) as any;\n\t\t\t\t\tif (!taskData) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tconst path = `${resource}/${id}/clone`;\n\t\t\t\t\tresponseData.push(await onfleetApiRequest.call(this, 'POST', path, taskData));\n\t\t\t\t} else if (operation === 'delete') {\n\t\t\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\t\t\t/*                            Delete a single task                            */\n\t\t\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\t\t\tconst id = this.getNodeParameter('id', index) as string;\n\t\t\t\t\tconst path = `${resource}/${id}`;\n\t\t\t\t\tawait onfleetApiRequest.call(this, 'DELETE', path);\n\t\t\t\t\tresponseData.push({ success: true });\n\t\t\t\t} else if (operation === 'getAll') {\n\t\t\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\t\t\t/*                                Get all tasks                               */\n\t\t\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\t\t\tconst taskData = Onfleet.getTaskFields.call(this, 0, operation) as IDataObject;\n\t\t\t\t\tif (!taskData) return [];\n\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', 0, false);\n\t\t\t\t\tconst path = `${resource}/all`;\n\t\t\t\t\tlet tasks;\n\t\t\t\t\tif (returnAll === true) {\n\t\t\t\t\t\ttasks = await onfleetApiRequestAllItems.call(this, 'tasks', 'GET', path, {}, taskData);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst limit = this.getNodeParameter('limit', 0);\n\t\t\t\t\t\ttasks = await onfleetApiRequest.call(this, 'GET', path, {}, taskData);\n\t\t\t\t\t\ttasks = tasks.tasks;\n\t\t\t\t\t\ttasks = tasks.splice(0, limit);\n\t\t\t\t\t}\n\t\t\t\t\tresponseData.push(...(tasks as IDataObject[]));\n\t\t\t\t} else if (operation === 'complete') {\n\t\t\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\t\t\t/*                            Force complete a task                           */\n\t\t\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\t\t\tconst id = this.getNodeParameter('id', index) as string;\n\t\t\t\t\tconst taskData = Onfleet.getTaskFields.call(this, index, operation);\n\t\t\t\t\tif (!taskData) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tconst path = `${resource}/${id}/complete`;\n\t\t\t\t\tawait onfleetApiRequest.call(this, 'POST', path, taskData);\n\t\t\t\t\tresponseData.push({ success: true });\n\t\t\t\t} else if (operation === 'update') {\n\t\t\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\t\t\t/*                                Update a task                               */\n\t\t\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\t\t\tconst id = this.getNodeParameter('id', 0) as string;\n\t\t\t\t\tconst path = `${resource}/${id}`;\n\t\t\t\t\tconst taskData = Onfleet.getTaskFields.call(this, index, operation);\n\t\t\t\t\tif (!taskData) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tresponseData.push(await onfleetApiRequest.call(this, 'PUT', path, taskData));\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\t//@ts-ignore\n\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\tresponseData.push({ error: (error as IDataObject).toString() });\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\t\treturn responseData;\n\t}\n\n\t/**\n\t * Execute the destination operations\n\t * @param resource Resource to be executed (Destination)\n\t * @param operation Operation to be executed\n\t * @param items Number of items to process by the node\n\t */\n\tstatic async executeDestinationOperations(\n\t\tthis: IExecuteFunctions,\n\t\tresource: string,\n\t\toperation: string,\n\t\titems: INodeExecutionData[],\n\t): Promise<IDataObject | IDataObject[]> {\n\t\tconst responseData = [];\n\t\tfor (const key of Object.keys(items)) {\n\t\t\tconst index = Number(key);\n\t\t\ttry {\n\t\t\t\tif (operation === 'create') {\n\t\t\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\t\t\t/*                             Create destination                             */\n\t\t\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\t\t\tconst destinationData = Onfleet.getDestinationFields.call(this, index, operation);\n\t\t\t\t\tif (!destinationData) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tresponseData.push(await onfleetApiRequest.call(this, 'POST', resource, destinationData));\n\t\t\t\t} else if (operation === 'get') {\n\t\t\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\t\t\t/*                           Get single destination                           */\n\t\t\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\t\t\tconst id = this.getNodeParameter('id', index) as string;\n\t\t\t\t\tconst path = `${resource}/${id}`;\n\t\t\t\t\tresponseData.push(await onfleetApiRequest.call(this, 'GET', path));\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\tresponseData.push({ error: (error as IDataObject).toString() });\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\n\t\treturn responseData;\n\t}\n\n\t/**\n\t * Execute the organization operations\n\t * @param resource Resource to be executed (Organization)\n\t * @param operation Operation to be executed\n\t * @param items Number of items to process by the node\n\t */\n\tstatic async executeOrganizationOperations(\n\t\tthis: IExecuteFunctions,\n\t\tresource: string,\n\t\toperation: string,\n\t\titems: INodeExecutionData[],\n\t): Promise<IDataObject | IDataObject[]> {\n\t\tconst responseData = [];\n\t\tfor (const key of Object.keys(items)) {\n\t\t\tconst index = Number(key);\n\t\t\ttry {\n\t\t\t\tif (operation === 'get') {\n\t\t\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\t\t\t/*                          Get organization details                          */\n\t\t\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\t\t\tconst path = 'organization';\n\t\t\t\t\tresponseData.push(await onfleetApiRequest.call(this, 'GET', path));\n\t\t\t\t} else if (operation === 'getDelegatee') {\n\t\t\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\t\t\t/*                         Get organization delegatee                         */\n\t\t\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\t\t\tconst id = this.getNodeParameter('id', index) as string;\n\t\t\t\t\tconst path = `${resource}/${id}`;\n\t\t\t\t\tresponseData.push(await onfleetApiRequest.call(this, 'GET', path));\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\tresponseData.push({ error: (error as IDataObject).toString() });\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\n\t\treturn responseData;\n\t}\n\n\t/**\n\t * Execute the recipient operations\n\t * @param resource Resource to be executed (Recipient)\n\t * @param operation Operation to be executed\n\t * @param items Number of items to process by the node\n\t */\n\tstatic async executeRecipientOperations(\n\t\tthis: IExecuteFunctions,\n\t\tresource: string,\n\t\toperation: string,\n\t\titems: INodeExecutionData[],\n\t): Promise<IDataObject | IDataObject[]> {\n\t\tconst responseData = [];\n\t\tfor (const key of Object.keys(items)) {\n\t\t\tconst index = Number(key);\n\t\t\ttry {\n\t\t\t\tif (operation === 'create') {\n\t\t\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\t\t\t/*                           Create a new recipient                           */\n\t\t\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\t\t\tconst recipientData = Onfleet.getRecipientFields.call(this, index, operation);\n\t\t\t\t\tif (!recipientData) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tresponseData.push(await onfleetApiRequest.call(this, 'POST', resource, recipientData));\n\t\t\t\t} else if (operation === 'update') {\n\t\t\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\t\t\t/*                             Update a recipient                             */\n\t\t\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\t\t\tconst recipientData = Onfleet.getRecipientFields.call(this, index, operation);\n\t\t\t\t\tif (!recipientData) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tconst id = this.getNodeParameter('id', index) as string;\n\t\t\t\t\tconst path = `${resource}/${id}`;\n\t\t\t\t\tresponseData.push(await onfleetApiRequest.call(this, 'PUT', path, recipientData));\n\t\t\t\t} else if (operation === 'get') {\n\t\t\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\t\t\t/*                          Get recipient information                         */\n\t\t\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\t\t\tconst lookupBy = this.getNodeParameter('getBy', index) as string;\n\t\t\t\t\tconst lookupByValue = this.getNodeParameter(lookupBy, index) as string;\n\t\t\t\t\tconst path = `${resource}${lookupBy === 'id' ? '' : '/' + lookupBy}/${lookupByValue}`;\n\t\t\t\t\tresponseData.push(await onfleetApiRequest.call(this, 'GET', path));\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\tresponseData.push({ error: (error as IDataObject).toString() });\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\n\t\treturn responseData;\n\t}\n\n\t/**\n\t * Execute the administrator operations\n\t * @param resource Resource to be executed (Administrator)\n\t * @param operation Operation to be executed\n\t * @param items Number of items to process by the node\n\t */\n\tstatic async executeAdministratorOperations(\n\t\tthis: IExecuteFunctions,\n\t\tresource: string,\n\t\toperation: string,\n\t\titems: INodeExecutionData[],\n\t): Promise<IDataObject | IDataObject[]> {\n\t\tconst responseData = [];\n\t\tfor (const key of Object.keys(items)) {\n\t\t\tconst index = Number(key);\n\t\t\ttry {\n\t\t\t\tif (operation === 'getAll') {\n\t\t\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\t\t\t/*                             Get administrators                             */\n\t\t\t\t\t/* -------------------------------------------------------------------------- */\n\n\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', 0, false);\n\t\t\t\t\tlet adminUsers = await onfleetApiRequest.call(this, 'GET', resource);\n\t\t\t\t\tif (!returnAll) {\n\t\t\t\t\t\tconst limit = this.getNodeParameter('limit', 0);\n\t\t\t\t\t\tadminUsers = adminUsers.slice(0, limit);\n\t\t\t\t\t}\n\t\t\t\t\tresponseData.push(...(adminUsers as IDataObject[]));\n\t\t\t\t} else if (operation === 'create') {\n\t\t\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\t\t\t/*                             Create a new admin                             */\n\t\t\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\t\t\tconst adminData = Onfleet.getAdminFields.call(this, index, operation);\n\t\t\t\t\tresponseData.push(await onfleetApiRequest.call(this, 'POST', resource, adminData));\n\t\t\t\t} else if (operation === 'update') {\n\t\t\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\t\t\t/*                                Update admin                                */\n\t\t\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\t\t\tconst id = this.getNodeParameter('id', index) as string;\n\t\t\t\t\tconst adminData = Onfleet.getAdminFields.call(this, index, operation);\n\t\t\t\t\tconst path = `${resource}/${id}`;\n\t\t\t\t\tresponseData.push(await onfleetApiRequest.call(this, 'PUT', path, adminData));\n\t\t\t\t} else if (operation === 'delete') {\n\t\t\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\t\t\t/*                                Delete admin                                */\n\t\t\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\t\t\tconst id = this.getNodeParameter('id', index) as string;\n\t\t\t\t\tconst path = `${resource}/${id}`;\n\t\t\t\t\tawait onfleetApiRequest.call(this, 'DELETE', path);\n\t\t\t\t\tresponseData.push({ success: true });\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\tresponseData.push({ error: (error as IDataObject).toString() });\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\t\treturn responseData;\n\t}\n\n\t/**\n\t * Execute the hub operations\n\t * @param resource Resource to be executed (Hub)\n\t * @param operation Operation to be executed\n\t * @param items Number of items to process by the node\n\t */\n\tstatic async executeHubOperations(\n\t\tthis: IExecuteFunctions,\n\t\tresource: string,\n\t\toperation: string,\n\t\titems: INodeExecutionData[],\n\t): Promise<IDataObject | IDataObject[]> {\n\t\tconst responseData = [];\n\t\tfor (const key of Object.keys(items)) {\n\t\t\tconst index = Number(key);\n\t\t\ttry {\n\t\t\t\tif (operation === 'getAll') {\n\t\t\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\t\t\t/*                                Get all hubs                                */\n\t\t\t\t\t/* -------------------------------------------------------------------------- */\n\n\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', 0, false);\n\t\t\t\t\tlet hubs = await onfleetApiRequest.call(this, 'GET', resource);\n\t\t\t\t\tif (!returnAll) {\n\t\t\t\t\t\tconst limit = this.getNodeParameter('limit', 0);\n\t\t\t\t\t\thubs = hubs.slice(0, limit);\n\t\t\t\t\t}\n\t\t\t\t\tresponseData.push(...(hubs as IDataObject[]));\n\t\t\t\t} else if (operation === 'create') {\n\t\t\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\t\t\t/*                              Create a new hub                              */\n\t\t\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\t\t\tconst hubData = Onfleet.getHubFields.call(this, index, operation);\n\t\t\t\t\tresponseData.push(await onfleetApiRequest.call(this, 'POST', resource, hubData));\n\t\t\t\t}\n\t\t\t\tif (operation === 'update') {\n\t\t\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\t\t\t/*                                Update a hub                                */\n\t\t\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\t\t\tconst id = this.getNodeParameter('id', index) as string;\n\t\t\t\t\tconst hubData = Onfleet.getHubFields.call(this, index, operation);\n\t\t\t\t\tconst path = `${resource}/${id}`;\n\t\t\t\t\tresponseData.push(await onfleetApiRequest.call(this, 'PUT', path, hubData));\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\tresponseData.push({ error: (error as IDataObject).toString() });\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\n\t\treturn responseData;\n\t}\n\n\t/**\n\t * Execute the worker operations\n\t * @param resource Resource to be executed (Worker)\n\t * @param operation Operation to be executed\n\t * @param items Number of items to process by the node\n\t */\n\tstatic async executeWorkerOperations(\n\t\tthis: IExecuteFunctions,\n\t\tresource: string,\n\t\toperation: string,\n\t\titems: INodeExecutionData[],\n\t): Promise<IDataObject | IDataObject[]> {\n\t\tconst responseData = [];\n\t\tfor (const key of Object.keys(items)) {\n\t\t\tconst index = Number(key);\n\t\t\ttry {\n\t\t\t\tif (operation === 'getAll') {\n\t\t\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\t\t\t/*                               Get all workers                              */\n\t\t\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\t\t\tconst byLocation = this.getNodeParameter('byLocation', index) as boolean;\n\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', index, false);\n\t\t\t\t\tlet workers;\n\n\t\t\t\t\tif (byLocation) {\n\t\t\t\t\t\tconst longitude = this.getNodeParameter('longitude', index) as string;\n\t\t\t\t\t\tconst latitude = this.getNodeParameter('latitude', index) as number;\n\t\t\t\t\t\tconst filters = this.getNodeParameter('filters', index);\n\t\t\t\t\t\tconst path = `${resource}/location`;\n\t\t\t\t\t\tworkers = await onfleetApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\tpath,\n\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t{ longitude, latitude, ...filters },\n\t\t\t\t\t\t);\n\t\t\t\t\t\tworkers = workers.workers;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst workerFilters = Onfleet.getWorkerFields.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\toperation,\n\t\t\t\t\t\t) as OnfleetWorkerFilter;\n\t\t\t\t\t\tworkers = await onfleetApiRequest.call(this, 'GET', resource, {}, workerFilters);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!returnAll) {\n\t\t\t\t\t\tconst limit = this.getNodeParameter('limit', index);\n\t\t\t\t\t\tworkers = workers.slice(0, limit);\n\t\t\t\t\t}\n\n\t\t\t\t\tresponseData.push(...(workers as IDataObject[]));\n\t\t\t\t} else if (operation === 'get') {\n\t\t\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\t\t\t/*                                Get a worker                                */\n\t\t\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\t\t\tconst id = this.getNodeParameter('id', index) as string;\n\t\t\t\t\tconst workerFilters = Onfleet.getWorkerFields.call(\n\t\t\t\t\t\tthis,\n\t\t\t\t\t\tindex,\n\t\t\t\t\t\toperation,\n\t\t\t\t\t) as OnfleetWorkerFilter;\n\n\t\t\t\t\tconst path = `${resource}/${id}`;\n\t\t\t\t\tresponseData.push(await onfleetApiRequest.call(this, 'GET', path, {}, workerFilters));\n\t\t\t\t} else if (operation === 'create') {\n\t\t\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\t\t\t/*                             Create a new worker                            */\n\t\t\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\t\t\tconst workerData = Onfleet.getWorkerFields.call(this, index, operation);\n\t\t\t\t\tresponseData.push(await onfleetApiRequest.call(this, 'POST', resource, workerData));\n\t\t\t\t} else if (operation === 'update') {\n\t\t\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\t\t\t/*                                Update worker                               */\n\t\t\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\t\t\tconst id = this.getNodeParameter('id', index) as string;\n\t\t\t\t\tconst workerData = Onfleet.getWorkerFields.call(this, index, operation);\n\t\t\t\t\tconst path = `${resource}/${id}`;\n\t\t\t\t\tresponseData.push(await onfleetApiRequest.call(this, 'PUT', path, workerData));\n\t\t\t\t} else if (operation === 'delete') {\n\t\t\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\t\t\t/*                                Delete worker                               */\n\t\t\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\t\t\tconst id = this.getNodeParameter('id', index) as string;\n\t\t\t\t\tconst path = `${resource}/${id}`;\n\t\t\t\t\tawait onfleetApiRequest.call(this, 'DELETE', path);\n\t\t\t\t\tresponseData.push({ success: true });\n\t\t\t\t} else if (operation === 'getSchedule') {\n\t\t\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\t\t\t/*                             Get worker schedule                            */\n\t\t\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\t\t\tconst id = this.getNodeParameter('id', index) as string;\n\t\t\t\t\tconst path = `${resource}/${id}/schedule`;\n\t\t\t\t\tresponseData.push(await onfleetApiRequest.call(this, 'GET', path));\n\t\t\t\t} else if (operation === 'setSchedule') {\n\t\t\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\t\t\t/*                            Set a worker schedule                           */\n\t\t\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\t\t\tconst id = this.getNodeParameter('id', index) as string;\n\t\t\t\t\tconst workerSchedule = Onfleet.getWorkerFields.call(\n\t\t\t\t\t\tthis,\n\t\t\t\t\t\tindex,\n\t\t\t\t\t\toperation,\n\t\t\t\t\t) as OnfleetWorkerSchedule;\n\t\t\t\t\tconst path = `${resource}/${id}/schedule`;\n\t\t\t\t\tresponseData.push(await onfleetApiRequest.call(this, 'POST', path, workerSchedule));\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\tresponseData.push({ error: (error as IDataObject).toString() });\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\t\treturn responseData;\n\t}\n\n\t/**\n\t * Execute the webhook operations\n\t * @param resource Resource to be executed (Webhook)\n\t * @param operation Operation to be executed\n\t * @param items Number of items to process by the node\n\t */\n\tstatic async executeWebhookOperations(\n\t\tthis: IExecuteFunctions,\n\t\tresource: string,\n\t\toperation: string,\n\t\titems: INodeExecutionData[],\n\t): Promise<IDataObject | IDataObject[]> {\n\t\tconst responseData = [];\n\t\tfor (const key of Object.keys(items)) {\n\t\t\tconst index = Number(key);\n\t\t\ttry {\n\t\t\t\tif (operation === 'getAll') {\n\t\t\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\t\t\t/*                              Get all webhooks                              */\n\t\t\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\t\t\tresponseData.push(\n\t\t\t\t\t\t...((await onfleetApiRequest.call(this, 'GET', resource)) as IDataObject[]),\n\t\t\t\t\t);\n\t\t\t\t} else if (operation === 'create') {\n\t\t\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\t\t\t/*                            Create a new webhook                            */\n\t\t\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\t\t\tconst webhookData = Onfleet.getWebhookFields.call(this, index, operation);\n\t\t\t\t\tresponseData.push(await onfleetApiRequest.call(this, 'POST', resource, webhookData));\n\t\t\t\t} else if (operation === 'delete') {\n\t\t\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\t\t\t/*                              Delete a webhook                              */\n\t\t\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\t\t\tconst id = this.getNodeParameter('id', index) as string;\n\t\t\t\t\tconst path = `${resource}/${id}`;\n\t\t\t\t\tawait onfleetApiRequest.call(this, 'DELETE', path);\n\t\t\t\t\tresponseData.push({ success: true });\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\tresponseData.push({ error: (error as IDataObject).toString() });\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\n\t\treturn responseData;\n\t}\n\n\t/**\n\t * Execute the containers operations\n\t * @param resource Resource to be executed (Container)\n\t * @param operation Operation to be executed\n\t * @param items Number of items to process by the node\n\t */\n\tstatic async executeContainerOperations(\n\t\tthis: IExecuteFunctions,\n\t\tresource: string,\n\t\toperation: string,\n\t\titems: INodeExecutionData[],\n\t): Promise<IDataObject | IDataObject[]> {\n\t\tconst responseData = [];\n\t\tfor (const key of Object.keys(items)) {\n\t\t\tconst index = Number(key);\n\t\t\ttry {\n\t\t\t\tif (operation === 'get') {\n\t\t\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\t\t\t/*                        Get container by id and type                        */\n\t\t\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\t\t\tconst containerId = this.getNodeParameter('containerId', index) as string;\n\t\t\t\t\tconst containerType = this.getNodeParameter('containerType', index) as string;\n\t\t\t\t\tconst path = `${resource}/${containerType}/${containerId}`;\n\t\t\t\t\tresponseData.push(await onfleetApiRequest.call(this, 'GET', path));\n\t\t\t\t} else if (['addTask', 'updateTask'].includes(operation)) {\n\t\t\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\t\t\t/*                      Add or update tasks to container                      */\n\t\t\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\t\t\tconst containerId = this.getNodeParameter('containerId', index) as string;\n\t\t\t\t\tconst containerType = this.getNodeParameter('containerType', index, 'workers') as string;\n\t\t\t\t\tconst options = this.getNodeParameter('options', index);\n\n\t\t\t\t\tconst tasks = this.getNodeParameter('tasks', index) as Array<string | number>;\n\t\t\t\t\tif (operation === 'addTask') {\n\t\t\t\t\t\tconst type = this.getNodeParameter('type', index) as number;\n\t\t\t\t\t\tif (type === 1) {\n\t\t\t\t\t\t\tconst tasksIndex = this.getNodeParameter('index', index) as number;\n\t\t\t\t\t\t\ttasks.unshift(tasksIndex);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttasks.unshift(type);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tconst path = `${resource}/${containerType}/${containerId}`;\n\t\t\t\t\tresponseData.push(await onfleetApiRequest.call(this, 'PUT', path, { tasks, ...options }));\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\tresponseData.push({ error: (error as IDataObject).toString() });\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\n\t\treturn responseData;\n\t}\n\n\t/**\n\t * Execute the team operations\n\t * @param resource Resource to be executed (Team)\n\t * @param operation Operation to be executed\n\t * @param items Number of items to process by the node\n\t */\n\tstatic async executeTeamOperations(\n\t\tthis: IExecuteFunctions,\n\t\tresource: string,\n\t\toperation: string,\n\t\titems: INodeExecutionData[],\n\t): Promise<IDataObject | IDataObject[]> {\n\t\tconst responseData = [];\n\t\tfor (const key of Object.keys(items)) {\n\t\t\tconst index = Number(key);\n\t\t\ttry {\n\t\t\t\tif (operation === 'getAll') {\n\t\t\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\t\t\t/*                                Get all teams                               */\n\t\t\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', 0, false);\n\t\t\t\t\tlet teams = await onfleetApiRequest.call(this, 'GET', resource);\n\t\t\t\t\tif (!returnAll) {\n\t\t\t\t\t\tconst limit = this.getNodeParameter('limit', 0);\n\t\t\t\t\t\tteams = teams.slice(0, limit);\n\t\t\t\t\t}\n\n\t\t\t\t\tresponseData.push(...(teams as IDataObject[]));\n\t\t\t\t} else if (operation === 'get') {\n\t\t\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\t\t\t/*                              Get a single team                             */\n\t\t\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\t\t\tconst id = this.getNodeParameter('id', index) as string;\n\t\t\t\t\tconst path = `${resource}/${id}`;\n\t\t\t\t\tresponseData.push(await onfleetApiRequest.call(this, 'GET', path));\n\t\t\t\t} else if (operation === 'create') {\n\t\t\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\t\t\t/*                              Create a new team                             */\n\t\t\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\t\t\tconst teamData = Onfleet.getTeamFields.call(this, index, operation);\n\t\t\t\t\tresponseData.push(await onfleetApiRequest.call(this, 'POST', resource, teamData));\n\t\t\t\t} else if (operation === 'update') {\n\t\t\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\t\t\t/*                                Update a team                               */\n\t\t\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\t\t\tconst id = this.getNodeParameter('id', index) as string;\n\t\t\t\t\tconst teamData = Onfleet.getTeamFields.call(this, index, operation);\n\t\t\t\t\tconst path = `${resource}/${id}`;\n\t\t\t\t\tresponseData.push(await onfleetApiRequest.call(this, 'PUT', path, teamData));\n\t\t\t\t} else if (operation === 'delete') {\n\t\t\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\t\t\t/*                                Delete a team                               */\n\t\t\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\t\t\tconst id = this.getNodeParameter('id', index) as string;\n\t\t\t\t\tconst path = `${resource}/${id}`;\n\t\t\t\t\tawait onfleetApiRequest.call(this, 'DELETE', path);\n\t\t\t\t\tresponseData.push({ success: true });\n\t\t\t\t} else if (operation === 'getTimeEstimates') {\n\t\t\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\t\t\t/*      Get driver time estimates for tasks that haven't been created yet     */\n\t\t\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\t\t\tconst id = this.getNodeParameter('id', index) as string;\n\t\t\t\t\tconst workerTimeEstimates = Onfleet.getTeamFields.call(\n\t\t\t\t\t\tthis,\n\t\t\t\t\t\tindex,\n\t\t\t\t\t\toperation,\n\t\t\t\t\t) as OnfleetWorkerSchedule;\n\t\t\t\t\tconst path = `${resource}/${id}/estimate`;\n\t\t\t\t\tresponseData.push(\n\t\t\t\t\t\tawait onfleetApiRequest.call(this, 'GET', path, {}, workerTimeEstimates),\n\t\t\t\t\t);\n\t\t\t\t} else if (operation === 'autoDispatch') {\n\t\t\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\t\t\t/*                  Dynamically dispatching tasks on the fly                  */\n\t\t\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\t\t\tconst id = this.getNodeParameter('id', index) as string;\n\t\t\t\t\tconst teamAutoDispatch = Onfleet.getTeamFields.call(\n\t\t\t\t\t\tthis,\n\t\t\t\t\t\tindex,\n\t\t\t\t\t\toperation,\n\t\t\t\t\t) as OnfleetWorkerSchedule;\n\t\t\t\t\tconst path = `${resource}/${id}/dispatch`;\n\t\t\t\t\tresponseData.push(await onfleetApiRequest.call(this, 'POST', path, teamAutoDispatch));\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\tresponseData.push({ error: (error as IDataObject).toString() });\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\n\t\treturn responseData;\n\t}\n}\n"],"mappings":"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","names":["moment"]}