{"version":3,"sources":["../../../nodes/Onfleet/OnfleetTrigger.node.ts"],"sourcesContent":["import type {\n\tIHookFunctions,\n\tIWebhookFunctions,\n\tIDataObject,\n\tINodeType,\n\tINodeTypeDescription,\n\tIWebhookResponseData,\n\tJsonObject,\n} from 'n8n-workflow';\nimport { NodeApiError, NodeConnectionTypes, NodeOperationError } from 'n8n-workflow';\n\nimport { eventDisplay, eventNameField } from './descriptions/OnfleetWebhookDescription';\nimport { onfleetApiRequest } from './GenericFunctions';\nimport { webhookMapping } from './WebhookMapping';\n\nexport class OnfleetTrigger implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'Onfleet Trigger',\n\t\tname: 'onfleetTrigger',\n\t\ticon: 'file:Onfleet.svg',\n\t\tgroup: ['trigger'],\n\t\tversion: 1,\n\t\tsubtitle: '={{$parameter[\"triggerOn\"]}}',\n\t\tdescription: 'Starts the workflow when Onfleet events occur',\n\t\tdefaults: {\n\t\t\tname: 'Onfleet Trigger',\n\t\t},\n\t\tinputs: [],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tcredentials: [\n\t\t\t{\n\t\t\t\tname: 'onfleetApi',\n\t\t\t\trequired: true,\n\t\t\t\ttestedBy: 'onfleetApiTest',\n\t\t\t},\n\t\t],\n\t\twebhooks: [\n\t\t\t{\n\t\t\t\tname: 'setup',\n\t\t\t\thttpMethod: 'GET',\n\t\t\t\tresponseMode: 'onReceived',\n\t\t\t\tpath: 'webhook',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'default',\n\t\t\t\thttpMethod: 'POST',\n\t\t\t\tresponseMode: 'onReceived',\n\t\t\t\tpath: 'webhook',\n\t\t\t},\n\t\t],\n\t\tproperties: [eventDisplay, eventNameField],\n\t};\n\n\twebhookMethods = {\n\t\tdefault: {\n\t\t\tasync checkExists(this: IHookFunctions): Promise<boolean> {\n\t\t\t\tconst webhookData = this.getWorkflowStaticData('node');\n\t\t\t\tconst webhookUrl = this.getNodeWebhookUrl('default') as string;\n\n\t\t\t\t// Webhook got created before so check if it still exists\n\t\t\t\tconst endpoint = '/webhooks';\n\n\t\t\t\tconst webhooks = await onfleetApiRequest.call(this, 'GET', endpoint);\n\n\t\t\t\tfor (const webhook of webhooks) {\n\t\t\t\t\tif (webhook.url === webhookUrl && webhook.trigger === event) {\n\t\t\t\t\t\twebhookData.webhookId = webhook.id;\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t},\n\t\t\tasync create(this: IHookFunctions): Promise<boolean> {\n\t\t\t\tconst { name = '' } = this.getNodeParameter('additionalFields') as IDataObject;\n\t\t\t\tconst triggerOn = this.getNodeParameter('triggerOn') as string;\n\t\t\t\tconst webhookData = this.getWorkflowStaticData('node');\n\t\t\t\tconst webhookUrl = this.getNodeWebhookUrl('default') as string;\n\n\t\t\t\tif (webhookUrl.includes('//localhost')) {\n\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t'The Webhook can not work on \"localhost\". Please, either setup n8n on a custom domain or start with \"--tunnel\"!',\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\t// Webhook name according to the field\n\t\t\t\tlet newWebhookName = `n8n-webhook:${webhookUrl}`;\n\n\t\t\t\tif (name) {\n\t\t\t\t\tnewWebhookName = `n8n-webhook:${name}`;\n\t\t\t\t}\n\n\t\t\t\tconst path = '/webhooks';\n\t\t\t\tconst body = {\n\t\t\t\t\tname: newWebhookName,\n\t\t\t\t\turl: webhookUrl,\n\t\t\t\t\ttrigger: webhookMapping[triggerOn].key,\n\t\t\t\t};\n\n\t\t\t\ttry {\n\t\t\t\t\tconst webhook = await onfleetApiRequest.call(this, 'POST', path, body);\n\n\t\t\t\t\tif (webhook.id === undefined) {\n\t\t\t\t\t\tthrow new NodeApiError(this.getNode(), webhook as JsonObject, {\n\t\t\t\t\t\t\tmessage: 'Onfleet webhook creation response did not contain the expected data',\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\twebhookData.id = webhook.id as string;\n\t\t\t\t} catch (error) {\n\t\t\t\t\tconst { httpCode = '' } = error as { httpCode: string };\n\t\t\t\t\tif (httpCode === '422') {\n\t\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t\t'A webhook with the identical URL probably exists already. Please delete it manually in Onfleet!',\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t},\n\t\t\tasync delete(this: IHookFunctions): Promise<boolean> {\n\t\t\t\tconst webhookData = this.getWorkflowStaticData('node');\n\t\t\t\t// Get the data of the already registered webhook\n\t\t\t\tconst endpoint = `/webhooks/${webhookData.id}`;\n\t\t\t\tawait onfleetApiRequest.call(this, 'DELETE', endpoint);\n\t\t\t\treturn true;\n\t\t\t},\n\t\t},\n\t};\n\n\t/**\n\t * Triggered function when an Onfleet webhook is executed\n\t */\n\tasync webhook(this: IWebhookFunctions): Promise<IWebhookResponseData> {\n\t\tconst req = this.getRequestObject();\n\t\tif (this.getWebhookName() === 'setup') {\n\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\t/*                             Validation request                             */\n\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\tconst res = this.getResponseObject();\n\t\t\tres.status(200).send(req.query.check);\n\t\t\treturn { noWebhookResponse: true };\n\t\t}\n\n\t\tconst returnData: IDataObject = this.getBodyData();\n\n\t\treturn {\n\t\t\tworkflowData: [this.helpers.returnJsonArray(returnData)],\n\t\t};\n\t}\n}\n"],"mappings":"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","names":[]}