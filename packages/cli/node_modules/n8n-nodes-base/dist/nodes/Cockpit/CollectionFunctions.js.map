{"version":3,"sources":["../../../nodes/Cockpit/CollectionFunctions.ts"],"sourcesContent":["import type { IExecuteFunctions, ILoadOptionsFunctions, IDataObject } from 'n8n-workflow';\nimport { jsonParse } from 'n8n-workflow';\n\nimport type { ICollection } from './CollectionInterface';\nimport { cockpitApiRequest } from './GenericFunctions';\n\nexport async function createCollectionEntry(\n\tthis: IExecuteFunctions | ILoadOptionsFunctions,\n\tresourceName: string,\n\tdata: IDataObject,\n\tid?: string,\n): Promise<any> {\n\tconst body: ICollection = {\n\t\tdata,\n\t};\n\n\tif (id) {\n\t\tbody.data = {\n\t\t\t_id: id,\n\t\t\t...body.data,\n\t\t};\n\t}\n\n\treturn await cockpitApiRequest.call(this, 'POST', `/collections/save/${resourceName}`, body);\n}\n\nexport async function getAllCollectionEntries(\n\tthis: IExecuteFunctions | ILoadOptionsFunctions,\n\tresourceName: string,\n\toptions: IDataObject,\n): Promise<any> {\n\tconst body: ICollection = {};\n\n\tif (options.fields) {\n\t\tconst fields = (options.fields as string).split(',').map((field) => field.trim());\n\n\t\tconst bodyFields = {\n\t\t\t_id: false,\n\t\t} as IDataObject;\n\t\tfor (const field of fields) {\n\t\t\tbodyFields[field] = true;\n\t\t}\n\n\t\tbody.fields = bodyFields;\n\t}\n\n\tif (options.filter) {\n\t\tbody.filter = jsonParse(options.filter.toString(), {\n\t\t\terrorMessage: \"'Filter' option is not valid JSON\",\n\t\t});\n\t}\n\n\tif (options.limit) {\n\t\tbody.limit = options.limit as number;\n\t}\n\n\tif (options.skip) {\n\t\tbody.skip = options.skip as number;\n\t}\n\n\tif (options.sort) {\n\t\tbody.sort = jsonParse(options.sort.toString(), {\n\t\t\terrorMessage: \"'Sort' option is not valid JSON\",\n\t\t});\n\t}\n\n\tif (options.populate) {\n\t\tbody.populate = options.populate as boolean;\n\t}\n\n\tbody.simple = true;\n\tif (options.rawData) {\n\t\tbody.simple = !options.rawData;\n\t}\n\n\tif (options.language) {\n\t\tbody.lang = options.language as string;\n\t}\n\n\treturn await cockpitApiRequest.call(this, 'POST', `/collections/get/${resourceName}`, body);\n}\n\nexport async function getAllCollectionNames(\n\tthis: IExecuteFunctions | ILoadOptionsFunctions,\n): Promise<string[]> {\n\treturn await cockpitApiRequest.call(this, 'GET', '/collections/listCollections', {});\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,0BAA0B;AAG1B,8BAAkC;AAElC,eAAsB,sBAErB,cACA,MACA,IACe;AACf,QAAM,OAAoB;AAAA,IACzB;AAAA,EACD;AAEA,MAAI,IAAI;AACP,SAAK,OAAO;AAAA,MACX,KAAK;AAAA,MACL,GAAG,KAAK;AAAA,IACT;AAAA,EACD;AAEA,SAAO,MAAM,0CAAkB,KAAK,MAAM,QAAQ,qBAAqB,YAAY,IAAI,IAAI;AAC5F;AAEA,eAAsB,wBAErB,cACA,SACe;AACf,QAAM,OAAoB,CAAC;AAE3B,MAAI,QAAQ,QAAQ;AACnB,UAAM,SAAU,QAAQ,OAAkB,MAAM,GAAG,EAAE,IAAI,CAAC,UAAU,MAAM,KAAK,CAAC;AAEhF,UAAM,aAAa;AAAA,MAClB,KAAK;AAAA,IACN;AACA,eAAW,SAAS,QAAQ;AAC3B,iBAAW,KAAK,IAAI;AAAA,IACrB;AAEA,SAAK,SAAS;AAAA,EACf;AAEA,MAAI,QAAQ,QAAQ;AACnB,SAAK,aAAS,+BAAU,QAAQ,OAAO,SAAS,GAAG;AAAA,MAClD,cAAc;AAAA,IACf,CAAC;AAAA,EACF;AAEA,MAAI,QAAQ,OAAO;AAClB,SAAK,QAAQ,QAAQ;AAAA,EACtB;AAEA,MAAI,QAAQ,MAAM;AACjB,SAAK,OAAO,QAAQ;AAAA,EACrB;AAEA,MAAI,QAAQ,MAAM;AACjB,SAAK,WAAO,+BAAU,QAAQ,KAAK,SAAS,GAAG;AAAA,MAC9C,cAAc;AAAA,IACf,CAAC;AAAA,EACF;AAEA,MAAI,QAAQ,UAAU;AACrB,SAAK,WAAW,QAAQ;AAAA,EACzB;AAEA,OAAK,SAAS;AACd,MAAI,QAAQ,SAAS;AACpB,SAAK,SAAS,CAAC,QAAQ;AAAA,EACxB;AAEA,MAAI,QAAQ,UAAU;AACrB,SAAK,OAAO,QAAQ;AAAA,EACrB;AAEA,SAAO,MAAM,0CAAkB,KAAK,MAAM,QAAQ,oBAAoB,YAAY,IAAI,IAAI;AAC3F;AAEA,eAAsB,wBAED;AACpB,SAAO,MAAM,0CAAkB,KAAK,MAAM,OAAO,gCAAgC,CAAC,CAAC;AACpF;","names":[]}