{"version":3,"sources":["../../../nodes/QuickBase/GenericFunctions.ts"],"sourcesContent":["import type {\n\tIDataObject,\n\tIExecuteFunctions,\n\tIHookFunctions,\n\tIHttpRequestMethods,\n\tILoadOptionsFunctions,\n\tIRequestOptions,\n\tIWebhookFunctions,\n\tJsonObject,\n} from 'n8n-workflow';\nimport { NodeApiError, NodeOperationError } from 'n8n-workflow';\n\nexport async function quickbaseApiRequest(\n\tthis: IExecuteFunctions | ILoadOptionsFunctions | IHookFunctions | IWebhookFunctions,\n\tmethod: IHttpRequestMethods,\n\tresource: string,\n\n\tbody: any = {},\n\tqs: IDataObject = {},\n\toption: IDataObject = {},\n): Promise<any> {\n\tconst credentials = await this.getCredentials('quickbaseApi');\n\n\tif (!credentials.hostname) {\n\t\tthrow new NodeOperationError(this.getNode(), 'Hostname must be defined');\n\t}\n\n\tif (!credentials.userToken) {\n\t\tthrow new NodeOperationError(this.getNode(), 'User Token must be defined');\n\t}\n\n\ttry {\n\t\tconst options: IRequestOptions = {\n\t\t\theaders: {\n\t\t\t\t'QB-Realm-Hostname': credentials.hostname,\n\t\t\t\t'User-Agent': 'n8n',\n\t\t\t\tAuthorization: `QB-USER-TOKEN ${credentials.userToken}`,\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t},\n\t\t\tmethod,\n\t\t\tbody,\n\t\t\tqs,\n\t\t\turi: `https://api.quickbase.com/v1${resource}`,\n\t\t\tjson: true,\n\t\t};\n\n\t\tif (Object.keys(body as IDataObject).length === 0) {\n\t\t\tdelete options.body;\n\t\t}\n\n\t\tif (Object.keys(qs).length === 0) {\n\t\t\tdelete options.qs;\n\t\t}\n\n\t\tif (Object.keys(option).length !== 0) {\n\t\t\tObject.assign(options, option);\n\t\t}\n\n\t\treturn await this.helpers?.request(options);\n\t} catch (error) {\n\t\tthrow new NodeApiError(this.getNode(), error as JsonObject);\n\t}\n}\n\nexport async function getFieldsObject(\n\tthis: IHookFunctions | ILoadOptionsFunctions | IExecuteFunctions,\n\ttableId: string,\n): Promise<any> {\n\tconst fieldsLabelKey: { [key: string]: number } = {};\n\tconst fieldsIdKey: { [key: number]: string } = {};\n\tconst data = await quickbaseApiRequest.call(this, 'GET', '/fields', {}, { tableId });\n\tfor (const field of data) {\n\t\tfieldsLabelKey[field.label] = field.id;\n\t\tfieldsIdKey[field.id] = field.label;\n\t}\n\treturn { fieldsLabelKey, fieldsIdKey };\n}\n\nexport async function quickbaseApiRequestAllItems(\n\tthis: IHookFunctions | ILoadOptionsFunctions | IExecuteFunctions,\n\tmethod: IHttpRequestMethods,\n\tresource: string,\n\n\tbody: any = {},\n\tquery: IDataObject = {},\n): Promise<any> {\n\tconst returnData: IDataObject[] = [];\n\n\tlet responseData = [];\n\n\tif (method === 'POST') {\n\t\tbody.options = {\n\t\t\tskip: 0,\n\t\t\ttop: 100,\n\t\t};\n\t} else {\n\t\tquery.skip = 0;\n\t\tquery.top = 100;\n\t}\n\n\tlet metadata;\n\n\tdo {\n\t\tconst {\n\t\t\tdata,\n\t\t\tfields,\n\t\t\tmetadata: meta,\n\t\t} = await quickbaseApiRequest.call(this, method, resource, body, query);\n\n\t\tmetadata = meta;\n\n\t\tconst fieldsIdKey: { [key: string]: string } = {};\n\n\t\tfor (const field of fields) {\n\t\t\tfieldsIdKey[field.id] = field.label;\n\t\t}\n\n\t\tfor (const record of data) {\n\t\t\tconst recordData: IDataObject = {};\n\t\t\tfor (const [key, value] of Object.entries(record as IDataObject)) {\n\t\t\t\trecordData[fieldsIdKey[key]] = (value as IDataObject).value;\n\t\t\t}\n\t\t\tresponseData.push(recordData);\n\t\t}\n\n\t\tif (method === 'POST') {\n\t\t\tbody.options.skip += body.options.top;\n\t\t} else {\n\t\t\t//@ts-ignore\n\t\t\tquery.skip += query.top;\n\t\t}\n\t\treturnData.push.apply(returnData, responseData);\n\t\tresponseData = [];\n\t} while (returnData.length < metadata.totalRecords);\n\n\treturn returnData;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA,0BAAiD;AAEjD,eAAsB,oBAErB,QACA,UAEA,OAAY,CAAC,GACb,KAAkB,CAAC,GACnB,SAAsB,CAAC,GACR;AACf,QAAM,cAAc,MAAM,KAAK,eAAe,cAAc;AAE5D,MAAI,CAAC,YAAY,UAAU;AAC1B,UAAM,IAAI,uCAAmB,KAAK,QAAQ,GAAG,0BAA0B;AAAA,EACxE;AAEA,MAAI,CAAC,YAAY,WAAW;AAC3B,UAAM,IAAI,uCAAmB,KAAK,QAAQ,GAAG,4BAA4B;AAAA,EAC1E;AAEA,MAAI;AACH,UAAM,UAA2B;AAAA,MAChC,SAAS;AAAA,QACR,qBAAqB,YAAY;AAAA,QACjC,cAAc;AAAA,QACd,eAAe,iBAAiB,YAAY,SAAS;AAAA,QACrD,gBAAgB;AAAA,MACjB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA,KAAK,+BAA+B,QAAQ;AAAA,MAC5C,MAAM;AAAA,IACP;AAEA,QAAI,OAAO,KAAK,IAAmB,EAAE,WAAW,GAAG;AAClD,aAAO,QAAQ;AAAA,IAChB;AAEA,QAAI,OAAO,KAAK,EAAE,EAAE,WAAW,GAAG;AACjC,aAAO,QAAQ;AAAA,IAChB;AAEA,QAAI,OAAO,KAAK,MAAM,EAAE,WAAW,GAAG;AACrC,aAAO,OAAO,SAAS,MAAM;AAAA,IAC9B;AAEA,WAAO,MAAM,KAAK,SAAS,QAAQ,OAAO;AAAA,EAC3C,SAAS,OAAO;AACf,UAAM,IAAI,iCAAa,KAAK,QAAQ,GAAG,KAAmB;AAAA,EAC3D;AACD;AAEA,eAAsB,gBAErB,SACe;AACf,QAAM,iBAA4C,CAAC;AACnD,QAAM,cAAyC,CAAC;AAChD,QAAM,OAAO,MAAM,oBAAoB,KAAK,MAAM,OAAO,WAAW,CAAC,GAAG,EAAE,QAAQ,CAAC;AACnF,aAAW,SAAS,MAAM;AACzB,mBAAe,MAAM,KAAK,IAAI,MAAM;AACpC,gBAAY,MAAM,EAAE,IAAI,MAAM;AAAA,EAC/B;AACA,SAAO,EAAE,gBAAgB,YAAY;AACtC;AAEA,eAAsB,4BAErB,QACA,UAEA,OAAY,CAAC,GACb,QAAqB,CAAC,GACP;AACf,QAAM,aAA4B,CAAC;AAEnC,MAAI,eAAe,CAAC;AAEpB,MAAI,WAAW,QAAQ;AACtB,SAAK,UAAU;AAAA,MACd,MAAM;AAAA,MACN,KAAK;AAAA,IACN;AAAA,EACD,OAAO;AACN,UAAM,OAAO;AACb,UAAM,MAAM;AAAA,EACb;AAEA,MAAI;AAEJ,KAAG;AACF,UAAM;AAAA,MACL;AAAA,MACA;AAAA,MACA,UAAU;AAAA,IACX,IAAI,MAAM,oBAAoB,KAAK,MAAM,QAAQ,UAAU,MAAM,KAAK;AAEtE,eAAW;AAEX,UAAM,cAAyC,CAAC;AAEhD,eAAW,SAAS,QAAQ;AAC3B,kBAAY,MAAM,EAAE,IAAI,MAAM;AAAA,IAC/B;AAEA,eAAW,UAAU,MAAM;AAC1B,YAAM,aAA0B,CAAC;AACjC,iBAAW,CAAC,KAAK,KAAK,KAAK,OAAO,QAAQ,MAAqB,GAAG;AACjE,mBAAW,YAAY,GAAG,CAAC,IAAK,MAAsB;AAAA,MACvD;AACA,mBAAa,KAAK,UAAU;AAAA,IAC7B;AAEA,QAAI,WAAW,QAAQ;AACtB,WAAK,QAAQ,QAAQ,KAAK,QAAQ;AAAA,IACnC,OAAO;AAEN,YAAM,QAAQ,MAAM;AAAA,IACrB;AACA,eAAW,KAAK,MAAM,YAAY,YAAY;AAC9C,mBAAe,CAAC;AAAA,EACjB,SAAS,WAAW,SAAS,SAAS;AAEtC,SAAO;AACR;","names":[]}