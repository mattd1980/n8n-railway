{"version":3,"sources":["../../../nodes/QuickBase/QuickBase.node.ts"],"sourcesContent":["/* eslint-disable n8n-nodes-base/node-filename-against-convention */\nimport type {\n\tIExecuteFunctions,\n\tIDataObject,\n\tILoadOptionsFunctions,\n\tINodeExecutionData,\n\tINodePropertyOptions,\n\tINodeType,\n\tINodeTypeDescription,\n} from 'n8n-workflow';\nimport { NodeConnectionTypes, NodeOperationError } from 'n8n-workflow';\n\nimport { fieldFields, fieldOperations } from './FieldDescription';\nimport { fileFields, fileOperations } from './FileDescription';\nimport {\n\tgetFieldsObject,\n\tquickbaseApiRequest,\n\tquickbaseApiRequestAllItems,\n} from './GenericFunctions';\nimport { recordFields, recordOperations } from './RecordDescription';\nimport { reportFields, reportOperations } from './ReportDescription';\nimport { generatePairedItemData } from '../../utils/utilities';\n\nexport class QuickBase implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'Quick Base',\n\t\tname: 'quickbase',\n\t\t// eslint-disable-next-line n8n-nodes-base/node-class-description-icon-not-svg\n\t\ticon: 'file:quickbase.png',\n\t\tgroup: ['input'],\n\t\tversion: 1,\n\t\tsubtitle: '={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}',\n\t\tdescription: 'Integrate with the Quick Base RESTful API',\n\t\tdefaults: {\n\t\t\tname: 'Quick Base',\n\t\t},\n\t\tusableAsTool: true,\n\t\tinputs: [NodeConnectionTypes.Main],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tcredentials: [\n\t\t\t{\n\t\t\t\tname: 'quickbaseApi',\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Resource',\n\t\t\t\tname: 'resource',\n\t\t\t\ttype: 'options',\n\t\t\t\tnoDataExpression: true,\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Field',\n\t\t\t\t\t\tvalue: 'field',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'File',\n\t\t\t\t\t\tvalue: 'file',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Record',\n\t\t\t\t\t\tvalue: 'record',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Report',\n\t\t\t\t\t\tvalue: 'report',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'record',\n\t\t\t},\n\t\t\t...fieldOperations,\n\t\t\t...fieldFields,\n\t\t\t...fileOperations,\n\t\t\t...fileFields,\n\t\t\t...recordOperations,\n\t\t\t...recordFields,\n\t\t\t...reportOperations,\n\t\t\t...reportFields,\n\t\t],\n\t};\n\n\tmethods = {\n\t\tloadOptions: {\n\t\t\tasync getTableFields(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst returnData: INodePropertyOptions[] = [];\n\t\t\t\tconst tableId = this.getCurrentNodeParameter('tableId') as string;\n\t\t\t\tconst fields = await quickbaseApiRequest.call(this, 'GET', '/fields', {}, { tableId });\n\t\t\t\tfor (const field of fields) {\n\t\t\t\t\treturnData.push({\n\t\t\t\t\t\tname: field.label,\n\t\t\t\t\t\tvalue: field.id,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn returnData;\n\t\t\t},\n\t\t\tasync getUniqueTableFields(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst returnData: INodePropertyOptions[] = [];\n\t\t\t\tconst tableId = this.getCurrentNodeParameter('tableId') as string;\n\t\t\t\tconst fields = await quickbaseApiRequest.call(this, 'GET', '/fields', {}, { tableId });\n\t\t\t\tfor (const field of fields) {\n\t\t\t\t\t//upsert can be achived just with fields that are set as unique and are no the primary key\n\t\t\t\t\tif (field.unique === true && field.properties.primaryKey === false) {\n\t\t\t\t\t\treturnData.push({\n\t\t\t\t\t\t\tname: field.label,\n\t\t\t\t\t\t\tvalue: field.id,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn returnData;\n\t\t\t},\n\t\t},\n\t};\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t\tconst items = this.getInputData();\n\t\tconst itemData = generatePairedItemData(items.length);\n\t\tconst returnData: INodeExecutionData[] = [];\n\t\tconst length = items.length;\n\t\tconst qs: IDataObject = {};\n\t\tlet responseData;\n\t\tconst resource = this.getNodeParameter('resource', 0);\n\t\tconst operation = this.getNodeParameter('operation', 0);\n\n\t\tif (resource === 'field') {\n\t\t\tif (operation === 'getAll') {\n\t\t\t\tfor (let i = 0; i < length; i++) {\n\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', i);\n\n\t\t\t\t\tconst tableId = this.getNodeParameter('tableId', i) as string;\n\n\t\t\t\t\tconst options = this.getNodeParameter('options', i);\n\n\t\t\t\t\tObject.assign(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttableId,\n\t\t\t\t\t\t},\n\t\t\t\t\t\toptions,\n\t\t\t\t\t);\n\n\t\t\t\t\tresponseData = await quickbaseApiRequest.call(this, 'GET', '/fields', {}, qs);\n\n\t\t\t\t\tif (!returnAll) {\n\t\t\t\t\t\tconst limit = this.getNodeParameter('limit', i);\n\n\t\t\t\t\t\tresponseData = responseData.splice(0, limit);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t);\n\n\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (resource === 'file') {\n\t\t\tif (operation === 'delete') {\n\t\t\t\tfor (let i = 0; i < length; i++) {\n\t\t\t\t\tconst tableId = this.getNodeParameter('tableId', i) as string;\n\n\t\t\t\t\tconst recordId = this.getNodeParameter('recordId', i) as string;\n\n\t\t\t\t\tconst fieldId = this.getNodeParameter('fieldId', i) as string;\n\n\t\t\t\t\tconst versionNumber = this.getNodeParameter('versionNumber', i) as string;\n\n\t\t\t\t\tresponseData = await quickbaseApiRequest.call(\n\t\t\t\t\t\tthis,\n\t\t\t\t\t\t'DELETE',\n\t\t\t\t\t\t`/files/${tableId}/${recordId}/${fieldId}/${versionNumber}`,\n\t\t\t\t\t);\n\n\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t);\n\n\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (operation === 'download') {\n\t\t\t\tfor (let i = 0; i < length; i++) {\n\t\t\t\t\tconst tableId = this.getNodeParameter('tableId', i) as string;\n\n\t\t\t\t\tconst recordId = this.getNodeParameter('recordId', i) as string;\n\n\t\t\t\t\tconst fieldId = this.getNodeParameter('fieldId', i) as string;\n\n\t\t\t\t\tconst versionNumber = this.getNodeParameter('versionNumber', i) as string;\n\n\t\t\t\t\tconst newItem: INodeExecutionData = {\n\t\t\t\t\t\tjson: items[i].json,\n\t\t\t\t\t\tbinary: {},\n\t\t\t\t\t};\n\n\t\t\t\t\tif (items[i].binary !== undefined) {\n\t\t\t\t\t\t// Create a shallow copy of the binary data so that the old\n\t\t\t\t\t\t// data references which do not get changed still stay behind\n\t\t\t\t\t\t// but the incoming data does not get changed.\n\t\t\t\t\t\tObject.assign(newItem.binary!, items[i].binary);\n\t\t\t\t\t}\n\n\t\t\t\t\titems[i] = newItem;\n\n\t\t\t\t\tconst dataPropertyNameDownload = this.getNodeParameter('binaryPropertyName', i);\n\n\t\t\t\t\tresponseData = await quickbaseApiRequest.call(\n\t\t\t\t\t\tthis,\n\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t`/files/${tableId}/${recordId}/${fieldId}/${versionNumber}`,\n\t\t\t\t\t\t{},\n\t\t\t\t\t\t{},\n\t\t\t\t\t\t{ json: false, resolveWithFullResponse: true },\n\t\t\t\t\t);\n\n\t\t\t\t\t//content-disposition': 'attachment; filename=\"dog-puppy-on-garden-royalty-free-image-1586966191.jpg\"',\n\t\t\t\t\tconst contentDisposition: string = responseData.headers['content-disposition'];\n\n\t\t\t\t\tconst data = Buffer.from(responseData.body as string, 'base64');\n\n\t\t\t\t\titems[i].binary![dataPropertyNameDownload] = await this.helpers.prepareBinaryData(\n\t\t\t\t\t\tdata as unknown as Buffer,\n\t\t\t\t\t\tcontentDisposition.split('=')[1],\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\treturn [items];\n\t\t\t}\n\t\t}\n\n\t\tif (resource === 'record') {\n\t\t\tif (operation === 'create') {\n\t\t\t\tconst tableId = this.getNodeParameter('tableId', 0) as string;\n\n\t\t\t\tconst simple = this.getNodeParameter('simple', 0) as boolean;\n\n\t\t\t\tconst data: IDataObject[] = [];\n\n\t\t\t\tconst options = this.getNodeParameter('options', 0);\n\n\t\t\t\tfor (let i = 0; i < length; i++) {\n\t\t\t\t\tconst record: IDataObject = {};\n\n\t\t\t\t\tconst columns = this.getNodeParameter('columns', i) as string;\n\n\t\t\t\t\tconst columnList = columns.split(',').map((column) => column.trim());\n\t\t\t\t\tif (options.useFieldIDs === true) {\n\t\t\t\t\t\tfor (const key of Object.keys(items[i].json)) {\n\t\t\t\t\t\t\trecord[key] = { value: items[i].json[key] };\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst { fieldsLabelKey } = await getFieldsObject.call(this, tableId);\n\t\t\t\t\t\tfor (const key of Object.keys(items[i].json)) {\n\t\t\t\t\t\t\tif (fieldsLabelKey.hasOwnProperty(key) && columnList.includes(key)) {\n\t\t\t\t\t\t\t\trecord[fieldsLabelKey[key].toString()] = { value: items[i].json[key] };\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tdata.push(record);\n\t\t\t\t}\n\n\t\t\t\tconst body: IDataObject = {\n\t\t\t\t\tdata,\n\t\t\t\t\tto: tableId,\n\t\t\t\t};\n\n\t\t\t\t// If no fields are set return at least the record id\n\t\t\t\t// 3 == Default Quickbase RecordID #\n\t\t\t\tbody.fieldsToReturn = [3];\n\n\t\t\t\tif (options.fields) {\n\t\t\t\t\tbody.fieldsToReturn = options.fields as string[];\n\t\t\t\t}\n\n\t\t\t\tresponseData = await quickbaseApiRequest.call(this, 'POST', '/records', body);\n\n\t\t\t\tif (simple) {\n\t\t\t\t\tconst { data: records } = responseData;\n\t\t\t\t\tresponseData = [];\n\n\t\t\t\t\tfor (const record of records) {\n\t\t\t\t\t\tconst recordData: IDataObject = {};\n\t\t\t\t\t\tfor (const [key, value] of Object.entries(record as IDataObject)) {\n\t\t\t\t\t\t\trecordData[key] = (value as IDataObject).value;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresponseData.push(recordData);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t{ itemData },\n\t\t\t\t);\n\n\t\t\t\treturnData.push(...executionData);\n\t\t\t}\n\n\t\t\tif (operation === 'delete') {\n\t\t\t\tfor (let i = 0; i < length; i++) {\n\t\t\t\t\tconst tableId = this.getNodeParameter('tableId', i) as string;\n\n\t\t\t\t\tconst where = this.getNodeParameter('where', i) as string;\n\n\t\t\t\t\tconst body: IDataObject = {\n\t\t\t\t\t\tfrom: tableId,\n\t\t\t\t\t\twhere,\n\t\t\t\t\t};\n\n\t\t\t\t\tresponseData = await quickbaseApiRequest.call(this, 'DELETE', '/records', body);\n\n\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t);\n\n\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (operation === 'getAll') {\n\t\t\t\tfor (let i = 0; i < length; i++) {\n\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', i);\n\n\t\t\t\t\tconst tableId = this.getNodeParameter('tableId', i) as string;\n\n\t\t\t\t\tconst options = this.getNodeParameter('options', i);\n\n\t\t\t\t\tconst body: IDataObject = {\n\t\t\t\t\t\tfrom: tableId,\n\t\t\t\t\t};\n\n\t\t\t\t\tObject.assign(body, options);\n\n\t\t\t\t\tif (options.sortByUi) {\n\t\t\t\t\t\tconst sort = (options.sortByUi as IDataObject).sortByValues as IDataObject[];\n\t\t\t\t\t\tbody.sortBy = sort;\n\t\t\t\t\t\tdelete body.sortByUi;\n\t\t\t\t\t}\n\n\t\t\t\t\t// if (options.groupByUi) {\n\t\t\t\t\t// \tconst group = (options.groupByUi as IDataObject).groupByValues as IDataObject[];\n\t\t\t\t\t// \tbody.groupBy = group;\n\t\t\t\t\t// \tdelete body.groupByUi;\n\t\t\t\t\t// }\n\n\t\t\t\t\tif (returnAll) {\n\t\t\t\t\t\tresponseData = await quickbaseApiRequestAllItems.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'POST',\n\t\t\t\t\t\t\t'/records/query',\n\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbody.options = { top: this.getNodeParameter('limit', i) };\n\n\t\t\t\t\t\tresponseData = await quickbaseApiRequest.call(this, 'POST', '/records/query', body, qs);\n\n\t\t\t\t\t\tconst { data: records, fields } = responseData;\n\t\t\t\t\t\tresponseData = [];\n\n\t\t\t\t\t\tconst fieldsIdKey: { [key: string]: string } = {};\n\n\t\t\t\t\t\tfor (const field of fields) {\n\t\t\t\t\t\t\tfieldsIdKey[field.id] = field.label;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfor (const record of records) {\n\t\t\t\t\t\t\tconst data: IDataObject = {};\n\t\t\t\t\t\t\tfor (const [key, value] of Object.entries(record as IDataObject)) {\n\t\t\t\t\t\t\t\tdata[fieldsIdKey[key]] = (value as IDataObject).value;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tresponseData.push(data);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t);\n\n\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (operation === 'update') {\n\t\t\t\tconst tableId = this.getNodeParameter('tableId', 0) as string;\n\n\t\t\t\tconst { fieldsLabelKey: _fieldsLabelKey, fieldsIdKey } = await getFieldsObject.call(\n\t\t\t\t\tthis,\n\t\t\t\t\ttableId,\n\t\t\t\t);\n\n\t\t\t\tconst simple = this.getNodeParameter('simple', 0) as boolean;\n\n\t\t\t\tconst updateKey = this.getNodeParameter('updateKey', 0) as string;\n\n\t\t\t\tconst data: IDataObject[] = [];\n\n\t\t\t\tconst options = this.getNodeParameter('options', 0);\n\n\t\t\t\tfor (let i = 0; i < length; i++) {\n\t\t\t\t\tconst record: IDataObject = {};\n\n\t\t\t\t\tconst columns = this.getNodeParameter('columns', i) as string;\n\n\t\t\t\t\tconst columnList = columns.split(',').map((column) => column.trim());\n\n\t\t\t\t\tif (options.useFieldIDs === true) {\n\t\t\t\t\t\tfor (const key of Object.keys(items[i].json)) {\n\t\t\t\t\t\t\trecord[key] = { value: items[i].json[key] };\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst { fieldsLabelKey } = await getFieldsObject.call(this, tableId);\n\t\t\t\t\t\tfor (const key of Object.keys(items[i].json)) {\n\t\t\t\t\t\t\tif (fieldsLabelKey.hasOwnProperty(key) && columnList.includes(key)) {\n\t\t\t\t\t\t\t\trecord[fieldsLabelKey[key].toString()] = { value: items[i].json[key] };\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (items[i].json[updateKey] === undefined) {\n\t\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t\t`The update key ${updateKey} could not be found in the input`,\n\t\t\t\t\t\t\t{ itemIndex: i },\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tdata.push(record);\n\t\t\t\t}\n\n\t\t\t\tconst body: IDataObject = {\n\t\t\t\t\tdata,\n\t\t\t\t\tto: tableId,\n\t\t\t\t};\n\n\t\t\t\t// If no fields are set return at least the record id\n\t\t\t\t// 3 == Default Quickbase RecordID #\n\t\t\t\t//body.fieldsToReturn = [fieldsLabelKey['Record ID#']];\n\n\t\t\t\tif (options.fields) {\n\t\t\t\t\tbody.fieldsToReturn = options.fields as string[];\n\t\t\t\t}\n\n\t\t\t\tresponseData = await quickbaseApiRequest.call(this, 'POST', '/records', body);\n\n\t\t\t\tif (simple) {\n\t\t\t\t\tconst { data: records } = responseData;\n\t\t\t\t\tresponseData = [];\n\n\t\t\t\t\tfor (const record of records) {\n\t\t\t\t\t\tconst recordData: IDataObject = {};\n\t\t\t\t\t\tfor (const [key, value] of Object.entries(record as IDataObject)) {\n\t\t\t\t\t\t\trecordData[fieldsIdKey[key]] = (value as IDataObject).value;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresponseData.push(recordData);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t{ itemData },\n\t\t\t\t);\n\n\t\t\t\treturnData.push(...executionData);\n\t\t\t}\n\n\t\t\tif (operation === 'upsert') {\n\t\t\t\tconst tableId = this.getNodeParameter('tableId', 0) as string;\n\n\t\t\t\tconst simple = this.getNodeParameter('simple', 0) as boolean;\n\n\t\t\t\tconst updateKey = this.getNodeParameter('updateKey', 0) as string;\n\n\t\t\t\tconst mergeFieldId = this.getNodeParameter('mergeFieldId', 0) as string;\n\n\t\t\t\tconst data: IDataObject[] = [];\n\n\t\t\t\tconst options = this.getNodeParameter('options', 0);\n\n\t\t\t\tfor (let i = 0; i < length; i++) {\n\t\t\t\t\tconst record: IDataObject = {};\n\n\t\t\t\t\tconst columns = this.getNodeParameter('columns', i) as string;\n\n\t\t\t\t\tconst columnList = columns.split(',').map((column) => column.trim());\n\n\t\t\t\t\tif (options.useFieldIDs === true) {\n\t\t\t\t\t\tfor (const key of Object.keys(items[i].json)) {\n\t\t\t\t\t\t\trecord[key] = { value: items[i].json[key] };\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst { fieldsLabelKey } = await getFieldsObject.call(this, tableId);\n\t\t\t\t\t\tfor (const key of Object.keys(items[i].json)) {\n\t\t\t\t\t\t\tif (fieldsLabelKey.hasOwnProperty(key) && columnList.includes(key)) {\n\t\t\t\t\t\t\t\trecord[fieldsLabelKey[key].toString()] = { value: items[i].json[key] };\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (items[i].json[updateKey] === undefined) {\n\t\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t\t`The update key ${updateKey} could not be found in the input`,\n\t\t\t\t\t\t\t{ itemIndex: i },\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\trecord[mergeFieldId] = { value: items[i].json[updateKey] };\n\n\t\t\t\t\tdata.push(record);\n\t\t\t\t}\n\n\t\t\t\tconst body: IDataObject = {\n\t\t\t\t\tdata,\n\t\t\t\t\tto: tableId,\n\t\t\t\t\tmergeFieldId,\n\t\t\t\t};\n\n\t\t\t\t// If no fields are set return at least the record id\n\t\t\t\t// 3 == Default Quickbase RecordID #\n\t\t\t\tbody.fieldsToReturn = [3];\n\n\t\t\t\tif (options.fields) {\n\t\t\t\t\tbody.fieldsToReturn = options.fields as string[];\n\t\t\t\t}\n\n\t\t\t\tresponseData = await quickbaseApiRequest.call(this, 'POST', '/records', body);\n\n\t\t\t\tif (simple) {\n\t\t\t\t\tconst { data: records } = responseData;\n\t\t\t\t\tresponseData = [];\n\n\t\t\t\t\tfor (const record of records) {\n\t\t\t\t\t\tconst recordData: IDataObject = {};\n\t\t\t\t\t\tfor (const [key, value] of Object.entries(record as IDataObject)) {\n\t\t\t\t\t\t\trecordData[key] = (value as IDataObject).value;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresponseData.push(recordData);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t{ itemData },\n\t\t\t\t);\n\n\t\t\t\treturnData.push(...executionData);\n\t\t\t}\n\t\t}\n\n\t\tif (resource === 'report') {\n\t\t\tif (operation === 'run') {\n\t\t\t\tfor (let i = 0; i < length; i++) {\n\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', i);\n\n\t\t\t\t\tconst tableId = this.getNodeParameter('tableId', i) as string;\n\n\t\t\t\t\tconst reportId = this.getNodeParameter('reportId', i) as string;\n\n\t\t\t\t\tqs.tableId = tableId;\n\n\t\t\t\t\tif (returnAll) {\n\t\t\t\t\t\tresponseData = await quickbaseApiRequestAllItems.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'POST',\n\t\t\t\t\t\t\t`/reports/${reportId}/run`,\n\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tqs.top = this.getNodeParameter('limit', i);\n\n\t\t\t\t\t\tresponseData = await quickbaseApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'POST',\n\t\t\t\t\t\t\t`/reports/${reportId}/run`,\n\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tconst { data: records, fields } = responseData;\n\t\t\t\t\t\tresponseData = [];\n\n\t\t\t\t\t\tconst fieldsIdKey: { [key: string]: string } = {};\n\n\t\t\t\t\t\tfor (const field of fields) {\n\t\t\t\t\t\t\tfieldsIdKey[field.id] = field.label;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfor (const record of records) {\n\t\t\t\t\t\t\tconst data: IDataObject = {};\n\t\t\t\t\t\t\tfor (const [key, value] of Object.entries(record as IDataObject)) {\n\t\t\t\t\t\t\t\tdata[fieldsIdKey[key]] = (value as IDataObject).value;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tresponseData.push(data);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t);\n\n\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (operation === 'get') {\n\t\t\t\tfor (let i = 0; i < length; i++) {\n\t\t\t\t\tconst reportId = this.getNodeParameter('reportId', i) as string;\n\n\t\t\t\t\tconst tableId = this.getNodeParameter('tableId', i) as string;\n\n\t\t\t\t\tqs.tableId = tableId;\n\n\t\t\t\t\tresponseData = await quickbaseApiRequest.call(\n\t\t\t\t\t\tthis,\n\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t`/reports/${reportId}`,\n\t\t\t\t\t\t{},\n\t\t\t\t\t\tqs,\n\t\t\t\t\t);\n\n\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t);\n\n\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn [returnData];\n\t}\n}\n"],"mappings":"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","names":[]}