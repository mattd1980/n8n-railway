{"version":3,"sources":["../../../nodes/Crypto/Crypto.node.ts"],"sourcesContent":["import type { BinaryToTextEncoding } from 'crypto';\nimport { createHash, createHmac, createSign, getHashes, randomBytes } from 'crypto';\nimport set from 'lodash/set';\nimport type {\n\tIExecuteFunctions,\n\tINodeExecutionData,\n\tINodeType,\n\tINodeTypeDescription,\n\tJsonObject,\n} from 'n8n-workflow';\nimport { deepCopy, BINARY_ENCODING, NodeConnectionTypes } from 'n8n-workflow';\nimport { pipeline } from 'stream/promises';\nimport { v4 as uuid } from 'uuid';\n\nconst unsupportedAlgorithms = [\n\t'RSA-MD4',\n\t'RSA-MDC2',\n\t'md4',\n\t'md4WithRSAEncryption',\n\t'mdc2',\n\t'mdc2WithRSA',\n];\n\nconst supportedAlgorithms = getHashes()\n\t.filter((algorithm) => !unsupportedAlgorithms.includes(algorithm))\n\t.map((algorithm) => ({ name: algorithm, value: algorithm }));\n\nexport class Crypto implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'Crypto',\n\t\tname: 'crypto',\n\t\ticon: 'fa:key',\n\t\ticonColor: 'green',\n\t\tgroup: ['transform'],\n\t\tversion: 1,\n\t\tsubtitle: '={{$parameter[\"action\"]}}',\n\t\tdescription: 'Provide cryptographic utilities',\n\t\tdefaults: {\n\t\t\tname: 'Crypto',\n\t\t\tcolor: '#408000',\n\t\t},\n\t\tusableAsTool: true,\n\t\tinputs: [NodeConnectionTypes.Main],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Action',\n\t\t\t\tname: 'action',\n\t\t\t\ttype: 'options',\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Generate',\n\t\t\t\t\t\tdescription: 'Generate random string',\n\t\t\t\t\t\tvalue: 'generate',\n\t\t\t\t\t\taction: 'Generate random string',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Hash',\n\t\t\t\t\t\tdescription: 'Hash a text or file in a specified format',\n\t\t\t\t\t\tvalue: 'hash',\n\t\t\t\t\t\taction: 'Hash a text or file in a specified format',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Hmac',\n\t\t\t\t\t\tdescription: 'Hmac a text or file in a specified format',\n\t\t\t\t\t\tvalue: 'hmac',\n\t\t\t\t\t\taction: 'HMAC a text or file in a specified format',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Sign',\n\t\t\t\t\t\tdescription: 'Sign a string using a private key',\n\t\t\t\t\t\tvalue: 'sign',\n\t\t\t\t\t\taction: 'Sign a string using a private key',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'hash',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Type',\n\t\t\t\tname: 'type',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\taction: ['hash'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\ttype: 'options',\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'MD5',\n\t\t\t\t\t\tvalue: 'MD5',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'SHA256',\n\t\t\t\t\t\tvalue: 'SHA256',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'SHA3-256',\n\t\t\t\t\t\tvalue: 'SHA3-256',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'SHA3-384',\n\t\t\t\t\t\tvalue: 'SHA3-384',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'SHA3-512',\n\t\t\t\t\t\tvalue: 'SHA3-512',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'SHA384',\n\t\t\t\t\t\tvalue: 'SHA384',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'SHA512',\n\t\t\t\t\t\tvalue: 'SHA512',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'MD5',\n\t\t\t\tdescription: 'The hash type to use',\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Binary File',\n\t\t\t\tname: 'binaryData',\n\t\t\t\ttype: 'boolean',\n\t\t\t\tdefault: false,\n\t\t\t\trequired: true,\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\taction: ['hash', 'hmac'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdescription: 'Whether the data to hashed should be taken from binary field',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Binary Property Name',\n\t\t\t\tname: 'binaryPropertyName',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\taction: ['hash', 'hmac'],\n\t\t\t\t\t\tbinaryData: [true],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: 'data',\n\t\t\t\tdescription: 'Name of the binary property which contains the input data',\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Value',\n\t\t\t\tname: 'value',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\taction: ['hash'],\n\t\t\t\t\t\tbinaryData: [false],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: '',\n\t\t\t\tdescription: 'The value that should be hashed',\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Property Name',\n\t\t\t\tname: 'dataPropertyName',\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: 'data',\n\t\t\t\trequired: true,\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\taction: ['hash'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdescription: 'Name of the property to which to write the hash',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Encoding',\n\t\t\t\tname: 'encoding',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\taction: ['hash'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\ttype: 'options',\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'BASE64',\n\t\t\t\t\t\tvalue: 'base64',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'HEX',\n\t\t\t\t\t\tvalue: 'hex',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'hex',\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Type',\n\t\t\t\tname: 'type',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\taction: ['hmac'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\ttype: 'options',\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'MD5',\n\t\t\t\t\t\tvalue: 'MD5',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'SHA256',\n\t\t\t\t\t\tvalue: 'SHA256',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'SHA3-256',\n\t\t\t\t\t\tvalue: 'SHA3-256',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'SHA3-384',\n\t\t\t\t\t\tvalue: 'SHA3-384',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'SHA3-512',\n\t\t\t\t\t\tvalue: 'SHA3-512',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'SHA384',\n\t\t\t\t\t\tvalue: 'SHA384',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'SHA512',\n\t\t\t\t\t\tvalue: 'SHA512',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'MD5',\n\t\t\t\tdescription: 'The hash type to use',\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Value',\n\t\t\t\tname: 'value',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\taction: ['hmac'],\n\t\t\t\t\t\tbinaryData: [false],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: '',\n\t\t\t\tdescription: 'The value of which the hmac should be created',\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Property Name',\n\t\t\t\tname: 'dataPropertyName',\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: 'data',\n\t\t\t\trequired: true,\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\taction: ['hmac'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdescription: 'Name of the property to which to write the hmac',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Secret',\n\t\t\t\tname: 'secret',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\taction: ['hmac'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\ttype: 'string',\n\t\t\t\ttypeOptions: { password: true },\n\t\t\t\tdefault: '',\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Encoding',\n\t\t\t\tname: 'encoding',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\taction: ['hmac'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\ttype: 'options',\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'BASE64',\n\t\t\t\t\t\tvalue: 'base64',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'HEX',\n\t\t\t\t\t\tvalue: 'hex',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'hex',\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Value',\n\t\t\t\tname: 'value',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\taction: ['sign'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: '',\n\t\t\t\tdescription: 'The value that should be signed',\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Property Name',\n\t\t\t\tname: 'dataPropertyName',\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: 'data',\n\t\t\t\trequired: true,\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\taction: ['sign'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdescription: 'Name of the property to which to write the signed value',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Algorithm Name or ID',\n\t\t\t\tname: 'algorithm',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\taction: ['sign'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\ttype: 'options',\n\t\t\t\tdescription:\n\t\t\t\t\t'Choose from the list, or specify an ID using an <a href=\"https://docs.n8n.io/code/expressions/\">expression</a>',\n\t\t\t\toptions: supportedAlgorithms,\n\t\t\t\tdefault: '',\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Encoding',\n\t\t\t\tname: 'encoding',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\taction: ['sign'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\ttype: 'options',\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'BASE64',\n\t\t\t\t\t\tvalue: 'base64',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'HEX',\n\t\t\t\t\t\tvalue: 'hex',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'hex',\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Private Key',\n\t\t\t\tname: 'privateKey',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\taction: ['sign'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\ttype: 'string',\n\t\t\t\tdescription: 'Private key to use when signing the string',\n\t\t\t\tdefault: '',\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Property Name',\n\t\t\t\tname: 'dataPropertyName',\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: 'data',\n\t\t\t\trequired: true,\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\taction: ['generate'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdescription: 'Name of the property to which to write the random string',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Type',\n\t\t\t\tname: 'encodingType',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\taction: ['generate'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\ttype: 'options',\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'ASCII',\n\t\t\t\t\t\tvalue: 'ascii',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'BASE64',\n\t\t\t\t\t\tvalue: 'base64',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'HEX',\n\t\t\t\t\t\tvalue: 'hex',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'UUID',\n\t\t\t\t\t\tvalue: 'uuid',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'uuid',\n\t\t\t\tdescription: 'Encoding that will be used to generate string',\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Length',\n\t\t\t\tname: 'stringLength',\n\t\t\t\ttype: 'number',\n\t\t\t\tdefault: 32,\n\t\t\t\tdescription: 'Length of the generated string',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\taction: ['generate'],\n\t\t\t\t\t\tencodingType: ['ascii', 'base64', 'hex'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t};\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t\tconst items = this.getInputData();\n\n\t\tconst returnData: INodeExecutionData[] = [];\n\t\tconst length = items.length;\n\t\tconst action = this.getNodeParameter('action', 0) as string;\n\n\t\tlet item: INodeExecutionData;\n\t\tfor (let i = 0; i < length; i++) {\n\t\t\ttry {\n\t\t\t\titem = items[i];\n\t\t\t\tconst dataPropertyName = this.getNodeParameter('dataPropertyName', i);\n\t\t\t\tconst value = this.getNodeParameter('value', i, '') as string;\n\t\t\t\tlet newValue;\n\t\t\t\tlet binaryProcessed = false;\n\n\t\t\t\tif (action === 'generate') {\n\t\t\t\t\tconst encodingType = this.getNodeParameter('encodingType', i);\n\t\t\t\t\tif (encodingType === 'uuid') {\n\t\t\t\t\t\tnewValue = uuid();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst stringLength = this.getNodeParameter('stringLength', i) as number;\n\t\t\t\t\t\tif (encodingType === 'base64') {\n\t\t\t\t\t\t\tnewValue = randomBytes(stringLength)\n\t\t\t\t\t\t\t\t.toString(encodingType as BufferEncoding)\n\t\t\t\t\t\t\t\t.replace(/\\W/g, '')\n\t\t\t\t\t\t\t\t.slice(0, stringLength);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tnewValue = randomBytes(stringLength)\n\t\t\t\t\t\t\t\t.toString(encodingType as BufferEncoding)\n\t\t\t\t\t\t\t\t.slice(0, stringLength);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (action === 'hash' || action === 'hmac') {\n\t\t\t\t\tconst type = this.getNodeParameter('type', i) as string;\n\t\t\t\t\tconst encoding = this.getNodeParameter('encoding', i) as BinaryToTextEncoding;\n\t\t\t\t\tconst hashOrHmac =\n\t\t\t\t\t\taction === 'hash'\n\t\t\t\t\t\t\t? createHash(type)\n\t\t\t\t\t\t\t: createHmac(type, this.getNodeParameter('secret', i) as string);\n\t\t\t\t\tif (this.getNodeParameter('binaryData', i)) {\n\t\t\t\t\t\tconst binaryPropertyName = this.getNodeParameter('binaryPropertyName', i);\n\t\t\t\t\t\tconst binaryData = this.helpers.assertBinaryData(i, binaryPropertyName);\n\t\t\t\t\t\tif (binaryData.id) {\n\t\t\t\t\t\t\tconst binaryStream = await this.helpers.getBinaryStream(binaryData.id);\n\t\t\t\t\t\t\thashOrHmac.setEncoding(encoding);\n\t\t\t\t\t\t\tawait pipeline(binaryStream, hashOrHmac);\n\t\t\t\t\t\t\tnewValue = hashOrHmac.read();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tnewValue = hashOrHmac\n\t\t\t\t\t\t\t\t.update(Buffer.from(binaryData.data, BINARY_ENCODING))\n\t\t\t\t\t\t\t\t.digest(encoding);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbinaryProcessed = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnewValue = hashOrHmac.update(value).digest(encoding);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (action === 'sign') {\n\t\t\t\t\tconst algorithm = this.getNodeParameter('algorithm', i) as string;\n\t\t\t\t\tconst encoding = this.getNodeParameter('encoding', i) as BinaryToTextEncoding;\n\t\t\t\t\tconst privateKey = this.getNodeParameter('privateKey', i) as string;\n\t\t\t\t\tconst sign = createSign(algorithm);\n\t\t\t\t\tsign.write(value);\n\t\t\t\t\tsign.end();\n\t\t\t\t\tnewValue = sign.sign(privateKey, encoding);\n\t\t\t\t}\n\n\t\t\t\tlet newItem: INodeExecutionData;\n\t\t\t\tif (dataPropertyName.includes('.')) {\n\t\t\t\t\t// Uses dot notation so copy all data\n\t\t\t\t\tnewItem = {\n\t\t\t\t\t\tjson: deepCopy(item.json),\n\t\t\t\t\t\tpairedItem: {\n\t\t\t\t\t\t\titem: i,\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\t\t\t\t} else {\n\t\t\t\t\t// Does not use dot notation so shallow copy is enough\n\t\t\t\t\tnewItem = {\n\t\t\t\t\t\tjson: { ...item.json },\n\t\t\t\t\t\tpairedItem: {\n\t\t\t\t\t\t\titem: i,\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\tif (item.binary !== undefined && !binaryProcessed) {\n\t\t\t\t\tnewItem.binary = item.binary;\n\t\t\t\t}\n\n\t\t\t\tset(newItem, ['json', dataPropertyName], newValue);\n\n\t\t\t\treturnData.push(newItem);\n\t\t\t} catch (error) {\n\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\treturnData.push({\n\t\t\t\t\t\tjson: {\n\t\t\t\t\t\t\terror: (error as JsonObject).message,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tpairedItem: {\n\t\t\t\t\t\t\titem: i,\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\t\treturn [returnData];\n\t}\n}\n"],"mappings":"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","names":["uuid","set"]}