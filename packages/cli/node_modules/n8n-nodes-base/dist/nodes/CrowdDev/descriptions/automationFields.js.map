{"version":3,"sources":["../../../../nodes/CrowdDev/descriptions/automationFields.ts"],"sourcesContent":["import type { INodeProperties } from 'n8n-workflow';\n\nimport { mapWith, showFor } from './utils';\nimport { automationPresend } from '../GenericFunctions';\n\nconst displayOpts = showFor(['automation']);\n\nconst displayFor = {\n\tresource: displayOpts(),\n\tcreateOrUpdate: displayOpts(['create', 'update']),\n\tid: displayOpts(['destroy', 'find', 'update']),\n};\n\nconst automationOperations: INodeProperties = {\n\tdisplayName: 'Operation',\n\tname: 'operation',\n\ttype: 'options',\n\tdisplayOptions: displayFor.resource.displayOptions,\n\tnoDataExpression: true,\n\tdefault: 'list',\n\toptions: [\n\t\t{\n\t\t\tname: 'Create',\n\t\t\tvalue: 'create',\n\t\t\tdescription: 'Create a new automation for the tenant',\n\t\t\taction: 'Create a new automation for the tenant',\n\t\t\trouting: {\n\t\t\t\tsend: { preSend: [automationPresend] },\n\t\t\t\trequest: {\n\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\turl: '/automation',\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: 'Destroy',\n\t\t\tvalue: 'destroy',\n\t\t\tdescription: 'Destroy an existing automation for the tenant',\n\t\t\taction: 'Destroy an existing automation for the tenant',\n\t\t\trouting: {\n\t\t\t\trequest: {\n\t\t\t\t\tmethod: 'DELETE',\n\t\t\t\t\turl: '=/automation/{{$parameter[\"id\"]}}',\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: 'Find',\n\t\t\tvalue: 'find',\n\t\t\tdescription: 'Get an existing automation data for the tenant',\n\t\t\taction: 'Get an existing automation data for the tenant',\n\t\t\trouting: {\n\t\t\t\trequest: {\n\t\t\t\t\tmethod: 'GET',\n\t\t\t\t\turl: '=/automation/{{$parameter[\"id\"]}}',\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: 'List',\n\t\t\tvalue: 'list',\n\t\t\tdescription: 'Get all existing automation data for tenant',\n\t\t\taction: 'Get all existing automation data for tenant',\n\t\t\trouting: {\n\t\t\t\trequest: {\n\t\t\t\t\tmethod: 'GET',\n\t\t\t\t\turl: '/automation',\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: 'Update',\n\t\t\tvalue: 'update',\n\t\t\tdescription: 'Updates an existing automation for the tenant',\n\t\t\taction: 'Updates an existing automation for the tenant',\n\t\t\trouting: {\n\t\t\t\tsend: { preSend: [automationPresend] },\n\t\t\t\trequest: {\n\t\t\t\t\tmethod: 'PUT',\n\t\t\t\t\turl: '=/automation/{{$parameter[\"id\"]}}',\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t],\n};\n\nconst idField: INodeProperties = {\n\tdisplayName: 'ID',\n\tname: 'id',\n\tdescription: 'The ID of the automation',\n\ttype: 'string',\n\trequired: true,\n\tdefault: '',\n};\n\nconst commonFields: INodeProperties[] = [\n\t{\n\t\tdisplayName: 'Trigger',\n\t\tname: 'trigger',\n\t\tdescription: 'What will trigger an automation',\n\t\ttype: 'options',\n\t\trequired: true,\n\t\tdefault: 'new_activity',\n\t\toptions: [\n\t\t\t{\n\t\t\t\tname: 'New Activity',\n\t\t\t\tvalue: 'new_activity',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'New Member',\n\t\t\t\tvalue: 'new_member',\n\t\t\t},\n\t\t],\n\t},\n\t{\n\t\tdisplayName: 'URL',\n\t\tname: 'url',\n\t\tdescription: 'URL to POST webhook data to',\n\t\ttype: 'string',\n\t\trequired: true,\n\t\tdefault: '',\n\t},\n];\n\nconst automationFields: INodeProperties[] = [\n\tObject.assign({}, idField, displayFor.id),\n\t...commonFields.map(mapWith(displayFor.createOrUpdate)),\n];\n\nexport { automationOperations, automationFields };\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,mBAAiC;AACjC,8BAAkC;AAElC,MAAM,kBAAc,sBAAQ,CAAC,YAAY,CAAC;AAE1C,MAAM,aAAa;AAAA,EAClB,UAAU,YAAY;AAAA,EACtB,gBAAgB,YAAY,CAAC,UAAU,QAAQ,CAAC;AAAA,EAChD,IAAI,YAAY,CAAC,WAAW,QAAQ,QAAQ,CAAC;AAC9C;AAEA,MAAM,uBAAwC;AAAA,EAC7C,aAAa;AAAA,EACb,MAAM;AAAA,EACN,MAAM;AAAA,EACN,gBAAgB,WAAW,SAAS;AAAA,EACpC,kBAAkB;AAAA,EAClB,SAAS;AAAA,EACT,SAAS;AAAA,IACR;AAAA,MACC,MAAM;AAAA,MACN,OAAO;AAAA,MACP,aAAa;AAAA,MACb,QAAQ;AAAA,MACR,SAAS;AAAA,QACR,MAAM,EAAE,SAAS,CAAC,yCAAiB,EAAE;AAAA,QACrC,SAAS;AAAA,UACR,QAAQ;AAAA,UACR,KAAK;AAAA,QACN;AAAA,MACD;AAAA,IACD;AAAA,IACA;AAAA,MACC,MAAM;AAAA,MACN,OAAO;AAAA,MACP,aAAa;AAAA,MACb,QAAQ;AAAA,MACR,SAAS;AAAA,QACR,SAAS;AAAA,UACR,QAAQ;AAAA,UACR,KAAK;AAAA,QACN;AAAA,MACD;AAAA,IACD;AAAA,IACA;AAAA,MACC,MAAM;AAAA,MACN,OAAO;AAAA,MACP,aAAa;AAAA,MACb,QAAQ;AAAA,MACR,SAAS;AAAA,QACR,SAAS;AAAA,UACR,QAAQ;AAAA,UACR,KAAK;AAAA,QACN;AAAA,MACD;AAAA,IACD;AAAA,IACA;AAAA,MACC,MAAM;AAAA,MACN,OAAO;AAAA,MACP,aAAa;AAAA,MACb,QAAQ;AAAA,MACR,SAAS;AAAA,QACR,SAAS;AAAA,UACR,QAAQ;AAAA,UACR,KAAK;AAAA,QACN;AAAA,MACD;AAAA,IACD;AAAA,IACA;AAAA,MACC,MAAM;AAAA,MACN,OAAO;AAAA,MACP,aAAa;AAAA,MACb,QAAQ;AAAA,MACR,SAAS;AAAA,QACR,MAAM,EAAE,SAAS,CAAC,yCAAiB,EAAE;AAAA,QACrC,SAAS;AAAA,UACR,QAAQ;AAAA,UACR,KAAK;AAAA,QACN;AAAA,MACD;AAAA,IACD;AAAA,EACD;AACD;AAEA,MAAM,UAA2B;AAAA,EAChC,aAAa;AAAA,EACb,MAAM;AAAA,EACN,aAAa;AAAA,EACb,MAAM;AAAA,EACN,UAAU;AAAA,EACV,SAAS;AACV;AAEA,MAAM,eAAkC;AAAA,EACvC;AAAA,IACC,aAAa;AAAA,IACb,MAAM;AAAA,IACN,aAAa;AAAA,IACb,MAAM;AAAA,IACN,UAAU;AAAA,IACV,SAAS;AAAA,IACT,SAAS;AAAA,MACR;AAAA,QACC,MAAM;AAAA,QACN,OAAO;AAAA,MACR;AAAA,MACA;AAAA,QACC,MAAM;AAAA,QACN,OAAO;AAAA,MACR;AAAA,IACD;AAAA,EACD;AAAA,EACA;AAAA,IACC,aAAa;AAAA,IACb,MAAM;AAAA,IACN,aAAa;AAAA,IACb,MAAM;AAAA,IACN,UAAU;AAAA,IACV,SAAS;AAAA,EACV;AACD;AAEA,MAAM,mBAAsC;AAAA,EAC3C,OAAO,OAAO,CAAC,GAAG,SAAS,WAAW,EAAE;AAAA,EACxC,GAAG,aAAa,QAAI,sBAAQ,WAAW,cAAc,CAAC;AACvD;","names":[]}