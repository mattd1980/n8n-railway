{"version":3,"sources":["../../../nodes/Cloudflare/Cloudflare.node.ts"],"sourcesContent":["import type {\n\tIExecuteFunctions,\n\tIDataObject,\n\tILoadOptionsFunctions,\n\tINodeExecutionData,\n\tINodePropertyOptions,\n\tINodeType,\n\tINodeTypeDescription,\n} from 'n8n-workflow';\nimport { NodeConnectionTypes } from 'n8n-workflow';\n\nimport { cloudflareApiRequest, cloudflareApiRequestAllItems } from './GenericFunctions';\nimport { zoneCertificateFields, zoneCertificateOperations } from './ZoneCertificateDescription';\n\nexport class Cloudflare implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'Cloudflare',\n\t\tname: 'cloudflare',\n\t\ticon: 'file:cloudflare.svg',\n\t\tgroup: ['input'],\n\t\tversion: 1,\n\t\tsubtitle: '={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}',\n\t\tdescription: 'Consume Cloudflare API',\n\t\tdefaults: {\n\t\t\tname: 'Cloudflare',\n\t\t},\n\t\tusableAsTool: true,\n\t\tinputs: [NodeConnectionTypes.Main],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tcredentials: [\n\t\t\t{\n\t\t\t\tname: 'cloudflareApi',\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Resource',\n\t\t\t\tname: 'resource',\n\t\t\t\ttype: 'options',\n\t\t\t\tnoDataExpression: true,\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Zone Certificate',\n\t\t\t\t\t\tvalue: 'zoneCertificate',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'zoneCertificate',\n\t\t\t},\n\t\t\t...zoneCertificateOperations,\n\t\t\t...zoneCertificateFields,\n\t\t],\n\t};\n\n\tmethods = {\n\t\tloadOptions: {\n\t\t\tasync getZones(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst returnData: INodePropertyOptions[] = [];\n\t\t\t\tconst { result: zones } = await cloudflareApiRequest.call(this, 'GET', '/zones');\n\t\t\t\tfor (const zone of zones) {\n\t\t\t\t\treturnData.push({\n\t\t\t\t\t\tname: zone.name,\n\t\t\t\t\t\tvalue: zone.id,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn returnData;\n\t\t\t},\n\t\t},\n\t};\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t\tconst items = this.getInputData();\n\t\tconst returnData: IDataObject[] = [];\n\t\tconst length = items.length;\n\t\tconst qs: IDataObject = {};\n\t\tlet responseData;\n\t\tconst resource = this.getNodeParameter('resource', 0);\n\t\tconst operation = this.getNodeParameter('operation', 0);\n\n\t\tfor (let i = 0; i < length; i++) {\n\t\t\ttry {\n\t\t\t\tif (resource === 'zoneCertificate') {\n\t\t\t\t\t//https://api.cloudflare.com/#zone-level-authenticated-origin-pulls-delete-certificate\n\t\t\t\t\tif (operation === 'delete') {\n\t\t\t\t\t\tconst zoneId = this.getNodeParameter('zoneId', i) as string;\n\t\t\t\t\t\tconst certificateId = this.getNodeParameter('certificateId', i) as string;\n\n\t\t\t\t\t\tresponseData = await cloudflareApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'DELETE',\n\t\t\t\t\t\t\t`/zones/${zoneId}/origin_tls_client_auth/${certificateId}`,\n\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t);\n\t\t\t\t\t\tresponseData = responseData.result;\n\t\t\t\t\t}\n\t\t\t\t\t//https://api.cloudflare.com/#zone-level-authenticated-origin-pulls-get-certificate-details\n\t\t\t\t\tif (operation === 'get') {\n\t\t\t\t\t\tconst zoneId = this.getNodeParameter('zoneId', i) as string;\n\t\t\t\t\t\tconst certificateId = this.getNodeParameter('certificateId', i) as string;\n\n\t\t\t\t\t\tresponseData = await cloudflareApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t`/zones/${zoneId}/origin_tls_client_auth/${certificateId}`,\n\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t);\n\t\t\t\t\t\tresponseData = responseData.result;\n\t\t\t\t\t}\n\t\t\t\t\t//https://api.cloudflare.com/#zone-level-authenticated-origin-pulls-list-certificates\n\t\t\t\t\tif (operation === 'getMany') {\n\t\t\t\t\t\tconst zoneId = this.getNodeParameter('zoneId', i) as string;\n\t\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', i);\n\t\t\t\t\t\tconst filters = this.getNodeParameter('filters', i, {});\n\n\t\t\t\t\t\tObject.assign(qs, filters);\n\n\t\t\t\t\t\tif (returnAll) {\n\t\t\t\t\t\t\tresponseData = await cloudflareApiRequestAllItems.call(\n\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t'result',\n\t\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t\t`/zones/${zoneId}/origin_tls_client_auth`,\n\t\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst limit = this.getNodeParameter('limit', i);\n\t\t\t\t\t\t\tObject.assign(qs, { per_page: limit });\n\t\t\t\t\t\t\tresponseData = await cloudflareApiRequest.call(\n\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t\t`/zones/${zoneId}/origin_tls_client_auth`,\n\t\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tresponseData = responseData.result;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t//https://api.cloudflare.com/#zone-level-authenticated-origin-pulls-upload-certificate\n\t\t\t\t\tif (operation === 'upload') {\n\t\t\t\t\t\tconst zoneId = this.getNodeParameter('zoneId', i) as string;\n\t\t\t\t\t\tconst certificate = this.getNodeParameter('certificate', i) as string;\n\t\t\t\t\t\tconst privateKey = this.getNodeParameter('privateKey', i) as string;\n\n\t\t\t\t\t\tconst body: IDataObject = {\n\t\t\t\t\t\t\tcertificate,\n\t\t\t\t\t\t\tprivate_key: privateKey,\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tresponseData = await cloudflareApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'POST',\n\t\t\t\t\t\t\t`/zones/${zoneId}/origin_tls_client_auth`,\n\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tresponseData = responseData.result;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturnData.push(\n\t\t\t\t\t...this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\titemData: { item: i },\n\t\t\t\t\t\t},\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t} catch (error) {\n\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\treturnData.push({ json: { error: error.message } });\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\n\t\treturn [returnData as INodeExecutionData[]];\n\t}\n}\n"],"mappings":"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","names":[]}