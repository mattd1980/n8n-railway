{"version":3,"sources":["../../../../nodes/ExecuteWorkflow/ExecuteWorkflow/GenericFunctions.ts"],"sourcesContent":["import { readFile as fsReadFile } from 'fs/promises';\nimport { NodeOperationError, jsonParse } from 'n8n-workflow';\nimport type {\n\tIExecuteFunctions,\n\tIExecuteWorkflowInfo,\n\tILoadOptionsFunctions,\n\tINodeParameterResourceLocator,\n\tIRequestOptions,\n} from 'n8n-workflow';\n\nexport async function getWorkflowInfo(\n\tthis: ILoadOptionsFunctions | IExecuteFunctions,\n\tsource: string,\n\titemIndex = 0,\n) {\n\tconst workflowInfo: IExecuteWorkflowInfo = {};\n\tconst nodeVersion = this.getNode().typeVersion;\n\tif (source === 'database') {\n\t\t// Read workflow from database\n\t\tif (nodeVersion === 1) {\n\t\t\tworkflowInfo.id = this.getNodeParameter('workflowId', itemIndex) as string;\n\t\t} else {\n\t\t\tconst { value } = this.getNodeParameter(\n\t\t\t\t'workflowId',\n\t\t\t\titemIndex,\n\t\t\t\t{},\n\t\t\t) as INodeParameterResourceLocator;\n\t\t\tworkflowInfo.id = value as string;\n\t\t}\n\t} else if (source === 'localFile') {\n\t\t// Read workflow from filesystem\n\t\tconst workflowPath = this.getNodeParameter('workflowPath', itemIndex) as string;\n\n\t\tlet workflowJson;\n\t\ttry {\n\t\t\tworkflowJson = await fsReadFile(workflowPath, { encoding: 'utf8' });\n\t\t} catch (error) {\n\t\t\tif (error.code === 'ENOENT') {\n\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t`The file \"${workflowPath}\" could not be found, [item ${itemIndex}]`,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tthrow error;\n\t\t}\n\n\t\tworkflowInfo.code = jsonParse(workflowJson);\n\t} else if (source === 'parameter') {\n\t\t// Read workflow from parameter\n\t\tconst workflowJson = this.getNodeParameter('workflowJson', itemIndex) as string;\n\t\tworkflowInfo.code = jsonParse(workflowJson);\n\t} else if (source === 'url') {\n\t\t// Read workflow from url\n\t\tconst workflowUrl = this.getNodeParameter('workflowUrl', itemIndex) as string;\n\n\t\tconst requestOptions = {\n\t\t\theaders: {\n\t\t\t\taccept: 'application/json,text/*;q=0.99',\n\t\t\t},\n\t\t\tmethod: 'GET',\n\t\t\turi: workflowUrl,\n\t\t\tjson: true,\n\t\t\tgzip: true,\n\t\t} satisfies IRequestOptions;\n\n\t\tconst response = await this.helpers.request(requestOptions);\n\t\tworkflowInfo.code = response;\n\t}\n\n\treturn workflowInfo;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAuC;AACvC,0BAA8C;AAS9C,eAAsB,gBAErB,QACA,YAAY,GACX;AACD,QAAM,eAAqC,CAAC;AAC5C,QAAM,cAAc,KAAK,QAAQ,EAAE;AACnC,MAAI,WAAW,YAAY;AAE1B,QAAI,gBAAgB,GAAG;AACtB,mBAAa,KAAK,KAAK,iBAAiB,cAAc,SAAS;AAAA,IAChE,OAAO;AACN,YAAM,EAAE,MAAM,IAAI,KAAK;AAAA,QACtB;AAAA,QACA;AAAA,QACA,CAAC;AAAA,MACF;AACA,mBAAa,KAAK;AAAA,IACnB;AAAA,EACD,WAAW,WAAW,aAAa;AAElC,UAAM,eAAe,KAAK,iBAAiB,gBAAgB,SAAS;AAEpE,QAAI;AACJ,QAAI;AACH,qBAAe,UAAM,gBAAAA,UAAW,cAAc,EAAE,UAAU,OAAO,CAAC;AAAA,IACnE,SAAS,OAAO;AACf,UAAI,MAAM,SAAS,UAAU;AAC5B,cAAM,IAAI;AAAA,UACT,KAAK,QAAQ;AAAA,UACb,aAAa,YAAY,+BAA+B,SAAS;AAAA,QAClE;AAAA,MACD;AAEA,YAAM;AAAA,IACP;AAEA,iBAAa,WAAO,+BAAU,YAAY;AAAA,EAC3C,WAAW,WAAW,aAAa;AAElC,UAAM,eAAe,KAAK,iBAAiB,gBAAgB,SAAS;AACpE,iBAAa,WAAO,+BAAU,YAAY;AAAA,EAC3C,WAAW,WAAW,OAAO;AAE5B,UAAM,cAAc,KAAK,iBAAiB,eAAe,SAAS;AAElE,UAAM,iBAAiB;AAAA,MACtB,SAAS;AAAA,QACR,QAAQ;AAAA,MACT;AAAA,MACA,QAAQ;AAAA,MACR,KAAK;AAAA,MACL,MAAM;AAAA,MACN,MAAM;AAAA,IACP;AAEA,UAAM,WAAW,MAAM,KAAK,QAAQ,QAAQ,cAAc;AAC1D,iBAAa,OAAO;AAAA,EACrB;AAEA,SAAO;AACR;","names":["fsReadFile"]}