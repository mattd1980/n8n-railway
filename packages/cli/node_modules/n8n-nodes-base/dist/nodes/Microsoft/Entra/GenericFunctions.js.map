{"version":3,"sources":["../../../../nodes/Microsoft/Entra/GenericFunctions.ts"],"sourcesContent":["import type {\n\tJsonObject,\n\tIDataObject,\n\tIExecuteFunctions,\n\tIExecuteSingleFunctions,\n\tIHttpRequestMethods,\n\tIHttpRequestOptions,\n\tILoadOptionsFunctions,\n\tIRequestOptions,\n\tINodeExecutionData,\n\tIN8nHttpFullResponse,\n\tINodePropertyOptions,\n\tINodeListSearchResult,\n\tINodeListSearchItems,\n} from 'n8n-workflow';\nimport { NodeApiError } from 'n8n-workflow';\nimport { parseStringPromise } from 'xml2js';\n\nexport async function microsoftApiRequest(\n\tthis: IExecuteFunctions | IExecuteSingleFunctions | ILoadOptionsFunctions,\n\tmethod: IHttpRequestMethods,\n\tendpoint: string,\n\tbody: IDataObject = {},\n\tqs?: IDataObject,\n\theaders?: IDataObject,\n\turl?: string,\n): Promise<any> {\n\tconst options: IHttpRequestOptions = {\n\t\tmethod,\n\t\turl: url ?? `https://graph.microsoft.com/v1.0${endpoint}`,\n\t\tjson: true,\n\t\theaders,\n\t\tbody,\n\t\tqs,\n\t};\n\n\treturn await this.helpers.requestWithAuthentication.call(\n\t\tthis,\n\t\t'microsoftEntraOAuth2Api',\n\t\toptions,\n\t);\n}\n\nexport async function microsoftApiPaginateRequest(\n\tthis: IExecuteFunctions | IExecuteSingleFunctions | ILoadOptionsFunctions,\n\tmethod: IHttpRequestMethods,\n\tendpoint: string,\n\tbody: IDataObject = {},\n\tqs?: IDataObject,\n\theaders?: IDataObject,\n\turl?: string,\n\titemIndex: number = 0,\n): Promise<IDataObject[]> {\n\t// Todo: IHttpRequestOptions doesn't have uri property which is required for requestWithAuthenticationPaginated\n\tconst options: IRequestOptions = {\n\t\tmethod,\n\t\turi: url ?? `https://graph.microsoft.com/v1.0${endpoint}`,\n\t\tjson: true,\n\t\theaders,\n\t\tbody,\n\t\tqs,\n\t};\n\n\tconst pages = await this.helpers.requestWithAuthenticationPaginated.call(\n\t\tthis,\n\t\toptions,\n\t\titemIndex,\n\t\t{\n\t\t\tcontinue: '={{ !!$response.body?.[\"@odata.nextLink\"] }}',\n\t\t\trequest: {\n\t\t\t\turl: '={{ $response.body?.[\"@odata.nextLink\"] ?? $request.url }}',\n\t\t\t},\n\t\t\trequestInterval: 0,\n\t\t},\n\t\t'microsoftEntraOAuth2Api',\n\t);\n\n\tlet results: IDataObject[] = [];\n\tfor (const page of pages) {\n\t\tconst items = page.body.value as IDataObject[];\n\t\tif (items) {\n\t\t\tresults = results.concat(items);\n\t\t}\n\t}\n\n\treturn results;\n}\n\nexport async function handleErrorPostReceive(\n\tthis: IExecuteSingleFunctions,\n\tdata: INodeExecutionData[],\n\tresponse: IN8nHttpFullResponse,\n): Promise<INodeExecutionData[]> {\n\tif (String(response.statusCode).startsWith('4') || String(response.statusCode).startsWith('5')) {\n\t\tconst resource = this.getNodeParameter('resource') as string;\n\t\tconst operation = this.getNodeParameter('operation') as string;\n\t\tconst {\n\t\t\tcode: errorCode,\n\t\t\tmessage: errorMessage,\n\t\t\tdetails: errorDetails,\n\t\t} = (response.body as IDataObject)?.error as {\n\t\t\tcode: string;\n\t\t\tmessage: string;\n\t\t\tinnerError?: {\n\t\t\t\tcode: string;\n\t\t\t\t'request-id'?: string;\n\t\t\t\tdate?: string;\n\t\t\t};\n\t\t\tdetails?: Array<{\n\t\t\t\tcode: string;\n\t\t\t\tmessage: string;\n\t\t\t}>;\n\t\t};\n\n\t\t// Operation specific errors\n\t\tif (resource === 'group') {\n\t\t\tif (operation === 'create') {\n\t\t\t} else if (operation === 'delete') {\n\t\t\t\tif (errorCode === 'Request_ResourceNotFound') {\n\t\t\t\t\tthrow new NodeApiError(this.getNode(), response as unknown as JsonObject, {\n\t\t\t\t\t\tmessage: \"The required group doesn't match any existing one\",\n\t\t\t\t\t\tdescription: \"Double-check the value in the parameter 'Group to Delete' and try again\",\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} else if (operation === 'get') {\n\t\t\t\tif (errorCode === 'Request_ResourceNotFound') {\n\t\t\t\t\tthrow new NodeApiError(this.getNode(), response as unknown as JsonObject, {\n\t\t\t\t\t\tmessage: \"The required group doesn't match any existing one\",\n\t\t\t\t\t\tdescription: \"Double-check the value in the parameter 'Group to Get' and try again\",\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} else if (operation === 'getAll') {\n\t\t\t} else if (operation === 'update') {\n\t\t\t\tif (\n\t\t\t\t\terrorCode === 'BadRequest' &&\n\t\t\t\t\terrorMessage === 'Empty Payload. JSON content expected.'\n\t\t\t\t) {\n\t\t\t\t\t// Ignore empty payload error. Currently n8n deletes the empty body object from the request.\n\t\t\t\t\treturn data;\n\t\t\t\t}\n\t\t\t\tif (errorCode === 'Request_ResourceNotFound') {\n\t\t\t\t\tthrow new NodeApiError(this.getNode(), response as unknown as JsonObject, {\n\t\t\t\t\t\tmessage: \"The required group doesn't match any existing one\",\n\t\t\t\t\t\tdescription: \"Double-check the value in the parameter 'Group to Update' and try again\",\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (resource === 'user') {\n\t\t\tif (operation === 'addGroup') {\n\t\t\t\tif (\n\t\t\t\t\terrorCode === 'Request_BadRequest' &&\n\t\t\t\t\terrorMessage ===\n\t\t\t\t\t\t\"One or more added object references already exist for the following modified properties: 'members'.\"\n\t\t\t\t) {\n\t\t\t\t\tthrow new NodeApiError(this.getNode(), response as unknown as JsonObject, {\n\t\t\t\t\t\tmessage: 'The user is already in the group',\n\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t'The specified user cannot be added to the group because they are already a member',\n\t\t\t\t\t});\n\t\t\t\t} else if (errorCode === 'Request_ResourceNotFound') {\n\t\t\t\t\tconst group = this.getNodeParameter('group.value') as string;\n\t\t\t\t\tif (errorMessage.includes(group)) {\n\t\t\t\t\t\tthrow new NodeApiError(this.getNode(), response as unknown as JsonObject, {\n\t\t\t\t\t\t\tmessage: \"The required group doesn't match any existing one\",\n\t\t\t\t\t\t\tdescription: \"Double-check the value in the parameter 'Group' and try again\",\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new NodeApiError(this.getNode(), response as unknown as JsonObject, {\n\t\t\t\t\t\t\tmessage: \"The required user doesn't match any existing one\",\n\t\t\t\t\t\t\tdescription: \"Double-check the value in the parameter 'User to Add' and try again\",\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (operation === 'create') {\n\t\t\t} else if (operation === 'delete') {\n\t\t\t\tif (errorCode === 'Request_ResourceNotFound') {\n\t\t\t\t\tthrow new NodeApiError(this.getNode(), response as unknown as JsonObject, {\n\t\t\t\t\t\tmessage: \"The required user doesn't match any existing one\",\n\t\t\t\t\t\tdescription: \"Double-check the value in the parameter 'User to Delete' and try again\",\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} else if (operation === 'get') {\n\t\t\t\tif (errorCode === 'Request_ResourceNotFound') {\n\t\t\t\t\tthrow new NodeApiError(this.getNode(), response as unknown as JsonObject, {\n\t\t\t\t\t\tmessage: \"The required user doesn't match any existing one\",\n\t\t\t\t\t\tdescription: \"Double-check the value in the parameter 'User to Get' and try again\",\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} else if (operation === 'getAll') {\n\t\t\t} else if (operation === 'removeGroup') {\n\t\t\t\tif (errorCode === 'Request_ResourceNotFound') {\n\t\t\t\t\tthrow new NodeApiError(this.getNode(), response as unknown as JsonObject, {\n\t\t\t\t\t\tmessage: 'The user is not in the group',\n\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t'The specified user cannot be removed from the group because they are not a member of the group',\n\t\t\t\t\t});\n\t\t\t\t} else if (\n\t\t\t\t\terrorCode === 'Request_UnsupportedQuery' &&\n\t\t\t\t\terrorMessage ===\n\t\t\t\t\t\t\"Unsupported referenced-object resource identifier for link property 'members'.\"\n\t\t\t\t) {\n\t\t\t\t\tthrow new NodeApiError(this.getNode(), response as unknown as JsonObject, {\n\t\t\t\t\t\tmessage: 'The user ID is invalid',\n\t\t\t\t\t\tdescription: 'The ID should be in the format e.g. 02bd9fd6-8f93-4758-87c3-1fb73740a315',\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} else if (operation === 'update') {\n\t\t\t\tif (\n\t\t\t\t\terrorCode === 'BadRequest' &&\n\t\t\t\t\terrorMessage === 'Empty Payload. JSON content expected.'\n\t\t\t\t) {\n\t\t\t\t\t// Ignore empty payload error. Currently n8n deletes the empty body object from the request.\n\t\t\t\t\treturn data;\n\t\t\t\t}\n\t\t\t\tif (errorCode === 'Request_ResourceNotFound') {\n\t\t\t\t\tthrow new NodeApiError(this.getNode(), response as unknown as JsonObject, {\n\t\t\t\t\t\tmessage: \"The required user doesn't match any existing one\",\n\t\t\t\t\t\tdescription: \"Double-check the value in the parameter 'User to Update' and try again\",\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Generic errors\n\t\tif (\n\t\t\terrorCode === 'Request_BadRequest' &&\n\t\t\terrorMessage.startsWith('Invalid object identifier')\n\t\t) {\n\t\t\tconst group = this.getNodeParameter('group.value', '') as string;\n\t\t\tconst parameterResource =\n\t\t\t\tresource === 'group' || errorMessage.includes(group) ? 'group' : 'user';\n\n\t\t\tthrow new NodeApiError(this.getNode(), response as unknown as JsonObject, {\n\t\t\t\tmessage: `The ${parameterResource} ID is invalid`,\n\t\t\t\tdescription: 'The ID should be in the format e.g. 02bd9fd6-8f93-4758-87c3-1fb73740a315',\n\t\t\t});\n\t\t}\n\t\tif (errorDetails?.some((x) => x.code === 'ObjectConflict' || x.code === 'ConflictingObjects')) {\n\t\t\tthrow new NodeApiError(this.getNode(), response as unknown as JsonObject, {\n\t\t\t\tmessage: `The ${resource} already exists`,\n\t\t\t\tdescription: errorMessage,\n\t\t\t});\n\t\t}\n\n\t\tthrow new NodeApiError(this.getNode(), response as unknown as JsonObject);\n\t}\n\n\treturn data;\n}\n\nexport async function getGroupProperties(\n\tthis: ILoadOptionsFunctions,\n): Promise<INodePropertyOptions[]> {\n\tconst returnData: INodePropertyOptions[] = [];\n\tconst response = await microsoftApiRequest.call(this, 'GET', '/$metadata#groups');\n\tconst metadata = await parseStringPromise(response as string, {\n\t\texplicitArray: false,\n\t});\n\n\t/* eslint-disable */\n\tconst entities = metadata['edmx:Edmx']['edmx:DataServices']['Schema']\n\t\t.find((x: any) => x['$']['Namespace'] === 'microsoft.graph')\n\t\t['EntityType'].filter((x: any) =>\n\t\t\t['entity', 'directoryObject', 'group'].includes(x['$']['Name']),\n\t\t);\n\tlet properties = entities\n\t\t.flatMap((x: any) => x['Property'])\n\t\t.map((x: any) => x['$']['Name']) as string[];\n\t/* eslint-enable */\n\n\tproperties = properties.filter(\n\t\t(x) => !['id', 'isArchived', 'hasMembersWithLicenseErrors'].includes(x),\n\t);\n\n\tproperties = properties.sort();\n\n\tfor (const property of properties) {\n\t\treturnData.push({\n\t\t\tname: property,\n\t\t\tvalue: property,\n\t\t});\n\t}\n\n\treturn returnData;\n}\n\nexport async function getUserProperties(\n\tthis: ILoadOptionsFunctions,\n): Promise<INodePropertyOptions[]> {\n\tconst returnData: INodePropertyOptions[] = [];\n\tconst response = await microsoftApiRequest.call(this, 'GET', '/$metadata#users');\n\tconst metadata = await parseStringPromise(response as string, {\n\t\texplicitArray: false,\n\t});\n\n\t/* eslint-disable */\n\tconst entities = metadata['edmx:Edmx']['edmx:DataServices']['Schema']\n\t\t.find((x: any) => x['$']['Namespace'] === 'microsoft.graph')\n\t\t['EntityType'].filter((x: any) =>\n\t\t\t['entity', 'directoryObject', 'user'].includes(x['$']['Name']),\n\t\t);\n\tlet properties = entities\n\t\t.flatMap((x: any) => x['Property'])\n\t\t.map((x: any) => x['$']['Name']) as string[];\n\t/* eslint-enable */\n\n\t// signInActivity requires AuditLog.Read.All\n\t// mailboxSettings MailboxSettings.Read\n\tproperties = properties.filter(\n\t\t(x) =>\n\t\t\t!['id', 'deviceEnrollmentLimit', 'mailboxSettings', 'print', 'signInActivity'].includes(x),\n\t);\n\n\tproperties = properties.sort();\n\n\tfor (const property of properties) {\n\t\treturnData.push({\n\t\t\tname: property,\n\t\t\tvalue: property,\n\t\t});\n\t}\n\treturn returnData;\n}\n\nexport async function getGroups(\n\tthis: ILoadOptionsFunctions,\n\tfilter?: string,\n\tpaginationToken?: string,\n): Promise<INodeListSearchResult> {\n\tlet response: any;\n\tif (paginationToken) {\n\t\tresponse = await microsoftApiRequest.call(\n\t\t\tthis,\n\t\t\t'GET',\n\t\t\t'/groups',\n\t\t\t{},\n\t\t\tundefined,\n\t\t\tundefined,\n\t\t\tpaginationToken,\n\t\t);\n\t} else {\n\t\tconst qs: IDataObject = {\n\t\t\t$select: 'id,displayName',\n\t\t};\n\t\tconst headers: IDataObject = {};\n\t\tif (filter) {\n\t\t\theaders.ConsistencyLevel = 'eventual';\n\t\t\tqs.$search = `\"displayName:${filter}\"`;\n\t\t}\n\t\tresponse = await microsoftApiRequest.call(this, 'GET', '/groups', {}, qs, headers);\n\t}\n\n\tconst groups: Array<{\n\t\tid: string;\n\t\tdisplayName: string;\n\t}> = response.value;\n\n\tconst results: INodeListSearchItems[] = groups\n\t\t.map((g) => ({\n\t\t\tname: g.displayName,\n\t\t\tvalue: g.id,\n\t\t}))\n\t\t.sort((a, b) =>\n\t\t\ta.name.localeCompare(b.name, undefined, { numeric: true, sensitivity: 'base' }),\n\t\t);\n\n\treturn { results, paginationToken: response['@odata.nextLink'] };\n}\n\nexport async function getUsers(\n\tthis: ILoadOptionsFunctions,\n\tfilter?: string,\n\tpaginationToken?: string,\n): Promise<INodeListSearchResult> {\n\tlet response: any;\n\tif (paginationToken) {\n\t\tresponse = await microsoftApiRequest.call(\n\t\t\tthis,\n\t\t\t'GET',\n\t\t\t'/users',\n\t\t\t{},\n\t\t\tundefined,\n\t\t\tundefined,\n\t\t\tpaginationToken,\n\t\t);\n\t} else {\n\t\tconst qs: IDataObject = {\n\t\t\t$select: 'id,displayName',\n\t\t};\n\t\tconst headers: IDataObject = {};\n\t\tif (filter) {\n\t\t\tqs.$filter = `startsWith(displayName, '${filter}') OR startsWith(userPrincipalName, '${filter}')`;\n\t\t}\n\t\tresponse = await microsoftApiRequest.call(this, 'GET', '/users', {}, qs, headers);\n\t}\n\n\tconst users: Array<{\n\t\tid: string;\n\t\tdisplayName: string;\n\t}> = response.value;\n\n\tconst results: INodeListSearchItems[] = users\n\t\t.map((u) => ({\n\t\t\tname: u.displayName,\n\t\t\tvalue: u.id,\n\t\t}))\n\t\t.sort((a, b) =>\n\t\t\ta.name.localeCompare(b.name, undefined, { numeric: true, sensitivity: 'base' }),\n\t\t);\n\n\treturn { results, paginationToken: response['@odata.nextLink'] };\n}\n"],"mappings":"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","names":[]}