{"version":3,"sources":["../../../../../../nodes/Microsoft/Outlook/v2/methods/listSearch.ts"],"sourcesContent":["import type { IDataObject, ILoadOptionsFunctions, INodeListSearchResult } from 'n8n-workflow';\n\nimport { encodeOutlookId } from '../helpers/utils';\nimport { getSubfolders, microsoftApiRequest } from '../transport';\n\nasync function search(\n\tthis: ILoadOptionsFunctions,\n\tresource: string,\n\tnameProperty: string,\n\tfilter?: string,\n\tpaginationToken?: string,\n): Promise<INodeListSearchResult> {\n\tlet response: IDataObject = {};\n\n\tif (paginationToken) {\n\t\tresponse = await microsoftApiRequest.call(\n\t\t\tthis,\n\t\t\t'GET',\n\t\t\t'',\n\t\t\tundefined,\n\t\t\tundefined,\n\t\t\tpaginationToken, // paginationToken contains the full URL\n\t\t);\n\t} else {\n\t\tconst qs: IDataObject = {\n\t\t\t$select: `id,${nameProperty}`,\n\t\t\t$top: 100,\n\t\t};\n\n\t\tif (filter) {\n\t\t\tconst filterValue = encodeURI(filter);\n\t\t\tqs.$filter = `contains(${nameProperty}, '${filterValue}')`;\n\t\t}\n\n\t\tresponse = await microsoftApiRequest.call(this, 'GET', resource, undefined, qs);\n\t}\n\n\treturn {\n\t\tresults: (response.value as IDataObject[]).map((entry: IDataObject) => {\n\t\t\treturn {\n\t\t\t\tname: entry[nameProperty] as string,\n\t\t\t\tvalue: entry.id as string,\n\t\t\t};\n\t\t}),\n\t\tpaginationToken: response['@odata.nextLink'],\n\t};\n}\n\nexport async function searchContacts(\n\tthis: ILoadOptionsFunctions,\n\tfilter?: string,\n\tpaginationToken?: string,\n): Promise<INodeListSearchResult> {\n\treturn await search.call(this, '/contacts', 'displayName', filter, paginationToken);\n}\n\nexport async function searchCalendars(\n\tthis: ILoadOptionsFunctions,\n\tfilter?: string,\n\tpaginationToken?: string,\n): Promise<INodeListSearchResult> {\n\treturn await search.call(this, '/calendars', 'name', filter, paginationToken);\n}\n\nexport async function searchDrafts(\n\tthis: ILoadOptionsFunctions,\n\tfilter?: string,\n\tpaginationToken?: string,\n): Promise<INodeListSearchResult> {\n\tlet response: IDataObject = {};\n\n\tif (paginationToken) {\n\t\tresponse = await microsoftApiRequest.call(\n\t\t\tthis,\n\t\t\t'GET',\n\t\t\t'',\n\t\t\tundefined,\n\t\t\tundefined,\n\t\t\tpaginationToken, // paginationToken contains the full URL\n\t\t);\n\t} else {\n\t\tconst qs: IDataObject = {\n\t\t\t$select: 'id,subject,bodyPreview,webLink',\n\t\t\t$top: 100,\n\t\t\t$filter: 'isDraft eq true',\n\t\t};\n\n\t\tif (filter) {\n\t\t\tconst filterValue = encodeURI(filter);\n\t\t\tqs.$filter += ` AND contains(${'subject'}, '${filterValue}')`;\n\t\t}\n\n\t\tresponse = await microsoftApiRequest.call(this, 'GET', '/messages', undefined, qs);\n\t}\n\n\treturn {\n\t\tresults: (response.value as IDataObject[]).map((entry: IDataObject) => {\n\t\t\treturn {\n\t\t\t\tname: (entry.subject || entry.bodyPreview) as string,\n\t\t\t\tvalue: entry.id as string,\n\t\t\t\turl: entry.webLink as string,\n\t\t\t};\n\t\t}),\n\t\tpaginationToken: response['@odata.nextLink'],\n\t};\n}\n\nexport async function searchMessages(\n\tthis: ILoadOptionsFunctions,\n\tfilter?: string,\n\tpaginationToken?: string,\n): Promise<INodeListSearchResult> {\n\tlet response: IDataObject = {};\n\n\tif (paginationToken) {\n\t\tresponse = await microsoftApiRequest.call(\n\t\t\tthis,\n\t\t\t'GET',\n\t\t\t'',\n\t\t\tundefined,\n\t\t\tundefined,\n\t\t\tpaginationToken, // paginationToken contains the full URL\n\t\t);\n\t} else {\n\t\tconst qs: IDataObject = {\n\t\t\t$select: 'id,subject,bodyPreview,webLink',\n\t\t\t$top: 100,\n\t\t};\n\n\t\tif (filter) {\n\t\t\tconst filterValue = encodeURI(filter);\n\t\t\tqs.$filter = `contains(${'subject'}, '${filterValue}')`;\n\t\t}\n\n\t\tresponse = await microsoftApiRequest.call(this, 'GET', '/messages', undefined, qs);\n\t}\n\n\treturn {\n\t\tresults: (response.value as IDataObject[]).map((entry: IDataObject) => {\n\t\t\treturn {\n\t\t\t\tname: (entry.subject || entry.bodyPreview) as string,\n\t\t\t\tvalue: entry.id as string,\n\t\t\t\turl: entry.webLink as string,\n\t\t\t};\n\t\t}),\n\t\tpaginationToken: response['@odata.nextLink'],\n\t};\n}\n\nexport async function searchEvents(\n\tthis: ILoadOptionsFunctions,\n\tfilter?: string,\n\tpaginationToken?: string,\n): Promise<INodeListSearchResult> {\n\tlet response: IDataObject = {};\n\n\tconst calendarId = this.getNodeParameter('calendarId', undefined, {\n\t\textractValue: true,\n\t}) as string;\n\n\tif (paginationToken) {\n\t\tresponse = await microsoftApiRequest.call(\n\t\t\tthis,\n\t\t\t'GET',\n\t\t\t'',\n\t\t\tundefined,\n\t\t\tundefined,\n\t\t\tpaginationToken, // paginationToken contains the full URL\n\t\t);\n\t} else {\n\t\tconst qs: IDataObject = {\n\t\t\t$select: 'id,subject,bodyPreview',\n\t\t\t$top: 100,\n\t\t};\n\n\t\tif (filter) {\n\t\t\tconst filterValue = encodeURI(filter);\n\t\t\tqs.$filter = `contains(${'subject'}, '${filterValue}')`;\n\t\t}\n\n\t\tresponse = await microsoftApiRequest.call(\n\t\t\tthis,\n\t\t\t'GET',\n\t\t\t`/calendars/${calendarId}/events`,\n\t\t\tundefined,\n\t\t\tqs,\n\t\t);\n\t}\n\n\treturn {\n\t\tresults: (response.value as IDataObject[]).map((entry: IDataObject) => {\n\t\t\treturn {\n\t\t\t\tname: (entry.subject || entry.bodyPreview) as string,\n\t\t\t\tvalue: entry.id as string,\n\t\t\t\turl: `https://outlook.office365.com/calendar/item/${encodeOutlookId(entry.id as string)}`,\n\t\t\t};\n\t\t}),\n\t\tpaginationToken: response['@odata.nextLink'],\n\t};\n}\n\nexport async function searchFolders(\n\tthis: ILoadOptionsFunctions,\n\tfilter?: string,\n\tpaginationToken?: string,\n): Promise<INodeListSearchResult> {\n\tlet response: IDataObject = {};\n\n\tif (paginationToken) {\n\t\tresponse = await microsoftApiRequest.call(\n\t\t\tthis,\n\t\t\t'GET',\n\t\t\t'',\n\t\t\tundefined,\n\t\t\tundefined,\n\t\t\tpaginationToken, // paginationToken contains the full URL\n\t\t);\n\t} else {\n\t\tconst qs: IDataObject = {\n\t\t\t$top: 100,\n\t\t};\n\n\t\tresponse = await microsoftApiRequest.call(this, 'GET', '/mailFolders', undefined, qs);\n\t}\n\n\tlet folders = await getSubfolders.call(this, response.value as IDataObject[]);\n\n\tif (filter) {\n\t\tfilter = filter.toLowerCase();\n\t\tfolders = folders.filter((folder) =>\n\t\t\t((folder.displayName as string) || '').toLowerCase().includes(filter as string),\n\t\t);\n\t}\n\n\treturn {\n\t\tresults: folders.map((entry: IDataObject) => {\n\t\t\treturn {\n\t\t\t\tname: entry.displayName as string,\n\t\t\t\tvalue: entry.id as string,\n\t\t\t\turl: `https://outlook.office365.com/mail/${encodeOutlookId(entry.id as string)}`,\n\t\t\t};\n\t\t}),\n\t\tpaginationToken: response['@odata.nextLink'],\n\t};\n}\n\nexport async function searchAttachments(\n\tthis: ILoadOptionsFunctions,\n\tpaginationToken?: string,\n): Promise<INodeListSearchResult> {\n\tlet response: IDataObject = {};\n\n\tconst messageId = this.getNodeParameter('messageId', undefined, {\n\t\textractValue: true,\n\t}) as string;\n\n\tif (paginationToken) {\n\t\tresponse = await microsoftApiRequest.call(\n\t\t\tthis,\n\t\t\t'GET',\n\t\t\t'',\n\t\t\tundefined,\n\t\t\tundefined,\n\t\t\tpaginationToken, // paginationToken contains the full URL\n\t\t);\n\t} else {\n\t\tconst qs: IDataObject = {\n\t\t\t$select: 'id,name',\n\t\t\t$top: 100,\n\t\t};\n\n\t\tresponse = await microsoftApiRequest.call(\n\t\t\tthis,\n\t\t\t'GET',\n\t\t\t`/messages/${messageId}/attachments`,\n\t\t\tundefined,\n\t\t\tqs,\n\t\t);\n\t}\n\n\treturn {\n\t\tresults: (response.value as IDataObject[]).map((entry: IDataObject) => {\n\t\t\treturn {\n\t\t\t\tname: entry.name as string,\n\t\t\t\tvalue: entry.id as string,\n\t\t\t};\n\t\t}),\n\t\tpaginationToken: response['@odata.nextLink'],\n\t};\n}\n"],"mappings":"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","names":[]}