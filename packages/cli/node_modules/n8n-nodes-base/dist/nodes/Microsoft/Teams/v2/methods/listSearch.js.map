{"version":3,"sources":["../../../../../../nodes/Microsoft/Teams/v2/methods/listSearch.ts"],"sourcesContent":["import {\n\tNodeOperationError,\n\ttype IDataObject,\n\ttype ILoadOptionsFunctions,\n\ttype INodeListSearchItems,\n\ttype INodeListSearchResult,\n\tsleep,\n} from 'n8n-workflow';\n\nimport { filterSortSearchListItems } from '../helpers/utils';\nimport { microsoftApiRequest } from '../transport';\n\nexport async function getChats(\n\tthis: ILoadOptionsFunctions,\n\tfilter?: string,\n): Promise<INodeListSearchResult> {\n\tconst returnData: INodeListSearchItems[] = [];\n\tconst qs: IDataObject = {\n\t\t$expand: 'members',\n\t};\n\n\tlet value: IDataObject[] = [];\n\tlet attempts = 5;\n\tdo {\n\t\ttry {\n\t\t\tvalue = ((await microsoftApiRequest.call(this, 'GET', '/v1.0/chats', {}, qs)) as IDataObject)\n\t\t\t\t.value as IDataObject[];\n\t\t\tbreak;\n\t\t} catch (error) {\n\t\t\tif (attempts > 0) {\n\t\t\t\tawait sleep(1000);\n\t\t\t\tattempts--;\n\t\t\t} else {\n\t\t\t\tthrow new NodeOperationError(this.getNode(), error);\n\t\t\t}\n\t\t}\n\t} while (attempts > 0);\n\n\tfor (const chat of value) {\n\t\tif (!chat.topic) {\n\t\t\tchat.topic = (chat.members as IDataObject[])\n\t\t\t\t.filter((member: IDataObject) => member.displayName)\n\t\t\t\t.map((member: IDataObject) => member.displayName)\n\t\t\t\t.join(', ');\n\t\t}\n\t\tconst chatName = `${chat.topic || '(no title) - ' + chat.id} (${chat.chatType})`;\n\t\tconst chatId = chat.id;\n\t\tconst url = chat.webUrl as string;\n\t\treturnData.push({\n\t\t\tname: chatName,\n\t\t\tvalue: chatId as string,\n\t\t\turl,\n\t\t});\n\t}\n\n\tconst results = returnData\n\t\t.filter(\n\t\t\t(item) =>\n\t\t\t\t!filter ||\n\t\t\t\titem.name.toLowerCase().includes(filter.toLowerCase()) ||\n\t\t\t\titem.value.toString().toLowerCase().includes(filter.toLowerCase()),\n\t\t)\n\t\t.sort((a, b) => {\n\t\t\tif (a.name.toLocaleLowerCase() < b.name.toLocaleLowerCase()) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\tif (a.name.toLocaleLowerCase() > b.name.toLocaleLowerCase()) {\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\treturn 0;\n\t\t});\n\n\treturn { results };\n}\n\nexport async function getTeams(\n\tthis: ILoadOptionsFunctions,\n\tfilter?: string,\n): Promise<INodeListSearchResult> {\n\tconst returnData: INodeListSearchItems[] = [];\n\tconst { value } = await microsoftApiRequest.call(this, 'GET', '/v1.0/me/joinedTeams');\n\n\tfor (const team of value) {\n\t\tconst teamName = team.displayName;\n\t\tconst teamId = team.id;\n\t\t// let channelId: string = '';\n\n\t\t// try {\n\t\t// \tconst channels = await microsoftApiRequestAllItems.call(\n\t\t// \t\tthis,\n\t\t// \t\t'value',\n\t\t// \t\t'GET',\n\t\t// \t\t`/v1.0/teams/${teamId}/channels`,\n\t\t// \t\t{},\n\t\t// \t);\n\n\t\t// \tif (channels.length > 0) {\n\t\t// \t\tchannelId = channels.find((channel: IDataObject) => channel.displayName === 'General').id;\n\t\t// \t\tif (!channelId) {\n\t\t// \t\t\tchannelId = channels[0].id;\n\t\t// \t\t}\n\t\t// \t}\n\t\t// } catch (error) {}\n\n\t\treturnData.push({\n\t\t\tname: teamName,\n\t\t\tvalue: teamId,\n\t\t\t// url: channelId\n\t\t\t// \t? `https://teams.microsoft.com/l/team/${channelId}/conversations?groupId=${teamId}&tenantId=${team.tenantId}`\n\t\t\t// \t: undefined,\n\t\t});\n\t}\n\tconst results = filterSortSearchListItems(returnData, filter);\n\n\treturn { results };\n}\n\nexport async function getChannels(\n\tthis: ILoadOptionsFunctions,\n\tfilter?: string,\n): Promise<INodeListSearchResult> {\n\tconst returnData: INodeListSearchItems[] = [];\n\tconst teamId = this.getCurrentNodeParameter('teamId', { extractValue: true }) as string;\n\tconst operation = this.getNodeParameter('operation', 0) as string;\n\tconst resource = this.getNodeParameter('resource', 0) as string;\n\n\tconst excludeGeneralChannel = ['deleteChannel'];\n\n\tif (resource === 'channel') excludeGeneralChannel.push('update');\n\n\tconst { value } = await microsoftApiRequest.call(this, 'GET', `/v1.0/teams/${teamId}/channels`);\n\n\tfor (const channel of value) {\n\t\tif (channel.displayName === 'General' && excludeGeneralChannel.includes(operation)) {\n\t\t\tcontinue;\n\t\t}\n\t\tconst channelName = channel.displayName;\n\t\tconst channelId = channel.id;\n\t\tconst url = channel.webUrl;\n\t\treturnData.push({\n\t\t\tname: channelName,\n\t\t\tvalue: channelId,\n\t\t\turl,\n\t\t});\n\t}\n\n\tconst results = filterSortSearchListItems(returnData, filter);\n\treturn { results };\n}\n\nexport async function getGroups(\n\tthis: ILoadOptionsFunctions,\n\tfilter?: string,\n): Promise<INodeListSearchResult> {\n\tconst returnData: INodeListSearchItems[] = [];\n\t// const groupSource = this.getCurrentNodeParameter('groupSource') as string;\n\tconst requestUrl = '/v1.0/groups' as string;\n\n\t// if (groupSource === 'mine') {\n\t// \trequestUrl = '/v1.0/me/transitiveMemberOf';\n\t// }\n\n\tconst { value } = await microsoftApiRequest.call(this, 'GET', requestUrl);\n\n\tfor (const group of value) {\n\t\tif (group.displayName === 'All Company') continue;\n\n\t\tconst name = group.displayName || group.mail;\n\n\t\tif (name === undefined) continue;\n\n\t\treturnData.push({\n\t\t\tname,\n\t\t\tvalue: group.id,\n\t\t});\n\t}\n\n\tconst results = filterSortSearchListItems(returnData, filter);\n\treturn { results };\n}\n\nexport async function getPlans(\n\tthis: ILoadOptionsFunctions,\n\tfilter?: string,\n): Promise<INodeListSearchResult> {\n\tconst returnData: INodeListSearchItems[] = [];\n\n\tlet groupId = '';\n\n\ttry {\n\t\tgroupId = this.getCurrentNodeParameter('groupId', { extractValue: true }) as string;\n\t} catch (error) {}\n\n\tconst operation = this.getNodeParameter('operation', 0) as string;\n\n\tif (operation === 'update' && !groupId) {\n\t\tgroupId = this.getCurrentNodeParameter('updateFields.groupId', {\n\t\t\textractValue: true,\n\t\t}) as string;\n\t}\n\n\tconst { value } = await microsoftApiRequest.call(\n\t\tthis,\n\t\t'GET',\n\t\t`/v1.0/groups/${groupId}/planner/plans`,\n\t);\n\tfor (const plan of value) {\n\t\treturnData.push({\n\t\t\tname: plan.title,\n\t\t\tvalue: plan.id,\n\t\t});\n\t}\n\tconst results = filterSortSearchListItems(returnData, filter);\n\treturn { results };\n}\n\nexport async function getBuckets(\n\tthis: ILoadOptionsFunctions,\n\tfilter?: string,\n): Promise<INodeListSearchResult> {\n\tconst returnData: INodeListSearchItems[] = [];\n\tlet planId = '';\n\n\ttry {\n\t\tplanId = this.getCurrentNodeParameter('planId', { extractValue: true }) as string;\n\t} catch (error) {}\n\n\tconst operation = this.getNodeParameter('operation', 0) as string;\n\n\tif (operation === 'update' && !planId) {\n\t\tplanId = this.getCurrentNodeParameter('updateFields.planId', {\n\t\t\textractValue: true,\n\t\t}) as string;\n\t}\n\n\tconst { value } = await microsoftApiRequest.call(\n\t\tthis,\n\t\t'GET',\n\t\t`/v1.0/planner/plans/${planId}/buckets`,\n\t);\n\tfor (const bucket of value) {\n\t\treturnData.push({\n\t\t\tname: bucket.name,\n\t\t\tvalue: bucket.id,\n\t\t});\n\t}\n\tconst results = filterSortSearchListItems(returnData, filter);\n\treturn { results };\n}\n\nexport async function getMembers(\n\tthis: ILoadOptionsFunctions,\n\tfilter?: string,\n): Promise<INodeListSearchResult> {\n\tconst returnData: INodeListSearchItems[] = [];\n\tlet groupId = '';\n\n\ttry {\n\t\tgroupId = this.getCurrentNodeParameter('groupId', { extractValue: true }) as string;\n\t} catch (error) {}\n\n\tconst operation = this.getNodeParameter('operation', 0) as string;\n\n\tif (operation === 'update' && !groupId) {\n\t\tgroupId = this.getCurrentNodeParameter('updateFields.groupId', {\n\t\t\textractValue: true,\n\t\t}) as string;\n\t}\n\tconst { value } = await microsoftApiRequest.call(this, 'GET', `/v1.0/groups/${groupId}/members`);\n\n\tfor (const member of value) {\n\t\treturnData.push({\n\t\t\tname: member.displayName,\n\t\t\tvalue: member.id,\n\t\t});\n\t}\n\n\tconst results = filterSortSearchListItems(returnData, filter);\n\treturn { results };\n}\n"],"mappings":"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","names":[]}