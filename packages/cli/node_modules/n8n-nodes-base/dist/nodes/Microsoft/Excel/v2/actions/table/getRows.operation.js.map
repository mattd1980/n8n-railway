{"version":3,"sources":["../../../../../../../nodes/Microsoft/Excel/v2/actions/table/getRows.operation.ts"],"sourcesContent":["import type {\n\tIDataObject,\n\tIExecuteFunctions,\n\tINodeExecutionData,\n\tINodeProperties,\n} from 'n8n-workflow';\n\nimport { updateDisplayOptions } from '@utils/utilities';\n\nimport { microsoftApiRequest, microsoftApiRequestAllItemsSkip } from '../../transport';\nimport { tableRLC, workbookRLC, worksheetRLC } from '../common.descriptions';\n\nconst properties: INodeProperties[] = [\n\tworkbookRLC,\n\tworksheetRLC,\n\ttableRLC,\n\t{\n\t\tdisplayName: 'Return All',\n\t\tname: 'returnAll',\n\t\ttype: 'boolean',\n\t\tdefault: false,\n\t\tdescription: 'Whether to return all results or only up to a given limit',\n\t},\n\t{\n\t\tdisplayName: 'Limit',\n\t\tname: 'limit',\n\t\ttype: 'number',\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\treturnAll: [false],\n\t\t\t},\n\t\t},\n\t\ttypeOptions: {\n\t\t\tminValue: 1,\n\t\t\tmaxValue: 500,\n\t\t},\n\t\tdefault: 100,\n\t\tdescription: 'Max number of results to return',\n\t},\n\t{\n\t\tdisplayName: 'RAW Data',\n\t\tname: 'rawData',\n\t\ttype: 'boolean',\n\t\tdefault: false,\n\t\tdescription:\n\t\t\t'Whether the data should be returned RAW instead of parsed into keys according to their header',\n\t},\n\t{\n\t\tdisplayName: 'Data Property',\n\t\tname: 'dataProperty',\n\t\ttype: 'string',\n\t\tdefault: 'data',\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\trawData: [true],\n\t\t\t},\n\t\t},\n\t\tdescription: 'The name of the property into which to write the RAW data',\n\t},\n\t{\n\t\tdisplayName: 'Filters',\n\t\tname: 'filters',\n\t\ttype: 'collection',\n\t\tplaceholder: 'Add Filter',\n\t\tdefault: {},\n\t\toptions: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Fields',\n\t\t\t\tname: 'fields',\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: '',\n\t\t\t\tdescription: 'A comma-separated list of the fields to include in the response',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\t'/rawData': [true],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Column Names or IDs',\n\t\t\t\tname: 'column',\n\t\t\t\ttype: 'multiOptions',\n\t\t\t\tdescription:\n\t\t\t\t\t'Choose from the list, or specify an ID using an <a href=\"https://docs.n8n.io/code/expressions/\">expression</a>. Choose from the list, or specify IDs using an <a href=\"https://docs.n8n.io/code/expressions/\">expression</a>.',\n\t\t\t\ttypeOptions: {\n\t\t\t\t\tloadOptionsDependsOn: ['table.value', 'worksheet.value', 'workbook.value'],\n\t\t\t\t\tloadOptionsMethod: 'getTableColumns',\n\t\t\t\t},\n\t\t\t\tdefault: [],\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\t'/rawData': [false],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t},\n];\n\nconst displayOptions = {\n\tshow: {\n\t\tresource: ['table'],\n\t\toperation: ['getRows'],\n\t},\n};\n\nexport const description = updateDisplayOptions(displayOptions, properties);\n\nexport async function execute(\n\tthis: IExecuteFunctions,\n\titems: INodeExecutionData[],\n): Promise<INodeExecutionData[]> {\n\t//https://docs.microsoft.com/en-us/graph/api/table-list-rows?view=graph-rest-1.0&tabs=http\n\tconst returnData: INodeExecutionData[] = [];\n\n\tfor (let i = 0; i < items.length; i++) {\n\t\tconst qs: IDataObject = {};\n\t\ttry {\n\t\t\tconst workbookId = this.getNodeParameter('workbook', i, undefined, {\n\t\t\t\textractValue: true,\n\t\t\t}) as string;\n\n\t\t\tconst worksheetId = this.getNodeParameter('worksheet', i, undefined, {\n\t\t\t\textractValue: true,\n\t\t\t}) as string;\n\n\t\t\tconst tableId = this.getNodeParameter('table', i, undefined, {\n\t\t\t\textractValue: true,\n\t\t\t}) as string;\n\n\t\t\tconst filters = this.getNodeParameter('filters', i);\n\t\t\tconst returnAll = this.getNodeParameter('returnAll', i);\n\t\t\tconst rawData = this.getNodeParameter('rawData', i);\n\n\t\t\tif (rawData) {\n\t\t\t\tif (filters.fields) {\n\t\t\t\t\tqs.$select = filters.fields;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet responseData;\n\t\t\tif (returnAll) {\n\t\t\t\tresponseData = await microsoftApiRequestAllItemsSkip.call(\n\t\t\t\t\tthis,\n\t\t\t\t\t'value',\n\t\t\t\t\t'GET',\n\t\t\t\t\t`/drive/items/${workbookId}/workbook/worksheets/${worksheetId}/tables/${tableId}/rows`,\n\t\t\t\t\t{},\n\t\t\t\t\tqs,\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tconst rowsQs = { ...qs };\n\t\t\t\trowsQs.$top = this.getNodeParameter('limit', i);\n\t\t\t\tresponseData = await microsoftApiRequest.call(\n\t\t\t\t\tthis,\n\t\t\t\t\t'GET',\n\t\t\t\t\t`/drive/items/${workbookId}/workbook/worksheets/${worksheetId}/tables/${tableId}/rows`,\n\t\t\t\t\t{},\n\t\t\t\t\trowsQs,\n\t\t\t\t);\n\t\t\t\tresponseData = responseData.value;\n\t\t\t}\n\t\t\tif (!rawData) {\n\t\t\t\tconst columnsQs = { ...qs };\n\t\t\t\tcolumnsQs.$select = 'name';\n\t\t\t\t// TODO: That should probably be cached in the future\n\t\t\t\tlet columns = await microsoftApiRequestAllItemsSkip.call(\n\t\t\t\t\tthis,\n\t\t\t\t\t'value',\n\t\t\t\t\t'GET',\n\t\t\t\t\t`/drive/items/${workbookId}/workbook/worksheets/${worksheetId}/tables/${tableId}/columns`,\n\t\t\t\t\t{},\n\t\t\t\t\tcolumnsQs,\n\t\t\t\t);\n\n\t\t\t\tcolumns = (columns as IDataObject[]).map((column) => column.name);\n\n\t\t\t\tlet rows: INodeExecutionData[] = [];\n\t\t\t\tfor (let index = 0; index < responseData.length; index++) {\n\t\t\t\t\tconst object: IDataObject = {};\n\t\t\t\t\tfor (let y = 0; y < columns.length; y++) {\n\t\t\t\t\t\tobject[columns[y]] = responseData[index].values[0][y];\n\t\t\t\t\t}\n\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\tthis.helpers.returnJsonArray({ ...object }),\n\t\t\t\t\t\t{ itemData: { item: index } },\n\t\t\t\t\t);\n\n\t\t\t\t\trows.push(...executionData);\n\t\t\t\t}\n\n\t\t\t\tif ((filters?.column as string[])?.length) {\n\t\t\t\t\trows = rows.map((row) => {\n\t\t\t\t\t\tconst rowData: IDataObject = {};\n\t\t\t\t\t\tObject.keys(row.json).forEach((key) => {\n\t\t\t\t\t\t\tif ((filters.column as string[]).includes(key)) {\n\t\t\t\t\t\t\t\trowData[key] = row.json[key];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t\treturn { ...rowData, json: rowData };\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\treturnData.push(...rows);\n\t\t\t} else {\n\t\t\t\tconst dataProperty = this.getNodeParameter('dataProperty', i) as string;\n\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\tthis.helpers.returnJsonArray({ [dataProperty]: responseData }),\n\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t);\n\n\t\t\t\treturnData.push(...executionData);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tif (this.continueOnFail()) {\n\t\t\t\tconst executionErrorData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\tthis.helpers.returnJsonArray({ error: error.message }),\n\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t);\n\t\t\t\treturnData.push(...executionErrorData);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\treturn returnData;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA,uBAAqC;AAErC,uBAAqE;AACrE,oBAAoD;AAEpD,MAAM,aAAgC;AAAA,EACrC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,IACC,aAAa;AAAA,IACb,MAAM;AAAA,IACN,MAAM;AAAA,IACN,SAAS;AAAA,IACT,aAAa;AAAA,EACd;AAAA,EACA;AAAA,IACC,aAAa;AAAA,IACb,MAAM;AAAA,IACN,MAAM;AAAA,IACN,gBAAgB;AAAA,MACf,MAAM;AAAA,QACL,WAAW,CAAC,KAAK;AAAA,MAClB;AAAA,IACD;AAAA,IACA,aAAa;AAAA,MACZ,UAAU;AAAA,MACV,UAAU;AAAA,IACX;AAAA,IACA,SAAS;AAAA,IACT,aAAa;AAAA,EACd;AAAA,EACA;AAAA,IACC,aAAa;AAAA,IACb,MAAM;AAAA,IACN,MAAM;AAAA,IACN,SAAS;AAAA,IACT,aACC;AAAA,EACF;AAAA,EACA;AAAA,IACC,aAAa;AAAA,IACb,MAAM;AAAA,IACN,MAAM;AAAA,IACN,SAAS;AAAA,IACT,gBAAgB;AAAA,MACf,MAAM;AAAA,QACL,SAAS,CAAC,IAAI;AAAA,MACf;AAAA,IACD;AAAA,IACA,aAAa;AAAA,EACd;AAAA,EACA;AAAA,IACC,aAAa;AAAA,IACb,MAAM;AAAA,IACN,MAAM;AAAA,IACN,aAAa;AAAA,IACb,SAAS,CAAC;AAAA,IACV,SAAS;AAAA,MACR;AAAA,QACC,aAAa;AAAA,QACb,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,QACT,aAAa;AAAA,QACb,gBAAgB;AAAA,UACf,MAAM;AAAA,YACL,YAAY,CAAC,IAAI;AAAA,UAClB;AAAA,QACD;AAAA,MACD;AAAA,MACA;AAAA,QACC,aAAa;AAAA,QACb,MAAM;AAAA,QACN,MAAM;AAAA,QACN,aACC;AAAA,QACD,aAAa;AAAA,UACZ,sBAAsB,CAAC,eAAe,mBAAmB,gBAAgB;AAAA,UACzE,mBAAmB;AAAA,QACpB;AAAA,QACA,SAAS,CAAC;AAAA,QACV,gBAAgB;AAAA,UACf,MAAM;AAAA,YACL,YAAY,CAAC,KAAK;AAAA,UACnB;AAAA,QACD;AAAA,MACD;AAAA,IACD;AAAA,EACD;AACD;AAEA,MAAM,iBAAiB;AAAA,EACtB,MAAM;AAAA,IACL,UAAU,CAAC,OAAO;AAAA,IAClB,WAAW,CAAC,SAAS;AAAA,EACtB;AACD;AAEO,MAAM,kBAAc,uCAAqB,gBAAgB,UAAU;AAE1E,eAAsB,QAErB,OACgC;AAEhC,QAAM,aAAmC,CAAC;AAE1C,WAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACtC,UAAM,KAAkB,CAAC;AACzB,QAAI;AACH,YAAM,aAAa,KAAK,iBAAiB,YAAY,GAAG,QAAW;AAAA,QAClE,cAAc;AAAA,MACf,CAAC;AAED,YAAM,cAAc,KAAK,iBAAiB,aAAa,GAAG,QAAW;AAAA,QACpE,cAAc;AAAA,MACf,CAAC;AAED,YAAM,UAAU,KAAK,iBAAiB,SAAS,GAAG,QAAW;AAAA,QAC5D,cAAc;AAAA,MACf,CAAC;AAED,YAAM,UAAU,KAAK,iBAAiB,WAAW,CAAC;AAClD,YAAM,YAAY,KAAK,iBAAiB,aAAa,CAAC;AACtD,YAAM,UAAU,KAAK,iBAAiB,WAAW,CAAC;AAElD,UAAI,SAAS;AACZ,YAAI,QAAQ,QAAQ;AACnB,aAAG,UAAU,QAAQ;AAAA,QACtB;AAAA,MACD;AAEA,UAAI;AACJ,UAAI,WAAW;AACd,uBAAe,MAAM,iDAAgC;AAAA,UACpD;AAAA,UACA;AAAA,UACA;AAAA,UACA,gBAAgB,UAAU,wBAAwB,WAAW,WAAW,OAAO;AAAA,UAC/E,CAAC;AAAA,UACD;AAAA,QACD;AAAA,MACD,OAAO;AACN,cAAM,SAAS,EAAE,GAAG,GAAG;AACvB,eAAO,OAAO,KAAK,iBAAiB,SAAS,CAAC;AAC9C,uBAAe,MAAM,qCAAoB;AAAA,UACxC;AAAA,UACA;AAAA,UACA,gBAAgB,UAAU,wBAAwB,WAAW,WAAW,OAAO;AAAA,UAC/E,CAAC;AAAA,UACD;AAAA,QACD;AACA,uBAAe,aAAa;AAAA,MAC7B;AACA,UAAI,CAAC,SAAS;AACb,cAAM,YAAY,EAAE,GAAG,GAAG;AAC1B,kBAAU,UAAU;AAEpB,YAAI,UAAU,MAAM,iDAAgC;AAAA,UACnD;AAAA,UACA;AAAA,UACA;AAAA,UACA,gBAAgB,UAAU,wBAAwB,WAAW,WAAW,OAAO;AAAA,UAC/E,CAAC;AAAA,UACD;AAAA,QACD;AAEA,kBAAW,QAA0B,IAAI,CAAC,WAAW,OAAO,IAAI;AAEhE,YAAI,OAA6B,CAAC;AAClC,iBAAS,QAAQ,GAAG,QAAQ,aAAa,QAAQ,SAAS;AACzD,gBAAM,SAAsB,CAAC;AAC7B,mBAAS,IAAI,GAAG,IAAI,QAAQ,QAAQ,KAAK;AACxC,mBAAO,QAAQ,CAAC,CAAC,IAAI,aAAa,KAAK,EAAE,OAAO,CAAC,EAAE,CAAC;AAAA,UACrD;AACA,gBAAM,gBAAgB,KAAK,QAAQ;AAAA,YAClC,KAAK,QAAQ,gBAAgB,EAAE,GAAG,OAAO,CAAC;AAAA,YAC1C,EAAE,UAAU,EAAE,MAAM,MAAM,EAAE;AAAA,UAC7B;AAEA,eAAK,KAAK,GAAG,aAAa;AAAA,QAC3B;AAEA,YAAK,SAAS,QAAqB,QAAQ;AAC1C,iBAAO,KAAK,IAAI,CAAC,QAAQ;AACxB,kBAAM,UAAuB,CAAC;AAC9B,mBAAO,KAAK,IAAI,IAAI,EAAE,QAAQ,CAAC,QAAQ;AACtC,kBAAK,QAAQ,OAAoB,SAAS,GAAG,GAAG;AAC/C,wBAAQ,GAAG,IAAI,IAAI,KAAK,GAAG;AAAA,cAC5B;AAAA,YACD,CAAC;AACD,mBAAO,EAAE,GAAG,SAAS,MAAM,QAAQ;AAAA,UACpC,CAAC;AAAA,QACF;AAEA,mBAAW,KAAK,GAAG,IAAI;AAAA,MACxB,OAAO;AACN,cAAM,eAAe,KAAK,iBAAiB,gBAAgB,CAAC;AAC5D,cAAM,gBAAgB,KAAK,QAAQ;AAAA,UAClC,KAAK,QAAQ,gBAAgB,EAAE,CAAC,YAAY,GAAG,aAAa,CAAC;AAAA,UAC7D,EAAE,UAAU,EAAE,MAAM,EAAE,EAAE;AAAA,QACzB;AAEA,mBAAW,KAAK,GAAG,aAAa;AAAA,MACjC;AAAA,IACD,SAAS,OAAO;AACf,UAAI,KAAK,eAAe,GAAG;AAC1B,cAAM,qBAAqB,KAAK,QAAQ;AAAA,UACvC,KAAK,QAAQ,gBAAgB,EAAE,OAAO,MAAM,QAAQ,CAAC;AAAA,UACrD,EAAE,UAAU,EAAE,MAAM,EAAE,EAAE;AAAA,QACzB;AACA,mBAAW,KAAK,GAAG,kBAAkB;AACrC;AAAA,MACD;AACA,YAAM;AAAA,IACP;AAAA,EACD;AAEA,SAAO;AACR;","names":[]}