{"version":3,"sources":["../../../../../../../nodes/Microsoft/Excel/v2/actions/table/getColumns.operation.ts"],"sourcesContent":["import type {\n\tIDataObject,\n\tIExecuteFunctions,\n\tINodeExecutionData,\n\tINodeProperties,\n} from 'n8n-workflow';\n\nimport { updateDisplayOptions } from '@utils/utilities';\n\nimport { microsoftApiRequest, microsoftApiRequestAllItemsSkip } from '../../transport';\nimport { tableRLC, workbookRLC, worksheetRLC } from '../common.descriptions';\n\nconst properties: INodeProperties[] = [\n\tworkbookRLC,\n\tworksheetRLC,\n\ttableRLC,\n\t{\n\t\tdisplayName: 'Return All',\n\t\tname: 'returnAll',\n\t\ttype: 'boolean',\n\t\tdefault: false,\n\t\tdescription: 'Whether to return all results or only up to a given limit',\n\t},\n\t{\n\t\tdisplayName: 'Limit',\n\t\tname: 'limit',\n\t\ttype: 'number',\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\treturnAll: [false],\n\t\t\t},\n\t\t},\n\t\ttypeOptions: {\n\t\t\tminValue: 1,\n\t\t\tmaxValue: 500,\n\t\t},\n\t\tdefault: 100,\n\t\tdescription: 'Max number of results to return',\n\t},\n\t{\n\t\tdisplayName: 'RAW Data',\n\t\tname: 'rawData',\n\t\ttype: 'boolean',\n\t\tdefault: false,\n\t\tdescription:\n\t\t\t'Whether the data should be returned RAW instead of parsed into keys according to their header',\n\t},\n\t{\n\t\tdisplayName: 'Data Property',\n\t\tname: 'dataProperty',\n\t\ttype: 'string',\n\t\tdefault: 'data',\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\trawData: [true],\n\t\t\t},\n\t\t},\n\t\tdescription: 'The name of the property into which to write the RAW data',\n\t},\n\t{\n\t\tdisplayName: 'Filters',\n\t\tname: 'filters',\n\t\ttype: 'collection',\n\t\tplaceholder: 'Add Filter',\n\t\tdefault: {},\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\trawData: [true],\n\t\t\t},\n\t\t},\n\t\toptions: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Fields',\n\t\t\t\tname: 'fields',\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: '',\n\t\t\t\tdescription: 'A comma-separated list of the fields to include in the response',\n\t\t\t},\n\t\t],\n\t},\n];\n\nconst displayOptions = {\n\tshow: {\n\t\tresource: ['table'],\n\t\toperation: ['getColumns'],\n\t},\n};\n\nexport const description = updateDisplayOptions(displayOptions, properties);\n\nexport async function execute(\n\tthis: IExecuteFunctions,\n\titems: INodeExecutionData[],\n): Promise<INodeExecutionData[]> {\n\t//https://docs.microsoft.com/en-us/graph/api/table-list-columns?view=graph-rest-1.0&tabs=http\n\tconst returnData: INodeExecutionData[] = [];\n\n\tfor (let i = 0; i < items.length; i++) {\n\t\ttry {\n\t\t\tconst qs: IDataObject = {};\n\t\t\tconst workbookId = this.getNodeParameter('workbook', i, undefined, {\n\t\t\t\textractValue: true,\n\t\t\t}) as string;\n\n\t\t\tconst worksheetId = this.getNodeParameter('worksheet', i, undefined, {\n\t\t\t\textractValue: true,\n\t\t\t}) as string;\n\n\t\t\tconst tableId = this.getNodeParameter('table', i, undefined, {\n\t\t\t\textractValue: true,\n\t\t\t}) as string;\n\n\t\t\tconst returnAll = this.getNodeParameter('returnAll', i);\n\t\t\tconst rawData = this.getNodeParameter('rawData', i);\n\t\t\tif (rawData) {\n\t\t\t\tconst filters = this.getNodeParameter('filters', i);\n\t\t\t\tif (filters.fields) {\n\t\t\t\t\tqs.$select = filters.fields;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet responseData;\n\t\t\tif (returnAll) {\n\t\t\t\tresponseData = await microsoftApiRequestAllItemsSkip.call(\n\t\t\t\t\tthis,\n\t\t\t\t\t'value',\n\t\t\t\t\t'GET',\n\t\t\t\t\t`/drive/items/${workbookId}/workbook/worksheets/${worksheetId}/tables/${tableId}/columns`,\n\t\t\t\t\t{},\n\t\t\t\t\tqs,\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tqs.$top = this.getNodeParameter('limit', i);\n\t\t\t\tresponseData = await microsoftApiRequest.call(\n\t\t\t\t\tthis,\n\t\t\t\t\t'GET',\n\t\t\t\t\t`/drive/items/${workbookId}/workbook/worksheets/${worksheetId}/tables/${tableId}/columns`,\n\t\t\t\t\t{},\n\t\t\t\t\tqs,\n\t\t\t\t);\n\t\t\t\tresponseData = responseData.value;\n\t\t\t}\n\t\t\tif (!rawData) {\n\t\t\t\tresponseData = responseData.map((column: IDataObject) => ({ name: column.name }));\n\t\t\t} else {\n\t\t\t\tconst dataProperty = this.getNodeParameter('dataProperty', i) as string;\n\t\t\t\tresponseData = { [dataProperty]: responseData };\n\t\t\t}\n\n\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t{ itemData: { item: i } },\n\t\t\t);\n\n\t\t\treturnData.push(...executionData);\n\t\t} catch (error) {\n\t\t\tif (this.continueOnFail()) {\n\t\t\t\tconst executionErrorData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\tthis.helpers.returnJsonArray({ error: error.message }),\n\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t);\n\t\t\t\treturnData.push(...executionErrorData);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\treturn returnData;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA,uBAAqC;AAErC,uBAAqE;AACrE,oBAAoD;AAEpD,MAAM,aAAgC;AAAA,EACrC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,IACC,aAAa;AAAA,IACb,MAAM;AAAA,IACN,MAAM;AAAA,IACN,SAAS;AAAA,IACT,aAAa;AAAA,EACd;AAAA,EACA;AAAA,IACC,aAAa;AAAA,IACb,MAAM;AAAA,IACN,MAAM;AAAA,IACN,gBAAgB;AAAA,MACf,MAAM;AAAA,QACL,WAAW,CAAC,KAAK;AAAA,MAClB;AAAA,IACD;AAAA,IACA,aAAa;AAAA,MACZ,UAAU;AAAA,MACV,UAAU;AAAA,IACX;AAAA,IACA,SAAS;AAAA,IACT,aAAa;AAAA,EACd;AAAA,EACA;AAAA,IACC,aAAa;AAAA,IACb,MAAM;AAAA,IACN,MAAM;AAAA,IACN,SAAS;AAAA,IACT,aACC;AAAA,EACF;AAAA,EACA;AAAA,IACC,aAAa;AAAA,IACb,MAAM;AAAA,IACN,MAAM;AAAA,IACN,SAAS;AAAA,IACT,gBAAgB;AAAA,MACf,MAAM;AAAA,QACL,SAAS,CAAC,IAAI;AAAA,MACf;AAAA,IACD;AAAA,IACA,aAAa;AAAA,EACd;AAAA,EACA;AAAA,IACC,aAAa;AAAA,IACb,MAAM;AAAA,IACN,MAAM;AAAA,IACN,aAAa;AAAA,IACb,SAAS,CAAC;AAAA,IACV,gBAAgB;AAAA,MACf,MAAM;AAAA,QACL,SAAS,CAAC,IAAI;AAAA,MACf;AAAA,IACD;AAAA,IACA,SAAS;AAAA,MACR;AAAA,QACC,aAAa;AAAA,QACb,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,QACT,aAAa;AAAA,MACd;AAAA,IACD;AAAA,EACD;AACD;AAEA,MAAM,iBAAiB;AAAA,EACtB,MAAM;AAAA,IACL,UAAU,CAAC,OAAO;AAAA,IAClB,WAAW,CAAC,YAAY;AAAA,EACzB;AACD;AAEO,MAAM,kBAAc,uCAAqB,gBAAgB,UAAU;AAE1E,eAAsB,QAErB,OACgC;AAEhC,QAAM,aAAmC,CAAC;AAE1C,WAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACtC,QAAI;AACH,YAAM,KAAkB,CAAC;AACzB,YAAM,aAAa,KAAK,iBAAiB,YAAY,GAAG,QAAW;AAAA,QAClE,cAAc;AAAA,MACf,CAAC;AAED,YAAM,cAAc,KAAK,iBAAiB,aAAa,GAAG,QAAW;AAAA,QACpE,cAAc;AAAA,MACf,CAAC;AAED,YAAM,UAAU,KAAK,iBAAiB,SAAS,GAAG,QAAW;AAAA,QAC5D,cAAc;AAAA,MACf,CAAC;AAED,YAAM,YAAY,KAAK,iBAAiB,aAAa,CAAC;AACtD,YAAM,UAAU,KAAK,iBAAiB,WAAW,CAAC;AAClD,UAAI,SAAS;AACZ,cAAM,UAAU,KAAK,iBAAiB,WAAW,CAAC;AAClD,YAAI,QAAQ,QAAQ;AACnB,aAAG,UAAU,QAAQ;AAAA,QACtB;AAAA,MACD;AAEA,UAAI;AACJ,UAAI,WAAW;AACd,uBAAe,MAAM,iDAAgC;AAAA,UACpD;AAAA,UACA;AAAA,UACA;AAAA,UACA,gBAAgB,UAAU,wBAAwB,WAAW,WAAW,OAAO;AAAA,UAC/E,CAAC;AAAA,UACD;AAAA,QACD;AAAA,MACD,OAAO;AACN,WAAG,OAAO,KAAK,iBAAiB,SAAS,CAAC;AAC1C,uBAAe,MAAM,qCAAoB;AAAA,UACxC;AAAA,UACA;AAAA,UACA,gBAAgB,UAAU,wBAAwB,WAAW,WAAW,OAAO;AAAA,UAC/E,CAAC;AAAA,UACD;AAAA,QACD;AACA,uBAAe,aAAa;AAAA,MAC7B;AACA,UAAI,CAAC,SAAS;AACb,uBAAe,aAAa,IAAI,CAAC,YAAyB,EAAE,MAAM,OAAO,KAAK,EAAE;AAAA,MACjF,OAAO;AACN,cAAM,eAAe,KAAK,iBAAiB,gBAAgB,CAAC;AAC5D,uBAAe,EAAE,CAAC,YAAY,GAAG,aAAa;AAAA,MAC/C;AAEA,YAAM,gBAAgB,KAAK,QAAQ;AAAA,QAClC,KAAK,QAAQ,gBAAgB,YAA6B;AAAA,QAC1D,EAAE,UAAU,EAAE,MAAM,EAAE,EAAE;AAAA,MACzB;AAEA,iBAAW,KAAK,GAAG,aAAa;AAAA,IACjC,SAAS,OAAO;AACf,UAAI,KAAK,eAAe,GAAG;AAC1B,cAAM,qBAAqB,KAAK,QAAQ;AAAA,UACvC,KAAK,QAAQ,gBAAgB,EAAE,OAAO,MAAM,QAAQ,CAAC;AAAA,UACrD,EAAE,UAAU,EAAE,MAAM,EAAE,EAAE;AAAA,QACzB;AACA,mBAAW,KAAK,GAAG,kBAAkB;AACrC;AAAA,MACD;AACA,YAAM;AAAA,IACP;AAAA,EACD;AAEA,SAAO;AACR;","names":[]}