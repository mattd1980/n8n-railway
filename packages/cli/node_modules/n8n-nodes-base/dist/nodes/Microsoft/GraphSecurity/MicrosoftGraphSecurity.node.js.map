{"version":3,"sources":["../../../../nodes/Microsoft/GraphSecurity/MicrosoftGraphSecurity.node.ts"],"sourcesContent":["import type {\n\tIExecuteFunctions,\n\tIDataObject,\n\tINodeExecutionData,\n\tINodeType,\n\tINodeTypeDescription,\n} from 'n8n-workflow';\nimport { NodeConnectionTypes } from 'n8n-workflow';\n\nimport {\n\tsecureScoreControlProfileFields,\n\tsecureScoreControlProfileOperations,\n\tsecureScoreFields,\n\tsecureScoreOperations,\n} from './descriptions';\nimport {\n\tmsGraphSecurityApiRequest,\n\tthrowOnEmptyUpdate,\n\ttolerateDoubleQuotes,\n} from './GenericFunctions';\n\nexport class MicrosoftGraphSecurity implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'Microsoft Graph Security',\n\t\tname: 'microsoftGraphSecurity',\n\t\ticon: 'file:microsoftGraph.svg',\n\t\tgroup: ['transform'],\n\t\tversion: 1,\n\t\tsubtitle: '={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}',\n\t\tdescription: 'Consume the Microsoft Graph Security API',\n\t\tdefaults: {\n\t\t\tname: 'Microsoft Graph Security',\n\t\t},\n\t\tusableAsTool: true,\n\t\tinputs: [NodeConnectionTypes.Main],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tcredentials: [\n\t\t\t{\n\t\t\t\tname: 'microsoftGraphSecurityOAuth2Api',\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Resource',\n\t\t\t\tname: 'resource',\n\t\t\t\ttype: 'options',\n\t\t\t\tnoDataExpression: true,\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Secure Score',\n\t\t\t\t\t\tvalue: 'secureScore',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Secure Score Control Profile',\n\t\t\t\t\t\tvalue: 'secureScoreControlProfile',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'secureScore',\n\t\t\t},\n\t\t\t...secureScoreOperations,\n\t\t\t...secureScoreFields,\n\t\t\t...secureScoreControlProfileOperations,\n\t\t\t...secureScoreControlProfileFields,\n\t\t],\n\t};\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t\tconst items = this.getInputData();\n\t\tconst returnData: IDataObject[] = [];\n\n\t\tconst resource = this.getNodeParameter('resource', 0) as\n\t\t\t| 'secureScore'\n\t\t\t| 'secureScoreControlProfile';\n\t\tconst operation = this.getNodeParameter('operation', 0) as 'get' | 'getAll' | 'update';\n\n\t\tlet responseData;\n\n\t\tfor (let i = 0; i < items.length; i++) {\n\t\t\ttry {\n\t\t\t\tif (resource === 'secureScore') {\n\t\t\t\t\t// **********************************************************************\n\t\t\t\t\t//                              secureScore\n\t\t\t\t\t// **********************************************************************\n\n\t\t\t\t\tif (operation === 'get') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//             secureScore: get\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\t// https://docs.microsoft.com/en-us/graph/api/securescore-get\n\n\t\t\t\t\t\tconst secureScoreId = this.getNodeParameter('secureScoreId', i);\n\n\t\t\t\t\t\tresponseData = await msGraphSecurityApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t`/secureScores/${secureScoreId}`,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tdelete responseData['@odata.context'];\n\t\t\t\t\t} else if (operation === 'getAll') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//           secureScore: getAll\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\t// https://docs.microsoft.com/en-us/graph/api/security-list-securescores\n\n\t\t\t\t\t\tconst qs: IDataObject = {};\n\n\t\t\t\t\t\tconst { filter, includeControlScores } = this.getNodeParameter('filters', i) as {\n\t\t\t\t\t\t\tfilter?: string;\n\t\t\t\t\t\t\tincludeControlScores?: boolean;\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tif (filter) {\n\t\t\t\t\t\t\tqs.$filter = tolerateDoubleQuotes(filter);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', 0);\n\n\t\t\t\t\t\tif (!returnAll) {\n\t\t\t\t\t\t\tqs.$count = true;\n\t\t\t\t\t\t\tqs.$top = this.getNodeParameter('limit', 0);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = (await msGraphSecurityApiRequest\n\t\t\t\t\t\t\t.call(this, 'GET', '/secureScores', {}, qs)\n\t\t\t\t\t\t\t.then((response) => response.value)) as Array<{ controlScores: object[] }>;\n\n\t\t\t\t\t\tif (!includeControlScores) {\n\t\t\t\t\t\t\tresponseData = responseData.map(({ controlScores: _controlScores, ...rest }) => rest);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (resource === 'secureScoreControlProfile') {\n\t\t\t\t\t// **********************************************************************\n\t\t\t\t\t//                       secureScoreControlProfile\n\t\t\t\t\t// **********************************************************************\n\n\t\t\t\t\tif (operation === 'get') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//      secureScoreControlProfile: get\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\t// https://docs.microsoft.com/en-us/graph/api/securescorecontrolprofile-get\n\n\t\t\t\t\t\tconst secureScoreControlProfileId = this.getNodeParameter(\n\t\t\t\t\t\t\t'secureScoreControlProfileId',\n\t\t\t\t\t\t\ti,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tconst endpoint = `/secureScoreControlProfiles/${secureScoreControlProfileId}`;\n\n\t\t\t\t\t\tresponseData = await msGraphSecurityApiRequest.call(this, 'GET', endpoint);\n\t\t\t\t\t\tdelete responseData['@odata.context'];\n\t\t\t\t\t} else if (operation === 'getAll') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//    secureScoreControlProfile: getAll\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\t// https://docs.microsoft.com/en-us/graph/api/security-list-securescorecontrolprofiles\n\n\t\t\t\t\t\tconst qs: IDataObject = {};\n\n\t\t\t\t\t\tconst { filter } = this.getNodeParameter('filters', i) as { filter?: string };\n\n\t\t\t\t\t\tif (filter) {\n\t\t\t\t\t\t\tqs.$filter = tolerateDoubleQuotes(filter);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', 0);\n\n\t\t\t\t\t\tif (!returnAll) {\n\t\t\t\t\t\t\tqs.$count = true;\n\t\t\t\t\t\t\tqs.$top = this.getNodeParameter('limit', 0);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await msGraphSecurityApiRequest\n\t\t\t\t\t\t\t.call(this, 'GET', '/secureScoreControlProfiles', {}, qs)\n\t\t\t\t\t\t\t.then((response) => response.value);\n\t\t\t\t\t} else if (operation === 'update') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//    secureScoreControlProfile: update\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\t// https://docs.microsoft.com/en-us/graph/api/securescorecontrolprofile-update\n\n\t\t\t\t\t\tconst body: IDataObject = {\n\t\t\t\t\t\t\tvendorInformation: {\n\t\t\t\t\t\t\t\tprovider: this.getNodeParameter('provider', i),\n\t\t\t\t\t\t\t\tvendor: this.getNodeParameter('vendor', i),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tconst updateFields = this.getNodeParameter('updateFields', i);\n\n\t\t\t\t\t\tif (!Object.keys(updateFields).length) {\n\t\t\t\t\t\t\tthrowOnEmptyUpdate.call(this);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (Object.keys(updateFields).length) {\n\t\t\t\t\t\t\tObject.assign(body, updateFields);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst id = this.getNodeParameter('secureScoreControlProfileId', i);\n\t\t\t\t\t\tconst endpoint = `/secureScoreControlProfiles/${id}`;\n\t\t\t\t\t\tconst headers = { Prefer: 'return=representation' };\n\n\t\t\t\t\t\tresponseData = await msGraphSecurityApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'PATCH',\n\t\t\t\t\t\t\tendpoint,\n\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\theaders,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tdelete responseData['@odata.context'];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\treturnData.push({ error: error.message });\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tthrow error;\n\t\t\t}\n\n\t\t\tArray.isArray(responseData)\n\t\t\t\t? returnData.push(...(responseData as IDataObject[]))\n\t\t\t\t: returnData.push(responseData as IDataObject);\n\t\t}\n\n\t\treturn [this.helpers.returnJsonArray(returnData)];\n\t}\n}\n"],"mappings":"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","names":[]}