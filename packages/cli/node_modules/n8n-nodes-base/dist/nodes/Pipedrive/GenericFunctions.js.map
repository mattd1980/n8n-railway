{"version":3,"sources":["../../../nodes/Pipedrive/GenericFunctions.ts"],"sourcesContent":["import type {\n\tJsonObject,\n\tIDataObject,\n\tIExecuteFunctions,\n\tIHookFunctions,\n\tILoadOptionsFunctions,\n\tINodePropertyOptions,\n\tIHttpRequestMethods,\n\tIRequestOptions,\n} from 'n8n-workflow';\nimport { NodeApiError, NodeOperationError } from 'n8n-workflow';\n\nexport interface ICustomInterface {\n\tname: string;\n\tkey: string;\n\tfield_type: string;\n\toptions?: Array<{\n\t\tid: number;\n\t\tlabel: string;\n\t}>;\n}\n\nexport interface ICustomProperties {\n\t[key: string]: ICustomInterface;\n}\n\n/**\n * Make an API request to Pipedrive\n *\n */\nexport async function pipedriveApiRequest(\n\tthis: IHookFunctions | IExecuteFunctions | ILoadOptionsFunctions,\n\tmethod: IHttpRequestMethods,\n\tendpoint: string,\n\tbody: IDataObject,\n\tquery: IDataObject = {},\n\tformData?: IDataObject,\n\tdownloadFile?: boolean,\n): Promise<any> {\n\tconst authenticationMethod = this.getNodeParameter('authentication', 0);\n\n\tconst options: IRequestOptions = {\n\t\theaders: {\n\t\t\tAccept: 'application/json',\n\t\t},\n\t\tmethod,\n\t\tqs: query,\n\t\turi: `https://api.pipedrive.com/v1${endpoint}`,\n\t};\n\n\tif (downloadFile === true) {\n\t\toptions.encoding = null;\n\t} else {\n\t\toptions.json = true;\n\t}\n\n\tif (Object.keys(body).length !== 0) {\n\t\toptions.body = body;\n\t}\n\n\tif (formData !== undefined && Object.keys(formData).length !== 0) {\n\t\toptions.formData = formData;\n\t}\n\n\tif (query === undefined) {\n\t\tquery = {};\n\t}\n\n\ttry {\n\t\tconst credentialType =\n\t\t\tauthenticationMethod === 'apiToken' ? 'pipedriveApi' : 'pipedriveOAuth2Api';\n\t\tconst responseData = await this.helpers.requestWithAuthentication.call(\n\t\t\tthis,\n\t\t\tcredentialType,\n\t\t\toptions,\n\t\t);\n\n\t\tif (downloadFile === true) {\n\t\t\treturn {\n\t\t\t\tdata: responseData,\n\t\t\t};\n\t\t}\n\n\t\tif (responseData.success === false) {\n\t\t\tthrow new NodeApiError(this.getNode(), responseData as JsonObject);\n\t\t}\n\n\t\treturn {\n\t\t\tadditionalData: responseData.additional_data,\n\t\t\tdata: responseData.data === null ? [] : responseData.data,\n\t\t};\n\t} catch (error) {\n\t\tthrow new NodeApiError(this.getNode(), error as JsonObject);\n\t}\n}\n\n/**\n * Make an API request to paginated Pipedrive endpoint\n * and return all results\n *\n * @param {(IHookFunctions | IExecuteFunctions)} this\n */\nexport async function pipedriveApiRequestAllItems(\n\tthis: IHookFunctions | IExecuteFunctions,\n\tmethod: IHttpRequestMethods,\n\tendpoint: string,\n\tbody: IDataObject,\n\tquery?: IDataObject,\n): Promise<any> {\n\tif (query === undefined) {\n\t\tquery = {};\n\t}\n\tquery.limit = 100;\n\tquery.start = 0;\n\n\tconst returnData: IDataObject[] = [];\n\n\tlet responseData;\n\n\tdo {\n\t\tresponseData = await pipedriveApiRequest.call(this, method, endpoint, body, query);\n\t\t// the search path returns data diferently\n\t\tif (responseData.data.items) {\n\t\t\treturnData.push.apply(returnData, responseData.data.items as IDataObject[]);\n\t\t} else {\n\t\t\treturnData.push.apply(returnData, responseData.data as IDataObject[]);\n\t\t}\n\n\t\tquery.start = responseData.additionalData.pagination.next_start;\n\t} while (responseData.additionalData?.pagination?.more_items_in_collection === true);\n\n\treturn {\n\t\tdata: returnData,\n\t};\n}\n\n/**\n * Gets the custom properties from Pipedrive\n *\n * @param {(IHookFunctions | IExecuteFunctions)} this\n */\nexport async function pipedriveGetCustomProperties(\n\tthis: IHookFunctions | IExecuteFunctions,\n\tresource: string,\n): Promise<ICustomProperties> {\n\tconst endpoints: { [key: string]: string } = {\n\t\tactivity: '/activityFields',\n\t\tdeal: '/dealFields',\n\t\torganization: '/organizationFields',\n\t\tperson: '/personFields',\n\t\tproduct: '/productFields',\n\t};\n\n\tif (endpoints[resource] === undefined) {\n\t\tthrow new NodeOperationError(\n\t\t\tthis.getNode(),\n\t\t\t`The resource \"${resource}\" is not supported for resolving custom values!`,\n\t\t);\n\t}\n\n\tconst requestMethod = 'GET';\n\n\tconst body = {};\n\tconst qs = {};\n\t// Get the custom properties and their values\n\tconst responseData = await pipedriveApiRequest.call(\n\t\tthis,\n\t\trequestMethod,\n\t\tendpoints[resource],\n\t\tbody,\n\t\tqs,\n\t);\n\n\tconst customProperties: ICustomProperties = {};\n\n\tfor (const customPropertyData of responseData.data) {\n\t\tcustomProperties[customPropertyData.key] = customPropertyData;\n\t}\n\treturn customProperties;\n}\n\n/**\n * Converts names and values of custom properties from their actual values to the\n * Pipedrive internal ones\n *\n */\nexport function pipedriveEncodeCustomProperties(\n\tcustomProperties: ICustomProperties,\n\titem: IDataObject,\n): void {\n\tlet customPropertyData;\n\n\tfor (const key of Object.keys(item)) {\n\t\tcustomPropertyData = Object.values(customProperties).find(\n\t\t\t(propertyData) => propertyData.name === key,\n\t\t);\n\n\t\tif (customPropertyData !== undefined) {\n\t\t\t// Is a custom property\n\n\t\t\t// Check if also the value has to be resolved or just the key\n\t\t\tif (\n\t\t\t\titem[key] !== null &&\n\t\t\t\titem[key] !== undefined &&\n\t\t\t\tcustomPropertyData.options !== undefined &&\n\t\t\t\tArray.isArray(customPropertyData.options)\n\t\t\t) {\n\t\t\t\t// Has an option key so get the actual option-value\n\t\t\t\tconst propertyOption = customPropertyData.options.find(\n\t\t\t\t\t(option) => option.label.toString() === item[key]!.toString(),\n\t\t\t\t);\n\n\t\t\t\tif (propertyOption !== undefined) {\n\t\t\t\t\titem[customPropertyData.key] = propertyOption.id;\n\t\t\t\t\tdelete item[key];\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Does already represent the actual value or is null\n\t\t\t\titem[customPropertyData.key] = item[key];\n\t\t\t\tdelete item[key];\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * Converts names and values of custom properties to their actual values\n *\n */\nexport function pipedriveResolveCustomProperties(\n\tcustomProperties: ICustomProperties,\n\titem: IDataObject,\n): void {\n\tlet customPropertyData;\n\n\tconst json = item.json as IDataObject;\n\n\t// Iterate over all keys and replace the custom ones\n\tfor (const [key, value] of Object.entries(json)) {\n\t\tif (customProperties[key] !== undefined) {\n\t\t\t// Is a custom property\n\t\t\tcustomPropertyData = customProperties[key];\n\n\t\t\t// value is not set, so nothing to resolve\n\t\t\tif (value === null) {\n\t\t\t\tjson[customPropertyData.name] = value;\n\t\t\t\tdelete json[key];\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\t[\n\t\t\t\t\t'date',\n\t\t\t\t\t'address',\n\t\t\t\t\t'double',\n\t\t\t\t\t'monetary',\n\t\t\t\t\t'org',\n\t\t\t\t\t'people',\n\t\t\t\t\t'phone',\n\t\t\t\t\t'text',\n\t\t\t\t\t'time',\n\t\t\t\t\t'user',\n\t\t\t\t\t'varchar',\n\t\t\t\t\t'varchar_auto',\n\t\t\t\t\t'int',\n\t\t\t\t\t'time',\n\t\t\t\t\t'timerange',\n\t\t\t\t].includes(customPropertyData.field_type)\n\t\t\t) {\n\t\t\t\tjson[customPropertyData.name] = value;\n\t\t\t\tdelete json[key];\n\t\t\t\t// type options\n\t\t\t} else if (\n\t\t\t\t['enum', 'visible_to'].includes(customPropertyData.field_type) &&\n\t\t\t\tcustomPropertyData.options\n\t\t\t) {\n\t\t\t\tconst propertyOption = customPropertyData.options.find(\n\t\t\t\t\t(option) => option.id.toString() === value?.toString(),\n\t\t\t\t);\n\t\t\t\tif (propertyOption !== undefined) {\n\t\t\t\t\tjson[customPropertyData.name] = propertyOption.label;\n\t\t\t\t\tdelete json[key];\n\t\t\t\t}\n\t\t\t\t// type multioptions\n\t\t\t} else if (\n\t\t\t\t['set'].includes(customPropertyData.field_type) &&\n\t\t\t\tcustomPropertyData.options &&\n\t\t\t\ttypeof value === 'string'\n\t\t\t) {\n\t\t\t\tconst selectedIds = value.split(',');\n\t\t\t\tconst selectedLabels = customPropertyData.options\n\t\t\t\t\t.filter((option) => selectedIds.includes(option.id.toString()))\n\t\t\t\t\t.map((option) => option.label);\n\t\t\t\tjson[customPropertyData.name] = selectedLabels;\n\t\t\t\tdelete json[key];\n\t\t\t}\n\t\t}\n\t}\n\titem.json = json;\n}\n\nexport function sortOptionParameters(\n\toptionParameters: INodePropertyOptions[],\n): INodePropertyOptions[] {\n\toptionParameters.sort((a, b) => {\n\t\tconst aName = a.name.toLowerCase();\n\t\tconst bName = b.name.toLowerCase();\n\t\tif (aName < bName) {\n\t\t\treturn -1;\n\t\t}\n\t\tif (aName > bName) {\n\t\t\treturn 1;\n\t\t}\n\t\treturn 0;\n\t});\n\n\treturn optionParameters;\n}\n"],"mappings":"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","names":[]}