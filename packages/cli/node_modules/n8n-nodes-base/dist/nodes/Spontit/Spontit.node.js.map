{"version":3,"sources":["../../../nodes/Spontit/Spontit.node.ts"],"sourcesContent":["import moment from 'moment-timezone';\nimport type {\n\tIExecuteFunctions,\n\tIDataObject,\n\tINodeExecutionData,\n\tINodeType,\n\tINodeTypeDescription,\n} from 'n8n-workflow';\nimport { NodeConnectionTypes } from 'n8n-workflow';\n\nimport { spontitApiRequest } from './GenericFunctions';\nimport { pushFields, pushOperations } from './PushDescription';\n\nexport class Spontit implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'Spontit',\n\t\tname: 'spontit',\n\t\t// eslint-disable-next-line n8n-nodes-base/node-class-description-icon-not-svg\n\t\ticon: 'file:spontit.png',\n\t\tgroup: ['output'],\n\t\tversion: 1,\n\t\tsubtitle: '={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}',\n\t\tdescription: 'Consume Spontit API',\n\t\tdefaults: {\n\t\t\tname: 'Spontit',\n\t\t},\n\t\tusableAsTool: true,\n\t\tinputs: [NodeConnectionTypes.Main],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tcredentials: [\n\t\t\t{\n\t\t\t\tname: 'spontitApi',\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Resource',\n\t\t\t\tname: 'resource',\n\t\t\t\ttype: 'options',\n\t\t\t\tnoDataExpression: true,\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Push',\n\t\t\t\t\t\tvalue: 'push',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'push',\n\t\t\t},\n\t\t\t...pushOperations,\n\t\t\t...pushFields,\n\t\t],\n\t};\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t\tconst items = this.getInputData();\n\t\tconst returnData: IDataObject[] = [];\n\t\tconst timezone = this.getTimezone();\n\t\tlet responseData;\n\t\tconst resource = this.getNodeParameter('resource', 0);\n\t\tconst operation = this.getNodeParameter('operation', 0);\n\t\tfor (let i = 0; i < items.length; i++) {\n\t\t\ttry {\n\t\t\t\tif (resource === 'push') {\n\t\t\t\t\tif (operation === 'create') {\n\t\t\t\t\t\tconst content = this.getNodeParameter('content', i) as string;\n\t\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i);\n\n\t\t\t\t\t\tconst body: IDataObject = {\n\t\t\t\t\t\t\tcontent,\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tObject.assign(body, additionalFields);\n\n\t\t\t\t\t\tif (body.pushToFollowers) {\n\t\t\t\t\t\t\tbody.pushToFollowers = (body.pushToFollowers as string).split(',');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (body.pushToPhoneNumbers) {\n\t\t\t\t\t\t\tbody.pushToPhoneNumbers = (body.pushToPhoneNumbers as string).split(',');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (body.pushToEmails) {\n\t\t\t\t\t\t\tbody.pushToEmails = (body.pushToEmails as string).split(',');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (body.schedule) {\n\t\t\t\t\t\t\tbody.scheduled = moment.tz(body.schedule, timezone).unix();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (body.expirationStamp) {\n\t\t\t\t\t\t\tbody.expirationStamp = moment.tz(body.expirationStamp, timezone).unix();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await spontitApiRequest.call(this, 'POST', '/push', body);\n\n\t\t\t\t\t\tresponseData = responseData.data;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (Array.isArray(responseData)) {\n\t\t\t\t\treturnData.push.apply(returnData, responseData as IDataObject[]);\n\t\t\t\t} else if (responseData !== undefined) {\n\t\t\t\t\treturnData.push(responseData as IDataObject);\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\treturnData.push({ error: error.message });\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\n\t\treturn [this.helpers.returnJsonArray(returnData)];\n\t}\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAAmB;AAQnB,0BAAoC;AAEpC,8BAAkC;AAClC,6BAA2C;AAEpC,MAAM,QAA6B;AAAA,EAAnC;AACN,uBAAoC;AAAA,MACnC,aAAa;AAAA,MACb,MAAM;AAAA;AAAA,MAEN,MAAM;AAAA,MACN,OAAO,CAAC,QAAQ;AAAA,MAChB,SAAS;AAAA,MACT,UAAU;AAAA,MACV,aAAa;AAAA,MACb,UAAU;AAAA,QACT,MAAM;AAAA,MACP;AAAA,MACA,cAAc;AAAA,MACd,QAAQ,CAAC,wCAAoB,IAAI;AAAA,MACjC,SAAS,CAAC,wCAAoB,IAAI;AAAA,MAClC,aAAa;AAAA,QACZ;AAAA,UACC,MAAM;AAAA,UACN,UAAU;AAAA,QACX;AAAA,MACD;AAAA,MACA,YAAY;AAAA,QACX;AAAA,UACC,aAAa;AAAA,UACb,MAAM;AAAA,UACN,MAAM;AAAA,UACN,kBAAkB;AAAA,UAClB,SAAS;AAAA,YACR;AAAA,cACC,MAAM;AAAA,cACN,OAAO;AAAA,YACR;AAAA,UACD;AAAA,UACA,SAAS;AAAA,QACV;AAAA,QACA,GAAG;AAAA,QACH,GAAG;AAAA,MACJ;AAAA,IACD;AAAA;AAAA,EAEA,MAAM,UAAkE;AACvE,UAAM,QAAQ,KAAK,aAAa;AAChC,UAAM,aAA4B,CAAC;AACnC,UAAM,WAAW,KAAK,YAAY;AAClC,QAAI;AACJ,UAAM,WAAW,KAAK,iBAAiB,YAAY,CAAC;AACpD,UAAM,YAAY,KAAK,iBAAiB,aAAa,CAAC;AACtD,aAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACtC,UAAI;AACH,YAAI,aAAa,QAAQ;AACxB,cAAI,cAAc,UAAU;AAC3B,kBAAM,UAAU,KAAK,iBAAiB,WAAW,CAAC;AAClD,kBAAM,mBAAmB,KAAK,iBAAiB,oBAAoB,CAAC;AAEpE,kBAAM,OAAoB;AAAA,cACzB;AAAA,YACD;AAEA,mBAAO,OAAO,MAAM,gBAAgB;AAEpC,gBAAI,KAAK,iBAAiB;AACzB,mBAAK,kBAAmB,KAAK,gBAA2B,MAAM,GAAG;AAAA,YAClE;AAEA,gBAAI,KAAK,oBAAoB;AAC5B,mBAAK,qBAAsB,KAAK,mBAA8B,MAAM,GAAG;AAAA,YACxE;AAEA,gBAAI,KAAK,cAAc;AACtB,mBAAK,eAAgB,KAAK,aAAwB,MAAM,GAAG;AAAA,YAC5D;AAEA,gBAAI,KAAK,UAAU;AAClB,mBAAK,YAAY,uBAAAA,QAAO,GAAG,KAAK,UAAU,QAAQ,EAAE,KAAK;AAAA,YAC1D;AAEA,gBAAI,KAAK,iBAAiB;AACzB,mBAAK,kBAAkB,uBAAAA,QAAO,GAAG,KAAK,iBAAiB,QAAQ,EAAE,KAAK;AAAA,YACvE;AAEA,2BAAe,MAAM,0CAAkB,KAAK,MAAM,QAAQ,SAAS,IAAI;AAEvE,2BAAe,aAAa;AAAA,UAC7B;AAAA,QACD;AACA,YAAI,MAAM,QAAQ,YAAY,GAAG;AAChC,qBAAW,KAAK,MAAM,YAAY,YAA6B;AAAA,QAChE,WAAW,iBAAiB,QAAW;AACtC,qBAAW,KAAK,YAA2B;AAAA,QAC5C;AAAA,MACD,SAAS,OAAO;AACf,YAAI,KAAK,eAAe,GAAG;AAC1B,qBAAW,KAAK,EAAE,OAAO,MAAM,QAAQ,CAAC;AACxC;AAAA,QACD;AACA,cAAM;AAAA,MACP;AAAA,IACD;AAEA,WAAO,CAAC,KAAK,QAAQ,gBAAgB,UAAU,CAAC;AAAA,EACjD;AACD;","names":["moment"]}