{"version":3,"sources":["../../../nodes/Snowflake/Snowflake.node.ts"],"sourcesContent":["import type {\n\tIExecuteFunctions,\n\tIDataObject,\n\tINodeExecutionData,\n\tINodeType,\n\tINodeTypeDescription,\n} from 'n8n-workflow';\nimport { NodeConnectionTypes } from 'n8n-workflow';\nimport snowflake from 'snowflake-sdk';\n\nimport { getResolvables } from '@utils/utilities';\n\nimport {\n\tconnect,\n\tdestroy,\n\texecute,\n\tgetConnectionOptions,\n\ttype SnowflakeCredential,\n} from './GenericFunctions';\n\nexport class Snowflake implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'Snowflake',\n\t\tname: 'snowflake',\n\t\ticon: 'file:snowflake.svg',\n\t\tgroup: ['input'],\n\t\tversion: 1,\n\t\tdescription: 'Get, add and update data in Snowflake',\n\t\tdefaults: {\n\t\t\tname: 'Snowflake',\n\t\t},\n\t\tusableAsTool: true,\n\t\tinputs: [NodeConnectionTypes.Main],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tparameterPane: 'wide',\n\t\tcredentials: [\n\t\t\t{\n\t\t\t\tname: 'snowflake',\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Operation',\n\t\t\t\tname: 'operation',\n\t\t\t\ttype: 'options',\n\t\t\t\tnoDataExpression: true,\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Execute Query',\n\t\t\t\t\t\tvalue: 'executeQuery',\n\t\t\t\t\t\tdescription: 'Execute an SQL query',\n\t\t\t\t\t\taction: 'Execute a SQL query',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Insert',\n\t\t\t\t\t\tvalue: 'insert',\n\t\t\t\t\t\tdescription: 'Insert rows in database',\n\t\t\t\t\t\taction: 'Insert rows in database',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Update',\n\t\t\t\t\t\tvalue: 'update',\n\t\t\t\t\t\tdescription: 'Update rows in database',\n\t\t\t\t\t\taction: 'Update rows in database',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'insert',\n\t\t\t},\n\n\t\t\t// ----------------------------------\n\t\t\t//         executeQuery\n\t\t\t// ----------------------------------\n\t\t\t{\n\t\t\t\tdisplayName: 'Query',\n\t\t\t\tname: 'query',\n\t\t\t\ttype: 'string',\n\t\t\t\tnoDataExpression: true,\n\t\t\t\ttypeOptions: {\n\t\t\t\t\teditor: 'sqlEditor',\n\t\t\t\t},\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['executeQuery'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdefault: '',\n\t\t\t\tplaceholder: 'SELECT id, name FROM product WHERE id < 40',\n\t\t\t\trequired: true,\n\t\t\t\tdescription: 'The SQL query to execute',\n\t\t\t},\n\n\t\t\t// ----------------------------------\n\t\t\t//         insert\n\t\t\t// ----------------------------------\n\t\t\t{\n\t\t\t\tdisplayName: 'Table',\n\t\t\t\tname: 'table',\n\t\t\t\ttype: 'string',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['insert'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdefault: '',\n\t\t\t\trequired: true,\n\t\t\t\tdescription: 'Name of the table in which to insert data to',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Columns',\n\t\t\t\tname: 'columns',\n\t\t\t\ttype: 'string',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['insert'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdefault: '',\n\t\t\t\tplaceholder: 'id,name,description',\n\t\t\t\tdescription:\n\t\t\t\t\t'Comma-separated list of the properties which should used as columns for the new rows',\n\t\t\t},\n\n\t\t\t// ----------------------------------\n\t\t\t//         update\n\t\t\t// ----------------------------------\n\t\t\t{\n\t\t\t\tdisplayName: 'Table',\n\t\t\t\tname: 'table',\n\t\t\t\ttype: 'string',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['update'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdefault: '',\n\t\t\t\trequired: true,\n\t\t\t\tdescription: 'Name of the table in which to update data in',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Update Key',\n\t\t\t\tname: 'updateKey',\n\t\t\t\ttype: 'string',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['update'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdefault: 'id',\n\t\t\t\trequired: true,\n\t\t\t\t// eslint-disable-next-line n8n-nodes-base/node-param-description-miscased-id\n\t\t\t\tdescription:\n\t\t\t\t\t'Name of the property which decides which rows in the database should be updated. Normally that would be \"id\".',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Columns',\n\t\t\t\tname: 'columns',\n\t\t\t\ttype: 'string',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['update'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdefault: '',\n\t\t\t\tplaceholder: 'name,description',\n\t\t\t\tdescription:\n\t\t\t\t\t'Comma-separated list of the properties which should used as columns for rows to update',\n\t\t\t},\n\t\t],\n\t};\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t\tconst credentials = await this.getCredentials<SnowflakeCredential>('snowflake');\n\n\t\tconst connectionOptions = getConnectionOptions(credentials);\n\t\tconst connection = snowflake.createConnection(connectionOptions);\n\n\t\tawait connect(connection);\n\n\t\tconst returnData: INodeExecutionData[] = [];\n\t\tconst items = this.getInputData();\n\t\tconst operation = this.getNodeParameter('operation', 0);\n\n\t\tif (operation === 'executeQuery') {\n\t\t\t// ----------------------------------\n\t\t\t//         executeQuery\n\t\t\t// ----------------------------------\n\n\t\t\tfor (let i = 0; i < items.length; i++) {\n\t\t\t\tlet query = this.getNodeParameter('query', i) as string;\n\n\t\t\t\tfor (const resolvable of getResolvables(query)) {\n\t\t\t\t\tquery = query.replace(resolvable, this.evaluateExpression(resolvable, i) as string);\n\t\t\t\t}\n\n\t\t\t\tconst responseData = await execute(connection, query, []);\n\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t);\n\t\t\t\treturnData.push(...executionData);\n\t\t\t}\n\t\t}\n\n\t\tif (operation === 'insert') {\n\t\t\t// ----------------------------------\n\t\t\t//         insert\n\t\t\t// ----------------------------------\n\n\t\t\tconst table = this.getNodeParameter('table', 0) as string;\n\t\t\tconst columnString = this.getNodeParameter('columns', 0) as string;\n\t\t\tconst columns = columnString.split(',').map((column) => column.trim());\n\t\t\tconst query = `INSERT INTO ${table}(${columns.join(',')}) VALUES (${columns\n\t\t\t\t.map((_column) => '?')\n\t\t\t\t.join(',')})`;\n\t\t\tconst data = this.helpers.copyInputItems(items, columns);\n\t\t\tconst binds = data.map((element) => Object.values(element));\n\t\t\tawait execute(connection, query, binds as unknown as snowflake.InsertBinds);\n\t\t\tdata.forEach((d, i) => {\n\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\tthis.helpers.returnJsonArray(d),\n\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t);\n\t\t\t\treturnData.push(...executionData);\n\t\t\t});\n\t\t}\n\n\t\tif (operation === 'update') {\n\t\t\t// ----------------------------------\n\t\t\t//         update\n\t\t\t// ----------------------------------\n\n\t\t\tconst table = this.getNodeParameter('table', 0) as string;\n\t\t\tconst updateKey = this.getNodeParameter('updateKey', 0) as string;\n\t\t\tconst columnString = this.getNodeParameter('columns', 0) as string;\n\t\t\tconst columns = columnString.split(',').map((column) => column.trim());\n\n\t\t\tif (!columns.includes(updateKey)) {\n\t\t\t\tcolumns.unshift(updateKey);\n\t\t\t}\n\n\t\t\tconst query = `UPDATE ${table} SET ${columns\n\t\t\t\t.map((column) => `${column} = ?`)\n\t\t\t\t.join(',')} WHERE ${updateKey} = ?;`;\n\t\t\tconst data = this.helpers.copyInputItems(items, columns);\n\t\t\tconst binds = data.map((element) => Object.values(element).concat(element[updateKey]));\n\t\t\tfor (let i = 0; i < binds.length; i++) {\n\t\t\t\tawait execute(connection, query, binds[i] as unknown as snowflake.InsertBinds);\n\t\t\t}\n\t\t\tdata.forEach((d, i) => {\n\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\tthis.helpers.returnJsonArray(d),\n\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t);\n\t\t\t\treturnData.push(...executionData);\n\t\t\t});\n\t\t}\n\n\t\tawait destroy(connection);\n\t\treturn [returnData];\n\t}\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA,0BAAoC;AACpC,2BAAsB;AAEtB,uBAA+B;AAE/B,8BAMO;AAEA,MAAM,UAA+B;AAAA,EAArC;AACN,uBAAoC;AAAA,MACnC,aAAa;AAAA,MACb,MAAM;AAAA,MACN,MAAM;AAAA,MACN,OAAO,CAAC,OAAO;AAAA,MACf,SAAS;AAAA,MACT,aAAa;AAAA,MACb,UAAU;AAAA,QACT,MAAM;AAAA,MACP;AAAA,MACA,cAAc;AAAA,MACd,QAAQ,CAAC,wCAAoB,IAAI;AAAA,MACjC,SAAS,CAAC,wCAAoB,IAAI;AAAA,MAClC,eAAe;AAAA,MACf,aAAa;AAAA,QACZ;AAAA,UACC,MAAM;AAAA,UACN,UAAU;AAAA,QACX;AAAA,MACD;AAAA,MACA,YAAY;AAAA,QACX;AAAA,UACC,aAAa;AAAA,UACb,MAAM;AAAA,UACN,MAAM;AAAA,UACN,kBAAkB;AAAA,UAClB,SAAS;AAAA,YACR;AAAA,cACC,MAAM;AAAA,cACN,OAAO;AAAA,cACP,aAAa;AAAA,cACb,QAAQ;AAAA,YACT;AAAA,YACA;AAAA,cACC,MAAM;AAAA,cACN,OAAO;AAAA,cACP,aAAa;AAAA,cACb,QAAQ;AAAA,YACT;AAAA,YACA;AAAA,cACC,MAAM;AAAA,cACN,OAAO;AAAA,cACP,aAAa;AAAA,cACb,QAAQ;AAAA,YACT;AAAA,UACD;AAAA,UACA,SAAS;AAAA,QACV;AAAA;AAAA;AAAA;AAAA,QAKA;AAAA,UACC,aAAa;AAAA,UACb,MAAM;AAAA,UACN,MAAM;AAAA,UACN,kBAAkB;AAAA,UAClB,aAAa;AAAA,YACZ,QAAQ;AAAA,UACT;AAAA,UACA,gBAAgB;AAAA,YACf,MAAM;AAAA,cACL,WAAW,CAAC,cAAc;AAAA,YAC3B;AAAA,UACD;AAAA,UACA,SAAS;AAAA,UACT,aAAa;AAAA,UACb,UAAU;AAAA,UACV,aAAa;AAAA,QACd;AAAA;AAAA;AAAA;AAAA,QAKA;AAAA,UACC,aAAa;AAAA,UACb,MAAM;AAAA,UACN,MAAM;AAAA,UACN,gBAAgB;AAAA,YACf,MAAM;AAAA,cACL,WAAW,CAAC,QAAQ;AAAA,YACrB;AAAA,UACD;AAAA,UACA,SAAS;AAAA,UACT,UAAU;AAAA,UACV,aAAa;AAAA,QACd;AAAA,QACA;AAAA,UACC,aAAa;AAAA,UACb,MAAM;AAAA,UACN,MAAM;AAAA,UACN,gBAAgB;AAAA,YACf,MAAM;AAAA,cACL,WAAW,CAAC,QAAQ;AAAA,YACrB;AAAA,UACD;AAAA,UACA,SAAS;AAAA,UACT,aAAa;AAAA,UACb,aACC;AAAA,QACF;AAAA;AAAA;AAAA;AAAA,QAKA;AAAA,UACC,aAAa;AAAA,UACb,MAAM;AAAA,UACN,MAAM;AAAA,UACN,gBAAgB;AAAA,YACf,MAAM;AAAA,cACL,WAAW,CAAC,QAAQ;AAAA,YACrB;AAAA,UACD;AAAA,UACA,SAAS;AAAA,UACT,UAAU;AAAA,UACV,aAAa;AAAA,QACd;AAAA,QACA;AAAA,UACC,aAAa;AAAA,UACb,MAAM;AAAA,UACN,MAAM;AAAA,UACN,gBAAgB;AAAA,YACf,MAAM;AAAA,cACL,WAAW,CAAC,QAAQ;AAAA,YACrB;AAAA,UACD;AAAA,UACA,SAAS;AAAA,UACT,UAAU;AAAA;AAAA,UAEV,aACC;AAAA,QACF;AAAA,QACA;AAAA,UACC,aAAa;AAAA,UACb,MAAM;AAAA,UACN,MAAM;AAAA,UACN,gBAAgB;AAAA,YACf,MAAM;AAAA,cACL,WAAW,CAAC,QAAQ;AAAA,YACrB;AAAA,UACD;AAAA,UACA,SAAS;AAAA,UACT,aAAa;AAAA,UACb,aACC;AAAA,QACF;AAAA,MACD;AAAA,IACD;AAAA;AAAA,EAEA,MAAM,UAAkE;AACvE,UAAM,cAAc,MAAM,KAAK,eAAoC,WAAW;AAE9E,UAAM,wBAAoB,8CAAqB,WAAW;AAC1D,UAAM,aAAa,qBAAAA,QAAU,iBAAiB,iBAAiB;AAE/D,cAAM,iCAAQ,UAAU;AAExB,UAAM,aAAmC,CAAC;AAC1C,UAAM,QAAQ,KAAK,aAAa;AAChC,UAAM,YAAY,KAAK,iBAAiB,aAAa,CAAC;AAEtD,QAAI,cAAc,gBAAgB;AAKjC,eAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACtC,YAAI,QAAQ,KAAK,iBAAiB,SAAS,CAAC;AAE5C,mBAAW,kBAAc,iCAAe,KAAK,GAAG;AAC/C,kBAAQ,MAAM,QAAQ,YAAY,KAAK,mBAAmB,YAAY,CAAC,CAAW;AAAA,QACnF;AAEA,cAAM,eAAe,UAAM,iCAAQ,YAAY,OAAO,CAAC,CAAC;AACxD,cAAM,gBAAgB,KAAK,QAAQ;AAAA,UAClC,KAAK,QAAQ,gBAAgB,YAA6B;AAAA,UAC1D,EAAE,UAAU,EAAE,MAAM,EAAE,EAAE;AAAA,QACzB;AACA,mBAAW,KAAK,GAAG,aAAa;AAAA,MACjC;AAAA,IACD;AAEA,QAAI,cAAc,UAAU;AAK3B,YAAM,QAAQ,KAAK,iBAAiB,SAAS,CAAC;AAC9C,YAAM,eAAe,KAAK,iBAAiB,WAAW,CAAC;AACvD,YAAM,UAAU,aAAa,MAAM,GAAG,EAAE,IAAI,CAAC,WAAW,OAAO,KAAK,CAAC;AACrE,YAAM,QAAQ,eAAe,KAAK,IAAI,QAAQ,KAAK,GAAG,CAAC,aAAa,QAClE,IAAI,CAAC,YAAY,GAAG,EACpB,KAAK,GAAG,CAAC;AACX,YAAM,OAAO,KAAK,QAAQ,eAAe,OAAO,OAAO;AACvD,YAAM,QAAQ,KAAK,IAAI,CAAC,YAAY,OAAO,OAAO,OAAO,CAAC;AAC1D,gBAAM,iCAAQ,YAAY,OAAO,KAAyC;AAC1E,WAAK,QAAQ,CAAC,GAAG,MAAM;AACtB,cAAM,gBAAgB,KAAK,QAAQ;AAAA,UAClC,KAAK,QAAQ,gBAAgB,CAAC;AAAA,UAC9B,EAAE,UAAU,EAAE,MAAM,EAAE,EAAE;AAAA,QACzB;AACA,mBAAW,KAAK,GAAG,aAAa;AAAA,MACjC,CAAC;AAAA,IACF;AAEA,QAAI,cAAc,UAAU;AAK3B,YAAM,QAAQ,KAAK,iBAAiB,SAAS,CAAC;AAC9C,YAAM,YAAY,KAAK,iBAAiB,aAAa,CAAC;AACtD,YAAM,eAAe,KAAK,iBAAiB,WAAW,CAAC;AACvD,YAAM,UAAU,aAAa,MAAM,GAAG,EAAE,IAAI,CAAC,WAAW,OAAO,KAAK,CAAC;AAErE,UAAI,CAAC,QAAQ,SAAS,SAAS,GAAG;AACjC,gBAAQ,QAAQ,SAAS;AAAA,MAC1B;AAEA,YAAM,QAAQ,UAAU,KAAK,QAAQ,QACnC,IAAI,CAAC,WAAW,GAAG,MAAM,MAAM,EAC/B,KAAK,GAAG,CAAC,UAAU,SAAS;AAC9B,YAAM,OAAO,KAAK,QAAQ,eAAe,OAAO,OAAO;AACvD,YAAM,QAAQ,KAAK,IAAI,CAAC,YAAY,OAAO,OAAO,OAAO,EAAE,OAAO,QAAQ,SAAS,CAAC,CAAC;AACrF,eAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACtC,kBAAM,iCAAQ,YAAY,OAAO,MAAM,CAAC,CAAqC;AAAA,MAC9E;AACA,WAAK,QAAQ,CAAC,GAAG,MAAM;AACtB,cAAM,gBAAgB,KAAK,QAAQ;AAAA,UAClC,KAAK,QAAQ,gBAAgB,CAAC;AAAA,UAC9B,EAAE,UAAU,EAAE,MAAM,EAAE,EAAE;AAAA,QACzB;AACA,mBAAW,KAAK,GAAG,aAAa;AAAA,MACjC,CAAC;AAAA,IACF;AAEA,cAAM,iCAAQ,UAAU;AACxB,WAAO,CAAC,UAAU;AAAA,EACnB;AACD;","names":["snowflake"]}