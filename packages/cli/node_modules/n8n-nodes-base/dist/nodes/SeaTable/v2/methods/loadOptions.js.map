{"version":3,"sources":["../../../../../nodes/SeaTable/v2/methods/loadOptions.ts"],"sourcesContent":["import type { ILoadOptionsFunctions, INodePropertyOptions } from 'n8n-workflow';\n\nimport type { IRow } from '../actions/Interfaces';\nimport { getTableColumns, seaTableApiRequest, updateAble } from '../GenericFunctions';\n\nexport async function getTableNames(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\tconst returnData: INodePropertyOptions[] = [];\n\tconst {\n\t\tmetadata: { tables },\n\t} = await seaTableApiRequest.call(\n\t\tthis,\n\t\t{},\n\t\t'GET',\n\t\t'/api-gateway/api/v2/dtables/{{dtable_uuid}}/metadata',\n\t);\n\tfor (const table of tables) {\n\t\treturnData.push({\n\t\t\tname: table.name,\n\t\t\tvalue: table.name,\n\t\t});\n\t}\n\treturn returnData;\n}\n\nexport async function getTableNameAndId(\n\tthis: ILoadOptionsFunctions,\n): Promise<INodePropertyOptions[]> {\n\tconst returnData: INodePropertyOptions[] = [];\n\tconst {\n\t\tmetadata: { tables },\n\t} = await seaTableApiRequest.call(\n\t\tthis,\n\t\t{},\n\t\t'GET',\n\t\t'/api-gateway/api/v2/dtables/{{dtable_uuid}}/metadata',\n\t);\n\tfor (const table of tables) {\n\t\treturnData.push({\n\t\t\tname: table.name,\n\t\t\tvalue: table.name + ':::' + table._id,\n\t\t});\n\t}\n\treturn returnData;\n}\n\nexport async function getSearchableColumns(\n\tthis: ILoadOptionsFunctions,\n): Promise<INodePropertyOptions[]> {\n\tconst returnData: INodePropertyOptions[] = [];\n\tconst tableName = this.getCurrentNodeParameter('tableName') as string;\n\tif (tableName) {\n\t\tconst columns = await seaTableApiRequest.call(\n\t\t\tthis,\n\t\t\t{},\n\t\t\t'GET',\n\t\t\t'/api-gateway/api/v2/dtables/{{dtable_uuid}}/columns',\n\t\t\t{},\n\t\t\t{ table_name: tableName },\n\t\t);\n\t\tfor (const col of columns.columns) {\n\t\t\tif (\n\t\t\t\tcol.type === 'text' ||\n\t\t\t\tcol.type === 'long-text' ||\n\t\t\t\tcol.type === 'number' ||\n\t\t\t\tcol.type === 'single-select' ||\n\t\t\t\tcol.type === 'email' ||\n\t\t\t\tcol.type === 'url' ||\n\t\t\t\tcol.type === 'rate' ||\n\t\t\t\tcol.type === 'formula'\n\t\t\t) {\n\t\t\t\treturnData.push({\n\t\t\t\t\tname: col.name,\n\t\t\t\t\tvalue: col.name,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\treturn returnData;\n}\n\nexport async function getLinkColumns(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\tconst returnData: INodePropertyOptions[] = [];\n\tconst table = this.getCurrentNodeParameter('tableName') as string;\n\n\tconst tableName = table.split(':::')[0];\n\tconst tableId = table.split(':::')[1];\n\n\tif (tableName) {\n\t\tconst columns = await seaTableApiRequest.call(\n\t\t\tthis,\n\t\t\t{},\n\t\t\t'GET',\n\t\t\t'/api-gateway/api/v2/dtables/{{dtable_uuid}}/columns',\n\t\t\t{},\n\t\t\t{ table_name: tableName },\n\t\t);\n\t\tfor (const col of columns.columns) {\n\t\t\tif (col.type === 'link') {\n\t\t\t\t// make sure that the \"other table id\" is returned and not the same table id again.\n\t\t\t\tconst otid =\n\t\t\t\t\ttableId !== col.data.other_table_id ? col.data.other_table_id : col.data.table_id;\n\n\t\t\t\treturnData.push({\n\t\t\t\t\tname: col.name,\n\t\t\t\t\tvalue: col.name + ':::' + col.data.link_id + ':::' + otid,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\treturn returnData;\n}\n\nexport async function getLinkColumnsWithColumnKey(\n\tthis: ILoadOptionsFunctions,\n): Promise<INodePropertyOptions[]> {\n\tconst returnData: INodePropertyOptions[] = [];\n\tconst table = this.getCurrentNodeParameter('tableName') as string;\n\n\tconst tableName = table.split(':::')[0];\n\tconst tableId = table.split(':::')[1];\n\n\tif (tableName) {\n\t\tconst columns = await seaTableApiRequest.call(\n\t\t\tthis,\n\t\t\t{},\n\t\t\t'GET',\n\t\t\t'/api-gateway/api/v2/dtables/{{dtable_uuid}}/columns',\n\t\t\t{},\n\t\t\t{ table_name: tableName },\n\t\t);\n\t\tfor (const col of columns.columns) {\n\t\t\tif (col.type === 'link') {\n\t\t\t\t// make sure that the \"other table id\" is returned and not the same table id again.\n\t\t\t\tconst otid =\n\t\t\t\t\ttableId !== col.data.other_table_id ? col.data.other_table_id : col.data.table_id;\n\n\t\t\t\treturnData.push({\n\t\t\t\t\tname: col.name,\n\t\t\t\t\tvalue: col.name + ':::' + col.data.link_id + ':::' + otid + ':::' + col.key,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\treturn returnData;\n}\n\nexport async function getAssetColumns(\n\tthis: ILoadOptionsFunctions,\n): Promise<INodePropertyOptions[]> {\n\tconst returnData: INodePropertyOptions[] = [];\n\tconst tableName = this.getCurrentNodeParameter('tableName') as string;\n\tif (tableName) {\n\t\tconst columns = await seaTableApiRequest.call(\n\t\t\tthis,\n\t\t\t{},\n\t\t\t'GET',\n\t\t\t'/api-gateway/api/v2/dtables/{{dtable_uuid}}/columns',\n\t\t\t{},\n\t\t\t{ table_name: tableName },\n\t\t);\n\t\tfor (const col of columns.columns) {\n\t\t\tif (col.type === 'image' || col.type === 'file') {\n\t\t\t\treturnData.push({\n\t\t\t\t\tname: col.name,\n\t\t\t\t\tvalue: col.name + ':::' + col.type,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\treturn returnData;\n}\n\nexport async function getSignatureColumns(\n\tthis: ILoadOptionsFunctions,\n): Promise<INodePropertyOptions[]> {\n\tconst returnData: INodePropertyOptions[] = [];\n\tconst tableName = this.getCurrentNodeParameter('tableName') as string;\n\tif (tableName) {\n\t\t// only execute if table is selected\n\t\tconst columns = await seaTableApiRequest.call(\n\t\t\tthis,\n\t\t\t{},\n\t\t\t'GET',\n\t\t\t'/api-gateway/api/v2/dtables/{{dtable_uuid}}/columns',\n\t\t\t{},\n\t\t\t{ table_name: tableName },\n\t\t);\n\t\tfor (const col of columns.columns) {\n\t\t\tif (col.type === 'digital-sign') {\n\t\t\t\treturnData.push({\n\t\t\t\t\tname: col.name,\n\t\t\t\t\tvalue: col.name,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\treturn returnData;\n}\n\nexport async function getTableUpdateAbleColumns(\n\tthis: ILoadOptionsFunctions,\n): Promise<INodePropertyOptions[]> {\n\tconst tableName = this.getNodeParameter('tableName') as string;\n\tlet columns = await getTableColumns.call(this, tableName);\n\n\tcolumns = updateAble(columns);\n\n\treturn columns\n\t\t.filter((column) => column.editable)\n\t\t.map((column) => ({ name: column.name, value: column.name }));\n}\n\nexport async function getRowIds(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\tconst table = this.getCurrentNodeParameter('tableName') as string;\n\tconst operation = this.getCurrentNodeParameter('operation') as string;\n\tlet tableName = table;\n\n\tif (table.indexOf(':::') !== -1) {\n\t\ttableName = table.split(':::')[0];\n\t}\n\n\tlet lockQuery = '';\n\n\tif (operation === 'lock') {\n\t\tlockQuery = 'WHERE _locked is null';\n\t}\n\n\tif (operation === 'unlock') {\n\t\tlockQuery = 'WHERE _locked = true';\n\t}\n\n\tconst returnData: INodePropertyOptions[] = [];\n\tif (tableName) {\n\t\tconst sqlResult = await seaTableApiRequest.call(\n\t\t\tthis,\n\t\t\t{},\n\t\t\t'POST',\n\t\t\t'/api-gateway/api/v2/dtables/{{dtable_uuid}}/sql',\n\t\t\t{\n\t\t\t\tsql: `SELECT * FROM \\`${tableName}\\` ${lockQuery} LIMIT 1000`,\n\t\t\t\tconvert_keys: false,\n\t\t\t},\n\t\t);\n\t\tconst rows = sqlResult.results as IRow[];\n\n\t\tfor (const row of rows) {\n\t\t\treturnData.push({\n\t\t\t\tname: `${row['0000'] as string} (${row._id})`,\n\t\t\t\tvalue: row._id,\n\t\t\t});\n\t\t}\n\t}\n\treturn returnData;\n}\n\nexport async function getTableViews(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\tconst returnData: INodePropertyOptions[] = [];\n\tconst tableName = this.getCurrentNodeParameter('tableName') as string;\n\tif (tableName) {\n\t\tconst { views } = await seaTableApiRequest.call(\n\t\t\tthis,\n\t\t\t{},\n\t\t\t'GET',\n\t\t\t'/api-gateway/api/v2/dtables/{{dtable_uuid}}/views',\n\t\t\t{},\n\t\t\t{ table_name: tableName },\n\t\t);\n\t\treturnData.push({\n\t\t\tname: '<Do not limit to a view>',\n\t\t\tvalue: '',\n\t\t});\n\t\tfor (const view of views) {\n\t\t\treturnData.push({\n\t\t\t\tname: view.name,\n\t\t\t\tvalue: view.name,\n\t\t\t});\n\t\t}\n\t}\n\treturn returnData;\n}\n"],"mappings":"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","names":[]}