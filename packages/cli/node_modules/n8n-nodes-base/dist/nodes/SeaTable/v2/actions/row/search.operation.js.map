{"version":3,"sources":["../../../../../../nodes/SeaTable/v2/actions/row/search.operation.ts"],"sourcesContent":["import {\n\ttype IDataObject,\n\ttype INodeExecutionData,\n\ttype INodeProperties,\n\ttype IExecuteFunctions,\n\tupdateDisplayOptions,\n} from 'n8n-workflow';\n\nimport {\n\tseaTableApiRequest,\n\tenrichColumns,\n\tsimplify_new,\n\tgetBaseCollaborators,\n} from '../../GenericFunctions';\nimport type { IDtableMetadataColumn, IRowResponse } from '../Interfaces';\n\nexport const properties: INodeProperties[] = [\n\t{\n\t\tdisplayName: 'Column Name or ID',\n\t\tname: 'searchColumn',\n\t\ttype: 'options',\n\t\ttypeOptions: {\n\t\t\tloadOptionsDependsOn: ['tableName'],\n\t\t\tloadOptionsMethod: 'getSearchableColumns',\n\t\t},\n\t\trequired: true,\n\t\tdefault: '',\n\t\t// eslint-disable-next-line n8n-nodes-base/node-param-description-wrong-for-dynamic-options\n\t\tdescription:\n\t\t\t'Select the column to be searched. Not all column types are supported for search. Choose from the list, or specify a name using an <a href=\"https://docs.n8n.io/code-examples/expressions/\">expression</a>.',\n\t},\n\t{\n\t\tdisplayName: 'Search Term',\n\t\tname: 'searchTerm',\n\t\ttype: 'string',\n\t\trequired: true,\n\t\tdefault: '',\n\t\tdescription: 'What to look for?',\n\t},\n\t{\n\t\tdisplayName: 'Options',\n\t\tname: 'options',\n\t\ttype: 'collection',\n\t\tplaceholder: 'Add Option',\n\t\tdefault: {},\n\t\toptions: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Case Insensitive Search',\n\t\t\t\tname: 'insensitive',\n\t\t\t\ttype: 'boolean',\n\t\t\t\tdefault: false,\n\t\t\t\tdescription:\n\t\t\t\t\t'Whether the search ignores case sensitivity (true). Otherwise, it distinguishes between uppercase and lowercase characters.',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Activate Wildcard Search',\n\t\t\t\tname: 'wildcard',\n\t\t\t\ttype: 'boolean',\n\t\t\t\tdefault: true,\n\t\t\t\tdescription:\n\t\t\t\t\t'Whether the search only results perfect matches (true). Otherwise, it finds a row even if the search value is part of a string (false).',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Simplify',\n\t\t\t\tname: 'simple',\n\t\t\t\ttype: 'boolean',\n\t\t\t\tdefault: true,\n\t\t\t\tdescription:\n\t\t\t\t\t'Whether to return a simplified version of the response instead of the raw data',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Return Column Names',\n\t\t\t\tname: 'convert',\n\t\t\t\ttype: 'boolean',\n\t\t\t\tdefault: true,\n\t\t\t\tdescription: 'Whether to return the column keys (false) or the column names (true)',\n\t\t\t},\n\t\t],\n\t},\n];\n\nconst displayOptions = {\n\tshow: {\n\t\tresource: ['row'],\n\t\toperation: ['search'],\n\t},\n};\n\nexport const description = updateDisplayOptions(displayOptions, properties);\n\nexport async function execute(\n\tthis: IExecuteFunctions,\n\tindex: number,\n): Promise<INodeExecutionData[]> {\n\tconst tableName = this.getNodeParameter('tableName', index) as string;\n\tconst searchColumn = this.getNodeParameter('searchColumn', index) as string;\n\tconst searchTerm = this.getNodeParameter('searchTerm', index) as string | number;\n\tlet searchTermString = String(searchTerm);\n\tconst options = this.getNodeParameter('options', index);\n\n\t// get collaborators\n\tconst collaborators = await getBaseCollaborators.call(this);\n\n\t// this is the base query. The WHERE has to be finalized...\n\tlet sqlQuery = `SELECT * FROM \\`${tableName}\\` WHERE \\`${searchColumn}\\``;\n\n\tif (options.insensitive) {\n\t\tsearchTermString = searchTermString.toLowerCase();\n\t\tsqlQuery = `SELECT * FROM \\`${tableName}\\` WHERE lower(\\`${searchColumn}\\`)`;\n\t}\n\n\tconst wildcard = options.wildcard ?? true;\n\n\tif (wildcard) sqlQuery = sqlQuery + ' LIKE \"%' + searchTermString + '%\"';\n\telse if (!wildcard) sqlQuery = sqlQuery + ' = \"' + searchTermString + '\"';\n\n\tconst sqlResult = (await seaTableApiRequest.call(\n\t\tthis,\n\t\t{},\n\t\t'POST',\n\t\t'/api-gateway/api/v2/dtables/{{dtable_uuid}}/sql',\n\t\t{\n\t\t\tsql: sqlQuery,\n\t\t\tconvert_keys: options.convert ?? true,\n\t\t},\n\t)) as IRowResponse;\n\tconst metadata = sqlResult.metadata as IDtableMetadataColumn[];\n\tconst rows = sqlResult.results;\n\n\t// hide columns like button\n\trows.map((row) => enrichColumns(row, metadata, collaborators));\n\n\t// remove columns starting with _;\n\tif (options.simple) {\n\t\trows.map((row) => simplify_new(row));\n\t}\n\n\treturn this.helpers.returnJsonArray(rows as IDataObject[]);\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAMO;AAEP,8BAKO;AAGA,MAAM,aAAgC;AAAA,EAC5C;AAAA,IACC,aAAa;AAAA,IACb,MAAM;AAAA,IACN,MAAM;AAAA,IACN,aAAa;AAAA,MACZ,sBAAsB,CAAC,WAAW;AAAA,MAClC,mBAAmB;AAAA,IACpB;AAAA,IACA,UAAU;AAAA,IACV,SAAS;AAAA;AAAA,IAET,aACC;AAAA,EACF;AAAA,EACA;AAAA,IACC,aAAa;AAAA,IACb,MAAM;AAAA,IACN,MAAM;AAAA,IACN,UAAU;AAAA,IACV,SAAS;AAAA,IACT,aAAa;AAAA,EACd;AAAA,EACA;AAAA,IACC,aAAa;AAAA,IACb,MAAM;AAAA,IACN,MAAM;AAAA,IACN,aAAa;AAAA,IACb,SAAS,CAAC;AAAA,IACV,SAAS;AAAA,MACR;AAAA,QACC,aAAa;AAAA,QACb,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,QACT,aACC;AAAA,MACF;AAAA,MACA;AAAA,QACC,aAAa;AAAA,QACb,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,QACT,aACC;AAAA,MACF;AAAA,MACA;AAAA,QACC,aAAa;AAAA,QACb,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,QACT,aACC;AAAA,MACF;AAAA,MACA;AAAA,QACC,aAAa;AAAA,QACb,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,QACT,aAAa;AAAA,MACd;AAAA,IACD;AAAA,EACD;AACD;AAEA,MAAM,iBAAiB;AAAA,EACtB,MAAM;AAAA,IACL,UAAU,CAAC,KAAK;AAAA,IAChB,WAAW,CAAC,QAAQ;AAAA,EACrB;AACD;AAEO,MAAM,kBAAc,0CAAqB,gBAAgB,UAAU;AAE1E,eAAsB,QAErB,OACgC;AAChC,QAAM,YAAY,KAAK,iBAAiB,aAAa,KAAK;AAC1D,QAAM,eAAe,KAAK,iBAAiB,gBAAgB,KAAK;AAChE,QAAM,aAAa,KAAK,iBAAiB,cAAc,KAAK;AAC5D,MAAI,mBAAmB,OAAO,UAAU;AACxC,QAAM,UAAU,KAAK,iBAAiB,WAAW,KAAK;AAGtD,QAAM,gBAAgB,MAAM,6CAAqB,KAAK,IAAI;AAG1D,MAAI,WAAW,mBAAmB,SAAS,cAAc,YAAY;AAErE,MAAI,QAAQ,aAAa;AACxB,uBAAmB,iBAAiB,YAAY;AAChD,eAAW,mBAAmB,SAAS,oBAAoB,YAAY;AAAA,EACxE;AAEA,QAAM,WAAW,QAAQ,YAAY;AAErC,MAAI,SAAU,YAAW,WAAW,aAAa,mBAAmB;AAAA,WAC3D,CAAC,SAAU,YAAW,WAAW,SAAS,mBAAmB;AAEtE,QAAM,YAAa,MAAM,2CAAmB;AAAA,IAC3C;AAAA,IACA,CAAC;AAAA,IACD;AAAA,IACA;AAAA,IACA;AAAA,MACC,KAAK;AAAA,MACL,cAAc,QAAQ,WAAW;AAAA,IAClC;AAAA,EACD;AACA,QAAM,WAAW,UAAU;AAC3B,QAAM,OAAO,UAAU;AAGvB,OAAK,IAAI,CAAC,YAAQ,uCAAc,KAAK,UAAU,aAAa,CAAC;AAG7D,MAAI,QAAQ,QAAQ;AACnB,SAAK,IAAI,CAAC,YAAQ,sCAAa,GAAG,CAAC;AAAA,EACpC;AAEA,SAAO,KAAK,QAAQ,gBAAgB,IAAqB;AAC1D;","names":[]}