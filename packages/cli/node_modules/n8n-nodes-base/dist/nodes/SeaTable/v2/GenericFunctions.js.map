{"version":3,"sources":["../../../../nodes/SeaTable/v2/GenericFunctions.ts"],"sourcesContent":["import type FormData from 'form-data';\nimport type {\n\tIDataObject,\n\tIExecuteFunctions,\n\tILoadOptionsFunctions,\n\tIPollFunctions,\n\tJsonObject,\n\tIHttpRequestMethods,\n\tIHttpRequestOptions,\n\tIRequestOptions,\n} from 'n8n-workflow';\nimport { NodeApiError } from 'n8n-workflow';\n\nimport type {\n\tICollaborator,\n\tICollaboratorsResult,\n\tICredential,\n\tICtx,\n\tIDtableMetadataColumn,\n\tIEndpointVariables,\n\tIName,\n\tIRow,\n\tIRowObject,\n\tIColumnDigitalSignature,\n\tIFile,\n} from './actions/Interfaces';\nimport { schema } from './Schema';\nimport type { TDtableMetadataColumns, TEndpointVariableName } from './types';\n\nconst userBaseUri = (uri?: string) => {\n\tif (uri === undefined) return uri;\n\tif (uri.endsWith('/')) return uri.slice(0, -1);\n\treturn uri;\n};\n\nexport function resolveBaseUri(ctx: ICtx) {\n\treturn ctx?.credentials?.environment === 'cloudHosted'\n\t\t? 'https://cloud.seatable.io'\n\t\t: userBaseUri(ctx?.credentials?.domain);\n}\n\nexport async function getBaseAccessToken(\n\tthis: IExecuteFunctions | ILoadOptionsFunctions | IPollFunctions,\n\tctx: ICtx,\n) {\n\tif (ctx?.base?.access_token !== undefined) return;\n\n\tconst options: IHttpRequestOptions = {\n\t\theaders: {\n\t\t\tAuthorization: `Token ${ctx?.credentials?.token}`,\n\t\t},\n\t\turl: `${resolveBaseUri(ctx)}/api/v2.1/dtable/app-access-token/`,\n\t\tjson: true,\n\t};\n\tctx.base = await this.helpers.httpRequest(options);\n}\n\nfunction endpointCtxExpr(ctx: ICtx, endpoint: string): string {\n\tconst endpointVariables: IEndpointVariables = {};\n\tendpointVariables.access_token = ctx?.base?.access_token;\n\tendpointVariables.dtable_uuid = ctx?.base?.dtable_uuid;\n\n\treturn endpoint.replace(\n\t\t/{{ *(access_token|dtable_uuid|server) *}}/g,\n\t\t(match: string, name: TEndpointVariableName) => {\n\t\t\treturn (endpointVariables[name] as string) || match;\n\t\t},\n\t);\n}\n\nexport async function seaTableApiRequest(\n\tthis: IExecuteFunctions | ILoadOptionsFunctions | IPollFunctions,\n\tctx: ICtx,\n\tmethod: IHttpRequestMethods,\n\tendpoint: string,\n\tbody: IDataObject | FormData | string | Buffer = {},\n\tqs: IDataObject = {},\n\turl: string = '',\n\toption: IDataObject = {},\n): Promise<any> {\n\tconst credentials = await this.getCredentials('seaTableApi');\n\n\tctx.credentials = credentials as unknown as ICredential;\n\n\tawait getBaseAccessToken.call(this, ctx);\n\n\t// some API endpoints require the api_token instead of base_access_token.\n\tconst token =\n\t\tendpoint.indexOf('/api/v2.1/dtable/app-download-link/') === 0 ||\n\t\tendpoint == '/api/v2.1/dtable/app-upload-link/' ||\n\t\tendpoint.indexOf('/seafhttp/upload-api') === 0\n\t\t\t? `${ctx?.credentials?.token}`\n\t\t\t: `${ctx?.base?.access_token}`;\n\n\tlet options: IRequestOptions = {\n\t\turi: url || `${resolveBaseUri(ctx)}${endpointCtxExpr(ctx, endpoint)}`,\n\t\theaders: {\n\t\t\tAuthorization: `Token ${token}`,\n\t\t},\n\t\tmethod,\n\t\tqs,\n\t\tbody,\n\t\tjson: true,\n\t};\n\n\tif (Object.keys(option).length !== 0) {\n\t\toptions = Object.assign({}, options, option);\n\t}\n\n\t// remove header from download request.\n\tif (endpoint.indexOf('/seafhttp/files/') === 0) {\n\t\tdelete options.headers;\n\t}\n\n\t// enhance header for upload request\n\tif (endpoint.indexOf('/seafhttp/upload-api') === 0) {\n\t\toptions.json = true;\n\t\toptions.headers = {\n\t\t\t...options.headers,\n\t\t\t'Content-Type': 'multipart/form-data',\n\t\t};\n\t}\n\n\tif (Object.keys(body).length === 0) {\n\t\tdelete options.body;\n\t}\n\n\ttry {\n\t\treturn await this.helpers.requestWithAuthentication.call(this, 'seaTableApi', options);\n\t} catch (error) {\n\t\tthrow new NodeApiError(this.getNode(), error as JsonObject);\n\t}\n}\n\nexport async function getBaseCollaborators(\n\tthis: ILoadOptionsFunctions | IExecuteFunctions | IPollFunctions,\n): Promise<any> {\n\tconst collaboratorsResult: ICollaboratorsResult = await seaTableApiRequest.call(\n\t\tthis,\n\t\t{},\n\t\t'GET',\n\t\t'/api-gateway/api/v2/dtables/{{dtable_uuid}}/related-users/',\n\t);\n\tconst collaborators: ICollaborator[] = collaboratorsResult.user_list || [];\n\treturn collaborators;\n}\n\nexport async function getTableColumns(\n\tthis: ILoadOptionsFunctions | IExecuteFunctions | IPollFunctions,\n\ttableName: string,\n\tctx: ICtx = {},\n): Promise<TDtableMetadataColumns> {\n\tconst {\n\t\tmetadata: { tables },\n\t} = await seaTableApiRequest.call(\n\t\tthis,\n\t\tctx,\n\t\t'GET',\n\t\t'/api-gateway/api/v2/dtables/{{dtable_uuid}}/metadata',\n\t);\n\tfor (const table of tables) {\n\t\tif (table.name === tableName) {\n\t\t\treturn table.columns;\n\t\t}\n\t}\n\treturn [];\n}\n\nexport function simplify_new(row: IRow) {\n\tfor (const key of Object.keys(row)) {\n\t\tif (key.startsWith('_')) delete row[key];\n\t}\n\treturn row;\n}\n\nconst namePredicate = (name: string) => (named: IName) => named.name === name;\nexport const nameOfPredicate = (names: readonly IName[]) => (name: string) =>\n\tnames.find(namePredicate(name));\n\nconst normalize = (subject: string): string => (subject ? subject.normalize() : '');\n\nexport const split = (subject: string): string[] =>\n\tnormalize(subject)\n\t\t.split(/\\s*((?:[^\\\\,]*?(?:\\\\[\\s\\S])*)*?)\\s*(?:,|$)/)\n\t\t.filter((s) => s.length)\n\t\t.map((s) => s.replace(/\\\\([\\s\\S])/gm, (_, $1) => $1));\n\nfunction getCollaboratorInfo(\n\tauthLocal: string | null | undefined,\n\tcollaboratorList: ICollaborator[],\n): ICollaborator {\n\treturn (\n\t\tcollaboratorList.find((singleCollaborator) => singleCollaborator.email === authLocal) || {\n\t\t\tcontact_email: 'unknown',\n\t\t\tname: 'unknown',\n\t\t\temail: 'unknown',\n\t\t}\n\t);\n}\n\nfunction getAssetPath(type: string, url: string) {\n\tconst parts = url.split(`/${type}/`);\n\tif (parts[1]) {\n\t\treturn '/' + type + '/' + parts[1];\n\t}\n\treturn url;\n}\n\nexport function enrichColumns(\n\trow: IRow,\n\tmetadata: IDtableMetadataColumn[],\n\tcollaboratorList: ICollaborator[],\n): IRow {\n\tObject.keys(row).forEach((key) => {\n\t\tconst columnDef = metadata.find((obj) => obj.name === key || obj.key === key);\n\n\t\tif (columnDef?.type === 'collaborator') {\n\t\t\t// collaborator is an array of strings.\n\t\t\tconst collaborators = (row[key] as string[]) || [];\n\t\t\tif (collaborators.length > 0) {\n\t\t\t\tconst newArray = collaborators.map((email) => {\n\t\t\t\t\tconst collaboratorDetails = getCollaboratorInfo(email, collaboratorList);\n\t\t\t\t\tconst newColl = {\n\t\t\t\t\t\temail,\n\t\t\t\t\t\tcontact_email: collaboratorDetails.contact_email,\n\t\t\t\t\t\tname: collaboratorDetails.name,\n\t\t\t\t\t};\n\t\t\t\t\treturn newColl;\n\t\t\t\t});\n\t\t\t\trow[key] = newArray;\n\t\t\t}\n\t\t}\n\n\t\tif (\n\t\t\tcolumnDef?.type === 'last-modifier' ||\n\t\t\tcolumnDef?.type === 'creator' ||\n\t\t\tcolumnDef?.key === '_creator' ||\n\t\t\tcolumnDef?.key === '_last_modifier'\n\t\t) {\n\t\t\t// creator or last-modifier are always a single string.\n\t\t\tconst collaboratorDetails = getCollaboratorInfo(row[key] as string, collaboratorList);\n\t\t\trow[key] = {\n\t\t\t\temail: row[key],\n\t\t\t\tcontact_email: collaboratorDetails.contact_email,\n\t\t\t\tname: collaboratorDetails.name,\n\t\t\t};\n\t\t}\n\n\t\tif (columnDef?.type === 'image') {\n\t\t\tconst pictures = (row[key] as string[]) || [];\n\t\t\tif (pictures.length > 0) {\n\t\t\t\tconst newArray = pictures.map((url) => ({\n\t\t\t\t\tname: url.split('/').pop(),\n\t\t\t\t\tsize: 0,\n\t\t\t\t\ttype: 'image',\n\t\t\t\t\turl,\n\t\t\t\t\tpath: getAssetPath('images', url),\n\t\t\t\t}));\n\t\t\t\trow[key] = newArray;\n\t\t\t}\n\t\t}\n\n\t\tif (columnDef?.type === 'file') {\n\t\t\tconst files = (row[key] as IFile[]) || [];\n\t\t\tfiles.forEach((file) => {\n\t\t\t\tfile.path = getAssetPath('files', file.url);\n\t\t\t});\n\t\t}\n\n\t\tif (columnDef?.type === 'digital-sign') {\n\t\t\tconst digitalSignature: IColumnDigitalSignature | any = row[key];\n\t\t\tconst collaboratorDetails = getCollaboratorInfo(digitalSignature?.username, collaboratorList);\n\t\t\tif (digitalSignature?.username) {\n\t\t\t\tdigitalSignature.contact_email = collaboratorDetails.contact_email;\n\t\t\t\tdigitalSignature.name = collaboratorDetails.name;\n\t\t\t}\n\t\t}\n\n\t\tif (columnDef?.type === 'button') {\n\t\t\tdelete row[key];\n\t\t}\n\t});\n\n\treturn row;\n}\n\nexport function splitStringColumnsToArrays(\n\trow: IRowObject,\n\tcolumns: TDtableMetadataColumns,\n): IRowObject {\n\tcolumns.map((column) => {\n\t\tif (column.type === 'collaborator' || column.type === 'multiple-select') {\n\t\t\tif (typeof row[column.name] === 'string') {\n\t\t\t\tconst input = row[column.name] as string;\n\t\t\t\trow[column.name] = input.split(',').map((item) => item.trim());\n\t\t\t}\n\t\t}\n\t\tif (column.type === 'number') {\n\t\t\tif (typeof row[column.name] === 'string') {\n\t\t\t\tconst input = row[column.name] as string;\n\t\t\t\trow[column.name] = parseFloat(input);\n\t\t\t}\n\t\t}\n\t\tif (column.type === 'rate' || column.type === 'duration') {\n\t\t\tif (typeof row[column.name] === 'string') {\n\t\t\t\tconst input = row[column.name] as string;\n\t\t\t\trow[column.name] = parseInt(input);\n\t\t\t}\n\t\t}\n\t\tif (column.type === 'checkbox') {\n\t\t\tif (typeof row[column.name] === 'string') {\n\t\t\t\tconst input = row[column.name] as string;\n\t\t\t\trow[column.name] = false;\n\t\t\t\tif (input === 'true' || input === 'on' || input === '1') {\n\t\t\t\t\trow[column.name] = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\treturn row;\n}\n\nexport function rowExport(row: IRowObject, columns: TDtableMetadataColumns): IRowObject {\n\tconst rowAllowed = {} as IRowObject;\n\tcolumns.map((column) => {\n\t\tif (row[column.name]) {\n\t\t\trowAllowed[column.name] = row[column.name];\n\t\t}\n\t});\n\treturn rowAllowed;\n}\n\nexport const dtableSchemaIsColumn = (column: IDtableMetadataColumn): boolean =>\n\t!!schema.columnTypes[column.type];\n\nconst dtableSchemaIsUpdateAbleColumn = (column: IDtableMetadataColumn): boolean =>\n\t!!schema.columnTypes[column.type] && !schema.nonUpdateAbleColumnTypes[column.type];\n\nexport const dtableSchemaColumns = (columns: TDtableMetadataColumns): TDtableMetadataColumns =>\n\tcolumns.filter(dtableSchemaIsColumn);\n\nexport const updateAble = (columns: TDtableMetadataColumns): TDtableMetadataColumns =>\n\tcolumns.filter(dtableSchemaIsUpdateAbleColumn);\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA,0BAA6B;AAe7B,oBAAuB;AAGvB,MAAM,cAAc,CAAC,QAAiB;AACrC,MAAI,QAAQ,OAAW,QAAO;AAC9B,MAAI,IAAI,SAAS,GAAG,EAAG,QAAO,IAAI,MAAM,GAAG,EAAE;AAC7C,SAAO;AACR;AAEO,SAAS,eAAe,KAAW;AACzC,SAAO,KAAK,aAAa,gBAAgB,gBACtC,8BACA,YAAY,KAAK,aAAa,MAAM;AACxC;AAEA,eAAsB,mBAErB,KACC;AACD,MAAI,KAAK,MAAM,iBAAiB,OAAW;AAE3C,QAAM,UAA+B;AAAA,IACpC,SAAS;AAAA,MACR,eAAe,SAAS,KAAK,aAAa,KAAK;AAAA,IAChD;AAAA,IACA,KAAK,GAAG,eAAe,GAAG,CAAC;AAAA,IAC3B,MAAM;AAAA,EACP;AACA,MAAI,OAAO,MAAM,KAAK,QAAQ,YAAY,OAAO;AAClD;AAEA,SAAS,gBAAgB,KAAW,UAA0B;AAC7D,QAAM,oBAAwC,CAAC;AAC/C,oBAAkB,eAAe,KAAK,MAAM;AAC5C,oBAAkB,cAAc,KAAK,MAAM;AAE3C,SAAO,SAAS;AAAA,IACf;AAAA,IACA,CAAC,OAAe,SAAgC;AAC/C,aAAQ,kBAAkB,IAAI,KAAgB;AAAA,IAC/C;AAAA,EACD;AACD;AAEA,eAAsB,mBAErB,KACA,QACA,UACA,OAAiD,CAAC,GAClD,KAAkB,CAAC,GACnB,MAAc,IACd,SAAsB,CAAC,GACR;AACf,QAAM,cAAc,MAAM,KAAK,eAAe,aAAa;AAE3D,MAAI,cAAc;AAElB,QAAM,mBAAmB,KAAK,MAAM,GAAG;AAGvC,QAAM,QACL,SAAS,QAAQ,qCAAqC,MAAM,KAC5D,YAAY,uCACZ,SAAS,QAAQ,sBAAsB,MAAM,IAC1C,GAAG,KAAK,aAAa,KAAK,KAC1B,GAAG,KAAK,MAAM,YAAY;AAE9B,MAAI,UAA2B;AAAA,IAC9B,KAAK,OAAO,GAAG,eAAe,GAAG,CAAC,GAAG,gBAAgB,KAAK,QAAQ,CAAC;AAAA,IACnE,SAAS;AAAA,MACR,eAAe,SAAS,KAAK;AAAA,IAC9B;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,MAAM;AAAA,EACP;AAEA,MAAI,OAAO,KAAK,MAAM,EAAE,WAAW,GAAG;AACrC,cAAU,OAAO,OAAO,CAAC,GAAG,SAAS,MAAM;AAAA,EAC5C;AAGA,MAAI,SAAS,QAAQ,kBAAkB,MAAM,GAAG;AAC/C,WAAO,QAAQ;AAAA,EAChB;AAGA,MAAI,SAAS,QAAQ,sBAAsB,MAAM,GAAG;AACnD,YAAQ,OAAO;AACf,YAAQ,UAAU;AAAA,MACjB,GAAG,QAAQ;AAAA,MACX,gBAAgB;AAAA,IACjB;AAAA,EACD;AAEA,MAAI,OAAO,KAAK,IAAI,EAAE,WAAW,GAAG;AACnC,WAAO,QAAQ;AAAA,EAChB;AAEA,MAAI;AACH,WAAO,MAAM,KAAK,QAAQ,0BAA0B,KAAK,MAAM,eAAe,OAAO;AAAA,EACtF,SAAS,OAAO;AACf,UAAM,IAAI,iCAAa,KAAK,QAAQ,GAAG,KAAmB;AAAA,EAC3D;AACD;AAEA,eAAsB,uBAEN;AACf,QAAM,sBAA4C,MAAM,mBAAmB;AAAA,IAC1E;AAAA,IACA,CAAC;AAAA,IACD;AAAA,IACA;AAAA,EACD;AACA,QAAM,gBAAiC,oBAAoB,aAAa,CAAC;AACzE,SAAO;AACR;AAEA,eAAsB,gBAErB,WACA,MAAY,CAAC,GACqB;AAClC,QAAM;AAAA,IACL,UAAU,EAAE,OAAO;AAAA,EACpB,IAAI,MAAM,mBAAmB;AAAA,IAC5B;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACD;AACA,aAAW,SAAS,QAAQ;AAC3B,QAAI,MAAM,SAAS,WAAW;AAC7B,aAAO,MAAM;AAAA,IACd;AAAA,EACD;AACA,SAAO,CAAC;AACT;AAEO,SAAS,aAAa,KAAW;AACvC,aAAW,OAAO,OAAO,KAAK,GAAG,GAAG;AACnC,QAAI,IAAI,WAAW,GAAG,EAAG,QAAO,IAAI,GAAG;AAAA,EACxC;AACA,SAAO;AACR;AAEA,MAAM,gBAAgB,CAAC,SAAiB,CAAC,UAAiB,MAAM,SAAS;AAClE,MAAM,kBAAkB,CAAC,UAA4B,CAAC,SAC5D,MAAM,KAAK,cAAc,IAAI,CAAC;AAE/B,MAAM,YAAY,CAAC,YAA6B,UAAU,QAAQ,UAAU,IAAI;AAEzE,MAAM,QAAQ,CAAC,YACrB,UAAU,OAAO,EACf,MAAM,4CAA4C,EAClD,OAAO,CAAC,MAAM,EAAE,MAAM,EACtB,IAAI,CAAC,MAAM,EAAE,QAAQ,gBAAgB,CAAC,GAAG,OAAO,EAAE,CAAC;AAEtD,SAAS,oBACR,WACA,kBACgB;AAChB,SACC,iBAAiB,KAAK,CAAC,uBAAuB,mBAAmB,UAAU,SAAS,KAAK;AAAA,IACxF,eAAe;AAAA,IACf,MAAM;AAAA,IACN,OAAO;AAAA,EACR;AAEF;AAEA,SAAS,aAAa,MAAc,KAAa;AAChD,QAAM,QAAQ,IAAI,MAAM,IAAI,IAAI,GAAG;AACnC,MAAI,MAAM,CAAC,GAAG;AACb,WAAO,MAAM,OAAO,MAAM,MAAM,CAAC;AAAA,EAClC;AACA,SAAO;AACR;AAEO,SAAS,cACf,KACA,UACA,kBACO;AACP,SAAO,KAAK,GAAG,EAAE,QAAQ,CAAC,QAAQ;AACjC,UAAM,YAAY,SAAS,KAAK,CAAC,QAAQ,IAAI,SAAS,OAAO,IAAI,QAAQ,GAAG;AAE5E,QAAI,WAAW,SAAS,gBAAgB;AAEvC,YAAM,gBAAiB,IAAI,GAAG,KAAkB,CAAC;AACjD,UAAI,cAAc,SAAS,GAAG;AAC7B,cAAM,WAAW,cAAc,IAAI,CAAC,UAAU;AAC7C,gBAAM,sBAAsB,oBAAoB,OAAO,gBAAgB;AACvE,gBAAM,UAAU;AAAA,YACf;AAAA,YACA,eAAe,oBAAoB;AAAA,YACnC,MAAM,oBAAoB;AAAA,UAC3B;AACA,iBAAO;AAAA,QACR,CAAC;AACD,YAAI,GAAG,IAAI;AAAA,MACZ;AAAA,IACD;AAEA,QACC,WAAW,SAAS,mBACpB,WAAW,SAAS,aACpB,WAAW,QAAQ,cACnB,WAAW,QAAQ,kBAClB;AAED,YAAM,sBAAsB,oBAAoB,IAAI,GAAG,GAAa,gBAAgB;AACpF,UAAI,GAAG,IAAI;AAAA,QACV,OAAO,IAAI,GAAG;AAAA,QACd,eAAe,oBAAoB;AAAA,QACnC,MAAM,oBAAoB;AAAA,MAC3B;AAAA,IACD;AAEA,QAAI,WAAW,SAAS,SAAS;AAChC,YAAM,WAAY,IAAI,GAAG,KAAkB,CAAC;AAC5C,UAAI,SAAS,SAAS,GAAG;AACxB,cAAM,WAAW,SAAS,IAAI,CAAC,SAAS;AAAA,UACvC,MAAM,IAAI,MAAM,GAAG,EAAE,IAAI;AAAA,UACzB,MAAM;AAAA,UACN,MAAM;AAAA,UACN;AAAA,UACA,MAAM,aAAa,UAAU,GAAG;AAAA,QACjC,EAAE;AACF,YAAI,GAAG,IAAI;AAAA,MACZ;AAAA,IACD;AAEA,QAAI,WAAW,SAAS,QAAQ;AAC/B,YAAM,QAAS,IAAI,GAAG,KAAiB,CAAC;AACxC,YAAM,QAAQ,CAAC,SAAS;AACvB,aAAK,OAAO,aAAa,SAAS,KAAK,GAAG;AAAA,MAC3C,CAAC;AAAA,IACF;AAEA,QAAI,WAAW,SAAS,gBAAgB;AACvC,YAAM,mBAAkD,IAAI,GAAG;AAC/D,YAAM,sBAAsB,oBAAoB,kBAAkB,UAAU,gBAAgB;AAC5F,UAAI,kBAAkB,UAAU;AAC/B,yBAAiB,gBAAgB,oBAAoB;AACrD,yBAAiB,OAAO,oBAAoB;AAAA,MAC7C;AAAA,IACD;AAEA,QAAI,WAAW,SAAS,UAAU;AACjC,aAAO,IAAI,GAAG;AAAA,IACf;AAAA,EACD,CAAC;AAED,SAAO;AACR;AAEO,SAAS,2BACf,KACA,SACa;AACb,UAAQ,IAAI,CAAC,WAAW;AACvB,QAAI,OAAO,SAAS,kBAAkB,OAAO,SAAS,mBAAmB;AACxE,UAAI,OAAO,IAAI,OAAO,IAAI,MAAM,UAAU;AACzC,cAAM,QAAQ,IAAI,OAAO,IAAI;AAC7B,YAAI,OAAO,IAAI,IAAI,MAAM,MAAM,GAAG,EAAE,IAAI,CAAC,SAAS,KAAK,KAAK,CAAC;AAAA,MAC9D;AAAA,IACD;AACA,QAAI,OAAO,SAAS,UAAU;AAC7B,UAAI,OAAO,IAAI,OAAO,IAAI,MAAM,UAAU;AACzC,cAAM,QAAQ,IAAI,OAAO,IAAI;AAC7B,YAAI,OAAO,IAAI,IAAI,WAAW,KAAK;AAAA,MACpC;AAAA,IACD;AACA,QAAI,OAAO,SAAS,UAAU,OAAO,SAAS,YAAY;AACzD,UAAI,OAAO,IAAI,OAAO,IAAI,MAAM,UAAU;AACzC,cAAM,QAAQ,IAAI,OAAO,IAAI;AAC7B,YAAI,OAAO,IAAI,IAAI,SAAS,KAAK;AAAA,MAClC;AAAA,IACD;AACA,QAAI,OAAO,SAAS,YAAY;AAC/B,UAAI,OAAO,IAAI,OAAO,IAAI,MAAM,UAAU;AACzC,cAAM,QAAQ,IAAI,OAAO,IAAI;AAC7B,YAAI,OAAO,IAAI,IAAI;AACnB,YAAI,UAAU,UAAU,UAAU,QAAQ,UAAU,KAAK;AACxD,cAAI,OAAO,IAAI,IAAI;AAAA,QACpB;AAAA,MACD;AAAA,IACD;AAAA,EACD,CAAC;AACD,SAAO;AACR;AAEO,SAAS,UAAU,KAAiB,SAA6C;AACvF,QAAM,aAAa,CAAC;AACpB,UAAQ,IAAI,CAAC,WAAW;AACvB,QAAI,IAAI,OAAO,IAAI,GAAG;AACrB,iBAAW,OAAO,IAAI,IAAI,IAAI,OAAO,IAAI;AAAA,IAC1C;AAAA,EACD,CAAC;AACD,SAAO;AACR;AAEO,MAAM,uBAAuB,CAAC,WACpC,CAAC,CAAC,qBAAO,YAAY,OAAO,IAAI;AAEjC,MAAM,iCAAiC,CAAC,WACvC,CAAC,CAAC,qBAAO,YAAY,OAAO,IAAI,KAAK,CAAC,qBAAO,yBAAyB,OAAO,IAAI;AAE3E,MAAM,sBAAsB,CAAC,YACnC,QAAQ,OAAO,oBAAoB;AAE7B,MAAM,aAAa,CAAC,YAC1B,QAAQ,OAAO,8BAA8B;","names":[]}