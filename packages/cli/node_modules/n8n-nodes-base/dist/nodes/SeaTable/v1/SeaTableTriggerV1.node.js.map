{"version":3,"sources":["../../../../nodes/SeaTable/v1/SeaTableTriggerV1.node.ts"],"sourcesContent":["import moment from 'moment-timezone';\nimport {\n\ttype IPollFunctions,\n\ttype ILoadOptionsFunctions,\n\ttype INodeExecutionData,\n\ttype INodePropertyOptions,\n\ttype INodeType,\n\ttype INodeTypeDescription,\n\tNodeConnectionTypes,\n\ttype INodeTypeBaseDescription,\n} from 'n8n-workflow';\n\nimport { getColumns, rowFormatColumns, seaTableApiRequest, simplify } from './GenericFunctions';\nimport type { ICtx, IRow, IRowResponse } from './Interfaces';\n\nexport class SeaTableTriggerV1 implements INodeType {\n\tdescription: INodeTypeDescription;\n\n\tconstructor(baseDescription: INodeTypeBaseDescription) {\n\t\tthis.description = {\n\t\t\t...baseDescription,\n\t\t\tversion: 1,\n\t\t\tsubtitle: '={{$parameter[\"event\"]}}',\n\t\t\tdefaults: {\n\t\t\t\tname: 'SeaTable Trigger',\n\t\t\t},\n\t\t\tcredentials: [\n\t\t\t\t{\n\t\t\t\t\tname: 'seaTableApi',\n\t\t\t\t\trequired: true,\n\t\t\t\t},\n\t\t\t],\n\t\t\tpolling: true,\n\t\t\tinputs: [],\n\t\t\toutputs: [NodeConnectionTypes.Main],\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'Table Name or ID',\n\t\t\t\t\tname: 'tableName',\n\t\t\t\t\ttype: 'options',\n\t\t\t\t\trequired: true,\n\t\t\t\t\ttypeOptions: {\n\t\t\t\t\t\tloadOptionsMethod: 'getTableNames',\n\t\t\t\t\t},\n\t\t\t\t\tdefault: '',\n\t\t\t\t\tdescription:\n\t\t\t\t\t\t'The name of SeaTable table to access. Choose from the list, or specify an ID using an <a href=\"https://docs.n8n.io/code/expressions/\">expression</a>.',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'Event',\n\t\t\t\t\tname: 'event',\n\t\t\t\t\ttype: 'options',\n\t\t\t\t\toptions: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'Row Created',\n\t\t\t\t\t\t\tvalue: 'rowCreated',\n\t\t\t\t\t\t\tdescription: 'Trigger on newly created rows',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t// {\n\t\t\t\t\t\t// \tname: 'Row Modified',\n\t\t\t\t\t\t// \tvalue: 'rowModified',\n\t\t\t\t\t\t// \tdescription: 'Trigger has recently modified rows',\n\t\t\t\t\t\t// },\n\t\t\t\t\t],\n\t\t\t\t\tdefault: 'rowCreated',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'Simplify',\n\t\t\t\t\tname: 'simple',\n\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\tdefault: true,\n\t\t\t\t\tdescription:\n\t\t\t\t\t\t'Whether to return a simplified version of the response instead of the raw data',\n\t\t\t\t},\n\t\t\t],\n\t\t};\n\t}\n\n\tmethods = {\n\t\tloadOptions: {\n\t\t\tasync getTableNames(this: ILoadOptionsFunctions) {\n\t\t\t\tconst returnData: INodePropertyOptions[] = [];\n\t\t\t\tconst {\n\t\t\t\t\tmetadata: { tables },\n\t\t\t\t} = await seaTableApiRequest.call(\n\t\t\t\t\tthis,\n\t\t\t\t\t{},\n\t\t\t\t\t'GET',\n\t\t\t\t\t'/dtable-server/api/v1/dtables/{{dtable_uuid}}/metadata',\n\t\t\t\t);\n\t\t\t\tfor (const table of tables) {\n\t\t\t\t\treturnData.push({\n\t\t\t\t\t\tname: table.name,\n\t\t\t\t\t\tvalue: table.name,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn returnData;\n\t\t\t},\n\t\t},\n\t};\n\n\tasync poll(this: IPollFunctions): Promise<INodeExecutionData[][] | null> {\n\t\tconst webhookData = this.getWorkflowStaticData('node');\n\t\tconst tableName = this.getNodeParameter('tableName') as string;\n\t\tconst simple = this.getNodeParameter('simple') as boolean;\n\t\tconst event = this.getNodeParameter('event') as string;\n\t\tconst ctx: ICtx = {};\n\t\tconst credentials = await this.getCredentials('seaTableApi');\n\n\t\tconst timezone = (credentials.timezone as string) || 'Europe/Berlin';\n\t\tconst now = moment().utc().format();\n\t\tconst startDate = (webhookData.lastTimeChecked as string) || now;\n\t\tconst endDate = now;\n\t\twebhookData.lastTimeChecked = endDate;\n\n\t\tlet rows;\n\n\t\tconst filterField = event === 'rowCreated' ? '_ctime' : '_mtime';\n\n\t\tconst endpoint = '/dtable-db/api/v1/query/{{dtable_uuid}}/';\n\n\t\tif (this.getMode() === 'manual') {\n\t\t\trows = (await seaTableApiRequest.call(this, ctx, 'POST', endpoint, {\n\t\t\t\tsql: `SELECT * FROM ${tableName} LIMIT 1`,\n\t\t\t})) as IRowResponse;\n\t\t} else {\n\t\t\trows = (await seaTableApiRequest.call(this, ctx, 'POST', endpoint, {\n\t\t\t\tsql: `SELECT * FROM ${tableName}\n\t\t\t\t\tWHERE ${filterField} BETWEEN \"${moment(startDate).tz(timezone).format('YYYY-MM-D HH:mm:ss')}\"\n\t\t\t\t\tAND \"${moment(endDate).tz(timezone).format('YYYY-MM-D HH:mm:ss')}\"`,\n\t\t\t})) as IRowResponse;\n\t\t}\n\n\t\tlet response;\n\n\t\tif (rows.metadata && rows.results) {\n\t\t\tconst columns = getColumns(rows);\n\t\t\tif (simple) {\n\t\t\t\tresponse = simplify(rows, columns);\n\t\t\t} else {\n\t\t\t\tresponse = rows.results;\n\t\t\t}\n\n\t\t\tconst allColumns = rows.metadata.map((meta) => meta.name);\n\n\t\t\tresponse = response\n\t\t\t\t//@ts-ignore\n\t\t\t\t.map((row: IRow) => rowFormatColumns(row, allColumns))\n\t\t\t\t.map((row: IRow) => ({ json: row }));\n\t\t}\n\n\t\tif (Array.isArray(response) && response.length) {\n\t\t\treturn [response];\n\t\t}\n\n\t\treturn null;\n\t}\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAAmB;AACnB,0BASO;AAEP,8BAA2E;AAGpE,MAAM,kBAAuC;AAAA,EAGnD,YAAY,iBAA2C;AA4DvD,mBAAU;AAAA,MACT,aAAa;AAAA,QACZ,MAAM,gBAA2C;AAChD,gBAAM,aAAqC,CAAC;AAC5C,gBAAM;AAAA,YACL,UAAU,EAAE,OAAO;AAAA,UACpB,IAAI,MAAM,2CAAmB;AAAA,YAC5B;AAAA,YACA,CAAC;AAAA,YACD;AAAA,YACA;AAAA,UACD;AACA,qBAAW,SAAS,QAAQ;AAC3B,uBAAW,KAAK;AAAA,cACf,MAAM,MAAM;AAAA,cACZ,OAAO,MAAM;AAAA,YACd,CAAC;AAAA,UACF;AACA,iBAAO;AAAA,QACR;AAAA,MACD;AAAA,IACD;AAhFC,SAAK,cAAc;AAAA,MAClB,GAAG;AAAA,MACH,SAAS;AAAA,MACT,UAAU;AAAA,MACV,UAAU;AAAA,QACT,MAAM;AAAA,MACP;AAAA,MACA,aAAa;AAAA,QACZ;AAAA,UACC,MAAM;AAAA,UACN,UAAU;AAAA,QACX;AAAA,MACD;AAAA,MACA,SAAS;AAAA,MACT,QAAQ,CAAC;AAAA,MACT,SAAS,CAAC,wCAAoB,IAAI;AAAA,MAClC,YAAY;AAAA,QACX;AAAA,UACC,aAAa;AAAA,UACb,MAAM;AAAA,UACN,MAAM;AAAA,UACN,UAAU;AAAA,UACV,aAAa;AAAA,YACZ,mBAAmB;AAAA,UACpB;AAAA,UACA,SAAS;AAAA,UACT,aACC;AAAA,QACF;AAAA,QACA;AAAA,UACC,aAAa;AAAA,UACb,MAAM;AAAA,UACN,MAAM;AAAA,UACN,SAAS;AAAA,YACR;AAAA,cACC,MAAM;AAAA,cACN,OAAO;AAAA,cACP,aAAa;AAAA,YACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAMD;AAAA,UACA,SAAS;AAAA,QACV;AAAA,QACA;AAAA,UACC,aAAa;AAAA,UACb,MAAM;AAAA,UACN,MAAM;AAAA,UACN,SAAS;AAAA,UACT,aACC;AAAA,QACF;AAAA,MACD;AAAA,IACD;AAAA,EACD;AAAA,EAyBA,MAAM,OAAmE;AACxE,UAAM,cAAc,KAAK,sBAAsB,MAAM;AACrD,UAAM,YAAY,KAAK,iBAAiB,WAAW;AACnD,UAAM,SAAS,KAAK,iBAAiB,QAAQ;AAC7C,UAAM,QAAQ,KAAK,iBAAiB,OAAO;AAC3C,UAAM,MAAY,CAAC;AACnB,UAAM,cAAc,MAAM,KAAK,eAAe,aAAa;AAE3D,UAAM,WAAY,YAAY,YAAuB;AACrD,UAAM,UAAM,uBAAAA,SAAO,EAAE,IAAI,EAAE,OAAO;AAClC,UAAM,YAAa,YAAY,mBAA8B;AAC7D,UAAM,UAAU;AAChB,gBAAY,kBAAkB;AAE9B,QAAI;AAEJ,UAAM,cAAc,UAAU,eAAe,WAAW;AAExD,UAAM,WAAW;AAEjB,QAAI,KAAK,QAAQ,MAAM,UAAU;AAChC,aAAQ,MAAM,2CAAmB,KAAK,MAAM,KAAK,QAAQ,UAAU;AAAA,QAClE,KAAK,iBAAiB,SAAS;AAAA,MAChC,CAAC;AAAA,IACF,OAAO;AACN,aAAQ,MAAM,2CAAmB,KAAK,MAAM,KAAK,QAAQ,UAAU;AAAA,QAClE,KAAK,iBAAiB,SAAS;AAAA,aACtB,WAAW,iBAAa,uBAAAA,SAAO,SAAS,EAAE,GAAG,QAAQ,EAAE,OAAO,oBAAoB,CAAC;AAAA,gBACpF,uBAAAA,SAAO,OAAO,EAAE,GAAG,QAAQ,EAAE,OAAO,oBAAoB,CAAC;AAAA,MAClE,CAAC;AAAA,IACF;AAEA,QAAI;AAEJ,QAAI,KAAK,YAAY,KAAK,SAAS;AAClC,YAAM,cAAU,oCAAW,IAAI;AAC/B,UAAI,QAAQ;AACX,uBAAW,kCAAS,MAAM,OAAO;AAAA,MAClC,OAAO;AACN,mBAAW,KAAK;AAAA,MACjB;AAEA,YAAM,aAAa,KAAK,SAAS,IAAI,CAAC,SAAS,KAAK,IAAI;AAExD,iBAAW,SAET,IAAI,CAAC,YAAc,0CAAiB,KAAK,UAAU,CAAC,EACpD,IAAI,CAAC,SAAe,EAAE,MAAM,IAAI,EAAE;AAAA,IACrC;AAEA,QAAI,MAAM,QAAQ,QAAQ,KAAK,SAAS,QAAQ;AAC/C,aAAO,CAAC,QAAQ;AAAA,IACjB;AAEA,WAAO;AAAA,EACR;AACD;","names":["moment"]}