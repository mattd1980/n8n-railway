{"version":3,"sources":["../../../../../nodes/Files/ReadWriteFile/actions/read.operation.ts"],"sourcesContent":["import glob from 'fast-glob';\nimport { NodeApiError } from 'n8n-workflow';\nimport type {\n\tIExecuteFunctions,\n\tINodeExecutionData,\n\tINodeProperties,\n\tJsonObject,\n} from 'n8n-workflow';\n\nimport { updateDisplayOptions } from '@utils/utilities';\n\nimport { errorMapper, escapeSpecialCharacters } from '../helpers/utils';\n\nexport const properties: INodeProperties[] = [\n\t{\n\t\tdisplayName: 'File(s) Selector',\n\t\tname: 'fileSelector',\n\t\ttype: 'string',\n\t\tdefault: '',\n\t\trequired: true,\n\t\tplaceholder: 'e.g. /home/user/Pictures/**/*.png',\n\t\thint: 'Supports patterns, learn more <a href=\"https://github.com/micromatch/picomatch#basic-globbing\" target=\"_blank\">here</a>',\n\t\tdescription:\n\t\t\t\"Specify a file's path or path pattern to read multiple files. Always use forward-slashes for path separator even on Windows.\",\n\t},\n\t{\n\t\tdisplayName: 'Options',\n\t\tname: 'options',\n\t\ttype: 'collection',\n\t\tplaceholder: 'Add option',\n\t\tdefault: {},\n\t\toptions: [\n\t\t\t{\n\t\t\t\tdisplayName: 'File Extension',\n\t\t\t\tname: 'fileExtension',\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: '',\n\t\t\t\tplaceholder: 'e.g. zip',\n\t\t\t\tdescription: 'Extension of the file in the output binary',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'File Name',\n\t\t\t\tname: 'fileName',\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: '',\n\t\t\t\tplaceholder: 'e.g. data.zip',\n\t\t\t\tdescription: 'Name of the file in the output binary',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Mime Type',\n\t\t\t\tname: 'mimeType',\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: '',\n\t\t\t\tplaceholder: 'e.g. application/zip',\n\t\t\t\tdescription: 'Mime type of the file in the output binary',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Put Output File in Field',\n\t\t\t\tname: 'dataPropertyName',\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: 'data',\n\t\t\t\tplaceholder: 'e.g. data',\n\t\t\t\tdescription: \"By default 'data' is used\",\n\t\t\t\thint: 'The name of the output binary field to put the file in',\n\t\t\t},\n\t\t],\n\t},\n];\n\nconst displayOptions = {\n\tshow: {\n\t\toperation: ['read'],\n\t},\n};\n\nexport const description = updateDisplayOptions(displayOptions, properties);\n\nexport async function execute(this: IExecuteFunctions, items: INodeExecutionData[]) {\n\tconst returnData: INodeExecutionData[] = [];\n\tlet fileSelector;\n\n\tfor (let itemIndex = 0; itemIndex < items.length; itemIndex++) {\n\t\ttry {\n\t\t\tfileSelector = String(this.getNodeParameter('fileSelector', itemIndex));\n\n\t\t\tfileSelector = escapeSpecialCharacters(fileSelector);\n\n\t\t\tif (/^[a-zA-Z]:/.test(fileSelector)) {\n\t\t\t\tfileSelector = fileSelector.replace(/\\\\\\\\/g, '/');\n\t\t\t}\n\n\t\t\tconst options = this.getNodeParameter('options', itemIndex, {});\n\n\t\t\tlet dataPropertyName = 'data';\n\n\t\t\tif (options.dataPropertyName) {\n\t\t\t\tdataPropertyName = options.dataPropertyName as string;\n\t\t\t}\n\n\t\t\tconst files = await glob(fileSelector);\n\n\t\t\tconst newItems: INodeExecutionData[] = [];\n\t\t\tfor (const filePath of files) {\n\t\t\t\tconst stream = await this.helpers.createReadStream(filePath);\n\t\t\t\tconst binaryData = await this.helpers.prepareBinaryData(stream, filePath);\n\n\t\t\t\tif (options.fileName !== undefined) {\n\t\t\t\t\tbinaryData.fileName = options.fileName as string;\n\t\t\t\t}\n\n\t\t\t\tif (options.fileExtension !== undefined) {\n\t\t\t\t\tbinaryData.fileExtension = options.fileExtension as string;\n\t\t\t\t}\n\n\t\t\t\tif (options.mimeType !== undefined) {\n\t\t\t\t\tbinaryData.mimeType = options.mimeType as string;\n\t\t\t\t}\n\n\t\t\t\tnewItems.push({\n\t\t\t\t\tbinary: {\n\t\t\t\t\t\t[dataPropertyName]: binaryData,\n\t\t\t\t\t},\n\t\t\t\t\tjson: {\n\t\t\t\t\t\tmimeType: binaryData.mimeType,\n\t\t\t\t\t\tfileType: binaryData.fileType,\n\t\t\t\t\t\tfileName: binaryData.fileName,\n\t\t\t\t\t\tfileExtension: binaryData.fileExtension,\n\t\t\t\t\t\tfileSize: binaryData.fileSize,\n\t\t\t\t\t},\n\t\t\t\t\tpairedItem: {\n\t\t\t\t\t\titem: itemIndex,\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t}\n\t\t\treturnData.push(...newItems);\n\t\t} catch (error) {\n\t\t\tconst nodeOperatioinError = errorMapper.call(this, error, itemIndex, {\n\t\t\t\tfilePath: fileSelector,\n\t\t\t\toperation: 'read',\n\t\t\t});\n\t\t\tif (this.continueOnFail()) {\n\t\t\t\treturnData.push({\n\t\t\t\t\tjson: {\n\t\t\t\t\t\terror: nodeOperatioinError.message,\n\t\t\t\t\t},\n\t\t\t\t\tpairedItem: {\n\t\t\t\t\t\titem: itemIndex,\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tthrow new NodeApiError(this.getNode(), error as JsonObject, { itemIndex });\n\t\t}\n\t}\n\n\treturn returnData;\n}\n"],"mappings":"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","names":["glob"]}