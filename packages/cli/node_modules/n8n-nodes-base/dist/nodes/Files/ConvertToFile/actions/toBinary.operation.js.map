{"version":3,"sources":["../../../../../nodes/Files/ConvertToFile/actions/toBinary.operation.ts"],"sourcesContent":["import type { IExecuteFunctions, INodeExecutionData, INodeProperties } from 'n8n-workflow';\nimport { NodeOperationError } from 'n8n-workflow';\n\nimport type { JsonToBinaryOptions } from '@utils/binary';\nimport { createBinaryFromJson } from '@utils/binary';\nimport { encodeDecodeOptions } from '@utils/descriptions';\nimport { updateDisplayOptions } from '@utils/utilities';\n\nexport const properties: INodeProperties[] = [\n\t{\n\t\tdisplayName: 'Base64 Input Field',\n\t\tname: 'sourceProperty',\n\t\ttype: 'string',\n\t\tdefault: '',\n\t\trequired: true,\n\t\tplaceholder: 'e.g data',\n\t\trequiresDataPath: 'single',\n\t\tdescription:\n\t\t\t\"The name of the input field that contains the base64 string to convert to a file. Use dot-notation for deep fields (e.g. 'level1.level2.currentKey').\",\n\t},\n\t{\n\t\tdisplayName: 'Put Output File in Field',\n\t\tname: 'binaryPropertyName',\n\t\ttype: 'string',\n\t\tdefault: 'data',\n\t\trequired: true,\n\t\tplaceholder: 'e.g data',\n\t\thint: 'The name of the output binary field to put the file in',\n\t},\n\t{\n\t\tdisplayName: 'Options',\n\t\tname: 'options',\n\t\ttype: 'collection',\n\t\tplaceholder: 'Add option',\n\t\tdefault: {},\n\t\toptions: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Add Byte Order Mark (BOM)',\n\t\t\t\tdescription:\n\t\t\t\t\t'Whether to add special marker at the start of your text file. This marker helps some programs understand how to read the file correctly.',\n\t\t\t\tname: 'addBOM',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tencoding: ['utf8', 'cesu8', 'ucs2'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\ttype: 'boolean',\n\t\t\t\tdefault: false,\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Data Is Base64',\n\t\t\t\tname: 'dataIsBase64',\n\t\t\t\ttype: 'boolean',\n\t\t\t\tdefault: true,\n\t\t\t\tdescription: 'Whether the data is already base64 encoded',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\t'@version': [1],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Encoding',\n\t\t\t\tname: 'encoding',\n\t\t\t\ttype: 'options',\n\t\t\t\toptions: encodeDecodeOptions,\n\t\t\t\tdefault: 'utf8',\n\t\t\t\tdescription: 'Choose the character set to use to encode the data',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\thide: {\n\t\t\t\t\t\tdataIsBase64: [true],\n\t\t\t\t\t\t'@version': [{ _cnd: { gt: 1 } }],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'File Name',\n\t\t\t\tname: 'fileName',\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: '',\n\t\t\t\tplaceholder: 'e.g. myFile',\n\t\t\t\tdescription: 'Name of the output file',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'MIME Type',\n\t\t\t\tname: 'mimeType',\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: '',\n\t\t\t\tplaceholder: 'e.g text/plain',\n\t\t\t\tdescription:\n\t\t\t\t\t'The MIME type of the output file. <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types\" target=\"_blank\">Common MIME types</a>.',\n\t\t\t},\n\t\t],\n\t},\n];\n\nconst displayOptions = {\n\tshow: {\n\t\toperation: ['toBinary'],\n\t},\n};\n\nexport const description = updateDisplayOptions(displayOptions, properties);\n\nexport async function execute(this: IExecuteFunctions, items: INodeExecutionData[]) {\n\tconst returnData: INodeExecutionData[] = [];\n\n\tconst nodeVersion = this.getNode().typeVersion;\n\n\tfor (let i = 0; i < items.length; i++) {\n\t\ttry {\n\t\t\tconst options = this.getNodeParameter('options', i, {});\n\t\t\tconst binaryPropertyName = this.getNodeParameter('binaryPropertyName', i, 'data');\n\t\t\tconst sourceProperty = this.getNodeParameter('sourceProperty', i) as string;\n\n\t\t\tlet dataIsBase64 = true;\n\t\t\tif (nodeVersion === 1) {\n\t\t\t\tdataIsBase64 = options.dataIsBase64 !== false;\n\t\t\t}\n\n\t\t\tconst jsonToBinaryOptions: JsonToBinaryOptions = {\n\t\t\t\tsourceKey: sourceProperty,\n\t\t\t\tfileName: options.fileName as string,\n\t\t\t\tmimeType: options.mimeType as string,\n\t\t\t\tdataIsBase64,\n\t\t\t\tencoding: options.encoding as string,\n\t\t\t\taddBOM: options.addBOM as boolean,\n\t\t\t\titemIndex: i,\n\t\t\t};\n\n\t\t\tconst binaryData = await createBinaryFromJson.call(this, items[i].json, jsonToBinaryOptions);\n\n\t\t\tconst newItem: INodeExecutionData = {\n\t\t\t\tjson: {},\n\t\t\t\tbinary: {\n\t\t\t\t\t[binaryPropertyName]: binaryData,\n\t\t\t\t},\n\t\t\t\tpairedItem: { item: i },\n\t\t\t};\n\n\t\t\treturnData.push(newItem);\n\t\t} catch (error) {\n\t\t\tif (this.continueOnFail()) {\n\t\t\t\treturnData.push({\n\t\t\t\t\tjson: {\n\t\t\t\t\t\terror: error.message,\n\t\t\t\t\t},\n\t\t\t\t\tpairedItem: {\n\t\t\t\t\t\titem: i,\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tthrow new NodeOperationError(this.getNode(), error, { itemIndex: i });\n\t\t}\n\t}\n\n\treturn returnData;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,0BAAmC;AAGnC,oBAAqC;AACrC,0BAAoC;AACpC,uBAAqC;AAE9B,MAAM,aAAgC;AAAA,EAC5C;AAAA,IACC,aAAa;AAAA,IACb,MAAM;AAAA,IACN,MAAM;AAAA,IACN,SAAS;AAAA,IACT,UAAU;AAAA,IACV,aAAa;AAAA,IACb,kBAAkB;AAAA,IAClB,aACC;AAAA,EACF;AAAA,EACA;AAAA,IACC,aAAa;AAAA,IACb,MAAM;AAAA,IACN,MAAM;AAAA,IACN,SAAS;AAAA,IACT,UAAU;AAAA,IACV,aAAa;AAAA,IACb,MAAM;AAAA,EACP;AAAA,EACA;AAAA,IACC,aAAa;AAAA,IACb,MAAM;AAAA,IACN,MAAM;AAAA,IACN,aAAa;AAAA,IACb,SAAS,CAAC;AAAA,IACV,SAAS;AAAA,MACR;AAAA,QACC,aAAa;AAAA,QACb,aACC;AAAA,QACD,MAAM;AAAA,QACN,gBAAgB;AAAA,UACf,MAAM;AAAA,YACL,UAAU,CAAC,QAAQ,SAAS,MAAM;AAAA,UACnC;AAAA,QACD;AAAA,QACA,MAAM;AAAA,QACN,SAAS;AAAA,MACV;AAAA,MACA;AAAA,QACC,aAAa;AAAA,QACb,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,QACT,aAAa;AAAA,QACb,gBAAgB;AAAA,UACf,MAAM;AAAA,YACL,YAAY,CAAC,CAAC;AAAA,UACf;AAAA,QACD;AAAA,MACD;AAAA,MACA;AAAA,QACC,aAAa;AAAA,QACb,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,QACT,SAAS;AAAA,QACT,aAAa;AAAA,QACb,gBAAgB;AAAA,UACf,MAAM;AAAA,YACL,cAAc,CAAC,IAAI;AAAA,YACnB,YAAY,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,EAAE,CAAC;AAAA,UACjC;AAAA,QACD;AAAA,MACD;AAAA,MACA;AAAA,QACC,aAAa;AAAA,QACb,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,QACT,aAAa;AAAA,QACb,aAAa;AAAA,MACd;AAAA,MACA;AAAA,QACC,aAAa;AAAA,QACb,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,QACT,aAAa;AAAA,QACb,aACC;AAAA,MACF;AAAA,IACD;AAAA,EACD;AACD;AAEA,MAAM,iBAAiB;AAAA,EACtB,MAAM;AAAA,IACL,WAAW,CAAC,UAAU;AAAA,EACvB;AACD;AAEO,MAAM,kBAAc,uCAAqB,gBAAgB,UAAU;AAE1E,eAAsB,QAAiC,OAA6B;AACnF,QAAM,aAAmC,CAAC;AAE1C,QAAM,cAAc,KAAK,QAAQ,EAAE;AAEnC,WAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACtC,QAAI;AACH,YAAM,UAAU,KAAK,iBAAiB,WAAW,GAAG,CAAC,CAAC;AACtD,YAAM,qBAAqB,KAAK,iBAAiB,sBAAsB,GAAG,MAAM;AAChF,YAAM,iBAAiB,KAAK,iBAAiB,kBAAkB,CAAC;AAEhE,UAAI,eAAe;AACnB,UAAI,gBAAgB,GAAG;AACtB,uBAAe,QAAQ,iBAAiB;AAAA,MACzC;AAEA,YAAM,sBAA2C;AAAA,QAChD,WAAW;AAAA,QACX,UAAU,QAAQ;AAAA,QAClB,UAAU,QAAQ;AAAA,QAClB;AAAA,QACA,UAAU,QAAQ;AAAA,QAClB,QAAQ,QAAQ;AAAA,QAChB,WAAW;AAAA,MACZ;AAEA,YAAM,aAAa,MAAM,mCAAqB,KAAK,MAAM,MAAM,CAAC,EAAE,MAAM,mBAAmB;AAE3F,YAAM,UAA8B;AAAA,QACnC,MAAM,CAAC;AAAA,QACP,QAAQ;AAAA,UACP,CAAC,kBAAkB,GAAG;AAAA,QACvB;AAAA,QACA,YAAY,EAAE,MAAM,EAAE;AAAA,MACvB;AAEA,iBAAW,KAAK,OAAO;AAAA,IACxB,SAAS,OAAO;AACf,UAAI,KAAK,eAAe,GAAG;AAC1B,mBAAW,KAAK;AAAA,UACf,MAAM;AAAA,YACL,OAAO,MAAM;AAAA,UACd;AAAA,UACA,YAAY;AAAA,YACX,MAAM;AAAA,UACP;AAAA,QACD,CAAC;AACD;AAAA,MACD;AACA,YAAM,IAAI,uCAAmB,KAAK,QAAQ,GAAG,OAAO,EAAE,WAAW,EAAE,CAAC;AAAA,IACrE;AAAA,EACD;AAEA,SAAO;AACR;","names":[]}