{"version":3,"sources":["../../../../../nodes/Files/ConvertToFile/actions/toJson.operation.ts"],"sourcesContent":["import type { IExecuteFunctions, INodeExecutionData, INodeProperties } from 'n8n-workflow';\nimport { NodeOperationError } from 'n8n-workflow';\n\nimport { createBinaryFromJson } from '@utils/binary';\nimport { encodeDecodeOptions } from '@utils/descriptions';\nimport { generatePairedItemData, updateDisplayOptions } from '@utils/utilities';\n\nexport const properties: INodeProperties[] = [\n\t{\n\t\tdisplayName: 'Mode',\n\t\tname: 'mode',\n\t\ttype: 'options',\n\t\tnoDataExpression: true,\n\t\toptions: [\n\t\t\t{\n\t\t\t\tname: 'All Items to One File',\n\t\t\t\tvalue: 'once',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Each Item to Separate File',\n\t\t\t\tvalue: 'each',\n\t\t\t},\n\t\t],\n\t\tdefault: 'once',\n\t},\n\t{\n\t\tdisplayName: 'Put Output File in Field',\n\t\tname: 'binaryPropertyName',\n\t\ttype: 'string',\n\t\tdefault: 'data',\n\t\trequired: true,\n\t\tplaceholder: 'e.g data',\n\t\thint: 'The name of the output binary field to put the file in',\n\t},\n\t{\n\t\tdisplayName: 'Options',\n\t\tname: 'options',\n\t\ttype: 'collection',\n\t\tplaceholder: 'Add option',\n\t\tdefault: {},\n\t\toptions: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Add Byte Order Mark (BOM)',\n\t\t\t\tname: 'addBOM',\n\t\t\t\ttype: 'boolean',\n\t\t\t\tdefault: false,\n\t\t\t\tdescription:\n\t\t\t\t\t'Whether to add special marker at the start of your text file. This marker helps some programs understand how to read the file correctly.',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tencoding: ['utf8', 'cesu8', 'ucs2'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Format',\n\t\t\t\tname: 'format',\n\t\t\t\ttype: 'boolean',\n\t\t\t\tdefault: false,\n\t\t\t\tdescription: 'Whether to format the JSON data for easier reading',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Encoding',\n\t\t\t\tname: 'encoding',\n\t\t\t\ttype: 'options',\n\t\t\t\toptions: encodeDecodeOptions,\n\t\t\t\tdefault: 'utf8',\n\t\t\t\tdescription: 'Choose the character set to use to encode the data',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'File Name',\n\t\t\t\tname: 'fileName',\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: '',\n\t\t\t\tplaceholder: 'e.g. myFile.json',\n\t\t\t\tdescription: 'Name of the output file',\n\t\t\t},\n\t\t],\n\t},\n];\n\nconst displayOptions = {\n\tshow: {\n\t\toperation: ['toJson'],\n\t},\n};\n\nexport const description = updateDisplayOptions(displayOptions, properties);\n\nexport async function execute(this: IExecuteFunctions, items: INodeExecutionData[]) {\n\tlet returnData: INodeExecutionData[] = [];\n\n\tconst mode = this.getNodeParameter('mode', 0, 'once') as string;\n\tif (mode === 'once') {\n\t\tconst pairedItem = generatePairedItemData(items.length);\n\t\ttry {\n\t\t\tconst options = this.getNodeParameter('options', 0, {});\n\t\t\tconst binaryPropertyName = this.getNodeParameter('binaryPropertyName', 0, 'data');\n\n\t\t\tconst binaryData = await createBinaryFromJson.call(\n\t\t\t\tthis,\n\t\t\t\titems.map((item) => item.json),\n\t\t\t\t{\n\t\t\t\t\tfileName: options.fileName as string,\n\t\t\t\t\tmimeType: 'application/json',\n\t\t\t\t\tencoding: options.encoding as string,\n\t\t\t\t\taddBOM: options.addBOM as boolean,\n\t\t\t\t\tformat: options.format as boolean,\n\t\t\t\t},\n\t\t\t);\n\n\t\t\tconst newItem: INodeExecutionData = {\n\t\t\t\tjson: {},\n\t\t\t\tbinary: {\n\t\t\t\t\t[binaryPropertyName]: binaryData,\n\t\t\t\t},\n\t\t\t\tpairedItem,\n\t\t\t};\n\n\t\t\treturnData = [newItem];\n\t\t} catch (error) {\n\t\t\tif (this.continueOnFail()) {\n\t\t\t\treturnData.push({\n\t\t\t\t\tjson: {\n\t\t\t\t\t\terror: error.message,\n\t\t\t\t\t},\n\t\t\t\t\tpairedItem,\n\t\t\t\t});\n\t\t\t}\n\t\t\tthrow new NodeOperationError(this.getNode(), error);\n\t\t}\n\t} else {\n\t\tfor (let i = 0; i < items.length; i++) {\n\t\t\ttry {\n\t\t\t\tconst options = this.getNodeParameter('options', i, {});\n\t\t\t\tconst binaryPropertyName = this.getNodeParameter('binaryPropertyName', i, 'data');\n\n\t\t\t\tconst binaryData = await createBinaryFromJson.call(this, items[i].json, {\n\t\t\t\t\tfileName: options.fileName as string,\n\t\t\t\t\tencoding: options.encoding as string,\n\t\t\t\t\taddBOM: options.addBOM as boolean,\n\t\t\t\t\tformat: options.format as boolean,\n\t\t\t\t\tmimeType: 'application/json',\n\t\t\t\t\titemIndex: i,\n\t\t\t\t});\n\n\t\t\t\tconst newItem: INodeExecutionData = {\n\t\t\t\t\tjson: {},\n\t\t\t\t\tbinary: {\n\t\t\t\t\t\t[binaryPropertyName]: binaryData,\n\t\t\t\t\t},\n\t\t\t\t\tpairedItem: { item: i },\n\t\t\t\t};\n\n\t\t\t\treturnData.push(newItem);\n\t\t\t} catch (error) {\n\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\treturnData.push({\n\t\t\t\t\t\tjson: {\n\t\t\t\t\t\t\terror: error.message,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tpairedItem: {\n\t\t\t\t\t\t\titem: i,\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tthrow new NodeOperationError(this.getNode(), error, { itemIndex: i });\n\t\t\t}\n\t\t}\n\t}\n\n\treturn returnData;\n}\n"],"mappings":"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","names":[]}