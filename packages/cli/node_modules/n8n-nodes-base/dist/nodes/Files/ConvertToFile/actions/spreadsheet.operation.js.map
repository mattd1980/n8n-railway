{"version":3,"sources":["../../../../../nodes/Files/ConvertToFile/actions/spreadsheet.operation.ts"],"sourcesContent":["import {\n\tNodeOperationError,\n\ttype IExecuteFunctions,\n\ttype INodeExecutionData,\n\ttype INodeProperties,\n} from 'n8n-workflow';\n\nimport type { JsonToSpreadsheetBinaryOptions, JsonToSpreadsheetBinaryFormat } from '@utils/binary';\nimport { convertJsonToSpreadsheetBinary } from '@utils/binary';\nimport { generatePairedItemData, updateDisplayOptions } from '@utils/utilities';\n\nexport const operations = ['csv', 'html', 'rtf', 'ods', 'xls', 'xlsx'];\n\nexport const properties: INodeProperties[] = [\n\t{\n\t\tdisplayName: 'Put Output File in Field',\n\t\tname: 'binaryPropertyName',\n\t\ttype: 'string',\n\t\tdefault: 'data',\n\t\trequired: true,\n\t\tplaceholder: 'e.g data',\n\t\thint: 'The name of the output binary field to put the file in',\n\t},\n\t{\n\t\tdisplayName: 'Options',\n\t\tname: 'options',\n\t\ttype: 'collection',\n\t\tplaceholder: 'Add option',\n\t\tdefault: {},\n\t\toptions: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Compression',\n\t\t\t\tname: 'compression',\n\t\t\t\ttype: 'boolean',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\t'/operation': ['xlsx', 'ods'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdefault: false,\n\t\t\t\tdescription: 'Whether to reduce the output file size',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Delimiter',\n\t\t\t\tname: 'delimiter',\n\t\t\t\ttype: 'string',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\t'/operation': ['csv'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdefault: ',',\n\t\t\t\tdescription: 'The character to use to separate fields',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'File Name',\n\t\t\t\tname: 'fileName',\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: '',\n\t\t\t\tdescription: 'Name of the output file',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Header Row',\n\t\t\t\tname: 'headerRow',\n\t\t\t\ttype: 'boolean',\n\t\t\t\tdefault: true,\n\t\t\t\tdescription: 'Whether the first row of the file contains the header names',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Sheet Name',\n\t\t\t\tname: 'sheetName',\n\t\t\t\ttype: 'string',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\t'/operation': ['ods', 'xls', 'xlsx'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdefault: 'Sheet',\n\t\t\t\tdescription: 'Name of the sheet to create in the spreadsheet',\n\t\t\t\tplaceholder: 'e.g. mySheet',\n\t\t\t},\n\t\t],\n\t},\n];\n\nconst displayOptions = {\n\tshow: {\n\t\toperation: operations,\n\t},\n};\n\nexport const description = updateDisplayOptions(displayOptions, properties);\n\nexport async function execute(\n\tthis: IExecuteFunctions,\n\titems: INodeExecutionData[],\n\toperation: string,\n) {\n\tlet returnData: INodeExecutionData[] = [];\n\n\tconst pairedItem = generatePairedItemData(items.length);\n\ttry {\n\t\tconst options = this.getNodeParameter('options', 0, {}) as JsonToSpreadsheetBinaryOptions;\n\t\tconst binaryPropertyName = this.getNodeParameter('binaryPropertyName', 0, 'data');\n\n\t\tconst binaryData = await convertJsonToSpreadsheetBinary.call(\n\t\t\tthis,\n\t\t\titems,\n\t\t\toperation as JsonToSpreadsheetBinaryFormat,\n\t\t\toptions,\n\t\t\t'File',\n\t\t);\n\n\t\tconst newItem: INodeExecutionData = {\n\t\t\tjson: {},\n\t\t\tbinary: {\n\t\t\t\t[binaryPropertyName]: binaryData,\n\t\t\t},\n\t\t\tpairedItem,\n\t\t};\n\n\t\treturnData = [newItem];\n\t} catch (error) {\n\t\tif (this.continueOnFail()) {\n\t\t\treturnData.push({\n\t\t\t\tjson: {\n\t\t\t\t\terror: error.message,\n\t\t\t\t},\n\t\t\t\tpairedItem,\n\t\t\t});\n\t\t} else {\n\t\t\tthrow new NodeOperationError(this.getNode(), error);\n\t\t}\n\t}\n\n\treturn returnData;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAKO;AAGP,oBAA+C;AAC/C,uBAA6D;AAEtD,MAAM,aAAa,CAAC,OAAO,QAAQ,OAAO,OAAO,OAAO,MAAM;AAE9D,MAAM,aAAgC;AAAA,EAC5C;AAAA,IACC,aAAa;AAAA,IACb,MAAM;AAAA,IACN,MAAM;AAAA,IACN,SAAS;AAAA,IACT,UAAU;AAAA,IACV,aAAa;AAAA,IACb,MAAM;AAAA,EACP;AAAA,EACA;AAAA,IACC,aAAa;AAAA,IACb,MAAM;AAAA,IACN,MAAM;AAAA,IACN,aAAa;AAAA,IACb,SAAS,CAAC;AAAA,IACV,SAAS;AAAA,MACR;AAAA,QACC,aAAa;AAAA,QACb,MAAM;AAAA,QACN,MAAM;AAAA,QACN,gBAAgB;AAAA,UACf,MAAM;AAAA,YACL,cAAc,CAAC,QAAQ,KAAK;AAAA,UAC7B;AAAA,QACD;AAAA,QACA,SAAS;AAAA,QACT,aAAa;AAAA,MACd;AAAA,MACA;AAAA,QACC,aAAa;AAAA,QACb,MAAM;AAAA,QACN,MAAM;AAAA,QACN,gBAAgB;AAAA,UACf,MAAM;AAAA,YACL,cAAc,CAAC,KAAK;AAAA,UACrB;AAAA,QACD;AAAA,QACA,SAAS;AAAA,QACT,aAAa;AAAA,MACd;AAAA,MACA;AAAA,QACC,aAAa;AAAA,QACb,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,QACT,aAAa;AAAA,MACd;AAAA,MACA;AAAA,QACC,aAAa;AAAA,QACb,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,QACT,aAAa;AAAA,MACd;AAAA,MACA;AAAA,QACC,aAAa;AAAA,QACb,MAAM;AAAA,QACN,MAAM;AAAA,QACN,gBAAgB;AAAA,UACf,MAAM;AAAA,YACL,cAAc,CAAC,OAAO,OAAO,MAAM;AAAA,UACpC;AAAA,QACD;AAAA,QACA,SAAS;AAAA,QACT,aAAa;AAAA,QACb,aAAa;AAAA,MACd;AAAA,IACD;AAAA,EACD;AACD;AAEA,MAAM,iBAAiB;AAAA,EACtB,MAAM;AAAA,IACL,WAAW;AAAA,EACZ;AACD;AAEO,MAAM,kBAAc,uCAAqB,gBAAgB,UAAU;AAE1E,eAAsB,QAErB,OACA,WACC;AACD,MAAI,aAAmC,CAAC;AAExC,QAAM,iBAAa,yCAAuB,MAAM,MAAM;AACtD,MAAI;AACH,UAAM,UAAU,KAAK,iBAAiB,WAAW,GAAG,CAAC,CAAC;AACtD,UAAM,qBAAqB,KAAK,iBAAiB,sBAAsB,GAAG,MAAM;AAEhF,UAAM,aAAa,MAAM,6CAA+B;AAAA,MACvD;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACD;AAEA,UAAM,UAA8B;AAAA,MACnC,MAAM,CAAC;AAAA,MACP,QAAQ;AAAA,QACP,CAAC,kBAAkB,GAAG;AAAA,MACvB;AAAA,MACA;AAAA,IACD;AAEA,iBAAa,CAAC,OAAO;AAAA,EACtB,SAAS,OAAO;AACf,QAAI,KAAK,eAAe,GAAG;AAC1B,iBAAW,KAAK;AAAA,QACf,MAAM;AAAA,UACL,OAAO,MAAM;AAAA,QACd;AAAA,QACA;AAAA,MACD,CAAC;AAAA,IACF,OAAO;AACN,YAAM,IAAI,uCAAmB,KAAK,QAAQ,GAAG,KAAK;AAAA,IACnD;AAAA,EACD;AAEA,SAAO;AACR;","names":[]}