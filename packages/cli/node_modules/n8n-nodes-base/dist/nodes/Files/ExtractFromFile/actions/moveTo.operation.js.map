{"version":3,"sources":["../../../../../nodes/Files/ExtractFromFile/actions/moveTo.operation.ts"],"sourcesContent":["import iconv from 'iconv-lite';\nimport get from 'lodash/get';\nimport set from 'lodash/set';\nimport unset from 'lodash/unset';\nimport type {\n\tIDataObject,\n\tIExecuteFunctions,\n\tINodeExecutionData,\n\tINodeProperties,\n} from 'n8n-workflow';\nimport { BINARY_ENCODING, NodeOperationError, deepCopy, jsonParse } from 'n8n-workflow';\nimport { icsCalendarToObject } from 'ts-ics';\n\nimport { encodeDecodeOptions } from '@utils/descriptions';\nimport { updateDisplayOptions } from '@utils/utilities';\n\nexport const properties: INodeProperties[] = [\n\t{\n\t\tdisplayName: 'Input Binary Field',\n\t\tname: 'binaryPropertyName',\n\t\ttype: 'string',\n\t\tdefault: 'data',\n\t\trequired: true,\n\t\tplaceholder: 'e.g data',\n\t\thint: 'The name of the input field containing the file data to be processed',\n\t},\n\t{\n\t\tdisplayName: 'Destination Output Field',\n\t\tname: 'destinationKey',\n\t\ttype: 'string',\n\t\tdefault: 'data',\n\t\trequired: true,\n\t\tplaceholder: 'e.g data',\n\t\tdescription: 'The name of the output field that will contain the extracted data',\n\t},\n\t{\n\t\tdisplayName: 'Options',\n\t\tname: 'options',\n\t\ttype: 'collection',\n\t\tplaceholder: 'Add option',\n\t\tdefault: {},\n\t\toptions: [\n\t\t\t{\n\t\t\t\tdisplayName: 'File Encoding',\n\t\t\t\tname: 'encoding',\n\t\t\t\ttype: 'options',\n\t\t\t\toptions: encodeDecodeOptions,\n\t\t\t\tdefault: 'utf8',\n\t\t\t\tdescription: 'Specify the encoding of the file, defaults to UTF-8',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Strip BOM',\n\t\t\t\tname: 'stripBOM',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tencoding: ['utf8', 'cesu8', 'ucs2'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\ttype: 'boolean',\n\t\t\t\tdefault: true,\n\t\t\t\tdescription:\n\t\t\t\t\t'Whether to strip the BOM (Byte Order Mark) from the file, this could help in an environment where the presence of the BOM is causing issues or inconsistencies',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Keep Source',\n\t\t\t\tname: 'keepSource',\n\t\t\t\ttype: 'options',\n\t\t\t\tdefault: 'json',\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'JSON',\n\t\t\t\t\t\tvalue: 'json',\n\t\t\t\t\t\tdescription: 'Include JSON data of the input item',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Binary',\n\t\t\t\t\t\tvalue: 'binary',\n\t\t\t\t\t\tdescription: 'Include binary data of the input item',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Both',\n\t\t\t\t\t\tvalue: 'both',\n\t\t\t\t\t\tdescription: 'Include both JSON and binary data of the input item',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t],\n\t},\n];\n\nconst displayOptions = {\n\tshow: {\n\t\toperation: ['binaryToPropery', 'fromJson', 'text', 'fromIcs', 'xml'],\n\t},\n};\n\nexport const description = updateDisplayOptions(displayOptions, properties);\n\nexport async function execute(\n\tthis: IExecuteFunctions,\n\titems: INodeExecutionData[],\n\toperation: string,\n) {\n\tconst returnData: INodeExecutionData[] = [];\n\n\tfor (let itemIndex = 0; itemIndex < items.length; itemIndex++) {\n\t\ttry {\n\t\t\tconst item = items[itemIndex];\n\t\t\tconst options = this.getNodeParameter('options', itemIndex);\n\t\t\tconst binaryPropertyName = this.getNodeParameter('binaryPropertyName', itemIndex);\n\n\t\t\tconst newItem: INodeExecutionData = {\n\t\t\t\tjson: {},\n\t\t\t\tpairedItem: { item: itemIndex },\n\t\t\t};\n\n\t\t\tconst value = get(item.binary, binaryPropertyName);\n\n\t\t\tif (!value) continue;\n\n\t\t\tconst buffer = await this.helpers.getBinaryDataBuffer(itemIndex, binaryPropertyName);\n\t\t\tconst encoding = (options.encoding as string) || this.helpers.detectBinaryEncoding(buffer);\n\n\t\t\tif (options.keepSource && options.keepSource !== 'binary') {\n\t\t\t\tnewItem.json = deepCopy(item.json);\n\t\t\t}\n\n\t\t\tlet convertedValue: string | IDataObject;\n\t\t\tif (operation !== 'binaryToPropery') {\n\t\t\t\tconvertedValue = iconv.decode(buffer, encoding, {\n\t\t\t\t\tstripBOM: options.stripBOM as boolean,\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tconvertedValue = Buffer.from(buffer).toString(BINARY_ENCODING);\n\t\t\t}\n\n\t\t\tif (operation === 'fromJson') {\n\t\t\t\tif (convertedValue === '') {\n\t\t\t\t\tconvertedValue = {};\n\t\t\t\t} else {\n\t\t\t\t\tconvertedValue = jsonParse(convertedValue);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (operation === 'fromIcs') {\n\t\t\t\tconvertedValue = icsCalendarToObject(convertedValue as string);\n\t\t\t}\n\n\t\t\tconst destinationKey = this.getNodeParameter('destinationKey', itemIndex, '') as string;\n\t\t\tset(newItem.json, destinationKey, convertedValue);\n\n\t\t\tif (options.keepSource === 'binary' || options.keepSource === 'both') {\n\t\t\t\tnewItem.binary = item.binary;\n\t\t\t} else {\n\t\t\t\t// this binary data would not be included, but there also might be other binary data\n\t\t\t\t// which should be included, copy it over and unset current binary data\n\t\t\t\tnewItem.binary = deepCopy(item.binary);\n\t\t\t\tunset(newItem.binary, binaryPropertyName);\n\t\t\t}\n\n\t\t\treturnData.push(newItem);\n\t\t} catch (error) {\n\t\t\tlet errorDescription;\n\t\t\tif (error.message.includes('Unexpected token')) {\n\t\t\t\terror.message = \"The file selected in 'Input Binary Field' is not in JSON format\";\n\t\t\t\terrorDescription =\n\t\t\t\t\t\"Try to change the operation or select a JSON file in 'Input Binary Field'\";\n\t\t\t}\n\t\t\tif (this.continueOnFail()) {\n\t\t\t\treturnData.push({\n\t\t\t\t\tjson: {\n\t\t\t\t\t\terror: error.message,\n\t\t\t\t\t},\n\t\t\t\t\tpairedItem: {\n\t\t\t\t\t\titem: itemIndex,\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tthrow new NodeOperationError(this.getNode(), error, {\n\t\t\t\titemIndex,\n\t\t\t\tdescription: errorDescription,\n\t\t\t});\n\t\t}\n\t}\n\n\treturn returnData;\n}\n"],"mappings":"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","names":["get","iconv","set","unset"]}