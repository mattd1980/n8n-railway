{"version":3,"sources":["../../../../../nodes/Files/ExtractFromFile/actions/spreadsheet.operation.ts"],"sourcesContent":["import type { IExecuteFunctions, INodeExecutionData, INodeProperties } from 'n8n-workflow';\n\nimport * as fromFile from '../../../SpreadsheetFile/v2/fromFile.operation';\n\nexport const operations = ['csv', 'html', 'rtf', 'ods', 'xls', 'xlsx'];\n\nexport const description: INodeProperties[] = fromFile.description\n\t.filter((property) => property.name !== 'fileFormat')\n\t.map((property) => {\n\t\tconst newProperty = { ...property };\n\t\tnewProperty.displayOptions = {\n\t\t\tshow: {\n\t\t\t\toperation: operations,\n\t\t\t},\n\t\t};\n\n\t\tif (newProperty.name === 'options') {\n\t\t\tnewProperty.options = (newProperty.options as INodeProperties[]).map((option) => {\n\t\t\t\tlet newOption = option;\n\t\t\t\tif (\n\t\t\t\t\t['delimiter', 'encoding', 'fromLine', 'maxRowCount', 'enableBOM', 'relaxQuotes'].includes(\n\t\t\t\t\t\toption.name,\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\tnewOption = { ...option, displayOptions: { show: { '/operation': ['csv'] } } };\n\t\t\t\t}\n\t\t\t\tif (option.name === 'sheetName') {\n\t\t\t\t\tnewOption = {\n\t\t\t\t\t\t...option,\n\t\t\t\t\t\tdisplayOptions: { show: { '/operation': ['ods', 'xls', 'xlsx'] } },\n\t\t\t\t\t\tdescription: 'Name of the sheet to read from in the spreadsheet',\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tif (option.name === 'range') {\n\t\t\t\t\tnewOption = {\n\t\t\t\t\t\t...option,\n\t\t\t\t\t\tdisplayOptions: { show: { '/operation': ['ods', 'xls', 'xlsx'] } },\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tif (['includeEmptyCells', 'headerRow'].includes(option.name)) {\n\t\t\t\t\tnewOption = {\n\t\t\t\t\t\t...option,\n\t\t\t\t\t\tdisplayOptions: { show: { '/operation': ['ods', 'xls', 'xlsx', 'csv', 'html'] } },\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\treturn newOption;\n\t\t\t});\n\t\t}\n\t\treturn newProperty;\n\t});\n\nexport async function execute(\n\tthis: IExecuteFunctions,\n\titems: INodeExecutionData[],\n\tfileFormatProperty: string,\n) {\n\tconst returnData: INodeExecutionData[] = await fromFile.execute.call(\n\t\tthis,\n\t\titems,\n\t\tfileFormatProperty,\n\t);\n\treturn returnData;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,eAA0B;AAEnB,MAAM,aAAa,CAAC,OAAO,QAAQ,OAAO,OAAO,OAAO,MAAM;AAE9D,MAAM,cAAiC,SAAS,YACrD,OAAO,CAAC,aAAa,SAAS,SAAS,YAAY,EACnD,IAAI,CAAC,aAAa;AAClB,QAAM,cAAc,EAAE,GAAG,SAAS;AAClC,cAAY,iBAAiB;AAAA,IAC5B,MAAM;AAAA,MACL,WAAW;AAAA,IACZ;AAAA,EACD;AAEA,MAAI,YAAY,SAAS,WAAW;AACnC,gBAAY,UAAW,YAAY,QAA8B,IAAI,CAAC,WAAW;AAChF,UAAI,YAAY;AAChB,UACC,CAAC,aAAa,YAAY,YAAY,eAAe,aAAa,aAAa,EAAE;AAAA,QAChF,OAAO;AAAA,MACR,GACC;AACD,oBAAY,EAAE,GAAG,QAAQ,gBAAgB,EAAE,MAAM,EAAE,cAAc,CAAC,KAAK,EAAE,EAAE,EAAE;AAAA,MAC9E;AACA,UAAI,OAAO,SAAS,aAAa;AAChC,oBAAY;AAAA,UACX,GAAG;AAAA,UACH,gBAAgB,EAAE,MAAM,EAAE,cAAc,CAAC,OAAO,OAAO,MAAM,EAAE,EAAE;AAAA,UACjE,aAAa;AAAA,QACd;AAAA,MACD;AACA,UAAI,OAAO,SAAS,SAAS;AAC5B,oBAAY;AAAA,UACX,GAAG;AAAA,UACH,gBAAgB,EAAE,MAAM,EAAE,cAAc,CAAC,OAAO,OAAO,MAAM,EAAE,EAAE;AAAA,QAClE;AAAA,MACD;AACA,UAAI,CAAC,qBAAqB,WAAW,EAAE,SAAS,OAAO,IAAI,GAAG;AAC7D,oBAAY;AAAA,UACX,GAAG;AAAA,UACH,gBAAgB,EAAE,MAAM,EAAE,cAAc,CAAC,OAAO,OAAO,QAAQ,OAAO,MAAM,EAAE,EAAE;AAAA,QACjF;AAAA,MACD;AACA,aAAO;AAAA,IACR,CAAC;AAAA,EACF;AACA,SAAO;AACR,CAAC;AAEF,eAAsB,QAErB,OACA,oBACC;AACD,QAAM,aAAmC,MAAM,SAAS,QAAQ;AAAA,IAC/D;AAAA,IACA;AAAA,IACA;AAAA,EACD;AACA,SAAO;AACR;","names":[]}