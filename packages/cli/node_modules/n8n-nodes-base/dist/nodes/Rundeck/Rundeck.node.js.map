{"version":3,"sources":["../../../nodes/Rundeck/Rundeck.node.ts"],"sourcesContent":["import type {\n\tIExecuteFunctions,\n\tIDataObject,\n\tINodeExecutionData,\n\tINodeType,\n\tINodeTypeDescription,\n} from 'n8n-workflow';\nimport { NodeConnectionTypes, NodeOperationError } from 'n8n-workflow';\n\nimport { RundeckApi } from './RundeckApi';\n\nexport class Rundeck implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'Rundeck',\n\t\tname: 'rundeck',\n\t\t// eslint-disable-next-line n8n-nodes-base/node-class-description-icon-not-svg\n\t\ticon: 'file:rundeck.png',\n\t\tgroup: ['transform'],\n\t\tversion: 1,\n\t\tsubtitle: '={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}',\n\t\tdescription: 'Manage Rundeck API',\n\t\tdefaults: {\n\t\t\tname: 'Rundeck',\n\t\t},\n\t\tusableAsTool: true,\n\t\tinputs: [NodeConnectionTypes.Main],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tcredentials: [\n\t\t\t{\n\t\t\t\tname: 'rundeckApi',\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Resource',\n\t\t\t\tname: 'resource',\n\t\t\t\ttype: 'options',\n\t\t\t\tnoDataExpression: true,\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Job',\n\t\t\t\t\t\tvalue: 'job',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'job',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Operation',\n\t\t\t\tname: 'operation',\n\t\t\t\ttype: 'options',\n\t\t\t\tnoDataExpression: true,\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Execute',\n\t\t\t\t\t\tvalue: 'execute',\n\t\t\t\t\t\tdescription: 'Execute a job',\n\t\t\t\t\t\taction: 'Execute a job',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Get Metadata',\n\t\t\t\t\t\tvalue: 'getMetadata',\n\t\t\t\t\t\tdescription: 'Get metadata of a job',\n\t\t\t\t\t\taction: 'Get metadata of a job',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'execute',\n\t\t\t},\n\n\t\t\t// ----------------------------------\n\t\t\t//         job:execute\n\t\t\t// ----------------------------------\n\t\t\t{\n\t\t\t\tdisplayName: 'Job ID',\n\t\t\t\tname: 'jobid',\n\t\t\t\ttype: 'string',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['execute'],\n\t\t\t\t\t\tresource: ['job'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdefault: '',\n\t\t\t\tplaceholder: 'Rundeck Job ID',\n\t\t\t\trequired: true,\n\t\t\t\tdescription: 'The job ID to execute',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Arguments',\n\t\t\t\tname: 'arguments',\n\t\t\t\tplaceholder: 'Add Argument',\n\t\t\t\ttype: 'fixedCollection',\n\t\t\t\ttypeOptions: {\n\t\t\t\t\tmultipleValues: true,\n\t\t\t\t},\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['execute'],\n\t\t\t\t\t\tresource: ['job'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdefault: {},\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'arguments',\n\t\t\t\t\t\tdisplayName: 'Arguments',\n\t\t\t\t\t\tvalues: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdisplayName: 'Name',\n\t\t\t\t\t\t\t\tname: 'name',\n\t\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdisplayName: 'Value',\n\t\t\t\t\t\t\t\tname: 'value',\n\t\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Filter',\n\t\t\t\tname: 'filter',\n\t\t\t\ttype: 'string',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['execute'],\n\t\t\t\t\t\tresource: ['job'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdefault: '',\n\t\t\t\tplaceholder: 'Add Filters',\n\t\t\t\tdescription: 'Filter Rundeck nodes by name',\n\t\t\t},\n\n\t\t\t// ----------------------------------\n\t\t\t//         job:getMetadata\n\t\t\t// ----------------------------------\n\t\t\t{\n\t\t\t\tdisplayName: 'Job ID',\n\t\t\t\tname: 'jobid',\n\t\t\t\ttype: 'string',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['getMetadata'],\n\t\t\t\t\t\tresource: ['job'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdefault: '',\n\t\t\t\tplaceholder: 'Rundeck Job ID',\n\t\t\t\trequired: true,\n\t\t\t\tdescription: 'The job ID to get metadata off',\n\t\t\t},\n\t\t],\n\t};\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t\t// Input data\n\t\tconst items = this.getInputData();\n\t\tconst returnData: IDataObject[] = [];\n\t\tconst length = items.length;\n\n\t\tconst operation = this.getNodeParameter('operation', 0);\n\t\tconst resource = this.getNodeParameter('resource', 0);\n\t\tconst rundeckApi = new RundeckApi(this);\n\t\tawait rundeckApi.init();\n\n\t\tfor (let i = 0; i < length; i++) {\n\t\t\tif (resource === 'job') {\n\t\t\t\tif (operation === 'execute') {\n\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t//         job: execute\n\t\t\t\t\t// ----------------------------------\n\t\t\t\t\tconst jobid = this.getNodeParameter('jobid', i) as string;\n\t\t\t\t\tconst rundeckArguments = (this.getNodeParameter('arguments', i) as IDataObject)\n\t\t\t\t\t\t.arguments as IDataObject[];\n\t\t\t\t\tconst filter = this.getNodeParameter('filter', i) as string;\n\t\t\t\t\tconst response = await rundeckApi.executeJob(jobid, rundeckArguments, filter);\n\n\t\t\t\t\treturnData.push(response);\n\t\t\t\t} else if (operation === 'getMetadata') {\n\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t//         job: getMetadata\n\t\t\t\t\t// ----------------------------------\n\t\t\t\t\tconst jobid = this.getNodeParameter('jobid', i) as string;\n\t\t\t\t\tconst response = await rundeckApi.getJobMetadata(jobid);\n\n\t\t\t\t\treturnData.push(response);\n\t\t\t\t} else {\n\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t`The operation \"${operation}\" is not supported!`,\n\t\t\t\t\t\t{ itemIndex: i },\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t`The resource \"${resource}\" is not supported!`,\n\t\t\t\t\t{ itemIndex: i },\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\treturn [this.helpers.returnJsonArray(returnData)];\n\t}\n}\n"],"mappings":"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","names":[]}