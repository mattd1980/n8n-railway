{"version":3,"sources":["../../../nodes/Metabase/QuestionsDescription.ts"],"sourcesContent":["import type { IDataObject, INodeProperties } from 'n8n-workflow';\nimport { jsonParse } from 'n8n-workflow';\n\nexport const questionsOperations: INodeProperties[] = [\n\t{\n\t\tdisplayName: 'Operation',\n\t\tname: 'operation',\n\t\ttype: 'options',\n\t\tnoDataExpression: true,\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tresource: ['questions'],\n\t\t\t},\n\t\t},\n\t\toptions: [\n\t\t\t{\n\t\t\t\tname: 'Get',\n\t\t\t\tvalue: 'get',\n\t\t\t\tdescription: 'Get a specific question',\n\t\t\t\trouting: {\n\t\t\t\t\trequest: {\n\t\t\t\t\t\tmethod: 'GET',\n\t\t\t\t\t\turl: '={{\"/api/card/\" + $parameter.questionId}}',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\taction: 'Get a questions',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Get Many',\n\t\t\t\tvalue: 'getAll',\n\t\t\t\tdescription: 'Get many questions',\n\t\t\t\trouting: {\n\t\t\t\t\trequest: {\n\t\t\t\t\t\tmethod: 'GET',\n\t\t\t\t\t\turl: '/api/card/',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\taction: 'Get many questions',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Result Data',\n\t\t\t\tvalue: 'resultData',\n\t\t\t\tdescription: 'Return the result of the question to a specific file format',\n\t\t\t\trouting: {\n\t\t\t\t\trequest: {\n\t\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\t\turl: '={{\"/api/card/\" + $parameter.questionId + \"/query/\" + $parameter.format}}',\n\t\t\t\t\t\treturnFullResponse: true,\n\t\t\t\t\t\tencoding: 'arraybuffer',\n\t\t\t\t\t},\n\t\t\t\t\toutput: {\n\t\t\t\t\t\tpostReceive: [\n\t\t\t\t\t\t\tasync function (this, items, responseData) {\n\t\t\t\t\t\t\t\tconst datatype = this.getNodeParameter('format') as string;\n\n\t\t\t\t\t\t\t\tif (datatype !== 'json') {\n\t\t\t\t\t\t\t\t\tconst binaryData = await this.helpers.prepareBinaryData(\n\t\t\t\t\t\t\t\t\t\tresponseData.body as Buffer,\n\t\t\t\t\t\t\t\t\t\t'data',\n\t\t\t\t\t\t\t\t\t\tresponseData.headers['content-type'] as string,\n\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t// Transform items\n\t\t\t\t\t\t\t\t\titems = items.map((item) => {\n\t\t\t\t\t\t\t\t\t\titem.json = {};\n\t\t\t\t\t\t\t\t\t\titem.binary = { ['data']: binaryData };\n\t\t\t\t\t\t\t\t\t\treturn item;\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tconst results = jsonParse<IDataObject[]>(responseData.body as unknown as string);\n\t\t\t\t\t\t\t\t\titems = results.map((result) => {\n\t\t\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\t\t\tjson: {\n\t\t\t\t\t\t\t\t\t\t\t\t...result,\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\treturn items;\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\taction: 'Get the results from a question',\n\t\t\t},\n\t\t],\n\t\tdefault: 'getAll',\n\t},\n];\n\nexport const questionsFields: INodeProperties[] = [\n\t{\n\t\tdisplayName: 'Question ID',\n\t\tname: 'questionId',\n\t\ttype: 'string',\n\t\trequired: true,\n\t\tplaceholder: '0',\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tresource: ['questions'],\n\t\t\t\toperation: ['get', 'resultData'],\n\t\t\t},\n\t\t},\n\t\tdefault: '',\n\t},\n\t{\n\t\tdisplayName: 'Format',\n\t\tname: 'format',\n\t\ttype: 'options',\n\t\trequired: true,\n\t\toptions: [\n\t\t\t{\n\t\t\t\tname: 'CSV',\n\t\t\t\tvalue: 'csv',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'JSON',\n\t\t\t\tvalue: 'json',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'XLSX',\n\t\t\t\tvalue: 'xlsx',\n\t\t\t},\n\t\t],\n\t\tdefault: 'csv',\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tresource: ['questions'],\n\t\t\t\toperation: ['resultData'],\n\t\t\t},\n\t\t},\n\t},\n];\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,0BAA0B;AAEnB,MAAM,sBAAyC;AAAA,EACrD;AAAA,IACC,aAAa;AAAA,IACb,MAAM;AAAA,IACN,MAAM;AAAA,IACN,kBAAkB;AAAA,IAClB,gBAAgB;AAAA,MACf,MAAM;AAAA,QACL,UAAU,CAAC,WAAW;AAAA,MACvB;AAAA,IACD;AAAA,IACA,SAAS;AAAA,MACR;AAAA,QACC,MAAM;AAAA,QACN,OAAO;AAAA,QACP,aAAa;AAAA,QACb,SAAS;AAAA,UACR,SAAS;AAAA,YACR,QAAQ;AAAA,YACR,KAAK;AAAA,UACN;AAAA,QACD;AAAA,QACA,QAAQ;AAAA,MACT;AAAA,MACA;AAAA,QACC,MAAM;AAAA,QACN,OAAO;AAAA,QACP,aAAa;AAAA,QACb,SAAS;AAAA,UACR,SAAS;AAAA,YACR,QAAQ;AAAA,YACR,KAAK;AAAA,UACN;AAAA,QACD;AAAA,QACA,QAAQ;AAAA,MACT;AAAA,MACA;AAAA,QACC,MAAM;AAAA,QACN,OAAO;AAAA,QACP,aAAa;AAAA,QACb,SAAS;AAAA,UACR,SAAS;AAAA,YACR,QAAQ;AAAA,YACR,KAAK;AAAA,YACL,oBAAoB;AAAA,YACpB,UAAU;AAAA,UACX;AAAA,UACA,QAAQ;AAAA,YACP,aAAa;AAAA,cACZ,eAAsB,OAAO,cAAc;AAC1C,sBAAM,WAAW,KAAK,iBAAiB,QAAQ;AAE/C,oBAAI,aAAa,QAAQ;AACxB,wBAAM,aAAa,MAAM,KAAK,QAAQ;AAAA,oBACrC,aAAa;AAAA,oBACb;AAAA,oBACA,aAAa,QAAQ,cAAc;AAAA,kBACpC;AAGA,0BAAQ,MAAM,IAAI,CAAC,SAAS;AAC3B,yBAAK,OAAO,CAAC;AACb,yBAAK,SAAS,EAAE,CAAC,MAAM,GAAG,WAAW;AACrC,2BAAO;AAAA,kBACR,CAAC;AAAA,gBACF,OAAO;AACN,wBAAM,cAAU,+BAAyB,aAAa,IAAyB;AAC/E,0BAAQ,QAAQ,IAAI,CAAC,WAAW;AAC/B,2BAAO;AAAA,sBACN,MAAM;AAAA,wBACL,GAAG;AAAA,sBACJ;AAAA,oBACD;AAAA,kBACD,CAAC;AAAA,gBACF;AACA,uBAAO;AAAA,cACR;AAAA,YACD;AAAA,UACD;AAAA,QACD;AAAA,QACA,QAAQ;AAAA,MACT;AAAA,IACD;AAAA,IACA,SAAS;AAAA,EACV;AACD;AAEO,MAAM,kBAAqC;AAAA,EACjD;AAAA,IACC,aAAa;AAAA,IACb,MAAM;AAAA,IACN,MAAM;AAAA,IACN,UAAU;AAAA,IACV,aAAa;AAAA,IACb,gBAAgB;AAAA,MACf,MAAM;AAAA,QACL,UAAU,CAAC,WAAW;AAAA,QACtB,WAAW,CAAC,OAAO,YAAY;AAAA,MAChC;AAAA,IACD;AAAA,IACA,SAAS;AAAA,EACV;AAAA,EACA;AAAA,IACC,aAAa;AAAA,IACb,MAAM;AAAA,IACN,MAAM;AAAA,IACN,UAAU;AAAA,IACV,SAAS;AAAA,MACR;AAAA,QACC,MAAM;AAAA,QACN,OAAO;AAAA,MACR;AAAA,MACA;AAAA,QACC,MAAM;AAAA,QACN,OAAO;AAAA,MACR;AAAA,MACA;AAAA,QACC,MAAM;AAAA,QACN,OAAO;AAAA,MACR;AAAA,IACD;AAAA,IACA,SAAS;AAAA,IACT,gBAAgB;AAAA,MACf,MAAM;AAAA,QACL,UAAU,CAAC,WAAW;AAAA,QACtB,WAAW,CAAC,YAAY;AAAA,MACzB;AAAA,IACD;AAAA,EACD;AACD;","names":[]}