{"version":3,"sources":["../../../nodes/Redis/Redis.node.ts"],"sourcesContent":["import set from 'lodash/set';\nimport type {\n\tIExecuteFunctions,\n\tINodeExecutionData,\n\tINodeType,\n\tINodeTypeDescription,\n} from 'n8n-workflow';\nimport { NodeConnectionTypes, NodeOperationError } from 'n8n-workflow';\n\nimport type { RedisCredential } from './types';\nimport {\n\tsetupRedisClient,\n\tredisConnectionTest,\n\tconvertInfoToObject,\n\tgetValue,\n\tsetValue,\n} from './utils';\n\nexport class Redis implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'Redis',\n\t\tname: 'redis',\n\t\ticon: 'file:redis.svg',\n\t\tgroup: ['input'],\n\t\tversion: 1,\n\t\tdescription: 'Get, send and update data in Redis',\n\t\tdefaults: {\n\t\t\tname: 'Redis',\n\t\t},\n\t\tinputs: [NodeConnectionTypes.Main],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tusableAsTool: true,\n\t\tcredentials: [\n\t\t\t{\n\t\t\t\tname: 'redis',\n\t\t\t\trequired: true,\n\t\t\t\ttestedBy: 'redisConnectionTest',\n\t\t\t},\n\t\t],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Operation',\n\t\t\t\tname: 'operation',\n\t\t\t\ttype: 'options',\n\t\t\t\tnoDataExpression: true,\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Delete',\n\t\t\t\t\t\tvalue: 'delete',\n\t\t\t\t\t\tdescription: 'Delete a key from Redis',\n\t\t\t\t\t\taction: 'Delete a key from Redis',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Get',\n\t\t\t\t\t\tvalue: 'get',\n\t\t\t\t\t\tdescription: 'Get the value of a key from Redis',\n\t\t\t\t\t\taction: 'Get the value of a key from Redis',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Increment',\n\t\t\t\t\t\tvalue: 'incr',\n\t\t\t\t\t\tdescription: 'Atomically increments a key by 1. Creates the key if it does not exist.',\n\t\t\t\t\t\taction: 'Atomically increment a key by 1. Creates the key if it does not exist.',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Info',\n\t\t\t\t\t\tvalue: 'info',\n\t\t\t\t\t\tdescription: 'Returns generic information about the Redis instance',\n\t\t\t\t\t\taction: 'Return generic information about the Redis instance',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Keys',\n\t\t\t\t\t\tvalue: 'keys',\n\t\t\t\t\t\tdescription: 'Returns all the keys matching a pattern',\n\t\t\t\t\t\taction: 'Return all keys matching a pattern',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Pop',\n\t\t\t\t\t\tvalue: 'pop',\n\t\t\t\t\t\tdescription: 'Pop data from a redis list',\n\t\t\t\t\t\taction: 'Pop data from a redis list',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Publish',\n\t\t\t\t\t\tvalue: 'publish',\n\t\t\t\t\t\tdescription: 'Publish message to redis channel',\n\t\t\t\t\t\taction: 'Publish message to redis channel',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Push',\n\t\t\t\t\t\tvalue: 'push',\n\t\t\t\t\t\tdescription: 'Push data to a redis list',\n\t\t\t\t\t\taction: 'Push data to a redis list',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Set',\n\t\t\t\t\t\tvalue: 'set',\n\t\t\t\t\t\tdescription: 'Set the value of a key in redis',\n\t\t\t\t\t\taction: 'Set the value of a key in redis',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'info',\n\t\t\t},\n\n\t\t\t// ----------------------------------\n\t\t\t//         delete\n\t\t\t// ----------------------------------\n\t\t\t{\n\t\t\t\tdisplayName: 'Key',\n\t\t\t\tname: 'key',\n\t\t\t\ttype: 'string',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['delete'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdefault: '',\n\t\t\t\trequired: true,\n\t\t\t\tdescription: 'Name of the key to delete from Redis',\n\t\t\t},\n\n\t\t\t// ----------------------------------\n\t\t\t//         get\n\t\t\t// ----------------------------------\n\t\t\t{\n\t\t\t\tdisplayName: 'Name',\n\t\t\t\tname: 'propertyName',\n\t\t\t\ttype: 'string',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['get'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdefault: 'propertyName',\n\t\t\t\trequired: true,\n\t\t\t\tdescription:\n\t\t\t\t\t'Name of the property to write received data to. Supports dot-notation. Example: \"data.person[0].name\".',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Key',\n\t\t\t\tname: 'key',\n\t\t\t\ttype: 'string',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['get'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdefault: '',\n\t\t\t\trequired: true,\n\t\t\t\tdescription: 'Name of the key to get from Redis',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Key Type',\n\t\t\t\tname: 'keyType',\n\t\t\t\ttype: 'options',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['get'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Automatic',\n\t\t\t\t\t\tvalue: 'automatic',\n\t\t\t\t\t\tdescription: 'Requests the type before requesting the data (slower)',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Hash',\n\t\t\t\t\t\tvalue: 'hash',\n\t\t\t\t\t\tdescription: \"Data in key is of type 'hash'\",\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'List',\n\t\t\t\t\t\tvalue: 'list',\n\t\t\t\t\t\tdescription: \"Data in key is of type 'lists'\",\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Sets',\n\t\t\t\t\t\tvalue: 'sets',\n\t\t\t\t\t\tdescription: \"Data in key is of type 'sets'\",\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'String',\n\t\t\t\t\t\tvalue: 'string',\n\t\t\t\t\t\tdescription: \"Data in key is of type 'string'\",\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'automatic',\n\t\t\t\tdescription: 'The type of the key to get',\n\t\t\t},\n\n\t\t\t{\n\t\t\t\tdisplayName: 'Options',\n\t\t\t\tname: 'options',\n\t\t\t\ttype: 'collection',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['get'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tplaceholder: 'Add option',\n\t\t\t\tdefault: {},\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Dot Notation',\n\t\t\t\t\t\tname: 'dotNotation',\n\t\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\t\tdefault: true,\n\t\t\t\t\t\t// eslint-disable-next-line n8n-nodes-base/node-param-description-boolean-without-whether\n\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t'<p>By default, dot-notation is used in property names. This means that \"a.b\" will set the property \"b\" underneath \"a\" so { \"a\": { \"b\": value} }.<p></p>If that is not intended this can be deactivated, it will then set { \"a.b\": value } instead.</p>.',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\n\t\t\t// ----------------------------------\n\t\t\t//         incr\n\t\t\t// ----------------------------------\n\t\t\t{\n\t\t\t\tdisplayName: 'Key',\n\t\t\t\tname: 'key',\n\t\t\t\ttype: 'string',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['incr'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdefault: '',\n\t\t\t\trequired: true,\n\t\t\t\tdescription: 'Name of the key to increment',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Expire',\n\t\t\t\tname: 'expire',\n\t\t\t\ttype: 'boolean',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['incr'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdefault: false,\n\t\t\t\tdescription: 'Whether to set a timeout on key',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'TTL',\n\t\t\t\tname: 'ttl',\n\t\t\t\ttype: 'number',\n\t\t\t\ttypeOptions: {\n\t\t\t\t\tminValue: 1,\n\t\t\t\t},\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['incr'],\n\t\t\t\t\t\texpire: [true],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdefault: 60,\n\t\t\t\tdescription: 'Number of seconds before key expiration',\n\t\t\t},\n\n\t\t\t// ----------------------------------\n\t\t\t//         keys\n\t\t\t// ----------------------------------\n\t\t\t{\n\t\t\t\tdisplayName: 'Key Pattern',\n\t\t\t\tname: 'keyPattern',\n\t\t\t\ttype: 'string',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['keys'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdefault: '',\n\t\t\t\trequired: true,\n\t\t\t\tdescription: 'The key pattern for the keys to return',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Get Values',\n\t\t\t\tname: 'getValues',\n\t\t\t\ttype: 'boolean',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['keys'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdefault: true,\n\t\t\t\tdescription: 'Whether to get the value of matching keys',\n\t\t\t},\n\t\t\t// ----------------------------------\n\t\t\t//         set\n\t\t\t// ----------------------------------\n\t\t\t{\n\t\t\t\tdisplayName: 'Key',\n\t\t\t\tname: 'key',\n\t\t\t\ttype: 'string',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['set'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdefault: '',\n\t\t\t\trequired: true,\n\t\t\t\tdescription: 'Name of the key to set in Redis',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Value',\n\t\t\t\tname: 'value',\n\t\t\t\ttype: 'string',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['set'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdefault: '',\n\t\t\t\tdescription: 'The value to write in Redis',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Key Type',\n\t\t\t\tname: 'keyType',\n\t\t\t\ttype: 'options',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['set'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Automatic',\n\t\t\t\t\t\tvalue: 'automatic',\n\t\t\t\t\t\tdescription: 'Tries to figure out the type automatically depending on the data',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Hash',\n\t\t\t\t\t\tvalue: 'hash',\n\t\t\t\t\t\tdescription: \"Data in key is of type 'hash'\",\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'List',\n\t\t\t\t\t\tvalue: 'list',\n\t\t\t\t\t\tdescription: \"Data in key is of type 'lists'\",\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Sets',\n\t\t\t\t\t\tvalue: 'sets',\n\t\t\t\t\t\tdescription: \"Data in key is of type 'sets'\",\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'String',\n\t\t\t\t\t\tvalue: 'string',\n\t\t\t\t\t\tdescription: \"Data in key is of type 'string'\",\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'automatic',\n\t\t\t\tdescription: 'The type of the key to set',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Value Is JSON',\n\t\t\t\tname: 'valueIsJSON',\n\t\t\t\ttype: 'boolean',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tkeyType: ['hash'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdefault: true,\n\t\t\t\tdescription: 'Whether the value is JSON or key value pairs',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Expire',\n\t\t\t\tname: 'expire',\n\t\t\t\ttype: 'boolean',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['set'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdefault: false,\n\t\t\t\tdescription: 'Whether to set a timeout on key',\n\t\t\t},\n\n\t\t\t{\n\t\t\t\tdisplayName: 'TTL',\n\t\t\t\tname: 'ttl',\n\t\t\t\ttype: 'number',\n\t\t\t\ttypeOptions: {\n\t\t\t\t\tminValue: 1,\n\t\t\t\t},\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['set'],\n\t\t\t\t\t\texpire: [true],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdefault: 60,\n\t\t\t\tdescription: 'Number of seconds before key expiration',\n\t\t\t},\n\t\t\t// ----------------------------------\n\t\t\t//         publish\n\t\t\t// ----------------------------------\n\t\t\t{\n\t\t\t\tdisplayName: 'Channel',\n\t\t\t\tname: 'channel',\n\t\t\t\ttype: 'string',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['publish'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdefault: '',\n\t\t\t\trequired: true,\n\t\t\t\tdescription: 'Channel name',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Data',\n\t\t\t\tname: 'messageData',\n\t\t\t\ttype: 'string',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['publish'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdefault: '',\n\t\t\t\trequired: true,\n\t\t\t\tdescription: 'Data to publish',\n\t\t\t},\n\t\t\t// ----------------------------------\n\t\t\t//         push/pop\n\t\t\t// ----------------------------------\n\t\t\t{\n\t\t\t\tdisplayName: 'List',\n\t\t\t\tname: 'list',\n\t\t\t\ttype: 'string',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['push', 'pop'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdefault: '',\n\t\t\t\trequired: true,\n\t\t\t\tdescription: 'Name of the list in Redis',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Data',\n\t\t\t\tname: 'messageData',\n\t\t\t\ttype: 'string',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['push'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdefault: '',\n\t\t\t\trequired: true,\n\t\t\t\tdescription: 'Data to push',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Tail',\n\t\t\t\tname: 'tail',\n\t\t\t\ttype: 'boolean',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['push', 'pop'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdefault: false,\n\t\t\t\tdescription: 'Whether to push or pop data from the end of the list',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Name',\n\t\t\t\tname: 'propertyName',\n\t\t\t\ttype: 'string',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['pop'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdefault: 'propertyName',\n\t\t\t\tdescription:\n\t\t\t\t\t'Optional name of the property to write received data to. Supports dot-notation. Example: \"data.person[0].name\".',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Options',\n\t\t\t\tname: 'options',\n\t\t\t\ttype: 'collection',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['pop'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tplaceholder: 'Add option',\n\t\t\t\tdefault: {},\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Dot Notation',\n\t\t\t\t\t\tname: 'dotNotation',\n\t\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\t\tdefault: true,\n\t\t\t\t\t\t// eslint-disable-next-line n8n-nodes-base/node-param-description-boolean-without-whether\n\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t'<p>By default, dot-notation is used in property names. This means that \"a.b\" will set the property \"b\" underneath \"a\" so { \"a\": { \"b\": value} }.<p></p>If that is not intended this can be deactivated, it will then set { \"a.b\": value } instead.</p>.',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t],\n\t};\n\n\tmethods = {\n\t\tcredentialTest: { redisConnectionTest },\n\t};\n\n\tasync execute(this: IExecuteFunctions) {\n\t\t// TODO: For array and object fields it should not have a \"value\" field it should\n\t\t//       have a parameter field for a path. Because it is not possible to set\n\t\t//       array, object via parameter directly (should maybe be possible?!?!)\n\t\t//       Should maybe have a parameter which is JSON.\n\t\tconst credentials = await this.getCredentials<RedisCredential>('redis');\n\n\t\tconst client = setupRedisClient(credentials);\n\t\tawait client.connect();\n\t\tawait client.ping();\n\n\t\tconst operation = this.getNodeParameter('operation', 0);\n\t\tconst returnItems: INodeExecutionData[] = [];\n\n\t\tif (operation === 'info') {\n\t\t\ttry {\n\t\t\t\tconst result = await client.info();\n\t\t\t\treturnItems.push({ json: convertInfoToObject(result) });\n\t\t\t} catch (error) {\n\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\treturnItems.push({\n\t\t\t\t\t\tjson: {\n\t\t\t\t\t\t\terror: error.message,\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tawait client.quit();\n\t\t\t\t\tthrow new NodeOperationError(this.getNode(), error);\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (\n\t\t\t['delete', 'get', 'keys', 'set', 'incr', 'publish', 'push', 'pop'].includes(operation)\n\t\t) {\n\t\t\tconst items = this.getInputData();\n\n\t\t\tlet item: INodeExecutionData;\n\t\t\tfor (let itemIndex = 0; itemIndex < items.length; itemIndex++) {\n\t\t\t\ttry {\n\t\t\t\t\titem = { json: {}, pairedItem: { item: itemIndex } };\n\n\t\t\t\t\tif (operation === 'delete') {\n\t\t\t\t\t\tconst keyDelete = this.getNodeParameter('key', itemIndex) as string;\n\n\t\t\t\t\t\tawait client.del(keyDelete);\n\t\t\t\t\t\treturnItems.push(items[itemIndex]);\n\t\t\t\t\t} else if (operation === 'get') {\n\t\t\t\t\t\tconst propertyName = this.getNodeParameter('propertyName', itemIndex) as string;\n\t\t\t\t\t\tconst keyGet = this.getNodeParameter('key', itemIndex) as string;\n\t\t\t\t\t\tconst keyType = this.getNodeParameter('keyType', itemIndex) as string;\n\n\t\t\t\t\t\tconst value = (await getValue(client, keyGet, keyType)) ?? null;\n\n\t\t\t\t\t\tconst options = this.getNodeParameter('options', itemIndex, {});\n\n\t\t\t\t\t\tif (options.dotNotation === false) {\n\t\t\t\t\t\t\titem.json[propertyName] = value;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tset(item.json, propertyName, value);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturnItems.push(item);\n\t\t\t\t\t} else if (operation === 'keys') {\n\t\t\t\t\t\tconst keyPattern = this.getNodeParameter('keyPattern', itemIndex) as string;\n\t\t\t\t\t\tconst getValues = this.getNodeParameter('getValues', itemIndex, true) as boolean;\n\n\t\t\t\t\t\tconst keys = await client.keys(keyPattern);\n\n\t\t\t\t\t\tif (!getValues) {\n\t\t\t\t\t\t\treturnItems.push({ json: { keys } });\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfor (const keyName of keys) {\n\t\t\t\t\t\t\titem.json[keyName] = await getValue(client, keyName);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturnItems.push(item);\n\t\t\t\t\t} else if (operation === 'set') {\n\t\t\t\t\t\tconst keySet = this.getNodeParameter('key', itemIndex) as string;\n\t\t\t\t\t\tconst value = this.getNodeParameter('value', itemIndex) as string;\n\t\t\t\t\t\tconst keyType = this.getNodeParameter('keyType', itemIndex) as string;\n\t\t\t\t\t\tconst valueIsJSON = this.getNodeParameter('valueIsJSON', itemIndex, true) as boolean;\n\t\t\t\t\t\tconst expire = this.getNodeParameter('expire', itemIndex, false) as boolean;\n\t\t\t\t\t\tconst ttl = this.getNodeParameter('ttl', itemIndex, -1) as number;\n\n\t\t\t\t\t\tawait setValue.call(this, client, keySet, value, expire, ttl, keyType, valueIsJSON);\n\t\t\t\t\t\treturnItems.push(items[itemIndex]);\n\t\t\t\t\t} else if (operation === 'incr') {\n\t\t\t\t\t\tconst keyIncr = this.getNodeParameter('key', itemIndex) as string;\n\t\t\t\t\t\tconst expire = this.getNodeParameter('expire', itemIndex, false) as boolean;\n\t\t\t\t\t\tconst ttl = this.getNodeParameter('ttl', itemIndex, -1) as number;\n\t\t\t\t\t\tconst incrementVal = await client.incr(keyIncr);\n\t\t\t\t\t\tif (expire && ttl > 0) {\n\t\t\t\t\t\t\tawait client.expire(keyIncr, ttl);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturnItems.push({ json: { [keyIncr]: incrementVal } });\n\t\t\t\t\t} else if (operation === 'publish') {\n\t\t\t\t\t\tconst channel = this.getNodeParameter('channel', itemIndex) as string;\n\t\t\t\t\t\tconst messageData = this.getNodeParameter('messageData', itemIndex) as string;\n\t\t\t\t\t\tawait client.publish(channel, messageData);\n\t\t\t\t\t\treturnItems.push(items[itemIndex]);\n\t\t\t\t\t} else if (operation === 'push') {\n\t\t\t\t\t\tconst redisList = this.getNodeParameter('list', itemIndex) as string;\n\t\t\t\t\t\tconst messageData = this.getNodeParameter('messageData', itemIndex) as string;\n\t\t\t\t\t\tconst tail = this.getNodeParameter('tail', itemIndex, false) as boolean;\n\t\t\t\t\t\tawait client[tail ? 'rPush' : 'lPush'](redisList, messageData);\n\t\t\t\t\t\treturnItems.push(items[itemIndex]);\n\t\t\t\t\t} else if (operation === 'pop') {\n\t\t\t\t\t\tconst redisList = this.getNodeParameter('list', itemIndex) as string;\n\t\t\t\t\t\tconst tail = this.getNodeParameter('tail', itemIndex, false) as boolean;\n\t\t\t\t\t\tconst propertyName = this.getNodeParameter(\n\t\t\t\t\t\t\t'propertyName',\n\t\t\t\t\t\t\titemIndex,\n\t\t\t\t\t\t\t'propertyName',\n\t\t\t\t\t\t) as string;\n\n\t\t\t\t\t\tconst value = await client[tail ? 'rPop' : 'lPop'](redisList);\n\n\t\t\t\t\t\tlet outputValue;\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\toutputValue = value && JSON.parse(value);\n\t\t\t\t\t\t} catch {\n\t\t\t\t\t\t\toutputValue = value;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst options = this.getNodeParameter('options', itemIndex, {});\n\t\t\t\t\t\tif (options.dotNotation === false) {\n\t\t\t\t\t\t\titem.json[propertyName] = outputValue;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tset(item.json, propertyName, outputValue);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturnItems.push(item);\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\t\treturnItems.push({\n\t\t\t\t\t\t\tjson: {\n\t\t\t\t\t\t\t\terror: error.message,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tpairedItem: {\n\t\t\t\t\t\t\t\titem: itemIndex,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t});\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tawait client.quit();\n\t\t\t\t\tthrow new NodeOperationError(this.getNode(), error, { itemIndex });\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tawait client.quit();\n\t\treturn [returnItems];\n\t}\n}\n"],"mappings":"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","names":["set"]}