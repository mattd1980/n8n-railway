{"version":3,"sources":["../../../../../nodes/MySql/v2/methods/listSearch.ts"],"sourcesContent":["import type { IDataObject, ILoadOptionsFunctions, INodeListSearchResult } from 'n8n-workflow';\n\nimport type { MysqlNodeCredentials } from '../helpers/interfaces';\nimport { createPool } from '../transport';\n\nexport async function searchTables(this: ILoadOptionsFunctions): Promise<INodeListSearchResult> {\n\tconst credentials = await this.getCredentials<MysqlNodeCredentials>('mySql');\n\n\tconst nodeOptions = this.getNodeParameter('options', 0) as IDataObject;\n\n\tconst pool = await createPool.call(this, credentials, nodeOptions);\n\n\ttry {\n\t\tconst connection = await pool.getConnection();\n\n\t\tconst query = 'SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE table_schema = ?';\n\t\tconst values = [credentials.database];\n\n\t\tconst formatedQuery = connection.format(query, values);\n\n\t\tconst response = (await connection.query(formatedQuery))[0];\n\n\t\tconnection.release();\n\n\t\tconst results = (response as IDataObject[]).map((table) => ({\n\t\t\tname: (table.table_name as string) || (table.TABLE_NAME as string),\n\t\t\tvalue: (table.table_name as string) || (table.TABLE_NAME as string),\n\t\t}));\n\n\t\treturn { results };\n\t} finally {\n\t\tawait pool.end();\n\t}\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA,uBAA2B;AAE3B,eAAsB,eAA0E;AAC/F,QAAM,cAAc,MAAM,KAAK,eAAqC,OAAO;AAE3E,QAAM,cAAc,KAAK,iBAAiB,WAAW,CAAC;AAEtD,QAAM,OAAO,MAAM,4BAAW,KAAK,MAAM,aAAa,WAAW;AAEjE,MAAI;AACH,UAAM,aAAa,MAAM,KAAK,cAAc;AAE5C,UAAM,QAAQ;AACd,UAAM,SAAS,CAAC,YAAY,QAAQ;AAEpC,UAAM,gBAAgB,WAAW,OAAO,OAAO,MAAM;AAErD,UAAM,YAAY,MAAM,WAAW,MAAM,aAAa,GAAG,CAAC;AAE1D,eAAW,QAAQ;AAEnB,UAAM,UAAW,SAA2B,IAAI,CAAC,WAAW;AAAA,MAC3D,MAAO,MAAM,cAA0B,MAAM;AAAA,MAC7C,OAAQ,MAAM,cAA0B,MAAM;AAAA,IAC/C,EAAE;AAEF,WAAO,EAAE,QAAQ;AAAA,EAClB,UAAE;AACD,UAAM,KAAK,IAAI;AAAA,EAChB;AACD;","names":[]}