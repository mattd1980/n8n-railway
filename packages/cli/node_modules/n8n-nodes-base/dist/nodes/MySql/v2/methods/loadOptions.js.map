{"version":3,"sources":["../../../../../nodes/MySql/v2/methods/loadOptions.ts"],"sourcesContent":["import type { IDataObject, ILoadOptionsFunctions, INodePropertyOptions } from 'n8n-workflow';\n\nimport type { MysqlNodeCredentials } from '../helpers/interfaces';\nimport { escapeSqlIdentifier } from '../helpers/utils';\nimport { createPool } from '../transport';\n\nexport async function getColumns(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\tconst credentials = await this.getCredentials<MysqlNodeCredentials>('mySql');\n\tconst nodeOptions = this.getNodeParameter('options', 0) as IDataObject;\n\n\tconst pool = await createPool.call(this, credentials, nodeOptions);\n\n\ttry {\n\t\tconst connection = await pool.getConnection();\n\n\t\tconst table = this.getNodeParameter('table', 0, {\n\t\t\textractValue: true,\n\t\t}) as string;\n\n\t\tconst columns = (\n\t\t\tawait connection.query(\n\t\t\t\t`SHOW COLUMNS FROM ${escapeSqlIdentifier(table)} FROM ${escapeSqlIdentifier(\n\t\t\t\t\tcredentials.database,\n\t\t\t\t)}`,\n\t\t\t)\n\t\t)[0] as IDataObject[];\n\n\t\tconnection.release();\n\n\t\treturn (columns || []).map((column: IDataObject) => ({\n\t\t\tname: column.Field as string,\n\t\t\tvalue: column.Field as string,\n\t\t\t// eslint-disable-next-line n8n-nodes-base/node-param-description-lowercase-first-char\n\t\t\tdescription: `type: ${(column.Type as string).toUpperCase()}, nullable: ${\n\t\t\t\tcolumn.Null as string\n\t\t\t}`,\n\t\t}));\n\t} finally {\n\t\tawait pool.end();\n\t}\n}\n\nexport async function getColumnsMultiOptions(\n\tthis: ILoadOptionsFunctions,\n): Promise<INodePropertyOptions[]> {\n\tconst returnData = await getColumns.call(this);\n\tconst returnAll = { name: '*', value: '*', description: 'All columns' };\n\treturn [returnAll, ...returnData];\n}\n\nexport async function getColumnsWithoutColumnToMatchOn(\n\tthis: ILoadOptionsFunctions,\n): Promise<INodePropertyOptions[]> {\n\tconst columnToMatchOn = this.getNodeParameter('columnToMatchOn') as string;\n\tconst returnData = await getColumns.call(this);\n\treturn returnData.filter((column) => column.value !== columnToMatchOn);\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA,mBAAoC;AACpC,uBAA2B;AAE3B,eAAsB,aAAyE;AAC9F,QAAM,cAAc,MAAM,KAAK,eAAqC,OAAO;AAC3E,QAAM,cAAc,KAAK,iBAAiB,WAAW,CAAC;AAEtD,QAAM,OAAO,MAAM,4BAAW,KAAK,MAAM,aAAa,WAAW;AAEjE,MAAI;AACH,UAAM,aAAa,MAAM,KAAK,cAAc;AAE5C,UAAM,QAAQ,KAAK,iBAAiB,SAAS,GAAG;AAAA,MAC/C,cAAc;AAAA,IACf,CAAC;AAED,UAAM,WACL,MAAM,WAAW;AAAA,MAChB,yBAAqB,kCAAoB,KAAK,CAAC,aAAS;AAAA,QACvD,YAAY;AAAA,MACb,CAAC;AAAA,IACF,GACC,CAAC;AAEH,eAAW,QAAQ;AAEnB,YAAQ,WAAW,CAAC,GAAG,IAAI,CAAC,YAAyB;AAAA,MACpD,MAAM,OAAO;AAAA,MACb,OAAO,OAAO;AAAA;AAAA,MAEd,aAAa,SAAU,OAAO,KAAgB,YAAY,CAAC,eAC1D,OAAO,IACR;AAAA,IACD,EAAE;AAAA,EACH,UAAE;AACD,UAAM,KAAK,IAAI;AAAA,EAChB;AACD;AAEA,eAAsB,yBAEa;AAClC,QAAM,aAAa,MAAM,WAAW,KAAK,IAAI;AAC7C,QAAM,YAAY,EAAE,MAAM,KAAK,OAAO,KAAK,aAAa,cAAc;AACtE,SAAO,CAAC,WAAW,GAAG,UAAU;AACjC;AAEA,eAAsB,mCAEa;AAClC,QAAM,kBAAkB,KAAK,iBAAiB,iBAAiB;AAC/D,QAAM,aAAa,MAAM,WAAW,KAAK,IAAI;AAC7C,SAAO,WAAW,OAAO,CAAC,WAAW,OAAO,UAAU,eAAe;AACtE;","names":[]}