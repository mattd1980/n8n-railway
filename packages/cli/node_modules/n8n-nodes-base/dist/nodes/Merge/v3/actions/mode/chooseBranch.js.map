{"version":3,"sources":["../../../../../../nodes/Merge/v3/actions/mode/chooseBranch.ts"],"sourcesContent":["import { NodeOperationError } from 'n8n-workflow';\nimport type { IExecuteFunctions, INodeExecutionData, INodeProperties } from 'n8n-workflow';\n\nimport { preparePairedItemDataArray, updateDisplayOptions } from '@utils/utilities';\n\nimport { numberInputsProperty } from '../../helpers/descriptions';\n\nexport const properties: INodeProperties[] = [\n\tnumberInputsProperty,\n\t{\n\t\tdisplayName: 'Output Type',\n\t\tname: 'chooseBranchMode',\n\t\ttype: 'options',\n\t\toptions: [\n\t\t\t{\n\t\t\t\tname: 'Wait for All Inputs to Arrive',\n\t\t\t\tvalue: 'waitForAll',\n\t\t\t},\n\t\t],\n\t\tdefault: 'waitForAll',\n\t},\n\t{\n\t\tdisplayName: 'Output',\n\t\tname: 'output',\n\t\ttype: 'options',\n\t\toptions: [\n\t\t\t{\n\t\t\t\tname: 'Data of Specified Input',\n\t\t\t\tvalue: 'specifiedInput',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'A Single, Empty Item',\n\t\t\t\tvalue: 'empty',\n\t\t\t},\n\t\t],\n\t\tdefault: 'specifiedInput',\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tchooseBranchMode: ['waitForAll'],\n\t\t\t},\n\t\t},\n\t},\n\t{\n\t\t// eslint-disable-next-line n8n-nodes-base/node-param-display-name-wrong-for-dynamic-options\n\t\tdisplayName: 'Use Data of Input',\n\t\tname: 'useDataOfInput',\n\t\ttype: 'options',\n\t\tdefault: 1,\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\toutput: ['specifiedInput'],\n\t\t\t},\n\t\t},\n\t\ttypeOptions: {\n\t\t\tminValue: 1,\n\t\t\tloadOptionsMethod: 'getInputs',\n\t\t\tloadOptionsDependsOn: ['numberInputs'],\n\t\t},\n\t\t// eslint-disable-next-line n8n-nodes-base/node-param-description-wrong-for-dynamic-options\n\t\tdescription: 'The number of the input to use data of',\n\t\tvalidateType: 'number',\n\t},\n];\n\nconst displayOptions = {\n\tshow: {\n\t\tmode: ['chooseBranch'],\n\t},\n};\n\nexport const description = updateDisplayOptions(displayOptions, properties);\n\nexport async function execute(\n\tthis: IExecuteFunctions,\n\tinputsData: INodeExecutionData[][],\n): Promise<INodeExecutionData[][]> {\n\tconst returnData: INodeExecutionData[] = [];\n\n\tconst chooseBranchMode = this.getNodeParameter('chooseBranchMode', 0) as string;\n\n\tif (chooseBranchMode === 'waitForAll') {\n\t\tconst output = this.getNodeParameter('output', 0) as string;\n\n\t\tif (output === 'specifiedInput') {\n\t\t\tconst useDataOfInput = this.getNodeParameter('useDataOfInput', 0) as number;\n\t\t\tif (useDataOfInput > inputsData.length) {\n\t\t\t\tthrow new NodeOperationError(this.getNode(), `Input ${useDataOfInput} doesn't exist`, {\n\t\t\t\t\tdescription: `The node has only ${inputsData.length} inputs, so selecting input ${useDataOfInput} is not possible.`,\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tconst inputData = inputsData[useDataOfInput - 1];\n\n\t\t\treturnData.push.apply(returnData, inputData);\n\t\t}\n\t\tif (output === 'empty') {\n\t\t\tconst pairedItem = [\n\t\t\t\t...this.getInputData(0).map((inputData) => inputData.pairedItem),\n\t\t\t\t...this.getInputData(1).map((inputData) => inputData.pairedItem),\n\t\t\t].flatMap(preparePairedItemDataArray);\n\n\t\t\treturnData.push({\n\t\t\t\tjson: {},\n\t\t\t\tpairedItem,\n\t\t\t});\n\t\t}\n\t}\n\n\treturn [returnData];\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAmC;AAGnC,uBAAiE;AAEjE,0BAAqC;AAE9B,MAAM,aAAgC;AAAA,EAC5C;AAAA,EACA;AAAA,IACC,aAAa;AAAA,IACb,MAAM;AAAA,IACN,MAAM;AAAA,IACN,SAAS;AAAA,MACR;AAAA,QACC,MAAM;AAAA,QACN,OAAO;AAAA,MACR;AAAA,IACD;AAAA,IACA,SAAS;AAAA,EACV;AAAA,EACA;AAAA,IACC,aAAa;AAAA,IACb,MAAM;AAAA,IACN,MAAM;AAAA,IACN,SAAS;AAAA,MACR;AAAA,QACC,MAAM;AAAA,QACN,OAAO;AAAA,MACR;AAAA,MACA;AAAA,QACC,MAAM;AAAA,QACN,OAAO;AAAA,MACR;AAAA,IACD;AAAA,IACA,SAAS;AAAA,IACT,gBAAgB;AAAA,MACf,MAAM;AAAA,QACL,kBAAkB,CAAC,YAAY;AAAA,MAChC;AAAA,IACD;AAAA,EACD;AAAA,EACA;AAAA;AAAA,IAEC,aAAa;AAAA,IACb,MAAM;AAAA,IACN,MAAM;AAAA,IACN,SAAS;AAAA,IACT,gBAAgB;AAAA,MACf,MAAM;AAAA,QACL,QAAQ,CAAC,gBAAgB;AAAA,MAC1B;AAAA,IACD;AAAA,IACA,aAAa;AAAA,MACZ,UAAU;AAAA,MACV,mBAAmB;AAAA,MACnB,sBAAsB,CAAC,cAAc;AAAA,IACtC;AAAA;AAAA,IAEA,aAAa;AAAA,IACb,cAAc;AAAA,EACf;AACD;AAEA,MAAM,iBAAiB;AAAA,EACtB,MAAM;AAAA,IACL,MAAM,CAAC,cAAc;AAAA,EACtB;AACD;AAEO,MAAM,kBAAc,uCAAqB,gBAAgB,UAAU;AAE1E,eAAsB,QAErB,YACkC;AAClC,QAAM,aAAmC,CAAC;AAE1C,QAAM,mBAAmB,KAAK,iBAAiB,oBAAoB,CAAC;AAEpE,MAAI,qBAAqB,cAAc;AACtC,UAAM,SAAS,KAAK,iBAAiB,UAAU,CAAC;AAEhD,QAAI,WAAW,kBAAkB;AAChC,YAAM,iBAAiB,KAAK,iBAAiB,kBAAkB,CAAC;AAChE,UAAI,iBAAiB,WAAW,QAAQ;AACvC,cAAM,IAAI,uCAAmB,KAAK,QAAQ,GAAG,SAAS,cAAc,kBAAkB;AAAA,UACrF,aAAa,qBAAqB,WAAW,MAAM,+BAA+B,cAAc;AAAA,QACjG,CAAC;AAAA,MACF;AAEA,YAAM,YAAY,WAAW,iBAAiB,CAAC;AAE/C,iBAAW,KAAK,MAAM,YAAY,SAAS;AAAA,IAC5C;AACA,QAAI,WAAW,SAAS;AACvB,YAAM,aAAa;AAAA,QAClB,GAAG,KAAK,aAAa,CAAC,EAAE,IAAI,CAAC,cAAc,UAAU,UAAU;AAAA,QAC/D,GAAG,KAAK,aAAa,CAAC,EAAE,IAAI,CAAC,cAAc,UAAU,UAAU;AAAA,MAChE,EAAE,QAAQ,2CAA0B;AAEpC,iBAAW,KAAK;AAAA,QACf,MAAM,CAAC;AAAA,QACP;AAAA,MACD,CAAC;AAAA,IACF;AAAA,EACD;AAEA,SAAO,CAAC,UAAU;AACnB;","names":[]}