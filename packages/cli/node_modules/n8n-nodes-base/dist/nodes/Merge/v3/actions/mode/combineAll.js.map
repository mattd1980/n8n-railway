{"version":3,"sources":["../../../../../../nodes/Merge/v3/actions/mode/combineAll.ts"],"sourcesContent":["import merge from 'lodash/merge';\nimport type {\n\tIExecuteFunctions,\n\tINodeExecutionData,\n\tINodeProperties,\n\tIPairedItemData,\n} from 'n8n-workflow';\n\nimport { updateDisplayOptions } from '@utils/utilities';\n\nimport { clashHandlingProperties, fuzzyCompareProperty } from '../../helpers/descriptions';\nimport type { ClashResolveOptions } from '../../helpers/interfaces';\nimport { addSuffixToEntriesKeys, selectMergeMethod } from '../../helpers/utils';\n\nexport const properties: INodeProperties[] = [\n\t{\n\t\tdisplayName: 'Options',\n\t\tname: 'options',\n\t\ttype: 'collection',\n\t\tplaceholder: 'Add option',\n\t\tdefault: {},\n\t\toptions: [clashHandlingProperties, fuzzyCompareProperty],\n\t},\n];\n\nconst displayOptions = {\n\tshow: {\n\t\tmode: ['combine'],\n\t\tcombineBy: ['combineAll'],\n\t},\n};\n\nexport const description = updateDisplayOptions(displayOptions, properties);\n\nexport async function execute(\n\tthis: IExecuteFunctions,\n\tinputsData: INodeExecutionData[][],\n): Promise<INodeExecutionData[][]> {\n\tconst returnData: INodeExecutionData[] = [];\n\n\tconst clashHandling = this.getNodeParameter(\n\t\t'options.clashHandling.values',\n\t\t0,\n\t\t{},\n\t) as ClashResolveOptions;\n\n\tlet input1 = inputsData[0];\n\tlet input2 = inputsData[1];\n\n\tif (clashHandling.resolveClash === 'preferInput1') {\n\t\t[input1, input2] = [input2, input1];\n\t}\n\n\tif (clashHandling.resolveClash === 'addSuffix') {\n\t\tinput1 = addSuffixToEntriesKeys(input1, '1');\n\t\tinput2 = addSuffixToEntriesKeys(input2, '2');\n\t}\n\n\tconst mergeIntoSingleObject = selectMergeMethod(clashHandling);\n\n\tif (!input1 || !input2) {\n\t\treturn [returnData];\n\t}\n\n\tlet entry1: INodeExecutionData;\n\tlet entry2: INodeExecutionData;\n\n\tfor (entry1 of input1) {\n\t\tfor (entry2 of input2) {\n\t\t\treturnData.push({\n\t\t\t\tjson: {\n\t\t\t\t\t...mergeIntoSingleObject(entry1.json, entry2.json),\n\t\t\t\t},\n\t\t\t\tbinary: {\n\t\t\t\t\t...merge({}, entry1.binary, entry2.binary),\n\t\t\t\t},\n\t\t\t\tpairedItem: [entry1.pairedItem as IPairedItemData, entry2.pairedItem as IPairedItemData],\n\t\t\t});\n\t\t}\n\t}\n\n\treturn [returnData];\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAkB;AAQlB,uBAAqC;AAErC,0BAA8D;AAE9D,mBAA0D;AAEnD,MAAM,aAAgC;AAAA,EAC5C;AAAA,IACC,aAAa;AAAA,IACb,MAAM;AAAA,IACN,MAAM;AAAA,IACN,aAAa;AAAA,IACb,SAAS,CAAC;AAAA,IACV,SAAS,CAAC,6CAAyB,wCAAoB;AAAA,EACxD;AACD;AAEA,MAAM,iBAAiB;AAAA,EACtB,MAAM;AAAA,IACL,MAAM,CAAC,SAAS;AAAA,IAChB,WAAW,CAAC,YAAY;AAAA,EACzB;AACD;AAEO,MAAM,kBAAc,uCAAqB,gBAAgB,UAAU;AAE1E,eAAsB,QAErB,YACkC;AAClC,QAAM,aAAmC,CAAC;AAE1C,QAAM,gBAAgB,KAAK;AAAA,IAC1B;AAAA,IACA;AAAA,IACA,CAAC;AAAA,EACF;AAEA,MAAI,SAAS,WAAW,CAAC;AACzB,MAAI,SAAS,WAAW,CAAC;AAEzB,MAAI,cAAc,iBAAiB,gBAAgB;AAClD,KAAC,QAAQ,MAAM,IAAI,CAAC,QAAQ,MAAM;AAAA,EACnC;AAEA,MAAI,cAAc,iBAAiB,aAAa;AAC/C,iBAAS,qCAAuB,QAAQ,GAAG;AAC3C,iBAAS,qCAAuB,QAAQ,GAAG;AAAA,EAC5C;AAEA,QAAM,4BAAwB,gCAAkB,aAAa;AAE7D,MAAI,CAAC,UAAU,CAAC,QAAQ;AACvB,WAAO,CAAC,UAAU;AAAA,EACnB;AAEA,MAAI;AACJ,MAAI;AAEJ,OAAK,UAAU,QAAQ;AACtB,SAAK,UAAU,QAAQ;AACtB,iBAAW,KAAK;AAAA,QACf,MAAM;AAAA,UACL,GAAG,sBAAsB,OAAO,MAAM,OAAO,IAAI;AAAA,QAClD;AAAA,QACA,QAAQ;AAAA,UACP,OAAG,aAAAA,SAAM,CAAC,GAAG,OAAO,QAAQ,OAAO,MAAM;AAAA,QAC1C;AAAA,QACA,YAAY,CAAC,OAAO,YAA+B,OAAO,UAA6B;AAAA,MACxF,CAAC;AAAA,IACF;AAAA,EACD;AAEA,SAAO,CAAC,UAAU;AACnB;","names":["merge"]}