{"version":3,"sources":["../../../../../nodes/Merge/v3/helpers/descriptions.ts"],"sourcesContent":["import type { INodeProperties } from 'n8n-workflow';\n\nexport const fuzzyCompareProperty: INodeProperties = {\n\tdisplayName: 'Fuzzy Compare',\n\tname: 'fuzzyCompare',\n\ttype: 'boolean',\n\tdefault: false,\n\tdescription:\n\t\t\"Whether to tolerate small type differences when comparing fields. E.g. the number 3 and the string '3' are treated as the same.\",\n};\nexport const numberInputsProperty: INodeProperties = {\n\tdisplayName: 'Number of Inputs',\n\tname: 'numberInputs',\n\ttype: 'options',\n\tnoDataExpression: true,\n\tdefault: 2,\n\toptions: [\n\t\t{\n\t\t\tname: '2',\n\t\t\tvalue: 2,\n\t\t},\n\t\t{\n\t\t\tname: '3',\n\t\t\tvalue: 3,\n\t\t},\n\t\t{\n\t\t\tname: '4',\n\t\t\tvalue: 4,\n\t\t},\n\t\t{\n\t\t\tname: '5',\n\t\t\tvalue: 5,\n\t\t},\n\t\t{\n\t\t\tname: '6',\n\t\t\tvalue: 6,\n\t\t},\n\t\t{\n\t\t\tname: '7',\n\t\t\tvalue: 7,\n\t\t},\n\t\t{\n\t\t\tname: '8',\n\t\t\tvalue: 8,\n\t\t},\n\t\t{\n\t\t\tname: '9',\n\t\t\tvalue: 9,\n\t\t},\n\t\t{\n\t\t\tname: '10',\n\t\t\tvalue: 10,\n\t\t},\n\t],\n\tvalidateType: 'number',\n\tdescription:\n\t\t'The number of data inputs you want to merge. The node waits for all connected inputs to be executed.',\n};\n\nexport const clashHandlingProperties: INodeProperties = {\n\tdisplayName: 'Clash Handling',\n\tname: 'clashHandling',\n\ttype: 'fixedCollection',\n\tdefault: {\n\t\tvalues: { resolveClash: 'preferLast', mergeMode: 'deepMerge', overrideEmpty: false },\n\t},\n\toptions: [\n\t\t{\n\t\t\tdisplayName: 'Values',\n\t\t\tname: 'values',\n\t\t\tvalues: [\n\t\t\t\t{\n\t\t\t\t\t// eslint-disable-next-line n8n-nodes-base/node-param-display-name-wrong-for-dynamic-options\n\t\t\t\t\tdisplayName: 'When Field Values Clash',\n\t\t\t\t\tname: 'resolveClash',\n\t\t\t\t\t// eslint-disable-next-line n8n-nodes-base/node-param-description-missing-from-dynamic-options\n\t\t\t\t\ttype: 'options',\n\t\t\t\t\tdefault: '',\n\t\t\t\t\ttypeOptions: {\n\t\t\t\t\t\tloadOptionsMethod: 'getResolveClashOptions',\n\t\t\t\t\t\tloadOptionsDependsOn: ['numberInputs'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'Merging Nested Fields',\n\t\t\t\t\tname: 'mergeMode',\n\t\t\t\t\ttype: 'options',\n\t\t\t\t\tdefault: 'deepMerge',\n\t\t\t\t\toptions: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'Deep Merge',\n\t\t\t\t\t\t\tvalue: 'deepMerge',\n\t\t\t\t\t\t\tdescription: 'Merge at every level of nesting',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'Shallow Merge',\n\t\t\t\t\t\t\tvalue: 'shallowMerge',\n\t\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t\t'Merge at the top level only (all nested fields will come from the same input)',\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t\thint: 'How to merge when there are sub-fields below the top-level ones',\n\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\tresolveClash: [{ _cnd: { not: 'addSuffix' } }],\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'Minimize Empty Fields',\n\t\t\t\t\tname: 'overrideEmpty',\n\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\tdefault: false,\n\t\t\t\t\tdescription:\n\t\t\t\t\t\t\"Whether to override the preferred input version for a field if it is empty and the other version isn't. Here 'empty' means undefined, null or an empty string.\",\n\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\tresolveClash: [{ _cnd: { not: 'addSuffix' } }],\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t],\n\t\t},\n\t],\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEO,MAAM,uBAAwC;AAAA,EACpD,aAAa;AAAA,EACb,MAAM;AAAA,EACN,MAAM;AAAA,EACN,SAAS;AAAA,EACT,aACC;AACF;AACO,MAAM,uBAAwC;AAAA,EACpD,aAAa;AAAA,EACb,MAAM;AAAA,EACN,MAAM;AAAA,EACN,kBAAkB;AAAA,EAClB,SAAS;AAAA,EACT,SAAS;AAAA,IACR;AAAA,MACC,MAAM;AAAA,MACN,OAAO;AAAA,IACR;AAAA,IACA;AAAA,MACC,MAAM;AAAA,MACN,OAAO;AAAA,IACR;AAAA,IACA;AAAA,MACC,MAAM;AAAA,MACN,OAAO;AAAA,IACR;AAAA,IACA;AAAA,MACC,MAAM;AAAA,MACN,OAAO;AAAA,IACR;AAAA,IACA;AAAA,MACC,MAAM;AAAA,MACN,OAAO;AAAA,IACR;AAAA,IACA;AAAA,MACC,MAAM;AAAA,MACN,OAAO;AAAA,IACR;AAAA,IACA;AAAA,MACC,MAAM;AAAA,MACN,OAAO;AAAA,IACR;AAAA,IACA;AAAA,MACC,MAAM;AAAA,MACN,OAAO;AAAA,IACR;AAAA,IACA;AAAA,MACC,MAAM;AAAA,MACN,OAAO;AAAA,IACR;AAAA,EACD;AAAA,EACA,cAAc;AAAA,EACd,aACC;AACF;AAEO,MAAM,0BAA2C;AAAA,EACvD,aAAa;AAAA,EACb,MAAM;AAAA,EACN,MAAM;AAAA,EACN,SAAS;AAAA,IACR,QAAQ,EAAE,cAAc,cAAc,WAAW,aAAa,eAAe,MAAM;AAAA,EACpF;AAAA,EACA,SAAS;AAAA,IACR;AAAA,MACC,aAAa;AAAA,MACb,MAAM;AAAA,MACN,QAAQ;AAAA,QACP;AAAA;AAAA,UAEC,aAAa;AAAA,UACb,MAAM;AAAA;AAAA,UAEN,MAAM;AAAA,UACN,SAAS;AAAA,UACT,aAAa;AAAA,YACZ,mBAAmB;AAAA,YACnB,sBAAsB,CAAC,cAAc;AAAA,UACtC;AAAA,QACD;AAAA,QACA;AAAA,UACC,aAAa;AAAA,UACb,MAAM;AAAA,UACN,MAAM;AAAA,UACN,SAAS;AAAA,UACT,SAAS;AAAA,YACR;AAAA,cACC,MAAM;AAAA,cACN,OAAO;AAAA,cACP,aAAa;AAAA,YACd;AAAA,YACA;AAAA,cACC,MAAM;AAAA,cACN,OAAO;AAAA,cACP,aACC;AAAA,YACF;AAAA,UACD;AAAA,UACA,MAAM;AAAA,UACN,gBAAgB;AAAA,YACf,MAAM;AAAA,cACL,cAAc,CAAC,EAAE,MAAM,EAAE,KAAK,YAAY,EAAE,CAAC;AAAA,YAC9C;AAAA,UACD;AAAA,QACD;AAAA,QACA;AAAA,UACC,aAAa;AAAA,UACb,MAAM;AAAA,UACN,MAAM;AAAA,UACN,SAAS;AAAA,UACT,aACC;AAAA,UACD,gBAAgB;AAAA,YACf,MAAM;AAAA,cACL,cAAc,CAAC,EAAE,MAAM,EAAE,KAAK,YAAY,EAAE,CAAC;AAAA,YAC9C;AAAA,UACD;AAAA,QACD;AAAA,MACD;AAAA,IACD;AAAA,EACD;AACD;","names":[]}