{"version":3,"sources":["../../../nodes/Linear/GenericFunctions.ts"],"sourcesContent":["import get from 'lodash/get';\nimport type {\n\tICredentialDataDecryptedObject,\n\tICredentialTestFunctions,\n\tIDataObject,\n\tIExecuteFunctions,\n\tILoadOptionsFunctions,\n\tIHookFunctions,\n\tIWebhookFunctions,\n\tIHttpRequestOptions,\n} from 'n8n-workflow';\nimport { NodeApiError } from 'n8n-workflow';\n\nimport { query } from './Queries';\n\nexport async function linearApiRequest(\n\tthis: IExecuteFunctions | IWebhookFunctions | IHookFunctions | ILoadOptionsFunctions,\n\n\tbody: any = {},\n\toption: IDataObject = {},\n): Promise<any> {\n\tconst endpoint = 'https://api.linear.app/graphql';\n\tconst authenticationMethod = this.getNodeParameter('authentication', 0, 'apiToken') as string;\n\n\tlet options: IHttpRequestOptions = {\n\t\theaders: {\n\t\t\t'Content-Type': 'application/json',\n\t\t},\n\t\tmethod: 'POST',\n\t\tbody,\n\t\turl: endpoint,\n\t\tjson: true,\n\t};\n\toptions = Object.assign({}, options, option);\n\ttry {\n\t\tconst response = await this.helpers.httpRequestWithAuthentication.call(\n\t\t\tthis,\n\t\t\tauthenticationMethod === 'apiToken' ? 'linearApi' : 'linearOAuth2Api',\n\t\t\toptions,\n\t\t);\n\n\t\tif (response?.errors) {\n\t\t\tthrow new NodeApiError(this.getNode(), response.errors, {\n\t\t\t\tmessage: response.errors[0].message ?? 'Unknown API Error',\n\t\t\t});\n\t\t}\n\n\t\treturn response;\n\t} catch (error) {\n\t\tthrow new NodeApiError(\n\t\t\tthis.getNode(),\n\t\t\t{},\n\t\t\t{\n\t\t\t\tmessage:\n\t\t\t\t\terror.errorResponse?.[0]?.message ||\n\t\t\t\t\terror.context.data.errors[0]?.message ||\n\t\t\t\t\t'Unknown API error',\n\t\t\t\tdescription:\n\t\t\t\t\terror.errorResponse?.[0]?.extensions?.userPresentableMessage ||\n\t\t\t\t\terror.context.data.errors[0]?.extensions?.userPresentableMessage,\n\t\t\t},\n\t\t);\n\t}\n}\n\nexport function capitalizeFirstLetter(data: string) {\n\treturn data.charAt(0).toUpperCase() + data.slice(1);\n}\n\nexport async function linearApiRequestAllItems(\n\tthis: IHookFunctions | IExecuteFunctions | ILoadOptionsFunctions,\n\tpropertyName: string,\n\tbody: any = {},\n\tlimit?: number,\n): Promise<any> {\n\tconst returnData: IDataObject[] = [];\n\n\tlet responseData;\n\tbody.variables.first = limit && limit < 50 ? limit : 50;\n\tbody.variables.after = null;\n\n\tconst propertyPath = propertyName.split('.');\n\tconst nodesPath = [...propertyPath, 'nodes'];\n\tconst endCursorPath = [...propertyPath, 'pageInfo', 'endCursor'];\n\tconst hasNextPagePath = [...propertyPath, 'pageInfo', 'hasNextPage'];\n\n\tdo {\n\t\tresponseData = await linearApiRequest.call(this, body);\n\t\tconst nodes = get(responseData, nodesPath) as IDataObject[];\n\t\treturnData.push(...nodes);\n\t\tbody.variables.after = get(responseData, endCursorPath);\n\t\tif (limit && returnData.length >= limit) {\n\t\t\treturn returnData;\n\t\t}\n\t} while (get(responseData, hasNextPagePath));\n\n\treturn returnData;\n}\n\nexport async function validateCredentials(\n\tthis: ICredentialTestFunctions,\n\tdecryptedCredentials: ICredentialDataDecryptedObject,\n): Promise<any> {\n\tconst credentials = decryptedCredentials;\n\n\tconst options: IHttpRequestOptions = {\n\t\theaders: {\n\t\t\t'Content-Type': 'application/json',\n\t\t\tAuthorization: credentials.apiKey,\n\t\t},\n\t\tmethod: 'POST',\n\t\tbody: {\n\t\t\tquery: query.getIssues(),\n\t\t\tvariables: {\n\t\t\t\tfirst: 1,\n\t\t\t},\n\t\t},\n\t\turl: 'https://api.linear.app/graphql',\n\t\tjson: true,\n\t};\n\n\treturn await this.helpers.request(options);\n}\n\n//@ts-ignore\nexport const sort = (a, b) => {\n\tif (a.name.toLocaleLowerCase() < b.name.toLocaleLowerCase()) {\n\t\treturn -1;\n\t}\n\tif (a.name.toLocaleLowerCase() > b.name.toLocaleLowerCase()) {\n\t\treturn 1;\n\t}\n\treturn 0;\n};\n"],"mappings":"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","names":["get"]}