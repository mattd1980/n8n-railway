{"version":3,"sources":["../../../../nodes/Airtable/v1/AirtableV1.node.ts"],"sourcesContent":["import type {\n\tIExecuteFunctions,\n\tIDataObject,\n\tINodeExecutionData,\n\tINodeType,\n\tINodeTypeDescription,\n\tINodeTypeBaseDescription,\n\tIHttpRequestMethods,\n} from 'n8n-workflow';\nimport { NodeConnectionTypes, NodeOperationError } from 'n8n-workflow';\n\nimport type { IRecord } from './GenericFunctions';\nimport { apiRequest, apiRequestAllItems, downloadRecordAttachments } from './GenericFunctions';\nimport { oldVersionNotice } from '../../../utils/descriptions';\nimport { generatePairedItemData } from '../../../utils/utilities';\n\nconst versionDescription: INodeTypeDescription = {\n\tdisplayName: 'Airtable',\n\tname: 'airtable',\n\ticon: 'file:airtable.svg',\n\tgroup: ['input'],\n\tversion: 1,\n\tdescription: 'Read, update, write and delete data from Airtable',\n\tdefaults: {\n\t\tname: 'Airtable',\n\t},\n\tinputs: [NodeConnectionTypes.Main],\n\toutputs: [NodeConnectionTypes.Main],\n\tcredentials: [\n\t\t{\n\t\t\tname: 'airtableApi',\n\t\t\trequired: true,\n\t\t\tdisplayOptions: {\n\t\t\t\tshow: {\n\t\t\t\t\tauthentication: ['airtableApi'],\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: 'airtableTokenApi',\n\t\t\trequired: true,\n\t\t\tdisplayOptions: {\n\t\t\t\tshow: {\n\t\t\t\t\tauthentication: ['airtableTokenApi'],\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: 'airtableOAuth2Api',\n\t\t\trequired: true,\n\t\t\tdisplayOptions: {\n\t\t\t\tshow: {\n\t\t\t\t\tauthentication: ['airtableOAuth2Api'],\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t],\n\tproperties: [\n\t\t{\n\t\t\tdisplayName: 'Authentication',\n\t\t\tname: 'authentication',\n\t\t\ttype: 'options',\n\t\t\toptions: [\n\t\t\t\t{\n\t\t\t\t\tname: 'Access Token',\n\t\t\t\t\tvalue: 'airtableTokenApi',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'OAuth2',\n\t\t\t\t\tvalue: 'airtableOAuth2Api',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'API Key (Deprecated)',\n\t\t\t\t\tvalue: 'airtableApi',\n\t\t\t\t},\n\t\t\t],\n\t\t\tdefault: 'airtableApi',\n\t\t},\n\t\toldVersionNotice,\n\t\t{\n\t\t\tdisplayName:\n\t\t\t\t\"This type of connection (API Key) was deprecated and can't be used anymore. Please create a new credential of type 'Access Token' instead.\",\n\t\t\tname: 'deprecated',\n\t\t\ttype: 'notice',\n\t\t\tdefault: '',\n\t\t\tdisplayOptions: {\n\t\t\t\tshow: {\n\t\t\t\t\tauthentication: ['airtableApi'],\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tdisplayName: 'Operation',\n\t\t\tname: 'operation',\n\t\t\ttype: 'options',\n\t\t\tnoDataExpression: true,\n\t\t\toptions: [\n\t\t\t\t{\n\t\t\t\t\tname: 'Append',\n\t\t\t\t\tvalue: 'append',\n\t\t\t\t\tdescription: 'Append the data to a table',\n\t\t\t\t\taction: 'Append data to a table',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'Delete',\n\t\t\t\t\tvalue: 'delete',\n\t\t\t\t\tdescription: 'Delete data from a table',\n\t\t\t\t\taction: 'Delete data from a table',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'List',\n\t\t\t\t\tvalue: 'list',\n\t\t\t\t\tdescription: 'List data from a table',\n\t\t\t\t\taction: 'List data from a table',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'Read',\n\t\t\t\t\tvalue: 'read',\n\t\t\t\t\tdescription: 'Read data from a table',\n\t\t\t\t\taction: 'Read data from a table',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'Update',\n\t\t\t\t\tvalue: 'update',\n\t\t\t\t\tdescription: 'Update data in a table',\n\t\t\t\t\taction: 'Update data in a table',\n\t\t\t\t},\n\t\t\t],\n\t\t\tdefault: 'read',\n\t\t},\n\n\t\t// ----------------------------------\n\t\t//         All\n\t\t// ----------------------------------\n\n\t\t{\n\t\t\tdisplayName: 'Base',\n\t\t\tname: 'application',\n\t\t\ttype: 'resourceLocator',\n\t\t\tdefault: { mode: 'url', value: '' },\n\t\t\trequired: true,\n\t\t\tdescription: 'The Airtable Base in which to operate on',\n\t\t\tmodes: [\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'By URL',\n\t\t\t\t\tname: 'url',\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tplaceholder: 'https://airtable.com/app12DiScdfes/tblAAAAAAAAAAAAA/viwHdfasdfeieg5p',\n\t\t\t\t\tvalidation: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttype: 'regex',\n\t\t\t\t\t\t\tproperties: {\n\t\t\t\t\t\t\t\tregex: 'https://airtable.com/([a-zA-Z0-9]{2,})/.*',\n\t\t\t\t\t\t\t\terrorMessage: 'Not a valid Airtable Base URL',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t\textractValue: {\n\t\t\t\t\t\ttype: 'regex',\n\t\t\t\t\t\tregex: 'https://airtable.com/([a-zA-Z0-9]{2,})',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'ID',\n\t\t\t\t\tname: 'id',\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tvalidation: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttype: 'regex',\n\t\t\t\t\t\t\tproperties: {\n\t\t\t\t\t\t\t\tregex: '[a-zA-Z0-9]{2,}',\n\t\t\t\t\t\t\t\terrorMessage: 'Not a valid Airtable Base ID',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t\tplaceholder: 'appD3dfaeidke',\n\t\t\t\t\turl: '=https://airtable.com/{{$value}}',\n\t\t\t\t},\n\t\t\t],\n\t\t},\n\t\t{\n\t\t\tdisplayName: 'Table',\n\t\t\tname: 'table',\n\t\t\ttype: 'resourceLocator',\n\t\t\tdefault: { mode: 'url', value: '' },\n\t\t\trequired: true,\n\t\t\tmodes: [\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'By URL',\n\t\t\t\t\tname: 'url',\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tplaceholder: 'https://airtable.com/app12DiScdfes/tblAAAAAAAAAAAAA/viwHdfasdfeieg5p',\n\t\t\t\t\tvalidation: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttype: 'regex',\n\t\t\t\t\t\t\tproperties: {\n\t\t\t\t\t\t\t\tregex: 'https://airtable.com/[a-zA-Z0-9]{2,}/([a-zA-Z0-9]{2,})/.*',\n\t\t\t\t\t\t\t\terrorMessage: 'Not a valid Airtable Table URL',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t\textractValue: {\n\t\t\t\t\t\ttype: 'regex',\n\t\t\t\t\t\tregex: 'https://airtable.com/[a-zA-Z0-9]{2,}/([a-zA-Z0-9]{2,})',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'ID',\n\t\t\t\t\tname: 'id',\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tvalidation: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttype: 'regex',\n\t\t\t\t\t\t\tproperties: {\n\t\t\t\t\t\t\t\tregex: '[a-zA-Z0-9]{2,}',\n\t\t\t\t\t\t\t\terrorMessage: 'Not a valid Airtable Table ID',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t\tplaceholder: 'tbl3dirwqeidke',\n\t\t\t\t},\n\t\t\t],\n\t\t},\n\n\t\t// ----------------------------------\n\t\t//         append\n\t\t// ----------------------------------\n\t\t{\n\t\t\tdisplayName: 'Add All Fields',\n\t\t\tname: 'addAllFields',\n\t\t\ttype: 'boolean',\n\t\t\tdisplayOptions: {\n\t\t\t\tshow: {\n\t\t\t\t\toperation: ['append'],\n\t\t\t\t},\n\t\t\t},\n\t\t\tdefault: true,\n\t\t\tdescription: 'Whether all fields should be sent to Airtable or only specific ones',\n\t\t},\n\t\t{\n\t\t\tdisplayName: 'Fields',\n\t\t\tname: 'fields',\n\t\t\ttype: 'string',\n\t\t\ttypeOptions: {\n\t\t\t\tmultipleValues: true,\n\t\t\t\tmultipleValueButtonText: 'Add Field',\n\t\t\t},\n\t\t\trequiresDataPath: 'single',\n\t\t\tdisplayOptions: {\n\t\t\t\tshow: {\n\t\t\t\t\taddAllFields: [false],\n\t\t\t\t\toperation: ['append'],\n\t\t\t\t},\n\t\t\t},\n\t\t\tdefault: [],\n\t\t\tplaceholder: 'Name',\n\t\t\trequired: true,\n\t\t\tdescription: 'The name of fields for which data should be sent to Airtable',\n\t\t},\n\n\t\t// ----------------------------------\n\t\t//         delete\n\t\t// ----------------------------------\n\t\t{\n\t\t\tdisplayName: 'ID',\n\t\t\tname: 'id',\n\t\t\ttype: 'string',\n\t\t\tdisplayOptions: {\n\t\t\t\tshow: {\n\t\t\t\t\toperation: ['delete'],\n\t\t\t\t},\n\t\t\t},\n\t\t\tdefault: '',\n\t\t\trequired: true,\n\t\t\tdescription: 'ID of the record to delete',\n\t\t},\n\n\t\t// ----------------------------------\n\t\t//         list\n\t\t// ----------------------------------\n\t\t{\n\t\t\tdisplayName: 'Return All',\n\t\t\tname: 'returnAll',\n\t\t\ttype: 'boolean',\n\t\t\tdisplayOptions: {\n\t\t\t\tshow: {\n\t\t\t\t\toperation: ['list'],\n\t\t\t\t},\n\t\t\t},\n\t\t\tdefault: true,\n\t\t\tdescription: 'Whether to return all results or only up to a given limit',\n\t\t},\n\t\t{\n\t\t\tdisplayName: 'Limit',\n\t\t\tname: 'limit',\n\t\t\ttype: 'number',\n\t\t\tdisplayOptions: {\n\t\t\t\tshow: {\n\t\t\t\t\toperation: ['list'],\n\t\t\t\t\treturnAll: [false],\n\t\t\t\t},\n\t\t\t},\n\t\t\ttypeOptions: {\n\t\t\t\tminValue: 1,\n\t\t\t\tmaxValue: 100,\n\t\t\t},\n\t\t\tdefault: 100,\n\t\t\tdescription: 'Max number of results to return',\n\t\t},\n\t\t{\n\t\t\tdisplayName: 'Download Attachments',\n\t\t\tname: 'downloadAttachments',\n\t\t\ttype: 'boolean',\n\t\t\tdisplayOptions: {\n\t\t\t\tshow: {\n\t\t\t\t\toperation: ['list'],\n\t\t\t\t},\n\t\t\t},\n\t\t\tdefault: false,\n\t\t\tdescription: \"Whether the attachment fields define in 'Download Fields' will be downloaded\",\n\t\t},\n\t\t{\n\t\t\tdisplayName: 'Download Fields',\n\t\t\tname: 'downloadFieldNames',\n\t\t\ttype: 'string',\n\t\t\trequired: true,\n\t\t\trequiresDataPath: 'multiple',\n\t\t\tdisplayOptions: {\n\t\t\t\tshow: {\n\t\t\t\t\toperation: ['list'],\n\t\t\t\t\tdownloadAttachments: [true],\n\t\t\t\t},\n\t\t\t},\n\t\t\tdefault: '',\n\t\t\tdescription:\n\t\t\t\t\"Name of the fields of type 'attachment' that should be downloaded. Multiple ones can be defined separated by comma. Case sensitive and cannot include spaces after a comma.\",\n\t\t},\n\t\t{\n\t\t\tdisplayName: 'Additional Options',\n\t\t\tname: 'additionalOptions',\n\t\t\ttype: 'collection',\n\t\t\tdisplayOptions: {\n\t\t\t\tshow: {\n\t\t\t\t\toperation: ['list'],\n\t\t\t\t},\n\t\t\t},\n\t\t\tdefault: {},\n\t\t\tdescription: 'Additional options which decide which records should be returned',\n\t\t\tplaceholder: 'Add option',\n\t\t\toptions: [\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'Fields',\n\t\t\t\t\tname: 'fields',\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\trequiresDataPath: 'single',\n\t\t\t\t\ttypeOptions: {\n\t\t\t\t\t\tmultipleValues: true,\n\t\t\t\t\t\tmultipleValueButtonText: 'Add Field',\n\t\t\t\t\t},\n\t\t\t\t\tdefault: [],\n\t\t\t\t\tplaceholder: 'Name',\n\t\t\t\t\tdescription:\n\t\t\t\t\t\t'Only data for fields whose names are in this list will be included in the records',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'Filter By Formula',\n\t\t\t\t\tname: 'filterByFormula',\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tdefault: '',\n\t\t\t\t\tplaceholder: \"NOT({Name} = '')\",\n\t\t\t\t\tdescription:\n\t\t\t\t\t\t'A formula used to filter records. The formula will be evaluated for each record, and if the result is not 0, false, \"\", NaN, [], or #Error! the record will be included in the response.',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'Sort',\n\t\t\t\t\tname: 'sort',\n\t\t\t\t\tplaceholder: 'Add Sort Rule',\n\t\t\t\t\tdescription: 'Defines how the returned records should be ordered',\n\t\t\t\t\ttype: 'fixedCollection',\n\t\t\t\t\ttypeOptions: {\n\t\t\t\t\t\tmultipleValues: true,\n\t\t\t\t\t},\n\t\t\t\t\tdefault: {},\n\t\t\t\t\toptions: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'property',\n\t\t\t\t\t\t\tdisplayName: 'Property',\n\t\t\t\t\t\t\tvalues: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tdisplayName: 'Field',\n\t\t\t\t\t\t\t\t\tname: 'field',\n\t\t\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\t\t\t\tdescription: 'Name of the field to sort on',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tdisplayName: 'Direction',\n\t\t\t\t\t\t\t\t\tname: 'direction',\n\t\t\t\t\t\t\t\t\ttype: 'options',\n\t\t\t\t\t\t\t\t\toptions: [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tname: 'ASC',\n\t\t\t\t\t\t\t\t\t\t\tvalue: 'asc',\n\t\t\t\t\t\t\t\t\t\t\tdescription: 'Sort in ascending order (small -> large)',\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tname: 'DESC',\n\t\t\t\t\t\t\t\t\t\t\tvalue: 'desc',\n\t\t\t\t\t\t\t\t\t\t\tdescription: 'Sort in descending order (large -> small)',\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\tdefault: 'asc',\n\t\t\t\t\t\t\t\t\tdescription: 'The sort direction',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'View',\n\t\t\t\t\tname: 'view',\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tdefault: '',\n\t\t\t\t\tplaceholder: 'All Stories',\n\t\t\t\t\tdescription:\n\t\t\t\t\t\t'The name or ID of a view in the Stories table. If set, only the records in that view will be returned. The records will be sorted according to the order of the view.',\n\t\t\t\t},\n\t\t\t],\n\t\t},\n\n\t\t// ----------------------------------\n\t\t//         read\n\t\t// ----------------------------------\n\t\t{\n\t\t\tdisplayName: 'ID',\n\t\t\tname: 'id',\n\t\t\ttype: 'string',\n\t\t\tdisplayOptions: {\n\t\t\t\tshow: {\n\t\t\t\t\toperation: ['read'],\n\t\t\t\t},\n\t\t\t},\n\t\t\tdefault: '',\n\t\t\trequired: true,\n\t\t\tdescription: 'ID of the record to return',\n\t\t},\n\n\t\t// ----------------------------------\n\t\t//         update\n\t\t// ----------------------------------\n\t\t{\n\t\t\tdisplayName: 'ID',\n\t\t\tname: 'id',\n\t\t\ttype: 'string',\n\t\t\tdisplayOptions: {\n\t\t\t\tshow: {\n\t\t\t\t\toperation: ['update'],\n\t\t\t\t},\n\t\t\t},\n\t\t\tdefault: '',\n\t\t\trequired: true,\n\t\t\tdescription: 'ID of the record to update',\n\t\t},\n\t\t{\n\t\t\tdisplayName: 'Update All Fields',\n\t\t\tname: 'updateAllFields',\n\t\t\ttype: 'boolean',\n\t\t\tdisplayOptions: {\n\t\t\t\tshow: {\n\t\t\t\t\toperation: ['update'],\n\t\t\t\t},\n\t\t\t},\n\t\t\tdefault: true,\n\t\t\tdescription: 'Whether all fields should be sent to Airtable or only specific ones',\n\t\t},\n\t\t{\n\t\t\tdisplayName: 'Fields',\n\t\t\tname: 'fields',\n\t\t\ttype: 'string',\n\t\t\ttypeOptions: {\n\t\t\t\tmultipleValues: true,\n\t\t\t\tmultipleValueButtonText: 'Add Field',\n\t\t\t},\n\t\t\trequiresDataPath: 'single',\n\t\t\tdisplayOptions: {\n\t\t\t\tshow: {\n\t\t\t\t\tupdateAllFields: [false],\n\t\t\t\t\toperation: ['update'],\n\t\t\t\t},\n\t\t\t},\n\t\t\tdefault: [],\n\t\t\tplaceholder: 'Name',\n\t\t\trequired: true,\n\t\t\tdescription: 'The name of fields for which data should be sent to Airtable',\n\t\t},\n\n\t\t// ----------------------------------\n\t\t//         append + delete + update\n\t\t// ----------------------------------\n\t\t{\n\t\t\tdisplayName: 'Options',\n\t\t\tname: 'options',\n\t\t\ttype: 'collection',\n\t\t\tplaceholder: 'Add option',\n\t\t\tdisplayOptions: {\n\t\t\t\tshow: {\n\t\t\t\t\toperation: ['append', 'delete', 'update'],\n\t\t\t\t},\n\t\t\t},\n\t\t\tdefault: {},\n\t\t\toptions: [\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'Bulk Size',\n\t\t\t\t\tname: 'bulkSize',\n\t\t\t\t\ttype: 'number',\n\t\t\t\t\ttypeOptions: {\n\t\t\t\t\t\tminValue: 1,\n\t\t\t\t\t\tmaxValue: 10,\n\t\t\t\t\t},\n\t\t\t\t\tdefault: 10,\n\t\t\t\t\tdescription: 'Number of records to process at once',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'Ignore Fields',\n\t\t\t\t\tname: 'ignoreFields',\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\trequiresDataPath: 'multiple',\n\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\t'/operation': ['update'],\n\t\t\t\t\t\t\t'/updateAllFields': [true],\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tdefault: '',\n\t\t\t\t\tdescription: 'Comma-separated list of fields to ignore',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'Typecast',\n\t\t\t\t\tname: 'typecast',\n\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\t'/operation': ['append', 'update'],\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tdefault: false,\n\t\t\t\t\tdescription:\n\t\t\t\t\t\t'Whether the Airtable API should attempt mapping of string values for linked records & select options',\n\t\t\t\t},\n\t\t\t],\n\t\t},\n\t],\n};\n\nexport class AirtableV1 implements INodeType {\n\tdescription: INodeTypeDescription;\n\n\tconstructor(baseDescription: INodeTypeBaseDescription) {\n\t\tthis.description = {\n\t\t\t...baseDescription,\n\t\t\t...versionDescription,\n\t\t};\n\t}\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t\tconst authentication = this.getNodeParameter('authentication', 0);\n\t\tif (authentication === 'airtableApi') {\n\t\t\tthrow new NodeOperationError(\n\t\t\t\tthis.getNode(),\n\t\t\t\t'The API Key connection was deprecated by Airtable, please use Access Token or OAuth2 instead.',\n\t\t\t);\n\t\t}\n\t\tconst items = this.getInputData();\n\t\tconst returnData: INodeExecutionData[] = [];\n\t\tlet responseData;\n\n\t\tconst operation = this.getNodeParameter('operation', 0);\n\n\t\tconst application = this.getNodeParameter('application', 0, undefined, {\n\t\t\textractValue: true,\n\t\t}) as string;\n\n\t\tconst table = encodeURI(\n\t\t\tthis.getNodeParameter('table', 0, undefined, {\n\t\t\t\textractValue: true,\n\t\t\t}) as string,\n\t\t);\n\n\t\tlet returnAll = false;\n\t\tlet endpoint = '';\n\t\tlet requestMethod: IHttpRequestMethods;\n\n\t\tconst body: IDataObject = {};\n\t\tconst qs: IDataObject = {};\n\n\t\tif (operation === 'append') {\n\t\t\t// ----------------------------------\n\t\t\t//         append\n\t\t\t// ----------------------------------\n\n\t\t\trequestMethod = 'POST';\n\t\t\tendpoint = `${application}/${table}`;\n\n\t\t\tlet addAllFields: boolean;\n\t\t\tlet fields: string[];\n\t\t\tlet options: IDataObject;\n\n\t\t\tconst rows: IDataObject[] = [];\n\t\t\tlet bulkSize = 10;\n\n\t\t\tfor (let i = 0; i < items.length; i++) {\n\t\t\t\ttry {\n\t\t\t\t\taddAllFields = this.getNodeParameter('addAllFields', i) as boolean;\n\t\t\t\t\toptions = this.getNodeParameter('options', i, {});\n\t\t\t\t\tbulkSize = (options.bulkSize as number) || bulkSize;\n\n\t\t\t\t\tconst row: IDataObject = {};\n\n\t\t\t\t\tif (addAllFields) {\n\t\t\t\t\t\t// Add all the fields the item has\n\t\t\t\t\t\trow.fields = { ...items[i].json };\n\t\t\t\t\t\tdelete (row.fields as any).id;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Add only the specified fields\n\t\t\t\t\t\tconst rowFields: IDataObject = {};\n\n\t\t\t\t\t\tfields = this.getNodeParameter('fields', i, []) as string[];\n\n\t\t\t\t\t\tfor (const fieldName of fields) {\n\t\t\t\t\t\t\trowFields[fieldName] = items[i].json[fieldName];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\trow.fields = rowFields;\n\t\t\t\t\t}\n\n\t\t\t\t\trows.push(row);\n\n\t\t\t\t\tif (rows.length === bulkSize || i === items.length - 1) {\n\t\t\t\t\t\tif (options.typecast === true) {\n\t\t\t\t\t\t\tbody.typecast = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbody.records = rows;\n\n\t\t\t\t\t\tresponseData = await apiRequest.call(this, requestMethod, endpoint, body, qs);\n\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData.records as IDataObject[]),\n\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t\t// empty rows\n\t\t\t\t\t\trows.length = 0;\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\t\treturnData.push({ json: { error: error.message } });\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (operation === 'delete') {\n\t\t\trequestMethod = 'DELETE';\n\n\t\t\tconst rows: string[] = [];\n\t\t\tconst options = this.getNodeParameter('options', 0, {});\n\t\t\tconst bulkSize = (options.bulkSize as number) || 10;\n\n\t\t\tfor (let i = 0; i < items.length; i++) {\n\t\t\t\ttry {\n\t\t\t\t\tconst id = this.getNodeParameter('id', i) as string;\n\n\t\t\t\t\trows.push(id);\n\n\t\t\t\t\tif (rows.length === bulkSize || i === items.length - 1) {\n\t\t\t\t\t\tendpoint = `${application}/${table}`;\n\n\t\t\t\t\t\t// Make one request after another. This is slower but makes\n\t\t\t\t\t\t// sure that we do not run into the rate limit they have in\n\t\t\t\t\t\t// place and so block for 30 seconds. Later some global\n\t\t\t\t\t\t// functionality in core should make it easy to make requests\n\t\t\t\t\t\t// according to specific rules like not more than 5 requests\n\t\t\t\t\t\t// per seconds.\n\t\t\t\t\t\tqs.records = rows;\n\n\t\t\t\t\t\tresponseData = await apiRequest.call(this, requestMethod, endpoint, body, qs);\n\n\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData.records as IDataObject[]),\n\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t\t// empty rows\n\t\t\t\t\t\trows.length = 0;\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\t\treturnData.push({ json: { error: error.message } });\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (operation === 'list') {\n\t\t\t// ----------------------------------\n\t\t\t//         list\n\t\t\t// ----------------------------------\n\t\t\ttry {\n\t\t\t\trequestMethod = 'GET';\n\t\t\t\tendpoint = `${application}/${table}`;\n\n\t\t\t\treturnAll = this.getNodeParameter('returnAll', 0);\n\n\t\t\t\tconst downloadAttachments = this.getNodeParameter('downloadAttachments', 0);\n\n\t\t\t\tconst additionalOptions = this.getNodeParameter('additionalOptions', 0, {}) as IDataObject;\n\n\t\t\t\tfor (const key of Object.keys(additionalOptions)) {\n\t\t\t\t\tif (key === 'sort' && (additionalOptions.sort as IDataObject).property !== undefined) {\n\t\t\t\t\t\tqs[key] = (additionalOptions[key] as IDataObject).property;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tqs[key] = additionalOptions[key];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (returnAll) {\n\t\t\t\t\tresponseData = await apiRequestAllItems.call(this, requestMethod, endpoint, body, qs);\n\t\t\t\t} else {\n\t\t\t\t\tqs.maxRecords = this.getNodeParameter('limit', 0);\n\t\t\t\t\tresponseData = await apiRequest.call(this, requestMethod, endpoint, body, qs);\n\t\t\t\t}\n\n\t\t\t\treturnData.push.apply(returnData, responseData.records as INodeExecutionData[]);\n\n\t\t\t\tif (downloadAttachments === true) {\n\t\t\t\t\tconst downloadFieldNames = (\n\t\t\t\t\t\tthis.getNodeParameter('downloadFieldNames', 0) as string\n\t\t\t\t\t).split(',');\n\t\t\t\t\tconst pairedItem = generatePairedItemData(items.length);\n\t\t\t\t\tconst data = await downloadRecordAttachments.call(\n\t\t\t\t\t\tthis,\n\t\t\t\t\t\tresponseData.records as IRecord[],\n\t\t\t\t\t\tdownloadFieldNames,\n\t\t\t\t\t\tpairedItem,\n\t\t\t\t\t);\n\t\t\t\t\treturn [data];\n\t\t\t\t}\n\n\t\t\t\t// We can return from here\n\t\t\t\tconst itemData = generatePairedItemData(items.length);\n\n\t\t\t\treturn [\n\t\t\t\t\tthis.helpers.constructExecutionMetaData(this.helpers.returnJsonArray(returnData), {\n\t\t\t\t\t\titemData,\n\t\t\t\t\t}),\n\t\t\t\t];\n\t\t\t} catch (error) {\n\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\treturnData.push({ json: { error: error.message } });\n\t\t\t\t} else {\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (operation === 'read') {\n\t\t\t// ----------------------------------\n\t\t\t//         read\n\t\t\t// ----------------------------------\n\n\t\t\trequestMethod = 'GET';\n\n\t\t\tlet id: string;\n\t\t\tfor (let i = 0; i < items.length; i++) {\n\t\t\t\tid = this.getNodeParameter('id', i) as string;\n\n\t\t\t\tendpoint = `${application}/${table}/${id}`;\n\n\t\t\t\t// Make one request after another. This is slower but makes\n\t\t\t\t// sure that we do not run into the rate limit they have in\n\t\t\t\t// place and so block for 30 seconds. Later some global\n\t\t\t\t// functionality in core should make it easy to make requests\n\t\t\t\t// according to specific rules like not more than 5 requests\n\t\t\t\t// per seconds.\n\t\t\t\ttry {\n\t\t\t\t\tresponseData = await apiRequest.call(this, requestMethod, endpoint, body, qs);\n\n\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t);\n\n\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t} catch (error) {\n\t\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\t\treturnData.push({ json: { error: error.message } });\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (operation === 'update') {\n\t\t\t// ----------------------------------\n\t\t\t//         update\n\t\t\t// ----------------------------------\n\n\t\t\trequestMethod = 'PATCH';\n\n\t\t\tlet updateAllFields: boolean;\n\t\t\tlet fields: string[];\n\t\t\tlet options: IDataObject;\n\n\t\t\tconst rows: IDataObject[] = [];\n\t\t\tlet bulkSize = 10;\n\n\t\t\tfor (let i = 0; i < items.length; i++) {\n\t\t\t\ttry {\n\t\t\t\t\tupdateAllFields = this.getNodeParameter('updateAllFields', i) as boolean;\n\t\t\t\t\toptions = this.getNodeParameter('options', i, {});\n\t\t\t\t\tbulkSize = (options.bulkSize as number) || bulkSize;\n\n\t\t\t\t\tconst row: IDataObject = {};\n\t\t\t\t\trow.fields = {} as IDataObject;\n\n\t\t\t\t\tif (updateAllFields) {\n\t\t\t\t\t\t// Update all the fields the item has\n\t\t\t\t\t\trow.fields = { ...items[i].json };\n\t\t\t\t\t\t// remove id field\n\t\t\t\t\t\tdelete (row.fields as any).id;\n\n\t\t\t\t\t\tif (options.ignoreFields && options.ignoreFields !== '') {\n\t\t\t\t\t\t\tconst ignoreFields = (options.ignoreFields as string)\n\t\t\t\t\t\t\t\t.split(',')\n\t\t\t\t\t\t\t\t.map((field) => field.trim())\n\t\t\t\t\t\t\t\t.filter((field) => !!field);\n\t\t\t\t\t\t\tif (ignoreFields.length) {\n\t\t\t\t\t\t\t\t// From: https://stackoverflow.com/questions/17781472/how-to-get-a-subset-of-a-javascript-objects-properties\n\t\t\t\t\t\t\t\trow.fields = Object.entries(items[i].json)\n\t\t\t\t\t\t\t\t\t.filter(([key]) => !ignoreFields.includes(key))\n\t\t\t\t\t\t\t\t\t.reduce((obj, [key, val]) => Object.assign(obj, { [key]: val }), {});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfields = this.getNodeParameter('fields', i, []) as string[];\n\n\t\t\t\t\t\tconst rowFields: IDataObject = {};\n\t\t\t\t\t\tfor (const fieldName of fields) {\n\t\t\t\t\t\t\trowFields[fieldName] = items[i].json[fieldName];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\trow.fields = rowFields;\n\t\t\t\t\t}\n\n\t\t\t\t\trow.id = this.getNodeParameter('id', i) as string;\n\n\t\t\t\t\trows.push(row);\n\n\t\t\t\t\tif (rows.length === bulkSize || i === items.length - 1) {\n\t\t\t\t\t\tendpoint = `${application}/${table}`;\n\n\t\t\t\t\t\t// Make one request after another. This is slower but makes\n\t\t\t\t\t\t// sure that we do not run into the rate limit they have in\n\t\t\t\t\t\t// place and so block for 30 seconds. Later some global\n\t\t\t\t\t\t// functionality in core should make it easy to make requests\n\t\t\t\t\t\t// according to specific rules like not more than 5 requests\n\t\t\t\t\t\t// per seconds.\n\n\t\t\t\t\t\tconst data = { records: rows, typecast: options.typecast ? true : false };\n\n\t\t\t\t\t\tresponseData = await apiRequest.call(this, requestMethod, endpoint, data, qs);\n\n\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData.records as IDataObject[]),\n\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\treturnData.push(...executionData);\n\n\t\t\t\t\t\t// empty rows\n\t\t\t\t\t\trows.length = 0;\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\t\treturnData.push({ json: { error: error.message } });\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new NodeOperationError(this.getNode(), `The operation \"${operation}\" is not known!`);\n\t\t}\n\n\t\treturn [returnData];\n\t}\n}\n"],"mappings":"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","names":[]}