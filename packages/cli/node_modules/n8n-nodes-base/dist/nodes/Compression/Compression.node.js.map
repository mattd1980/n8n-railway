{"version":3,"sources":["../../../nodes/Compression/Compression.node.ts"],"sourcesContent":["import * as fflate from 'fflate';\nimport * as mime from 'mime-types';\nimport {\n\tNodeConnectionTypes,\n\ttype IBinaryKeyData,\n\ttype IExecuteFunctions,\n\ttype INodeExecutionData,\n\ttype INodeType,\n\ttype INodeTypeDescription,\n} from 'n8n-workflow';\nimport { promisify } from 'util';\n\nconst gunzip = promisify(fflate.gunzip);\nconst gzip = promisify(fflate.gzip);\nconst unzip = promisify(fflate.unzip);\nconst zip = promisify(fflate.zip);\n\nconst ALREADY_COMPRESSED = [\n\t'7z',\n\t'aifc',\n\t'bz2',\n\t'doc',\n\t'docx',\n\t'gif',\n\t'gz',\n\t'heic',\n\t'heif',\n\t'jpg',\n\t'jpeg',\n\t'mov',\n\t'mp3',\n\t'mp4',\n\t'pdf',\n\t'png',\n\t'ppt',\n\t'pptx',\n\t'rar',\n\t'webm',\n\t'webp',\n\t'xls',\n\t'xlsx',\n\t'zip',\n];\n\nexport class Compression implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'Compression',\n\t\tname: 'compression',\n\t\ticon: 'fa:file-archive',\n\t\ticonColor: 'green',\n\t\tgroup: ['transform'],\n\t\tsubtitle: '={{$parameter[\"operation\"]}}',\n\t\tversion: [1, 1.1],\n\t\tdescription: 'Compress and decompress files',\n\t\tdefaults: {\n\t\t\tname: 'Compression',\n\t\t\tcolor: '#408000',\n\t\t},\n\t\tusableAsTool: true,\n\t\tinputs: [NodeConnectionTypes.Main],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Operation',\n\t\t\t\tname: 'operation',\n\t\t\t\ttype: 'options',\n\t\t\t\tnoDataExpression: true,\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Compress',\n\t\t\t\t\t\tvalue: 'compress',\n\t\t\t\t\t\taction: 'Compress file(s)',\n\t\t\t\t\t\tdescription: 'Compress files into a zip or gzip archive',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Decompress',\n\t\t\t\t\t\tvalue: 'decompress',\n\t\t\t\t\t\taction: 'Decompress file(s)',\n\t\t\t\t\t\tdescription: 'Decompress zip or gzip archives',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'decompress',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Input Binary Field(s)',\n\t\t\t\tname: 'binaryPropertyName',\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: 'data',\n\t\t\t\trequired: true,\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['compress'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tplaceholder: 'e.g. data,data2,data3',\n\t\t\t\thint: 'The name of the input binary field(s) containing the file(s) to be compressed',\n\t\t\t\tdescription:\n\t\t\t\t\t'To process more than one file, use a comma-separated list of the binary fields names',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Input Binary Field(s)',\n\t\t\t\tname: 'binaryPropertyName',\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: 'data',\n\t\t\t\trequired: true,\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['decompress'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tplaceholder: 'e.g. data',\n\t\t\t\thint: 'The name of the input binary field(s) containing the file(s) to decompress',\n\t\t\t\tdescription:\n\t\t\t\t\t'To process more than one file, use a comma-separated list of the binary fields names',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Output Format',\n\t\t\t\tname: 'outputFormat',\n\t\t\t\ttype: 'options',\n\t\t\t\tdefault: '',\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Gzip',\n\t\t\t\t\t\tvalue: 'gzip',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Zip',\n\t\t\t\t\t\tvalue: 'zip',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['compress'],\n\t\t\t\t\t\t'@version': [1],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdescription: 'Format of the output',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Output Format',\n\t\t\t\tname: 'outputFormat',\n\t\t\t\ttype: 'options',\n\t\t\t\tdefault: 'zip',\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Gzip',\n\t\t\t\t\t\tvalue: 'gzip',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Zip',\n\t\t\t\t\t\tvalue: 'zip',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['compress'],\n\t\t\t\t\t},\n\t\t\t\t\thide: {\n\t\t\t\t\t\t'@version': [1],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdescription: 'Format of the output',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'File Name',\n\t\t\t\tname: 'fileName',\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: '',\n\t\t\t\tplaceholder: 'e.g. data.zip',\n\t\t\t\trequired: true,\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['compress'],\n\t\t\t\t\t\toutputFormat: ['zip'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdescription: 'Name of the output file',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Put Output File in Field',\n\t\t\t\tname: 'binaryPropertyOutput',\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: 'data',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toutputFormat: ['zip'],\n\t\t\t\t\t\toperation: ['compress'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\thint: 'The name of the output binary field to put the file in',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'File Name',\n\t\t\t\tname: 'fileName',\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: '',\n\t\t\t\tplaceholder: 'e.g. data.txt',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['compress'],\n\t\t\t\t\t\toutputFormat: ['gzip'],\n\t\t\t\t\t},\n\t\t\t\t\thide: {\n\t\t\t\t\t\t'@version': [1],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdescription: 'Name of the output file',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Put Output File in Field',\n\t\t\t\tname: 'binaryPropertyOutput',\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: 'data',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toutputFormat: ['gzip'],\n\t\t\t\t\t\toperation: ['compress'],\n\t\t\t\t\t},\n\t\t\t\t\thide: {\n\t\t\t\t\t\t'@version': [1],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\thint: 'The name of the output binary field to put the file in',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Output File Prefix',\n\t\t\t\tname: 'outputPrefix',\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: 'data',\n\t\t\t\trequired: true,\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['compress'],\n\t\t\t\t\t\toutputFormat: ['gzip'],\n\t\t\t\t\t\t'@version': [1],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdescription: 'Prefix to add to the gzip file',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Output Prefix',\n\t\t\t\tname: 'outputPrefix',\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: 'file_',\n\t\t\t\trequired: true,\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['decompress'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdescription: 'Prefix to add to the decompressed files',\n\t\t\t},\n\t\t],\n\t};\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t\tconst items = this.getInputData();\n\t\tconst length = items.length;\n\t\tconst returnData: INodeExecutionData[] = [];\n\t\tconst operation = this.getNodeParameter('operation', 0);\n\t\tconst nodeVersion = this.getNode().typeVersion;\n\n\t\tfor (let i = 0; i < length; i++) {\n\t\t\ttry {\n\t\t\t\tif (operation === 'decompress') {\n\t\t\t\t\tconst binaryPropertyNames = this.getNodeParameter('binaryPropertyName', 0)\n\t\t\t\t\t\t.split(',')\n\t\t\t\t\t\t.map((key) => key.trim());\n\n\t\t\t\t\tconst outputPrefix = this.getNodeParameter('outputPrefix', 0) as string;\n\n\t\t\t\t\tconst binaryObject: IBinaryKeyData = {};\n\n\t\t\t\t\tlet zipIndex = 0;\n\n\t\t\t\t\tfor (const [index, binaryPropertyName] of binaryPropertyNames.entries()) {\n\t\t\t\t\t\tconst binaryData = this.helpers.assertBinaryData(i, binaryPropertyName);\n\t\t\t\t\t\tconst binaryDataBuffer = await this.helpers.getBinaryDataBuffer(i, binaryPropertyName);\n\n\t\t\t\t\t\tif (binaryData.fileExtension?.toLowerCase() === 'zip') {\n\t\t\t\t\t\t\tconst files = await unzip(binaryDataBuffer);\n\n\t\t\t\t\t\t\tfor (const key of Object.keys(files)) {\n\t\t\t\t\t\t\t\t// when files are compressed using MACOSX for some reason they are duplicated under __MACOSX\n\t\t\t\t\t\t\t\tif (key.includes('__MACOSX')) {\n\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tconst data = await this.helpers.prepareBinaryData(\n\t\t\t\t\t\t\t\t\tBuffer.from(files[key].buffer),\n\t\t\t\t\t\t\t\t\tkey,\n\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\tbinaryObject[`${outputPrefix}${zipIndex++}`] = data;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (['gz', 'gzip'].includes(binaryData.fileExtension?.toLowerCase() as string)) {\n\t\t\t\t\t\t\tconst file = await gunzip(binaryDataBuffer);\n\n\t\t\t\t\t\t\tconst fileName = binaryData.fileName?.split('.')[0];\n\t\t\t\t\t\t\tlet fileExtension;\n\t\t\t\t\t\t\tlet mimeType;\n\n\t\t\t\t\t\t\tif (binaryData.fileName?.endsWith('.gz')) {\n\t\t\t\t\t\t\t\tconst extractedFileExtension = binaryData.fileName.replace('.gz', '').split('.');\n\t\t\t\t\t\t\t\tif (extractedFileExtension.length > 1) {\n\t\t\t\t\t\t\t\t\tfileExtension = extractedFileExtension[extractedFileExtension.length - 1];\n\t\t\t\t\t\t\t\t\tmimeType = mime.lookup(fileExtension) as string;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tconst propertyName = `${outputPrefix}${index}`;\n\n\t\t\t\t\t\t\tbinaryObject[propertyName] = await this.helpers.prepareBinaryData(\n\t\t\t\t\t\t\t\tBuffer.from(file.buffer),\n\t\t\t\t\t\t\t\tfileName,\n\t\t\t\t\t\t\t\tmimeType,\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tif (!fileExtension) {\n\t\t\t\t\t\t\t\tmimeType = binaryObject[propertyName].mimeType;\n\t\t\t\t\t\t\t\tfileExtension = mime.extension(mimeType) as string;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbinaryObject[propertyName].fileName = `${fileName}.${fileExtension}`;\n\t\t\t\t\t\t\tbinaryObject[propertyName].fileExtension = fileExtension;\n\t\t\t\t\t\t\tbinaryObject[propertyName].mimeType = mimeType as string;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturnData.push({\n\t\t\t\t\t\tjson: items[i].json,\n\t\t\t\t\t\tbinary: binaryObject,\n\t\t\t\t\t\tpairedItem: {\n\t\t\t\t\t\t\titem: i,\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tif (operation === 'compress') {\n\t\t\t\t\tlet binaryPropertyNameIndex = 0;\n\t\t\t\t\tif (nodeVersion > 1) {\n\t\t\t\t\t\tbinaryPropertyNameIndex = i;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst binaryPropertyNames = this.getNodeParameter(\n\t\t\t\t\t\t'binaryPropertyName',\n\t\t\t\t\t\tbinaryPropertyNameIndex,\n\t\t\t\t\t)\n\t\t\t\t\t\t.split(',')\n\t\t\t\t\t\t.map((key) => key.trim());\n\n\t\t\t\t\tconst outputFormat = this.getNodeParameter('outputFormat', 0) as string;\n\n\t\t\t\t\tconst zipData: fflate.Zippable = {};\n\t\t\t\t\tconst binaryObject: IBinaryKeyData = {};\n\n\t\t\t\t\tfor (const [index, binaryPropertyName] of binaryPropertyNames.entries()) {\n\t\t\t\t\t\tconst binaryData = this.helpers.assertBinaryData(i, binaryPropertyName);\n\t\t\t\t\t\tconst binaryDataBuffer = await this.helpers.getBinaryDataBuffer(i, binaryPropertyName);\n\n\t\t\t\t\t\tif (outputFormat === 'zip') {\n\t\t\t\t\t\t\tzipData[binaryData.fileName as string] = [\n\t\t\t\t\t\t\t\tbinaryDataBuffer,\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tlevel: ALREADY_COMPRESSED.includes(binaryData.fileExtension as string) ? 0 : 6,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t];\n\t\t\t\t\t\t} else if (outputFormat === 'gzip') {\n\t\t\t\t\t\t\tlet outputPrefix;\n\t\t\t\t\t\t\tlet fileName;\n\t\t\t\t\t\t\tlet binaryProperty;\n\t\t\t\t\t\t\tlet filePath;\n\n\t\t\t\t\t\t\tif (nodeVersion > 1) {\n\t\t\t\t\t\t\t\toutputPrefix = this.getNodeParameter('binaryPropertyOutput', i, 'data');\n\t\t\t\t\t\t\t\tbinaryProperty = `${outputPrefix}${index ? index : ''}`;\n\n\t\t\t\t\t\t\t\tfileName = this.getNodeParameter('fileName', i, '') as string;\n\t\t\t\t\t\t\t\tif (!fileName) {\n\t\t\t\t\t\t\t\t\tfileName = binaryData.fileName?.split('.')[0];\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tfileName = fileName.replace('.gz', '').replace('.gzip', '');\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tconst fileExtension = binaryData.fileExtension\n\t\t\t\t\t\t\t\t\t? `.${binaryData.fileExtension.toLowerCase()}`\n\t\t\t\t\t\t\t\t\t: '';\n\t\t\t\t\t\t\t\tfilePath = `${fileName}${fileExtension}.gz`;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\toutputPrefix = this.getNodeParameter('outputPrefix', 0) as string;\n\t\t\t\t\t\t\t\tbinaryProperty = `${outputPrefix}${index}`;\n\t\t\t\t\t\t\t\tfileName = binaryData.fileName?.split('.')[0];\n\t\t\t\t\t\t\t\tfilePath = `${fileName}.gzip`;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tconst data = await gzip(binaryDataBuffer);\n\n\t\t\t\t\t\t\tbinaryObject[binaryProperty] = await this.helpers.prepareBinaryData(\n\t\t\t\t\t\t\t\tBuffer.from(data),\n\t\t\t\t\t\t\t\tfilePath,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (outputFormat === 'zip') {\n\t\t\t\t\t\tlet zipOptionsIndex = 0;\n\t\t\t\t\t\tif (nodeVersion > 1) {\n\t\t\t\t\t\t\tzipOptionsIndex = i;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst fileName = this.getNodeParameter('fileName', zipOptionsIndex) as string;\n\t\t\t\t\t\tconst binaryPropertyOutput = this.getNodeParameter(\n\t\t\t\t\t\t\t'binaryPropertyOutput',\n\t\t\t\t\t\t\tzipOptionsIndex,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tconst buffer = await zip(zipData);\n\t\t\t\t\t\tconst data = await this.helpers.prepareBinaryData(Buffer.from(buffer), fileName);\n\n\t\t\t\t\t\treturnData.push({\n\t\t\t\t\t\t\tjson: items[i].json,\n\t\t\t\t\t\t\tbinary: {\n\t\t\t\t\t\t\t\t[binaryPropertyOutput]: data,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tpairedItem: {\n\t\t\t\t\t\t\t\titem: i,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\tif (outputFormat === 'gzip') {\n\t\t\t\t\t\treturnData.push({\n\t\t\t\t\t\t\tjson: items[i].json,\n\t\t\t\t\t\t\tbinary: binaryObject,\n\t\t\t\t\t\t\tpairedItem: {\n\t\t\t\t\t\t\t\titem: i,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\treturnData.push({\n\t\t\t\t\t\tjson: {\n\t\t\t\t\t\t\terror: error.message,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tpairedItem: {\n\t\t\t\t\t\t\titem: i,\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\n\t\treturn [returnData];\n\t}\n}\n"],"mappings":"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","names":[]}