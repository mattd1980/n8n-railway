{"version":3,"sources":["../../../nodes/Grist/Grist.node.ts"],"sourcesContent":["import {\n\ttype IExecuteFunctions,\n\ttype ICredentialsDecrypted,\n\ttype ICredentialTestFunctions,\n\ttype IDataObject,\n\ttype ILoadOptionsFunctions,\n\ttype INodeCredentialTestResult,\n\ttype INodeExecutionData,\n\ttype INodeType,\n\ttype INodeTypeDescription,\n\ttype IRequestOptions,\n\tNodeConnectionTypes,\n} from 'n8n-workflow';\n\nimport {\n\tgristApiRequest,\n\tparseAutoMappedInputs,\n\tparseDefinedFields,\n\tparseFilterProperties,\n\tparseSortProperties,\n\tthrowOnZeroDefinedFields,\n} from './GenericFunctions';\nimport { operationFields } from './OperationDescription';\nimport type {\n\tFieldsToSend,\n\tGristColumns,\n\tGristCreateRowPayload,\n\tGristCredentials,\n\tGristGetAllOptions,\n\tGristUpdateRowPayload,\n\tSendingOptions,\n} from './types';\n\nexport class Grist implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'Grist',\n\t\tname: 'grist',\n\t\ticon: 'file:grist.svg',\n\t\tsubtitle: '={{$parameter[\"operation\"]}}',\n\t\tgroup: ['input'],\n\t\tversion: 1,\n\t\tdescription: 'Consume the Grist API',\n\t\tdefaults: {\n\t\t\tname: 'Grist',\n\t\t},\n\t\tusableAsTool: true,\n\t\tinputs: [NodeConnectionTypes.Main],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tcredentials: [\n\t\t\t{\n\t\t\t\tname: 'gristApi',\n\t\t\t\trequired: true,\n\t\t\t\ttestedBy: 'gristApiTest',\n\t\t\t},\n\t\t],\n\t\tproperties: operationFields,\n\t};\n\n\tmethods = {\n\t\tloadOptions: {\n\t\t\tasync getTableColumns(this: ILoadOptionsFunctions) {\n\t\t\t\tconst docId = this.getNodeParameter('docId', 0) as string;\n\t\t\t\tconst tableId = this.getNodeParameter('tableId', 0) as string;\n\t\t\t\tconst endpoint = `/docs/${docId}/tables/${tableId}/columns`;\n\n\t\t\t\tconst { columns } = (await gristApiRequest.call(this, 'GET', endpoint)) as GristColumns;\n\t\t\t\treturn columns.map(({ id }) => ({ name: id, value: id }));\n\t\t\t},\n\t\t},\n\n\t\tcredentialTest: {\n\t\t\tasync gristApiTest(\n\t\t\t\tthis: ICredentialTestFunctions,\n\t\t\t\tcredential: ICredentialsDecrypted,\n\t\t\t): Promise<INodeCredentialTestResult> {\n\t\t\t\tconst { apiKey, planType, customSubdomain, selfHostedUrl } =\n\t\t\t\t\tcredential.data as GristCredentials;\n\n\t\t\t\tconst endpoint = '/orgs';\n\n\t\t\t\tconst gristapiurl =\n\t\t\t\t\tplanType === 'free'\n\t\t\t\t\t\t? `https://docs.getgrist.com/api${endpoint}`\n\t\t\t\t\t\t: planType === 'paid'\n\t\t\t\t\t\t\t? `https://${customSubdomain}.getgrist.com/api${endpoint}`\n\t\t\t\t\t\t\t: `${selfHostedUrl}/api${endpoint}`;\n\n\t\t\t\tconst options: IRequestOptions = {\n\t\t\t\t\theaders: {\n\t\t\t\t\t\tAuthorization: `Bearer ${apiKey}`,\n\t\t\t\t\t},\n\t\t\t\t\tmethod: 'GET',\n\t\t\t\t\turi: gristapiurl,\n\t\t\t\t\tqs: { limit: 1 },\n\t\t\t\t\tjson: true,\n\t\t\t\t};\n\n\t\t\t\ttry {\n\t\t\t\t\tawait this.helpers.request(options);\n\t\t\t\t\treturn {\n\t\t\t\t\t\tstatus: 'OK',\n\t\t\t\t\t\tmessage: 'Authentication successful',\n\t\t\t\t\t};\n\t\t\t\t} catch (error) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tstatus: 'Error',\n\t\t\t\t\t\tmessage: error.message,\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t},\n\t\t},\n\t};\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t\tconst items = this.getInputData();\n\t\tlet responseData;\n\t\tconst returnData: INodeExecutionData[] = [];\n\n\t\tconst operation = this.getNodeParameter('operation', 0);\n\n\t\tfor (let i = 0; i < items.length; i++) {\n\t\t\ttry {\n\t\t\t\tif (operation === 'create') {\n\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t//             create\n\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t// https://support.getgrist.com/api/#tag/records/paths/~1docs~1{docId}~1tables~1{tableId}~1records/post\n\n\t\t\t\t\tconst body = { records: [] } as GristCreateRowPayload;\n\n\t\t\t\t\tconst dataToSend = this.getNodeParameter('dataToSend', 0) as SendingOptions;\n\n\t\t\t\t\tif (dataToSend === 'autoMapInputs') {\n\t\t\t\t\t\tconst incomingKeys = Object.keys(items[i].json);\n\t\t\t\t\t\tconst rawInputsToIgnore = this.getNodeParameter('inputsToIgnore', i) as string;\n\t\t\t\t\t\tconst inputsToIgnore = rawInputsToIgnore.split(',').map((c) => c.trim());\n\t\t\t\t\t\tconst fields = parseAutoMappedInputs(incomingKeys, inputsToIgnore, items[i].json);\n\t\t\t\t\t\tbody.records.push({ fields });\n\t\t\t\t\t} else if (dataToSend === 'defineInNode') {\n\t\t\t\t\t\tconst { properties } = this.getNodeParameter('fieldsToSend', i, []) as FieldsToSend;\n\t\t\t\t\t\tthrowOnZeroDefinedFields.call(this, properties);\n\t\t\t\t\t\tbody.records.push({ fields: parseDefinedFields(properties) });\n\t\t\t\t\t}\n\n\t\t\t\t\tconst docId = this.getNodeParameter('docId', 0) as string;\n\t\t\t\t\tconst tableId = this.getNodeParameter('tableId', 0) as string;\n\t\t\t\t\tconst endpoint = `/docs/${docId}/tables/${tableId}/records`;\n\n\t\t\t\t\tresponseData = await gristApiRequest.call(this, 'POST', endpoint, body);\n\t\t\t\t\tresponseData = {\n\t\t\t\t\t\tid: responseData.records[0].id,\n\t\t\t\t\t\t...body.records[0].fields,\n\t\t\t\t\t};\n\t\t\t\t} else if (operation === 'delete') {\n\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t//            delete\n\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t// https://support.getgrist.com/api/#tag/data/paths/~1docs~1{docId}~1tables~1{tableId}~1data~1delete/post\n\n\t\t\t\t\tconst docId = this.getNodeParameter('docId', 0) as string;\n\t\t\t\t\tconst tableId = this.getNodeParameter('tableId', 0) as string;\n\t\t\t\t\tconst endpoint = `/docs/${docId}/tables/${tableId}/data/delete`;\n\n\t\t\t\t\tconst rawRowIds = (this.getNodeParameter('rowId', i) as string).toString();\n\t\t\t\t\tconst body = rawRowIds\n\t\t\t\t\t\t.split(',')\n\t\t\t\t\t\t.map((c) => c.trim())\n\t\t\t\t\t\t.map(Number);\n\n\t\t\t\t\tawait gristApiRequest.call(this, 'POST', endpoint, body);\n\t\t\t\t\tresponseData = { success: true };\n\t\t\t\t} else if (operation === 'update') {\n\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t//            update\n\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t// https://support.getgrist.com/api/#tag/records/paths/~1docs~1{docId}~1tables~1{tableId}~1records/patch\n\n\t\t\t\t\tconst body = { records: [] } as GristUpdateRowPayload;\n\n\t\t\t\t\tconst rowId = this.getNodeParameter('rowId', i) as string;\n\t\t\t\t\tconst dataToSend = this.getNodeParameter('dataToSend', 0) as SendingOptions;\n\n\t\t\t\t\tif (dataToSend === 'autoMapInputs') {\n\t\t\t\t\t\tconst incomingKeys = Object.keys(items[i].json);\n\t\t\t\t\t\tconst rawInputsToIgnore = this.getNodeParameter('inputsToIgnore', i) as string;\n\t\t\t\t\t\tconst inputsToIgnore = rawInputsToIgnore.split(',').map((c) => c.trim());\n\t\t\t\t\t\tconst fields = parseAutoMappedInputs(incomingKeys, inputsToIgnore, items[i].json);\n\t\t\t\t\t\tbody.records.push({ id: Number(rowId), fields });\n\t\t\t\t\t} else if (dataToSend === 'defineInNode') {\n\t\t\t\t\t\tconst { properties } = this.getNodeParameter('fieldsToSend', i, []) as FieldsToSend;\n\t\t\t\t\t\tthrowOnZeroDefinedFields.call(this, properties);\n\t\t\t\t\t\tconst fields = parseDefinedFields(properties);\n\t\t\t\t\t\tbody.records.push({ id: Number(rowId), fields });\n\t\t\t\t\t}\n\n\t\t\t\t\tconst docId = this.getNodeParameter('docId', 0) as string;\n\t\t\t\t\tconst tableId = this.getNodeParameter('tableId', 0) as string;\n\t\t\t\t\tconst endpoint = `/docs/${docId}/tables/${tableId}/records`;\n\n\t\t\t\t\tawait gristApiRequest.call(this, 'PATCH', endpoint, body);\n\t\t\t\t\tresponseData = {\n\t\t\t\t\t\tid: rowId,\n\t\t\t\t\t\t...body.records[0].fields,\n\t\t\t\t\t};\n\t\t\t\t} else if (operation === 'getAll') {\n\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t//             getAll\n\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t// https://support.getgrist.com/api/#tag/records\n\n\t\t\t\t\tconst docId = this.getNodeParameter('docId', 0) as string;\n\t\t\t\t\tconst tableId = this.getNodeParameter('tableId', 0) as string;\n\t\t\t\t\tconst endpoint = `/docs/${docId}/tables/${tableId}/records`;\n\n\t\t\t\t\tconst qs: IDataObject = {};\n\n\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', i);\n\n\t\t\t\t\tif (!returnAll) {\n\t\t\t\t\t\tqs.limit = this.getNodeParameter('limit', i);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst { sort, filter } = this.getNodeParameter(\n\t\t\t\t\t\t'additionalOptions',\n\t\t\t\t\t\ti,\n\t\t\t\t\t) as GristGetAllOptions;\n\n\t\t\t\t\tif (sort?.sortProperties.length) {\n\t\t\t\t\t\tqs.sort = parseSortProperties(sort.sortProperties);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (filter?.filterProperties.length) {\n\t\t\t\t\t\tconst parsed = parseFilterProperties(filter.filterProperties);\n\t\t\t\t\t\tqs.filter = JSON.stringify(parsed);\n\t\t\t\t\t}\n\n\t\t\t\t\tresponseData = await gristApiRequest.call(this, 'GET', endpoint, {}, qs);\n\t\t\t\t\tresponseData = responseData.records.map((data: IDataObject) => {\n\t\t\t\t\t\treturn { id: data.id, ...(data.fields as object) };\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\tthis.helpers.returnJsonArray({ error: error.message }),\n\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t);\n\t\t\t\t\treturnData.push(...executionData);\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t{ itemData: { item: i } },\n\t\t\t);\n\t\t\treturnData.push(...executionData);\n\t\t}\n\n\t\treturn [returnData];\n\t}\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAYO;AAEP,8BAOO;AACP,kCAAgC;AAWzB,MAAM,MAA2B;AAAA,EAAjC;AACN,uBAAoC;AAAA,MACnC,aAAa;AAAA,MACb,MAAM;AAAA,MACN,MAAM;AAAA,MACN,UAAU;AAAA,MACV,OAAO,CAAC,OAAO;AAAA,MACf,SAAS;AAAA,MACT,aAAa;AAAA,MACb,UAAU;AAAA,QACT,MAAM;AAAA,MACP;AAAA,MACA,cAAc;AAAA,MACd,QAAQ,CAAC,wCAAoB,IAAI;AAAA,MACjC,SAAS,CAAC,wCAAoB,IAAI;AAAA,MAClC,aAAa;AAAA,QACZ;AAAA,UACC,MAAM;AAAA,UACN,UAAU;AAAA,UACV,UAAU;AAAA,QACX;AAAA,MACD;AAAA,MACA,YAAY;AAAA,IACb;AAEA,mBAAU;AAAA,MACT,aAAa;AAAA,QACZ,MAAM,kBAA6C;AAClD,gBAAM,QAAQ,KAAK,iBAAiB,SAAS,CAAC;AAC9C,gBAAM,UAAU,KAAK,iBAAiB,WAAW,CAAC;AAClD,gBAAM,WAAW,SAAS,KAAK,WAAW,OAAO;AAEjD,gBAAM,EAAE,QAAQ,IAAK,MAAM,wCAAgB,KAAK,MAAM,OAAO,QAAQ;AACrE,iBAAO,QAAQ,IAAI,CAAC,EAAE,GAAG,OAAO,EAAE,MAAM,IAAI,OAAO,GAAG,EAAE;AAAA,QACzD;AAAA,MACD;AAAA,MAEA,gBAAgB;AAAA,QACf,MAAM,aAEL,YACqC;AACrC,gBAAM,EAAE,QAAQ,UAAU,iBAAiB,cAAc,IACxD,WAAW;AAEZ,gBAAM,WAAW;AAEjB,gBAAM,cACL,aAAa,SACV,gCAAgC,QAAQ,KACxC,aAAa,SACZ,WAAW,eAAe,oBAAoB,QAAQ,KACtD,GAAG,aAAa,OAAO,QAAQ;AAEpC,gBAAM,UAA2B;AAAA,YAChC,SAAS;AAAA,cACR,eAAe,UAAU,MAAM;AAAA,YAChC;AAAA,YACA,QAAQ;AAAA,YACR,KAAK;AAAA,YACL,IAAI,EAAE,OAAO,EAAE;AAAA,YACf,MAAM;AAAA,UACP;AAEA,cAAI;AACH,kBAAM,KAAK,QAAQ,QAAQ,OAAO;AAClC,mBAAO;AAAA,cACN,QAAQ;AAAA,cACR,SAAS;AAAA,YACV;AAAA,UACD,SAAS,OAAO;AACf,mBAAO;AAAA,cACN,QAAQ;AAAA,cACR,SAAS,MAAM;AAAA,YAChB;AAAA,UACD;AAAA,QACD;AAAA,MACD;AAAA,IACD;AAAA;AAAA,EAEA,MAAM,UAAkE;AACvE,UAAM,QAAQ,KAAK,aAAa;AAChC,QAAI;AACJ,UAAM,aAAmC,CAAC;AAE1C,UAAM,YAAY,KAAK,iBAAiB,aAAa,CAAC;AAEtD,aAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACtC,UAAI;AACH,YAAI,cAAc,UAAU;AAO3B,gBAAM,OAAO,EAAE,SAAS,CAAC,EAAE;AAE3B,gBAAM,aAAa,KAAK,iBAAiB,cAAc,CAAC;AAExD,cAAI,eAAe,iBAAiB;AACnC,kBAAM,eAAe,OAAO,KAAK,MAAM,CAAC,EAAE,IAAI;AAC9C,kBAAM,oBAAoB,KAAK,iBAAiB,kBAAkB,CAAC;AACnE,kBAAM,iBAAiB,kBAAkB,MAAM,GAAG,EAAE,IAAI,CAAC,MAAM,EAAE,KAAK,CAAC;AACvE,kBAAM,aAAS,+CAAsB,cAAc,gBAAgB,MAAM,CAAC,EAAE,IAAI;AAChF,iBAAK,QAAQ,KAAK,EAAE,OAAO,CAAC;AAAA,UAC7B,WAAW,eAAe,gBAAgB;AACzC,kBAAM,EAAE,WAAW,IAAI,KAAK,iBAAiB,gBAAgB,GAAG,CAAC,CAAC;AAClE,6DAAyB,KAAK,MAAM,UAAU;AAC9C,iBAAK,QAAQ,KAAK,EAAE,YAAQ,4CAAmB,UAAU,EAAE,CAAC;AAAA,UAC7D;AAEA,gBAAM,QAAQ,KAAK,iBAAiB,SAAS,CAAC;AAC9C,gBAAM,UAAU,KAAK,iBAAiB,WAAW,CAAC;AAClD,gBAAM,WAAW,SAAS,KAAK,WAAW,OAAO;AAEjD,yBAAe,MAAM,wCAAgB,KAAK,MAAM,QAAQ,UAAU,IAAI;AACtE,yBAAe;AAAA,YACd,IAAI,aAAa,QAAQ,CAAC,EAAE;AAAA,YAC5B,GAAG,KAAK,QAAQ,CAAC,EAAE;AAAA,UACpB;AAAA,QACD,WAAW,cAAc,UAAU;AAOlC,gBAAM,QAAQ,KAAK,iBAAiB,SAAS,CAAC;AAC9C,gBAAM,UAAU,KAAK,iBAAiB,WAAW,CAAC;AAClD,gBAAM,WAAW,SAAS,KAAK,WAAW,OAAO;AAEjD,gBAAM,YAAa,KAAK,iBAAiB,SAAS,CAAC,EAAa,SAAS;AACzE,gBAAM,OAAO,UACX,MAAM,GAAG,EACT,IAAI,CAAC,MAAM,EAAE,KAAK,CAAC,EACnB,IAAI,MAAM;AAEZ,gBAAM,wCAAgB,KAAK,MAAM,QAAQ,UAAU,IAAI;AACvD,yBAAe,EAAE,SAAS,KAAK;AAAA,QAChC,WAAW,cAAc,UAAU;AAOlC,gBAAM,OAAO,EAAE,SAAS,CAAC,EAAE;AAE3B,gBAAM,QAAQ,KAAK,iBAAiB,SAAS,CAAC;AAC9C,gBAAM,aAAa,KAAK,iBAAiB,cAAc,CAAC;AAExD,cAAI,eAAe,iBAAiB;AACnC,kBAAM,eAAe,OAAO,KAAK,MAAM,CAAC,EAAE,IAAI;AAC9C,kBAAM,oBAAoB,KAAK,iBAAiB,kBAAkB,CAAC;AACnE,kBAAM,iBAAiB,kBAAkB,MAAM,GAAG,EAAE,IAAI,CAAC,MAAM,EAAE,KAAK,CAAC;AACvE,kBAAM,aAAS,+CAAsB,cAAc,gBAAgB,MAAM,CAAC,EAAE,IAAI;AAChF,iBAAK,QAAQ,KAAK,EAAE,IAAI,OAAO,KAAK,GAAG,OAAO,CAAC;AAAA,UAChD,WAAW,eAAe,gBAAgB;AACzC,kBAAM,EAAE,WAAW,IAAI,KAAK,iBAAiB,gBAAgB,GAAG,CAAC,CAAC;AAClE,6DAAyB,KAAK,MAAM,UAAU;AAC9C,kBAAM,aAAS,4CAAmB,UAAU;AAC5C,iBAAK,QAAQ,KAAK,EAAE,IAAI,OAAO,KAAK,GAAG,OAAO,CAAC;AAAA,UAChD;AAEA,gBAAM,QAAQ,KAAK,iBAAiB,SAAS,CAAC;AAC9C,gBAAM,UAAU,KAAK,iBAAiB,WAAW,CAAC;AAClD,gBAAM,WAAW,SAAS,KAAK,WAAW,OAAO;AAEjD,gBAAM,wCAAgB,KAAK,MAAM,SAAS,UAAU,IAAI;AACxD,yBAAe;AAAA,YACd,IAAI;AAAA,YACJ,GAAG,KAAK,QAAQ,CAAC,EAAE;AAAA,UACpB;AAAA,QACD,WAAW,cAAc,UAAU;AAOlC,gBAAM,QAAQ,KAAK,iBAAiB,SAAS,CAAC;AAC9C,gBAAM,UAAU,KAAK,iBAAiB,WAAW,CAAC;AAClD,gBAAM,WAAW,SAAS,KAAK,WAAW,OAAO;AAEjD,gBAAM,KAAkB,CAAC;AAEzB,gBAAM,YAAY,KAAK,iBAAiB,aAAa,CAAC;AAEtD,cAAI,CAAC,WAAW;AACf,eAAG,QAAQ,KAAK,iBAAiB,SAAS,CAAC;AAAA,UAC5C;AAEA,gBAAM,EAAE,MAAM,OAAO,IAAI,KAAK;AAAA,YAC7B;AAAA,YACA;AAAA,UACD;AAEA,cAAI,MAAM,eAAe,QAAQ;AAChC,eAAG,WAAO,6CAAoB,KAAK,cAAc;AAAA,UAClD;AAEA,cAAI,QAAQ,iBAAiB,QAAQ;AACpC,kBAAM,aAAS,+CAAsB,OAAO,gBAAgB;AAC5D,eAAG,SAAS,KAAK,UAAU,MAAM;AAAA,UAClC;AAEA,yBAAe,MAAM,wCAAgB,KAAK,MAAM,OAAO,UAAU,CAAC,GAAG,EAAE;AACvE,yBAAe,aAAa,QAAQ,IAAI,CAAC,SAAsB;AAC9D,mBAAO,EAAE,IAAI,KAAK,IAAI,GAAI,KAAK,OAAkB;AAAA,UAClD,CAAC;AAAA,QACF;AAAA,MACD,SAAS,OAAO;AACf,YAAI,KAAK,eAAe,GAAG;AAC1B,gBAAMA,iBAAgB,KAAK,QAAQ;AAAA,YAClC,KAAK,QAAQ,gBAAgB,EAAE,OAAO,MAAM,QAAQ,CAAC;AAAA,YACrD,EAAE,UAAU,EAAE,MAAM,EAAE,EAAE;AAAA,UACzB;AACA,qBAAW,KAAK,GAAGA,cAAa;AAEhC;AAAA,QACD;AACA,cAAM;AAAA,MACP;AACA,YAAM,gBAAgB,KAAK,QAAQ;AAAA,QAClC,KAAK,QAAQ,gBAAgB,YAA6B;AAAA,QAC1D,EAAE,UAAU,EAAE,MAAM,EAAE,EAAE;AAAA,MACzB;AACA,iBAAW,KAAK,GAAG,aAAa;AAAA,IACjC;AAEA,WAAO,CAAC,UAAU;AAAA,EACnB;AACD;","names":["executionData"]}