{"version":3,"sources":["../../../nodes/Telegram/GenericFunctions.ts"],"sourcesContent":["import type {\n\tIDataObject,\n\tIExecuteFunctions,\n\tIHookFunctions,\n\tIHttpRequestMethods,\n\tILoadOptionsFunctions,\n\tIRequestOptions,\n\tIWebhookFunctions,\n\tJsonObject,\n} from 'n8n-workflow';\nimport { NodeApiError } from 'n8n-workflow';\n\nimport { getSendAndWaitConfig } from '../../utils/sendAndWait/utils';\nimport { createUtmCampaignLink } from '../../utils/utilities';\n\n// Interface in n8n\nexport interface IMarkupKeyboard {\n\trows?: IMarkupKeyboardRow[];\n}\n\nexport interface IMarkupKeyboardRow {\n\trow?: IMarkupKeyboardRow;\n}\n\nexport interface IMarkupKeyboardRow {\n\tbuttons?: IMarkupKeyboardButton[];\n}\n\nexport interface IMarkupKeyboardButton {\n\ttext: string;\n\tadditionalFields?: IDataObject;\n}\n\n// Interface in Telegram\nexport interface ITelegramInlineReply {\n\tinline_keyboard?: ITelegramKeyboardButton[][];\n}\n\nexport interface ITelegramKeyboardButton {\n\t[key: string]: string | number | boolean;\n}\n\nexport interface ITelegramReplyKeyboard extends IMarkupReplyKeyboardOptions {\n\tkeyboard: ITelegramKeyboardButton[][];\n}\n\n// Shared interfaces\nexport interface IMarkupForceReply {\n\tforce_reply?: boolean;\n\tselective?: boolean;\n}\n\nexport interface IMarkupReplyKeyboardOptions {\n\tone_time_keyboard?: boolean;\n\tresize_keyboard?: boolean;\n\tselective?: boolean;\n}\n\nexport interface IMarkupReplyKeyboardRemove {\n\tforce_reply?: boolean;\n\tselective?: boolean;\n}\n\n/**\n * Add the additional fields to the body\n *\n * @param {IDataObject} body The body object to add fields to\n * @param {number} index The index of the item\n */\nexport function addAdditionalFields(\n\tthis: IExecuteFunctions,\n\tbody: IDataObject,\n\tindex: number,\n\tnodeVersion?: number,\n\tinstanceId?: string,\n) {\n\tconst operation = this.getNodeParameter('operation', index);\n\n\t// Add the additional fields\n\tconst additionalFields = this.getNodeParameter('additionalFields', index);\n\n\tif (operation === 'sendMessage') {\n\t\tconst attributionText = 'This message was sent automatically with ';\n\t\tconst link = createUtmCampaignLink('n8n-nodes-base.telegram', instanceId);\n\n\t\tif (nodeVersion && nodeVersion >= 1.1 && additionalFields.appendAttribution === undefined) {\n\t\t\tadditionalFields.appendAttribution = true;\n\t\t}\n\n\t\tif (!additionalFields.parse_mode) {\n\t\t\tadditionalFields.parse_mode = 'Markdown';\n\t\t}\n\n\t\tconst regex = /(https?|ftp|file):\\/\\/\\S+|www\\.\\S+|\\S+\\.\\S+/;\n\t\tconst containsUrl = regex.test(body.text as string);\n\n\t\tif (!containsUrl) {\n\t\t\tbody.disable_web_page_preview = true;\n\t\t}\n\n\t\tif (additionalFields.appendAttribution) {\n\t\t\tif (additionalFields.parse_mode === 'Markdown') {\n\t\t\t\tbody.text = `${body.text}\\n\\n_${attributionText}_[n8n](${link})`;\n\t\t\t} else if (additionalFields.parse_mode === 'HTML') {\n\t\t\t\tbody.text = `${body.text}\\n\\n<em>${attributionText}</em><a href=\"${link}\" target=\"_blank\">n8n</a>`;\n\t\t\t}\n\t\t}\n\n\t\tif (\n\t\t\tnodeVersion &&\n\t\t\tnodeVersion >= 1.2 &&\n\t\t\tadditionalFields.disable_web_page_preview === undefined\n\t\t) {\n\t\t\tbody.disable_web_page_preview = true;\n\t\t}\n\n\t\tdelete additionalFields.appendAttribution;\n\t}\n\n\tObject.assign(body, additionalFields);\n\n\t// Add the reply markup\n\tlet replyMarkupOption = '';\n\tif (operation !== 'sendMediaGroup') {\n\t\treplyMarkupOption = this.getNodeParameter('replyMarkup', index) as string;\n\t\tif (replyMarkupOption === 'none') {\n\t\t\treturn;\n\t\t}\n\t}\n\n\tbody.reply_markup = {} as\n\t\t| IMarkupForceReply\n\t\t| IMarkupReplyKeyboardRemove\n\t\t| ITelegramInlineReply\n\t\t| ITelegramReplyKeyboard;\n\tif (['inlineKeyboard', 'replyKeyboard'].includes(replyMarkupOption)) {\n\t\tlet setParameterName = 'inline_keyboard';\n\t\tif (replyMarkupOption === 'replyKeyboard') {\n\t\t\tsetParameterName = 'keyboard';\n\t\t}\n\n\t\tconst keyboardData = this.getNodeParameter(replyMarkupOption, index) as IMarkupKeyboard;\n\n\t\t// @ts-ignore\n\t\t(body.reply_markup as ITelegramInlineReply | ITelegramReplyKeyboard)[setParameterName] =\n\t\t\t[] as ITelegramKeyboardButton[][];\n\t\tlet sendButtonData: ITelegramKeyboardButton;\n\t\tif (keyboardData.rows !== undefined) {\n\t\t\tfor (const row of keyboardData.rows) {\n\t\t\t\tconst sendRows: ITelegramKeyboardButton[] = [];\n\t\t\t\tif (row.row?.buttons === undefined) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tfor (const button of row.row.buttons) {\n\t\t\t\t\tsendButtonData = {};\n\t\t\t\t\tsendButtonData.text = button.text;\n\t\t\t\t\tif (button.additionalFields) {\n\t\t\t\t\t\tObject.assign(sendButtonData, button.additionalFields);\n\t\t\t\t\t}\n\t\t\t\t\tsendRows.push(sendButtonData);\n\t\t\t\t}\n\n\t\t\t\t// @ts-ignore\n\t\t\t\tconst array = (body.reply_markup as ITelegramInlineReply | ITelegramReplyKeyboard)[\n\t\t\t\t\tsetParameterName\n\t\t\t\t] as ITelegramKeyboardButton[][];\n\t\t\t\tarray.push(sendRows);\n\t\t\t}\n\t\t}\n\t} else if (replyMarkupOption === 'forceReply') {\n\t\tconst forceReply = this.getNodeParameter('forceReply', index) as IMarkupForceReply;\n\t\tbody.reply_markup = forceReply;\n\t} else if (replyMarkupOption === 'replyKeyboardRemove') {\n\t\tconst forceReply = this.getNodeParameter(\n\t\t\t'replyKeyboardRemove',\n\t\t\tindex,\n\t\t) as IMarkupReplyKeyboardRemove;\n\t\tbody.reply_markup = forceReply;\n\t}\n\n\tif (replyMarkupOption === 'replyKeyboard') {\n\t\tconst replyKeyboardOptions = this.getNodeParameter(\n\t\t\t'replyKeyboardOptions',\n\t\t\tindex,\n\t\t) as IMarkupReplyKeyboardOptions;\n\t\tObject.assign(body.reply_markup, replyKeyboardOptions);\n\t}\n}\n\n/**\n * Make an API request to Telegram\n *\n */\nexport async function apiRequest(\n\tthis: IHookFunctions | IExecuteFunctions | ILoadOptionsFunctions | IWebhookFunctions,\n\tmethod: IHttpRequestMethods,\n\tendpoint: string,\n\tbody: IDataObject,\n\tquery?: IDataObject,\n\toption: IDataObject = {},\n): Promise<any> {\n\tconst credentials = await this.getCredentials('telegramApi');\n\n\tquery = query || {};\n\n\tconst options: IRequestOptions = {\n\t\theaders: {},\n\t\tmethod,\n\t\turi: `${credentials.baseUrl}/bot${credentials.accessToken}/${endpoint}`,\n\t\tbody,\n\t\tqs: query,\n\t\tjson: true,\n\t};\n\n\tif (Object.keys(option).length > 0) {\n\t\tObject.assign(options, option);\n\t}\n\n\tif (Object.keys(body).length === 0) {\n\t\tdelete options.body;\n\t}\n\n\tif (Object.keys(query).length === 0) {\n\t\tdelete options.qs;\n\t}\n\n\ttry {\n\t\treturn await this.helpers.request(options);\n\t} catch (error) {\n\t\tthrow new NodeApiError(this.getNode(), error as JsonObject);\n\t}\n}\n\nexport function getImageBySize(photos: IDataObject[], size: string): IDataObject | undefined {\n\tconst sizes = {\n\t\tsmall: 0,\n\t\tmedium: 1,\n\t\tlarge: 2,\n\t\textraLarge: 3,\n\t} as IDataObject;\n\n\tconst index = sizes[size] as number;\n\n\treturn photos[index];\n}\n\nexport function getPropertyName(operation: string) {\n\treturn operation.replace('send', '').toLowerCase();\n}\n\nexport function getSecretToken(this: IHookFunctions | IWebhookFunctions) {\n\t// Only characters A-Z, a-z, 0-9, _ and - are allowed.\n\tconst secret_token = `${this.getWorkflow().id}_${this.getNode().id}`;\n\treturn secret_token.replace(/[^a-zA-Z0-9\\_\\-]+/g, '');\n}\n\nexport function createSendAndWaitMessageBody(context: IExecuteFunctions) {\n\tconst chat_id = context.getNodeParameter('chatId', 0) as string;\n\n\tconst config = getSendAndWaitConfig(context);\n\tlet text = config.message;\n\n\tif (config.appendAttribution !== false) {\n\t\tconst instanceId = context.getInstanceId();\n\t\tconst attributionText = 'This message was sent automatically with ';\n\t\tconst link = createUtmCampaignLink('n8n-nodes-base.telegram', instanceId);\n\t\ttext = `${text}\\n\\n_${attributionText}_[n8n](${link})`;\n\t}\n\n\tconst body = {\n\t\tchat_id,\n\t\ttext,\n\n\t\tdisable_web_page_preview: true,\n\t\tparse_mode: 'Markdown',\n\t\treply_markup: {\n\t\t\tinline_keyboard: [\n\t\t\t\tconfig.options.map((option) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttext: option.label,\n\t\t\t\t\t\turl: `${config.url}?approved=${option.value}`,\n\t\t\t\t\t};\n\t\t\t\t}),\n\t\t\t],\n\t\t},\n\t};\n\n\treturn body;\n}\n"],"mappings":"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","names":[]}