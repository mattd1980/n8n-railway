{"version":3,"sources":["../../../nodes/Telegram/TelegramTrigger.node.ts"],"sourcesContent":["import crypto from 'crypto';\nimport type {\n\tIHookFunctions,\n\tIWebhookFunctions,\n\tIDataObject,\n\tINodeType,\n\tINodeTypeDescription,\n\tIWebhookResponseData,\n} from 'n8n-workflow';\nimport { NodeConnectionTypes } from 'n8n-workflow';\n\nimport { apiRequest, getSecretToken } from './GenericFunctions';\nimport type { IEvent } from './IEvent';\nimport { downloadFile } from './util/triggerUtils';\n\nexport class TelegramTrigger implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'Telegram Trigger',\n\t\tname: 'telegramTrigger',\n\t\ticon: 'file:telegram.svg',\n\t\tgroup: ['trigger'],\n\t\tversion: [1, 1.1, 1.2],\n\t\tdefaultVersion: 1.2,\n\t\tsubtitle: '=Updates: {{$parameter[\"updates\"].join(\", \")}}',\n\t\tdescription: 'Starts the workflow on a Telegram update',\n\t\tdefaults: {\n\t\t\tname: 'Telegram Trigger',\n\t\t},\n\t\tinputs: [],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tcredentials: [\n\t\t\t{\n\t\t\t\tname: 'telegramApi',\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t],\n\t\twebhooks: [\n\t\t\t{\n\t\t\t\tname: 'default',\n\t\t\t\thttpMethod: 'POST',\n\t\t\t\tresponseMode: 'onReceived',\n\t\t\t\tpath: 'webhook',\n\t\t\t},\n\t\t],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName:\n\t\t\t\t\t'Due to Telegram API limitations, you can use just one Telegram trigger for each bot at a time',\n\t\t\t\tname: 'telegramTriggerNotice',\n\t\t\t\ttype: 'notice',\n\t\t\t\tdefault: '',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Trigger On',\n\t\t\t\tname: 'updates',\n\t\t\t\ttype: 'multiOptions',\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: '*',\n\t\t\t\t\t\tvalue: '*',\n\t\t\t\t\t\tdescription: 'All updates',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Callback Query',\n\t\t\t\t\t\tvalue: 'callback_query',\n\t\t\t\t\t\tdescription: 'Trigger on new incoming callback query',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Channel Post',\n\t\t\t\t\t\tvalue: 'channel_post',\n\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t'Trigger on new incoming channel post of any kind — text, photo, sticker, etc',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Edited Channel Post',\n\t\t\t\t\t\tvalue: 'edited_channel_post',\n\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t'Trigger on new version of a channel post that is known to the bot and was edited',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Edited Message',\n\t\t\t\t\t\tvalue: 'edited_message',\n\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t'Trigger on new version of a channel post that is known to the bot and was edited',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Inline Query',\n\t\t\t\t\t\tvalue: 'inline_query',\n\t\t\t\t\t\tdescription: 'Trigger on new incoming inline query',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Message',\n\t\t\t\t\t\tvalue: 'message',\n\t\t\t\t\t\tdescription: 'Trigger on new incoming message of any kind — text, photo, sticker, etc',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Poll',\n\t\t\t\t\t\tvalue: 'poll',\n\t\t\t\t\t\taction: 'On Poll Change',\n\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t'Trigger on new poll state. Bots receive only updates about stopped polls and polls, which are sent by the bot.',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Pre-Checkout Query',\n\t\t\t\t\t\tvalue: 'pre_checkout_query',\n\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t'Trigger on new incoming pre-checkout query. Contains full information about checkout.',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Shipping Query',\n\t\t\t\t\t\tvalue: 'shipping_query',\n\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t'Trigger on new incoming shipping query. Only for invoices with flexible price.',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\trequired: true,\n\t\t\t\tdefault: [],\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName:\n\t\t\t\t\t'Every uploaded attachment, even if sent in a group, will trigger a separate event. You can identify that an attachment belongs to a certain group by <code>media_group_id</code> .',\n\t\t\t\tname: 'attachmentNotice',\n\t\t\t\ttype: 'notice',\n\t\t\t\tdefault: '',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Additional Fields',\n\t\t\t\tname: 'additionalFields',\n\t\t\t\ttype: 'collection',\n\t\t\t\tplaceholder: 'Add Field',\n\t\t\t\tdefault: {},\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Download Images/Files',\n\t\t\t\t\t\tname: 'download',\n\t\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\t\tdefault: false,\n\t\t\t\t\t\t// eslint-disable-next-line n8n-nodes-base/node-param-description-boolean-without-whether\n\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t\"Telegram delivers the image in multiple sizes. By default, just the large image would be downloaded. If you want to change the size, set the field 'Image Size'.\",\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Image Size',\n\t\t\t\t\t\tname: 'imageSize',\n\t\t\t\t\t\ttype: 'options',\n\t\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\t\tdownload: [true],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\toptions: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: 'Small',\n\t\t\t\t\t\t\t\tvalue: 'small',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: 'Medium',\n\t\t\t\t\t\t\t\tvalue: 'medium',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: 'Large',\n\t\t\t\t\t\t\t\tvalue: 'large',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: 'Extra Large',\n\t\t\t\t\t\t\t\tvalue: 'extraLarge',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t\tdefault: 'large',\n\t\t\t\t\t\tdescription: 'The size of the image to be downloaded',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Restrict to Chat IDs',\n\t\t\t\t\t\tname: 'chatIds',\n\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t'The chat IDs to restrict the trigger to. Multiple can be defined separated by comma.',\n\t\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\t\t'@version': [{ _cnd: { gte: 1.1 } }],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Restrict to User IDs',\n\t\t\t\t\t\tname: 'userIds',\n\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t'The user IDs to restrict the trigger to. Multiple can be defined separated by comma.',\n\t\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\t\t'@version': [{ _cnd: { gte: 1.1 } }],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t],\n\t};\n\n\twebhookMethods = {\n\t\tdefault: {\n\t\t\tasync checkExists(this: IHookFunctions): Promise<boolean> {\n\t\t\t\tconst endpoint = 'getWebhookInfo';\n\t\t\t\tconst webhookReturnData = await apiRequest.call(this, 'POST', endpoint, {});\n\t\t\t\tconst webhookUrl = this.getNodeWebhookUrl('default');\n\n\t\t\t\tif (webhookReturnData.result.url === webhookUrl) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\treturn false;\n\t\t\t},\n\t\t\tasync create(this: IHookFunctions): Promise<boolean> {\n\t\t\t\tconst webhookUrl = this.getNodeWebhookUrl('default');\n\n\t\t\t\tlet allowedUpdates = this.getNodeParameter('updates') as string[];\n\n\t\t\t\tif ((allowedUpdates || []).includes('*')) {\n\t\t\t\t\tallowedUpdates = [];\n\t\t\t\t}\n\n\t\t\t\tconst endpoint = 'setWebhook';\n\n\t\t\t\tconst secret_token = getSecretToken.call(this);\n\n\t\t\t\tconst body = {\n\t\t\t\t\turl: webhookUrl,\n\t\t\t\t\tallowed_updates: allowedUpdates,\n\t\t\t\t\tsecret_token,\n\t\t\t\t};\n\n\t\t\t\tawait apiRequest.call(this, 'POST', endpoint, body);\n\n\t\t\t\treturn true;\n\t\t\t},\n\t\t\tasync delete(this: IHookFunctions): Promise<boolean> {\n\t\t\t\tconst endpoint = 'deleteWebhook';\n\t\t\t\tconst body = {};\n\n\t\t\t\ttry {\n\t\t\t\t\tawait apiRequest.call(this, 'POST', endpoint, body);\n\t\t\t\t} catch (error) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\t\t\t},\n\t\t},\n\t};\n\n\tasync webhook(this: IWebhookFunctions): Promise<IWebhookResponseData> {\n\t\tconst credentials = await this.getCredentials('telegramApi');\n\n\t\tconst bodyData = this.getBodyData() as IEvent;\n\t\tconst headerData = this.getHeaderData();\n\n\t\tconst nodeVersion = this.getNode().typeVersion;\n\t\tif (nodeVersion > 1) {\n\t\t\tconst secret = getSecretToken.call(this);\n\t\t\tconst secretBuffer = Buffer.from(secret);\n\t\t\tconst headerSecretBuffer = Buffer.from(\n\t\t\t\tString(headerData['x-telegram-bot-api-secret-token'] ?? ''),\n\t\t\t);\n\t\t\tif (\n\t\t\t\tsecretBuffer.byteLength !== headerSecretBuffer.byteLength ||\n\t\t\t\t!crypto.timingSafeEqual(secretBuffer, headerSecretBuffer)\n\t\t\t) {\n\t\t\t\tconst res = this.getResponseObject();\n\t\t\t\tres.status(403).json({ message: 'Provided secret is not valid' });\n\t\t\t\treturn {\n\t\t\t\t\tnoWebhookResponse: true,\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\tconst additionalFields = this.getNodeParameter('additionalFields') as IDataObject;\n\n\t\tif (additionalFields.download) {\n\t\t\tconst downloadFilesResult = await downloadFile(this, credentials, bodyData, additionalFields);\n\n\t\t\tif (Object.entries(downloadFilesResult).length !== 0) return downloadFilesResult;\n\t\t}\n\n\t\tif (nodeVersion >= 1.2) {\n\t\t\tif (additionalFields.chatIds) {\n\t\t\t\tconst chatIds = additionalFields.chatIds as string;\n\t\t\t\tconst splitIds = chatIds.split(',').map((chatId) => chatId.trim());\n\t\t\t\tif (!splitIds.includes(String(bodyData.message?.chat?.id))) {\n\t\t\t\t\treturn {};\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (additionalFields.userIds) {\n\t\t\t\tconst userIds = additionalFields.userIds as string;\n\t\t\t\tconst splitIds = userIds.split(',').map((userId) => userId.trim());\n\t\t\t\tif (!splitIds.includes(String(bodyData.message?.from?.id))) {\n\t\t\t\t\treturn {};\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tworkflowData: [this.helpers.returnJsonArray([bodyData as unknown as IDataObject])],\n\t\t};\n\t}\n}\n"],"mappings":"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","names":["crypto"]}