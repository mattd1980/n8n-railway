{"version":3,"sources":["../../../nodes/MondayCom/MondayCom.node.ts"],"sourcesContent":["import { snakeCase } from 'change-case';\nimport { NodeConnectionTypes, NodeOperationError } from 'n8n-workflow';\nimport type {\n\tIExecuteFunctions,\n\tIDataObject,\n\tILoadOptionsFunctions,\n\tINodeExecutionData,\n\tINodePropertyOptions,\n\tINodeType,\n\tINodeTypeDescription,\n} from 'n8n-workflow';\n\nimport { boardColumnFields, boardColumnOperations } from './BoardColumnDescription';\nimport { boardFields, boardOperations } from './BoardDescription';\nimport { boardGroupFields, boardGroupOperations } from './BoardGroupDescription';\nimport { boardItemFields, boardItemOperations } from './BoardItemDescription';\nimport {\n\tmondayComApiPaginatedRequest,\n\tmondayComApiRequest,\n\tmondayComApiRequestAllItems,\n} from './GenericFunctions';\n\ninterface IGraphqlBody {\n\tquery: string;\n\tvariables: IDataObject;\n}\n\nexport class MondayCom implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'Monday.com',\n\t\tname: 'mondayCom',\n\t\ticon: 'file:mondayCom.svg',\n\t\tgroup: ['output'],\n\t\tversion: 1,\n\t\tsubtitle: '={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}',\n\t\tdescription: 'Consume Monday.com API',\n\t\tdefaults: {\n\t\t\tname: 'Monday.com',\n\t\t},\n\t\tusableAsTool: true,\n\t\tinputs: [NodeConnectionTypes.Main],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tcredentials: [\n\t\t\t{\n\t\t\t\tname: 'mondayComApi',\n\t\t\t\trequired: true,\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tauthentication: ['accessToken'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'mondayComOAuth2Api',\n\t\t\t\trequired: true,\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tauthentication: ['oAuth2'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Authentication',\n\t\t\t\tname: 'authentication',\n\t\t\t\ttype: 'options',\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Access Token',\n\t\t\t\t\t\tvalue: 'accessToken',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'OAuth2',\n\t\t\t\t\t\tvalue: 'oAuth2',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'accessToken',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Resource',\n\t\t\t\tname: 'resource',\n\t\t\t\ttype: 'options',\n\t\t\t\tnoDataExpression: true,\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Board',\n\t\t\t\t\t\tvalue: 'board',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Board Column',\n\t\t\t\t\t\tvalue: 'boardColumn',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Board Group',\n\t\t\t\t\t\tvalue: 'boardGroup',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Board Item',\n\t\t\t\t\t\tvalue: 'boardItem',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'board',\n\t\t\t},\n\t\t\t//BOARD\n\t\t\t...boardOperations,\n\t\t\t...boardFields,\n\t\t\t// BOARD COLUMN\n\t\t\t...boardColumnOperations,\n\t\t\t...boardColumnFields,\n\t\t\t// BOARD GROUP\n\t\t\t...boardGroupOperations,\n\t\t\t...boardGroupFields,\n\t\t\t// BOARD ITEM\n\t\t\t...boardItemOperations,\n\t\t\t...boardItemFields,\n\t\t],\n\t};\n\n\tmethods = {\n\t\tloadOptions: {\n\t\t\t// Get all the available boards to display them to user so that they can\n\t\t\t// select them easily\n\t\t\tasync getBoards(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst returnData: INodePropertyOptions[] = [];\n\t\t\t\tconst body = {\n\t\t\t\t\tquery: `query ($page: Int, $limit: Int) {\n\t\t\t\t\t\t\tboards (page: $page, limit: $limit){\n\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\tdescription\n\t\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}`,\n\t\t\t\t\tvariables: {\n\t\t\t\t\t\tpage: 1,\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t\tconst boards = await mondayComApiRequestAllItems.call(this, 'data.boards', body);\n\t\t\t\tif (boards === undefined) {\n\t\t\t\t\treturn returnData;\n\t\t\t\t}\n\n\t\t\t\tfor (const board of boards) {\n\t\t\t\t\tconst boardName = board.name;\n\t\t\t\t\tconst boardId = board.id;\n\t\t\t\t\tconst boardDescription = board.description;\n\t\t\t\t\treturnData.push({\n\t\t\t\t\t\tname: boardName,\n\t\t\t\t\t\tvalue: boardId,\n\t\t\t\t\t\tdescription: boardDescription,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn returnData;\n\t\t\t},\n\t\t\t// Get all the available columns to display them to user so that they can\n\t\t\t// select them easily\n\t\t\tasync getColumns(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst returnData: INodePropertyOptions[] = [];\n\t\t\t\tconst boardId = this.getCurrentNodeParameter('boardId') as string;\n\t\t\t\tconst body: IGraphqlBody = {\n\t\t\t\t\tquery: `query ($boardId: [ID!]) {\n\t\t\t\t\t\t\tboards (ids: $boardId){\n\t\t\t\t\t\t\t\tcolumns {\n\t\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\t\ttitle\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}`,\n\t\t\t\t\tvariables: {\n\t\t\t\t\t\tboardId,\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t\tconst { data } = await mondayComApiRequest.call(this, body);\n\t\t\t\tif (data === undefined) {\n\t\t\t\t\treturn returnData;\n\t\t\t\t}\n\n\t\t\t\tconst columns = data.boards[0].columns;\n\t\t\t\tfor (const column of columns) {\n\t\t\t\t\tconst columnName = column.title;\n\t\t\t\t\tconst columnId = column.id;\n\t\t\t\t\treturnData.push({\n\t\t\t\t\t\tname: columnName,\n\t\t\t\t\t\tvalue: columnId,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn returnData;\n\t\t\t},\n\t\t\t// Get all the available groups to display them to user so that they can\n\t\t\t// select them easily\n\t\t\tasync getGroups(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst returnData: INodePropertyOptions[] = [];\n\t\t\t\tconst boardId = this.getCurrentNodeParameter('boardId') as string;\n\t\t\t\tconst body = {\n\t\t\t\t\tquery: `query ($boardId: ID!) {\n\t\t\t\t\t\t\tboards ( ids: [$boardId]){\n\t\t\t\t\t\t\t\tgroups {\n\t\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\t\ttitle\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}`,\n\t\t\t\t\tvariables: {\n\t\t\t\t\t\tboardId,\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t\tconst { data } = await mondayComApiRequest.call(this, body);\n\t\t\t\tif (data === undefined) {\n\t\t\t\t\treturn returnData;\n\t\t\t\t}\n\n\t\t\t\tconst groups = data.boards[0].groups;\n\t\t\t\tfor (const group of groups) {\n\t\t\t\t\tconst groupName = group.title;\n\t\t\t\t\tconst groupId = group.id;\n\t\t\t\t\treturnData.push({\n\t\t\t\t\t\tname: groupName,\n\t\t\t\t\t\tvalue: groupId,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn returnData;\n\t\t\t},\n\t\t},\n\t};\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t\tconst items = this.getInputData();\n\t\tconst returnData: INodeExecutionData[] = [];\n\t\tconst length = items.length;\n\t\tlet responseData;\n\t\tconst resource = this.getNodeParameter('resource', 0);\n\t\tconst operation = this.getNodeParameter('operation', 0);\n\t\tfor (let i = 0; i < length; i++) {\n\t\t\ttry {\n\t\t\t\tif (resource === 'board') {\n\t\t\t\t\tif (operation === 'archive') {\n\t\t\t\t\t\tconst boardId = this.getNodeParameter('boardId', i);\n\n\t\t\t\t\t\tconst body: IGraphqlBody = {\n\t\t\t\t\t\t\tquery: `mutation ($id: ID!) {\n\t\t\t\t\t\t\t\t\tarchive_board (board_id: $id) {\n\t\t\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}`,\n\t\t\t\t\t\t\tvariables: {\n\t\t\t\t\t\t\t\tid: boardId,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tresponseData = await mondayComApiRequest.call(this, body);\n\t\t\t\t\t\tresponseData = responseData.data.archive_board;\n\t\t\t\t\t}\n\t\t\t\t\tif (operation === 'create') {\n\t\t\t\t\t\tconst name = this.getNodeParameter('name', i) as string;\n\t\t\t\t\t\tconst kind = this.getNodeParameter('kind', i) as string;\n\t\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i);\n\n\t\t\t\t\t\tconst body: IGraphqlBody = {\n\t\t\t\t\t\t\tquery: `mutation ($name: String!, $kind: BoardKind!, $templateId: ID) {\n\t\t\t\t\t\t\t\t\tcreate_board (board_name: $name, board_kind: $kind, template_id: $templateId) {\n\t\t\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}`,\n\t\t\t\t\t\t\tvariables: {\n\t\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\t\tkind,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tif (additionalFields.templateId) {\n\t\t\t\t\t\t\tbody.variables.templateId = additionalFields.templateId as number;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await mondayComApiRequest.call(this, body);\n\t\t\t\t\t\tresponseData = responseData.data.create_board;\n\t\t\t\t\t}\n\t\t\t\t\tif (operation === 'get') {\n\t\t\t\t\t\tconst boardId = this.getNodeParameter('boardId', i);\n\n\t\t\t\t\t\tconst body: IGraphqlBody = {\n\t\t\t\t\t\t\tquery: `query ($id: [ID!]) {\n\t\t\t\t\t\t\t\t\tboards (ids: $id){\n\t\t\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\t\t\t\tdescription\n\t\t\t\t\t\t\t\t\t\tstate\n\t\t\t\t\t\t\t\t\t\tboard_folder_id\n\t\t\t\t\t\t\t\t\t\tboard_kind\n\t\t\t\t\t\t\t\t\t\towners {\n\t\t\t\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}`,\n\t\t\t\t\t\t\tvariables: {\n\t\t\t\t\t\t\t\tid: boardId,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tresponseData = await mondayComApiRequest.call(this, body);\n\t\t\t\t\t\tresponseData = responseData.data.boards;\n\t\t\t\t\t}\n\t\t\t\t\tif (operation === 'getAll') {\n\t\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', i);\n\n\t\t\t\t\t\tconst body: IGraphqlBody = {\n\t\t\t\t\t\t\tquery: `query ($page: Int, $limit: Int) {\n\t\t\t\t\t\t\t\t\tboards (page: $page, limit: $limit){\n\t\t\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\t\t\t\tdescription\n\t\t\t\t\t\t\t\t\t\tstate\n\t\t\t\t\t\t\t\t\t\tboard_folder_id\n\t\t\t\t\t\t\t\t\t\tboard_kind\n\t\t\t\t\t\t\t\t\t\towners {\n\t\t\t\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}`,\n\t\t\t\t\t\t\tvariables: {\n\t\t\t\t\t\t\t\tpage: 1,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tif (returnAll) {\n\t\t\t\t\t\t\tresponseData = await mondayComApiRequestAllItems.call(this, 'data.boards', body);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tbody.variables.limit = this.getNodeParameter('limit', i);\n\t\t\t\t\t\t\tresponseData = await mondayComApiRequest.call(this, body);\n\t\t\t\t\t\t\tresponseData = responseData.data.boards;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (resource === 'boardColumn') {\n\t\t\t\t\tif (operation === 'create') {\n\t\t\t\t\t\tconst boardId = this.getNodeParameter('boardId', i);\n\t\t\t\t\t\tconst title = this.getNodeParameter('title', i) as string;\n\t\t\t\t\t\tconst columnType = this.getNodeParameter('columnType', i) as string;\n\t\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i);\n\n\t\t\t\t\t\tconst body: IGraphqlBody = {\n\t\t\t\t\t\t\tquery: `mutation ($boardId: ID!, $title: String!, $columnType: ColumnType!, $defaults: JSON ) {\n\t\t\t\t\t\t\t\t\tcreate_column (board_id: $boardId, title: $title, column_type: $columnType, defaults: $defaults) {\n\t\t\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}`,\n\t\t\t\t\t\t\tvariables: {\n\t\t\t\t\t\t\t\tboardId,\n\t\t\t\t\t\t\t\ttitle,\n\t\t\t\t\t\t\t\tcolumnType: snakeCase(columnType),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tif (additionalFields.defaults) {\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tJSON.parse(additionalFields.defaults as string);\n\t\t\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t\t\tthrow new NodeOperationError(this.getNode(), 'Defauls must be a valid JSON', {\n\t\t\t\t\t\t\t\t\titemIndex: i,\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbody.variables.defaults = JSON.stringify(\n\t\t\t\t\t\t\t\tJSON.parse(additionalFields.defaults as string),\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await mondayComApiRequest.call(this, body);\n\t\t\t\t\t\tresponseData = responseData.data.create_column;\n\t\t\t\t\t}\n\t\t\t\t\tif (operation === 'getAll') {\n\t\t\t\t\t\tconst boardId = this.getNodeParameter('boardId', i);\n\n\t\t\t\t\t\tconst body: IGraphqlBody = {\n\t\t\t\t\t\t\tquery: `query ($boardId: [ID!]) {\n\t\t\t\t\t\t\t\t\tboards (ids: $boardId){\n\t\t\t\t\t\t\t\t\t\tcolumns {\n\t\t\t\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\t\t\t\ttitle\n\t\t\t\t\t\t\t\t\t\t\ttype\n\t\t\t\t\t\t\t\t\t\t\tsettings_str\n\t\t\t\t\t\t\t\t\t\t\tarchived\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}`,\n\t\t\t\t\t\t\tvariables: {\n\t\t\t\t\t\t\t\tpage: 1,\n\t\t\t\t\t\t\t\tboardId,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tresponseData = await mondayComApiRequest.call(this, body);\n\t\t\t\t\t\tresponseData = responseData.data.boards[0].columns;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (resource === 'boardGroup') {\n\t\t\t\t\tif (operation === 'create') {\n\t\t\t\t\t\tconst boardId = this.getNodeParameter('boardId', i);\n\t\t\t\t\t\tconst name = this.getNodeParameter('name', i) as string;\n\n\t\t\t\t\t\tconst body: IGraphqlBody = {\n\t\t\t\t\t\t\tquery: `mutation ($boardId: ID!, $groupName: String!) {\n\t\t\t\t\t\t\t\t\tcreate_group (board_id: $boardId, group_name: $groupName) {\n\t\t\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}`,\n\t\t\t\t\t\t\tvariables: {\n\t\t\t\t\t\t\t\tboardId,\n\t\t\t\t\t\t\t\tgroupName: name,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tresponseData = await mondayComApiRequest.call(this, body);\n\t\t\t\t\t\tresponseData = responseData.data.create_group;\n\t\t\t\t\t}\n\t\t\t\t\tif (operation === 'delete') {\n\t\t\t\t\t\tconst boardId = this.getNodeParameter('boardId', i);\n\t\t\t\t\t\tconst groupId = this.getNodeParameter('groupId', i) as string;\n\n\t\t\t\t\t\tconst body: IGraphqlBody = {\n\t\t\t\t\t\t\tquery: `mutation ($boardId: ID!, $groupId: String!) {\n\t\t\t\t\t\t\t\t\tdelete_group (board_id: $boardId, group_id: $groupId) {\n\t\t\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}`,\n\t\t\t\t\t\t\tvariables: {\n\t\t\t\t\t\t\t\tboardId,\n\t\t\t\t\t\t\t\tgroupId,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tresponseData = await mondayComApiRequest.call(this, body);\n\t\t\t\t\t\tresponseData = responseData.data.delete_group;\n\t\t\t\t\t}\n\t\t\t\t\tif (operation === 'getAll') {\n\t\t\t\t\t\tconst boardId = this.getNodeParameter('boardId', i);\n\n\t\t\t\t\t\tconst body: IGraphqlBody = {\n\t\t\t\t\t\t\tquery: `query ($boardId: [ID!]) {\n\t\t\t\t\t\t\t\t\tboards (ids: $boardId, ){\n\t\t\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\t\t\tgroups {\n\t\t\t\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\t\t\t\ttitle\n\t\t\t\t\t\t\t\t\t\t\tcolor\n\t\t\t\t\t\t\t\t\t\t\tposition\n\t\t\t\t\t\t\t\t\t\t\tarchived\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}`,\n\t\t\t\t\t\t\tvariables: {\n\t\t\t\t\t\t\t\tboardId,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tresponseData = await mondayComApiRequest.call(this, body);\n\t\t\t\t\t\tresponseData = responseData.data.boards[0].groups;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (resource === 'boardItem') {\n\t\t\t\t\tif (operation === 'addUpdate') {\n\t\t\t\t\t\tconst itemId = this.getNodeParameter('itemId', i);\n\t\t\t\t\t\tconst value = this.getNodeParameter('value', i) as string;\n\n\t\t\t\t\t\tconst body: IGraphqlBody = {\n\t\t\t\t\t\t\tquery: `mutation ($itemId: ID!, $value: String!) {\n\t\t\t\t\t\t\t\t\tcreate_update (item_id: $itemId, body: $value) {\n\t\t\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}`,\n\t\t\t\t\t\t\tvariables: {\n\t\t\t\t\t\t\t\titemId,\n\t\t\t\t\t\t\t\tvalue,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tresponseData = await mondayComApiRequest.call(this, body);\n\t\t\t\t\t\tresponseData = responseData.data.create_update;\n\t\t\t\t\t}\n\t\t\t\t\tif (operation === 'changeColumnValue') {\n\t\t\t\t\t\tconst boardId = this.getNodeParameter('boardId', i);\n\t\t\t\t\t\tconst itemId = this.getNodeParameter('itemId', i);\n\t\t\t\t\t\tconst columnId = this.getNodeParameter('columnId', i) as string;\n\t\t\t\t\t\tconst value = this.getNodeParameter('value', i) as string;\n\n\t\t\t\t\t\tconst body: IGraphqlBody = {\n\t\t\t\t\t\t\tquery: `mutation ($boardId: ID!, $itemId: ID!, $columnId: String!, $value: JSON!) {\n\t\t\t\t\t\t\t\t\tchange_column_value (board_id: $boardId, item_id: $itemId, column_id: $columnId, value: $value) {\n\t\t\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}`,\n\t\t\t\t\t\t\tvariables: {\n\t\t\t\t\t\t\t\tboardId,\n\t\t\t\t\t\t\t\titemId,\n\t\t\t\t\t\t\t\tcolumnId,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tJSON.parse(value);\n\t\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t\tthrow new NodeOperationError(this.getNode(), 'Custom Values must be a valid JSON', {\n\t\t\t\t\t\t\t\titemIndex: i,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbody.variables.value = JSON.stringify(JSON.parse(value));\n\n\t\t\t\t\t\tresponseData = await mondayComApiRequest.call(this, body);\n\t\t\t\t\t\tresponseData = responseData.data.change_column_value;\n\t\t\t\t\t}\n\t\t\t\t\tif (operation === 'changeMultipleColumnValues') {\n\t\t\t\t\t\tconst boardId = this.getNodeParameter('boardId', i);\n\t\t\t\t\t\tconst itemId = this.getNodeParameter('itemId', i);\n\t\t\t\t\t\tconst columnValues = this.getNodeParameter('columnValues', i) as string;\n\n\t\t\t\t\t\tconst body: IGraphqlBody = {\n\t\t\t\t\t\t\tquery: `mutation ($boardId: ID!, $itemId: ID!, $columnValues: JSON!) {\n\t\t\t\t\t\t\t\t\tchange_multiple_column_values (board_id: $boardId, item_id: $itemId, column_values: $columnValues) {\n\t\t\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}`,\n\t\t\t\t\t\t\tvariables: {\n\t\t\t\t\t\t\t\tboardId,\n\t\t\t\t\t\t\t\titemId,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tJSON.parse(columnValues);\n\t\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t\tthrow new NodeOperationError(this.getNode(), 'Custom Values must be a valid JSON', {\n\t\t\t\t\t\t\t\titemIndex: i,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbody.variables.columnValues = JSON.stringify(JSON.parse(columnValues));\n\n\t\t\t\t\t\tresponseData = await mondayComApiRequest.call(this, body);\n\t\t\t\t\t\tresponseData = responseData.data.change_multiple_column_values;\n\t\t\t\t\t}\n\t\t\t\t\tif (operation === 'create') {\n\t\t\t\t\t\tconst boardId = this.getNodeParameter('boardId', i);\n\t\t\t\t\t\tconst groupId = this.getNodeParameter('groupId', i) as string;\n\t\t\t\t\t\tconst itemName = this.getNodeParameter('name', i) as string;\n\t\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i);\n\n\t\t\t\t\t\tconst body: IGraphqlBody = {\n\t\t\t\t\t\t\tquery: `mutation ($boardId: ID!, $groupId: String!, $itemName: String!, $columnValues: JSON) {\n\t\t\t\t\t\t\t\t\tcreate_item (board_id: $boardId, group_id: $groupId, item_name: $itemName, column_values: $columnValues) {\n\t\t\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}`,\n\t\t\t\t\t\t\tvariables: {\n\t\t\t\t\t\t\t\tboardId,\n\t\t\t\t\t\t\t\tgroupId,\n\t\t\t\t\t\t\t\titemName,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tif (additionalFields.columnValues) {\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tJSON.parse(additionalFields.columnValues as string);\n\t\t\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t\t\tthrow new NodeOperationError(this.getNode(), 'Custom Values must be a valid JSON', {\n\t\t\t\t\t\t\t\t\titemIndex: i,\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbody.variables.columnValues = JSON.stringify(\n\t\t\t\t\t\t\t\tJSON.parse(additionalFields.columnValues as string),\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await mondayComApiRequest.call(this, body);\n\t\t\t\t\t\tresponseData = responseData.data.create_item;\n\t\t\t\t\t}\n\t\t\t\t\tif (operation === 'delete') {\n\t\t\t\t\t\tconst itemId = this.getNodeParameter('itemId', i);\n\n\t\t\t\t\t\tconst body: IGraphqlBody = {\n\t\t\t\t\t\t\tquery: `mutation ($itemId: ID!) {\n\t\t\t\t\t\t\t\t\tdelete_item (item_id: $itemId) {\n\t\t\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}`,\n\t\t\t\t\t\t\tvariables: {\n\t\t\t\t\t\t\t\titemId,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t};\n\t\t\t\t\t\tresponseData = await mondayComApiRequest.call(this, body);\n\t\t\t\t\t\tresponseData = responseData.data.delete_item;\n\t\t\t\t\t}\n\t\t\t\t\tif (operation === 'get') {\n\t\t\t\t\t\tconst itemIds = (this.getNodeParameter('itemId', i) as string).split(',');\n\n\t\t\t\t\t\tconst body: IGraphqlBody = {\n\t\t\t\t\t\t\tquery: `query ($itemId: [ID!]){\n\t\t\t\t\t\t\t\t\titems (ids: $itemId) {\n\t\t\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\t\t\t\tcreated_at\n\t\t\t\t\t\t\t\t\t\tstate\n\t\t\t\t\t\t\t\t\t\tcolumn_values {\n\t\t\t\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\t\t\t\ttext\n\t\t\t\t\t\t\t\t\t\t\ttype\n\t\t\t\t\t\t\t\t\t\t\tvalue\n\t\t\t\t\t\t\t\t\t\t\tcolumn {\n\n\t\t\t\t\t\t\t\t\t\t\t\ttitle\n\t\t\t\t\t\t\t\t\t\t\t\tarchived\n\t\t\t\t\t\t\t\t\t\t\t\tdescription\n\t\t\t\t\t\t\t\t\t\t\t\tsettings_str\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}`,\n\t\t\t\t\t\t\tvariables: {\n\t\t\t\t\t\t\t\titemId: itemIds,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t};\n\t\t\t\t\t\tresponseData = await mondayComApiRequest.call(this, body);\n\t\t\t\t\t\tresponseData = responseData.data.items;\n\t\t\t\t\t}\n\t\t\t\t\tif (operation === 'getAll') {\n\t\t\t\t\t\tconst boardId = this.getNodeParameter('boardId', i);\n\t\t\t\t\t\tconst groupId = this.getNodeParameter('groupId', i) as string;\n\t\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', i);\n\n\t\t\t\t\t\tconst fieldsToReturn = `\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\tcreated_at\n\t\t\t\t\t\t\tstate\n\t\t\t\t\t\t\tcolumn_values {\n\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\ttext\n\t\t\t\t\t\t\t\ttype\n\t\t\t\t\t\t\t\tvalue\n\t\t\t\t\t\t\t\tcolumn {\n\t\t\t\t\t\t\t\t\ttitle\n\t\t\t\t\t\t\t\t\tarchived\n\t\t\t\t\t\t\t\t\tdescription\n\t\t\t\t\t\t\t\t\tsettings_str\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t`;\n\n\t\t\t\t\t\tconst body = {\n\t\t\t\t\t\t\tquery: `query ($boardId: [ID!], $groupId: [String], $limit: Int) {\n\t\t\t\t\t\t\t\tboards(ids: $boardId) {\n\t\t\t\t\t\t\t\t\tgroups(ids: $groupId) {\n\t\t\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\t\t\titems_page(limit: $limit) {\n\t\t\t\t\t\t\t\t\t\t\tcursor\n\t\t\t\t\t\t\t\t\t\t\titems ${fieldsToReturn}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}`,\n\t\t\t\t\t\t\tvariables: {\n\t\t\t\t\t\t\t\tboardId,\n\t\t\t\t\t\t\t\tgroupId,\n\t\t\t\t\t\t\t\tlimit: 100,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tif (returnAll) {\n\t\t\t\t\t\t\tresponseData = await mondayComApiPaginatedRequest.call(\n\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t'data.boards[0].groups[0].items_page',\n\t\t\t\t\t\t\t\tfieldsToReturn,\n\t\t\t\t\t\t\t\tbody as IDataObject,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tbody.variables.limit = this.getNodeParameter('limit', i);\n\t\t\t\t\t\t\tresponseData = await mondayComApiRequest.call(this, body);\n\t\t\t\t\t\t\tresponseData = responseData.data.boards[0].groups[0].items_page.items;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (operation === 'getByColumnValue') {\n\t\t\t\t\t\tconst boardId = this.getNodeParameter('boardId', i);\n\t\t\t\t\t\tconst columnId = this.getNodeParameter('columnId', i) as string;\n\t\t\t\t\t\tconst columnValue = this.getNodeParameter('columnValue', i) as string;\n\t\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', i);\n\n\t\t\t\t\t\tconst fieldsToReturn = `{\n\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\tcreated_at\n\t\t\t\t\t\t\tstate\n\t\t\t\t\t\t\tboard {\n\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcolumn_values {\n\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\ttext\n\t\t\t\t\t\t\t\ttype\n\t\t\t\t\t\t\t\tvalue\n\t\t\t\t\t\t\t\tcolumn {\n\t\t\t\t\t\t\t\t\ttitle\n\t\t\t\t\t\t\t\t\tarchived\n\t\t\t\t\t\t\t\t\tdescription\n\t\t\t\t\t\t\t\t\tsettings_str\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}`;\n\t\t\t\t\t\tconst body = {\n\t\t\t\t\t\t\tquery: `query ($boardId: ID!, $columnId: String!, $columnValue: String!, $limit: Int) {\n\t\t\t\t\t\t\t\titems_page_by_column_values(\n\t\t\t\t\t\t\t\t\tlimit: $limit\n\t\t\t\t\t\t\t\t\tboard_id: $boardId\n\t\t\t\t\t\t\t\t\tcolumns: [{column_id: $columnId, column_values: [$columnValue]}]\n\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\tcursor\n\t\t\t\t\t\t\t\t\titems ${fieldsToReturn}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}`,\n\t\t\t\t\t\t\tvariables: {\n\t\t\t\t\t\t\t\tboardId,\n\t\t\t\t\t\t\t\tcolumnId,\n\t\t\t\t\t\t\t\tcolumnValue,\n\t\t\t\t\t\t\t\tlimit: 100,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tif (returnAll) {\n\t\t\t\t\t\t\tresponseData = await mondayComApiPaginatedRequest.call(\n\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t'data.items_page_by_column_values',\n\t\t\t\t\t\t\t\tfieldsToReturn,\n\t\t\t\t\t\t\t\tbody as IDataObject,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tbody.variables.limit = this.getNodeParameter('limit', i);\n\t\t\t\t\t\t\tresponseData = await mondayComApiRequest.call(this, body);\n\t\t\t\t\t\t\tresponseData = responseData.data.items_page_by_column_values.items;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (operation === 'move') {\n\t\t\t\t\t\tconst groupId = this.getNodeParameter('groupId', i) as string;\n\t\t\t\t\t\tconst itemId = this.getNodeParameter('itemId', i);\n\n\t\t\t\t\t\tconst body: IGraphqlBody = {\n\t\t\t\t\t\t\tquery: `mutation ($groupId: String!, $itemId: ID!) {\n\t\t\t\t\t\t\t\t\tmove_item_to_group (group_id: $groupId, item_id: $itemId) {\n\t\t\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}`,\n\t\t\t\t\t\t\tvariables: {\n\t\t\t\t\t\t\t\tgroupId,\n\t\t\t\t\t\t\t\titemId,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tresponseData = await mondayComApiRequest.call(this, body);\n\t\t\t\t\t\tresponseData = responseData.data.move_item_to_group;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject),\n\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t);\n\n\t\t\t\treturnData.push(...executionData);\n\t\t\t} catch (error) {\n\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\tconst executionErrorData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\tthis.helpers.returnJsonArray({ error: error.message }),\n\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t);\n\t\t\t\t\treturnData.push(...executionErrorData);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\n\t\treturn [returnData];\n\t}\n}\n"],"mappings":"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","names":[]}