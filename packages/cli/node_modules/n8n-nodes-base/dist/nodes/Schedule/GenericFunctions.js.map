{"version":3,"sources":["../../../nodes/Schedule/GenericFunctions.ts"],"sourcesContent":["import moment from 'moment-timezone';\nimport { type CronExpression, randomInt } from 'n8n-workflow';\n\nimport type { IRecurrenceRule, ScheduleInterval } from './SchedulerInterface';\n\nexport function recurrenceCheck(\n\trecurrence: IRecurrenceRule,\n\trecurrenceRules: number[],\n\ttimezone: string,\n): boolean {\n\tif (!recurrence.activated) return true;\n\n\tconst intervalSize = recurrence.intervalSize;\n\tif (!intervalSize) return false;\n\n\tconst index = recurrence.index;\n\tconst typeInterval = recurrence.typeInterval;\n\tconst lastExecution = recurrenceRules[index];\n\n\tconst momentTz = moment.tz(timezone);\n\tif (typeInterval === 'hours') {\n\t\tconst hour = momentTz.hour();\n\t\tif (lastExecution === undefined || hour === (intervalSize + lastExecution) % 24) {\n\t\t\trecurrenceRules[index] = hour;\n\t\t\treturn true;\n\t\t}\n\t} else if (typeInterval === 'days') {\n\t\tconst dayOfYear = momentTz.dayOfYear();\n\t\tif (lastExecution === undefined || dayOfYear === (intervalSize + lastExecution) % 365) {\n\t\t\trecurrenceRules[index] = dayOfYear;\n\t\t\treturn true;\n\t\t}\n\t} else if (typeInterval === 'weeks') {\n\t\tconst week = momentTz.week();\n\t\tif (\n\t\t\tlastExecution === undefined || // First time executing this rule\n\t\t\tweek === (intervalSize + lastExecution) % 52 || // not first time, but minimum interval has passed\n\t\t\tweek === lastExecution // Trigger on multiple days in the same week\n\t\t) {\n\t\t\trecurrenceRules[index] = week;\n\t\t\treturn true;\n\t\t}\n\t} else if (typeInterval === 'months') {\n\t\tconst month = momentTz.month();\n\t\tif (lastExecution === undefined || month === (intervalSize + lastExecution) % 12) {\n\t\t\trecurrenceRules[index] = month;\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n\nexport const toCronExpression = (interval: ScheduleInterval): CronExpression => {\n\tif (interval.field === 'cronExpression') return interval.expression;\n\tif (interval.field === 'seconds') return `*/${interval.secondsInterval} * * * * *`;\n\n\tconst randomSecond = randomInt(0, 60);\n\tif (interval.field === 'minutes') return `${randomSecond} */${interval.minutesInterval} * * * *`;\n\n\tconst minute = interval.triggerAtMinute ?? randomInt(0, 60);\n\tif (interval.field === 'hours')\n\t\treturn `${randomSecond} ${minute} */${interval.hoursInterval} * * *`;\n\n\t// Since Cron does not support `*/` for days or weeks, all following expressions trigger more often, but are then filtered by `recurrenceCheck`\n\tconst hour = interval.triggerAtHour ?? randomInt(0, 24);\n\tif (interval.field === 'days') return `${randomSecond} ${minute} ${hour} * * *`;\n\tif (interval.field === 'weeks') {\n\t\tconst days = interval.triggerAtDay;\n\t\tconst daysOfWeek = days.length === 0 ? '*' : days.join(',');\n\t\treturn `${randomSecond} ${minute} ${hour} * * ${daysOfWeek}` as CronExpression;\n\t}\n\n\tconst dayOfMonth = interval.triggerAtDayOfMonth ?? randomInt(0, 31);\n\treturn `${randomSecond} ${minute} ${hour} ${dayOfMonth} */${interval.monthsInterval} *`;\n};\n\nexport function intervalToRecurrence(interval: ScheduleInterval, index: number) {\n\tlet recurrence: IRecurrenceRule = { activated: false };\n\n\tif (interval.field === 'hours') {\n\t\tconst { hoursInterval } = interval;\n\t\tif (hoursInterval !== 1) {\n\t\t\trecurrence = {\n\t\t\t\tactivated: true,\n\t\t\t\tindex,\n\t\t\t\tintervalSize: hoursInterval,\n\t\t\t\ttypeInterval: 'hours',\n\t\t\t};\n\t\t}\n\t}\n\n\tif (interval.field === 'days') {\n\t\tconst { daysInterval } = interval;\n\t\tif (daysInterval !== 1) {\n\t\t\trecurrence = {\n\t\t\t\tactivated: true,\n\t\t\t\tindex,\n\t\t\t\tintervalSize: daysInterval,\n\t\t\t\ttypeInterval: 'days',\n\t\t\t};\n\t\t}\n\t}\n\n\tif (interval.field === 'weeks') {\n\t\tconst { weeksInterval } = interval;\n\t\tif (weeksInterval !== 1) {\n\t\t\trecurrence = {\n\t\t\t\tactivated: true,\n\t\t\t\tindex,\n\t\t\t\tintervalSize: weeksInterval,\n\t\t\t\ttypeInterval: 'weeks',\n\t\t\t};\n\t\t}\n\t}\n\n\tif (interval.field === 'months') {\n\t\tconst { monthsInterval } = interval;\n\t\tif (monthsInterval !== 1) {\n\t\t\trecurrence = {\n\t\t\t\tactivated: true,\n\t\t\t\tindex,\n\t\t\t\tintervalSize: monthsInterval,\n\t\t\t\ttypeInterval: 'months',\n\t\t\t};\n\t\t}\n\t}\n\n\treturn recurrence;\n}\n"],"mappings":"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","names":["moment"]}