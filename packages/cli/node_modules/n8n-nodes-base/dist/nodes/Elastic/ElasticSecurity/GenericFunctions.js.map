{"version":3,"sources":["../../../../nodes/Elastic/ElasticSecurity/GenericFunctions.ts"],"sourcesContent":["import type {\n\tIExecuteFunctions,\n\tIDataObject,\n\tILoadOptionsFunctions,\n\tJsonObject,\n\tIRequestOptions,\n\tIHttpRequestMethods,\n} from 'n8n-workflow';\nimport { NodeApiError, NodeOperationError } from 'n8n-workflow';\n\nimport type { Connector, ElasticSecurityApiCredentials } from './types';\n\nexport function tolerateTrailingSlash(baseUrl: string) {\n\treturn baseUrl.endsWith('/') ? baseUrl.substr(0, baseUrl.length - 1) : baseUrl;\n}\n\nexport async function elasticSecurityApiRequest(\n\tthis: IExecuteFunctions | ILoadOptionsFunctions,\n\tmethod: IHttpRequestMethods,\n\tendpoint: string,\n\tbody: IDataObject = {},\n\tqs: IDataObject = {},\n) {\n\tconst { baseUrl: rawBaseUrl } =\n\t\tawait this.getCredentials<ElasticSecurityApiCredentials>('elasticSecurityApi');\n\n\tconst baseUrl = tolerateTrailingSlash(rawBaseUrl);\n\n\tconst options: IRequestOptions = {\n\t\tmethod,\n\t\tbody,\n\t\tqs,\n\t\turi: `${baseUrl}/api${endpoint}`,\n\t\tjson: true,\n\t};\n\n\tif (!Object.keys(body).length) {\n\t\tdelete options.body;\n\t}\n\n\tif (!Object.keys(qs).length) {\n\t\tdelete options.qs;\n\t}\n\n\ttry {\n\t\treturn await this.helpers.requestWithAuthentication.call(this, 'elasticSecurityApi', options);\n\t} catch (error) {\n\t\tif (error?.error?.error === 'Not Acceptable' && error?.error?.message) {\n\t\t\terror.error.error = `${error.error.error}: ${error.error.message}`;\n\t\t}\n\n\t\tthrow new NodeApiError(this.getNode(), error as JsonObject);\n\t}\n}\n\nexport async function elasticSecurityApiRequestAllItems(\n\tthis: IExecuteFunctions,\n\tmethod: IHttpRequestMethods,\n\tendpoint: string,\n\tbody: IDataObject = {},\n\tqs: IDataObject = {},\n) {\n\tlet _page = 1;\n\tconst returnData: IDataObject[] = [];\n\tlet responseData: any;\n\n\tconst resource = this.getNodeParameter('resource', 0) as 'case' | 'caseComment';\n\n\tdo {\n\t\tresponseData = await elasticSecurityApiRequest.call(this, method, endpoint, body, qs);\n\t\t_page++;\n\n\t\tconst items = resource === 'case' ? responseData.cases : responseData;\n\n\t\treturnData.push(...(items as IDataObject[]));\n\t} while (returnData.length < responseData.total);\n\n\treturn returnData;\n}\n\nexport async function handleListing(\n\tthis: IExecuteFunctions,\n\tmethod: IHttpRequestMethods,\n\tendpoint: string,\n\tbody: IDataObject = {},\n\tqs: IDataObject = {},\n) {\n\tconst returnAll = this.getNodeParameter('returnAll', 0);\n\n\tif (returnAll) {\n\t\treturn await elasticSecurityApiRequestAllItems.call(this, method, endpoint, body, qs);\n\t}\n\n\tconst responseData = await elasticSecurityApiRequestAllItems.call(\n\t\tthis,\n\t\tmethod,\n\t\tendpoint,\n\t\tbody,\n\t\tqs,\n\t);\n\tconst limit = this.getNodeParameter('limit', 0);\n\n\treturn responseData.slice(0, limit);\n}\n\n/**\n * Retrieve a connector name and type from a connector ID.\n *\n * https://www.elastic.co/guide/en/kibana/master/get-connector-api.html\n */\nexport async function getConnector(this: IExecuteFunctions, connectorId: string) {\n\tconst endpoint = `/actions/connector/${connectorId}`;\n\tconst {\n\t\tid,\n\t\tname,\n\t\tconnector_type_id: type,\n\t} = (await elasticSecurityApiRequest.call(this, 'GET', endpoint)) as Connector;\n\n\treturn { id, name, type };\n}\n\nexport function throwOnEmptyUpdate(this: IExecuteFunctions, resource: string) {\n\tthrow new NodeOperationError(\n\t\tthis.getNode(),\n\t\t`Please enter at least one field to update for the ${resource}`,\n\t);\n}\n\nexport async function getVersion(this: IExecuteFunctions, endpoint: string) {\n\tconst { version } = (await elasticSecurityApiRequest.call(this, 'GET', endpoint)) as {\n\t\tversion?: string;\n\t};\n\n\tif (!version) {\n\t\tthrow new NodeOperationError(this.getNode(), 'Cannot retrieve version for resource');\n\t}\n\n\treturn version;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA,0BAAiD;AAI1C,SAAS,sBAAsB,SAAiB;AACtD,SAAO,QAAQ,SAAS,GAAG,IAAI,QAAQ,OAAO,GAAG,QAAQ,SAAS,CAAC,IAAI;AACxE;AAEA,eAAsB,0BAErB,QACA,UACA,OAAoB,CAAC,GACrB,KAAkB,CAAC,GAClB;AACD,QAAM,EAAE,SAAS,WAAW,IAC3B,MAAM,KAAK,eAA8C,oBAAoB;AAE9E,QAAM,UAAU,sBAAsB,UAAU;AAEhD,QAAM,UAA2B;AAAA,IAChC;AAAA,IACA;AAAA,IACA;AAAA,IACA,KAAK,GAAG,OAAO,OAAO,QAAQ;AAAA,IAC9B,MAAM;AAAA,EACP;AAEA,MAAI,CAAC,OAAO,KAAK,IAAI,EAAE,QAAQ;AAC9B,WAAO,QAAQ;AAAA,EAChB;AAEA,MAAI,CAAC,OAAO,KAAK,EAAE,EAAE,QAAQ;AAC5B,WAAO,QAAQ;AAAA,EAChB;AAEA,MAAI;AACH,WAAO,MAAM,KAAK,QAAQ,0BAA0B,KAAK,MAAM,sBAAsB,OAAO;AAAA,EAC7F,SAAS,OAAO;AACf,QAAI,OAAO,OAAO,UAAU,oBAAoB,OAAO,OAAO,SAAS;AACtE,YAAM,MAAM,QAAQ,GAAG,MAAM,MAAM,KAAK,KAAK,MAAM,MAAM,OAAO;AAAA,IACjE;AAEA,UAAM,IAAI,iCAAa,KAAK,QAAQ,GAAG,KAAmB;AAAA,EAC3D;AACD;AAEA,eAAsB,kCAErB,QACA,UACA,OAAoB,CAAC,GACrB,KAAkB,CAAC,GAClB;AACD,MAAI,QAAQ;AACZ,QAAM,aAA4B,CAAC;AACnC,MAAI;AAEJ,QAAM,WAAW,KAAK,iBAAiB,YAAY,CAAC;AAEpD,KAAG;AACF,mBAAe,MAAM,0BAA0B,KAAK,MAAM,QAAQ,UAAU,MAAM,EAAE;AACpF;AAEA,UAAM,QAAQ,aAAa,SAAS,aAAa,QAAQ;AAEzD,eAAW,KAAK,GAAI,KAAuB;AAAA,EAC5C,SAAS,WAAW,SAAS,aAAa;AAE1C,SAAO;AACR;AAEA,eAAsB,cAErB,QACA,UACA,OAAoB,CAAC,GACrB,KAAkB,CAAC,GAClB;AACD,QAAM,YAAY,KAAK,iBAAiB,aAAa,CAAC;AAEtD,MAAI,WAAW;AACd,WAAO,MAAM,kCAAkC,KAAK,MAAM,QAAQ,UAAU,MAAM,EAAE;AAAA,EACrF;AAEA,QAAM,eAAe,MAAM,kCAAkC;AAAA,IAC5D;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACD;AACA,QAAM,QAAQ,KAAK,iBAAiB,SAAS,CAAC;AAE9C,SAAO,aAAa,MAAM,GAAG,KAAK;AACnC;AAOA,eAAsB,aAAsC,aAAqB;AAChF,QAAM,WAAW,sBAAsB,WAAW;AAClD,QAAM;AAAA,IACL;AAAA,IACA;AAAA,IACA,mBAAmB;AAAA,EACpB,IAAK,MAAM,0BAA0B,KAAK,MAAM,OAAO,QAAQ;AAE/D,SAAO,EAAE,IAAI,MAAM,KAAK;AACzB;AAEO,SAAS,mBAA4C,UAAkB;AAC7E,QAAM,IAAI;AAAA,IACT,KAAK,QAAQ;AAAA,IACb,qDAAqD,QAAQ;AAAA,EAC9D;AACD;AAEA,eAAsB,WAAoC,UAAkB;AAC3E,QAAM,EAAE,QAAQ,IAAK,MAAM,0BAA0B,KAAK,MAAM,OAAO,QAAQ;AAI/E,MAAI,CAAC,SAAS;AACb,UAAM,IAAI,uCAAmB,KAAK,QAAQ,GAAG,sCAAsC;AAAA,EACpF;AAEA,SAAO;AACR;","names":[]}