{"version":3,"sources":["../../../../nodes/Elastic/Elasticsearch/GenericFunctions.ts"],"sourcesContent":["import type {\n\tIExecuteFunctions,\n\tIDataObject,\n\tJsonObject,\n\tIHttpRequestOptions,\n\tIHttpRequestMethods,\n} from 'n8n-workflow';\nimport { NodeApiError } from 'n8n-workflow';\n\nimport type { ElasticsearchApiCredentials } from './types';\n\nexport async function elasticsearchBulkApiRequest(this: IExecuteFunctions, body: IDataObject) {\n\tconst { baseUrl, ignoreSSLIssues } =\n\t\tawait this.getCredentials<ElasticsearchApiCredentials>('elasticsearchApi');\n\n\tconst bulkBody = Object.values(body).flat().join('\\n') + '\\n';\n\n\tconst options: IHttpRequestOptions = {\n\t\tmethod: 'POST',\n\t\theaders: { 'Content-Type': 'application/x-ndjson' },\n\t\tbody: bulkBody,\n\t\turl: `${baseUrl.replace(/\\/$/, '')}/_bulk`,\n\t\tskipSslCertificateValidation: ignoreSSLIssues,\n\t\treturnFullResponse: true,\n\t\tignoreHttpStatusErrors: true,\n\t};\n\n\tconst response = await this.helpers.httpRequestWithAuthentication.call(\n\t\tthis,\n\t\t'elasticsearchApi',\n\t\toptions,\n\t);\n\n\tif (response.statusCode > 299) {\n\t\tif (this.continueOnFail()) {\n\t\t\treturn Object.values(body).map((_) => ({ error: response.body.error }));\n\t\t} else {\n\t\t\tthrow new NodeApiError(this.getNode(), { error: response.body.error } as JsonObject);\n\t\t}\n\t}\n\n\treturn response.body.items.map((item: IDataObject) => {\n\t\treturn {\n\t\t\t...(item.index as IDataObject),\n\t\t\t...(item.update as IDataObject),\n\t\t\t...(item.create as IDataObject),\n\t\t\t...(item.delete as IDataObject),\n\t\t\t...(item.error as IDataObject),\n\t\t};\n\t});\n}\n\nexport async function elasticsearchApiRequest(\n\tthis: IExecuteFunctions,\n\tmethod: IHttpRequestMethods,\n\tendpoint: string,\n\tbody: IDataObject = {},\n\tqs: IDataObject = {},\n) {\n\tconst { baseUrl, ignoreSSLIssues } =\n\t\tawait this.getCredentials<ElasticsearchApiCredentials>('elasticsearchApi');\n\n\tconst options: IHttpRequestOptions = {\n\t\tmethod,\n\t\tbody,\n\t\tqs,\n\t\turl: `${baseUrl.replace(/\\/$/, '')}${endpoint}`,\n\t\tjson: true,\n\t\tskipSslCertificateValidation: ignoreSSLIssues,\n\t};\n\n\tif (!Object.keys(body).length) {\n\t\tdelete options.body;\n\t}\n\n\tif (!Object.keys(qs).length) {\n\t\tdelete options.qs;\n\t}\n\n\ttry {\n\t\treturn await this.helpers.httpRequestWithAuthentication.call(this, 'elasticsearchApi', options);\n\t} catch (error) {\n\t\tthrow new NodeApiError(this.getNode(), error as JsonObject);\n\t}\n}\n\nexport async function elasticsearchApiRequestAllItems(\n\tthis: IExecuteFunctions,\n\tindexId: string,\n\tbody: IDataObject = {},\n\tqs: IDataObject = {},\n): Promise<any> {\n\t//https://www.elastic.co/guide/en/elasticsearch/reference/7.16/paginate-search-results.html#search-after\n\ttry {\n\t\t//create a point in time (PIT) to preserve the current index state over your searches\n\t\tlet pit = (\n\t\t\tawait elasticsearchApiRequest.call(this, 'POST', `/${indexId}/_pit`, {}, { keep_alive: '1m' })\n\t\t)?.id as string;\n\n\t\tlet returnData: IDataObject[] = [];\n\t\tlet responseData;\n\t\tlet searchAfter: string[] = [];\n\n\t\tconst requestBody: IDataObject = {\n\t\t\t...body,\n\t\t\tsize: 10000,\n\t\t\tpit: {\n\t\t\t\tid: pit,\n\t\t\t\tkeep_alive: '1m',\n\t\t\t},\n\t\t\ttrack_total_hits: false, //Disable the tracking of total hits to speed up pagination\n\t\t};\n\n\t\tresponseData = await elasticsearchApiRequest.call(this, 'POST', '/_search', requestBody, qs);\n\t\tif (responseData?.hits?.hits) {\n\t\t\treturnData = returnData.concat(responseData.hits.hits as IDataObject[]);\n\t\t\tconst lastHitIndex = responseData.hits.hits.length - 1;\n\t\t\t//Sort values for the last returned hit with the tiebreaker value\n\t\t\tsearchAfter = responseData.hits.hits[lastHitIndex].sort;\n\t\t\t//Update id for the point in time\n\t\t\tpit = responseData.pit_id;\n\t\t} else {\n\t\t\treturn [];\n\t\t}\n\n\t\twhile (true) {\n\t\t\trequestBody.search_after = searchAfter;\n\t\t\trequestBody.pit = { id: pit, keep_alive: '1m' };\n\n\t\t\tresponseData = await elasticsearchApiRequest.call(this, 'POST', '/_search', requestBody, qs);\n\n\t\t\tif (responseData?.hits?.hits?.length) {\n\t\t\t\treturnData = returnData.concat(responseData.hits.hits as IDataObject[]);\n\t\t\t\tconst lastHitIndex = responseData.hits.hits.length - 1;\n\t\t\t\tsearchAfter = responseData.hits.hits[lastHitIndex].sort;\n\t\t\t\tpit = responseData.pit_id;\n\t\t\t} else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tawait elasticsearchApiRequest.call(this, 'DELETE', '/_pit', { id: pit });\n\n\t\treturn returnData;\n\t} catch (error) {\n\t\tthrow new NodeApiError(this.getNode(), error as JsonObject);\n\t}\n}\n"],"mappings":"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","names":[]}