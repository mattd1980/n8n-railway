{"version":3,"sources":["../../../nodes/SentryIo/SentryIo.node.ts"],"sourcesContent":["import {\n\ttype IExecuteFunctions,\n\ttype IDataObject,\n\ttype ILoadOptionsFunctions,\n\ttype INodeExecutionData,\n\ttype INodePropertyOptions,\n\ttype INodeType,\n\ttype INodeTypeDescription,\n\tNodeConnectionTypes,\n} from 'n8n-workflow';\n\nimport { eventFields, eventOperations } from './EventDescription';\nimport { sentryApiRequestAllItems, sentryIoApiRequest } from './GenericFunctions';\nimport type { ICommit, IPatchSet, IRef } from './Interface';\nimport { issueFields, issueOperations } from './IssueDescription';\nimport { organizationFields, organizationOperations } from './OrganizationDescription';\nimport { projectFields, projectOperations } from './ProjectDescription';\nimport { releaseFields, releaseOperations } from './ReleaseDescription';\nimport { teamFields, teamOperations } from './TeamDescription';\n\nexport class SentryIo implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'Sentry.io',\n\t\tname: 'sentryIo',\n\t\ticon: { light: 'file:sentryio.svg', dark: 'file:sentryio.dark.svg' },\n\t\tgroup: ['output'],\n\t\tversion: 1,\n\t\tsubtitle: '={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}',\n\t\tdescription: 'Consume Sentry.io API',\n\t\tdefaults: {\n\t\t\tname: 'Sentry.io',\n\t\t},\n\t\tusableAsTool: true,\n\t\tinputs: [NodeConnectionTypes.Main],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tcredentials: [\n\t\t\t{\n\t\t\t\tname: 'sentryIoOAuth2Api',\n\t\t\t\trequired: true,\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tauthentication: ['oAuth2'],\n\t\t\t\t\t\tsentryVersion: ['cloud'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'sentryIoApi',\n\t\t\t\trequired: true,\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tauthentication: ['accessToken'],\n\t\t\t\t\t\tsentryVersion: ['cloud'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'sentryIoServerApi',\n\t\t\t\trequired: true,\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tauthentication: ['accessToken'],\n\t\t\t\t\t\tsentryVersion: ['server'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Sentry Version',\n\t\t\t\tname: 'sentryVersion',\n\t\t\t\ttype: 'options',\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Cloud',\n\t\t\t\t\t\tvalue: 'cloud',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Server (Self Hosted)',\n\t\t\t\t\t\tvalue: 'server',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'cloud',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Authentication',\n\t\t\t\tname: 'authentication',\n\t\t\t\ttype: 'options',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tsentryVersion: ['cloud'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Access Token',\n\t\t\t\t\t\tvalue: 'accessToken',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'OAuth2',\n\t\t\t\t\t\tvalue: 'oAuth2',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'accessToken',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Authentication',\n\t\t\t\tname: 'authentication',\n\t\t\t\ttype: 'options',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tsentryVersion: ['server'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Access Token',\n\t\t\t\t\t\tvalue: 'accessToken',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'accessToken',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Resource',\n\t\t\t\tname: 'resource',\n\t\t\t\ttype: 'options',\n\t\t\t\tnoDataExpression: true,\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Event',\n\t\t\t\t\t\tvalue: 'event',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Issue',\n\t\t\t\t\t\tvalue: 'issue',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Organization',\n\t\t\t\t\t\tvalue: 'organization',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Project',\n\t\t\t\t\t\tvalue: 'project',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Release',\n\t\t\t\t\t\tvalue: 'release',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Team',\n\t\t\t\t\t\tvalue: 'team',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'event',\n\t\t\t},\n\n\t\t\t// EVENT\n\t\t\t...eventOperations,\n\t\t\t...eventFields,\n\n\t\t\t// ISSUE\n\t\t\t...issueOperations,\n\t\t\t...issueFields,\n\n\t\t\t// ORGANIZATION\n\t\t\t...organizationOperations,\n\t\t\t...organizationFields,\n\n\t\t\t// PROJECT\n\t\t\t...projectOperations,\n\t\t\t...projectFields,\n\n\t\t\t// RELEASE\n\t\t\t...releaseOperations,\n\t\t\t...releaseFields,\n\n\t\t\t// TEAM\n\t\t\t...teamOperations,\n\t\t\t...teamFields,\n\t\t],\n\t};\n\n\tmethods = {\n\t\tloadOptions: {\n\t\t\t// Get all organizations so they can be displayed easily\n\t\t\tasync getOrganizations(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst returnData: INodePropertyOptions[] = [];\n\t\t\t\tconst organizations = await sentryApiRequestAllItems.call(\n\t\t\t\t\tthis,\n\t\t\t\t\t'GET',\n\t\t\t\t\t'/api/0/organizations/',\n\t\t\t\t\t{},\n\t\t\t\t);\n\n\t\t\t\tfor (const organization of organizations) {\n\t\t\t\t\treturnData.push({\n\t\t\t\t\t\tname: organization.slug,\n\t\t\t\t\t\tvalue: organization.slug,\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\treturnData.sort((a, b) => {\n\t\t\t\t\tif (a.name < b.name) {\n\t\t\t\t\t\treturn -1;\n\t\t\t\t\t}\n\t\t\t\t\tif (a.name > b.name) {\n\t\t\t\t\t\treturn 1;\n\t\t\t\t\t}\n\t\t\t\t\treturn 0;\n\t\t\t\t});\n\n\t\t\t\treturn returnData;\n\t\t\t},\n\t\t\t// Get all projects so can be displayed easily\n\t\t\tasync getProjects(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst returnData: INodePropertyOptions[] = [];\n\t\t\t\tconst projects = await sentryApiRequestAllItems.call(this, 'GET', '/api/0/projects/', {});\n\n\t\t\t\tconst organizationSlug = this.getNodeParameter('organizationSlug') as string;\n\n\t\t\t\tfor (const project of projects) {\n\t\t\t\t\tif (organizationSlug !== project.organization.slug) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\treturnData.push({\n\t\t\t\t\t\tname: project.slug,\n\t\t\t\t\t\tvalue: project.slug,\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\treturnData.sort((a, b) => {\n\t\t\t\t\tif (a.name < b.name) {\n\t\t\t\t\t\treturn -1;\n\t\t\t\t\t}\n\t\t\t\t\tif (a.name > b.name) {\n\t\t\t\t\t\treturn 1;\n\t\t\t\t\t}\n\t\t\t\t\treturn 0;\n\t\t\t\t});\n\n\t\t\t\treturn returnData;\n\t\t\t},\n\t\t\t// Get an organization teams\n\t\t\tasync getTeams(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst returnData: INodePropertyOptions[] = [];\n\n\t\t\t\tconst organizationSlug = this.getNodeParameter('organizationSlug') as string;\n\t\t\t\tconst teams = await sentryApiRequestAllItems.call(\n\t\t\t\t\tthis,\n\t\t\t\t\t'GET',\n\t\t\t\t\t`/api/0/organizations/${organizationSlug}/teams/`,\n\t\t\t\t\t{},\n\t\t\t\t);\n\n\t\t\t\tfor (const team of teams) {\n\t\t\t\t\treturnData.push({\n\t\t\t\t\t\tname: team.slug,\n\t\t\t\t\t\tvalue: team.slug,\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\treturnData.sort((a, b) => {\n\t\t\t\t\tif (a.name < b.name) {\n\t\t\t\t\t\treturn -1;\n\t\t\t\t\t}\n\t\t\t\t\tif (a.name > b.name) {\n\t\t\t\t\t\treturn 1;\n\t\t\t\t\t}\n\t\t\t\t\treturn 0;\n\t\t\t\t});\n\n\t\t\t\treturn returnData;\n\t\t\t},\n\t\t},\n\t};\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t\tconst items = this.getInputData();\n\t\tconst returnData: INodeExecutionData[] = [];\n\t\tconst length = items.length;\n\t\tlet responseData;\n\t\tconst qs: IDataObject = {};\n\t\tconst resource = this.getNodeParameter('resource', 0);\n\t\tconst operation = this.getNodeParameter('operation', 0);\n\n\t\tfor (let i = 0; i < length; i++) {\n\t\t\ttry {\n\t\t\t\tif (resource === 'event') {\n\t\t\t\t\tif (operation === 'getAll') {\n\t\t\t\t\t\tconst organizationSlug = this.getNodeParameter('organizationSlug', i) as string;\n\t\t\t\t\t\tconst projectSlug = this.getNodeParameter('projectSlug', i) as string;\n\t\t\t\t\t\tconst full = this.getNodeParameter('full', i) as boolean;\n\t\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', i);\n\n\t\t\t\t\t\tconst endpoint = `/api/0/projects/${organizationSlug}/${projectSlug}/events/`;\n\n\t\t\t\t\t\tif (!returnAll) {\n\t\t\t\t\t\t\tconst limit = this.getNodeParameter('limit', i);\n\t\t\t\t\t\t\tqs.limit = limit;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tqs.full = full;\n\n\t\t\t\t\t\tresponseData = await sentryApiRequestAllItems.call(this, 'GET', endpoint, {}, qs);\n\n\t\t\t\t\t\tif (!returnAll) {\n\t\t\t\t\t\t\tconst limit = this.getNodeParameter('limit', i);\n\t\t\t\t\t\t\tresponseData = responseData.splice(0, limit);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (operation === 'get') {\n\t\t\t\t\t\tconst organizationSlug = this.getNodeParameter('organizationSlug', i) as string;\n\t\t\t\t\t\tconst projectSlug = this.getNodeParameter('projectSlug', i) as string;\n\t\t\t\t\t\tconst eventId = this.getNodeParameter('eventId', i) as string;\n\n\t\t\t\t\t\tconst endpoint = `/api/0/projects/${organizationSlug}/${projectSlug}/events/${eventId}/`;\n\n\t\t\t\t\t\tresponseData = await sentryIoApiRequest.call(this, 'GET', endpoint, qs);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (resource === 'issue') {\n\t\t\t\t\tif (operation === 'getAll') {\n\t\t\t\t\t\tconst organizationSlug = this.getNodeParameter('organizationSlug', i) as string;\n\t\t\t\t\t\tconst projectSlug = this.getNodeParameter('projectSlug', i) as string;\n\t\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', i);\n\n\t\t\t\t\t\tconst endpoint = `/api/0/projects/${organizationSlug}/${projectSlug}/issues/`;\n\n\t\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i);\n\n\t\t\t\t\t\tif (additionalFields.statsPeriod) {\n\t\t\t\t\t\t\tqs.statsPeriod = additionalFields.statsPeriod as string;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (additionalFields.shortIdLookup) {\n\t\t\t\t\t\t\tqs.shortIdLookup = additionalFields.shortIdLookup as boolean;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (additionalFields.query) {\n\t\t\t\t\t\t\tqs.query = additionalFields.query as string;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (!returnAll) {\n\t\t\t\t\t\t\tconst limit = this.getNodeParameter('limit', i);\n\t\t\t\t\t\t\tqs.limit = limit;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await sentryApiRequestAllItems.call(this, 'GET', endpoint, {}, qs);\n\n\t\t\t\t\t\tif (!returnAll) {\n\t\t\t\t\t\t\tconst limit = this.getNodeParameter('limit', i);\n\t\t\t\t\t\t\tresponseData = responseData.splice(0, limit);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (operation === 'get') {\n\t\t\t\t\t\tconst issueId = this.getNodeParameter('issueId', i) as string;\n\t\t\t\t\t\tconst endpoint = `/api/0/issues/${issueId}/`;\n\n\t\t\t\t\t\tresponseData = await sentryIoApiRequest.call(this, 'GET', endpoint, qs);\n\t\t\t\t\t}\n\t\t\t\t\tif (operation === 'delete') {\n\t\t\t\t\t\tconst issueId = this.getNodeParameter('issueId', i) as string;\n\t\t\t\t\t\tconst endpoint = `/api/0/issues/${issueId}/`;\n\n\t\t\t\t\t\tresponseData = await sentryIoApiRequest.call(this, 'DELETE', endpoint, qs);\n\n\t\t\t\t\t\tresponseData = { success: true };\n\t\t\t\t\t}\n\t\t\t\t\tif (operation === 'update') {\n\t\t\t\t\t\tconst issueId = this.getNodeParameter('issueId', i) as string;\n\t\t\t\t\t\tconst endpoint = `/api/0/issues/${issueId}/`;\n\t\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i);\n\n\t\t\t\t\t\tif (additionalFields.status) {\n\t\t\t\t\t\t\tqs.status = additionalFields.status as string;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (additionalFields.assignedTo) {\n\t\t\t\t\t\t\tqs.assignedTo = additionalFields.assignedTo as string;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (additionalFields.hasSeen) {\n\t\t\t\t\t\t\tqs.hasSeen = additionalFields.hasSeen as boolean;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (additionalFields.isBookmarked) {\n\t\t\t\t\t\t\tqs.isBookmarked = additionalFields.isBookmarked as boolean;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (additionalFields.isSubscribed) {\n\t\t\t\t\t\t\tqs.isSubscribed = additionalFields.isSubscribed as boolean;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (additionalFields.isPublic) {\n\t\t\t\t\t\t\tqs.isPublic = additionalFields.isPublic as boolean;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await sentryIoApiRequest.call(this, 'PUT', endpoint, qs);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (resource === 'organization') {\n\t\t\t\t\tif (operation === 'get') {\n\t\t\t\t\t\tconst organizationSlug = this.getNodeParameter('organizationSlug', i) as string;\n\t\t\t\t\t\tconst endpoint = `/api/0/organizations/${organizationSlug}/`;\n\n\t\t\t\t\t\tresponseData = await sentryIoApiRequest.call(this, 'GET', endpoint, qs);\n\t\t\t\t\t}\n\t\t\t\t\tif (operation === 'getAll') {\n\t\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', i);\n\t\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i);\n\t\t\t\t\t\tconst endpoint = '/api/0/organizations/';\n\n\t\t\t\t\t\tif (additionalFields.member) {\n\t\t\t\t\t\t\tqs.member = additionalFields.member as boolean;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (additionalFields.owner) {\n\t\t\t\t\t\t\tqs.owner = additionalFields.owner as boolean;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (!returnAll) {\n\t\t\t\t\t\t\tconst limit = this.getNodeParameter('limit', i);\n\t\t\t\t\t\t\tqs.limit = limit;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await sentryApiRequestAllItems.call(this, 'GET', endpoint, {}, qs);\n\n\t\t\t\t\t\tif (responseData === undefined) {\n\t\t\t\t\t\t\tresponseData = [];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (!returnAll) {\n\t\t\t\t\t\t\tconst limit = this.getNodeParameter('limit', i);\n\t\t\t\t\t\t\tresponseData = responseData.splice(0, limit);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (operation === 'create') {\n\t\t\t\t\t\tconst name = this.getNodeParameter('name', i) as string;\n\t\t\t\t\t\tconst agreeTerms = this.getNodeParameter('agreeTerms', i) as boolean;\n\t\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i);\n\t\t\t\t\t\tconst endpoint = '/api/0/organizations/';\n\n\t\t\t\t\t\tqs.name = name;\n\t\t\t\t\t\tqs.agreeTerms = agreeTerms;\n\n\t\t\t\t\t\tif (additionalFields.slug) {\n\t\t\t\t\t\t\tqs.slug = additionalFields.slug as string;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await sentryIoApiRequest.call(this, 'POST', endpoint, qs);\n\t\t\t\t\t}\n\t\t\t\t\tif (operation === 'update') {\n\t\t\t\t\t\tconst organizationSlug = this.getNodeParameter('organization_slug', i) as string;\n\t\t\t\t\t\tconst endpoint = `/api/0/organizations/${organizationSlug}/`;\n\n\t\t\t\t\t\tconst body = this.getNodeParameter('updateFields', i);\n\n\t\t\t\t\t\tresponseData = await sentryIoApiRequest.call(this, 'PUT', endpoint, body, qs);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (resource === 'project') {\n\t\t\t\t\tif (operation === 'create') {\n\t\t\t\t\t\tconst organizationSlug = this.getNodeParameter('organizationSlug', i) as string;\n\t\t\t\t\t\tconst teamSlug = this.getNodeParameter('teamSlug', i) as string;\n\t\t\t\t\t\tconst name = this.getNodeParameter('name', i) as string;\n\n\t\t\t\t\t\tconst endpoint = `/api/0/teams/${organizationSlug}/${teamSlug}/projects/`;\n\n\t\t\t\t\t\tconst body = {\n\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\t...this.getNodeParameter('additionalFields', i),\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tresponseData = await sentryIoApiRequest.call(this, 'POST', endpoint, body, qs);\n\t\t\t\t\t}\n\t\t\t\t\tif (operation === 'get') {\n\t\t\t\t\t\tconst organizationSlug = this.getNodeParameter('organizationSlug', i) as string;\n\t\t\t\t\t\tconst projectSlug = this.getNodeParameter('projectSlug', i) as string;\n\t\t\t\t\t\tconst endpoint = `/api/0/projects/${organizationSlug}/${projectSlug}/`;\n\n\t\t\t\t\t\tresponseData = await sentryIoApiRequest.call(this, 'GET', endpoint, qs);\n\t\t\t\t\t}\n\t\t\t\t\tif (operation === 'getAll') {\n\t\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', i);\n\t\t\t\t\t\tconst endpoint = '/api/0/projects/';\n\n\t\t\t\t\t\tif (!returnAll) {\n\t\t\t\t\t\t\tconst limit = this.getNodeParameter('limit', i);\n\t\t\t\t\t\t\tqs.limit = limit;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await sentryApiRequestAllItems.call(this, 'GET', endpoint, {}, qs);\n\n\t\t\t\t\t\tif (!returnAll) {\n\t\t\t\t\t\t\tconst limit = this.getNodeParameter('limit', i);\n\t\t\t\t\t\t\tresponseData = responseData.splice(0, limit);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (operation === 'update') {\n\t\t\t\t\t\tconst organizationSlug = this.getNodeParameter('organizationSlug', i) as string;\n\t\t\t\t\t\tconst projectSlug = this.getNodeParameter('projectSlug', i) as string;\n\t\t\t\t\t\tconst endpoint = `/api/0/projects/${organizationSlug}/${projectSlug}/`;\n\t\t\t\t\t\tconst body = this.getNodeParameter('updateFields', i);\n\n\t\t\t\t\t\tresponseData = await sentryIoApiRequest.call(this, 'PUT', endpoint, body, qs);\n\t\t\t\t\t}\n\t\t\t\t\tif (operation === 'delete') {\n\t\t\t\t\t\tconst organizationSlug = this.getNodeParameter('organizationSlug', i) as string;\n\t\t\t\t\t\tconst projectSlug = this.getNodeParameter('projectSlug', i) as string;\n\t\t\t\t\t\tconst endpoint = `/api/0/projects/${organizationSlug}/${projectSlug}/`;\n\n\t\t\t\t\t\tresponseData = await sentryIoApiRequest.call(this, 'DELETE', endpoint, qs);\n\t\t\t\t\t\tresponseData = { success: true };\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (resource === 'release') {\n\t\t\t\t\tif (operation === 'get') {\n\t\t\t\t\t\tconst organizationSlug = this.getNodeParameter('organizationSlug', i) as string;\n\t\t\t\t\t\tconst version = this.getNodeParameter('version', i) as string;\n\t\t\t\t\t\tconst endpoint = `/api/0/organizations/${organizationSlug}/releases/${version}/`;\n\n\t\t\t\t\t\tresponseData = await sentryIoApiRequest.call(this, 'GET', endpoint, qs);\n\t\t\t\t\t}\n\t\t\t\t\tif (operation === 'getAll') {\n\t\t\t\t\t\tconst organizationSlug = this.getNodeParameter('organizationSlug', i) as string;\n\t\t\t\t\t\tconst endpoint = `/api/0/organizations/${organizationSlug}/releases/`;\n\t\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i);\n\t\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', i);\n\n\t\t\t\t\t\tif (additionalFields.query) {\n\t\t\t\t\t\t\tqs.query = additionalFields.query as string;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (!returnAll) {\n\t\t\t\t\t\t\tconst limit = this.getNodeParameter('limit', i);\n\t\t\t\t\t\t\tqs.limit = limit;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await sentryApiRequestAllItems.call(this, 'GET', endpoint, {}, qs);\n\n\t\t\t\t\t\tif (!returnAll) {\n\t\t\t\t\t\t\tconst limit = this.getNodeParameter('limit', i);\n\t\t\t\t\t\t\tresponseData = responseData.splice(0, limit);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (operation === 'delete') {\n\t\t\t\t\t\tconst organizationSlug = this.getNodeParameter('organizationSlug', i) as string;\n\t\t\t\t\t\tconst version = this.getNodeParameter('version', i) as string;\n\t\t\t\t\t\tconst endpoint = `/api/0/organizations/${organizationSlug}/releases/${version}/`;\n\t\t\t\t\t\tresponseData = await sentryIoApiRequest.call(this, 'DELETE', endpoint, qs);\n\t\t\t\t\t\tresponseData = { success: true };\n\t\t\t\t\t}\n\t\t\t\t\tif (operation === 'create') {\n\t\t\t\t\t\tconst organizationSlug = this.getNodeParameter('organizationSlug', i) as string;\n\t\t\t\t\t\tconst endpoint = `/api/0/organizations/${organizationSlug}/releases/`;\n\t\t\t\t\t\tconst version = this.getNodeParameter('version', i) as string;\n\t\t\t\t\t\tconst url = this.getNodeParameter('url', i) as string;\n\t\t\t\t\t\tconst projects = this.getNodeParameter('projects', i) as string[];\n\n\t\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i);\n\n\t\t\t\t\t\tif (additionalFields.dateReleased) {\n\t\t\t\t\t\t\tqs.dateReleased = additionalFields.dateReleased as string;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tqs.version = version;\n\t\t\t\t\t\tqs.url = url;\n\t\t\t\t\t\tqs.projects = projects;\n\n\t\t\t\t\t\tif (additionalFields.commits) {\n\t\t\t\t\t\t\tconst commits: ICommit[] = [];\n\t\t\t\t\t\t\t//@ts-ignore\n\n\t\t\t\t\t\t\tadditionalFields.commits.commitProperties.map((commit: any) => {\n\t\t\t\t\t\t\t\tconst commitObject: ICommit = { id: commit.id };\n\n\t\t\t\t\t\t\t\tif (commit.repository) {\n\t\t\t\t\t\t\t\t\tcommitObject.repository = commit.repository;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (commit.message) {\n\t\t\t\t\t\t\t\t\tcommitObject.message = commit.message;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (commit.patchSet && Array.isArray(commit.patchSet)) {\n\t\t\t\t\t\t\t\t\tcommit.patchSet.patchSetProperties.map((patchSet: IPatchSet) => {\n\t\t\t\t\t\t\t\t\t\tcommitObject.patch_set?.push(patchSet);\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (commit.authorName) {\n\t\t\t\t\t\t\t\t\tcommitObject.author_name = commit.authorName;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (commit.authorEmail) {\n\t\t\t\t\t\t\t\t\tcommitObject.author_email = commit.authorEmail;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (commit.timestamp) {\n\t\t\t\t\t\t\t\t\tcommitObject.timestamp = commit.timestamp;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tcommits.push(commitObject);\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\tqs.commits = commits;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (additionalFields.refs) {\n\t\t\t\t\t\t\tconst refs: IRef[] = [];\n\t\t\t\t\t\t\t//@ts-ignore\n\t\t\t\t\t\t\tadditionalFields.refs.refProperties.map((ref: IRef) => {\n\t\t\t\t\t\t\t\trefs.push(ref);\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\tqs.refs = refs;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await sentryIoApiRequest.call(this, 'POST', endpoint, qs);\n\t\t\t\t\t}\n\t\t\t\t\tif (operation === 'update') {\n\t\t\t\t\t\tconst organizationSlug = this.getNodeParameter('organizationSlug', i) as string;\n\t\t\t\t\t\tconst version = this.getNodeParameter('version', i) as string;\n\t\t\t\t\t\tconst endpoint = `/api/0/organizations/${organizationSlug}/releases/${version}/`;\n\n\t\t\t\t\t\tconst updateFields = this.getNodeParameter('updateFields', i);\n\n\t\t\t\t\t\tconst body = { ...updateFields };\n\n\t\t\t\t\t\tif (updateFields.commits) {\n\t\t\t\t\t\t\tconst commits: ICommit[] = [];\n\t\t\t\t\t\t\t//@ts-ignore\n\n\t\t\t\t\t\t\tupdateFields.commits.commitProperties.map((commit: any) => {\n\t\t\t\t\t\t\t\tconst commitObject: ICommit = { id: commit.id };\n\n\t\t\t\t\t\t\t\tif (commit.repository) {\n\t\t\t\t\t\t\t\t\tcommitObject.repository = commit.repository;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (commit.message) {\n\t\t\t\t\t\t\t\t\tcommitObject.message = commit.message;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (commit.patchSet && Array.isArray(commit.patchSet)) {\n\t\t\t\t\t\t\t\t\tcommit.patchSet.patchSetProperties.map((patchSet: IPatchSet) => {\n\t\t\t\t\t\t\t\t\t\tcommitObject.patch_set?.push(patchSet);\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (commit.authorName) {\n\t\t\t\t\t\t\t\t\tcommitObject.author_name = commit.authorName;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (commit.authorEmail) {\n\t\t\t\t\t\t\t\t\tcommitObject.author_email = commit.authorEmail;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (commit.timestamp) {\n\t\t\t\t\t\t\t\t\tcommitObject.timestamp = commit.timestamp;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tcommits.push(commitObject);\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\tbody.commits = commits;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (updateFields.refs) {\n\t\t\t\t\t\t\tconst refs: IRef[] = [];\n\t\t\t\t\t\t\t//@ts-ignore\n\t\t\t\t\t\t\tupdateFields.refs.refProperties.map((ref: IRef) => {\n\t\t\t\t\t\t\t\trefs.push(ref);\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\tbody.refs = refs;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await sentryIoApiRequest.call(this, 'PUT', endpoint, body, qs);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (resource === 'team') {\n\t\t\t\t\tif (operation === 'get') {\n\t\t\t\t\t\tconst organizationSlug = this.getNodeParameter('organizationSlug', i) as string;\n\t\t\t\t\t\tconst teamSlug = this.getNodeParameter('teamSlug', i) as string;\n\t\t\t\t\t\tconst endpoint = `/api/0/teams/${organizationSlug}/${teamSlug}/`;\n\n\t\t\t\t\t\tresponseData = await sentryIoApiRequest.call(this, 'GET', endpoint, qs);\n\t\t\t\t\t}\n\t\t\t\t\tif (operation === 'getAll') {\n\t\t\t\t\t\tconst organizationSlug = this.getNodeParameter('organizationSlug', i) as string;\n\t\t\t\t\t\tconst endpoint = `/api/0/organizations/${organizationSlug}/teams/`;\n\t\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', i);\n\n\t\t\t\t\t\tif (!returnAll) {\n\t\t\t\t\t\t\tconst limit = this.getNodeParameter('limit', i);\n\t\t\t\t\t\t\tqs.limit = limit;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await sentryApiRequestAllItems.call(this, 'GET', endpoint, {}, qs);\n\n\t\t\t\t\t\tif (!returnAll) {\n\t\t\t\t\t\t\tconst limit = this.getNodeParameter('limit', i);\n\t\t\t\t\t\t\tresponseData = responseData.splice(0, limit);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (operation === 'create') {\n\t\t\t\t\t\tconst organizationSlug = this.getNodeParameter('organizationSlug', i) as string;\n\t\t\t\t\t\tconst name = this.getNodeParameter('name', i) as string;\n\t\t\t\t\t\tconst endpoint = `/api/0/organizations/${organizationSlug}/teams/`;\n\n\t\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i);\n\n\t\t\t\t\t\tqs.name = name;\n\n\t\t\t\t\t\tif (additionalFields.slug) {\n\t\t\t\t\t\t\tqs.slug = additionalFields.slug;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await sentryIoApiRequest.call(this, 'POST', endpoint, qs);\n\t\t\t\t\t}\n\t\t\t\t\tif (operation === 'update') {\n\t\t\t\t\t\tconst organizationSlug = this.getNodeParameter('organizationSlug', i) as string;\n\t\t\t\t\t\tconst teamSlug = this.getNodeParameter('teamSlug', i) as string;\n\t\t\t\t\t\tconst endpoint = `/api/0/teams/${organizationSlug}/${teamSlug}/`;\n\n\t\t\t\t\t\tconst body = this.getNodeParameter('updateFields', i);\n\n\t\t\t\t\t\tresponseData = await sentryIoApiRequest.call(this, 'PUT', endpoint, body, qs);\n\t\t\t\t\t}\n\t\t\t\t\tif (operation === 'delete') {\n\t\t\t\t\t\tconst organizationSlug = this.getNodeParameter('organizationSlug', i) as string;\n\t\t\t\t\t\tconst teamSlug = this.getNodeParameter('teamSlug', i) as string;\n\t\t\t\t\t\tconst endpoint = `/api/0/teams/${organizationSlug}/${teamSlug}/`;\n\n\t\t\t\t\t\tresponseData = await sentryIoApiRequest.call(this, 'DELETE', endpoint, qs);\n\t\t\t\t\t\tresponseData = { success: true };\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t);\n\n\t\t\t\treturnData.push(...executionData);\n\t\t\t} catch (error) {\n\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\tconst executionErrorData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\tthis.helpers.returnJsonArray({ error: error.message }),\n\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t);\n\t\t\t\t\treturnData.push(...executionErrorData);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\t\treturn [returnData];\n\t}\n}\n"],"mappings":"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","names":[]}