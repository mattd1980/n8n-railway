{"version":3,"sources":["../../../nodes/Discourse/Discourse.node.ts"],"sourcesContent":["import type {\n\tIExecuteFunctions,\n\tIDataObject,\n\tILoadOptionsFunctions,\n\tINodeExecutionData,\n\tINodePropertyOptions,\n\tINodeType,\n\tINodeTypeDescription,\n} from 'n8n-workflow';\nimport { NodeConnectionTypes } from 'n8n-workflow';\n\nimport { categoryFields, categoryOperations } from './CategoryDescription';\nimport { discourseApiRequest } from './GenericFunctions';\nimport { groupFields, groupOperations } from './GroupDescription';\nimport { postFields, postOperations } from './PostDescription';\nimport { userFields, userOperations } from './UserDescription';\nimport { userGroupFields, userGroupOperations } from './UserGroupDescription';\n\nexport class Discourse implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'Discourse',\n\t\tname: 'discourse',\n\t\ticon: 'file:discourse.svg',\n\t\tgroup: ['input'],\n\t\tversion: 1,\n\t\tsubtitle: '={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}',\n\t\tdescription: 'Consume Discourse API',\n\t\tdefaults: {\n\t\t\tname: 'Discourse',\n\t\t},\n\t\tusableAsTool: true,\n\t\tinputs: [NodeConnectionTypes.Main],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tcredentials: [\n\t\t\t{\n\t\t\t\tname: 'discourseApi',\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Resource',\n\t\t\t\tname: 'resource',\n\t\t\t\ttype: 'options',\n\t\t\t\tnoDataExpression: true,\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Category',\n\t\t\t\t\t\tvalue: 'category',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Group',\n\t\t\t\t\t\tvalue: 'group',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Post',\n\t\t\t\t\t\tvalue: 'post',\n\t\t\t\t\t},\n\t\t\t\t\t// {\n\t\t\t\t\t// \tname: 'Search',\n\t\t\t\t\t// \tvalue: 'search',\n\t\t\t\t\t// },\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'User',\n\t\t\t\t\t\tvalue: 'user',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'User Group',\n\t\t\t\t\t\tvalue: 'userGroup',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'post',\n\t\t\t},\n\t\t\t...categoryOperations,\n\t\t\t...categoryFields,\n\t\t\t...groupOperations,\n\t\t\t...groupFields,\n\t\t\t...postOperations,\n\t\t\t...postFields,\n\t\t\t// ...searchOperations,\n\t\t\t// ...searchFields,\n\t\t\t...userOperations,\n\t\t\t...userFields,\n\t\t\t...userGroupOperations,\n\t\t\t...userGroupFields,\n\t\t],\n\t};\n\n\tmethods = {\n\t\tloadOptions: {\n\t\t\t// Get all the calendars to display them to user so that they can\n\t\t\t// select them easily\n\t\t\tasync getCategories(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst returnData: INodePropertyOptions[] = [];\n\t\t\t\tconst { category_list } = await discourseApiRequest.call(this, 'GET', '/categories.json');\n\t\t\t\tfor (const category of category_list.categories) {\n\t\t\t\t\treturnData.push({\n\t\t\t\t\t\tname: category.name,\n\t\t\t\t\t\tvalue: category.id,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn returnData;\n\t\t\t},\n\t\t},\n\t};\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t\tconst items = this.getInputData();\n\t\tconst returnData: INodeExecutionData[] = [];\n\t\tconst length = items.length;\n\t\tconst qs: IDataObject = {};\n\t\tlet responseData;\n\t\tconst resource = this.getNodeParameter('resource', 0);\n\t\tconst operation = this.getNodeParameter('operation', 0);\n\t\tfor (let i = 0; i < length; i++) {\n\t\t\ttry {\n\t\t\t\tif (resource === 'category') {\n\t\t\t\t\t//https://docs.discourse.org/#tag/Categories/paths/~1categories.json/post\n\t\t\t\t\tif (operation === 'create') {\n\t\t\t\t\t\tconst name = this.getNodeParameter('name', i) as string;\n\t\t\t\t\t\tconst color = this.getNodeParameter('color', i) as string;\n\t\t\t\t\t\tconst textColor = this.getNodeParameter('textColor', i) as string;\n\n\t\t\t\t\t\tconst body: IDataObject = {\n\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\tcolor,\n\t\t\t\t\t\t\ttext_color: textColor,\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tresponseData = await discourseApiRequest.call(this, 'POST', '/categories.json', body);\n\n\t\t\t\t\t\tresponseData = responseData.category;\n\t\t\t\t\t}\n\t\t\t\t\t//https://docs.discourse.org/#tag/Categories/paths/~1categories.json/get\n\t\t\t\t\tif (operation === 'getAll') {\n\t\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', i);\n\n\t\t\t\t\t\tresponseData = await discourseApiRequest.call(this, 'GET', '/categories.json', {}, qs);\n\n\t\t\t\t\t\tresponseData = responseData.category_list.categories;\n\n\t\t\t\t\t\tif (!returnAll) {\n\t\t\t\t\t\t\tconst limit = this.getNodeParameter('limit', i);\n\t\t\t\t\t\t\tresponseData = responseData.splice(0, limit);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t//https://docs.discourse.org/#tag/Categories/paths/~1categories~1{id}/put\n\t\t\t\t\tif (operation === 'update') {\n\t\t\t\t\t\tconst categoryId = this.getNodeParameter('categoryId', i) as string;\n\n\t\t\t\t\t\tconst name = this.getNodeParameter('name', i) as string;\n\n\t\t\t\t\t\tconst updateFields = this.getNodeParameter('updateFields', i);\n\n\t\t\t\t\t\tconst body: IDataObject = {\n\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tObject.assign(body, updateFields);\n\n\t\t\t\t\t\tresponseData = await discourseApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'PUT',\n\t\t\t\t\t\t\t`/categories/${categoryId}.json`,\n\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tresponseData = responseData.category;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (resource === 'group') {\n\t\t\t\t\t//https://docs.discourse.org/#tag/Posts/paths/~1posts.json/post\n\t\t\t\t\tif (operation === 'create') {\n\t\t\t\t\t\tconst name = this.getNodeParameter('name', i) as string;\n\n\t\t\t\t\t\tconst body: IDataObject = {\n\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tresponseData = await discourseApiRequest.call(this, 'POST', '/admin/groups.json', {\n\t\t\t\t\t\t\tgroup: body,\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tresponseData = responseData.basic_group;\n\t\t\t\t\t}\n\t\t\t\t\t//https://docs.discourse.org/#tag/Groups/paths/~1groups~1{name}.json/get\n\t\t\t\t\tif (operation === 'get') {\n\t\t\t\t\t\tconst name = this.getNodeParameter('name', i) as string;\n\n\t\t\t\t\t\tresponseData = await discourseApiRequest.call(this, 'GET', `/groups/${name}`, {}, qs);\n\n\t\t\t\t\t\tresponseData = responseData.group;\n\t\t\t\t\t}\n\t\t\t\t\t//https://docs.discourse.org/#tag/Groups/paths/~1groups.json/get\n\t\t\t\t\tif (operation === 'getAll') {\n\t\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', i);\n\n\t\t\t\t\t\tresponseData = await discourseApiRequest.call(this, 'GET', '/groups.json', {}, qs);\n\n\t\t\t\t\t\tresponseData = responseData.groups;\n\n\t\t\t\t\t\tif (!returnAll) {\n\t\t\t\t\t\t\tconst limit = this.getNodeParameter('limit', i);\n\t\t\t\t\t\t\tresponseData = responseData.splice(0, limit);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t//https://docs.discourse.org/#tag/Posts/paths/~1posts~1{id}.json/put\n\t\t\t\t\tif (operation === 'update') {\n\t\t\t\t\t\tconst groupId = this.getNodeParameter('groupId', i) as string;\n\n\t\t\t\t\t\tconst name = this.getNodeParameter('name', i) as string;\n\n\t\t\t\t\t\tconst body: IDataObject = {\n\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tresponseData = await discourseApiRequest.call(this, 'PUT', `/groups/${groupId}.json`, {\n\t\t\t\t\t\t\tgroup: body,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (resource === 'post') {\n\t\t\t\t\t//https://docs.discourse.org/#tag/Posts/paths/~1posts.json/post\n\t\t\t\t\tif (operation === 'create') {\n\t\t\t\t\t\tconst content = this.getNodeParameter('content', i) as string;\n\t\t\t\t\t\tconst title = this.getNodeParameter('title', i) as string;\n\t\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i);\n\n\t\t\t\t\t\tconst body: IDataObject = {\n\t\t\t\t\t\t\ttitle,\n\t\t\t\t\t\t\traw: content,\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tObject.assign(body, additionalFields);\n\n\t\t\t\t\t\tresponseData = await discourseApiRequest.call(this, 'POST', '/posts.json', body);\n\t\t\t\t\t}\n\t\t\t\t\t//https://docs.discourse.org/#tag/Posts/paths/~1posts~1{id}.json/get\n\t\t\t\t\tif (operation === 'get') {\n\t\t\t\t\t\tconst postId = this.getNodeParameter('postId', i) as string;\n\n\t\t\t\t\t\tresponseData = await discourseApiRequest.call(this, 'GET', `/posts/${postId}`, {}, qs);\n\t\t\t\t\t}\n\t\t\t\t\t//https://docs.discourse.org/#tag/Posts/paths/~1posts.json/get\n\t\t\t\t\tif (operation === 'getAll') {\n\t\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', i);\n\t\t\t\t\t\tconst limit = this.getNodeParameter('limit', i, 0);\n\n\t\t\t\t\t\tresponseData = await discourseApiRequest.call(this, 'GET', '/posts.json', {}, qs);\n\t\t\t\t\t\tresponseData = responseData.latest_posts;\n\n\t\t\t\t\t\t//Getting all posts relying on https://github.com/discourse/discourse_api/blob/main/spec/discourse_api/api/posts_spec.rb\n\t\t\t\t\t\tlet lastPost = responseData.pop();\n\t\t\t\t\t\tlet previousLastPostID;\n\t\t\t\t\t\twhile (lastPost.id !== previousLastPostID) {\n\t\t\t\t\t\t\tif (limit && responseData.length > limit) {\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tconst chunk = await discourseApiRequest.call(\n\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t\t`/posts.json?before=${lastPost.id}`,\n\t\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tresponseData = responseData.concat(chunk.latest_posts);\n\t\t\t\t\t\t\tpreviousLastPostID = lastPost.id;\n\t\t\t\t\t\t\tlastPost = responseData.pop();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresponseData.push(lastPost);\n\n\t\t\t\t\t\tif (!returnAll) {\n\t\t\t\t\t\t\tresponseData = responseData.splice(0, limit);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t//https://docs.discourse.org/#tag/Posts/paths/~1posts~1{id}.json/put\n\t\t\t\t\tif (operation === 'update') {\n\t\t\t\t\t\tconst postId = this.getNodeParameter('postId', i) as string;\n\n\t\t\t\t\t\tconst content = this.getNodeParameter('content', i) as string;\n\n\t\t\t\t\t\tconst updateFields = this.getNodeParameter('updateFields', i);\n\n\t\t\t\t\t\tconst body: IDataObject = {\n\t\t\t\t\t\t\traw: content,\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tObject.assign(body, updateFields);\n\n\t\t\t\t\t\tresponseData = await discourseApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'PUT',\n\t\t\t\t\t\t\t`/posts/${postId}.json`,\n\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tresponseData = responseData.post;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// TODO figure how to paginate the results\n\t\t\t\t// if (resource === 'search') {\n\t\t\t\t// \t//https://docs.discourse.org/#tag/Search/paths/~1search~1query/get\n\t\t\t\t// \tif (operation === 'query') {\n\t\t\t\t// \t\tqs.term = this.getNodeParameter('term', i) as string;\n\n\t\t\t\t// \t\tconst simple = this.getNodeParameter('simple', i) as boolean;\n\n\t\t\t\t// \t\tconst updateFields = this.getNodeParameter('updateFields', i);\n\n\t\t\t\t// \t\tObject.assign(qs, updateFields);\n\n\t\t\t\t// \t\tqs.page = 1;\n\n\t\t\t\t// \t\tresponseData = await discourseApiRequest.call(\n\t\t\t\t// \t\t\tthis,\n\t\t\t\t// \t\t\t'GET',\n\t\t\t\t// \t\t\t`/search/query`,\n\t\t\t\t// \t\t\t{},\n\t\t\t\t// \t\t\tqs,\n\t\t\t\t// \t\t);\n\n\t\t\t\t// \t\tif (simple === true) {\n\t\t\t\t// \t\t\tconst response = [];\n\t\t\t\t// \t\t\tfor (const key of Object.keys(responseData)) {\n\t\t\t\t// \t\t\t\tfor (const data of responseData[key]) {\n\t\t\t\t// \t\t\t\t\tresponse.push(Object.assign(data, { __type: key }));\n\t\t\t\t// \t\t\t\t}\n\t\t\t\t// \t\t\t}\n\t\t\t\t// \t\t\tresponseData = response;\n\t\t\t\t// \t\t}\n\t\t\t\t// \t}\n\t\t\t\t// }\n\t\t\t\tif (resource === 'user') {\n\t\t\t\t\t//https://docs.discourse.org/#tag/Users/paths/~1users/post\n\t\t\t\t\tif (operation === 'create') {\n\t\t\t\t\t\tconst name = this.getNodeParameter('name', i) as string;\n\t\t\t\t\t\tconst email = this.getNodeParameter('email', i) as string;\n\t\t\t\t\t\tconst password = this.getNodeParameter('password', i) as string;\n\t\t\t\t\t\tconst username = this.getNodeParameter('username', i) as string;\n\t\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i);\n\n\t\t\t\t\t\tconst body: IDataObject = {\n\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\tpassword,\n\t\t\t\t\t\t\temail,\n\t\t\t\t\t\t\tusername,\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tObject.assign(body, additionalFields);\n\n\t\t\t\t\t\tresponseData = await discourseApiRequest.call(this, 'POST', '/users.json', body);\n\t\t\t\t\t}\n\t\t\t\t\t//https://docs.discourse.org/#tag/Users/paths/~1users~1{username}.json/get\n\t\t\t\t\tif (operation === 'get') {\n\t\t\t\t\t\tconst by = this.getNodeParameter('by', i) as string;\n\t\t\t\t\t\tlet endpoint = '';\n\t\t\t\t\t\tif (by === 'username') {\n\t\t\t\t\t\t\tconst username = this.getNodeParameter('username', i) as string;\n\t\t\t\t\t\t\tendpoint = `/users/${username}`;\n\t\t\t\t\t\t} else if (by === 'externalId') {\n\t\t\t\t\t\t\tconst externalId = this.getNodeParameter('externalId', i) as string;\n\t\t\t\t\t\t\tendpoint = `/u/by-external/${externalId}.json`;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await discourseApiRequest.call(this, 'GET', endpoint);\n\t\t\t\t\t}\n\t\t\t\t\t//https://docs.discourse.org/#tag/Users/paths/~1admin~1users~1{id}.json/delete\n\t\t\t\t\tif (operation === 'getAll') {\n\t\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', i);\n\t\t\t\t\t\tconst flag = this.getNodeParameter('flag', i) as boolean;\n\n\t\t\t\t\t\tconst options = this.getNodeParameter('options', i);\n\n\t\t\t\t\t\tif (options.stats) {\n\t\t\t\t\t\t\tqs.stats = options.stats as boolean;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (options.asc) {\n\t\t\t\t\t\t\tqs.asc = options.asc as boolean;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (options.showEmails) {\n\t\t\t\t\t\t\tqs.show_emails = options.showEmails as boolean;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (options.order) {\n\t\t\t\t\t\t\tqs.order = options.order as string;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await discourseApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t`/admin/users/list/${flag}.json`,\n\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tif (!returnAll) {\n\t\t\t\t\t\t\tconst limit = this.getNodeParameter('limit', i);\n\t\t\t\t\t\t\tresponseData = responseData.splice(0, limit);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (resource === 'userGroup') {\n\t\t\t\t\t//https://docs.discourse.org/#tag/Groups/paths/~1groups~1{group_id}~1members.json/put\n\t\t\t\t\tif (operation === 'add') {\n\t\t\t\t\t\tconst usernames = this.getNodeParameter('usernames', i) as string;\n\t\t\t\t\t\tconst groupId = this.getNodeParameter('groupId', i) as string;\n\t\t\t\t\t\tconst body: IDataObject = {\n\t\t\t\t\t\t\tusernames,\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tresponseData = await discourseApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'PUT',\n\t\t\t\t\t\t\t`/groups/${groupId}/members.json`,\n\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\t//https://docs.discourse.org/#tag/Groups/paths/~1groups~1{group_id}~1members.json/delete\n\t\t\t\t\tif (operation === 'remove') {\n\t\t\t\t\t\tconst usernames = this.getNodeParameter('usernames', i) as string;\n\t\t\t\t\t\tconst groupId = this.getNodeParameter('groupId', i) as string;\n\t\t\t\t\t\tconst body: IDataObject = {\n\t\t\t\t\t\t\tusernames,\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tresponseData = await discourseApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'DELETE',\n\t\t\t\t\t\t\t`/groups/${groupId}/members.json`,\n\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t);\n\t\t\t\treturnData.push(...executionData);\n\t\t\t} catch (error) {\n\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\tconst executionErrorData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\tthis.helpers.returnJsonArray({ error: error.message }),\n\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t);\n\t\t\t\t\treturnData.push(...executionErrorData);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\t\treturn [returnData];\n\t}\n}\n"],"mappings":"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","names":[]}