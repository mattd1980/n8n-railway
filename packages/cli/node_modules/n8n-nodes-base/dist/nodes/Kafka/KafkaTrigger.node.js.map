{"version":3,"sources":["../../../nodes/Kafka/KafkaTrigger.node.ts"],"sourcesContent":["import { SchemaRegistry } from '@kafkajs/confluent-schema-registry';\nimport type { KafkaConfig, SASLOptions } from 'kafkajs';\nimport { Kafka as apacheKafka, logLevel } from 'kafkajs';\nimport type {\n\tITriggerFunctions,\n\tIDataObject,\n\tINodeType,\n\tINodeTypeDescription,\n\tITriggerResponse,\n\tIRun,\n} from 'n8n-workflow';\nimport { NodeConnectionTypes, NodeOperationError } from 'n8n-workflow';\n\nexport class KafkaTrigger implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'Kafka Trigger',\n\t\tname: 'kafkaTrigger',\n\t\ticon: { light: 'file:kafka.svg', dark: 'file:kafka.dark.svg' },\n\t\tgroup: ['trigger'],\n\t\tversion: [1, 1.1],\n\t\tdescription: 'Consume messages from a Kafka topic',\n\t\tdefaults: {\n\t\t\tname: 'Kafka Trigger',\n\t\t},\n\t\tinputs: [],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tcredentials: [\n\t\t\t{\n\t\t\t\tname: 'kafka',\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Topic',\n\t\t\t\tname: 'topic',\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: '',\n\t\t\t\trequired: true,\n\t\t\t\tplaceholder: 'topic-name',\n\t\t\t\tdescription: 'Name of the queue of topic to consume from',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Group ID',\n\t\t\t\tname: 'groupId',\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: '',\n\t\t\t\trequired: true,\n\t\t\t\tplaceholder: 'n8n-kafka',\n\t\t\t\tdescription: 'ID of the consumer group',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Use Schema Registry',\n\t\t\t\tname: 'useSchemaRegistry',\n\t\t\t\ttype: 'boolean',\n\t\t\t\tdefault: false,\n\t\t\t\tdescription: 'Whether to use Confluent Schema Registry',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Schema Registry URL',\n\t\t\t\tname: 'schemaRegistryUrl',\n\t\t\t\ttype: 'string',\n\t\t\t\trequired: true,\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tuseSchemaRegistry: [true],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tplaceholder: 'https://schema-registry-domain:8081',\n\t\t\t\tdefault: '',\n\t\t\t\tdescription: 'URL of the schema registry',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Options',\n\t\t\t\tname: 'options',\n\t\t\t\ttype: 'collection',\n\t\t\t\tdefault: {},\n\t\t\t\tplaceholder: 'Add option',\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Allow Topic Creation',\n\t\t\t\t\t\tname: 'allowAutoTopicCreation',\n\t\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\t\tdefault: false,\n\t\t\t\t\t\tdescription: 'Whether to allow sending message to a previously non exisiting topic',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Auto Commit Threshold',\n\t\t\t\t\t\tname: 'autoCommitThreshold',\n\t\t\t\t\t\ttype: 'number',\n\t\t\t\t\t\tdefault: 0,\n\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t'The consumer will commit offsets after resolving a given number of messages',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Auto Commit Interval',\n\t\t\t\t\t\tname: 'autoCommitInterval',\n\t\t\t\t\t\ttype: 'number',\n\t\t\t\t\t\tdefault: 0,\n\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t'The consumer will commit offsets after a given period, for example, five seconds',\n\t\t\t\t\t\thint: 'Value in milliseconds',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Heartbeat Interval',\n\t\t\t\t\t\tname: 'heartbeatInterval',\n\t\t\t\t\t\ttype: 'number',\n\t\t\t\t\t\tdefault: 3000,\n\t\t\t\t\t\tdescription: \"Heartbeats are used to ensure that the consumer's session stays active\",\n\t\t\t\t\t\thint: 'The value must be set lower than Session Timeout',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Max Number of Requests',\n\t\t\t\t\t\tname: 'maxInFlightRequests',\n\t\t\t\t\t\ttype: 'number',\n\t\t\t\t\t\tdefault: 1,\n\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t'The maximum number of unacknowledged requests the client will send on a single connection',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Read Messages From Beginning',\n\t\t\t\t\t\tname: 'fromBeginning',\n\t\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\t\tdefault: true,\n\t\t\t\t\t\tdescription: 'Whether to read message from beginning',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'JSON Parse Message',\n\t\t\t\t\t\tname: 'jsonParseMessage',\n\t\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\t\tdefault: false,\n\t\t\t\t\t\tdescription: 'Whether to try to parse the message to an object',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Parallel Processing',\n\t\t\t\t\t\tname: 'parallelProcessing',\n\t\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\t\tdefault: true,\n\t\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\t\thide: {\n\t\t\t\t\t\t\t\t'@version': [1],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t'Whether to process messages in parallel or by keeping the message in order',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Only Message',\n\t\t\t\t\t\tname: 'onlyMessage',\n\t\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\t\tjsonParseMessage: [true],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\tdefault: false,\n\t\t\t\t\t\tdescription: 'Whether to return only the message property',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Return Headers',\n\t\t\t\t\t\tname: 'returnHeaders',\n\t\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\t\tdefault: false,\n\t\t\t\t\t\tdescription: 'Whether to return the headers received from Kafka',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Session Timeout',\n\t\t\t\t\t\tname: 'sessionTimeout',\n\t\t\t\t\t\ttype: 'number',\n\t\t\t\t\t\tdefault: 30000,\n\t\t\t\t\t\tdescription: 'The time to await a response in ms',\n\t\t\t\t\t\thint: 'Value in milliseconds',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t],\n\t};\n\n\tasync trigger(this: ITriggerFunctions): Promise<ITriggerResponse> {\n\t\tconst topic = this.getNodeParameter('topic') as string;\n\n\t\tconst groupId = this.getNodeParameter('groupId') as string;\n\n\t\tconst credentials = await this.getCredentials('kafka');\n\n\t\tconst brokers = ((credentials.brokers as string) ?? '').split(',').map((item) => item.trim());\n\n\t\tconst clientId = credentials.clientId as string;\n\n\t\tconst ssl = credentials.ssl as boolean;\n\n\t\tconst options = this.getNodeParameter('options', {}) as IDataObject;\n\n\t\toptions.nodeVersion = this.getNode().typeVersion;\n\n\t\tconst config: KafkaConfig = {\n\t\t\tclientId,\n\t\t\tbrokers,\n\t\t\tssl,\n\t\t\tlogLevel: logLevel.ERROR,\n\t\t};\n\n\t\tif (credentials.authentication === true) {\n\t\t\tif (!(credentials.username && credentials.password)) {\n\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t'Username and password are required for authentication',\n\t\t\t\t);\n\t\t\t}\n\t\t\tconfig.sasl = {\n\t\t\t\tusername: credentials.username as string,\n\t\t\t\tpassword: credentials.password as string,\n\t\t\t\tmechanism: credentials.saslMechanism as string,\n\t\t\t} as SASLOptions;\n\t\t}\n\n\t\tconst maxInFlightRequests = (\n\t\t\tthis.getNodeParameter('options.maxInFlightRequests', null) === 0\n\t\t\t\t? null\n\t\t\t\t: this.getNodeParameter('options.maxInFlightRequests', null)\n\t\t) as number;\n\n\t\tconst parallelProcessing = options.parallelProcessing as boolean;\n\n\t\tconst useSchemaRegistry = this.getNodeParameter('useSchemaRegistry', 0) as boolean;\n\n\t\tconst schemaRegistryUrl = this.getNodeParameter('schemaRegistryUrl', 0) as string;\n\n\t\tconst kafka = new apacheKafka(config);\n\t\tconst consumer = kafka.consumer({\n\t\t\tgroupId,\n\t\t\tmaxInFlightRequests,\n\t\t\tsessionTimeout: this.getNodeParameter('options.sessionTimeout', 30000) as number,\n\t\t\theartbeatInterval: this.getNodeParameter('options.heartbeatInterval', 3000) as number,\n\t\t});\n\n\t\t// The \"closeFunction\" function gets called by n8n whenever\n\t\t// the workflow gets deactivated and can so clean up.\n\t\tasync function closeFunction() {\n\t\t\tawait consumer.disconnect();\n\t\t}\n\n\t\tconst startConsumer = async () => {\n\t\t\tawait consumer.connect();\n\n\t\t\tawait consumer.subscribe({ topic, fromBeginning: options.fromBeginning ? true : false });\n\t\t\tawait consumer.run({\n\t\t\t\tautoCommitInterval: (options.autoCommitInterval as number) || null,\n\t\t\t\tautoCommitThreshold: (options.autoCommitThreshold as number) || null,\n\t\t\t\teachMessage: async ({ topic: messageTopic, message }) => {\n\t\t\t\t\tlet data: IDataObject = {};\n\t\t\t\t\tlet value = message.value?.toString() as string;\n\n\t\t\t\t\tif (options.jsonParseMessage) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tvalue = JSON.parse(value);\n\t\t\t\t\t\t} catch (error) {}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (useSchemaRegistry) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tconst registry = new SchemaRegistry({ host: schemaRegistryUrl });\n\t\t\t\t\t\t\tvalue = await registry.decode(message.value as Buffer);\n\t\t\t\t\t\t} catch (error) {}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (options.returnHeaders && message.headers) {\n\t\t\t\t\t\tdata.headers = Object.fromEntries(\n\t\t\t\t\t\t\tObject.entries(message.headers).map(([headerKey, headerValue]) => [\n\t\t\t\t\t\t\t\theaderKey,\n\t\t\t\t\t\t\t\theaderValue?.toString('utf8') ?? '',\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tdata.message = value;\n\t\t\t\t\tdata.topic = messageTopic;\n\n\t\t\t\t\tif (options.onlyMessage) {\n\t\t\t\t\t\t//@ts-ignore\n\t\t\t\t\t\tdata = value;\n\t\t\t\t\t}\n\t\t\t\t\tlet responsePromise = undefined;\n\t\t\t\t\tif (!parallelProcessing && (options.nodeVersion as number) > 1) {\n\t\t\t\t\t\tresponsePromise = this.helpers.createDeferredPromise<IRun>();\n\t\t\t\t\t\tthis.emit([this.helpers.returnJsonArray([data])], undefined, responsePromise);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.emit([this.helpers.returnJsonArray([data])]);\n\t\t\t\t\t}\n\t\t\t\t\tif (responsePromise) {\n\t\t\t\t\t\tawait responsePromise.promise;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t});\n\t\t};\n\n\t\tif (this.getMode() !== 'manual') {\n\t\t\tawait startConsumer();\n\t\t\treturn { closeFunction };\n\t\t} else {\n\t\t\t// The \"manualTriggerFunction\" function gets called by n8n\n\t\t\t// when a user is in the workflow editor and starts the\n\t\t\t// workflow manually. So the function has to make sure that\n\t\t\t// the emit() gets called with similar data like when it\n\t\t\t// would trigger by itself so that the user knows what data\n\t\t\t// to expect.\n\t\t\tasync function manualTriggerFunction() {\n\t\t\t\tawait startConsumer();\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tcloseFunction,\n\t\t\t\tmanualTriggerFunction,\n\t\t\t};\n\t\t}\n\t}\n}\n"],"mappings":"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","names":["apacheKafka"]}