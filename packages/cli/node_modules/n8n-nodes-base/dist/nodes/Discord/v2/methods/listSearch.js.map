{"version":3,"sources":["../../../../../nodes/Discord/v2/methods/listSearch.ts"],"sourcesContent":["import {\n\ttype IDataObject,\n\ttype ILoadOptionsFunctions,\n\ttype INodeListSearchResult,\n} from 'n8n-workflow';\n\nimport { checkAccessToGuild } from '../helpers/utils';\nimport { discordApiRequest } from '../transport';\n\nasync function getGuildId(this: ILoadOptionsFunctions) {\n\tconst guildId = this.getNodeParameter('guildId', undefined, {\n\t\textractValue: true,\n\t}) as string;\n\n\tconst isOAuth2 = this.getNodeParameter('authentication', '') === 'oAuth2';\n\n\tif (isOAuth2) {\n\t\tconst userGuilds = (await discordApiRequest.call(\n\t\t\tthis,\n\t\t\t'GET',\n\t\t\t'/users/@me/guilds',\n\t\t)) as IDataObject[];\n\n\t\tcheckAccessToGuild(this.getNode(), guildId, userGuilds);\n\t}\n\n\treturn guildId;\n}\n\nasync function checkBotAccessToGuild(this: ILoadOptionsFunctions, guildId: string, botId: string) {\n\ttry {\n\t\tconst members: Array<{ user: { id: string } }> = await discordApiRequest.call(\n\t\t\tthis,\n\t\t\t'GET',\n\t\t\t`/guilds/${guildId}/members`,\n\t\t\tundefined,\n\t\t\t{ limit: 1000 },\n\t\t);\n\n\t\treturn members.some((member) => member.user.id === botId);\n\t} catch (error) {}\n\n\treturn false;\n}\n\nexport async function guildSearch(this: ILoadOptionsFunctions): Promise<INodeListSearchResult> {\n\tconst response = (await discordApiRequest.call(\n\t\tthis,\n\t\t'GET',\n\t\t'/users/@me/guilds',\n\t)) as IDataObject[];\n\n\tlet guilds: IDataObject[] = [];\n\n\tconst isOAuth2 = this.getNodeParameter('authentication', 0) === 'oAuth2';\n\n\tif (isOAuth2) {\n\t\tconst botId = (await discordApiRequest.call(this, 'GET', '/users/@me')).id as string;\n\n\t\tfor (const guild of response) {\n\t\t\tif (!(await checkBotAccessToGuild.call(this, guild.id as string, botId))) continue;\n\t\t\tguilds.push(guild);\n\t\t}\n\t} else {\n\t\tguilds = response;\n\t}\n\n\treturn {\n\t\tresults: guilds.map((guild) => ({\n\t\t\tname: guild.name as string,\n\t\t\tvalue: guild.id as string,\n\t\t\turl: `https://discord.com/channels/${guild.id}`,\n\t\t})),\n\t};\n}\n\nexport async function channelSearch(this: ILoadOptionsFunctions): Promise<INodeListSearchResult> {\n\tconst guildId = await getGuildId.call(this);\n\tconst response = await discordApiRequest.call(this, 'GET', `/guilds/${guildId}/channels`);\n\n\treturn {\n\t\tresults: (response as IDataObject[])\n\t\t\t.filter((cannel) => cannel.type !== 4) // Filter out categories\n\t\t\t.map((channel) => ({\n\t\t\t\tname: channel.name as string,\n\t\t\t\tvalue: channel.id as string,\n\t\t\t\turl: `https://discord.com/channels/${guildId}/${channel.id}`,\n\t\t\t})),\n\t};\n}\n\nexport async function textChannelSearch(\n\tthis: ILoadOptionsFunctions,\n): Promise<INodeListSearchResult> {\n\tconst guildId = await getGuildId.call(this);\n\n\tconst response = await discordApiRequest.call(this, 'GET', `/guilds/${guildId}/channels`);\n\n\treturn {\n\t\tresults: (response as IDataObject[])\n\t\t\t.filter((cannel) => ![2, 4].includes(cannel.type as number)) // Only text channels\n\t\t\t.map((channel) => ({\n\t\t\t\tname: channel.name as string,\n\t\t\t\tvalue: channel.id as string,\n\t\t\t\turl: `https://discord.com/channels/${guildId}/${channel.id}`,\n\t\t\t})),\n\t};\n}\n\nexport async function categorySearch(this: ILoadOptionsFunctions): Promise<INodeListSearchResult> {\n\tconst guildId = await getGuildId.call(this);\n\n\tconst response = await discordApiRequest.call(this, 'GET', `/guilds/${guildId}/channels`);\n\n\treturn {\n\t\tresults: (response as IDataObject[])\n\t\t\t.filter((cannel) => cannel.type === 4) // Return only categories\n\t\t\t.map((channel) => ({\n\t\t\t\tname: channel.name as string,\n\t\t\t\tvalue: channel.id as string,\n\t\t\t\turl: `https://discord.com/channels/${guildId}/${channel.id}`,\n\t\t\t})),\n\t};\n}\n\nexport async function userSearch(\n\tthis: ILoadOptionsFunctions,\n\t_filter?: string,\n\tpaginationToken?: string,\n): Promise<INodeListSearchResult> {\n\tconst guildId = await getGuildId.call(this);\n\n\tconst limit = 100;\n\tconst qs = { limit, after: paginationToken };\n\n\tconst response = await discordApiRequest.call(\n\t\tthis,\n\t\t'GET',\n\t\t`/guilds/${guildId}/members`,\n\t\tundefined,\n\t\tqs,\n\t);\n\n\tif (response.length === 0) {\n\t\treturn {\n\t\t\tresults: [],\n\t\t\tpaginationToken: undefined,\n\t\t};\n\t}\n\n\tlet lastUserId;\n\n\t//less then limit means that there are no more users to return, so leave lastUserId undefined\n\tif (!(response.length < limit)) {\n\t\tlastUserId = response[response.length - 1].user.id as string;\n\t}\n\n\treturn {\n\t\tresults: (response as Array<{ user: IDataObject }>).map(({ user }) => ({\n\t\t\tname: user.username as string,\n\t\t\tvalue: user.id as string,\n\t\t})),\n\t\tpaginationToken: lastUserId,\n\t};\n}\n"],"mappings":"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","names":[]}