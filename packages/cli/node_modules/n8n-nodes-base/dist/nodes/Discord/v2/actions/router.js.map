{"version":3,"sources":["../../../../../nodes/Discord/v2/actions/router.ts"],"sourcesContent":["import type { IDataObject, IExecuteFunctions, INodeExecutionData } from 'n8n-workflow';\nimport { NodeOperationError, SEND_AND_WAIT_OPERATION } from 'n8n-workflow';\n\nimport * as channel from './channel';\nimport * as member from './member';\nimport * as message from './message';\nimport type { Discord } from './node.type';\nimport * as webhook from './webhook';\nimport { configureWaitTillDate } from '../../../../utils/sendAndWait/configureWaitTillDate.util';\nimport { checkAccessToGuild } from '../helpers/utils';\nimport { discordApiRequest } from '../transport';\n\nexport async function router(this: IExecuteFunctions) {\n\tlet returnData: INodeExecutionData[] = [];\n\n\tlet resource = 'webhook';\n\t//resource parameter is hidden when authentication is set to webhook\n\t//prevent error when getting resource parameter\n\ttry {\n\t\tresource = this.getNodeParameter<Discord>('resource', 0);\n\t} catch (error) {}\n\tconst operation = this.getNodeParameter('operation', 0);\n\n\tlet guildId = '';\n\tlet userGuilds: IDataObject[] = [];\n\n\tif (resource !== 'webhook') {\n\t\tguildId = this.getNodeParameter('guildId', 0, '', {\n\t\t\textractValue: true,\n\t\t}) as string;\n\n\t\tconst isOAuth2 = this.getNodeParameter('authentication', 0, '') === 'oAuth2';\n\n\t\tif (isOAuth2) {\n\t\t\tuserGuilds = (await discordApiRequest.call(\n\t\t\t\tthis,\n\t\t\t\t'GET',\n\t\t\t\t'/users/@me/guilds',\n\t\t\t)) as IDataObject[];\n\n\t\t\tcheckAccessToGuild(this.getNode(), guildId, userGuilds);\n\t\t}\n\t}\n\n\tconst discord = {\n\t\tresource,\n\t\toperation,\n\t} as Discord;\n\n\tif (discord.resource === 'message' && discord.operation === SEND_AND_WAIT_OPERATION) {\n\t\treturnData = await message[discord.operation].execute.call(this, guildId, userGuilds);\n\n\t\tconst waitTill = configureWaitTillDate(this);\n\n\t\tawait this.putExecutionToWait(waitTill);\n\t\treturn [returnData];\n\t}\n\n\tswitch (discord.resource) {\n\t\tcase 'channel':\n\t\t\treturnData = await channel[discord.operation].execute.call(this, guildId, userGuilds);\n\t\t\tbreak;\n\t\tcase 'message':\n\t\t\treturnData = await message[discord.operation].execute.call(this, guildId, userGuilds);\n\t\t\tbreak;\n\t\tcase 'member':\n\t\t\treturnData = await member[discord.operation].execute.call(this, guildId);\n\t\t\tbreak;\n\t\tcase 'webhook':\n\t\t\treturnData = await webhook[discord.operation].execute.call(this);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tthrow new NodeOperationError(this.getNode(), `The resource \"${resource}\" is not known`);\n\t}\n\n\treturn [returnData];\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,0BAA4D;AAE5D,cAAyB;AACzB,aAAwB;AACxB,cAAyB;AAEzB,cAAyB;AACzB,mCAAsC;AACtC,mBAAmC;AACnC,uBAAkC;AAElC,eAAsB,SAAgC;AACrD,MAAI,aAAmC,CAAC;AAExC,MAAI,WAAW;AAGf,MAAI;AACH,eAAW,KAAK,iBAA0B,YAAY,CAAC;AAAA,EACxD,SAAS,OAAO;AAAA,EAAC;AACjB,QAAM,YAAY,KAAK,iBAAiB,aAAa,CAAC;AAEtD,MAAI,UAAU;AACd,MAAI,aAA4B,CAAC;AAEjC,MAAI,aAAa,WAAW;AAC3B,cAAU,KAAK,iBAAiB,WAAW,GAAG,IAAI;AAAA,MACjD,cAAc;AAAA,IACf,CAAC;AAED,UAAM,WAAW,KAAK,iBAAiB,kBAAkB,GAAG,EAAE,MAAM;AAEpE,QAAI,UAAU;AACb,mBAAc,MAAM,mCAAkB;AAAA,QACrC;AAAA,QACA;AAAA,QACA;AAAA,MACD;AAEA,2CAAmB,KAAK,QAAQ,GAAG,SAAS,UAAU;AAAA,IACvD;AAAA,EACD;AAEA,QAAM,UAAU;AAAA,IACf;AAAA,IACA;AAAA,EACD;AAEA,MAAI,QAAQ,aAAa,aAAa,QAAQ,cAAc,6CAAyB;AACpF,iBAAa,MAAM,QAAQ,QAAQ,SAAS,EAAE,QAAQ,KAAK,MAAM,SAAS,UAAU;AAEpF,UAAM,eAAW,oDAAsB,IAAI;AAE3C,UAAM,KAAK,mBAAmB,QAAQ;AACtC,WAAO,CAAC,UAAU;AAAA,EACnB;AAEA,UAAQ,QAAQ,UAAU;AAAA,IACzB,KAAK;AACJ,mBAAa,MAAM,QAAQ,QAAQ,SAAS,EAAE,QAAQ,KAAK,MAAM,SAAS,UAAU;AACpF;AAAA,IACD,KAAK;AACJ,mBAAa,MAAM,QAAQ,QAAQ,SAAS,EAAE,QAAQ,KAAK,MAAM,SAAS,UAAU;AACpF;AAAA,IACD,KAAK;AACJ,mBAAa,MAAM,OAAO,QAAQ,SAAS,EAAE,QAAQ,KAAK,MAAM,OAAO;AACvE;AAAA,IACD,KAAK;AACJ,mBAAa,MAAM,QAAQ,QAAQ,SAAS,EAAE,QAAQ,KAAK,IAAI;AAC/D;AAAA,IACD;AACC,YAAM,IAAI,uCAAmB,KAAK,QAAQ,GAAG,iBAAiB,QAAQ,gBAAgB;AAAA,EACxF;AAEA,SAAO,CAAC,UAAU;AACnB;","names":[]}