{"version":3,"sources":["../../../nodes/Mailjet/MailjetTrigger.node.ts"],"sourcesContent":["import type {\n\tIHookFunctions,\n\tIWebhookFunctions,\n\tIDataObject,\n\tINodeType,\n\tINodeTypeDescription,\n\tIWebhookResponseData,\n} from 'n8n-workflow';\nimport { NodeConnectionTypes } from 'n8n-workflow';\n\nimport { mailjetApiRequest } from './GenericFunctions';\n\nexport class MailjetTrigger implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'Mailjet Trigger',\n\t\tname: 'mailjetTrigger',\n\t\ticon: 'file:mailjet.svg',\n\t\tgroup: ['trigger'],\n\t\tversion: 1,\n\t\tdescription: 'Handle Mailjet events via webhooks',\n\t\tdefaults: {\n\t\t\tname: 'Mailjet Trigger',\n\t\t},\n\t\tinputs: [],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tcredentials: [\n\t\t\t{\n\t\t\t\tname: 'mailjetEmailApi',\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t],\n\t\twebhooks: [\n\t\t\t{\n\t\t\t\tname: 'default',\n\t\t\t\thttpMethod: 'POST',\n\t\t\t\tresponseMode: 'onReceived',\n\t\t\t\tpath: 'webhook',\n\t\t\t},\n\t\t],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Event',\n\t\t\t\tname: 'event',\n\t\t\t\ttype: 'options',\n\t\t\t\trequired: true,\n\t\t\t\tdefault: 'open',\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'email.blocked',\n\t\t\t\t\t\tvalue: 'blocked',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'email.bounce',\n\t\t\t\t\t\tvalue: 'bounce',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'email.open',\n\t\t\t\t\t\tvalue: 'open',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'email.sent',\n\t\t\t\t\t\tvalue: 'sent',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'email.spam',\n\t\t\t\t\t\tvalue: 'spam',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'email.unsub',\n\t\t\t\t\t\tvalue: 'unsub',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdescription: 'Determines which resource events the webhook is triggered for',\n\t\t\t},\n\t\t],\n\t};\n\n\twebhookMethods = {\n\t\tdefault: {\n\t\t\tasync checkExists(this: IHookFunctions): Promise<boolean> {\n\t\t\t\tconst endpoint = '/v3/rest/eventcallbackurl';\n\t\t\t\tconst responseData = await mailjetApiRequest.call(this, 'GET', endpoint);\n\n\t\t\t\tconst event = this.getNodeParameter('event') as string;\n\t\t\t\tconst webhookUrl = this.getNodeWebhookUrl('default');\n\n\t\t\t\tfor (const webhook of responseData.Data) {\n\t\t\t\t\tif (webhook.EventType === event && webhook.Url === webhookUrl) {\n\t\t\t\t\t\t// Set webhook-id to be sure that it can be deleted\n\t\t\t\t\t\tconst webhookData = this.getWorkflowStaticData('node');\n\t\t\t\t\t\twebhookData.webhookId = webhook.ID as string;\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn false;\n\t\t\t},\n\t\t\tasync create(this: IHookFunctions): Promise<boolean> {\n\t\t\t\tconst webhookUrl = this.getNodeWebhookUrl('default');\n\t\t\t\tconst webhookData = this.getWorkflowStaticData('node');\n\t\t\t\tconst event = this.getNodeParameter('event') as string;\n\t\t\t\tconst endpoint = '/v3/rest/eventcallbackurl';\n\t\t\t\tconst body: IDataObject = {\n\t\t\t\t\tUrl: webhookUrl,\n\t\t\t\t\tEventType: event,\n\t\t\t\t\tStatus: 'alive',\n\t\t\t\t\tisBackup: 'false',\n\t\t\t\t};\n\t\t\t\tconst { Data } = await mailjetApiRequest.call(this, 'POST', endpoint, body);\n\t\t\t\twebhookData.webhookId = Data[0].ID;\n\t\t\t\treturn true;\n\t\t\t},\n\t\t\tasync delete(this: IHookFunctions): Promise<boolean> {\n\t\t\t\tconst webhookData = this.getWorkflowStaticData('node');\n\t\t\t\tconst endpoint = `/v3/rest/eventcallbackurl/${webhookData.webhookId}`;\n\t\t\t\ttry {\n\t\t\t\t\tawait mailjetApiRequest.call(this, 'DELETE', endpoint);\n\t\t\t\t} catch (error) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tdelete webhookData.webhookId;\n\t\t\t\treturn true;\n\t\t\t},\n\t\t},\n\t};\n\n\tasync webhook(this: IWebhookFunctions): Promise<IWebhookResponseData> {\n\t\tconst req = this.getRequestObject();\n\t\treturn {\n\t\t\tworkflowData: [this.helpers.returnJsonArray(req.body as IDataObject[])],\n\t\t};\n\t}\n}\n"],"mappings":"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","names":[]}