{"version":3,"sources":["../../../nodes/AgileCrm/GenericFunctions.ts"],"sourcesContent":["import type {\n\tIDataObject,\n\tIExecuteFunctions,\n\tIHookFunctions,\n\tILoadOptionsFunctions,\n\tJsonObject,\n\tIRequestOptions,\n\tIHttpRequestMethods,\n} from 'n8n-workflow';\nimport { NodeApiError } from 'n8n-workflow';\n\nimport type { IContactUpdate } from './ContactInterface';\nimport type { IFilterRules, ISearchConditions } from './FilterInterface';\n\nexport async function agileCrmApiRequest(\n\tthis: IHookFunctions | IExecuteFunctions | ILoadOptionsFunctions,\n\tmethod: IHttpRequestMethods,\n\tendpoint: string,\n\tbody: any = {},\n\tquery: IDataObject = {},\n\turi?: string,\n\tsendAsForm?: boolean,\n): Promise<any> {\n\tconst credentials = await this.getCredentials('agileCrmApi');\n\tconst options: IRequestOptions = {\n\t\tmethod,\n\t\theaders: {\n\t\t\tAccept: 'application/json',\n\t\t},\n\t\tauth: {\n\t\t\tusername: credentials.email as string,\n\t\t\tpassword: credentials.apiKey as string,\n\t\t},\n\t\tqs: query,\n\t\turi: uri || `https://${credentials.subdomain}.agilecrm.com/dev/${endpoint}`,\n\t\tjson: true,\n\t};\n\n\t// To send the request as 'content-type': 'application/x-www-form-urlencoded' add form to options instead of body\n\tif (sendAsForm) {\n\t\toptions.form = body;\n\t}\n\t// Only add Body property if method not GET or DELETE to avoid 400 response\n\t// And when not sending a form\n\telse if (method !== 'GET' && method !== 'DELETE') {\n\t\toptions.body = body;\n\t}\n\n\ttry {\n\t\treturn await this.helpers.request(options);\n\t} catch (error) {\n\t\tthrow new NodeApiError(this.getNode(), error as JsonObject);\n\t}\n}\n\nexport async function agileCrmApiRequestAllItems(\n\tthis: IHookFunctions | ILoadOptionsFunctions | IExecuteFunctions,\n\tmethod: IHttpRequestMethods,\n\tresource: string,\n\tbody: any = {},\n\tquery: IDataObject = {},\n\turi?: string,\n\tsendAsForm?: boolean,\n): Promise<any> {\n\t// https://github.com/agilecrm/rest-api#11-listing-contacts-\n\n\tconst returnData: IDataObject[] = [];\n\tlet responseData;\n\tdo {\n\t\tresponseData = await agileCrmApiRequest.call(\n\t\t\tthis,\n\t\t\tmethod,\n\t\t\tresource,\n\t\t\tbody,\n\t\t\tquery,\n\t\t\turi,\n\t\t\tsendAsForm,\n\t\t);\n\t\tif (responseData.length !== 0) {\n\t\t\treturnData.push.apply(returnData, responseData as IDataObject[]);\n\t\t\tif (sendAsForm) {\n\t\t\t\tbody.cursor = responseData[responseData.length - 1].cursor;\n\t\t\t} else {\n\t\t\t\tquery.cursor = responseData[responseData.length - 1].cursor;\n\t\t\t}\n\t\t}\n\t} while (\n\t\tresponseData.length !== 0 &&\n\t\tresponseData[responseData.length - 1].hasOwnProperty('cursor')\n\t);\n\n\treturn returnData;\n}\n\nexport async function agileCrmApiRequestUpdate(\n\tthis: IHookFunctions | IExecuteFunctions | ILoadOptionsFunctions,\n\tmethod: IHttpRequestMethods = 'PUT',\n\t_endpoint?: string,\n\tbody: any = {},\n\t_query: IDataObject = {},\n\turi?: string,\n): Promise<any> {\n\tconst credentials = await this.getCredentials('agileCrmApi');\n\tconst baseUri = `https://${credentials.subdomain}.agilecrm.com/dev/`;\n\tconst options: IRequestOptions = {\n\t\tmethod,\n\t\theaders: {\n\t\t\tAccept: 'application/json',\n\t\t},\n\t\tbody: { id: body.id },\n\t\tauth: {\n\t\t\tusername: credentials.email as string,\n\t\t\tpassword: credentials.apiKey as string,\n\t\t},\n\t\turi: uri || baseUri,\n\t\tjson: true,\n\t};\n\n\tconst successfulUpdates = [];\n\tlet lastSuccesfulUpdateReturn: any;\n\tconst payload: IContactUpdate = body;\n\n\ttry {\n\t\t// Due to API, we must update each property separately. For user it looks like one seamless update\n\t\tif (payload.properties) {\n\t\t\toptions.body.properties = payload.properties;\n\t\t\toptions.uri = baseUri + 'api/contacts/edit-properties';\n\t\t\tlastSuccesfulUpdateReturn = await this.helpers.request(options);\n\n\t\t\t// Iterate trough properties and show them as individial updates instead of only vague \"properties\"\n\t\t\tpayload.properties?.map((property: any) => {\n\t\t\t\tsuccessfulUpdates.push(`${property.name}`);\n\t\t\t});\n\n\t\t\tdelete options.body.properties;\n\t\t}\n\t\tif (payload.lead_score) {\n\t\t\toptions.body.lead_score = payload.lead_score;\n\t\t\toptions.uri = baseUri + 'api/contacts/edit/lead-score';\n\t\t\tlastSuccesfulUpdateReturn = await this.helpers.request(options);\n\n\t\t\tsuccessfulUpdates.push('lead_score');\n\n\t\t\tdelete options.body.lead_score;\n\t\t}\n\t\tif (body.tags) {\n\t\t\toptions.body.tags = payload.tags;\n\t\t\toptions.uri = baseUri + 'api/contacts/edit/tags';\n\t\t\tlastSuccesfulUpdateReturn = await this.helpers.request(options);\n\n\t\t\tpayload.tags?.map((tag: string) => {\n\t\t\t\tsuccessfulUpdates.push(`(Tag) ${tag}`);\n\t\t\t});\n\n\t\t\tdelete options.body.tags;\n\t\t}\n\t\tif (body.star_value) {\n\t\t\toptions.body.star_value = payload.star_value;\n\t\t\toptions.uri = baseUri + 'api/contacts/edit/add-star';\n\t\t\tlastSuccesfulUpdateReturn = await this.helpers.request(options);\n\n\t\t\tsuccessfulUpdates.push('star_value');\n\n\t\t\tdelete options.body.star_value;\n\t\t}\n\n\t\treturn lastSuccesfulUpdateReturn;\n\t} catch (error) {\n\t\tif (successfulUpdates.length === 0) {\n\t\t\tthrow new NodeApiError(this.getNode(), error as JsonObject);\n\t\t} else {\n\t\t\tthrow new NodeApiError(this.getNode(), error as JsonObject, {\n\t\t\t\tmessage: `Not all properties updated. Updated properties: ${successfulUpdates.join(', ')}`,\n\t\t\t\tdescription: error.message,\n\t\t\t\thttpCode: error.statusCode,\n\t\t\t});\n\t\t}\n\t}\n}\n\nexport function validateJSON(json: string | undefined): any {\n\tlet result;\n\ttry {\n\t\tresult = JSON.parse(json!);\n\t} catch (exception) {\n\t\tresult = undefined;\n\t}\n\treturn result;\n}\n\nexport function getFilterRules(conditions: ISearchConditions[], matchType: string): IDataObject {\n\tconst rules = [];\n\n\t// eslint-disable-next-line @typescript-eslint/no-for-in-array\n\tfor (const key in conditions) {\n\t\tif (conditions.hasOwnProperty(key)) {\n\t\t\tconst searchConditions: ISearchConditions = conditions[key];\n\t\t\tconst rule: IFilterRules = {\n\t\t\t\tLHS: searchConditions.field,\n\t\t\t\tCONDITION: searchConditions.condition_type,\n\t\t\t\tRHS: searchConditions.value as string,\n\t\t\t\tRHS_NEW: searchConditions.value2 as string,\n\t\t\t};\n\t\t\trules.push(rule);\n\t\t}\n\t}\n\n\tif (matchType === 'anyFilter') {\n\t\treturn {\n\t\t\tor_rules: rules,\n\t\t};\n\t} else {\n\t\treturn {\n\t\t\trules,\n\t\t};\n\t}\n}\n\nexport function simplifyResponse(\n\trecords: [{ id: string; properties: [{ name: string; value: string }] }],\n) {\n\tconst results = [];\n\tfor (const record of records) {\n\t\tresults.push(\n\t\t\trecord.properties.reduce(\n\t\t\t\t(obj, value) => Object.assign(obj, { [`${value.name}`]: value.value }),\n\t\t\t\t{ id: record.id },\n\t\t\t),\n\t\t);\n\t}\n\treturn results;\n}\n"],"mappings":"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","names":[]}