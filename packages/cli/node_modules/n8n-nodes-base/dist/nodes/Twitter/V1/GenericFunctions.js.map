{"version":3,"sources":["../../../../nodes/Twitter/V1/GenericFunctions.ts"],"sourcesContent":["import type {\n\tIDataObject,\n\tIExecuteFunctions,\n\tIHookFunctions,\n\tILoadOptionsFunctions,\n\tJsonObject,\n\tIRequestOptions,\n\tIHttpRequestMethods,\n} from 'n8n-workflow';\nimport { NodeApiError, NodeOperationError, sleep } from 'n8n-workflow';\n\nexport async function twitterApiRequest(\n\tthis: IExecuteFunctions | ILoadOptionsFunctions | IHookFunctions,\n\tmethod: IHttpRequestMethods,\n\tresource: string,\n\tbody: IDataObject = {},\n\tqs: IDataObject = {},\n\turi?: string,\n\toption: IDataObject = {},\n) {\n\tlet options: IRequestOptions = {\n\t\tmethod,\n\t\tbody,\n\t\tqs,\n\t\turl: uri || `https://api.twitter.com/1.1${resource}`,\n\t\tjson: true,\n\t};\n\ttry {\n\t\tif (Object.keys(option).length !== 0) {\n\t\t\toptions = Object.assign({}, options, option);\n\t\t}\n\t\tif (Object.keys(body).length === 0) {\n\t\t\tdelete options.body;\n\t\t}\n\t\tif (Object.keys(qs).length === 0) {\n\t\t\tdelete options.qs;\n\t\t}\n\t\treturn await this.helpers.requestOAuth1.call(this, 'twitterOAuth1Api', options);\n\t} catch (error) {\n\t\tthrow new NodeApiError(this.getNode(), error as JsonObject);\n\t}\n}\n\nexport async function twitterApiRequestAllItems(\n\tthis: IExecuteFunctions | ILoadOptionsFunctions,\n\tpropertyName: string,\n\tmethod: IHttpRequestMethods,\n\tendpoint: string,\n\tbody: IDataObject = {},\n\tquery: IDataObject = {},\n) {\n\tconst returnData: IDataObject[] = [];\n\n\tlet responseData;\n\n\tquery.count = 100;\n\n\tdo {\n\t\tresponseData = await twitterApiRequest.call(this, method, endpoint, body, query);\n\t\tquery.since_id = responseData.search_metadata.max_id;\n\t\treturnData.push.apply(returnData, responseData[propertyName] as IDataObject[]);\n\t} while (responseData.search_metadata?.next_results);\n\n\treturn returnData;\n}\n\nexport function chunks(buffer: Buffer, chunkSize: number) {\n\tconst result = [];\n\tconst len = buffer.length;\n\tlet i = 0;\n\n\twhile (i < len) {\n\t\tresult.push(buffer.slice(i, (i += chunkSize)));\n\t}\n\n\treturn result;\n}\n\nexport async function uploadAttachments(\n\tthis: IExecuteFunctions,\n\tbinaryProperties: string[],\n\ti: number,\n) {\n\tconst uploadUri = 'https://upload.twitter.com/1.1/media/upload.json';\n\n\tconst media: IDataObject[] = [];\n\n\tfor (const binaryPropertyName of binaryProperties) {\n\t\tlet attachmentBody = {};\n\t\tlet response: IDataObject = {};\n\n\t\tconst binaryData = this.helpers.assertBinaryData(i, binaryPropertyName);\n\t\tconst dataBuffer = await this.helpers.getBinaryDataBuffer(i, binaryPropertyName);\n\n\t\tconst isAnimatedWebp = dataBuffer.toString().indexOf('ANMF') !== -1;\n\t\tconst isImage = binaryData.mimeType.includes('image');\n\n\t\tif (isImage && isAnimatedWebp) {\n\t\t\tthrow new NodeOperationError(\n\t\t\t\tthis.getNode(),\n\t\t\t\t'Animated .webp images are not supported use .gif instead',\n\t\t\t\t{ itemIndex: i },\n\t\t\t);\n\t\t}\n\n\t\tif (isImage) {\n\t\t\tconst form = {\n\t\t\t\tmedia_data: binaryData.data,\n\t\t\t};\n\n\t\t\tresponse = await twitterApiRequest.call(this, 'POST', '', {}, {}, uploadUri, {\n\t\t\t\tform,\n\t\t\t});\n\n\t\t\tmedia.push(response);\n\t\t} else {\n\t\t\t// https://developer.twitter.com/en/docs/media/upload-media/api-reference/post-media-upload-init\n\t\t\tattachmentBody = {\n\t\t\t\tcommand: 'INIT',\n\t\t\t\ttotal_bytes: dataBuffer.byteLength,\n\t\t\t\tmedia_type: binaryData.mimeType,\n\t\t\t};\n\n\t\t\tresponse = await twitterApiRequest.call(this, 'POST', '', {}, {}, uploadUri, {\n\t\t\t\tform: attachmentBody,\n\t\t\t});\n\n\t\t\tconst mediaId = response.media_id_string;\n\n\t\t\t// break the data on 5mb chunks (max size that can be uploaded at once)\n\n\t\t\tconst binaryParts = chunks(dataBuffer, 5242880);\n\n\t\t\tlet index = 0;\n\n\t\t\tfor (const binaryPart of binaryParts) {\n\t\t\t\t//https://developer.twitter.com/en/docs/media/upload-media/api-reference/post-media-upload-append\n\n\t\t\t\tattachmentBody = {\n\t\t\t\t\tname: binaryData.fileName,\n\t\t\t\t\tcommand: 'APPEND',\n\t\t\t\t\tmedia_id: mediaId,\n\t\t\t\t\tmedia_data: Buffer.from(binaryPart).toString('base64'),\n\t\t\t\t\tsegment_index: index,\n\t\t\t\t};\n\n\t\t\t\tresponse = await twitterApiRequest.call(this, 'POST', '', {}, {}, uploadUri, {\n\t\t\t\t\tform: attachmentBody,\n\t\t\t\t});\n\n\t\t\t\tindex++;\n\t\t\t}\n\n\t\t\t//https://developer.twitter.com/en/docs/media/upload-media/api-reference/post-media-upload-finalize\n\n\t\t\tattachmentBody = {\n\t\t\t\tcommand: 'FINALIZE',\n\t\t\t\tmedia_id: mediaId,\n\t\t\t};\n\n\t\t\tresponse = await twitterApiRequest.call(this, 'POST', '', {}, {}, uploadUri, {\n\t\t\t\tform: attachmentBody,\n\t\t\t});\n\n\t\t\t// data has not been uploaded yet, so wait for it to be ready\n\t\t\tif (response.processing_info) {\n\t\t\t\tconst { check_after_secs } = response.processing_info as IDataObject;\n\t\t\t\tawait sleep((check_after_secs as number) * 1000);\n\t\t\t}\n\n\t\t\tmedia.push(response);\n\t\t}\n\n\t\treturn media;\n\t}\n}\n"],"mappings":"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","names":[]}