{"version":3,"sources":["../../../../nodes/Transform/Summarize/Summarize.node.ts"],"sourcesContent":["import {\n\ttype IExecuteFunctions,\n\ttype INodeExecutionData,\n\ttype INodeType,\n\ttype INodeTypeDescription,\n\tNodeConnectionTypes,\n\ttype NodeExecutionHint,\n\tNodeOperationError,\n} from 'n8n-workflow';\n\nimport {\n\ttype Aggregations,\n\tNUMERICAL_AGGREGATIONS,\n\ttype SummarizeOptions,\n\taggregateAndSplitData,\n\tcheckIfFieldExists,\n\tfieldValueGetter,\n\tflattenAggregationResultToArray,\n\tflattenAggregationResultToObject,\n} from './utils';\n\nexport class Summarize implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'Summarize',\n\t\tname: 'summarize',\n\t\ticon: 'file:summarize.svg',\n\t\tgroup: ['transform'],\n\t\tsubtitle: '',\n\t\tversion: [1, 1.1],\n\t\tdescription: 'Sum, count, max, etc. across items',\n\t\tdefaults: {\n\t\t\tname: 'Summarize',\n\t\t},\n\t\tinputs: [NodeConnectionTypes.Main],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Fields to Summarize',\n\t\t\t\tname: 'fieldsToSummarize',\n\t\t\t\ttype: 'fixedCollection',\n\t\t\t\tplaceholder: 'Add Field',\n\t\t\t\tdefault: { values: [{ aggregation: 'count', field: '' }] },\n\t\t\t\ttypeOptions: {\n\t\t\t\t\tmultipleValues: true,\n\t\t\t\t},\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: '',\n\t\t\t\t\t\tname: 'values',\n\t\t\t\t\t\tvalues: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdisplayName: 'Aggregation',\n\t\t\t\t\t\t\t\tname: 'aggregation',\n\t\t\t\t\t\t\t\ttype: 'options',\n\t\t\t\t\t\t\t\toptions: [\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tname: 'Append',\n\t\t\t\t\t\t\t\t\t\tvalue: 'append',\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tname: 'Average',\n\t\t\t\t\t\t\t\t\t\tvalue: 'average',\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tname: 'Concatenate',\n\t\t\t\t\t\t\t\t\t\tvalue: 'concatenate',\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tname: 'Count',\n\t\t\t\t\t\t\t\t\t\tvalue: 'count',\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tname: 'Count Unique',\n\t\t\t\t\t\t\t\t\t\tvalue: 'countUnique',\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tname: 'Max',\n\t\t\t\t\t\t\t\t\t\tvalue: 'max',\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tname: 'Min',\n\t\t\t\t\t\t\t\t\t\tvalue: 'min',\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tname: 'Sum',\n\t\t\t\t\t\t\t\t\t\tvalue: 'sum',\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\tdefault: 'count',\n\t\t\t\t\t\t\t\tdescription: 'How to combine the values of the field you want to summarize',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t//field repeated to have different descriptions for different aggregations --------------------------------\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdisplayName: 'Field',\n\t\t\t\t\t\t\t\tname: 'field',\n\t\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\t\t\tdescription: 'The name of an input field that you want to summarize',\n\t\t\t\t\t\t\t\tplaceholder: 'e.g. cost',\n\t\t\t\t\t\t\t\thint: ' Enter the field name as text',\n\t\t\t\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\t\t\t\thide: {\n\t\t\t\t\t\t\t\t\t\taggregation: [...NUMERICAL_AGGREGATIONS, 'countUnique', 'count', 'max', 'min'],\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\trequiresDataPath: 'single',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdisplayName: 'Field',\n\t\t\t\t\t\t\t\tname: 'field',\n\t\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t\t\t'The name of an input field that you want to summarize. The field should contain numerical values; null, undefined, empty strings would be ignored.',\n\t\t\t\t\t\t\t\tplaceholder: 'e.g. cost',\n\t\t\t\t\t\t\t\thint: ' Enter the field name as text',\n\t\t\t\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\t\t\t\taggregation: NUMERICAL_AGGREGATIONS,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\trequiresDataPath: 'single',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdisplayName: 'Field',\n\t\t\t\t\t\t\t\tname: 'field',\n\t\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t\t\t'The name of an input field that you want to summarize; null, undefined, empty strings would be ignored',\n\t\t\t\t\t\t\t\tplaceholder: 'e.g. cost',\n\t\t\t\t\t\t\t\thint: ' Enter the field name as text',\n\t\t\t\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\t\t\t\taggregation: ['countUnique', 'count', 'max', 'min'],\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\trequiresDataPath: 'single',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t// ----------------------------------------------------------------------------------------------------------\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdisplayName: 'Include Empty Values',\n\t\t\t\t\t\t\t\tname: 'includeEmpty',\n\t\t\t\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\t\t\t\tdefault: false,\n\t\t\t\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\t\t\t\taggregation: ['append', 'concatenate', 'count', 'countUnique'],\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdisplayName: 'Separator',\n\t\t\t\t\t\t\t\tname: 'separateBy',\n\t\t\t\t\t\t\t\ttype: 'options',\n\t\t\t\t\t\t\t\tdefault: ',',\n\t\t\t\t\t\t\t\t// eslint-disable-next-line n8n-nodes-base/node-param-options-type-unsorted-items\n\t\t\t\t\t\t\t\toptions: [\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tname: 'Comma',\n\t\t\t\t\t\t\t\t\t\tvalue: ',',\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tname: 'Comma and Space',\n\t\t\t\t\t\t\t\t\t\tvalue: ', ',\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tname: 'New Line',\n\t\t\t\t\t\t\t\t\t\tvalue: '\\n',\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tname: 'None',\n\t\t\t\t\t\t\t\t\t\tvalue: '',\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tname: 'Space',\n\t\t\t\t\t\t\t\t\t\tvalue: ' ',\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tname: 'Other',\n\t\t\t\t\t\t\t\t\t\tvalue: 'other',\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\thint: 'What to insert between values',\n\t\t\t\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\t\t\t\taggregation: ['concatenate'],\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdisplayName: 'Custom Separator',\n\t\t\t\t\t\t\t\tname: 'customSeparator',\n\t\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\t\t\t\taggregation: ['concatenate'],\n\t\t\t\t\t\t\t\t\t\tseparateBy: ['other'],\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t// fieldsToSplitBy repeated to have different displayName for singleItem and separateItems -----------------------------\n\t\t\t{\n\t\t\t\tdisplayName: 'Fields to Split By',\n\t\t\t\tname: 'fieldsToSplitBy',\n\t\t\t\ttype: 'string',\n\t\t\t\tplaceholder: 'e.g. country, city',\n\t\t\t\tdefault: '',\n\t\t\t\tdescription: 'The name of the input fields that you want to split the summary by',\n\t\t\t\thint: 'Enter the name of the fields as text (separated by commas)',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\thide: {\n\t\t\t\t\t\t'/options.outputFormat': ['singleItem'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\trequiresDataPath: 'multiple',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Fields to Group By',\n\t\t\t\tname: 'fieldsToSplitBy',\n\t\t\t\ttype: 'string',\n\t\t\t\tplaceholder: 'e.g. country, city',\n\t\t\t\tdefault: '',\n\t\t\t\tdescription: 'The name of the input fields that you want to split the summary by',\n\t\t\t\thint: 'Enter the name of the fields as text (separated by commas)',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\t'/options.outputFormat': ['singleItem'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\trequiresDataPath: 'multiple',\n\t\t\t},\n\t\t\t// ----------------------------------------------------------------------------------------------------------\n\t\t\t{\n\t\t\t\tdisplayName: 'Options',\n\t\t\t\tname: 'options',\n\t\t\t\ttype: 'collection',\n\t\t\t\tplaceholder: 'Add option',\n\t\t\t\tdefault: {},\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Continue if Field Not Found',\n\t\t\t\t\t\tname: 'continueIfFieldNotFound',\n\t\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\t\tdefault: false,\n\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t\"Whether to continue if field to summarize can't be found in any items and return single empty item, otherwise an error would be thrown\",\n\t\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\t\thide: {\n\t\t\t\t\t\t\t\t'@version': [{ _cnd: { gte: 1.1 } }],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Disable Dot Notation',\n\t\t\t\t\t\tname: 'disableDotNotation',\n\t\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\t\tdefault: false,\n\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t'Whether to disallow referencing child fields using `parent.child` in the field name',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Output Format',\n\t\t\t\t\t\tname: 'outputFormat',\n\t\t\t\t\t\ttype: 'options',\n\t\t\t\t\t\tdefault: 'separateItems',\n\t\t\t\t\t\toptions: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: 'Each Split in a Separate Item',\n\t\t\t\t\t\t\t\tvalue: 'separateItems',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: 'All Splits in a Single Item',\n\t\t\t\t\t\t\t\tvalue: 'singleItem',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t// eslint-disable-next-line n8n-nodes-base/node-param-display-name-miscased\n\t\t\t\t\t\tdisplayName: 'Ignore items without valid fields to group by',\n\t\t\t\t\t\tname: 'skipEmptySplitFields',\n\t\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\t\tdefault: false,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t],\n\t};\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t\tconst items = this.getInputData();\n\t\tconst newItems = items.map(({ json }, i) => ({ ...json, _itemIndex: i }));\n\n\t\tconst options = this.getNodeParameter('options', 0, {}) as SummarizeOptions;\n\n\t\tconst fieldsToSplitBy = (this.getNodeParameter('fieldsToSplitBy', 0, '') as string)\n\t\t\t.split(',')\n\t\t\t.map((field) => field.trim())\n\t\t\t.filter((field) => field);\n\n\t\tconst fieldsToSummarize = this.getNodeParameter(\n\t\t\t'fieldsToSummarize.values',\n\t\t\t0,\n\t\t\t[],\n\t\t) as Aggregations;\n\n\t\tif (fieldsToSummarize.filter((aggregation) => aggregation.field !== '').length === 0) {\n\t\t\tthrow new NodeOperationError(\n\t\t\t\tthis.getNode(),\n\t\t\t\t\"You need to add at least one aggregation to 'Fields to Summarize' with non empty 'Field'\",\n\t\t\t);\n\t\t}\n\n\t\tconst getValue = fieldValueGetter(options.disableDotNotation);\n\n\t\tconst nodeVersion = this.getNode().typeVersion;\n\n\t\tconst aggregationResult = aggregateAndSplitData({\n\t\t\tsplitKeys: fieldsToSplitBy,\n\t\t\tinputItems: newItems,\n\t\t\tfieldsToSummarize,\n\t\t\toptions,\n\t\t\tgetValue,\n\t\t\tconvertKeysToString: nodeVersion === 1,\n\t\t});\n\n\t\tconst fieldsNotFound: NodeExecutionHint[] = [];\n\t\ttry {\n\t\t\tcheckIfFieldExists.call(this, newItems, fieldsToSummarize, getValue);\n\t\t} catch (error) {\n\t\t\tif (nodeVersion > 1 || options.continueIfFieldNotFound) {\n\t\t\t\tconst fieldNotFoundHint: NodeExecutionHint = {\n\t\t\t\t\tmessage: error instanceof Error ? error.message : String(error),\n\t\t\t\t\tlocation: 'outputPane',\n\t\t\t\t};\n\t\t\t\tfieldsNotFound.push(fieldNotFoundHint);\n\t\t\t} else {\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\n\t\tif (fieldsNotFound.length) {\n\t\t\tthis.addExecutionHints(...fieldsNotFound);\n\t\t}\n\n\t\tif (options.outputFormat === 'singleItem') {\n\t\t\tconst executionData: INodeExecutionData = {\n\t\t\t\tjson: flattenAggregationResultToObject(aggregationResult),\n\t\t\t\tpairedItem: newItems.map((_v, index) => ({\n\t\t\t\t\titem: index,\n\t\t\t\t})),\n\t\t\t};\n\t\t\treturn [[executionData]];\n\t\t} else {\n\t\t\tif (!fieldsToSplitBy.length && 'pairedItems' in aggregationResult) {\n\t\t\t\tconst { pairedItems, returnData } = aggregationResult;\n\t\t\t\tconst executionData: INodeExecutionData = {\n\t\t\t\t\tjson: returnData,\n\t\t\t\t\tpairedItem: (pairedItems ?? []).map((index) => ({ item: index })),\n\t\t\t\t};\n\t\t\t\treturn [[executionData]];\n\t\t\t}\n\t\t\tconst flatAggregationResults = flattenAggregationResultToArray(aggregationResult);\n\t\t\tconst executionData = flatAggregationResults.map((item) => {\n\t\t\t\tconst { pairedItems, returnData } = item;\n\t\t\t\treturn {\n\t\t\t\t\tjson: returnData,\n\t\t\t\t\tpairedItem: (pairedItems ?? []).map((index) => ({ item: index })),\n\t\t\t\t};\n\t\t\t});\n\t\t\treturn [executionData];\n\t\t}\n\t}\n}\n"],"mappings":"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","names":["executionData"]}