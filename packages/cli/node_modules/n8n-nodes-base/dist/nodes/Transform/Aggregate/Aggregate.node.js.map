{"version":3,"sources":["../../../../nodes/Transform/Aggregate/Aggregate.node.ts"],"sourcesContent":["import get from 'lodash/get';\nimport isEmpty from 'lodash/isEmpty';\nimport set from 'lodash/set';\nimport {\n\tNodeOperationError,\n\ttype IDataObject,\n\ttype IExecuteFunctions,\n\ttype INodeExecutionData,\n\ttype INodeType,\n\ttype INodeTypeDescription,\n\ttype IPairedItemData,\n\tNodeConnectionTypes,\n\ttype NodeExecutionHint,\n} from 'n8n-workflow';\n\nimport { addBinariesToItem } from './utils';\nimport { prepareFieldsArray } from '../utils/utils';\n\nexport class Aggregate implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'Aggregate',\n\t\tname: 'aggregate',\n\t\ticon: 'file:aggregate.svg',\n\t\tgroup: ['transform'],\n\t\tsubtitle: '',\n\t\tversion: 1,\n\t\tdescription: 'Combine a field from many items into a list in a single item',\n\t\tdefaults: {\n\t\t\tname: 'Aggregate',\n\t\t},\n\t\tinputs: [NodeConnectionTypes.Main],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Aggregate',\n\t\t\t\tname: 'aggregate',\n\t\t\t\ttype: 'options',\n\t\t\t\tdefault: 'aggregateIndividualFields',\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Individual Fields',\n\t\t\t\t\t\tvalue: 'aggregateIndividualFields',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'All Item Data (Into a Single List)',\n\t\t\t\t\t\tvalue: 'aggregateAllItemData',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Fields To Aggregate',\n\t\t\t\tname: 'fieldsToAggregate',\n\t\t\t\ttype: 'fixedCollection',\n\t\t\t\ttypeOptions: {\n\t\t\t\t\tmultipleValues: true,\n\t\t\t\t},\n\t\t\t\tplaceholder: 'Add Field To Aggregate',\n\t\t\t\tdefault: { fieldToAggregate: [{ fieldToAggregate: '', renameField: false }] },\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\taggregate: ['aggregateIndividualFields'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: '',\n\t\t\t\t\t\tname: 'fieldToAggregate',\n\t\t\t\t\t\tvalues: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdisplayName: 'Input Field Name',\n\t\t\t\t\t\t\t\tname: 'fieldToAggregate',\n\t\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\t\t\tdescription: 'The name of a field in the input items to aggregate together',\n\t\t\t\t\t\t\t\t// eslint-disable-next-line n8n-nodes-base/node-param-placeholder-miscased-id\n\t\t\t\t\t\t\t\tplaceholder: 'e.g. id',\n\t\t\t\t\t\t\t\thint: ' Enter the field name as text',\n\t\t\t\t\t\t\t\trequiresDataPath: 'single',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdisplayName: 'Rename Field',\n\t\t\t\t\t\t\t\tname: 'renameField',\n\t\t\t\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\t\t\t\tdefault: false,\n\t\t\t\t\t\t\t\tdescription: 'Whether to give the field a different name in the output',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdisplayName: 'Output Field Name',\n\t\t\t\t\t\t\t\tname: 'outputFieldName',\n\t\t\t\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\t\t\t\trenameField: [true],\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t\t\t'The name of the field to put the aggregated data in. Leave blank to use the input field name.',\n\t\t\t\t\t\t\t\trequiresDataPath: 'single',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Put Output in Field',\n\t\t\t\tname: 'destinationFieldName',\n\t\t\t\ttype: 'string',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\taggregate: ['aggregateAllItemData'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdefault: 'data',\n\t\t\t\tdescription: 'The name of the output field to put the data in',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Include',\n\t\t\t\tname: 'include',\n\t\t\t\ttype: 'options',\n\t\t\t\tdefault: 'allFields',\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'All Fields',\n\t\t\t\t\t\tvalue: 'allFields',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Specified Fields',\n\t\t\t\t\t\tvalue: 'specifiedFields',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'All Fields Except',\n\t\t\t\t\t\tvalue: 'allFieldsExcept',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\taggregate: ['aggregateAllItemData'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Fields To Exclude',\n\t\t\t\tname: 'fieldsToExclude',\n\t\t\t\ttype: 'string',\n\t\t\t\tplaceholder: 'e.g. email, name',\n\t\t\t\tdefault: '',\n\t\t\t\trequiresDataPath: 'multiple',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\taggregate: ['aggregateAllItemData'],\n\t\t\t\t\t\tinclude: ['allFieldsExcept'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Fields To Include',\n\t\t\t\tname: 'fieldsToInclude',\n\t\t\t\ttype: 'string',\n\t\t\t\tplaceholder: 'e.g. email, name',\n\t\t\t\tdefault: '',\n\t\t\t\trequiresDataPath: 'multiple',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\taggregate: ['aggregateAllItemData'],\n\t\t\t\t\t\tinclude: ['specifiedFields'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Options',\n\t\t\t\tname: 'options',\n\t\t\t\ttype: 'collection',\n\t\t\t\tplaceholder: 'Add Field',\n\t\t\t\tdefault: {},\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Disable Dot Notation',\n\t\t\t\t\t\tname: 'disableDotNotation',\n\t\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\t\tdefault: false,\n\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t'Whether to disallow referencing child fields using `parent.child` in the field name',\n\t\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\t\thide: {\n\t\t\t\t\t\t\t\t'/aggregate': ['aggregateAllItemData'],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Merge Lists',\n\t\t\t\t\t\tname: 'mergeLists',\n\t\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\t\tdefault: false,\n\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t'Whether to merge the output into a single flat list (rather than a list of lists), if the field to aggregate is a list',\n\t\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\t\thide: {\n\t\t\t\t\t\t\t\t'/aggregate': ['aggregateAllItemData'],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Include Binaries',\n\t\t\t\t\t\tname: 'includeBinaries',\n\t\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\t\tdefault: false,\n\t\t\t\t\t\tdescription: 'Whether to include the binary data in the new item',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Keep Only Unique Binaries',\n\t\t\t\t\t\tname: 'keepOnlyUnique',\n\t\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\t\tdefault: false,\n\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t'Whether to keep only unique binaries by comparing mime types, file types, file sizes and file extensions',\n\t\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\t\tincludeBinaries: [true],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Keep Missing And Null Values',\n\t\t\t\t\t\tname: 'keepMissing',\n\t\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\t\tdefault: false,\n\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t'Whether to add a null entry to the aggregated list when there is a missing or null value',\n\t\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\t\thide: {\n\t\t\t\t\t\t\t\t'/aggregate': ['aggregateAllItemData'],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t],\n\t};\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t\tlet returnData: INodeExecutionData = { json: {}, pairedItem: [] };\n\t\tconst items = this.getInputData();\n\t\tconst notFoundedFields: { [key: string]: boolean[] } = {};\n\n\t\tconst aggregate = this.getNodeParameter('aggregate', 0, '') as string;\n\n\t\tif (aggregate === 'aggregateIndividualFields') {\n\t\t\tconst disableDotNotation = this.getNodeParameter(\n\t\t\t\t'options.disableDotNotation',\n\t\t\t\t0,\n\t\t\t\tfalse,\n\t\t\t) as boolean;\n\t\t\tconst mergeLists = this.getNodeParameter('options.mergeLists', 0, false) as boolean;\n\t\t\tconst fieldsToAggregate = this.getNodeParameter(\n\t\t\t\t'fieldsToAggregate.fieldToAggregate',\n\t\t\t\t0,\n\t\t\t\t[],\n\t\t\t) as [{ fieldToAggregate: string; renameField: boolean; outputFieldName: string }];\n\t\t\tconst keepMissing = this.getNodeParameter('options.keepMissing', 0, false) as boolean;\n\n\t\t\tif (!fieldsToAggregate.length) {\n\t\t\t\tthrow new NodeOperationError(this.getNode(), 'No fields specified', {\n\t\t\t\t\tdescription: 'Please add a field to aggregate',\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tconst newItem: INodeExecutionData = {\n\t\t\t\tjson: {},\n\t\t\t\tpairedItem: Array.from({ length: items.length }, (_, i) => i).map((index) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\titem: index,\n\t\t\t\t\t};\n\t\t\t\t}),\n\t\t\t};\n\n\t\t\tconst values: { [key: string]: any } = {};\n\t\t\tconst outputFields: string[] = [];\n\n\t\t\tfor (const { fieldToAggregate, outputFieldName, renameField } of fieldsToAggregate) {\n\t\t\t\tconst field = renameField ? outputFieldName : fieldToAggregate;\n\n\t\t\t\tif (outputFields.includes(field)) {\n\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t`The '${field}' output field is used more than once`,\n\t\t\t\t\t\t{ description: 'Please make sure each output field name is unique' },\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\toutputFields.push(field);\n\t\t\t\t}\n\n\t\t\t\tconst getFieldToAggregate = () =>\n\t\t\t\t\t!disableDotNotation && fieldToAggregate.includes('.')\n\t\t\t\t\t\t? fieldToAggregate.split('.').pop()\n\t\t\t\t\t\t: fieldToAggregate;\n\n\t\t\t\tconst _outputFieldName = outputFieldName\n\t\t\t\t\t? outputFieldName\n\t\t\t\t\t: (getFieldToAggregate() as string);\n\n\t\t\t\tif (fieldToAggregate !== '') {\n\t\t\t\t\tvalues[_outputFieldName] = [];\n\t\t\t\t\tfor (let i = 0; i < items.length; i++) {\n\t\t\t\t\t\tif (notFoundedFields[fieldToAggregate] === undefined) {\n\t\t\t\t\t\t\tnotFoundedFields[fieldToAggregate] = [];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (!disableDotNotation) {\n\t\t\t\t\t\t\tlet value = get(items[i].json, fieldToAggregate);\n\t\t\t\t\t\t\tnotFoundedFields[fieldToAggregate].push(value === undefined ? false : true);\n\n\t\t\t\t\t\t\tif (!keepMissing) {\n\t\t\t\t\t\t\t\tif (Array.isArray(value)) {\n\t\t\t\t\t\t\t\t\tvalue = value.filter((entry) => entry !== null);\n\t\t\t\t\t\t\t\t} else if (value === null || value === undefined) {\n\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (Array.isArray(value) && mergeLists) {\n\t\t\t\t\t\t\t\tvalues[_outputFieldName].push(...value);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tvalues[_outputFieldName].push(value);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tlet value = items[i].json[fieldToAggregate];\n\t\t\t\t\t\t\tnotFoundedFields[fieldToAggregate].push(value === undefined ? false : true);\n\n\t\t\t\t\t\t\tif (!keepMissing) {\n\t\t\t\t\t\t\t\tif (Array.isArray(value)) {\n\t\t\t\t\t\t\t\t\tvalue = value.filter((entry) => entry !== null);\n\t\t\t\t\t\t\t\t} else if (value === null || value === undefined) {\n\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (Array.isArray(value) && mergeLists) {\n\t\t\t\t\t\t\t\tvalues[_outputFieldName].push(...value);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tvalues[_outputFieldName].push(value);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (const key of Object.keys(values)) {\n\t\t\t\tif (!disableDotNotation) {\n\t\t\t\t\tset(newItem.json, key, values[key]);\n\t\t\t\t} else {\n\t\t\t\t\tnewItem.json[key] = values[key];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturnData = newItem;\n\t\t} else {\n\t\t\tlet newItems: IDataObject[] = items.map((item) => item.json);\n\t\t\tlet pairedItem: IPairedItemData[] = [];\n\t\t\tconst destinationFieldName = this.getNodeParameter('destinationFieldName', 0) as string;\n\n\t\t\tconst fieldsToExclude = prepareFieldsArray(\n\t\t\t\tthis.getNodeParameter('fieldsToExclude', 0, '') as string,\n\t\t\t\t'Fields To Exclude',\n\t\t\t);\n\n\t\t\tconst fieldsToInclude = prepareFieldsArray(\n\t\t\t\tthis.getNodeParameter('fieldsToInclude', 0, '') as string,\n\t\t\t\t'Fields To Include',\n\t\t\t);\n\n\t\t\tif (fieldsToExclude.length || fieldsToInclude.length) {\n\t\t\t\tnewItems = newItems.reduce((acc, item, index) => {\n\t\t\t\t\tconst newItem: IDataObject = {};\n\t\t\t\t\tlet outputFields = Object.keys(item);\n\n\t\t\t\t\tif (fieldsToExclude.length) {\n\t\t\t\t\t\toutputFields = outputFields.filter((key) => !fieldsToExclude.includes(key));\n\t\t\t\t\t}\n\t\t\t\t\tif (fieldsToInclude.length) {\n\t\t\t\t\t\toutputFields = outputFields.filter((key) =>\n\t\t\t\t\t\t\tfieldsToInclude.length ? fieldsToInclude.includes(key) : true,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\toutputFields.forEach((key) => {\n\t\t\t\t\t\tnewItem[key] = item[key];\n\t\t\t\t\t});\n\n\t\t\t\t\tif (isEmpty(newItem)) {\n\t\t\t\t\t\treturn acc;\n\t\t\t\t\t}\n\n\t\t\t\t\tpairedItem.push({ item: index });\n\t\t\t\t\treturn acc.concat([newItem]);\n\t\t\t\t}, [] as IDataObject[]);\n\t\t\t} else {\n\t\t\t\tpairedItem = Array.from({ length: newItems.length }, (_, item) => ({\n\t\t\t\t\titem,\n\t\t\t\t}));\n\t\t\t}\n\n\t\t\tconst output: INodeExecutionData = { json: { [destinationFieldName]: newItems }, pairedItem };\n\n\t\t\treturnData = output;\n\t\t}\n\n\t\tconst includeBinaries = this.getNodeParameter('options.includeBinaries', 0, false) as boolean;\n\n\t\tif (includeBinaries) {\n\t\t\tconst pairedItems = (returnData.pairedItem || []) as IPairedItemData[];\n\n\t\t\tconst aggregatedItems = pairedItems.map((item) => {\n\t\t\t\treturn items[item.item];\n\t\t\t});\n\n\t\t\tconst keepOnlyUnique = this.getNodeParameter('options.keepOnlyUnique', 0, false) as boolean;\n\n\t\t\taddBinariesToItem(returnData, aggregatedItems, keepOnlyUnique);\n\t\t}\n\n\t\tif (Object.keys(notFoundedFields).length) {\n\t\t\tconst hints: NodeExecutionHint[] = [];\n\n\t\t\tfor (const [field, values] of Object.entries(notFoundedFields)) {\n\t\t\t\tif (values.every((value) => !value)) {\n\t\t\t\t\thints.push({\n\t\t\t\t\t\tmessage: `The field '${field}' wasn't found in any input item`,\n\t\t\t\t\t\tlocation: 'outputPane',\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (hints.length) {\n\t\t\t\tthis.addExecutionHints(...hints);\n\t\t\t}\n\t\t}\n\n\t\treturn [[returnData]];\n\t}\n}\n"],"mappings":"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","names":["import_utils","get","set","isEmpty"]}