{"version":3,"sources":["../../../nodes/QuickChart/QuickChart.node.ts"],"sourcesContent":["import type {\n\tIDataObject,\n\tIExecuteFunctions,\n\tIHttpRequestOptions,\n\tIN8nHttpFullResponse,\n\tINodeExecutionData,\n\tINodeType,\n\tINodeTypeDescription,\n} from 'n8n-workflow';\nimport { jsonParse, NodeConnectionTypes, NodeOperationError } from 'n8n-workflow';\n\nimport {\n\tCHART_TYPE_OPTIONS,\n\tFill_CHARTS,\n\tHORIZONTAL_CHARTS,\n\tITEM_STYLE_CHARTS,\n\tPOINT_STYLE_CHARTS,\n} from './constants';\nimport type { IDataset } from './types';\n\nexport class QuickChart implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'QuickChart',\n\t\tname: 'quickChart',\n\t\ticon: 'file:quickChart.svg',\n\t\tgroup: ['output'],\n\t\tdescription: 'Create a chart via QuickChart',\n\t\tversion: 1,\n\t\tdefaults: {\n\t\t\tname: 'QuickChart',\n\t\t},\n\t\tusableAsTool: true,\n\t\tinputs: [NodeConnectionTypes.Main],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Chart Type',\n\t\t\t\tname: 'chartType',\n\t\t\t\ttype: 'options',\n\t\t\t\tdefault: 'bar',\n\t\t\t\toptions: CHART_TYPE_OPTIONS,\n\t\t\t\tdescription: 'The type of chart to create',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Add Labels',\n\t\t\t\tname: 'labelsMode',\n\t\t\t\ttype: 'options',\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Manually',\n\t\t\t\t\t\tvalue: 'manually',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'From Array',\n\t\t\t\t\t\tvalue: 'array',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'manually',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Labels',\n\t\t\t\tname: 'labelsUi',\n\t\t\t\ttype: 'fixedCollection',\n\t\t\t\ttypeOptions: {\n\t\t\t\t\tmultipleValues: true,\n\t\t\t\t\tsortable: true,\n\t\t\t\t},\n\t\t\t\tdefault: {},\n\t\t\t\trequired: true,\n\t\t\t\tdescription: 'Labels to use in the chart',\n\t\t\t\tplaceholder: 'Add Label',\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'labelsValues',\n\t\t\t\t\t\tdisplayName: 'Labels',\n\t\t\t\t\t\tvalues: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdisplayName: 'Label',\n\t\t\t\t\t\t\t\tname: 'label',\n\t\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tlabelsMode: ['manually'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Labels Array',\n\t\t\t\tname: 'labelsArray',\n\t\t\t\ttype: 'string',\n\t\t\t\trequired: true,\n\t\t\t\tdefault: '',\n\t\t\t\tplaceholder: 'e.g. [\"Berlin\", \"Paris\", \"Rome\", \"New York\"]',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tlabelsMode: ['array'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdescription: 'The array of labels to be used in the chart',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Data',\n\t\t\t\tname: 'data',\n\t\t\t\ttype: 'json',\n\t\t\t\tdefault: '',\n\t\t\t\tdescription:\n\t\t\t\t\t'Data to use for the dataset, documentation and examples <a href=\"https://quickchart.io/documentation/chart-types/\" target=\"_blank\">here</a>',\n\t\t\t\tplaceholder: 'e.g. [60, 10, 12, 20]',\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Put Output In Field',\n\t\t\t\tname: 'output',\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: 'data',\n\t\t\t\trequired: true,\n\t\t\t\tdescription:\n\t\t\t\t\t'The binary data will be displayed in the Output panel on the right, under the Binary tab',\n\t\t\t\thint: 'The name of the output field to put the binary file data in',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Chart Options',\n\t\t\t\tname: 'chartOptions',\n\t\t\t\ttype: 'collection',\n\t\t\t\tplaceholder: 'Add option',\n\t\t\t\tdefault: {},\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Background Color',\n\t\t\t\t\t\tname: 'backgroundColor',\n\t\t\t\t\t\ttype: 'color',\n\t\t\t\t\t\ttypeOptions: {\n\t\t\t\t\t\t\tshowAlpha: true,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\tdescription: 'Background color of the chart',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Device Pixel Ratio',\n\t\t\t\t\t\tname: 'devicePixelRatio',\n\t\t\t\t\t\ttype: 'number',\n\t\t\t\t\t\tdefault: 2,\n\t\t\t\t\t\ttypeOptions: {\n\t\t\t\t\t\t\tminValue: 1,\n\t\t\t\t\t\t\tmaxValue: 2,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tdescription: 'Pixel ratio of the chart',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Format',\n\t\t\t\t\t\tname: 'format',\n\t\t\t\t\t\ttype: 'options',\n\t\t\t\t\t\tdefault: 'png',\n\t\t\t\t\t\tdescription: 'File format of the resulting chart',\n\t\t\t\t\t\toptions: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: 'PNG',\n\t\t\t\t\t\t\t\tvalue: 'png',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: 'PDF',\n\t\t\t\t\t\t\t\tvalue: 'pdf',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: 'SVG',\n\t\t\t\t\t\t\t\tvalue: 'svg',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: 'WebP',\n\t\t\t\t\t\t\t\tvalue: 'webp',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Height',\n\t\t\t\t\t\tname: 'height',\n\t\t\t\t\t\ttype: 'number',\n\t\t\t\t\t\tdefault: 300,\n\t\t\t\t\t\tdescription: 'Height of the chart',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Horizontal',\n\t\t\t\t\t\tname: 'horizontal',\n\t\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\t\tdefault: false,\n\t\t\t\t\t\tdescription: 'Whether the chart should use its Y axis horizontal',\n\t\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\t\t'/chartType': HORIZONTAL_CHARTS,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Width',\n\t\t\t\t\t\tname: 'width',\n\t\t\t\t\t\ttype: 'number',\n\t\t\t\t\t\tdefault: 500,\n\t\t\t\t\t\tdescription: 'Width of the chart',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Dataset Options',\n\t\t\t\tname: 'datasetOptions',\n\t\t\t\ttype: 'collection',\n\t\t\t\tplaceholder: 'Add option',\n\t\t\t\tdefault: {},\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Background Color',\n\t\t\t\t\t\tname: 'backgroundColor',\n\t\t\t\t\t\ttype: 'color',\n\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\ttypeOptions: {\n\t\t\t\t\t\t\tshowAlpha: true,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t'Color used for the background the dataset (area of a line graph, fill of a bar chart, etc.)',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Border Color',\n\t\t\t\t\t\tname: 'borderColor',\n\t\t\t\t\t\ttype: 'color',\n\t\t\t\t\t\ttypeOptions: {\n\t\t\t\t\t\t\tshowAlpha: true,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\tdescription: 'Color used for lines of the dataset',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Fill',\n\t\t\t\t\t\tname: 'fill',\n\t\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\t\tdefault: true,\n\t\t\t\t\t\tdescription: 'Whether to fill area of the dataset',\n\t\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\t\t'/chartType': Fill_CHARTS,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Label',\n\t\t\t\t\t\tname: 'label',\n\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\tdescription: 'The label of the dataset',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Point Style',\n\t\t\t\t\t\tname: 'pointStyle',\n\t\t\t\t\t\ttype: 'options',\n\t\t\t\t\t\tdefault: 'circle',\n\t\t\t\t\t\tdescription: 'Style to use for points of the dataset',\n\t\t\t\t\t\toptions: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: 'Circle',\n\t\t\t\t\t\t\t\tvalue: 'circle',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: 'Cross',\n\t\t\t\t\t\t\t\tvalue: 'cross',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: 'CrossRot',\n\t\t\t\t\t\t\t\tvalue: 'crossRot',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: 'Dash',\n\t\t\t\t\t\t\t\tvalue: 'dash',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: 'Line',\n\t\t\t\t\t\t\t\tvalue: 'line',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: 'Rect',\n\t\t\t\t\t\t\t\tvalue: 'rect',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: 'Rect Rot',\n\t\t\t\t\t\t\t\tvalue: 'rectRot',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: 'Rect Rounded',\n\t\t\t\t\t\t\t\tvalue: 'rectRounded',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: 'Star',\n\t\t\t\t\t\t\t\tvalue: 'star',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: 'Triangle',\n\t\t\t\t\t\t\t\tvalue: 'triangle',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\t\t'/chartType': POINT_STYLE_CHARTS,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t],\n\t};\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t\tconst items = this.getInputData();\n\t\tconst datasets: IDataset[] = [];\n\t\tlet chartType = '';\n\n\t\tconst labels: string[] = [];\n\t\tconst labelsMode = this.getNodeParameter('labelsMode', 0) as string;\n\n\t\tif (labelsMode === 'manually') {\n\t\t\tconst labelsUi = this.getNodeParameter('labelsUi.labelsValues', 0, []) as IDataObject[];\n\n\t\t\tif (labelsUi.length) {\n\t\t\t\tfor (const labelValue of labelsUi as [{ label: string[] | string }]) {\n\t\t\t\t\tif (Array.isArray(labelValue.label)) {\n\t\t\t\t\t\tlabels?.push(...labelValue.label);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlabels?.push(labelValue.label);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tconst labelsArray = this.getNodeParameter('labelsArray', 0, '') as string;\n\n\t\t\tconst errorMessage =\n\t\t\t\t'Labels Array is not a valid array, use valid JSON format, or specify it by expressions';\n\n\t\t\tif (Array.isArray(labelsArray)) {\n\t\t\t\tlabels.push(...labelsArray);\n\t\t\t} else {\n\t\t\t\tconst labelsArrayParsed = jsonParse<string[]>(labelsArray, {\n\t\t\t\t\terrorMessage,\n\t\t\t\t});\n\t\t\t\tif (!Array.isArray(labelsArrayParsed)) {\n\t\t\t\t\tthrow new NodeOperationError(this.getNode(), errorMessage);\n\t\t\t\t}\n\t\t\t\tlabels.push(...labelsArrayParsed);\n\t\t\t}\n\t\t}\n\n\t\tfor (let i = 0; i < items.length; i++) {\n\t\t\tconst data = this.getNodeParameter('data', i) as string;\n\t\t\tconst datasetOptions = this.getNodeParameter('datasetOptions', i) as IDataObject;\n\n\t\t\tconst backgroundColor = datasetOptions.backgroundColor as string;\n\t\t\tconst borderColor = datasetOptions.borderColor as string | undefined;\n\t\t\tconst fill = datasetOptions.fill as boolean | undefined;\n\t\t\tconst label = (datasetOptions.label as string) || 'Chart';\n\t\t\tconst pointStyle = datasetOptions.pointStyle as string | undefined;\n\n\t\t\tchartType = this.getNodeParameter('chartType', i) as string;\n\n\t\t\tif (HORIZONTAL_CHARTS.includes(chartType)) {\n\t\t\t\tconst horizontal = this.getNodeParameter('chartOptions.horizontal', i, false) as boolean;\n\t\t\t\tif (horizontal) {\n\t\t\t\t\tchartType =\n\t\t\t\t\t\t'horizontal' + chartType[0].toUpperCase() + chartType.substring(1, chartType.length);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Boxplots and Violins are an addon that uses the name 'itemStyle'\n\t\t\t// instead of 'pointStyle'.\n\t\t\tlet pointStyleName = 'pointStyle';\n\t\t\tif (ITEM_STYLE_CHARTS.includes(chartType)) {\n\t\t\t\tpointStyleName = 'itemStyle';\n\t\t\t}\n\n\t\t\tdatasets.push({\n\t\t\t\tlabel,\n\t\t\t\tdata,\n\t\t\t\tbackgroundColor,\n\t\t\t\tborderColor,\n\t\t\t\ttype: chartType,\n\t\t\t\tfill,\n\t\t\t\t[pointStyleName]: pointStyle,\n\t\t\t});\n\t\t}\n\n\t\tconst output = this.getNodeParameter('output', 0) as string;\n\t\tconst chartOptions = this.getNodeParameter('chartOptions', 0) as IDataObject;\n\n\t\tconst chart = {\n\t\t\ttype: chartType,\n\t\t\tdata: {\n\t\t\t\tlabels,\n\t\t\t\tdatasets,\n\t\t\t},\n\t\t};\n\n\t\tconst options: IHttpRequestOptions = {\n\t\t\tmethod: 'GET',\n\t\t\turl: 'https://quickchart.io/chart',\n\t\t\tqs: {\n\t\t\t\tchart: JSON.stringify(chart),\n\t\t\t\t...chartOptions,\n\t\t\t},\n\t\t\treturnFullResponse: true,\n\t\t\tencoding: 'arraybuffer',\n\t\t\tjson: false,\n\t\t};\n\n\t\tconst response = (await this.helpers.httpRequest(options)) as IN8nHttpFullResponse;\n\t\tlet mimeType = response.headers['content-type'] as string | undefined;\n\t\tmimeType = mimeType ? mimeType.split(';').find((value) => value.includes('/')) : undefined;\n\n\t\treturn [\n\t\t\t[\n\t\t\t\t{\n\t\t\t\t\tbinary: {\n\t\t\t\t\t\t[output]: await this.helpers.prepareBinaryData(\n\t\t\t\t\t\t\tresponse.body as Buffer,\n\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\tmimeType,\n\t\t\t\t\t\t),\n\t\t\t\t\t},\n\t\t\t\t\tjson: { chart },\n\t\t\t\t},\n\t\t\t],\n\t\t];\n\t}\n}\n"],"mappings":"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","names":[]}