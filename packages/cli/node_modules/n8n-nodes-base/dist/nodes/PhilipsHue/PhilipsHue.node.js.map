{"version":3,"sources":["../../../nodes/PhilipsHue/PhilipsHue.node.ts"],"sourcesContent":["import type {\n\tIDataObject,\n\tIExecuteFunctions,\n\tILoadOptionsFunctions,\n\tINodeExecutionData,\n\tINodePropertyOptions,\n\tINodeType,\n\tINodeTypeDescription,\n} from 'n8n-workflow';\nimport { NodeConnectionTypes } from 'n8n-workflow';\n\nimport { getUser, philipsHueApiRequest } from './GenericFunctions';\nimport { lightFields, lightOperations } from './LightDescription';\n\nexport class PhilipsHue implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'Philips Hue',\n\t\tname: 'philipsHue',\n\t\t// eslint-disable-next-line n8n-nodes-base/node-class-description-icon-not-svg\n\t\ticon: 'file:philipshue.png',\n\t\tgroup: ['input'],\n\t\tversion: 1,\n\t\tsubtitle: '={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}',\n\t\tdescription: 'Consume Philips Hue API',\n\t\tdefaults: {\n\t\t\tname: 'Philips Hue',\n\t\t},\n\t\tusableAsTool: true,\n\t\tinputs: [NodeConnectionTypes.Main],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tcredentials: [\n\t\t\t{\n\t\t\t\tname: 'philipsHueOAuth2Api',\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Resource',\n\t\t\t\tname: 'resource',\n\t\t\t\ttype: 'options',\n\t\t\t\tnoDataExpression: true,\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Light',\n\t\t\t\t\t\tvalue: 'light',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'light',\n\t\t\t},\n\t\t\t...lightOperations,\n\t\t\t...lightFields,\n\t\t],\n\t};\n\n\tmethods = {\n\t\tloadOptions: {\n\t\t\t// Get all the lights to display them to user so that they can\n\t\t\t// select them easily\n\t\t\tasync getLights(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst returnData: INodePropertyOptions[] = [];\n\n\t\t\t\tconst user = await getUser.call(this);\n\n\t\t\t\tconst lights = await philipsHueApiRequest.call(this, 'GET', `/api/${user}/lights`);\n\n\t\t\t\tconst groups = await philipsHueApiRequest.call(this, 'GET', `/api/${user}/groups`);\n\n\t\t\t\tfor (const light of Object.keys(lights as IDataObject)) {\n\t\t\t\t\tlet lightName = lights[light].name;\n\t\t\t\t\tconst lightId = light;\n\n\t\t\t\t\tfor (const groupId of Object.keys(groups as IDataObject)) {\n\t\t\t\t\t\tif (groups[groupId].type === 'Room' && groups[groupId].lights.includes(lightId)) {\n\t\t\t\t\t\t\tlightName = `${groups[groupId].name}: ${lightName}`;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturnData.push({\n\t\t\t\t\t\tname: lightName,\n\t\t\t\t\t\tvalue: lightId,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn returnData;\n\t\t\t},\n\t\t},\n\t};\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t\tconst items = this.getInputData();\n\t\tconst returnData: INodeExecutionData[] = [];\n\t\tconst length = items.length;\n\t\tlet responseData;\n\t\tconst resource = this.getNodeParameter('resource', 0);\n\t\tconst operation = this.getNodeParameter('operation', 0);\n\t\tfor (let i = 0; i < length; i++) {\n\t\t\tif (resource === 'light') {\n\t\t\t\tif (operation === 'update') {\n\t\t\t\t\tconst lightId = this.getNodeParameter('lightId', i) as string;\n\n\t\t\t\t\tconst on = this.getNodeParameter('on', i) as boolean;\n\n\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i);\n\n\t\t\t\t\tconst body = {\n\t\t\t\t\t\ton,\n\t\t\t\t\t};\n\n\t\t\t\t\tif (additionalFields.transitiontime) {\n\t\t\t\t\t\tadditionalFields.transitiontime = (additionalFields.transitiontime as number) * 100;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (additionalFields.xy) {\n\t\t\t\t\t\tadditionalFields.xy = (additionalFields.xy as string)\n\t\t\t\t\t\t\t.split(',')\n\t\t\t\t\t\t\t.map((e: string) => parseFloat(e));\n\t\t\t\t\t}\n\n\t\t\t\t\tif (additionalFields.xy_inc) {\n\t\t\t\t\t\tadditionalFields.xy_inc = (additionalFields.xy_inc as string)\n\t\t\t\t\t\t\t.split(',')\n\t\t\t\t\t\t\t.map((e: string) => parseFloat(e));\n\t\t\t\t\t}\n\n\t\t\t\t\tObject.assign(body, additionalFields);\n\n\t\t\t\t\tconst user = await getUser.call(this);\n\n\t\t\t\t\tconst data = await philipsHueApiRequest.call(\n\t\t\t\t\t\tthis,\n\t\t\t\t\t\t'PUT',\n\t\t\t\t\t\t`/api/${user}/lights/${lightId}/state`,\n\t\t\t\t\t\tbody,\n\t\t\t\t\t);\n\n\t\t\t\t\tresponseData = {};\n\n\t\t\t\t\tfor (const response of data) {\n\t\t\t\t\t\tObject.assign(responseData, response.success);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (operation === 'delete') {\n\t\t\t\t\tconst lightId = this.getNodeParameter('lightId', i) as string;\n\n\t\t\t\t\tconst user = await getUser.call(this);\n\n\t\t\t\t\tresponseData = await philipsHueApiRequest.call(\n\t\t\t\t\t\tthis,\n\t\t\t\t\t\t'DELETE',\n\t\t\t\t\t\t`/api/${user}/lights/${lightId}`,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tif (operation === 'getAll') {\n\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', i);\n\n\t\t\t\t\tconst user = await getUser.call(this);\n\n\t\t\t\t\tconst lights = await philipsHueApiRequest.call(this, 'GET', `/api/${user}/lights`);\n\n\t\t\t\t\tresponseData = Object.values(lights as IDataObject);\n\n\t\t\t\t\tif (!returnAll) {\n\t\t\t\t\t\tconst limit = this.getNodeParameter('limit', i);\n\t\t\t\t\t\tresponseData = responseData.splice(0, limit);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (operation === 'get') {\n\t\t\t\t\tconst lightId = this.getNodeParameter('lightId', i) as string;\n\n\t\t\t\t\tconst user = await getUser.call(this);\n\n\t\t\t\t\tresponseData = await philipsHueApiRequest.call(\n\t\t\t\t\t\tthis,\n\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t`/api/${user}/lights/${lightId}`,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t{ itemData: { item: i } },\n\t\t\t);\n\t\t\treturnData.push(...executionData);\n\t\t}\n\t\treturn [returnData];\n\t}\n}\n"],"mappings":"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","names":[]}