{"version":3,"sources":["../../../nodes/GraphQL/GraphQL.node.ts"],"sourcesContent":["/* eslint-disable n8n-nodes-base/node-filename-against-convention */\nimport type {\n\tIExecuteFunctions,\n\tIDataObject,\n\tINodeExecutionData,\n\tINodeType,\n\tINodeTypeDescription,\n\tJsonObject,\n\tIRequestOptionsSimplified,\n\tIRequestOptions,\n\tIHttpRequestMethods,\n} from 'n8n-workflow';\nimport { NodeApiError, NodeConnectionTypes, NodeOperationError, jsonParse } from 'n8n-workflow';\n\nexport class GraphQL implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'GraphQL',\n\t\tname: 'graphql',\n\t\t// eslint-disable-next-line n8n-nodes-base/node-class-description-icon-not-svg\n\t\ticon: 'file:graphql.png',\n\t\tgroup: ['input'],\n\t\tversion: [1, 1.1],\n\t\tdescription: 'Makes a GraphQL request and returns the received data',\n\t\tdefaults: {\n\t\t\tname: 'GraphQL',\n\t\t},\n\t\tusableAsTool: true,\n\t\tinputs: [NodeConnectionTypes.Main],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tcredentials: [\n\t\t\t{\n\t\t\t\tname: 'httpBasicAuth',\n\t\t\t\trequired: true,\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tauthentication: ['basicAuth'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'httpCustomAuth',\n\t\t\t\trequired: true,\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tauthentication: ['customAuth'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'httpDigestAuth',\n\t\t\t\trequired: true,\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tauthentication: ['digestAuth'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'httpHeaderAuth',\n\t\t\t\trequired: true,\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tauthentication: ['headerAuth'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'httpQueryAuth',\n\t\t\t\trequired: true,\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tauthentication: ['queryAuth'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'oAuth1Api',\n\t\t\t\trequired: true,\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tauthentication: ['oAuth1'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'oAuth2Api',\n\t\t\t\trequired: true,\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tauthentication: ['oAuth2'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Authentication',\n\t\t\t\tname: 'authentication',\n\t\t\t\ttype: 'options',\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Basic Auth',\n\t\t\t\t\t\tvalue: 'basicAuth',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Custom Auth',\n\t\t\t\t\t\tvalue: 'customAuth',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Digest Auth',\n\t\t\t\t\t\tvalue: 'digestAuth',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Header Auth',\n\t\t\t\t\t\tvalue: 'headerAuth',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'None',\n\t\t\t\t\t\tvalue: 'none',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'OAuth1',\n\t\t\t\t\t\tvalue: 'oAuth1',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'OAuth2',\n\t\t\t\t\t\tvalue: 'oAuth2',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Query Auth',\n\t\t\t\t\t\tvalue: 'queryAuth',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'none',\n\t\t\t\tdescription: 'The way to authenticate',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'HTTP Request Method',\n\t\t\t\tname: 'requestMethod',\n\t\t\t\ttype: 'options',\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'GET',\n\t\t\t\t\t\tvalue: 'GET',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'POST',\n\t\t\t\t\t\tvalue: 'POST',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'POST',\n\t\t\t\tdescription: 'The underlying HTTP request method to use',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Endpoint',\n\t\t\t\tname: 'endpoint',\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: '',\n\t\t\t\tplaceholder: 'http://example.com/graphql',\n\t\t\t\tdescription: 'The GraphQL endpoint',\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Ignore SSL Issues (Insecure)',\n\t\t\t\tname: 'allowUnauthorizedCerts',\n\t\t\t\ttype: 'boolean',\n\t\t\t\tdefault: false,\n\t\t\t\t// eslint-disable-next-line n8n-nodes-base/node-param-description-wrong-for-ignore-ssl-issues\n\t\t\t\tdescription:\n\t\t\t\t\t'Whether to download the response even if SSL certificate validation is not possible',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Request Format',\n\t\t\t\tname: 'requestFormat',\n\t\t\t\ttype: 'options',\n\t\t\t\trequired: true,\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'GraphQL (Raw)',\n\t\t\t\t\t\tvalue: 'graphql',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'JSON',\n\t\t\t\t\t\tvalue: 'json',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\trequestMethod: ['POST'],\n\t\t\t\t\t\t'@version': [1],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdefault: 'graphql',\n\t\t\t\tdescription: 'The format for the query payload',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Request Format',\n\t\t\t\tname: 'requestFormat',\n\t\t\t\ttype: 'options',\n\t\t\t\trequired: true,\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'JSON (Recommended)',\n\t\t\t\t\t\tvalue: 'json',\n\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t'JSON object with query, variables, and operationName properties. The standard and most widely supported format for GraphQL requests.',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'GraphQL (Raw)',\n\t\t\t\t\t\tvalue: 'graphql',\n\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t'Raw GraphQL query string. Not all servers support this format. Use JSON for better compatibility.',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\trequestMethod: ['POST'],\n\t\t\t\t\t\t'@version': [{ _cnd: { gte: 1.1 } }],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdefault: 'json',\n\t\t\t\tdescription: 'The request format for the query payload',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Query',\n\t\t\t\tname: 'query',\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: '',\n\t\t\t\tdescription: 'GraphQL query',\n\t\t\t\trequired: true,\n\t\t\t\ttypeOptions: {\n\t\t\t\t\trows: 6,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Variables',\n\t\t\t\tname: 'variables',\n\t\t\t\ttype: 'json',\n\t\t\t\tdefault: '',\n\t\t\t\tdescription: 'Query variables as JSON object',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\trequestFormat: ['json'],\n\t\t\t\t\t\trequestMethod: ['POST'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Operation Name',\n\t\t\t\tname: 'operationName',\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: '',\n\t\t\t\tdescription: 'Name of operation to execute',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\trequestFormat: ['json'],\n\t\t\t\t\t\trequestMethod: ['POST'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Response Format',\n\t\t\t\tname: 'responseFormat',\n\t\t\t\ttype: 'options',\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'JSON',\n\t\t\t\t\t\tvalue: 'json',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'String',\n\t\t\t\t\t\tvalue: 'string',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'json',\n\t\t\t\tdescription: 'The format in which the data gets returned from the URL',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Response Data Property Name',\n\t\t\t\tname: 'dataPropertyName',\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: 'data',\n\t\t\t\trequired: true,\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tresponseFormat: ['string'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdescription: 'Name of the property to which to write the response data',\n\t\t\t},\n\n\t\t\t// Header Parameters\n\t\t\t{\n\t\t\t\tdisplayName: 'Headers',\n\t\t\t\tname: 'headerParametersUi',\n\t\t\t\tplaceholder: 'Add Header',\n\t\t\t\ttype: 'fixedCollection',\n\t\t\t\ttypeOptions: {\n\t\t\t\t\tmultipleValues: true,\n\t\t\t\t},\n\t\t\t\tdescription: 'The headers to send',\n\t\t\t\tdefault: {},\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'parameter',\n\t\t\t\t\t\tdisplayName: 'Header',\n\t\t\t\t\t\tvalues: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdisplayName: 'Name',\n\t\t\t\t\t\t\t\tname: 'name',\n\t\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\t\t\tdescription: 'Name of the header',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdisplayName: 'Value',\n\t\t\t\t\t\t\t\tname: 'value',\n\t\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\t\t\tdescription: 'Value to set for the header',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t],\n\t};\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t\tconst items = this.getInputData();\n\t\tlet httpBasicAuth;\n\t\tlet httpDigestAuth;\n\t\tlet httpCustomAuth;\n\t\tlet httpHeaderAuth;\n\t\tlet httpQueryAuth;\n\t\tlet oAuth1Api;\n\t\tlet oAuth2Api;\n\n\t\ttry {\n\t\t\thttpBasicAuth = await this.getCredentials('httpBasicAuth');\n\t\t} catch (error) {\n\t\t\t// Do nothing\n\t\t}\n\t\ttry {\n\t\t\thttpCustomAuth = await this.getCredentials('httpCustomAuth');\n\t\t} catch (error) {\n\t\t\t// Do nothing\n\t\t}\n\t\ttry {\n\t\t\thttpDigestAuth = await this.getCredentials('httpDigestAuth');\n\t\t} catch (error) {\n\t\t\t// Do nothing\n\t\t}\n\t\ttry {\n\t\t\thttpHeaderAuth = await this.getCredentials('httpHeaderAuth');\n\t\t} catch (error) {\n\t\t\t// Do nothing\n\t\t}\n\t\ttry {\n\t\t\thttpQueryAuth = await this.getCredentials('httpQueryAuth');\n\t\t} catch (error) {\n\t\t\t// Do nothing\n\t\t}\n\t\ttry {\n\t\t\toAuth1Api = await this.getCredentials('oAuth1Api');\n\t\t} catch (error) {\n\t\t\t// Do nothing\n\t\t}\n\t\ttry {\n\t\t\toAuth2Api = await this.getCredentials('oAuth2Api');\n\t\t} catch (error) {\n\t\t\t// Do nothing\n\t\t}\n\n\t\tlet requestOptions: IRequestOptions;\n\n\t\tconst returnItems: INodeExecutionData[] = [];\n\t\tfor (let itemIndex = 0; itemIndex < items.length; itemIndex++) {\n\t\t\ttry {\n\t\t\t\tconst requestMethod = this.getNodeParameter(\n\t\t\t\t\t'requestMethod',\n\t\t\t\t\titemIndex,\n\t\t\t\t\t'POST',\n\t\t\t\t) as IHttpRequestMethods;\n\t\t\t\tconst endpoint = this.getNodeParameter('endpoint', itemIndex, '') as string;\n\t\t\t\tconst requestFormat = this.getNodeParameter('requestFormat', itemIndex, 'json') as string;\n\t\t\t\tconst responseFormat = this.getNodeParameter('responseFormat', 0) as string;\n\t\t\t\tconst { parameter }: { parameter?: Array<{ name: string; value: string }> } =\n\t\t\t\t\tthis.getNodeParameter('headerParametersUi', itemIndex, {}) as IDataObject;\n\t\t\t\tconst headerParameters = (parameter || []).reduce(\n\t\t\t\t\t(result, item) => ({\n\t\t\t\t\t\t...result,\n\t\t\t\t\t\t[item.name]: item.value,\n\t\t\t\t\t}),\n\t\t\t\t\t{},\n\t\t\t\t);\n\n\t\t\t\trequestOptions = {\n\t\t\t\t\theaders: {\n\t\t\t\t\t\t'content-type': `application/${requestFormat}`,\n\t\t\t\t\t\t...headerParameters,\n\t\t\t\t\t},\n\t\t\t\t\tmethod: requestMethod,\n\t\t\t\t\turi: endpoint,\n\t\t\t\t\tsimple: false,\n\t\t\t\t\trejectUnauthorized: !this.getNodeParameter('allowUnauthorizedCerts', itemIndex, false),\n\t\t\t\t};\n\n\t\t\t\t// Add credentials if any are set\n\t\t\t\tif (httpBasicAuth !== undefined) {\n\t\t\t\t\trequestOptions.auth = {\n\t\t\t\t\t\tuser: httpBasicAuth.user as string,\n\t\t\t\t\t\tpass: httpBasicAuth.password as string,\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tif (httpCustomAuth !== undefined) {\n\t\t\t\t\tconst customAuth = jsonParse<IRequestOptionsSimplified>(\n\t\t\t\t\t\t(httpCustomAuth.json as string) || '{}',\n\t\t\t\t\t\t{ errorMessage: 'Invalid Custom Auth JSON' },\n\t\t\t\t\t);\n\t\t\t\t\tif (customAuth.headers) {\n\t\t\t\t\t\trequestOptions.headers = { ...requestOptions.headers, ...customAuth.headers };\n\t\t\t\t\t}\n\t\t\t\t\tif (customAuth.body) {\n\t\t\t\t\t\trequestOptions.body = { ...requestOptions.body, ...customAuth.body };\n\t\t\t\t\t}\n\t\t\t\t\tif (customAuth.qs) {\n\t\t\t\t\t\trequestOptions.qs = { ...requestOptions.qs, ...customAuth.qs };\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (httpHeaderAuth !== undefined) {\n\t\t\t\t\trequestOptions.headers![httpHeaderAuth.name as string] = httpHeaderAuth.value;\n\t\t\t\t}\n\t\t\t\tif (httpQueryAuth !== undefined) {\n\t\t\t\t\tif (!requestOptions.qs) {\n\t\t\t\t\t\trequestOptions.qs = {};\n\t\t\t\t\t}\n\t\t\t\t\trequestOptions.qs[httpQueryAuth.name as string] = httpQueryAuth.value;\n\t\t\t\t}\n\t\t\t\tif (httpDigestAuth !== undefined) {\n\t\t\t\t\trequestOptions.auth = {\n\t\t\t\t\t\tuser: httpDigestAuth.user as string,\n\t\t\t\t\t\tpass: httpDigestAuth.password as string,\n\t\t\t\t\t\tsendImmediately: false,\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\tconst gqlQuery = this.getNodeParameter('query', itemIndex, '') as string;\n\t\t\t\tif (requestMethod === 'GET') {\n\t\t\t\t\trequestOptions.qs = requestOptions.qs ?? {};\n\t\t\t\t\trequestOptions.qs.query = gqlQuery;\n\t\t\t\t}\n\n\t\t\t\tif (requestFormat === 'json') {\n\t\t\t\t\tconst variables = this.getNodeParameter('variables', itemIndex, {});\n\n\t\t\t\t\tlet parsedVariables;\n\t\t\t\t\tif (typeof variables === 'string') {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tparsedVariables = JSON.parse(variables || '{}');\n\t\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t\t\t`Using variables failed:\\n${variables}\\n\\nWith error message:\\n${error}`,\n\t\t\t\t\t\t\t\t{ itemIndex },\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (typeof variables === 'object' && variables !== null) {\n\t\t\t\t\t\tparsedVariables = variables;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t\t`Using variables failed:\\n${variables}\\n\\nGraphQL variables should be either an object or a string.`,\n\t\t\t\t\t\t\t{ itemIndex },\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst jsonBody = {\n\t\t\t\t\t\t...requestOptions.body,\n\t\t\t\t\t\tquery: gqlQuery,\n\t\t\t\t\t\tvariables: parsedVariables,\n\t\t\t\t\t\toperationName: this.getNodeParameter('operationName', itemIndex, '') as string,\n\t\t\t\t\t};\n\n\t\t\t\t\tif (jsonBody.operationName === '') {\n\t\t\t\t\t\tjsonBody.operationName = null;\n\t\t\t\t\t}\n\n\t\t\t\t\trequestOptions.json = true;\n\t\t\t\t\trequestOptions.body = jsonBody;\n\t\t\t\t} else {\n\t\t\t\t\trequestOptions.body = gqlQuery;\n\t\t\t\t}\n\n\t\t\t\tlet response;\n\t\t\t\t// Now that the options are all set make the actual http request\n\t\t\t\tif (oAuth1Api !== undefined) {\n\t\t\t\t\tresponse = await this.helpers.requestOAuth1.call(this, 'oAuth1Api', requestOptions);\n\t\t\t\t} else if (oAuth2Api !== undefined) {\n\t\t\t\t\tresponse = await this.helpers.requestOAuth2.call(this, 'oAuth2Api', requestOptions, {\n\t\t\t\t\t\ttokenType: 'Bearer',\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tresponse = await this.helpers.request(requestOptions);\n\t\t\t\t}\n\t\t\t\tif (responseFormat === 'string') {\n\t\t\t\t\tconst dataPropertyName = this.getNodeParameter('dataPropertyName', 0);\n\t\t\t\t\treturnItems.push({\n\t\t\t\t\t\tjson: {\n\t\t\t\t\t\t\t[dataPropertyName]: response,\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tif (typeof response === 'string') {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tresponse = JSON.parse(response);\n\t\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t\t\t'Response body is not valid JSON. Change \"Response Format\" to \"String\"',\n\t\t\t\t\t\t\t\t{ itemIndex },\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\tthis.helpers.returnJsonArray(response as IDataObject),\n\t\t\t\t\t\t{ itemData: { item: itemIndex } },\n\t\t\t\t\t);\n\t\t\t\t\treturnItems.push(...executionData);\n\t\t\t\t}\n\n\t\t\t\t// parse error string messages\n\t\t\t\tif (typeof response === 'string' && response.startsWith('{\"errors\":')) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst errorResponse = JSON.parse(response) as IDataObject;\n\t\t\t\t\t\tif (Array.isArray(errorResponse.errors)) {\n\t\t\t\t\t\t\tresponse = errorResponse;\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (e) {}\n\t\t\t\t}\n\t\t\t\t// throw from response object.errors[]\n\t\t\t\tif (typeof response === 'object' && response.errors) {\n\t\t\t\t\tconst message =\n\t\t\t\t\t\tresponse.errors?.map((error: IDataObject) => error.message).join(', ') ||\n\t\t\t\t\t\t'Unexpected error';\n\t\t\t\t\tthrow new NodeApiError(this.getNode(), response.errors as JsonObject, { message });\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tif (!this.continueOnFail()) {\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\n\t\t\t\tconst errorData = this.helpers.returnJsonArray({\n\t\t\t\t\terror: error.message,\n\t\t\t\t});\n\t\t\t\tconst exectionErrorWithMetaData = this.helpers.constructExecutionMetaData(errorData, {\n\t\t\t\t\titemData: { item: itemIndex },\n\t\t\t\t});\n\t\t\t\treturnItems.push(...exectionErrorWithMetaData);\n\t\t\t}\n\t\t}\n\t\treturn [returnItems];\n\t}\n}\n"],"mappings":"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","names":[]}