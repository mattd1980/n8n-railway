{"version":3,"sources":["../../../nodes/DeepL/DeepL.node.ts"],"sourcesContent":["import type {\n\tIExecuteFunctions,\n\tIDataObject,\n\tILoadOptionsFunctions,\n\tINodeExecutionData,\n\tINodePropertyOptions,\n\tINodeType,\n\tINodeTypeDescription,\n} from 'n8n-workflow';\nimport { NodeConnectionTypes } from 'n8n-workflow';\n\nimport { deepLApiRequest } from './GenericFunctions';\nimport { textOperations } from './TextDescription';\n\nexport class DeepL implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'DeepL',\n\t\tname: 'deepL',\n\t\ticon: { light: 'file:deepl.svg', dark: 'file:deepL.dark.svg' },\n\t\tgroup: ['input', 'output'],\n\t\tversion: 1,\n\t\tdescription: 'Translate data using DeepL',\n\t\tsubtitle: '={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}',\n\t\tdefaults: {\n\t\t\tname: 'DeepL',\n\t\t},\n\t\tusableAsTool: true,\n\t\tinputs: [NodeConnectionTypes.Main],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tcredentials: [\n\t\t\t{\n\t\t\t\tname: 'deepLApi',\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Resource',\n\t\t\t\tname: 'resource',\n\t\t\t\ttype: 'options',\n\t\t\t\tnoDataExpression: true,\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Language',\n\t\t\t\t\t\tvalue: 'language',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'language',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Operation',\n\t\t\t\tname: 'operation',\n\t\t\t\ttype: 'options',\n\t\t\t\tnoDataExpression: true,\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tresource: ['language'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Translate',\n\t\t\t\t\t\tvalue: 'translate',\n\t\t\t\t\t\tdescription: 'Translate data',\n\t\t\t\t\t\taction: 'Translate a language',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'translate',\n\t\t\t},\n\t\t\t...textOperations,\n\t\t],\n\t};\n\n\tmethods = {\n\t\tloadOptions: {\n\t\t\tasync getLanguages(this: ILoadOptionsFunctions) {\n\t\t\t\tconst returnData: INodePropertyOptions[] = [];\n\t\t\t\tconst languages = await deepLApiRequest.call(\n\t\t\t\t\tthis,\n\t\t\t\t\t'GET',\n\t\t\t\t\t'/languages',\n\t\t\t\t\t{},\n\t\t\t\t\t{ type: 'target' },\n\t\t\t\t);\n\t\t\t\tfor (const language of languages) {\n\t\t\t\t\treturnData.push({\n\t\t\t\t\t\tname: language.name,\n\t\t\t\t\t\tvalue: language.language,\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\treturnData.sort((a, b) => {\n\t\t\t\t\tif (a.name < b.name) {\n\t\t\t\t\t\treturn -1;\n\t\t\t\t\t}\n\t\t\t\t\tif (a.name > b.name) {\n\t\t\t\t\t\treturn 1;\n\t\t\t\t\t}\n\t\t\t\t\treturn 0;\n\t\t\t\t});\n\n\t\t\t\treturn returnData;\n\t\t\t},\n\t\t},\n\t};\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t\tconst items = this.getInputData();\n\t\tconst length = items.length;\n\n\t\tconst responseData: INodeExecutionData[] = [];\n\n\t\tfor (let i = 0; i < length; i++) {\n\t\t\ttry {\n\t\t\t\tconst resource = this.getNodeParameter('resource', i);\n\t\t\t\tconst operation = this.getNodeParameter('operation', i);\n\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i);\n\t\t\t\tif (resource === 'language') {\n\t\t\t\t\tif (operation === 'translate') {\n\t\t\t\t\t\tlet body: IDataObject = {};\n\t\t\t\t\t\tconst text = this.getNodeParameter('text', i) as string;\n\t\t\t\t\t\tconst translateTo = this.getNodeParameter('translateTo', i) as string;\n\t\t\t\t\t\tbody = { target_lang: translateTo, text } as IDataObject;\n\n\t\t\t\t\t\tif (additionalFields.sourceLang !== undefined) {\n\t\t\t\t\t\t\tbody.source_lang = ['EN-GB', 'EN-US'].includes(additionalFields.sourceLang as string)\n\t\t\t\t\t\t\t\t? 'EN'\n\t\t\t\t\t\t\t\t: additionalFields.sourceLang;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst { translations } = await deepLApiRequest.call(this, 'GET', '/translate', body);\n\t\t\t\t\t\tconst [translation] = translations;\n\t\t\t\t\t\tconst translationJsonArray = this.helpers.returnJsonArray(translation as IDataObject[]);\n\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(translationJsonArray, {\n\t\t\t\t\t\t\titemData: { item: i },\n\t\t\t\t\t\t});\n\t\t\t\t\t\tresponseData.push(...executionData);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\tconst executionErrorData = {\n\t\t\t\t\t\tjson: {} as IDataObject,\n\t\t\t\t\t\terror: error.message,\n\t\t\t\t\t\titemIndex: i,\n\t\t\t\t\t};\n\t\t\t\t\tresponseData.push(executionErrorData as INodeExecutionData);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\n\t\treturn [responseData];\n\t}\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AASA,0BAAoC;AAEpC,8BAAgC;AAChC,6BAA+B;AAExB,MAAM,MAA2B;AAAA,EAAjC;AACN,uBAAoC;AAAA,MACnC,aAAa;AAAA,MACb,MAAM;AAAA,MACN,MAAM,EAAE,OAAO,kBAAkB,MAAM,sBAAsB;AAAA,MAC7D,OAAO,CAAC,SAAS,QAAQ;AAAA,MACzB,SAAS;AAAA,MACT,aAAa;AAAA,MACb,UAAU;AAAA,MACV,UAAU;AAAA,QACT,MAAM;AAAA,MACP;AAAA,MACA,cAAc;AAAA,MACd,QAAQ,CAAC,wCAAoB,IAAI;AAAA,MACjC,SAAS,CAAC,wCAAoB,IAAI;AAAA,MAClC,aAAa;AAAA,QACZ;AAAA,UACC,MAAM;AAAA,UACN,UAAU;AAAA,QACX;AAAA,MACD;AAAA,MACA,YAAY;AAAA,QACX;AAAA,UACC,aAAa;AAAA,UACb,MAAM;AAAA,UACN,MAAM;AAAA,UACN,kBAAkB;AAAA,UAClB,SAAS;AAAA,YACR;AAAA,cACC,MAAM;AAAA,cACN,OAAO;AAAA,YACR;AAAA,UACD;AAAA,UACA,SAAS;AAAA,QACV;AAAA,QACA;AAAA,UACC,aAAa;AAAA,UACb,MAAM;AAAA,UACN,MAAM;AAAA,UACN,kBAAkB;AAAA,UAClB,gBAAgB;AAAA,YACf,MAAM;AAAA,cACL,UAAU,CAAC,UAAU;AAAA,YACtB;AAAA,UACD;AAAA,UACA,SAAS;AAAA,YACR;AAAA,cACC,MAAM;AAAA,cACN,OAAO;AAAA,cACP,aAAa;AAAA,cACb,QAAQ;AAAA,YACT;AAAA,UACD;AAAA,UACA,SAAS;AAAA,QACV;AAAA,QACA,GAAG;AAAA,MACJ;AAAA,IACD;AAEA,mBAAU;AAAA,MACT,aAAa;AAAA,QACZ,MAAM,eAA0C;AAC/C,gBAAM,aAAqC,CAAC;AAC5C,gBAAM,YAAY,MAAM,wCAAgB;AAAA,YACvC;AAAA,YACA;AAAA,YACA;AAAA,YACA,CAAC;AAAA,YACD,EAAE,MAAM,SAAS;AAAA,UAClB;AACA,qBAAW,YAAY,WAAW;AACjC,uBAAW,KAAK;AAAA,cACf,MAAM,SAAS;AAAA,cACf,OAAO,SAAS;AAAA,YACjB,CAAC;AAAA,UACF;AAEA,qBAAW,KAAK,CAAC,GAAG,MAAM;AACzB,gBAAI,EAAE,OAAO,EAAE,MAAM;AACpB,qBAAO;AAAA,YACR;AACA,gBAAI,EAAE,OAAO,EAAE,MAAM;AACpB,qBAAO;AAAA,YACR;AACA,mBAAO;AAAA,UACR,CAAC;AAED,iBAAO;AAAA,QACR;AAAA,MACD;AAAA,IACD;AAAA;AAAA,EAEA,MAAM,UAAkE;AACvE,UAAM,QAAQ,KAAK,aAAa;AAChC,UAAM,SAAS,MAAM;AAErB,UAAM,eAAqC,CAAC;AAE5C,aAAS,IAAI,GAAG,IAAI,QAAQ,KAAK;AAChC,UAAI;AACH,cAAM,WAAW,KAAK,iBAAiB,YAAY,CAAC;AACpD,cAAM,YAAY,KAAK,iBAAiB,aAAa,CAAC;AACtD,cAAM,mBAAmB,KAAK,iBAAiB,oBAAoB,CAAC;AACpE,YAAI,aAAa,YAAY;AAC5B,cAAI,cAAc,aAAa;AAC9B,gBAAI,OAAoB,CAAC;AACzB,kBAAM,OAAO,KAAK,iBAAiB,QAAQ,CAAC;AAC5C,kBAAM,cAAc,KAAK,iBAAiB,eAAe,CAAC;AAC1D,mBAAO,EAAE,aAAa,aAAa,KAAK;AAExC,gBAAI,iBAAiB,eAAe,QAAW;AAC9C,mBAAK,cAAc,CAAC,SAAS,OAAO,EAAE,SAAS,iBAAiB,UAAoB,IACjF,OACA,iBAAiB;AAAA,YACrB;AAEA,kBAAM,EAAE,aAAa,IAAI,MAAM,wCAAgB,KAAK,MAAM,OAAO,cAAc,IAAI;AACnF,kBAAM,CAAC,WAAW,IAAI;AACtB,kBAAM,uBAAuB,KAAK,QAAQ,gBAAgB,WAA4B;AACtF,kBAAM,gBAAgB,KAAK,QAAQ,2BAA2B,sBAAsB;AAAA,cACnF,UAAU,EAAE,MAAM,EAAE;AAAA,YACrB,CAAC;AACD,yBAAa,KAAK,GAAG,aAAa;AAAA,UACnC;AAAA,QACD;AAAA,MACD,SAAS,OAAO;AACf,YAAI,KAAK,eAAe,GAAG;AAC1B,gBAAM,qBAAqB;AAAA,YAC1B,MAAM,CAAC;AAAA,YACP,OAAO,MAAM;AAAA,YACb,WAAW;AAAA,UACZ;AACA,uBAAa,KAAK,kBAAwC;AAC1D;AAAA,QACD;AACA,cAAM;AAAA,MACP;AAAA,IACD;AAEA,WAAO,CAAC,YAAY;AAAA,EACrB;AACD;","names":[]}