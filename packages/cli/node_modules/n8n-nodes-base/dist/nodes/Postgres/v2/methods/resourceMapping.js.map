{"version":3,"sources":["../../../../../nodes/Postgres/v2/methods/resourceMapping.ts"],"sourcesContent":["import type { ILoadOptionsFunctions, ResourceMapperFields, FieldType } from 'n8n-workflow';\n\nimport { configurePostgres } from '../../transport';\nimport type { PostgresNodeCredentials } from '../helpers/interfaces';\nimport { getEnumValues, getEnums, getTableSchema, uniqueColumns } from '../helpers/utils';\n\nconst fieldTypeMapping: Partial<Record<FieldType, string[]>> = {\n\tstring: ['text', 'varchar', 'character varying', 'character', 'char'],\n\tnumber: [\n\t\t'integer',\n\t\t'smallint',\n\t\t'bigint',\n\t\t'decimal',\n\t\t'numeric',\n\t\t'real',\n\t\t'double precision',\n\t\t'smallserial',\n\t\t'serial',\n\t\t'bigserial',\n\t],\n\tboolean: ['boolean'],\n\tdateTime: [\n\t\t'timestamp',\n\t\t'date',\n\t\t'timestampz',\n\t\t'timestamp without time zone',\n\t\t'timestamp with time zone',\n\t],\n\ttime: ['time', 'time without time zone', 'time with time zone'],\n\tobject: ['json', 'jsonb'],\n\toptions: ['enum', 'USER-DEFINED'],\n\tarray: ['ARRAY'],\n};\n\nfunction mapPostgresType(postgresType: string): FieldType {\n\tlet mappedType: FieldType = 'string';\n\n\tfor (const t of Object.keys(fieldTypeMapping)) {\n\t\tconst postgresTypes = fieldTypeMapping[t as FieldType];\n\t\tif (postgresTypes?.includes(postgresType)) {\n\t\t\tmappedType = t as FieldType;\n\t\t}\n\t}\n\treturn mappedType;\n}\n\nexport async function getMappingColumns(\n\tthis: ILoadOptionsFunctions,\n): Promise<ResourceMapperFields> {\n\tconst credentials = await this.getCredentials<PostgresNodeCredentials>('postgres');\n\n\tconst { db } = await configurePostgres.call(this, credentials);\n\n\tconst schema = this.getNodeParameter('schema', 0, {\n\t\textractValue: true,\n\t}) as string;\n\n\tconst table = this.getNodeParameter('table', 0, {\n\t\textractValue: true,\n\t}) as string;\n\n\tconst operation = this.getNodeParameter('operation', 0, {\n\t\textractValue: true,\n\t}) as string;\n\n\tconst columns = await getTableSchema(db, schema, table, { getColumnsForResourceMapper: true });\n\tconst unique = operation === 'upsert' ? await uniqueColumns(db, table, schema) : [];\n\tconst enumInfo = await getEnums(db);\n\tconst fields = await Promise.all(\n\t\tcolumns.map(async (col) => {\n\t\t\tconst canBeUsedToMatch =\n\t\t\t\toperation === 'upsert' ? unique.some((u) => u.attname === col.column_name) : true;\n\t\t\tconst type = mapPostgresType(col.data_type);\n\t\t\tconst options =\n\t\t\t\ttype === 'options' ? getEnumValues(enumInfo, col.udt_name as string) : undefined;\n\t\t\tconst hasDefault = Boolean(col.column_default);\n\t\t\tconst isGenerated =\n\t\t\t\tcol.is_generated === 'ALWAYS' ||\n\t\t\t\t['ALWAYS', 'BY DEFAULT'].includes(col.identity_generation ?? '');\n\t\t\tconst nullable = col.is_nullable === 'YES';\n\t\t\treturn {\n\t\t\t\tid: col.column_name,\n\t\t\t\tdisplayName: col.column_name,\n\t\t\t\trequired: !nullable && !hasDefault && !isGenerated,\n\t\t\t\tdefaultMatch: (col.column_name === 'id' && canBeUsedToMatch) || false,\n\t\t\t\tdisplay: true,\n\t\t\t\ttype,\n\t\t\t\tcanBeUsedToMatch,\n\t\t\t\toptions,\n\t\t\t};\n\t\t}),\n\t);\n\treturn { fields };\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,uBAAkC;AAElC,mBAAuE;AAEvE,MAAM,mBAAyD;AAAA,EAC9D,QAAQ,CAAC,QAAQ,WAAW,qBAAqB,aAAa,MAAM;AAAA,EACpE,QAAQ;AAAA,IACP;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACD;AAAA,EACA,SAAS,CAAC,SAAS;AAAA,EACnB,UAAU;AAAA,IACT;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACD;AAAA,EACA,MAAM,CAAC,QAAQ,0BAA0B,qBAAqB;AAAA,EAC9D,QAAQ,CAAC,QAAQ,OAAO;AAAA,EACxB,SAAS,CAAC,QAAQ,cAAc;AAAA,EAChC,OAAO,CAAC,OAAO;AAChB;AAEA,SAAS,gBAAgB,cAAiC;AACzD,MAAI,aAAwB;AAE5B,aAAW,KAAK,OAAO,KAAK,gBAAgB,GAAG;AAC9C,UAAM,gBAAgB,iBAAiB,CAAc;AACrD,QAAI,eAAe,SAAS,YAAY,GAAG;AAC1C,mBAAa;AAAA,IACd;AAAA,EACD;AACA,SAAO;AACR;AAEA,eAAsB,oBAEW;AAChC,QAAM,cAAc,MAAM,KAAK,eAAwC,UAAU;AAEjF,QAAM,EAAE,GAAG,IAAI,MAAM,mCAAkB,KAAK,MAAM,WAAW;AAE7D,QAAM,SAAS,KAAK,iBAAiB,UAAU,GAAG;AAAA,IACjD,cAAc;AAAA,EACf,CAAC;AAED,QAAM,QAAQ,KAAK,iBAAiB,SAAS,GAAG;AAAA,IAC/C,cAAc;AAAA,EACf,CAAC;AAED,QAAM,YAAY,KAAK,iBAAiB,aAAa,GAAG;AAAA,IACvD,cAAc;AAAA,EACf,CAAC;AAED,QAAM,UAAU,UAAM,6BAAe,IAAI,QAAQ,OAAO,EAAE,6BAA6B,KAAK,CAAC;AAC7F,QAAM,SAAS,cAAc,WAAW,UAAM,4BAAc,IAAI,OAAO,MAAM,IAAI,CAAC;AAClF,QAAM,WAAW,UAAM,uBAAS,EAAE;AAClC,QAAM,SAAS,MAAM,QAAQ;AAAA,IAC5B,QAAQ,IAAI,OAAO,QAAQ;AAC1B,YAAM,mBACL,cAAc,WAAW,OAAO,KAAK,CAAC,MAAM,EAAE,YAAY,IAAI,WAAW,IAAI;AAC9E,YAAM,OAAO,gBAAgB,IAAI,SAAS;AAC1C,YAAM,UACL,SAAS,gBAAY,4BAAc,UAAU,IAAI,QAAkB,IAAI;AACxE,YAAM,aAAa,QAAQ,IAAI,cAAc;AAC7C,YAAM,cACL,IAAI,iBAAiB,YACrB,CAAC,UAAU,YAAY,EAAE,SAAS,IAAI,uBAAuB,EAAE;AAChE,YAAM,WAAW,IAAI,gBAAgB;AACrC,aAAO;AAAA,QACN,IAAI,IAAI;AAAA,QACR,aAAa,IAAI;AAAA,QACjB,UAAU,CAAC,YAAY,CAAC,cAAc,CAAC;AAAA,QACvC,cAAe,IAAI,gBAAgB,QAAQ,oBAAqB;AAAA,QAChE,SAAS;AAAA,QACT;AAAA,QACA;AAAA,QACA;AAAA,MACD;AAAA,IACD,CAAC;AAAA,EACF;AACA,SAAO,EAAE,OAAO;AACjB;","names":[]}