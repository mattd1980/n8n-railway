{"version":3,"sources":["../../../../../nodes/Postgres/v2/methods/credentialTest.ts"],"sourcesContent":["import type {\n\tICredentialsDecrypted,\n\tICredentialTestFunctions,\n\tINodeCredentialTestResult,\n} from 'n8n-workflow';\n\nimport { configurePostgres } from '../../transport';\nimport type { PgpConnection, PostgresNodeCredentials } from '../helpers/interfaces';\n\nexport async function postgresConnectionTest(\n\tthis: ICredentialTestFunctions,\n\tcredential: ICredentialsDecrypted,\n): Promise<INodeCredentialTestResult> {\n\tconst credentials = credential.data as PostgresNodeCredentials;\n\n\tlet connection: PgpConnection | undefined;\n\n\ttry {\n\t\tconst { db } = await configurePostgres.call(this, credentials, {});\n\n\t\tconnection = await db.connect();\n\t} catch (error) {\n\t\tlet message = error.message as string;\n\n\t\tif (error.message.includes('ECONNREFUSED')) {\n\t\t\tmessage = 'Connection refused';\n\t\t}\n\n\t\tif (error.message.includes('ENOTFOUND')) {\n\t\t\tmessage = 'Host not found, please check your host name';\n\t\t}\n\n\t\tif (error.message.includes('ETIMEDOUT')) {\n\t\t\tmessage = 'Connection timed out';\n\t\t}\n\n\t\treturn {\n\t\t\tstatus: 'Error',\n\t\t\tmessage,\n\t\t};\n\t} finally {\n\t\tif (connection) {\n\t\t\tawait connection.done();\n\t\t}\n\t}\n\treturn {\n\t\tstatus: 'OK',\n\t\tmessage: 'Connection successful!',\n\t};\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA,uBAAkC;AAGlC,eAAsB,uBAErB,YACqC;AACrC,QAAM,cAAc,WAAW;AAE/B,MAAI;AAEJ,MAAI;AACH,UAAM,EAAE,GAAG,IAAI,MAAM,mCAAkB,KAAK,MAAM,aAAa,CAAC,CAAC;AAEjE,iBAAa,MAAM,GAAG,QAAQ;AAAA,EAC/B,SAAS,OAAO;AACf,QAAI,UAAU,MAAM;AAEpB,QAAI,MAAM,QAAQ,SAAS,cAAc,GAAG;AAC3C,gBAAU;AAAA,IACX;AAEA,QAAI,MAAM,QAAQ,SAAS,WAAW,GAAG;AACxC,gBAAU;AAAA,IACX;AAEA,QAAI,MAAM,QAAQ,SAAS,WAAW,GAAG;AACxC,gBAAU;AAAA,IACX;AAEA,WAAO;AAAA,MACN,QAAQ;AAAA,MACR;AAAA,IACD;AAAA,EACD,UAAE;AACD,QAAI,YAAY;AACf,YAAM,WAAW,KAAK;AAAA,IACvB;AAAA,EACD;AACA,SAAO;AAAA,IACN,QAAQ;AAAA,IACR,SAAS;AAAA,EACV;AACD;","names":[]}