{"version":3,"sources":["../../../../../../nodes/Postgres/v2/actions/database/insert.operation.ts"],"sourcesContent":["import {\n\ttype IDataObject,\n\ttype IExecuteFunctions,\n\ttype INodeExecutionData,\n\ttype INodeProperties,\n} from 'n8n-workflow';\n\nimport { updateDisplayOptions } from '@utils/utilities';\n\nimport type {\n\tPgpClient,\n\tPgpDatabase,\n\tPostgresNodeOptions,\n\tQueriesRunner,\n\tQueryValues,\n\tQueryWithValues,\n} from '../../helpers/interfaces';\nimport {\n\taddReturning,\n\tcheckItemAgainstSchema,\n\tconfigureTableSchemaUpdater,\n\tgetTableSchema,\n\tprepareItem,\n\tconvertArraysToPostgresFormat,\n\treplaceEmptyStringsByNulls,\n\thasJsonDataTypeInSchema,\n\tconvertValuesToJsonWithPgp,\n} from '../../helpers/utils';\nimport { optionsCollection } from '../common.descriptions';\n\nconst properties: INodeProperties[] = [\n\t{\n\t\tdisplayName: 'Data Mode',\n\t\tname: 'dataMode',\n\t\ttype: 'options',\n\t\toptions: [\n\t\t\t{\n\t\t\t\tname: 'Auto-Map Input Data to Columns',\n\t\t\t\tvalue: 'autoMapInputData',\n\t\t\t\tdescription: 'Use when node input properties names exactly match the table column names',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Map Each Column Manually',\n\t\t\t\tvalue: 'defineBelow',\n\t\t\t\tdescription: 'Set the value for each destination column manually',\n\t\t\t},\n\t\t],\n\t\tdefault: 'autoMapInputData',\n\t\tdescription:\n\t\t\t'Whether to map node input properties and the table data automatically or manually',\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\t'@version': [2, 2.1],\n\t\t\t},\n\t\t},\n\t},\n\t{\n\t\tdisplayName: `\n\t\tIn this mode, make sure incoming data fields are named the same as the columns in your table. If needed, use an 'Edit Fields' node before this node to change the field names.\n\t\t`,\n\t\tname: 'notice',\n\t\ttype: 'notice',\n\t\tdefault: '',\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tdataMode: ['autoMapInputData'],\n\t\t\t\t'@version': [2, 2.1],\n\t\t\t},\n\t\t},\n\t},\n\t{\n\t\tdisplayName: 'Values to Send',\n\t\tname: 'valuesToSend',\n\t\tplaceholder: 'Add Value',\n\t\ttype: 'fixedCollection',\n\t\ttypeOptions: {\n\t\t\tmultipleValueButtonText: 'Add Value',\n\t\t\tmultipleValues: true,\n\t\t},\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tdataMode: ['defineBelow'],\n\t\t\t\t'@version': [2, 2.1],\n\t\t\t},\n\t\t},\n\t\tdefault: {},\n\t\toptions: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Values',\n\t\t\t\tname: 'values',\n\t\t\t\tvalues: [\n\t\t\t\t\t{\n\t\t\t\t\t\t// eslint-disable-next-line n8n-nodes-base/node-param-display-name-wrong-for-dynamic-options\n\t\t\t\t\t\tdisplayName: 'Column',\n\t\t\t\t\t\tname: 'column',\n\t\t\t\t\t\ttype: 'options',\n\t\t\t\t\t\t// eslint-disable-next-line n8n-nodes-base/node-param-description-wrong-for-dynamic-options\n\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t'Choose from the list, or specify an ID using an <a href=\"https://docs.n8n.io/code/expressions/\" target=\"_blank\">expression</a>',\n\t\t\t\t\t\ttypeOptions: {\n\t\t\t\t\t\t\tloadOptionsMethod: 'getColumns',\n\t\t\t\t\t\t\tloadOptionsDependsOn: ['schema.value', 'table.value'],\n\t\t\t\t\t\t},\n\t\t\t\t\t\tdefault: [],\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Value',\n\t\t\t\t\t\tname: 'value',\n\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t],\n\t},\n\t{\n\t\tdisplayName: 'Columns',\n\t\tname: 'columns',\n\t\ttype: 'resourceMapper',\n\t\tdefault: {\n\t\t\tmappingMode: 'defineBelow',\n\t\t\tvalue: null,\n\t\t},\n\t\tnoDataExpression: true,\n\t\trequired: true,\n\t\ttypeOptions: {\n\t\t\tloadOptionsDependsOn: ['table.value', 'operation'],\n\t\t\tresourceMapper: {\n\t\t\t\tresourceMapperMethod: 'getMappingColumns',\n\t\t\t\tmode: 'add',\n\t\t\t\tfieldWords: {\n\t\t\t\t\tsingular: 'column',\n\t\t\t\t\tplural: 'columns',\n\t\t\t\t},\n\t\t\t\taddAllFields: true,\n\t\t\t\tmultiKeyMatch: true,\n\t\t\t},\n\t\t},\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\t'@version': [{ _cnd: { gte: 2.2 } }],\n\t\t\t},\n\t\t},\n\t},\n\toptionsCollection,\n];\n\nconst displayOptions = {\n\tshow: {\n\t\tresource: ['database'],\n\t\toperation: ['insert'],\n\t},\n\thide: {\n\t\ttable: [''],\n\t},\n};\n\nexport const description = updateDisplayOptions(displayOptions, properties);\n\nexport async function execute(\n\tthis: IExecuteFunctions,\n\trunQueries: QueriesRunner,\n\titems: INodeExecutionData[],\n\tnodeOptions: PostgresNodeOptions,\n\tdb: PgpDatabase,\n\tpgp: PgpClient,\n): Promise<INodeExecutionData[]> {\n\titems = replaceEmptyStringsByNulls(items, nodeOptions.replaceEmptyStrings as boolean);\n\tconst nodeVersion = nodeOptions.nodeVersion as number;\n\n\tlet schema = this.getNodeParameter('schema', 0, undefined, {\n\t\textractValue: true,\n\t}) as string;\n\n\tlet table = this.getNodeParameter('table', 0, undefined, {\n\t\textractValue: true,\n\t}) as string;\n\n\tconst updateTableSchema = configureTableSchemaUpdater(schema, table);\n\n\tlet tableSchema = await getTableSchema(db, schema, table);\n\n\tconst queries: QueryWithValues[] = [];\n\n\tfor (let i = 0; i < items.length; i++) {\n\t\tschema = this.getNodeParameter('schema', i, undefined, {\n\t\t\textractValue: true,\n\t\t}) as string;\n\n\t\ttable = this.getNodeParameter('table', i, undefined, {\n\t\t\textractValue: true,\n\t\t}) as string;\n\n\t\tconst options = this.getNodeParameter('options', i, {});\n\n\t\tlet onConflict = '';\n\t\tif (options.skipOnConflict) {\n\t\t\tonConflict = ' ON CONFLICT DO NOTHING';\n\t\t}\n\n\t\tlet query = `INSERT INTO $1:name.$2:name($3:name) VALUES($3:csv)${onConflict}`;\n\t\tlet values: QueryValues = [schema, table];\n\n\t\tconst dataMode =\n\t\t\tnodeVersion < 2.2\n\t\t\t\t? (this.getNodeParameter('dataMode', i) as string)\n\t\t\t\t: (this.getNodeParameter('columns.mappingMode', i) as string);\n\n\t\tlet item: IDataObject = {};\n\n\t\tif (dataMode === 'autoMapInputData') {\n\t\t\titem = items[i].json;\n\t\t}\n\n\t\tif (dataMode === 'defineBelow') {\n\t\t\tconst valuesToSend =\n\t\t\t\tnodeVersion < 2.2\n\t\t\t\t\t? ((this.getNodeParameter('valuesToSend', i, []) as IDataObject).values as IDataObject[])\n\t\t\t\t\t: ((this.getNodeParameter('columns.values', i, []) as IDataObject)\n\t\t\t\t\t\t\t.values as IDataObject[]);\n\n\t\t\titem =\n\t\t\t\tnodeVersion < 2.2\n\t\t\t\t\t? prepareItem(valuesToSend)\n\t\t\t\t\t: hasJsonDataTypeInSchema(tableSchema)\n\t\t\t\t\t\t? convertValuesToJsonWithPgp(\n\t\t\t\t\t\t\t\tpgp,\n\t\t\t\t\t\t\t\ttableSchema,\n\t\t\t\t\t\t\t\t(this.getNodeParameter('columns', i) as IDataObject)?.value as IDataObject,\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t: (this.getNodeParameter('columns.value', i) as IDataObject);\n\t\t}\n\n\t\ttableSchema = await updateTableSchema(db, tableSchema, schema, table);\n\n\t\tif (nodeVersion >= 2.4) {\n\t\t\tconvertArraysToPostgresFormat(item, tableSchema, this.getNode(), i);\n\t\t}\n\n\t\tvalues.push(checkItemAgainstSchema(this.getNode(), item, tableSchema, i));\n\n\t\tconst outputColumns = this.getNodeParameter('options.outputColumns', i, ['*']) as string[];\n\n\t\tif (nodeVersion >= 2.6 && Object.keys(item).length === 0) {\n\t\t\tquery = 'INSERT INTO $1:name.$2:name DEFAULT VALUES';\n\t\t}\n\n\t\t[query, values] = addReturning(query, outputColumns, values);\n\n\t\tqueries.push({ query, values });\n\t}\n\n\treturn await runQueries(queries, items, nodeOptions);\n}\n"],"mappings":"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","names":[]}