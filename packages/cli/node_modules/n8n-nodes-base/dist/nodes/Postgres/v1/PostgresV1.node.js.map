{"version":3,"sources":["../../../../nodes/Postgres/v1/PostgresV1.node.ts"],"sourcesContent":["import type {\n\tICredentialsDecrypted,\n\tICredentialTestFunctions,\n\tIExecuteFunctions,\n\tINodeCredentialTestResult,\n\tINodeExecutionData,\n\tINodeType,\n\tINodeTypeBaseDescription,\n\tINodeTypeDescription,\n} from 'n8n-workflow';\nimport { NodeConnectionTypes, NodeOperationError } from 'n8n-workflow';\n\nimport { oldVersionNotice } from '@utils/descriptions';\n\nimport { pgInsertV2, pgQueryV2, pgUpdate, wrapData } from './genericFunctions';\nimport { configurePostgres } from '../transport';\nimport type { PgpConnection, PostgresNodeCredentials } from '../v2/helpers/interfaces';\n\nconst versionDescription: INodeTypeDescription = {\n\tdisplayName: 'Postgres',\n\tname: 'postgres',\n\ticon: 'file:postgres.svg',\n\tgroup: ['input'],\n\tversion: 1,\n\tdescription: 'Get, add and update data in Postgres',\n\tdefaults: {\n\t\tname: 'Postgres',\n\t},\n\tinputs: [NodeConnectionTypes.Main],\n\toutputs: [NodeConnectionTypes.Main],\n\tcredentials: [\n\t\t{\n\t\t\tname: 'postgres',\n\t\t\trequired: true,\n\t\t\ttestedBy: 'postgresConnectionTest',\n\t\t},\n\t],\n\tproperties: [\n\t\toldVersionNotice,\n\t\t{\n\t\t\tdisplayName: 'Operation',\n\t\t\tname: 'operation',\n\t\t\ttype: 'options',\n\t\t\tnoDataExpression: true,\n\t\t\toptions: [\n\t\t\t\t{\n\t\t\t\t\tname: 'Execute Query',\n\t\t\t\t\tvalue: 'executeQuery',\n\t\t\t\t\tdescription: 'Execute an SQL query',\n\t\t\t\t\taction: 'Execute a SQL query',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'Insert',\n\t\t\t\t\tvalue: 'insert',\n\t\t\t\t\tdescription: 'Insert rows in database',\n\t\t\t\t\taction: 'Insert rows in database',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'Update',\n\t\t\t\t\tvalue: 'update',\n\t\t\t\t\tdescription: 'Update rows in database',\n\t\t\t\t\taction: 'Update rows in database',\n\t\t\t\t},\n\t\t\t],\n\t\t\tdefault: 'insert',\n\t\t},\n\n\t\t// ----------------------------------\n\t\t//         executeQuery\n\t\t// ----------------------------------\n\t\t{\n\t\t\tdisplayName: 'Query',\n\t\t\tname: 'query',\n\t\t\ttype: 'string',\n\t\t\tnoDataExpression: true,\n\t\t\ttypeOptions: {\n\t\t\t\teditor: 'sqlEditor',\n\t\t\t\tsqlDialect: 'PostgreSQL',\n\t\t\t},\n\t\t\tdisplayOptions: {\n\t\t\t\tshow: {\n\t\t\t\t\toperation: ['executeQuery'],\n\t\t\t\t},\n\t\t\t},\n\t\t\tdefault: '',\n\t\t\tplaceholder: 'SELECT id, name FROM product WHERE quantity > $1 AND price <= $2',\n\t\t\trequired: true,\n\t\t\tdescription:\n\t\t\t\t'The SQL query to execute. You can use n8n expressions or $1 and $2 in conjunction with query parameters.',\n\t\t},\n\t\t// ----------------------------------\n\t\t//         insert\n\t\t// ----------------------------------\n\t\t{\n\t\t\tdisplayName: 'Schema',\n\t\t\tname: 'schema',\n\t\t\ttype: 'string',\n\t\t\tdisplayOptions: {\n\t\t\t\tshow: {\n\t\t\t\t\toperation: ['insert'],\n\t\t\t\t},\n\t\t\t},\n\t\t\tdefault: 'public',\n\t\t\trequired: true,\n\t\t\tdescription: 'Name of the schema the table belongs to',\n\t\t},\n\t\t{\n\t\t\tdisplayName: 'Table',\n\t\t\tname: 'table',\n\t\t\ttype: 'string',\n\t\t\tdisplayOptions: {\n\t\t\t\tshow: {\n\t\t\t\t\toperation: ['insert'],\n\t\t\t\t},\n\t\t\t},\n\t\t\tdefault: '',\n\t\t\trequired: true,\n\t\t\tdescription: 'Name of the table in which to insert data to',\n\t\t},\n\t\t{\n\t\t\tdisplayName: 'Columns',\n\t\t\tname: 'columns',\n\t\t\ttype: 'string',\n\t\t\tdisplayOptions: {\n\t\t\t\tshow: {\n\t\t\t\t\toperation: ['insert'],\n\t\t\t\t},\n\t\t\t},\n\t\t\tdefault: '',\n\t\t\t// eslint-disable-next-line n8n-nodes-base/node-param-placeholder-miscased-id\n\t\t\tplaceholder: 'id:int,name:text,description',\n\t\t\t// eslint-disable-next-line n8n-nodes-base/node-param-description-miscased-id\n\t\t\tdescription:\n\t\t\t\t'Comma-separated list of the properties which should used as columns for the new rows. You can use type casting with colons (:) like id:int.',\n\t\t},\n\n\t\t// ----------------------------------\n\t\t//         update\n\t\t// ----------------------------------\n\t\t{\n\t\t\tdisplayName: 'Schema',\n\t\t\tname: 'schema',\n\t\t\ttype: 'string',\n\t\t\tdisplayOptions: {\n\t\t\t\tshow: {\n\t\t\t\t\toperation: ['update'],\n\t\t\t\t},\n\t\t\t},\n\t\t\tdefault: 'public',\n\t\t\tdescription: 'Name of the schema the table belongs to',\n\t\t},\n\t\t{\n\t\t\tdisplayName: 'Table',\n\t\t\tname: 'table',\n\t\t\ttype: 'string',\n\t\t\tdisplayOptions: {\n\t\t\t\tshow: {\n\t\t\t\t\toperation: ['update'],\n\t\t\t\t},\n\t\t\t},\n\t\t\tdefault: '',\n\t\t\trequired: true,\n\t\t\tdescription: 'Name of the table in which to update data in',\n\t\t},\n\t\t{\n\t\t\tdisplayName: 'Update Key',\n\t\t\tname: 'updateKey',\n\t\t\ttype: 'string',\n\t\t\tdisplayOptions: {\n\t\t\t\tshow: {\n\t\t\t\t\toperation: ['update'],\n\t\t\t\t},\n\t\t\t},\n\t\t\tdefault: 'id',\n\t\t\trequired: true,\n\t\t\t// eslint-disable-next-line n8n-nodes-base/node-param-description-miscased-id\n\t\t\tdescription:\n\t\t\t\t'Comma-separated list of the properties which decides which rows in the database should be updated. Normally that would be \"id\".',\n\t\t},\n\t\t{\n\t\t\tdisplayName: 'Columns',\n\t\t\tname: 'columns',\n\t\t\ttype: 'string',\n\t\t\tdisplayOptions: {\n\t\t\t\tshow: {\n\t\t\t\t\toperation: ['update'],\n\t\t\t\t},\n\t\t\t},\n\t\t\tdefault: '',\n\t\t\tplaceholder: 'name:text,description',\n\t\t\t// eslint-disable-next-line n8n-nodes-base/node-param-description-miscased-id\n\t\t\tdescription:\n\t\t\t\t'Comma-separated list of the properties which should used as columns for rows to update. You can use type casting with colons (:) like id:int.',\n\t\t},\n\n\t\t// ----------------------------------\n\t\t//         insert,update\n\t\t// ----------------------------------\n\t\t{\n\t\t\tdisplayName: 'Return Fields',\n\t\t\tname: 'returnFields',\n\t\t\ttype: 'string',\n\t\t\trequiresDataPath: 'multiple',\n\t\t\tdisplayOptions: {\n\t\t\t\tshow: {\n\t\t\t\t\toperation: ['insert', 'update'],\n\t\t\t\t},\n\t\t\t},\n\t\t\tdefault: '*',\n\t\t\tdescription: 'Comma-separated list of the fields that the operation will return',\n\t\t},\n\t\t// ----------------------------------\n\t\t//         Additional fields\n\t\t// ----------------------------------\n\t\t{\n\t\t\tdisplayName: 'Additional Fields',\n\t\t\tname: 'additionalFields',\n\t\t\ttype: 'collection',\n\t\t\tplaceholder: 'Add Field',\n\t\t\tdefault: {},\n\t\t\toptions: [\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'Mode',\n\t\t\t\t\tname: 'mode',\n\t\t\t\t\ttype: 'options',\n\t\t\t\t\toptions: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'Independently',\n\t\t\t\t\t\t\tvalue: 'independently',\n\t\t\t\t\t\t\tdescription: 'Execute each query independently',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'Multiple Queries',\n\t\t\t\t\t\t\tvalue: 'multiple',\n\t\t\t\t\t\t\tdescription: '<b>Default</b>. Sends multiple queries at once to database.',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'Transaction',\n\t\t\t\t\t\t\tvalue: 'transaction',\n\t\t\t\t\t\t\tdescription: 'Executes all queries in a single transaction',\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t\tdefault: 'multiple',\n\t\t\t\t\tdescription:\n\t\t\t\t\t\t'The way queries should be sent to database. Can be used in conjunction with <b>Continue on Fail</b>. See <a href=\"https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.postgres/\">the docs</a> for more examples',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'Output Large-Format Numbers As',\n\t\t\t\t\tname: 'largeNumbersOutput',\n\t\t\t\t\ttype: 'options',\n\t\t\t\t\toptions: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'Numbers',\n\t\t\t\t\t\t\tvalue: 'numbers',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'Text',\n\t\t\t\t\t\t\tvalue: 'text',\n\t\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t\t'Use this if you expect numbers longer than 16 digits (otherwise numbers may be incorrect)',\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t\thint: 'Applies to NUMERIC and BIGINT columns only',\n\t\t\t\t\tdefault: 'text',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'Query Parameters',\n\t\t\t\t\tname: 'queryParams',\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\t'/operation': ['executeQuery'],\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tdefault: '',\n\t\t\t\t\tplaceholder: 'quantity,price',\n\t\t\t\t\tdescription:\n\t\t\t\t\t\t'Comma-separated list of properties which should be used as query parameters',\n\t\t\t\t},\n\t\t\t],\n\t\t},\n\t],\n};\n\nexport class PostgresV1 implements INodeType {\n\tdescription: INodeTypeDescription;\n\n\tconstructor(baseDescription: INodeTypeBaseDescription) {\n\t\tthis.description = {\n\t\t\t...baseDescription,\n\t\t\t...versionDescription,\n\t\t};\n\t}\n\n\tmethods = {\n\t\tcredentialTest: {\n\t\t\tasync postgresConnectionTest(\n\t\t\t\tthis: ICredentialTestFunctions,\n\t\t\t\tcredential: ICredentialsDecrypted,\n\t\t\t): Promise<INodeCredentialTestResult> {\n\t\t\t\tconst credentials = credential.data as PostgresNodeCredentials;\n\n\t\t\t\tlet connection: PgpConnection | undefined;\n\n\t\t\t\ttry {\n\t\t\t\t\tconst { db } = await configurePostgres.call(this, credentials, {});\n\n\t\t\t\t\t// Acquires a new connection that can be used to to run multiple\n\t\t\t\t\t// queries on the same connection and must be released again\n\t\t\t\t\t// manually.\n\t\t\t\t\tconnection = await db.connect();\n\t\t\t\t} catch (error) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tstatus: 'Error',\n\t\t\t\t\t\tmessage: error.message,\n\t\t\t\t\t};\n\t\t\t\t} finally {\n\t\t\t\t\tif (connection) {\n\t\t\t\t\t\t// release connection\n\t\t\t\t\t\tawait connection.done();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn {\n\t\t\t\t\tstatus: 'OK',\n\t\t\t\t\tmessage: 'Connection successful!',\n\t\t\t\t};\n\t\t\t},\n\t\t},\n\t};\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t\tconst credentials = await this.getCredentials<PostgresNodeCredentials>('postgres');\n\t\tconst largeNumbersOutput = this.getNodeParameter(\n\t\t\t'additionalFields.largeNumbersOutput',\n\t\t\t0,\n\t\t\t'',\n\t\t) as string;\n\n\t\tconst { db, pgp } = await configurePostgres.call(this, credentials, {\n\t\t\tlargeNumbersOutput:\n\t\t\t\tlargeNumbersOutput === 'numbers' || largeNumbersOutput === 'text'\n\t\t\t\t\t? largeNumbersOutput\n\t\t\t\t\t: undefined,\n\t\t});\n\n\t\tlet returnItems: INodeExecutionData[] = [];\n\n\t\tconst items = this.getInputData();\n\t\tconst operation = this.getNodeParameter('operation', 0);\n\n\t\tif (operation === 'executeQuery') {\n\t\t\t// ----------------------------------\n\t\t\t//         executeQuery\n\t\t\t// ----------------------------------\n\n\t\t\tconst queryResult = await pgQueryV2.call(this, pgp, db, items, this.continueOnFail());\n\t\t\treturnItems = queryResult as INodeExecutionData[];\n\t\t} else if (operation === 'insert') {\n\t\t\t// ----------------------------------\n\t\t\t//         insert\n\t\t\t// ----------------------------------\n\n\t\t\tconst insertData = await pgInsertV2.call(this, pgp, db, items, this.continueOnFail());\n\n\t\t\t// returnItems = this.helpers.returnJsonArray(insertData);\n\t\t\treturnItems = insertData as INodeExecutionData[];\n\t\t} else if (operation === 'update') {\n\t\t\t// ----------------------------------\n\t\t\t//         update\n\t\t\t// ----------------------------------\n\n\t\t\tconst updateItems = await pgUpdate(\n\t\t\t\tthis.getNodeParameter,\n\t\t\t\tpgp,\n\t\t\t\tdb,\n\t\t\t\titems,\n\t\t\t\tthis.continueOnFail(),\n\t\t\t);\n\n\t\t\treturnItems = wrapData(updateItems);\n\t\t} else {\n\t\t\tthrow new NodeOperationError(\n\t\t\t\tthis.getNode(),\n\t\t\t\t`The operation \"${operation}\" is not supported!`,\n\t\t\t);\n\t\t}\n\n\t\treturn [returnItems];\n\t}\n}\n"],"mappings":"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","names":[]}