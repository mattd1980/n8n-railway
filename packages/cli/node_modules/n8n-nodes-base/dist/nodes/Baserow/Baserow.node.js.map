{"version":3,"sources":["../../../nodes/Baserow/Baserow.node.ts"],"sourcesContent":["import {\n\ttype IExecuteFunctions,\n\ttype IDataObject,\n\ttype ILoadOptionsFunctions,\n\ttype INodeExecutionData,\n\ttype INodeType,\n\ttype INodeTypeDescription,\n\tNodeConnectionTypes,\n} from 'n8n-workflow';\n\nimport {\n\tbaserowApiRequest,\n\tbaserowApiRequestAllItems,\n\tgetJwtToken,\n\tTableFieldMapper,\n\ttoOptions,\n} from './GenericFunctions';\nimport { operationFields } from './OperationDescription';\nimport type {\n\tBaserowCredentials,\n\tFieldsUiValues,\n\tGetAllAdditionalOptions,\n\tLoadedResource,\n\tOperation,\n\tRow,\n} from './types';\n\nexport class Baserow implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'Baserow',\n\t\tname: 'baserow',\n\t\ticon: 'file:baserow.svg',\n\t\tgroup: ['output'],\n\t\tversion: 1,\n\t\tdescription: 'Consume the Baserow API',\n\t\tsubtitle: '={{$parameter[\"operation\"] + \":\" + $parameter[\"resource\"]}}',\n\t\tdefaults: {\n\t\t\tname: 'Baserow',\n\t\t},\n\t\tinputs: [NodeConnectionTypes.Main],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tusableAsTool: true,\n\t\tcredentials: [\n\t\t\t{\n\t\t\t\tname: 'baserowApi',\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Resource',\n\t\t\t\tname: 'resource',\n\t\t\t\ttype: 'options',\n\t\t\t\tnoDataExpression: true,\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Row',\n\t\t\t\t\t\tvalue: 'row',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'row',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Operation',\n\t\t\t\tname: 'operation',\n\t\t\t\ttype: 'options',\n\t\t\t\tnoDataExpression: true,\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tresource: ['row'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Create',\n\t\t\t\t\t\tvalue: 'create',\n\t\t\t\t\t\tdescription: 'Create a row',\n\t\t\t\t\t\taction: 'Create a row',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Delete',\n\t\t\t\t\t\tvalue: 'delete',\n\t\t\t\t\t\tdescription: 'Delete a row',\n\t\t\t\t\t\taction: 'Delete a row',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Get',\n\t\t\t\t\t\tvalue: 'get',\n\t\t\t\t\t\tdescription: 'Retrieve a row',\n\t\t\t\t\t\taction: 'Get a row',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Get Many',\n\t\t\t\t\t\tvalue: 'getAll',\n\t\t\t\t\t\tdescription: 'Retrieve many rows',\n\t\t\t\t\t\taction: 'Get many rows',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Update',\n\t\t\t\t\t\tvalue: 'update',\n\t\t\t\t\t\tdescription: 'Update a row',\n\t\t\t\t\t\taction: 'Update a row',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'getAll',\n\t\t\t},\n\t\t\t...operationFields,\n\t\t],\n\t};\n\n\tmethods = {\n\t\tloadOptions: {\n\t\t\tasync getDatabaseIds(this: ILoadOptionsFunctions) {\n\t\t\t\tconst credentials = await this.getCredentials<BaserowCredentials>('baserowApi');\n\t\t\t\tconst jwtToken = await getJwtToken.call(this, credentials);\n\t\t\t\tconst endpoint = '/api/applications/';\n\t\t\t\tconst databases = (await baserowApiRequest.call(\n\t\t\t\t\tthis,\n\t\t\t\t\t'GET',\n\t\t\t\t\tendpoint,\n\t\t\t\t\tjwtToken,\n\t\t\t\t)) as LoadedResource[];\n\t\t\t\t// Baserow has different types of applications, we only want the databases\n\t\t\t\t// https://api.baserow.io/api/redoc/#tag/Applications/operation/list_all_applications\n\t\t\t\treturn toOptions(databases.filter((database) => database.type === 'database'));\n\t\t\t},\n\n\t\t\tasync getTableIds(this: ILoadOptionsFunctions) {\n\t\t\t\tconst credentials = await this.getCredentials<BaserowCredentials>('baserowApi');\n\t\t\t\tconst jwtToken = await getJwtToken.call(this, credentials);\n\t\t\t\tconst databaseId = this.getNodeParameter('databaseId', 0) as string;\n\t\t\t\tconst endpoint = `/api/database/tables/database/${databaseId}/`;\n\t\t\t\tconst tables = (await baserowApiRequest.call(\n\t\t\t\t\tthis,\n\t\t\t\t\t'GET',\n\t\t\t\t\tendpoint,\n\t\t\t\t\tjwtToken,\n\t\t\t\t)) as LoadedResource[];\n\t\t\t\treturn toOptions(tables);\n\t\t\t},\n\n\t\t\tasync getTableFields(this: ILoadOptionsFunctions) {\n\t\t\t\tconst credentials = await this.getCredentials<BaserowCredentials>('baserowApi');\n\t\t\t\tconst jwtToken = await getJwtToken.call(this, credentials);\n\t\t\t\tconst tableId = this.getNodeParameter('tableId', 0) as string;\n\t\t\t\tconst endpoint = `/api/database/fields/table/${tableId}/`;\n\t\t\t\tconst fields = (await baserowApiRequest.call(\n\t\t\t\t\tthis,\n\t\t\t\t\t'GET',\n\t\t\t\t\tendpoint,\n\t\t\t\t\tjwtToken,\n\t\t\t\t)) as LoadedResource[];\n\t\t\t\treturn toOptions(fields);\n\t\t\t},\n\t\t},\n\t};\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t\tconst items = this.getInputData();\n\t\tconst mapper = new TableFieldMapper();\n\t\tconst returnData: INodeExecutionData[] = [];\n\t\tconst operation = this.getNodeParameter('operation', 0) as Operation;\n\n\t\tconst tableId = this.getNodeParameter('tableId', 0) as string;\n\t\tconst credentials = await this.getCredentials<BaserowCredentials>('baserowApi');\n\t\tconst jwtToken = await getJwtToken.call(this, credentials);\n\t\tconst fields = await mapper.getTableFields.call(this, tableId, jwtToken);\n\t\tmapper.createMappings(fields);\n\n\t\tfor (let i = 0; i < items.length; i++) {\n\t\t\ttry {\n\t\t\t\tif (operation === 'getAll') {\n\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t//             getAll\n\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t// https://api.baserow.io/api/redoc/#operation/list_database_table_rows\n\n\t\t\t\t\tconst { order, filters, filterType, search } = this.getNodeParameter(\n\t\t\t\t\t\t'additionalOptions',\n\t\t\t\t\t\ti,\n\t\t\t\t\t) as GetAllAdditionalOptions;\n\n\t\t\t\t\tconst qs: IDataObject = {};\n\n\t\t\t\t\tif (order?.fields) {\n\t\t\t\t\t\tqs.order_by = order.fields\n\t\t\t\t\t\t\t.map(({ field, direction }) => `${direction}${mapper.setField(field)}`)\n\t\t\t\t\t\t\t.join(',');\n\t\t\t\t\t}\n\n\t\t\t\t\tif (filters?.fields) {\n\t\t\t\t\t\tfilters.fields.forEach(({ field, operator, value }) => {\n\t\t\t\t\t\t\tqs[`filter__field_${mapper.setField(field)}__${operator}`] = value;\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\tif (filterType) {\n\t\t\t\t\t\tqs.filter_type = filterType;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (search) {\n\t\t\t\t\t\tqs.search = search;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst endpoint = `/api/database/rows/table/${tableId}/`;\n\t\t\t\t\tconst rows = (await baserowApiRequestAllItems.call(\n\t\t\t\t\t\tthis,\n\t\t\t\t\t\t'GET',\n\t\t\t\t\t\tendpoint,\n\t\t\t\t\t\tjwtToken,\n\t\t\t\t\t\t{},\n\t\t\t\t\t\tqs,\n\t\t\t\t\t)) as Row[];\n\n\t\t\t\t\trows.forEach((row) => mapper.idsToNames(row));\n\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\tthis.helpers.returnJsonArray(rows),\n\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t);\n\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t} else if (operation === 'get') {\n\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t//             get\n\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t// https://api.baserow.io/api/redoc/#operation/get_database_table_row\n\n\t\t\t\t\tconst rowId = this.getNodeParameter('rowId', i) as string;\n\t\t\t\t\tconst endpoint = `/api/database/rows/table/${tableId}/${rowId}/`;\n\t\t\t\t\tconst row = await baserowApiRequest.call(this, 'GET', endpoint, jwtToken);\n\n\t\t\t\t\tmapper.idsToNames(row as Row);\n\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\tthis.helpers.returnJsonArray(row as Row),\n\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t);\n\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t} else if (operation === 'create') {\n\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t//             create\n\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t// https://api.baserow.io/api/redoc/#operation/create_database_table_row\n\n\t\t\t\t\tconst body: IDataObject = {};\n\n\t\t\t\t\tconst dataToSend = this.getNodeParameter('dataToSend', 0) as\n\t\t\t\t\t\t| 'defineBelow'\n\t\t\t\t\t\t| 'autoMapInputData';\n\n\t\t\t\t\tif (dataToSend === 'autoMapInputData') {\n\t\t\t\t\t\tconst incomingKeys = Object.keys(items[i].json);\n\t\t\t\t\t\tconst rawInputsToIgnore = this.getNodeParameter('inputsToIgnore', i) as string;\n\t\t\t\t\t\tconst inputDataToIgnore = rawInputsToIgnore.split(',').map((c) => c.trim());\n\n\t\t\t\t\t\tfor (const key of incomingKeys) {\n\t\t\t\t\t\t\tif (inputDataToIgnore.includes(key)) continue;\n\t\t\t\t\t\t\tbody[key] = items[i].json[key];\n\t\t\t\t\t\t\tmapper.namesToIds(body);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst fieldsUi = this.getNodeParameter('fieldsUi.fieldValues', i, []) as FieldsUiValues;\n\t\t\t\t\t\tfor (const field of fieldsUi) {\n\t\t\t\t\t\t\tbody[`field_${field.fieldId}`] = field.fieldValue;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tconst endpoint = `/api/database/rows/table/${tableId}/`;\n\t\t\t\t\tconst createdRow = await baserowApiRequest.call(this, 'POST', endpoint, jwtToken, body);\n\n\t\t\t\t\tmapper.idsToNames(createdRow as Row);\n\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\tthis.helpers.returnJsonArray(createdRow as Row),\n\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t);\n\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t} else if (operation === 'update') {\n\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t//             update\n\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t// https://api.baserow.io/api/redoc/#operation/update_database_table_row\n\n\t\t\t\t\tconst rowId = this.getNodeParameter('rowId', i) as string;\n\n\t\t\t\t\tconst body: IDataObject = {};\n\n\t\t\t\t\tconst dataToSend = this.getNodeParameter('dataToSend', 0) as\n\t\t\t\t\t\t| 'defineBelow'\n\t\t\t\t\t\t| 'autoMapInputData';\n\n\t\t\t\t\tif (dataToSend === 'autoMapInputData') {\n\t\t\t\t\t\tconst incomingKeys = Object.keys(items[i].json);\n\t\t\t\t\t\tconst rawInputsToIgnore = this.getNodeParameter('inputsToIgnore', i) as string;\n\t\t\t\t\t\tconst inputsToIgnore = rawInputsToIgnore.split(',').map((c) => c.trim());\n\n\t\t\t\t\t\tfor (const key of incomingKeys) {\n\t\t\t\t\t\t\tif (inputsToIgnore.includes(key)) continue;\n\t\t\t\t\t\t\tbody[key] = items[i].json[key];\n\t\t\t\t\t\t\tmapper.namesToIds(body);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst fieldsUi = this.getNodeParameter('fieldsUi.fieldValues', i, []) as FieldsUiValues;\n\t\t\t\t\t\tfor (const field of fieldsUi) {\n\t\t\t\t\t\t\tbody[`field_${field.fieldId}`] = field.fieldValue;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tconst endpoint = `/api/database/rows/table/${tableId}/${rowId}/`;\n\t\t\t\t\tconst updatedRow = await baserowApiRequest.call(this, 'PATCH', endpoint, jwtToken, body);\n\n\t\t\t\t\tmapper.idsToNames(updatedRow as Row);\n\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\tthis.helpers.returnJsonArray(updatedRow as Row),\n\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t);\n\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t} else if (operation === 'delete') {\n\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t//             delete\n\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t// https://api.baserow.io/api/redoc/#operation/delete_database_table_row\n\n\t\t\t\t\tconst rowId = this.getNodeParameter('rowId', i) as string;\n\n\t\t\t\t\tconst endpoint = `/api/database/rows/table/${tableId}/${rowId}/`;\n\t\t\t\t\tawait baserowApiRequest.call(this, 'DELETE', endpoint, jwtToken);\n\n\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t[{ json: { success: true } }],\n\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t);\n\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\treturnData.push({ error: error.message, json: {}, itemIndex: i });\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\n\t\treturn [returnData];\n\t}\n}\n"],"mappings":"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","names":[]}