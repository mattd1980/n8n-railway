{"version":3,"sources":["../../../../../nodes/TheHiveProject/actions/task/create.operation.ts"],"sourcesContent":["import type {\n\tIDataObject,\n\tIExecuteFunctions,\n\tINodeExecutionData,\n\tINodeProperties,\n} from 'n8n-workflow';\n\nimport { updateDisplayOptions, wrapData } from '@utils/utilities';\n\nimport { caseRLC } from '../../descriptions';\nimport { fixFieldType, prepareInputItem } from '../../helpers/utils';\nimport { theHiveApiRequest } from '../../transport';\n\nconst properties: INodeProperties[] = [\n\tcaseRLC,\n\t{\n\t\tdisplayName: 'Fields',\n\t\tname: 'taskFields',\n\t\ttype: 'resourceMapper',\n\t\tdefault: {\n\t\t\tmappingMode: 'defineBelow',\n\t\t\tvalue: null,\n\t\t},\n\t\tnoDataExpression: true,\n\t\trequired: true,\n\t\ttypeOptions: {\n\t\t\tresourceMapper: {\n\t\t\t\tresourceMapperMethod: 'getTaskFields',\n\t\t\t\tmode: 'add',\n\t\t\t\tvaluesLabel: 'Fields',\n\t\t\t},\n\t\t},\n\t},\n];\n\nconst displayOptions = {\n\tshow: {\n\t\tresource: ['task'],\n\t\toperation: ['create'],\n\t},\n};\n\nexport const description = updateDisplayOptions(displayOptions, properties);\n\nexport async function execute(\n\tthis: IExecuteFunctions,\n\ti: number,\n\titem: INodeExecutionData,\n): Promise<INodeExecutionData[]> {\n\tlet responseData: IDataObject | IDataObject[] = [];\n\tlet body: IDataObject = {};\n\n\tconst dataMode = this.getNodeParameter('taskFields.mappingMode', i) as string;\n\tconst caseId = this.getNodeParameter('caseId', i, '', { extractValue: true }) as string;\n\n\tif (dataMode === 'autoMapInputData') {\n\t\tconst schema = this.getNodeParameter('taskFields.schema', i) as IDataObject[];\n\t\tbody = prepareInputItem(item.json, schema, i);\n\t}\n\n\tif (dataMode === 'defineBelow') {\n\t\tconst taskFields = this.getNodeParameter('taskFields.value', i, []) as IDataObject;\n\t\tbody = taskFields;\n\t}\n\n\tbody = fixFieldType(body);\n\n\tresponseData = await theHiveApiRequest.call(this, 'POST', `/v1/case/${caseId}/task`, body);\n\n\tconst executionData = this.helpers.constructExecutionMetaData(wrapData(responseData), {\n\t\titemData: { item: i },\n\t});\n\n\treturn executionData;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA,uBAA+C;AAE/C,0BAAwB;AACxB,mBAA+C;AAC/C,uBAAkC;AAElC,MAAM,aAAgC;AAAA,EACrC;AAAA,EACA;AAAA,IACC,aAAa;AAAA,IACb,MAAM;AAAA,IACN,MAAM;AAAA,IACN,SAAS;AAAA,MACR,aAAa;AAAA,MACb,OAAO;AAAA,IACR;AAAA,IACA,kBAAkB;AAAA,IAClB,UAAU;AAAA,IACV,aAAa;AAAA,MACZ,gBAAgB;AAAA,QACf,sBAAsB;AAAA,QACtB,MAAM;AAAA,QACN,aAAa;AAAA,MACd;AAAA,IACD;AAAA,EACD;AACD;AAEA,MAAM,iBAAiB;AAAA,EACtB,MAAM;AAAA,IACL,UAAU,CAAC,MAAM;AAAA,IACjB,WAAW,CAAC,QAAQ;AAAA,EACrB;AACD;AAEO,MAAM,kBAAc,uCAAqB,gBAAgB,UAAU;AAE1E,eAAsB,QAErB,GACA,MACgC;AAChC,MAAI,eAA4C,CAAC;AACjD,MAAI,OAAoB,CAAC;AAEzB,QAAM,WAAW,KAAK,iBAAiB,0BAA0B,CAAC;AAClE,QAAM,SAAS,KAAK,iBAAiB,UAAU,GAAG,IAAI,EAAE,cAAc,KAAK,CAAC;AAE5E,MAAI,aAAa,oBAAoB;AACpC,UAAM,SAAS,KAAK,iBAAiB,qBAAqB,CAAC;AAC3D,eAAO,+BAAiB,KAAK,MAAM,QAAQ,CAAC;AAAA,EAC7C;AAEA,MAAI,aAAa,eAAe;AAC/B,UAAM,aAAa,KAAK,iBAAiB,oBAAoB,GAAG,CAAC,CAAC;AAClE,WAAO;AAAA,EACR;AAEA,aAAO,2BAAa,IAAI;AAExB,iBAAe,MAAM,mCAAkB,KAAK,MAAM,QAAQ,YAAY,MAAM,SAAS,IAAI;AAEzF,QAAM,gBAAgB,KAAK,QAAQ,+BAA2B,2BAAS,YAAY,GAAG;AAAA,IACrF,UAAU,EAAE,MAAM,EAAE;AAAA,EACrB,CAAC;AAED,SAAO;AACR;","names":[]}