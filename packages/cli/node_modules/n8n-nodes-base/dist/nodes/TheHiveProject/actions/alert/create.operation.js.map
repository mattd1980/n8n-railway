{"version":3,"sources":["../../../../../nodes/TheHiveProject/actions/alert/create.operation.ts"],"sourcesContent":["import FormData from 'form-data';\nimport set from 'lodash/set';\nimport type {\n\tIDataObject,\n\tIExecuteFunctions,\n\tINodeExecutionData,\n\tINodeProperties,\n} from 'n8n-workflow';\n\nimport { updateDisplayOptions, wrapData } from '@utils/utilities';\n\nimport { observableTypeOptions } from '../../descriptions';\nimport { fixFieldType, prepareInputItem, splitAndTrim } from '../../helpers/utils';\nimport { theHiveApiRequest } from '../../transport';\n\nconst properties: INodeProperties[] = [\n\t{\n\t\tdisplayName: 'Fields',\n\t\tname: 'alertFields',\n\t\ttype: 'resourceMapper',\n\t\tdefault: {\n\t\t\tmappingMode: 'defineBelow',\n\t\t\tvalue: null,\n\t\t},\n\t\tnoDataExpression: true,\n\t\trequired: true,\n\t\ttypeOptions: {\n\t\t\tresourceMapper: {\n\t\t\t\tresourceMapperMethod: 'getAlertFields',\n\t\t\t\tmode: 'add',\n\t\t\t\tvaluesLabel: 'Fields',\n\t\t\t},\n\t\t},\n\t},\n\t{\n\t\tdisplayName: 'Observables',\n\t\tname: 'observableUi',\n\t\ttype: 'fixedCollection',\n\t\tplaceholder: 'Add Observable',\n\t\tdefault: {},\n\t\ttypeOptions: {\n\t\t\tmultipleValues: true,\n\t\t},\n\t\toptions: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Values',\n\t\t\t\tname: 'values',\n\t\t\t\tvalues: [\n\t\t\t\t\tobservableTypeOptions,\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Data',\n\t\t\t\t\t\tname: 'data',\n\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\t\thide: {\n\t\t\t\t\t\t\t\tdataType: ['file'],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Input Binary Field',\n\t\t\t\t\t\tname: 'binaryProperty',\n\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\thint: 'The name of the input binary field containing the file to be written',\n\t\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\t\tdataType: ['file'],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\tdefault: 'data',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Message',\n\t\t\t\t\t\tname: 'message',\n\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Tags',\n\t\t\t\t\t\tname: 'tags',\n\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t],\n\t},\n];\n\nconst displayOptions = {\n\tshow: {\n\t\tresource: ['alert'],\n\t\toperation: ['create'],\n\t},\n};\n\nexport const description = updateDisplayOptions(displayOptions, properties);\n\nexport async function execute(\n\tthis: IExecuteFunctions,\n\ti: number,\n\titem: INodeExecutionData,\n): Promise<INodeExecutionData[]> {\n\tlet responseData: IDataObject | IDataObject[] = [];\n\tlet inputData: IDataObject = {};\n\n\tconst dataMode = this.getNodeParameter('alertFields.mappingMode', i) as string;\n\n\tif (dataMode === 'autoMapInputData') {\n\t\tconst schema = this.getNodeParameter('alertFields.schema', i) as IDataObject[];\n\t\tinputData = prepareInputItem(item.json, schema, i);\n\t}\n\n\tif (dataMode === 'defineBelow') {\n\t\tconst alertFields = this.getNodeParameter('alertFields.value', i, []) as IDataObject;\n\t\tinputData = alertFields;\n\t}\n\n\tinputData = fixFieldType(inputData);\n\n\tconst body: IDataObject = {};\n\n\tfor (const field of Object.keys(inputData)) {\n\t\t// use set to construct the updateBody, as it allows to process customFields.fieldName\n\t\t// if customFields provided under customFields property, it will be send as is\n\t\tset(body, field, inputData[field]);\n\t}\n\n\tlet multiPartRequest = false;\n\tconst formData = new FormData();\n\n\tconst observableUi = this.getNodeParameter('observableUi', i) as IDataObject;\n\tif (observableUi) {\n\t\tconst values = observableUi.values as IDataObject[];\n\n\t\tif (values) {\n\t\t\tconst observables = [];\n\n\t\t\tfor (const value of values) {\n\t\t\t\tconst observable: IDataObject = {};\n\n\t\t\t\tobservable.dataType = value.dataType as string;\n\t\t\t\tobservable.message = value.message as string;\n\t\t\t\tobservable.tags = splitAndTrim(value.tags as string);\n\n\t\t\t\tif (value.dataType === 'file') {\n\t\t\t\t\tmultiPartRequest = true;\n\n\t\t\t\t\tconst attachmentIndex = `attachment${i}`;\n\t\t\t\t\tobservable.attachment = attachmentIndex;\n\n\t\t\t\t\tconst binaryPropertyName = value.binaryProperty as string;\n\t\t\t\t\tconst binaryData = this.helpers.assertBinaryData(i, binaryPropertyName);\n\t\t\t\t\tconst dataBuffer = await this.helpers.getBinaryDataBuffer(i, binaryPropertyName);\n\n\t\t\t\t\tformData.append(attachmentIndex, dataBuffer, {\n\t\t\t\t\t\tfilename: binaryData.fileName,\n\t\t\t\t\t\tcontentType: binaryData.mimeType,\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tobservable.data = value.data as string;\n\t\t\t\t}\n\n\t\t\t\tobservables.push(observable);\n\t\t\t}\n\t\t\tbody.observables = observables;\n\t\t}\n\t}\n\n\tif (multiPartRequest) {\n\t\tformData.append('_json', JSON.stringify(body));\n\t\tresponseData = await theHiveApiRequest.call(\n\t\t\tthis,\n\t\t\t'POST',\n\t\t\t'/v1/alert',\n\t\t\tundefined,\n\t\t\tundefined,\n\t\t\tundefined,\n\t\t\t{\n\t\t\t\tHeaders: {\n\t\t\t\t\t'Content-Type': 'multipart/form-data',\n\t\t\t\t},\n\t\t\t\tformData,\n\t\t\t},\n\t\t);\n\t} else {\n\t\tresponseData = await theHiveApiRequest.call(this, 'POST', '/v1/alert' as string, body);\n\t}\n\n\tconst executionData = this.helpers.constructExecutionMetaData(wrapData(responseData), {\n\t\titemData: { item: i },\n\t});\n\n\treturn executionData;\n}\n"],"mappings":"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","names":["set","FormData"]}