{"version":3,"sources":["../../../../../nodes/TheHiveProject/actions/task/search.operation.ts"],"sourcesContent":["import type {\n\tIDataObject,\n\tIExecuteFunctions,\n\tINodeExecutionData,\n\tINodeProperties,\n} from 'n8n-workflow';\n\nimport { updateDisplayOptions, wrapData } from '@utils/utilities';\n\nimport {\n\tcaseRLC,\n\tgenericFiltersCollection,\n\treturnAllAndLimit,\n\tsearchOptions,\n\tsortCollection,\n} from '../../descriptions';\nimport type { QueryScope } from '../../helpers/interfaces';\nimport { theHiveApiQuery } from '../../transport';\n\nconst properties: INodeProperties[] = [\n\t{\n\t\tdisplayName: 'Search in All Cases',\n\t\tname: 'allCases',\n\t\ttype: 'boolean',\n\t\tdefault: true,\n\t\tdescription: 'Whether to search in all cases or only in a selected case',\n\t},\n\t{\n\t\t...caseRLC,\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tallCases: [false],\n\t\t\t},\n\t\t},\n\t},\n\t...returnAllAndLimit,\n\tgenericFiltersCollection,\n\tsortCollection,\n\tsearchOptions,\n];\n\nconst displayOptions = {\n\tshow: {\n\t\tresource: ['task'],\n\t\toperation: ['search'],\n\t},\n};\n\nexport const description = updateDisplayOptions(displayOptions, properties);\n\nexport async function execute(this: IExecuteFunctions, i: number): Promise<INodeExecutionData[]> {\n\tlet responseData: IDataObject | IDataObject[] = [];\n\n\tconst allCases = this.getNodeParameter('allCases', i) as boolean;\n\tconst filtersValues = this.getNodeParameter('filters.values', i, []) as IDataObject[];\n\tconst sortFields = this.getNodeParameter('sort.fields', i, []) as IDataObject[];\n\tconst returnAll = this.getNodeParameter('returnAll', i);\n\tconst { returnCount, extraData } = this.getNodeParameter('options', i);\n\n\tlet limit;\n\tlet scope: QueryScope;\n\n\tif (allCases) {\n\t\tscope = { query: 'listTask' };\n\t} else {\n\t\tconst caseId = this.getNodeParameter('caseId', i, '', { extractValue: true }) as string;\n\t\tscope = { query: 'getCase', id: caseId, restrictTo: 'tasks' };\n\t}\n\n\tif (!returnAll) {\n\t\tlimit = this.getNodeParameter('limit', i);\n\t}\n\n\tresponseData = await theHiveApiQuery.call(\n\t\tthis,\n\t\tscope,\n\t\tfiltersValues,\n\t\tsortFields,\n\t\tlimit,\n\t\treturnCount as boolean,\n\t\textraData as string[],\n\t);\n\n\tconst executionData = this.helpers.constructExecutionMetaData(wrapData(responseData), {\n\t\titemData: { item: i },\n\t});\n\n\treturn executionData;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA,uBAA+C;AAE/C,0BAMO;AAEP,uBAAgC;AAEhC,MAAM,aAAgC;AAAA,EACrC;AAAA,IACC,aAAa;AAAA,IACb,MAAM;AAAA,IACN,MAAM;AAAA,IACN,SAAS;AAAA,IACT,aAAa;AAAA,EACd;AAAA,EACA;AAAA,IACC,GAAG;AAAA,IACH,gBAAgB;AAAA,MACf,MAAM;AAAA,QACL,UAAU,CAAC,KAAK;AAAA,MACjB;AAAA,IACD;AAAA,EACD;AAAA,EACA,GAAG;AAAA,EACH;AAAA,EACA;AAAA,EACA;AACD;AAEA,MAAM,iBAAiB;AAAA,EACtB,MAAM;AAAA,IACL,UAAU,CAAC,MAAM;AAAA,IACjB,WAAW,CAAC,QAAQ;AAAA,EACrB;AACD;AAEO,MAAM,kBAAc,uCAAqB,gBAAgB,UAAU;AAE1E,eAAsB,QAAiC,GAA0C;AAChG,MAAI,eAA4C,CAAC;AAEjD,QAAM,WAAW,KAAK,iBAAiB,YAAY,CAAC;AACpD,QAAM,gBAAgB,KAAK,iBAAiB,kBAAkB,GAAG,CAAC,CAAC;AACnE,QAAM,aAAa,KAAK,iBAAiB,eAAe,GAAG,CAAC,CAAC;AAC7D,QAAM,YAAY,KAAK,iBAAiB,aAAa,CAAC;AACtD,QAAM,EAAE,aAAa,UAAU,IAAI,KAAK,iBAAiB,WAAW,CAAC;AAErE,MAAI;AACJ,MAAI;AAEJ,MAAI,UAAU;AACb,YAAQ,EAAE,OAAO,WAAW;AAAA,EAC7B,OAAO;AACN,UAAM,SAAS,KAAK,iBAAiB,UAAU,GAAG,IAAI,EAAE,cAAc,KAAK,CAAC;AAC5E,YAAQ,EAAE,OAAO,WAAW,IAAI,QAAQ,YAAY,QAAQ;AAAA,EAC7D;AAEA,MAAI,CAAC,WAAW;AACf,YAAQ,KAAK,iBAAiB,SAAS,CAAC;AAAA,EACzC;AAEA,iBAAe,MAAM,iCAAgB;AAAA,IACpC;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACD;AAEA,QAAM,gBAAgB,KAAK,QAAQ,+BAA2B,2BAAS,YAAY,GAAG;AAAA,IACrF,UAAU,EAAE,MAAM,EAAE;AAAA,EACrB,CAAC;AAED,SAAO;AACR;","names":[]}