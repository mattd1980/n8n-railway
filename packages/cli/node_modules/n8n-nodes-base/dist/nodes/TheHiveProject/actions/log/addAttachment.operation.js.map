{"version":3,"sources":["../../../../../nodes/TheHiveProject/actions/log/addAttachment.operation.ts"],"sourcesContent":["import type {\n\tIDataObject,\n\tIExecuteFunctions,\n\tINodeExecutionData,\n\tINodeProperties,\n} from 'n8n-workflow';\n\nimport { updateDisplayOptions, wrapData } from '@utils/utilities';\n\nimport { attachmentsUi, logRLC } from '../../descriptions';\nimport { theHiveApiRequest } from '../../transport';\n\nconst properties: INodeProperties[] = [logRLC, attachmentsUi];\n\nconst displayOptions = {\n\tshow: {\n\t\tresource: ['log'],\n\t\toperation: ['addAttachment'],\n\t},\n};\n\nexport const description = updateDisplayOptions(displayOptions, properties);\n\nexport async function execute(this: IExecuteFunctions, i: number): Promise<INodeExecutionData[]> {\n\tconst logId = this.getNodeParameter('logId', i, '', { extractValue: true }) as string;\n\n\tconst inputDataFields = (\n\t\tthis.getNodeParameter('attachmentsUi.values', i, []) as IDataObject[]\n\t).map((entry) => (entry.field as string).trim());\n\n\tconst attachments = [];\n\n\tfor (const inputDataField of inputDataFields) {\n\t\tconst binaryData = this.helpers.assertBinaryData(i, inputDataField);\n\t\tconst dataBuffer = await this.helpers.getBinaryDataBuffer(i, inputDataField);\n\n\t\tattachments.push({\n\t\t\tvalue: dataBuffer,\n\t\t\toptions: {\n\t\t\t\tcontentType: binaryData.mimeType,\n\t\t\t\tfilename: binaryData.fileName,\n\t\t\t},\n\t\t});\n\t}\n\n\tawait theHiveApiRequest.call(\n\t\tthis,\n\t\t'POST',\n\t\t`/v1/log/${logId}/attachments`,\n\t\tundefined,\n\t\tundefined,\n\t\tundefined,\n\t\t{\n\t\t\tHeaders: {\n\t\t\t\t'Content-Type': 'multipart/form-data',\n\t\t\t},\n\t\t\tformData: {\n\t\t\t\tattachments,\n\t\t\t},\n\t\t},\n\t);\n\n\tconst executionData = this.helpers.constructExecutionMetaData(wrapData({ success: true }), {\n\t\titemData: { item: i },\n\t});\n\n\treturn executionData;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA,uBAA+C;AAE/C,0BAAsC;AACtC,uBAAkC;AAElC,MAAM,aAAgC,CAAC,4BAAQ,iCAAa;AAE5D,MAAM,iBAAiB;AAAA,EACtB,MAAM;AAAA,IACL,UAAU,CAAC,KAAK;AAAA,IAChB,WAAW,CAAC,eAAe;AAAA,EAC5B;AACD;AAEO,MAAM,kBAAc,uCAAqB,gBAAgB,UAAU;AAE1E,eAAsB,QAAiC,GAA0C;AAChG,QAAM,QAAQ,KAAK,iBAAiB,SAAS,GAAG,IAAI,EAAE,cAAc,KAAK,CAAC;AAE1E,QAAM,kBACL,KAAK,iBAAiB,wBAAwB,GAAG,CAAC,CAAC,EAClD,IAAI,CAAC,UAAW,MAAM,MAAiB,KAAK,CAAC;AAE/C,QAAM,cAAc,CAAC;AAErB,aAAW,kBAAkB,iBAAiB;AAC7C,UAAM,aAAa,KAAK,QAAQ,iBAAiB,GAAG,cAAc;AAClE,UAAM,aAAa,MAAM,KAAK,QAAQ,oBAAoB,GAAG,cAAc;AAE3E,gBAAY,KAAK;AAAA,MAChB,OAAO;AAAA,MACP,SAAS;AAAA,QACR,aAAa,WAAW;AAAA,QACxB,UAAU,WAAW;AAAA,MACtB;AAAA,IACD,CAAC;AAAA,EACF;AAEA,QAAM,mCAAkB;AAAA,IACvB;AAAA,IACA;AAAA,IACA,WAAW,KAAK;AAAA,IAChB;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,MACC,SAAS;AAAA,QACR,gBAAgB;AAAA,MACjB;AAAA,MACA,UAAU;AAAA,QACT;AAAA,MACD;AAAA,IACD;AAAA,EACD;AAEA,QAAM,gBAAgB,KAAK,QAAQ,+BAA2B,2BAAS,EAAE,SAAS,KAAK,CAAC,GAAG;AAAA,IAC1F,UAAU,EAAE,MAAM,EAAE;AAAA,EACrB,CAAC;AAED,SAAO;AACR;","names":[]}