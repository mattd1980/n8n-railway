{"version":3,"sources":["../../../nodes/FunctionItem/FunctionItem.node.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-loop-func */\nimport type { NodeVMOptions } from '@n8n/vm2';\nimport { NodeVM } from '@n8n/vm2';\nimport type {\n\tIExecuteFunctions,\n\tIBinaryKeyData,\n\tIDataObject,\n\tINodeExecutionData,\n\tINodeType,\n\tINodeTypeDescription,\n} from 'n8n-workflow';\nimport { NodeConnectionTypes, deepCopy, NodeOperationError } from 'n8n-workflow';\n\nimport { vmResolver } from '../Code/JavaScriptSandbox';\n\nexport class FunctionItem implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'Function Item',\n\t\tname: 'functionItem',\n\t\thidden: true,\n\t\ticon: 'fa:code',\n\t\tgroup: ['transform'],\n\t\tversion: 1,\n\t\tdescription: 'Run custom function code which gets executed once per item',\n\t\tdefaults: {\n\t\t\tname: 'Function Item',\n\t\t\tcolor: '#ddbb33',\n\t\t},\n\t\tinputs: [NodeConnectionTypes.Main],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'A newer version of this node type is available, called the ‘Code’ node',\n\t\t\t\tname: 'notice',\n\t\t\t\ttype: 'notice',\n\t\t\t\tdefault: '',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'JavaScript Code',\n\t\t\t\tname: 'functionCode',\n\t\t\t\ttypeOptions: {\n\t\t\t\t\talwaysOpenEditWindow: true,\n\t\t\t\t\tcodeAutocomplete: 'functionItem',\n\t\t\t\t\teditor: 'jsEditor',\n\t\t\t\t\trows: 10,\n\t\t\t\t},\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: `// Code here will run once per input item.\n// More info and help: https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.functionitem/\n// Tip: You can use luxon for dates and $jmespath for querying JSON structures\n\n// Add a new field called 'myNewField' to the JSON of the item\nitem.myNewField = 1;\n\n// You can write logs to the browser console\nconsole.log('Done!');\n\nreturn item;`,\n\t\t\t\tdescription: 'The JavaScript code to execute for each item',\n\t\t\t\tnoDataExpression: true,\n\t\t\t},\n\t\t],\n\t};\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t\tconst items = this.getInputData();\n\n\t\tconst returnData: INodeExecutionData[] = [];\n\t\tconst length = items.length;\n\t\tlet item: INodeExecutionData;\n\n\t\tconst cleanupData = (inputData: IDataObject): IDataObject => {\n\t\t\tObject.keys(inputData).map((key) => {\n\t\t\t\tif (inputData[key] !== null && typeof inputData[key] === 'object') {\n\t\t\t\t\tif (inputData[key].constructor.name === 'Object') {\n\t\t\t\t\t\t// Is regular node.js object so check its data\n\t\t\t\t\t\tinputData[key] = cleanupData(inputData[key] as IDataObject);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Is some special object like a Date so stringify\n\t\t\t\t\t\tinputData[key] = deepCopy(inputData[key]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn inputData;\n\t\t};\n\n\t\tfor (let itemIndex = 0; itemIndex < length; itemIndex++) {\n\t\t\tconst mode = this.getMode();\n\n\t\t\ttry {\n\t\t\t\titem = items[itemIndex];\n\t\t\t\titem.index = itemIndex;\n\n\t\t\t\t// Copy the items as they may get changed in the functions\n\t\t\t\titem = deepCopy(item);\n\n\t\t\t\t// Define the global objects for the custom function\n\t\t\t\tconst sandbox = {\n\t\t\t\t\t/** @deprecated for removal - replaced by getBinaryDataAsync() */\n\t\t\t\t\tgetBinaryData: (): IBinaryKeyData | undefined => {\n\t\t\t\t\t\tif (mode === 'manual') {\n\t\t\t\t\t\t\tthis.sendMessageToUI(\n\t\t\t\t\t\t\t\t'getBinaryData(...) is deprecated and will be removed in a future version. Please consider switching to getBinaryDataAsync(...) instead.',\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn item.binary;\n\t\t\t\t\t},\n\t\t\t\t\t/** @deprecated for removal - replaced by setBinaryDataAsync() */\n\t\t\t\t\tsetBinaryData: async (data: IBinaryKeyData) => {\n\t\t\t\t\t\tif (mode === 'manual') {\n\t\t\t\t\t\t\tthis.sendMessageToUI(\n\t\t\t\t\t\t\t\t'setBinaryData(...) is deprecated and will be removed in a future version. Please consider switching to setBinaryDataAsync(...) instead.',\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t\titem.binary = data;\n\t\t\t\t\t},\n\t\t\t\t\tgetNodeParameter: this.getNodeParameter.bind(this),\n\t\t\t\t\tgetWorkflowStaticData: this.getWorkflowStaticData.bind(this),\n\t\t\t\t\thelpers: this.helpers,\n\t\t\t\t\titem: item.json,\n\t\t\t\t\tgetBinaryDataAsync: async (): Promise<IBinaryKeyData | undefined> => {\n\t\t\t\t\t\t// Fetch Binary Data, if available. Cannot check item with `if (item?.index)`, as index may be 0.\n\t\t\t\t\t\tif (item?.binary && item?.index !== undefined && item?.index !== null) {\n\t\t\t\t\t\t\tfor (const binaryPropertyName of Object.keys(item.binary)) {\n\t\t\t\t\t\t\t\titem.binary[binaryPropertyName].data = (\n\t\t\t\t\t\t\t\t\tawait this.helpers.getBinaryDataBuffer(item.index, binaryPropertyName)\n\t\t\t\t\t\t\t\t)?.toString('base64');\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// Return Data\n\t\t\t\t\t\treturn item.binary;\n\t\t\t\t\t},\n\t\t\t\t\tsetBinaryDataAsync: async (data: IBinaryKeyData) => {\n\t\t\t\t\t\t// Ensure data is present\n\t\t\t\t\t\tif (!data) {\n\t\t\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t\t\t'No data was provided to setBinaryDataAsync (data: IBinaryKeyData).',\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Set Binary Data\n\t\t\t\t\t\tfor (const binaryPropertyName of Object.keys(data)) {\n\t\t\t\t\t\t\tconst binaryItem = data[binaryPropertyName];\n\t\t\t\t\t\t\tdata[binaryPropertyName] = await this.helpers.setBinaryDataBuffer(\n\t\t\t\t\t\t\t\tbinaryItem,\n\t\t\t\t\t\t\t\tBuffer.from(binaryItem.data, 'base64'),\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Set Item Reference\n\t\t\t\t\t\titem.binary = data;\n\t\t\t\t\t},\n\t\t\t\t};\n\n\t\t\t\t// Make it possible to access data via $node, $parameter, ...\n\t\t\t\tconst dataProxy = this.getWorkflowDataProxy(itemIndex);\n\t\t\t\tObject.assign(sandbox, dataProxy);\n\n\t\t\t\tconst options: NodeVMOptions = {\n\t\t\t\t\tconsole: mode === 'manual' ? 'redirect' : 'inherit',\n\t\t\t\t\tsandbox,\n\t\t\t\t\trequire: vmResolver,\n\t\t\t\t};\n\n\t\t\t\tconst vm = new NodeVM(options as unknown as NodeVMOptions);\n\n\t\t\t\tif (mode === 'manual') {\n\t\t\t\t\tvm.on('console.log', this.sendMessageToUI.bind(this));\n\t\t\t\t}\n\n\t\t\t\t// Get the code to execute\n\t\t\t\tconst functionCode = this.getNodeParameter('functionCode', itemIndex) as string;\n\n\t\t\t\tlet jsonData: IDataObject;\n\t\t\t\ttry {\n\t\t\t\t\t// Execute the function code\n\t\t\t\t\tjsonData = await vm.run(\n\t\t\t\t\t\t`module.exports = async function() {${functionCode}\\n}()`,\n\t\t\t\t\t\t__dirname,\n\t\t\t\t\t);\n\t\t\t\t} catch (error) {\n\t\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\t\treturnData.push({ json: { error: error.message } });\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Try to find the line number which contains the error and attach to error message\n\t\t\t\t\t\tconst stackLines = error.stack.split('\\n');\n\t\t\t\t\t\tif (stackLines.length > 0) {\n\t\t\t\t\t\t\tstackLines.shift();\n\t\t\t\t\t\t\tconst lineParts = stackLines\n\t\t\t\t\t\t\t\t.find((line: string) => line.includes('FunctionItem'))\n\t\t\t\t\t\t\t\t.split(':');\n\t\t\t\t\t\t\tif (lineParts.length > 2) {\n\t\t\t\t\t\t\t\tconst lineNumber = lineParts.splice(-2, 1);\n\t\t\t\t\t\t\t\tif (!isNaN(lineNumber as number)) {\n\t\t\t\t\t\t\t\t\terror.message = `${error.message} [Line ${lineNumber} | Item Index: ${itemIndex}]`;\n\t\t\t\t\t\t\t\t\tthrow error;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\terror.message = `${error.message} [Item Index: ${itemIndex}]`;\n\n\t\t\t\t\t\tthrow error;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Do very basic validation of the data\n\t\t\t\tif (jsonData === undefined) {\n\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t'No data got returned. Always an object has to be returned!',\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tconst returnItem: INodeExecutionData = {\n\t\t\t\t\tjson: cleanupData(jsonData),\n\t\t\t\t\tpairedItem: {\n\t\t\t\t\t\titem: itemIndex,\n\t\t\t\t\t},\n\t\t\t\t};\n\n\t\t\t\tif (item.binary) {\n\t\t\t\t\treturnItem.binary = item.binary;\n\t\t\t\t}\n\n\t\t\t\treturnData.push(returnItem);\n\t\t\t} catch (error) {\n\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\treturnData.push({\n\t\t\t\t\t\tjson: {\n\t\t\t\t\t\t\terror: error.message,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tpairedItem: {\n\t\t\t\t\t\t\titem: itemIndex,\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\t\treturn [returnData];\n\t}\n}\n"],"mappings":"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","names":[]}