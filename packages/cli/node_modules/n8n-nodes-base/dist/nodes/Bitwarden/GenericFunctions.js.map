{"version":3,"sources":["../../../nodes/Bitwarden/GenericFunctions.ts"],"sourcesContent":["import type {\n\tIDataObject,\n\tIExecuteFunctions,\n\tIHttpRequestMethods,\n\tILoadOptionsFunctions,\n\tINodePropertyOptions,\n\tIRequestOptions,\n\tJsonObject,\n} from 'n8n-workflow';\nimport { NodeApiError } from 'n8n-workflow';\n\n/**\n * Return the access token URL based on the user's environment.\n */\nasync function getTokenUrl(this: IExecuteFunctions | ILoadOptionsFunctions) {\n\tconst { environment, domain } = await this.getCredentials('bitwardenApi');\n\n\treturn environment === 'cloudHosted'\n\t\t? 'https://identity.bitwarden.com/connect/token'\n\t\t: `${domain}/identity/connect/token`;\n}\n\n/**\n * Return the base API URL based on the user's environment.\n */\nasync function getBaseUrl(this: IExecuteFunctions | ILoadOptionsFunctions) {\n\tconst { environment, domain } = await this.getCredentials('bitwardenApi');\n\n\treturn environment === 'cloudHosted' ? 'https://api.bitwarden.com' : `${domain}/api`;\n}\n\n/**\n * Make an authenticated API request to Bitwarden.\n */\nexport async function bitwardenApiRequest(\n\tthis: IExecuteFunctions | ILoadOptionsFunctions,\n\tmethod: IHttpRequestMethods,\n\tendpoint: string,\n\tqs: IDataObject,\n\tbody: IDataObject,\n\ttoken: string,\n): Promise<any> {\n\tconst baseUrl = await getBaseUrl.call(this);\n\tconst options: IRequestOptions = {\n\t\theaders: {\n\t\t\t'user-agent': 'n8n',\n\t\t\tAuthorization: `Bearer ${token}`,\n\t\t\t'Content-Type': 'application/json',\n\t\t},\n\t\tmethod,\n\t\tqs,\n\t\tbody,\n\t\turi: `${baseUrl}${endpoint}`,\n\t\tjson: true,\n\t};\n\n\tif (!Object.keys(body).length) {\n\t\tdelete options.body;\n\t}\n\n\tif (!Object.keys(qs).length) {\n\t\tdelete options.qs;\n\t}\n\n\ttry {\n\t\treturn await this.helpers.request(options);\n\t} catch (error) {\n\t\tthrow new NodeApiError(this.getNode(), error as JsonObject);\n\t}\n}\n\n/**\n * Retrieve the access token needed for every API request to Bitwarden.\n */\nexport async function getAccessToken(\n\tthis: IExecuteFunctions | ILoadOptionsFunctions,\n): Promise<any> {\n\tconst credentials = await this.getCredentials('bitwardenApi');\n\n\tconst options: IRequestOptions = {\n\t\theaders: {\n\t\t\t'Content-Type': 'application/x-www-form-urlencoded',\n\t\t},\n\t\tmethod: 'POST',\n\t\tform: {\n\t\t\tclient_id: credentials.clientId,\n\t\t\tclient_secret: credentials.clientSecret,\n\t\t\tgrant_type: 'client_credentials',\n\t\t\tscope: 'api.organization',\n\t\t\tdeviceName: 'n8n',\n\t\t\tdeviceType: 2, // https://github.com/bitwarden/server/blob/master/src/Core/Enums/DeviceType.cs\n\t\t\tdeviceIdentifier: 'n8n',\n\t\t},\n\t\turi: await getTokenUrl.call(this),\n\t\tjson: true,\n\t};\n\n\ttry {\n\t\tconst { access_token } = await this.helpers.request(options);\n\t\treturn access_token;\n\t} catch (error) {\n\t\tthrow new NodeApiError(this.getNode(), error as JsonObject);\n\t}\n}\n\n/**\n * Supplement a `getAll` operation with `returnAll` and `limit` parameters.\n */\nexport async function handleGetAll(\n\tthis: IExecuteFunctions,\n\ti: number,\n\tmethod: IHttpRequestMethods,\n\tendpoint: string,\n\tqs: IDataObject,\n\tbody: IDataObject,\n\ttoken: string,\n) {\n\tconst responseData = await bitwardenApiRequest.call(this, method, endpoint, qs, body, token);\n\tconst returnAll = this.getNodeParameter('returnAll', i);\n\n\tif (returnAll) {\n\t\treturn responseData.data;\n\t} else {\n\t\tconst limit = this.getNodeParameter('limit', i);\n\t\treturn responseData.data.slice(0, limit);\n\t}\n}\n\n/**\n * Load a resource so that it can be selected by name from a dropdown.\n */\nexport async function loadResource(this: ILoadOptionsFunctions, resource: string) {\n\tconst returnData: INodePropertyOptions[] = [];\n\tconst token = await getAccessToken.call(this);\n\tconst endpoint = `/public/${resource}`;\n\n\tconst { data } = await bitwardenApiRequest.call(this, 'GET', endpoint, {}, {}, token as string);\n\n\tdata.forEach(({ id, name, externalId }: { id: string; name: string; externalId?: string }) => {\n\t\treturnData.push({\n\t\t\tname: externalId || name || id,\n\t\t\tvalue: id,\n\t\t});\n\t});\n\n\treturn returnData;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA,0BAA6B;AAK7B,eAAe,cAA6D;AAC3E,QAAM,EAAE,aAAa,OAAO,IAAI,MAAM,KAAK,eAAe,cAAc;AAExE,SAAO,gBAAgB,gBACpB,iDACA,GAAG,MAAM;AACb;AAKA,eAAe,aAA4D;AAC1E,QAAM,EAAE,aAAa,OAAO,IAAI,MAAM,KAAK,eAAe,cAAc;AAExE,SAAO,gBAAgB,gBAAgB,8BAA8B,GAAG,MAAM;AAC/E;AAKA,eAAsB,oBAErB,QACA,UACA,IACA,MACA,OACe;AACf,QAAM,UAAU,MAAM,WAAW,KAAK,IAAI;AAC1C,QAAM,UAA2B;AAAA,IAChC,SAAS;AAAA,MACR,cAAc;AAAA,MACd,eAAe,UAAU,KAAK;AAAA,MAC9B,gBAAgB;AAAA,IACjB;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,KAAK,GAAG,OAAO,GAAG,QAAQ;AAAA,IAC1B,MAAM;AAAA,EACP;AAEA,MAAI,CAAC,OAAO,KAAK,IAAI,EAAE,QAAQ;AAC9B,WAAO,QAAQ;AAAA,EAChB;AAEA,MAAI,CAAC,OAAO,KAAK,EAAE,EAAE,QAAQ;AAC5B,WAAO,QAAQ;AAAA,EAChB;AAEA,MAAI;AACH,WAAO,MAAM,KAAK,QAAQ,QAAQ,OAAO;AAAA,EAC1C,SAAS,OAAO;AACf,UAAM,IAAI,iCAAa,KAAK,QAAQ,GAAG,KAAmB;AAAA,EAC3D;AACD;AAKA,eAAsB,iBAEN;AACf,QAAM,cAAc,MAAM,KAAK,eAAe,cAAc;AAE5D,QAAM,UAA2B;AAAA,IAChC,SAAS;AAAA,MACR,gBAAgB;AAAA,IACjB;AAAA,IACA,QAAQ;AAAA,IACR,MAAM;AAAA,MACL,WAAW,YAAY;AAAA,MACvB,eAAe,YAAY;AAAA,MAC3B,YAAY;AAAA,MACZ,OAAO;AAAA,MACP,YAAY;AAAA,MACZ,YAAY;AAAA;AAAA,MACZ,kBAAkB;AAAA,IACnB;AAAA,IACA,KAAK,MAAM,YAAY,KAAK,IAAI;AAAA,IAChC,MAAM;AAAA,EACP;AAEA,MAAI;AACH,UAAM,EAAE,aAAa,IAAI,MAAM,KAAK,QAAQ,QAAQ,OAAO;AAC3D,WAAO;AAAA,EACR,SAAS,OAAO;AACf,UAAM,IAAI,iCAAa,KAAK,QAAQ,GAAG,KAAmB;AAAA,EAC3D;AACD;AAKA,eAAsB,aAErB,GACA,QACA,UACA,IACA,MACA,OACC;AACD,QAAM,eAAe,MAAM,oBAAoB,KAAK,MAAM,QAAQ,UAAU,IAAI,MAAM,KAAK;AAC3F,QAAM,YAAY,KAAK,iBAAiB,aAAa,CAAC;AAEtD,MAAI,WAAW;AACd,WAAO,aAAa;AAAA,EACrB,OAAO;AACN,UAAM,QAAQ,KAAK,iBAAiB,SAAS,CAAC;AAC9C,WAAO,aAAa,KAAK,MAAM,GAAG,KAAK;AAAA,EACxC;AACD;AAKA,eAAsB,aAA0C,UAAkB;AACjF,QAAM,aAAqC,CAAC;AAC5C,QAAM,QAAQ,MAAM,eAAe,KAAK,IAAI;AAC5C,QAAM,WAAW,WAAW,QAAQ;AAEpC,QAAM,EAAE,KAAK,IAAI,MAAM,oBAAoB,KAAK,MAAM,OAAO,UAAU,CAAC,GAAG,CAAC,GAAG,KAAe;AAE9F,OAAK,QAAQ,CAAC,EAAE,IAAI,MAAM,WAAW,MAAyD;AAC7F,eAAW,KAAK;AAAA,MACf,MAAM,cAAc,QAAQ;AAAA,MAC5B,OAAO;AAAA,IACR,CAAC;AAAA,EACF,CAAC;AAED,SAAO;AACR;","names":[]}