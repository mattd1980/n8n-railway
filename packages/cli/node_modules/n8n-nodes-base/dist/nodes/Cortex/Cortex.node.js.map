{"version":3,"sources":["../../../nodes/Cortex/Cortex.node.ts"],"sourcesContent":["import * as changeCase from 'change-case';\nimport { createHash } from 'crypto';\nimport upperFirst from 'lodash/upperFirst';\nimport type {\n\tIDataObject,\n\tIExecuteFunctions,\n\tILoadOptionsFunctions,\n\tINodeExecutionData,\n\tINodePropertyOptions,\n\tINodeType,\n\tINodeTypeDescription,\n} from 'n8n-workflow';\nimport { NodeConnectionTypes } from 'n8n-workflow';\n\nimport { analyzerFields, analyzersOperations } from './AnalyzerDescriptions';\nimport type { IJob } from './AnalyzerInterface';\nimport { cortexApiRequest, getEntityLabel, prepareParameters, splitTags } from './GenericFunctions';\nimport { jobFields, jobOperations } from './JobDescription';\nimport { responderFields, respondersOperations } from './ResponderDescription';\n\nexport class Cortex implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'Cortex',\n\t\tname: 'cortex',\n\t\ticon: 'file:cortex.svg',\n\t\tgroup: ['transform'],\n\t\tsubtitle: '={{$parameter[\"operation\"]+ \": \" + $parameter[\"resource\"]}}',\n\t\tversion: 1,\n\t\tdescription: 'Apply the Cortex analyzer/responder on the given entity',\n\t\tdefaults: {\n\t\t\tname: 'Cortex',\n\t\t},\n\t\tinputs: [NodeConnectionTypes.Main],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tcredentials: [\n\t\t\t{\n\t\t\t\tname: 'cortexApi',\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t],\n\t\tproperties: [\n\t\t\t// Node properties which the user gets displayed and\n\t\t\t// can change on the node.\n\t\t\t{\n\t\t\t\tdisplayName: 'Resource',\n\t\t\t\tname: 'resource',\n\t\t\t\ttype: 'options',\n\t\t\t\tnoDataExpression: true,\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Analyzer',\n\t\t\t\t\t\tvalue: 'analyzer',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Job',\n\t\t\t\t\t\tvalue: 'job',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Responder',\n\t\t\t\t\t\tvalue: 'responder',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'analyzer',\n\t\t\t\tdescription: 'Choose a resource',\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t\t...analyzersOperations,\n\t\t\t...analyzerFields,\n\t\t\t...respondersOperations,\n\t\t\t...responderFields,\n\t\t\t...jobOperations,\n\t\t\t...jobFields,\n\t\t],\n\t};\n\n\tmethods = {\n\t\tloadOptions: {\n\t\t\tasync loadActiveAnalyzers(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\t// request the enabled analyzers from instance\n\t\t\t\tconst requestResult = await cortexApiRequest.call(\n\t\t\t\t\tthis,\n\t\t\t\t\t'POST',\n\t\t\t\t\t'/analyzer/_search?range=all',\n\t\t\t\t);\n\n\t\t\t\tconst returnData: INodePropertyOptions[] = [];\n\n\t\t\t\tfor (const analyzer of requestResult) {\n\t\t\t\t\treturnData.push({\n\t\t\t\t\t\tname: analyzer.name as string,\n\t\t\t\t\t\tvalue: `${analyzer.id as string}::${analyzer.name as string}`,\n\t\t\t\t\t\tdescription: analyzer.description as string,\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\treturn returnData;\n\t\t\t},\n\n\t\t\tasync loadActiveResponders(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\t// request the enabled responders from instance\n\t\t\t\tconst requestResult = await cortexApiRequest.call(this, 'GET', '/responder');\n\n\t\t\t\tconst returnData: INodePropertyOptions[] = [];\n\t\t\t\tfor (const responder of requestResult) {\n\t\t\t\t\treturnData.push({\n\t\t\t\t\t\tname: responder.name as string,\n\t\t\t\t\t\tvalue: `${responder.id as string}::${responder.name as string}`,\n\t\t\t\t\t\tdescription: responder.description as string,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn returnData;\n\t\t\t},\n\n\t\t\tasync loadObservableOptions(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst selectedAnalyzerId = (this.getNodeParameter('analyzer') as string).split('::')[0];\n\t\t\t\t// request the analyzers from instance\n\t\t\t\tconst requestResult = await cortexApiRequest.call(\n\t\t\t\t\tthis,\n\t\t\t\t\t'GET',\n\t\t\t\t\t`/analyzer/${selectedAnalyzerId}`,\n\t\t\t\t);\n\n\t\t\t\t// parse supported observable types  into options\n\t\t\t\tconst returnData: INodePropertyOptions[] = [];\n\t\t\t\tfor (const dataType of requestResult.dataTypeList) {\n\t\t\t\t\treturnData.push({\n\t\t\t\t\t\tname: upperFirst(dataType as string),\n\t\t\t\t\t\tvalue: dataType as string,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn returnData;\n\t\t\t},\n\n\t\t\tasync loadDataTypeOptions(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst selectedResponderId = (this.getNodeParameter('responder') as string).split('::')[0];\n\t\t\t\t// request the responder from instance\n\t\t\t\tconst requestResult = await cortexApiRequest.call(\n\t\t\t\t\tthis,\n\t\t\t\t\t'GET',\n\t\t\t\t\t`/responder/${selectedResponderId}`,\n\t\t\t\t);\n\t\t\t\t// parse the accepted dataType into options\n\t\t\t\tconst returnData: INodePropertyOptions[] = [];\n\t\t\t\tfor (const dataType of requestResult.dataTypeList) {\n\t\t\t\t\treturnData.push({\n\t\t\t\t\t\tvalue: (dataType as string).split(':')[1],\n\t\t\t\t\t\tname: changeCase.capitalCase((dataType as string).split(':')[1]),\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn returnData;\n\t\t\t},\n\t\t},\n\t};\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t\tconst items = this.getInputData();\n\t\tconst returnData: IDataObject[] = [];\n\t\tconst length = items.length;\n\t\tlet responseData;\n\t\tconst resource = this.getNodeParameter('resource', 0);\n\t\tconst operation = this.getNodeParameter('operation', 0);\n\n\t\tfor (let i = 0; i < length; i++) {\n\t\t\ttry {\n\t\t\t\tif (resource === 'analyzer') {\n\t\t\t\t\t//https://github.com/TheHive-Project/CortexDocs/blob/master/api/api-guide.md#run\n\t\t\t\t\tif (operation === 'execute') {\n\t\t\t\t\t\tlet force = false;\n\n\t\t\t\t\t\tconst analyzer = this.getNodeParameter('analyzer', i) as string;\n\n\t\t\t\t\t\tconst observableType = this.getNodeParameter('observableType', i) as string;\n\n\t\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i);\n\n\t\t\t\t\t\tconst tlp = this.getNodeParameter('tlp', i) as string;\n\n\t\t\t\t\t\tconst body: IDataObject = {\n\t\t\t\t\t\t\tdataType: observableType,\n\t\t\t\t\t\t\ttlp,\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tif (additionalFields.force === true) {\n\t\t\t\t\t\t\tforce = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (observableType === 'file') {\n\t\t\t\t\t\t\tconst binaryPropertyName = this.getNodeParameter('binaryPropertyName', i);\n\t\t\t\t\t\t\tconst binaryData = this.helpers.assertBinaryData(i, binaryPropertyName);\n\t\t\t\t\t\t\tconst fileBufferData = await this.helpers.getBinaryDataBuffer(i, binaryPropertyName);\n\n\t\t\t\t\t\t\tconst options = {\n\t\t\t\t\t\t\t\tformData: {\n\t\t\t\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\t\t\t\tvalue: fileBufferData,\n\t\t\t\t\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\t\t\t\t\tcontentType: binaryData.mimeType,\n\t\t\t\t\t\t\t\t\t\t\tfilename: binaryData.fileName,\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t_json: JSON.stringify({\n\t\t\t\t\t\t\t\t\t\tdataType: observableType,\n\t\t\t\t\t\t\t\t\t\ttlp,\n\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\tresponseData = (await cortexApiRequest.call(\n\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t'POST',\n\t\t\t\t\t\t\t\t`/analyzer/${analyzer.split('::')[0]}/run`,\n\t\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t\t{ force },\n\t\t\t\t\t\t\t\t'',\n\t\t\t\t\t\t\t\toptions,\n\t\t\t\t\t\t\t)) as IJob;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst observableValue = this.getNodeParameter('observableValue', i) as string;\n\n\t\t\t\t\t\t\tbody.data = observableValue;\n\n\t\t\t\t\t\t\tresponseData = (await cortexApiRequest.call(\n\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t'POST',\n\t\t\t\t\t\t\t\t`/analyzer/${analyzer.split('::')[0]}/run`,\n\t\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t\t\t{ force },\n\t\t\t\t\t\t\t)) as IJob;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (additionalFields.timeout) {\n\t\t\t\t\t\t\tresponseData = await cortexApiRequest.call(\n\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t\t`/job/${responseData.id}/waitreport`,\n\t\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t\t{ atMost: `${additionalFields.timeout}second` },\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (resource === 'job') {\n\t\t\t\t\t//https://github.com/TheHive-Project/CortexDocs/blob/master/api/api-guide.md#get-details-1\n\t\t\t\t\tif (operation === 'get') {\n\t\t\t\t\t\tconst jobId = this.getNodeParameter('jobId', i) as string;\n\n\t\t\t\t\t\tresponseData = await cortexApiRequest.call(this, 'GET', `/job/${jobId}`);\n\t\t\t\t\t}\n\t\t\t\t\t//https://github.com/TheHive-Project/CortexDocs/blob/master/api/api-guide.md#get-details-and-report\n\t\t\t\t\tif (operation === 'report') {\n\t\t\t\t\t\tconst jobId = this.getNodeParameter('jobId', i) as string;\n\n\t\t\t\t\t\tresponseData = await cortexApiRequest.call(this, 'GET', `/job/${jobId}/report`);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (resource === 'responder') {\n\t\t\t\t\tif (operation === 'execute') {\n\t\t\t\t\t\tconst responderId = (this.getNodeParameter('responder', i) as string).split('::')[0];\n\n\t\t\t\t\t\tconst entityType = this.getNodeParameter('entityType', i) as string;\n\n\t\t\t\t\t\tconst isJSON = this.getNodeParameter('jsonObject', i) as boolean;\n\t\t\t\t\t\tlet body: IDataObject;\n\n\t\t\t\t\t\tif (isJSON) {\n\t\t\t\t\t\t\tconst entityJson = JSON.parse(this.getNodeParameter('objectData', i) as string);\n\n\t\t\t\t\t\t\tbody = {\n\t\t\t\t\t\t\t\tresponderId,\n\t\t\t\t\t\t\t\tlabel: getEntityLabel(entityJson as IDataObject),\n\t\t\t\t\t\t\t\tdataType: `thehive:${entityType}`,\n\t\t\t\t\t\t\t\tdata: entityJson,\n\t\t\t\t\t\t\t\ttlp: entityJson.tlp || 2,\n\t\t\t\t\t\t\t\tpap: entityJson.pap || 2,\n\t\t\t\t\t\t\t\tmessage: entityJson.message || '',\n\t\t\t\t\t\t\t\tparameters: [],\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst values = (this.getNodeParameter('parameters', i) as IDataObject)\n\t\t\t\t\t\t\t\t.values as IDataObject;\n\n\t\t\t\t\t\t\tbody = {\n\t\t\t\t\t\t\t\tresponderId,\n\t\t\t\t\t\t\t\tdataType: `thehive:${entityType}`,\n\t\t\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\t\t\t_type: entityType,\n\t\t\t\t\t\t\t\t\t...prepareParameters(values),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tif (entityType === 'alert') {\n\t\t\t\t\t\t\t\t// deal with alert artifacts\n\t\t\t\t\t\t\t\tconst artifacts = (body.data as IDataObject).artifacts as IDataObject;\n\n\t\t\t\t\t\t\t\tif (artifacts) {\n\t\t\t\t\t\t\t\t\tconst artifactValues = artifacts.artifactValues as IDataObject[];\n\n\t\t\t\t\t\t\t\t\tif (artifactValues) {\n\t\t\t\t\t\t\t\t\t\tconst artifactData = [];\n\n\t\t\t\t\t\t\t\t\t\tfor (const artifactvalue of artifactValues) {\n\t\t\t\t\t\t\t\t\t\t\tconst element: IDataObject = {};\n\n\t\t\t\t\t\t\t\t\t\t\telement.message = artifactvalue.message as string;\n\n\t\t\t\t\t\t\t\t\t\t\telement.tags = splitTags(artifactvalue.tags as string);\n\n\t\t\t\t\t\t\t\t\t\t\telement.dataType = artifactvalue.dataType as string;\n\n\t\t\t\t\t\t\t\t\t\t\telement.data = artifactvalue.data as string;\n\n\t\t\t\t\t\t\t\t\t\t\tif (artifactvalue.dataType === 'file') {\n\t\t\t\t\t\t\t\t\t\t\t\tconst binaryPropertyName = artifactvalue.binaryProperty as string;\n\t\t\t\t\t\t\t\t\t\t\t\tconst binaryData = this.helpers.assertBinaryData(i, binaryPropertyName);\n\n\t\t\t\t\t\t\t\t\t\t\t\telement.data = `${binaryData.fileName};${binaryData.mimeType};${binaryData.data}`;\n\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\tartifactData.push(element);\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t(body.data as IDataObject).artifacts = artifactData;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (entityType === 'case_artifact') {\n\t\t\t\t\t\t\t\t// deal with file observable\n\n\t\t\t\t\t\t\t\tif ((body.data as IDataObject).dataType === 'file') {\n\t\t\t\t\t\t\t\t\tconst binaryPropertyName = (body.data as IDataObject)\n\t\t\t\t\t\t\t\t\t\t.binaryPropertyName as string;\n\t\t\t\t\t\t\t\t\tconst binaryData = this.helpers.assertBinaryData(i, binaryPropertyName);\n\t\t\t\t\t\t\t\t\tconst fileBufferData = await this.helpers.getBinaryDataBuffer(\n\t\t\t\t\t\t\t\t\t\ti,\n\t\t\t\t\t\t\t\t\t\tbinaryPropertyName,\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\tconst sha256 = createHash('sha256').update(fileBufferData).digest('hex');\n\n\t\t\t\t\t\t\t\t\t(body.data as IDataObject).attachment = {\n\t\t\t\t\t\t\t\t\t\tname: binaryData.fileName,\n\t\t\t\t\t\t\t\t\t\thashes: [\n\t\t\t\t\t\t\t\t\t\t\tsha256,\n\t\t\t\t\t\t\t\t\t\t\tcreateHash('sha1').update(fileBufferData).digest('hex'),\n\t\t\t\t\t\t\t\t\t\t\tcreateHash('md5').update(fileBufferData).digest('hex'),\n\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\tsize: fileBufferData.byteLength,\n\t\t\t\t\t\t\t\t\t\tcontentType: binaryData.mimeType,\n\t\t\t\t\t\t\t\t\t\tid: sha256,\n\t\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\t\tdelete (body.data as IDataObject).binaryPropertyName;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// add the job label after getting all entity attributes\n\t\t\t\t\t\t\tbody = {\n\t\t\t\t\t\t\t\tlabel: getEntityLabel(body.data as IDataObject),\n\t\t\t\t\t\t\t\t...body,\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresponseData = (await cortexApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'POST',\n\t\t\t\t\t\t\t`/responder/${responderId}/run`,\n\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t)) as IJob;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (Array.isArray(responseData)) {\n\t\t\t\t\treturnData.push.apply(returnData, responseData as IDataObject[]);\n\t\t\t\t} else if (responseData !== undefined) {\n\t\t\t\t\treturnData.push(responseData as IDataObject);\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\treturnData.push({ error: error.message });\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\t\treturn [this.helpers.returnJsonArray(returnData)];\n\t}\n}\n"],"mappings":"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","names":["upperFirst"]}