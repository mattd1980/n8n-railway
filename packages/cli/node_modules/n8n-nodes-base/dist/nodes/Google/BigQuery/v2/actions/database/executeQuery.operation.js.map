{"version":3,"sources":["../../../../../../../nodes/Google/BigQuery/v2/actions/database/executeQuery.operation.ts"],"sourcesContent":["import type {\n\tIDataObject,\n\tIExecuteFunctions,\n\tINodeExecutionData,\n\tINodeProperties,\n} from 'n8n-workflow';\nimport { ApplicationError, NodeOperationError, sleep } from 'n8n-workflow';\n\nimport { getResolvables, updateDisplayOptions } from '@utils/utilities';\n\nimport type { ResponseWithJobReference } from '../../helpers/interfaces';\nimport { prepareOutput } from '../../helpers/utils';\nimport { googleBigQueryApiRequestAllItems, googleBigQueryApiRequest } from '../../transport';\n\nconst properties: INodeProperties[] = [\n\t{\n\t\tdisplayName: 'SQL Query',\n\t\tname: 'sqlQuery',\n\t\ttype: 'string',\n\t\tnoDataExpression: true,\n\t\ttypeOptions: {\n\t\t\teditor: 'sqlEditor',\n\t\t},\n\t\tdisplayOptions: {\n\t\t\thide: {\n\t\t\t\t'/options.useLegacySql': [true],\n\t\t\t},\n\t\t},\n\t\tdefault: '',\n\t\tplaceholder: 'SELECT * FROM dataset.table LIMIT 100',\n\t\tdescription:\n\t\t\t'SQL query to execute, you can find more information <a href=\"https://cloud.google.com/bigquery/docs/reference/standard-sql/query-syntax\" target=\"_blank\">here</a>. Standard SQL syntax used by default, but you can also use Legacy SQL syntax by using optinon \\'Use Legacy SQL\\'.',\n\t},\n\t{\n\t\tdisplayName: 'SQL Query',\n\t\tname: 'sqlQuery',\n\t\ttype: 'string',\n\t\tnoDataExpression: true,\n\t\ttypeOptions: {\n\t\t\teditor: 'sqlEditor',\n\t\t},\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\t'/options.useLegacySql': [true],\n\t\t\t},\n\t\t},\n\t\tdefault: '',\n\t\tplaceholder: 'SELECT * FROM [project:dataset.table] LIMIT 100;',\n\t\thint: 'Legacy SQL syntax',\n\t\tdescription:\n\t\t\t'SQL query to execute, you can find more information about Legacy SQL syntax <a href=\"https://cloud.google.com/bigquery/docs/reference/standard-sql/query-syntax\" target=\"_blank\">here</a>',\n\t},\n\t{\n\t\tdisplayName: 'Options',\n\t\tname: 'options',\n\t\ttype: 'collection',\n\t\tplaceholder: 'Add option',\n\t\tdefault: {},\n\t\toptions: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Default Dataset Name or ID',\n\t\t\t\tname: 'defaultDataset',\n\t\t\t\ttype: 'options',\n\t\t\t\ttypeOptions: {\n\t\t\t\t\tloadOptionsMethod: 'getDatasets',\n\t\t\t\t\tloadOptionsDependsOn: ['projectId.value'],\n\t\t\t\t},\n\t\t\t\tdefault: '',\n\t\t\t\tdescription:\n\t\t\t\t\t'If not set, all table names in the query string must be qualified in the format \\'datasetId.tableId\\'. Choose from the list, or specify an ID using an <a href=\"https://docs.n8n.io/code/expressions/\">expression</a>.',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Dry Run',\n\t\t\t\tname: 'dryRun',\n\t\t\t\ttype: 'boolean',\n\t\t\t\tdefault: false,\n\t\t\t\tdescription:\n\t\t\t\t\t\"Whether set to true BigQuery doesn't run the job. Instead, if the query is valid, BigQuery returns statistics about the job such as how many bytes would be processed. If the query is invalid, an error returns.\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Include Schema in Output',\n\t\t\t\tname: 'includeSchema',\n\t\t\t\ttype: 'boolean',\n\t\t\t\tdefault: false,\n\t\t\t\tdescription:\n\t\t\t\t\t\"Whether to include the schema in the output. If set to true, the output will contain key '_schema' with the schema of the table.\",\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\thide: {\n\t\t\t\t\t\trawOutput: [true],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Location (Region)',\n\t\t\t\tname: 'location',\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: '',\n\t\t\t\tplaceholder: 'e.g. europe-west3',\n\t\t\t\tdescription:\n\t\t\t\t\t'Location or the region where data would be stored and processed. Pricing for storage and analysis is also defined by location of data and reservations, more information <a href=\"https://cloud.google.com/bigquery/docs/locations\" target=\"_blank\">here</a>.',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Maximum Bytes Billed',\n\t\t\t\tname: 'maximumBytesBilled',\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: '',\n\t\t\t\tdescription:\n\t\t\t\t\t'Limits the bytes billed for this query. Queries with bytes billed above this limit will fail (without incurring a charge). String in <a href=\"https://developers.google.com/discovery/v1/type-format?utm_source=cloud.google.com&utm_medium=referral\" target=\"_blank\">Int64Value</a> format',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Max Results Per Page',\n\t\t\t\tname: 'maxResults',\n\t\t\t\ttype: 'number',\n\t\t\t\tdefault: 1000,\n\t\t\t\tdescription:\n\t\t\t\t\t'Maximum number of results to return per page of results. This is particularly useful when dealing with large datasets. It will not affect the total number of results returned, e.g. rows in a table. You can use LIMIT in your SQL query to limit the number of rows returned.',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Timeout',\n\t\t\t\tname: 'timeoutMs',\n\t\t\t\ttype: 'number',\n\t\t\t\tdefault: 10000,\n\t\t\t\thint: 'How long to wait for the query to complete, in milliseconds',\n\t\t\t\tdescription:\n\t\t\t\t\t'Specifies the maximum amount of time, in milliseconds, that the client is willing to wait for the query to complete. Be aware that the call is not guaranteed to wait for the specified timeout; it typically returns after around 200 seconds (200,000 milliseconds), even if the query is not complete.',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Raw Output',\n\t\t\t\tname: 'rawOutput',\n\t\t\t\ttype: 'boolean',\n\t\t\t\tdefault: false,\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\thide: {\n\t\t\t\t\t\tdryRun: [true],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Use Legacy SQL',\n\t\t\t\tname: 'useLegacySql',\n\t\t\t\ttype: 'boolean',\n\t\t\t\tdefault: false,\n\t\t\t\tdescription:\n\t\t\t\t\t\"Whether to use BigQuery's legacy SQL dialect for this query. If set to false, the query will use BigQuery's standard SQL.\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Return Integers as Numbers',\n\t\t\t\tname: 'returnAsNumbers',\n\t\t\t\ttype: 'boolean',\n\t\t\t\tdefault: false,\n\t\t\t\tdescription:\n\t\t\t\t\t'Whether all integer values will be returned as numbers. If set to false, all integer values will be returned as strings.',\n\t\t\t},\n\t\t],\n\t},\n];\n\nconst displayOptions = {\n\tshow: {\n\t\tresource: ['database'],\n\t\toperation: ['executeQuery'],\n\t},\n};\n\nexport const description = updateDisplayOptions(displayOptions, properties);\n\nexport async function execute(this: IExecuteFunctions): Promise<INodeExecutionData[]> {\n\tconst items = this.getInputData();\n\tconst length = items.length;\n\n\tconst returnData: INodeExecutionData[] = [];\n\n\tlet jobs = [];\n\tlet maxResults = 1000;\n\tlet timeoutMs = 10000;\n\n\tfor (let i = 0; i < length; i++) {\n\t\ttry {\n\t\t\tlet sqlQuery = this.getNodeParameter('sqlQuery', i) as string;\n\n\t\t\tconst options = this.getNodeParameter('options', i) as {\n\t\t\t\tdefaultDataset?: string;\n\t\t\t\tdryRun?: boolean;\n\t\t\t\tincludeSchema?: boolean;\n\t\t\t\tlocation?: string;\n\t\t\t\tmaximumBytesBilled?: string;\n\t\t\t\tmaxResults?: number;\n\t\t\t\ttimeoutMs?: number;\n\t\t\t\trawOutput?: boolean;\n\t\t\t\tuseLegacySql?: boolean;\n\t\t\t\treturnAsNumbers?: boolean;\n\t\t\t};\n\n\t\t\tconst projectId = this.getNodeParameter('projectId', i, undefined, {\n\t\t\t\textractValue: true,\n\t\t\t});\n\n\t\t\tfor (const resolvable of getResolvables(sqlQuery)) {\n\t\t\t\tsqlQuery = sqlQuery.replace(resolvable, this.evaluateExpression(resolvable, i) as string);\n\t\t\t}\n\n\t\t\tlet rawOutput = false;\n\t\t\tlet includeSchema = false;\n\n\t\t\tif (options.rawOutput !== undefined) {\n\t\t\t\trawOutput = options.rawOutput;\n\t\t\t\tdelete options.rawOutput;\n\t\t\t}\n\n\t\t\tif (options.includeSchema !== undefined) {\n\t\t\t\tincludeSchema = options.includeSchema;\n\t\t\t\tdelete options.includeSchema;\n\t\t\t}\n\n\t\t\tif (options.maxResults) {\n\t\t\t\tmaxResults = options.maxResults;\n\t\t\t\tdelete options.maxResults;\n\t\t\t}\n\n\t\t\tif (options.timeoutMs) {\n\t\t\t\ttimeoutMs = options.timeoutMs;\n\t\t\t\tdelete options.timeoutMs;\n\t\t\t}\n\n\t\t\tconst body: IDataObject = { ...options };\n\n\t\t\tbody.query = sqlQuery;\n\n\t\t\tif (body.defaultDataset) {\n\t\t\t\tbody.defaultDataset = {\n\t\t\t\t\tdatasetId: options.defaultDataset,\n\t\t\t\t\tprojectId,\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tif (body.useLegacySql === undefined) {\n\t\t\t\tbody.useLegacySql = false;\n\t\t\t}\n\n\t\t\t//https://cloud.google.com/bigquery/docs/reference/rest/v2/jobs/insert\n\t\t\tconst response: ResponseWithJobReference = await googleBigQueryApiRequest.call(\n\t\t\t\tthis,\n\t\t\t\t'POST',\n\t\t\t\t`/v2/projects/${projectId}/jobs`,\n\t\t\t\t{\n\t\t\t\t\tconfiguration: {\n\t\t\t\t\t\tquery: body,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t);\n\n\t\t\tif (!response?.jobReference?.jobId) {\n\t\t\t\tthrow new NodeOperationError(this.getNode(), `No job ID returned, item ${i}`, {\n\t\t\t\t\tdescription: `sql: ${sqlQuery}`,\n\t\t\t\t\titemIndex: i,\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tconst jobId = response?.jobReference?.jobId;\n\t\t\tconst raw = rawOutput || options.dryRun || false;\n\t\t\tconst location = options.location || response.jobReference.location;\n\n\t\t\tif (response.status?.state === 'DONE') {\n\t\t\t\tconst qs = { location, maxResults, timeoutMs };\n\n\t\t\t\t//https://cloud.google.com/bigquery/docs/reference/rest/v2/jobs/getQueryResults\n\t\t\t\tconst queryResponse: IDataObject = await googleBigQueryApiRequestAllItems.call(\n\t\t\t\t\tthis,\n\t\t\t\t\t'GET',\n\t\t\t\t\t`/v2/projects/${projectId}/queries/${jobId}`,\n\t\t\t\t\tundefined,\n\t\t\t\t\tqs,\n\t\t\t\t);\n\n\t\t\t\tif (body.returnAsNumbers === true) {\n\t\t\t\t\tconst numericDataTypes = ['INTEGER', 'NUMERIC', 'FLOAT', 'BIGNUMERIC']; // https://cloud.google.com/bigquery/docs/schemas#standard_sql_data_types\n\t\t\t\t\tconst schema: IDataObject = queryResponse?.schema as IDataObject;\n\t\t\t\t\tconst schemaFields: IDataObject[] = schema.fields as IDataObject[];\n\t\t\t\t\tconst schemaDataTypes: string[] = schemaFields?.map(\n\t\t\t\t\t\t(field: IDataObject) => field.type as string,\n\t\t\t\t\t);\n\t\t\t\t\tconst rows: IDataObject[] = queryResponse.rows as IDataObject[];\n\n\t\t\t\t\tfor (const row of rows) {\n\t\t\t\t\t\tif (!row?.f || !Array.isArray(row.f)) continue;\n\t\t\t\t\t\trow.f.forEach((entry: IDataObject, index: number) => {\n\t\t\t\t\t\t\tif (entry && typeof entry === 'object' && 'v' in entry) {\n\t\t\t\t\t\t\t\t// Skip this row if it's null or doesn't have 'f' as an array\n\t\t\t\t\t\t\t\tconst value = entry.v;\n\t\t\t\t\t\t\t\tif (numericDataTypes.includes(schemaDataTypes[index])) {\n\t\t\t\t\t\t\t\t\tentry.v = Number(value);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturnData.push(...prepareOutput.call(this, queryResponse, i, raw, includeSchema));\n\t\t\t} else {\n\t\t\t\tjobs.push({ jobId, projectId, i, raw, includeSchema, location });\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tif (this.continueOnFail()) {\n\t\t\t\tconst executionErrorData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\tthis.helpers.returnJsonArray({ error: error.message }),\n\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t);\n\t\t\t\treturnData.push(...executionErrorData);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif ((error.message as string).includes('location') || error.httpCode === '404') {\n\t\t\t\terror.description =\n\t\t\t\t\t\"Are you sure your table is in that region? You can specify the region using the 'Location' parameter from options.\";\n\t\t\t}\n\n\t\t\tif (error.httpCode === '403' && error.message.includes('Drive')) {\n\t\t\t\terror.description =\n\t\t\t\t\t'If your table(s) pull from a document in Google Drive, make sure that document is shared with your user';\n\t\t\t}\n\n\t\t\tthrow new NodeOperationError(this.getNode(), error as Error, {\n\t\t\t\titemIndex: i,\n\t\t\t\tdescription: error.description,\n\t\t\t});\n\t\t}\n\t}\n\n\tlet waitTime = 1000;\n\twhile (jobs.length > 0) {\n\t\tconst completedJobs: string[] = [];\n\n\t\tfor (const job of jobs) {\n\t\t\ttry {\n\t\t\t\tconst qs: IDataObject = job.location ? { location: job.location } : {};\n\n\t\t\t\tqs.maxResults = maxResults;\n\t\t\t\tqs.timeoutMs = timeoutMs;\n\n\t\t\t\t//https://cloud.google.com/bigquery/docs/reference/rest/v2/jobs/getQueryResults\n\t\t\t\tconst response: IDataObject = await googleBigQueryApiRequestAllItems.call(\n\t\t\t\t\tthis,\n\t\t\t\t\t'GET',\n\t\t\t\t\t`/v2/projects/${job.projectId}/queries/${job.jobId}`,\n\t\t\t\t\tundefined,\n\t\t\t\t\tqs,\n\t\t\t\t);\n\n\t\t\t\tif (response.jobComplete) {\n\t\t\t\t\tcompletedJobs.push(job.jobId);\n\n\t\t\t\t\treturnData.push(...prepareOutput.call(this, response, job.i, job.raw, job.includeSchema));\n\t\t\t\t}\n\t\t\t\tif ((response?.errors as IDataObject[])?.length) {\n\t\t\t\t\tconst errorMessages = (response.errors as IDataObject[]).map((error) => error.message);\n\t\t\t\t\tthrow new ApplicationError(\n\t\t\t\t\t\t`Error(s) ocurring while executing query from item ${job.i.toString()}: ${errorMessages.join(\n\t\t\t\t\t\t\t', ',\n\t\t\t\t\t\t)}`,\n\t\t\t\t\t\t{ level: 'warning' },\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\tconst executionErrorData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\tthis.helpers.returnJsonArray({ error: error.message }),\n\t\t\t\t\t\t{ itemData: { item: job.i } },\n\t\t\t\t\t);\n\t\t\t\t\treturnData.push(...executionErrorData);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tthrow new NodeOperationError(this.getNode(), error as Error, {\n\t\t\t\t\titemIndex: job.i,\n\t\t\t\t\tdescription: error.description,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tjobs = jobs.filter((job) => !completedJobs.includes(job.jobId));\n\n\t\tif (jobs.length > 0) {\n\t\t\tawait sleep(waitTime);\n\t\t\tif (waitTime < 30000) {\n\t\t\t\twaitTime = waitTime * 2;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn returnData;\n}\n"],"mappings":"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","names":[]}