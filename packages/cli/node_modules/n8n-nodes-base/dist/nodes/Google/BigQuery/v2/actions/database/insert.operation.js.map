{"version":3,"sources":["../../../../../../../nodes/Google/BigQuery/v2/actions/database/insert.operation.ts"],"sourcesContent":["import type {\n\tIDataObject,\n\tIExecuteFunctions,\n\tINodeExecutionData,\n\tINodeProperties,\n} from 'n8n-workflow';\nimport { NodeOperationError } from 'n8n-workflow';\nimport { v4 as uuid } from 'uuid';\n\nimport { generatePairedItemData, updateDisplayOptions } from '@utils/utilities';\n\nimport type { TableSchema } from '../../helpers/interfaces';\nimport { checkSchema, wrapData } from '../../helpers/utils';\nimport { googleBigQueryApiRequest } from '../../transport';\n\nconst properties: INodeProperties[] = [\n\t{\n\t\tdisplayName: 'Data Mode',\n\t\tname: 'dataMode',\n\t\ttype: 'options',\n\t\toptions: [\n\t\t\t{\n\t\t\t\tname: 'Auto-Map Input Data',\n\t\t\t\tvalue: 'autoMap',\n\t\t\t\tdescription: 'Use when node input properties match destination field names',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Map Each Field Below',\n\t\t\t\tvalue: 'define',\n\t\t\t\tdescription: 'Set the value for each destination field',\n\t\t\t},\n\t\t],\n\t\tdefault: 'autoMap',\n\t\tdescription: 'Whether to insert the input data this node receives in the new row',\n\t},\n\t{\n\t\tdisplayName:\n\t\t\t\"In this mode, make sure the incoming data fields are named the same as the columns in BigQuery. (Use an 'Edit Fields' node before this node to change them if required.)\",\n\t\tname: 'info',\n\t\ttype: 'notice',\n\t\tdefault: '',\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tdataMode: ['autoMap'],\n\t\t\t},\n\t\t},\n\t},\n\t{\n\t\tdisplayName: 'Fields to Send',\n\t\tname: 'fieldsUi',\n\t\tplaceholder: 'Add Field',\n\t\ttype: 'fixedCollection',\n\t\ttypeOptions: {\n\t\t\tmultipleValueButtonText: 'Add Field',\n\t\t\tmultipleValues: true,\n\t\t},\n\t\tdefault: {},\n\t\toptions: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Field',\n\t\t\t\tname: 'values',\n\t\t\t\tvalues: [\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Field Name or ID',\n\t\t\t\t\t\tname: 'fieldId',\n\t\t\t\t\t\ttype: 'options',\n\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t'Choose from the list, or specify an ID using an <a href=\"https://docs.n8n.io/code/expressions/\">expression</a>',\n\t\t\t\t\t\ttypeOptions: {\n\t\t\t\t\t\t\tloadOptionsDependsOn: ['projectId.value', 'datasetId.value', 'tableId.value'],\n\t\t\t\t\t\t\tloadOptionsMethod: 'getSchema',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Field Value',\n\t\t\t\t\t\tname: 'fieldValue',\n\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t],\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tdataMode: ['define'],\n\t\t\t},\n\t\t},\n\t},\n\t{\n\t\tdisplayName: 'Options',\n\t\tname: 'options',\n\t\ttype: 'collection',\n\t\tplaceholder: 'Add option',\n\t\tdefault: {},\n\t\toptions: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Batch Size',\n\t\t\t\tname: 'batchSize',\n\t\t\t\ttype: 'number',\n\t\t\t\tdefault: 100,\n\t\t\t\ttypeOptions: {\n\t\t\t\t\tminValue: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Ignore Unknown Values',\n\t\t\t\tname: 'ignoreUnknownValues',\n\t\t\t\ttype: 'boolean',\n\t\t\t\tdefault: false,\n\t\t\t\tdescription: 'Whether to gnore row values that do not match the schema',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Skip Invalid Rows',\n\t\t\t\tname: 'skipInvalidRows',\n\t\t\t\ttype: 'boolean',\n\t\t\t\tdefault: false,\n\t\t\t\tdescription: 'Whether to skip rows with values that do not match the schema',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Template Suffix',\n\t\t\t\tname: 'templateSuffix',\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: '',\n\t\t\t\tdescription:\n\t\t\t\t\t'Create a new table based on the destination table and insert rows into the new table. The new table will be named <code>{destinationTable}{templateSuffix}</code>',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Trace ID',\n\t\t\t\tname: 'traceId',\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: '',\n\t\t\t\tdescription:\n\t\t\t\t\t'Unique ID for the request, for debugging only. It is case-sensitive, limited to up to 36 ASCII characters. A UUID is recommended.',\n\t\t\t},\n\t\t],\n\t},\n];\n\nconst displayOptions = {\n\tshow: {\n\t\tresource: ['database'],\n\t\toperation: ['insert'],\n\t},\n};\n\nexport const description = updateDisplayOptions(displayOptions, properties);\n\nexport async function execute(this: IExecuteFunctions): Promise<INodeExecutionData[]> {\n\t// https://cloud.google.com/bigquery/docs/reference/rest/v2/tabledata/insertAll\n\tconst projectId = this.getNodeParameter('projectId', 0, undefined, {\n\t\textractValue: true,\n\t});\n\tconst datasetId = this.getNodeParameter('datasetId', 0, undefined, {\n\t\textractValue: true,\n\t});\n\tconst tableId = this.getNodeParameter('tableId', 0, undefined, {\n\t\textractValue: true,\n\t});\n\n\tconst options = this.getNodeParameter('options', 0);\n\tconst dataMode = this.getNodeParameter('dataMode', 0) as string;\n\n\tlet batchSize = 100;\n\tif (options.batchSize) {\n\t\tbatchSize = options.batchSize as number;\n\t\tdelete options.batchSize;\n\t}\n\n\tconst items = this.getInputData();\n\tconst length = items.length;\n\n\tconst returnData: INodeExecutionData[] = [];\n\tconst rows: IDataObject[] = [];\n\tconst body: IDataObject = {};\n\n\tObject.assign(body, options);\n\tif (body.traceId === undefined) {\n\t\tbody.traceId = uuid();\n\t}\n\n\tconst schema = (\n\t\tawait googleBigQueryApiRequest.call(\n\t\t\tthis,\n\t\t\t'GET',\n\t\t\t`/v2/projects/${projectId}/datasets/${datasetId}/tables/${tableId}`,\n\t\t\t{},\n\t\t)\n\t).schema as TableSchema;\n\n\tif (schema === undefined) {\n\t\tthrow new NodeOperationError(this.getNode(), 'The destination table has no defined schema');\n\t}\n\n\tfor (let i = 0; i < length; i++) {\n\t\ttry {\n\t\t\tconst record: IDataObject = {};\n\n\t\t\tif (dataMode === 'autoMap') {\n\t\t\t\tschema.fields.forEach(({ name }) => {\n\t\t\t\t\trecord[name] = items[i].json[name];\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (dataMode === 'define') {\n\t\t\t\tconst fields = this.getNodeParameter('fieldsUi.values', i, []) as IDataObject[];\n\n\t\t\t\tfields.forEach(({ fieldId, fieldValue }) => {\n\t\t\t\t\trecord[`${fieldId}`] = fieldValue;\n\t\t\t\t});\n\t\t\t}\n\n\t\t\trows.push({ json: checkSchema.call(this, schema, record, i) });\n\t\t} catch (error) {\n\t\t\tif (this.continueOnFail()) {\n\t\t\t\tconst executionErrorData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\tthis.helpers.returnJsonArray({ error: error.message }),\n\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t);\n\t\t\t\treturnData.push(...executionErrorData);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tthrow new NodeOperationError(this.getNode(), error.message as string, {\n\t\t\t\titemIndex: i,\n\t\t\t\tdescription: error?.description,\n\t\t\t});\n\t\t}\n\t}\n\n\tconst itemData = generatePairedItemData(items.length);\n\tfor (let i = 0; i < rows.length; i += batchSize) {\n\t\tconst batch = rows.slice(i, i + batchSize);\n\t\tbody.rows = batch;\n\n\t\tconst responseData = await googleBigQueryApiRequest.call(\n\t\t\tthis,\n\t\t\t'POST',\n\t\t\t`/v2/projects/${projectId}/datasets/${datasetId}/tables/${tableId}/insertAll`,\n\t\t\tbody,\n\t\t);\n\n\t\tif (responseData?.insertErrors && !options.skipInvalidRows) {\n\t\t\tconst errors: string[] = [];\n\t\t\tconst failedRows: number[] = [];\n\t\t\tconst stopedRows: number[] = [];\n\n\t\t\t(responseData.insertErrors as IDataObject[]).forEach((entry) => {\n\t\t\t\tconst invalidRows = (entry.errors as IDataObject[]).filter(\n\t\t\t\t\t(error) => error.reason !== 'stopped',\n\t\t\t\t);\n\t\t\t\tif (invalidRows.length) {\n\t\t\t\t\tconst entryIndex = (entry.index as number) + i;\n\t\t\t\t\terrors.push(\n\t\t\t\t\t\t`Row ${entryIndex} failed with error: ${invalidRows\n\t\t\t\t\t\t\t.map((error) => error.message)\n\t\t\t\t\t\t\t.join(', ')}`,\n\t\t\t\t\t);\n\t\t\t\t\tfailedRows.push(entryIndex);\n\t\t\t\t} else {\n\t\t\t\t\tconst entryIndex = (entry.index as number) + i;\n\t\t\t\t\tstopedRows.push(entryIndex);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (this.continueOnFail()) {\n\t\t\t\tconst executionErrorData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\tthis.helpers.returnJsonArray({ error: errors.join('\\n, ') }),\n\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t);\n\t\t\t\treturnData.push(...executionErrorData);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst failedMessage = `Problem inserting item(s) [${failedRows.join(', ')}]`;\n\t\t\tconst stoppedMessage = stopedRows.length\n\t\t\t\t? `, nothing was inserted item(s) [${stopedRows.join(', ')}]`\n\t\t\t\t: '';\n\t\t\tthrow new NodeOperationError(this.getNode(), `${failedMessage}${stoppedMessage}`, {\n\t\t\t\tdescription: errors.join('\\n, '),\n\t\t\t\titemIndex: i,\n\t\t\t});\n\t\t}\n\n\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\twrapData(responseData as IDataObject[]),\n\t\t\t{ itemData },\n\t\t);\n\n\t\treturnData.push(...executionData);\n\t}\n\n\treturn returnData;\n}\n"],"mappings":"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","names":["uuid"]}