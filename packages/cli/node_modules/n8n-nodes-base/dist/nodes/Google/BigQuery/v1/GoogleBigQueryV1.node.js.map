{"version":3,"sources":["../../../../../nodes/Google/BigQuery/v1/GoogleBigQueryV1.node.ts"],"sourcesContent":["import type {\n\tIDataObject,\n\tIExecuteFunctions,\n\tILoadOptionsFunctions,\n\tINodeExecutionData,\n\tINodePropertyOptions,\n\tINodeType,\n\tINodeTypeBaseDescription,\n\tINodeTypeDescription,\n\tJsonObject,\n} from 'n8n-workflow';\nimport { NodeConnectionTypes, NodeApiError } from 'n8n-workflow';\nimport { v4 as uuid } from 'uuid';\n\nimport { oldVersionNotice } from '@utils/descriptions';\n\nimport { googleApiRequest, googleApiRequestAllItems, simplify } from './GenericFunctions';\nimport { recordFields, recordOperations } from './RecordDescription';\nimport { generatePairedItemData } from '../../../../utils/utilities';\n\nconst versionDescription: INodeTypeDescription = {\n\tdisplayName: 'Google BigQuery',\n\tname: 'googleBigQuery',\n\ticon: 'file:googleBigQuery.svg',\n\tgroup: ['input'],\n\tversion: 1,\n\tsubtitle: '={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}',\n\tdescription: 'Consume Google BigQuery API',\n\tdefaults: {\n\t\tname: 'Google BigQuery',\n\t},\n\tinputs: [NodeConnectionTypes.Main],\n\toutputs: [NodeConnectionTypes.Main],\n\tcredentials: [\n\t\t{\n\t\t\tname: 'googleApi',\n\t\t\trequired: true,\n\t\t\tdisplayOptions: {\n\t\t\t\tshow: {\n\t\t\t\t\tauthentication: ['serviceAccount'],\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: 'googleBigQueryOAuth2Api',\n\t\t\trequired: true,\n\t\t\tdisplayOptions: {\n\t\t\t\tshow: {\n\t\t\t\t\tauthentication: ['oAuth2'],\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t],\n\tproperties: [\n\t\toldVersionNotice,\n\t\t{\n\t\t\tdisplayName: 'Authentication',\n\t\t\tname: 'authentication',\n\t\t\ttype: 'options',\n\t\t\tnoDataExpression: true,\n\t\t\toptions: [\n\t\t\t\t{\n\t\t\t\t\t// eslint-disable-next-line n8n-nodes-base/node-param-display-name-miscased\n\t\t\t\t\tname: 'OAuth2 (recommended)',\n\t\t\t\t\tvalue: 'oAuth2',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'Service Account',\n\t\t\t\t\tvalue: 'serviceAccount',\n\t\t\t\t},\n\t\t\t],\n\t\t\tdefault: 'oAuth2',\n\t\t},\n\t\t{\n\t\t\tdisplayName: 'Resource',\n\t\t\tname: 'resource',\n\t\t\ttype: 'options',\n\t\t\tnoDataExpression: true,\n\t\t\toptions: [\n\t\t\t\t{\n\t\t\t\t\tname: 'Record',\n\t\t\t\t\tvalue: 'record',\n\t\t\t\t},\n\t\t\t],\n\t\t\tdefault: 'record',\n\t\t},\n\t\t...recordOperations,\n\t\t...recordFields,\n\t],\n};\n\nexport class GoogleBigQueryV1 implements INodeType {\n\tdescription: INodeTypeDescription;\n\n\tconstructor(baseDescription: INodeTypeBaseDescription) {\n\t\tthis.description = {\n\t\t\t...baseDescription,\n\t\t\t...versionDescription,\n\t\t};\n\t}\n\n\tmethods = {\n\t\tloadOptions: {\n\t\t\tasync getProjects(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst returnData: INodePropertyOptions[] = [];\n\t\t\t\tconst { projects } = await googleApiRequest.call(this, 'GET', '/v2/projects');\n\t\t\t\tfor (const project of projects) {\n\t\t\t\t\treturnData.push({\n\t\t\t\t\t\tname: project.friendlyName as string,\n\t\t\t\t\t\tvalue: project.id,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn returnData;\n\t\t\t},\n\t\t\tasync getDatasets(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst projectId = this.getCurrentNodeParameter('projectId');\n\t\t\t\tconst returnData: INodePropertyOptions[] = [];\n\t\t\t\tconst { datasets } = await googleApiRequest.call(\n\t\t\t\t\tthis,\n\t\t\t\t\t'GET',\n\t\t\t\t\t`/v2/projects/${projectId}/datasets`,\n\t\t\t\t);\n\t\t\t\tfor (const dataset of datasets) {\n\t\t\t\t\treturnData.push({\n\t\t\t\t\t\tname: dataset.datasetReference.datasetId as string,\n\t\t\t\t\t\tvalue: dataset.datasetReference.datasetId,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn returnData;\n\t\t\t},\n\t\t\tasync getTables(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst projectId = this.getCurrentNodeParameter('projectId');\n\t\t\t\tconst datasetId = this.getCurrentNodeParameter('datasetId');\n\t\t\t\tconst returnData: INodePropertyOptions[] = [];\n\t\t\t\tconst { tables } = await googleApiRequest.call(\n\t\t\t\t\tthis,\n\t\t\t\t\t'GET',\n\t\t\t\t\t`/v2/projects/${projectId}/datasets/${datasetId}/tables`,\n\t\t\t\t);\n\t\t\t\tfor (const table of tables) {\n\t\t\t\t\treturnData.push({\n\t\t\t\t\t\tname: table.tableReference.tableId as string,\n\t\t\t\t\t\tvalue: table.tableReference.tableId,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn returnData;\n\t\t\t},\n\t\t},\n\t};\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t\tconst items = this.getInputData();\n\t\tconst returnData: INodeExecutionData[] = [];\n\t\tconst length = items.length;\n\t\tconst qs: IDataObject = {};\n\t\tlet responseData;\n\t\tconst resource = this.getNodeParameter('resource', 0);\n\t\tconst operation = this.getNodeParameter('operation', 0);\n\n\t\tif (resource === 'record') {\n\t\t\t// *********************************************************************\n\t\t\t//                               record\n\t\t\t// *********************************************************************\n\n\t\t\tif (operation === 'create') {\n\t\t\t\t// ----------------------------------\n\t\t\t\t//         record: create\n\t\t\t\t// ----------------------------------\n\n\t\t\t\t// https://cloud.google.com/bigquery/docs/reference/rest/v2/tabledata/insertAll\n\n\t\t\t\tconst projectId = this.getNodeParameter('projectId', 0) as string;\n\t\t\t\tconst datasetId = this.getNodeParameter('datasetId', 0) as string;\n\t\t\t\tconst tableId = this.getNodeParameter('tableId', 0) as string;\n\t\t\t\tconst rows: IDataObject[] = [];\n\t\t\t\tconst body: IDataObject = {};\n\n\t\t\t\tfor (let i = 0; i < length; i++) {\n\t\t\t\t\tconst options = this.getNodeParameter('options', i);\n\t\t\t\t\tObject.assign(body, options);\n\t\t\t\t\tif (body.traceId === undefined) {\n\t\t\t\t\t\tbody.traceId = uuid();\n\t\t\t\t\t}\n\t\t\t\t\tconst columns = this.getNodeParameter('columns', i) as string;\n\t\t\t\t\tconst columnList = columns.split(',').map((column) => column.trim());\n\t\t\t\t\tconst record: IDataObject = {};\n\n\t\t\t\t\tfor (const key of Object.keys(items[i].json)) {\n\t\t\t\t\t\tif (columnList.includes(key)) {\n\t\t\t\t\t\t\trecord[`${key}`] = items[i].json[key];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\trows.push({ json: record });\n\t\t\t\t}\n\n\t\t\t\tbody.rows = rows;\n\n\t\t\t\tconst itemData = generatePairedItemData(items.length);\n\n\t\t\t\ttry {\n\t\t\t\t\tresponseData = await googleApiRequest.call(\n\t\t\t\t\t\tthis,\n\t\t\t\t\t\t'POST',\n\t\t\t\t\t\t`/v2/projects/${projectId}/datasets/${datasetId}/tables/${tableId}/insertAll`,\n\t\t\t\t\t\tbody,\n\t\t\t\t\t);\n\n\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t\t{ itemData },\n\t\t\t\t\t);\n\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t} catch (error) {\n\t\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\t\tconst executionErrorData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray({ error: error.message }),\n\t\t\t\t\t\t\t{ itemData },\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturnData.push(...executionErrorData);\n\t\t\t\t\t}\n\t\t\t\t\tthrow new NodeApiError(this.getNode(), error as JsonObject, { itemIndex: 0 });\n\t\t\t\t}\n\t\t\t} else if (operation === 'getAll') {\n\t\t\t\t// ----------------------------------\n\t\t\t\t//         record: getAll\n\t\t\t\t// ----------------------------------\n\n\t\t\t\t// https://cloud.google.com/bigquery/docs/reference/rest/v2/tables/get\n\n\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', 0);\n\t\t\t\tconst projectId = this.getNodeParameter('projectId', 0) as string;\n\t\t\t\tconst datasetId = this.getNodeParameter('datasetId', 0) as string;\n\t\t\t\tconst tableId = this.getNodeParameter('tableId', 0) as string;\n\t\t\t\tconst simple = this.getNodeParameter('simple', 0) as boolean;\n\t\t\t\tlet fields;\n\n\t\t\t\tif (simple) {\n\t\t\t\t\tconst { schema } = await googleApiRequest.call(\n\t\t\t\t\t\tthis,\n\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t`/v2/projects/${projectId}/datasets/${datasetId}/tables/${tableId}`,\n\t\t\t\t\t\t{},\n\t\t\t\t\t);\n\t\t\t\t\tfields = (schema.fields || []).map((field: IDataObject) => field.name);\n\t\t\t\t}\n\n\t\t\t\tfor (let i = 0; i < length; i++) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst options = this.getNodeParameter('options', i);\n\t\t\t\t\t\tObject.assign(qs, options);\n\n\t\t\t\t\t\tif (qs.selectedFields) {\n\t\t\t\t\t\t\tfields = (qs.selectedFields as string).split(',');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (returnAll) {\n\t\t\t\t\t\t\tresponseData = await googleApiRequestAllItems.call(\n\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t'rows',\n\t\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t\t`/v2/projects/${projectId}/datasets/${datasetId}/tables/${tableId}/data`,\n\t\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tqs.maxResults = this.getNodeParameter('limit', i);\n\t\t\t\t\t\t\tresponseData = await googleApiRequest.call(\n\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t\t`/v2/projects/${projectId}/datasets/${datasetId}/tables/${tableId}/data`,\n\t\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (!returnAll) {\n\t\t\t\t\t\t\tresponseData = responseData.rows;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresponseData = simple\n\t\t\t\t\t\t\t? simplify(responseData as IDataObject[], fields as string[])\n\t\t\t\t\t\t\t: responseData;\n\n\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\t\t\tconst executionErrorData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\t\tthis.helpers.returnJsonArray({ error: error.message }),\n\t\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\treturnData.push(...executionErrorData);\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow new NodeApiError(this.getNode(), error as JsonObject, { itemIndex: i });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn [returnData];\n\t}\n}\n"],"mappings":"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","names":["uuid"]}