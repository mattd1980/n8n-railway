{"version":3,"sources":["../../../../../../nodes/Google/Sheet/v2/methods/resourceMapping.ts"],"sourcesContent":["import type {\n\tIDataObject,\n\tILoadOptionsFunctions,\n\tResourceMapperField,\n\tResourceMapperFields,\n} from 'n8n-workflow';\n\nimport { GoogleSheet } from '../helpers/GoogleSheet';\nimport { ROW_NUMBER, type ResourceLocator } from '../helpers/GoogleSheets.types';\nimport { getSpreadsheetId } from '../helpers/GoogleSheets.utils';\n\nexport async function getMappingColumns(\n\tthis: ILoadOptionsFunctions,\n): Promise<ResourceMapperFields> {\n\tconst documentId = this.getNodeParameter('documentId', 0) as IDataObject | null;\n\n\tif (!documentId) return { fields: [] };\n\n\tconst { mode, value } = documentId;\n\n\tconst spreadsheetId = getSpreadsheetId(this.getNode(), mode as ResourceLocator, value as string);\n\n\tconst sheet = new GoogleSheet(spreadsheetId, this);\n\tconst sheetWithinDocument = this.getNodeParameter('sheetName', undefined, {\n\t\textractValue: true,\n\t}) as string;\n\tconst { mode: sheetMode } = this.getNodeParameter('sheetName', 0) as { mode: ResourceLocator };\n\n\tconst { title: sheetName } = await sheet.spreadsheetGetSheet(\n\t\tthis.getNode(),\n\t\tsheetMode,\n\t\tsheetWithinDocument,\n\t);\n\n\tconst locationDefine = this.getNodeParameter(\n\t\t'options.locationDefine.values',\n\t\t0,\n\t\t{},\n\t) as IDataObject;\n\n\tlet columnNamesRow = 1;\n\n\tif (locationDefine.headerRow) {\n\t\tcolumnNamesRow = locationDefine.headerRow as number;\n\t}\n\n\tconst sheetData = await sheet.getData(\n\t\t`${sheetName}!${columnNamesRow}:${columnNamesRow}`,\n\t\t'FORMATTED_VALUE',\n\t);\n\n\tconst columns = sheet.testFilter(sheetData || [], 0, 0).filter((col) => col !== '');\n\n\tconst fields: ResourceMapperField[] = columns.map((col) => ({\n\t\tid: col,\n\t\tdisplayName: col,\n\t\trequired: false,\n\t\tdefaultMatch: col === 'id',\n\t\tdisplay: true,\n\t\ttype: 'string',\n\t\tcanBeUsedToMatch: true,\n\t}));\n\n\tconst operation = this.getNodeParameter('operation', 0) as string;\n\n\tif (operation === 'update') {\n\t\tfields.push({\n\t\t\tid: ROW_NUMBER,\n\t\t\tdisplayName: ROW_NUMBER,\n\t\t\trequired: false,\n\t\t\tdefaultMatch: false,\n\t\t\tdisplay: true,\n\t\t\ttype: 'string',\n\t\t\tcanBeUsedToMatch: true,\n\t\t\treadOnly: true,\n\t\t\tremoved: true,\n\t\t});\n\t}\n\n\treturn { fields };\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA,yBAA4B;AAC5B,0BAAiD;AACjD,IAAAA,uBAAiC;AAEjC,eAAsB,oBAEW;AAChC,QAAM,aAAa,KAAK,iBAAiB,cAAc,CAAC;AAExD,MAAI,CAAC,WAAY,QAAO,EAAE,QAAQ,CAAC,EAAE;AAErC,QAAM,EAAE,MAAM,MAAM,IAAI;AAExB,QAAM,oBAAgB,uCAAiB,KAAK,QAAQ,GAAG,MAAyB,KAAe;AAE/F,QAAM,QAAQ,IAAI,+BAAY,eAAe,IAAI;AACjD,QAAM,sBAAsB,KAAK,iBAAiB,aAAa,QAAW;AAAA,IACzE,cAAc;AAAA,EACf,CAAC;AACD,QAAM,EAAE,MAAM,UAAU,IAAI,KAAK,iBAAiB,aAAa,CAAC;AAEhE,QAAM,EAAE,OAAO,UAAU,IAAI,MAAM,MAAM;AAAA,IACxC,KAAK,QAAQ;AAAA,IACb;AAAA,IACA;AAAA,EACD;AAEA,QAAM,iBAAiB,KAAK;AAAA,IAC3B;AAAA,IACA;AAAA,IACA,CAAC;AAAA,EACF;AAEA,MAAI,iBAAiB;AAErB,MAAI,eAAe,WAAW;AAC7B,qBAAiB,eAAe;AAAA,EACjC;AAEA,QAAM,YAAY,MAAM,MAAM;AAAA,IAC7B,GAAG,SAAS,IAAI,cAAc,IAAI,cAAc;AAAA,IAChD;AAAA,EACD;AAEA,QAAM,UAAU,MAAM,WAAW,aAAa,CAAC,GAAG,GAAG,CAAC,EAAE,OAAO,CAAC,QAAQ,QAAQ,EAAE;AAElF,QAAM,SAAgC,QAAQ,IAAI,CAAC,SAAS;AAAA,IAC3D,IAAI;AAAA,IACJ,aAAa;AAAA,IACb,UAAU;AAAA,IACV,cAAc,QAAQ;AAAA,IACtB,SAAS;AAAA,IACT,MAAM;AAAA,IACN,kBAAkB;AAAA,EACnB,EAAE;AAEF,QAAM,YAAY,KAAK,iBAAiB,aAAa,CAAC;AAEtD,MAAI,cAAc,UAAU;AAC3B,WAAO,KAAK;AAAA,MACX,IAAI;AAAA,MACJ,aAAa;AAAA,MACb,UAAU;AAAA,MACV,cAAc;AAAA,MACd,SAAS;AAAA,MACT,MAAM;AAAA,MACN,kBAAkB;AAAA,MAClB,UAAU;AAAA,MACV,SAAS;AAAA,IACV,CAAC;AAAA,EACF;AAEA,SAAO,EAAE,OAAO;AACjB;","names":["import_GoogleSheets"]}