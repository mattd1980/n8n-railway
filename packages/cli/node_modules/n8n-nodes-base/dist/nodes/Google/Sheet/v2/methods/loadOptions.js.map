{"version":3,"sources":["../../../../../../nodes/Google/Sheet/v2/methods/loadOptions.ts"],"sourcesContent":["import type { IDataObject, ILoadOptionsFunctions, INodePropertyOptions } from 'n8n-workflow';\nimport { NodeOperationError } from 'n8n-workflow';\n\nimport { GoogleSheet } from '../helpers/GoogleSheet';\nimport type { ResourceLocator } from '../helpers/GoogleSheets.types';\nimport { getSpreadsheetId } from '../helpers/GoogleSheets.utils';\n\nexport async function getSheets(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\tconst documentId = this.getNodeParameter('documentId', 0) as IDataObject | null;\n\n\tif (!documentId) return [];\n\n\tconst { mode, value } = documentId;\n\n\tconst spreadsheetId = getSpreadsheetId(this.getNode(), mode as ResourceLocator, value as string);\n\n\tconst sheet = new GoogleSheet(spreadsheetId, this);\n\tconst responseData = await sheet.spreadsheetGetSheets();\n\n\tif (responseData === undefined) {\n\t\tthrow new NodeOperationError(this.getNode(), 'No data got returned');\n\t}\n\n\tconst returnData: INodePropertyOptions[] = [];\n\tfor (const entry of responseData.sheets!) {\n\t\tif (entry.properties!.sheetType !== 'GRID') {\n\t\t\tcontinue;\n\t\t}\n\n\t\treturnData.push({\n\t\t\tname: entry.properties!.title as string,\n\t\t\tvalue: entry.properties!.sheetId as unknown as string,\n\t\t});\n\t}\n\n\treturn returnData;\n}\n\nexport async function getSheetHeaderRow(\n\tthis: ILoadOptionsFunctions,\n): Promise<INodePropertyOptions[]> {\n\tconst documentId = this.getNodeParameter('documentId', 0) as IDataObject | null;\n\n\tif (!documentId) return [];\n\n\tconst { mode, value } = documentId;\n\n\tconst spreadsheetId = getSpreadsheetId(this.getNode(), mode as ResourceLocator, value as string);\n\n\tconst sheet = new GoogleSheet(spreadsheetId, this);\n\tconst sheetWithinDocument = this.getNodeParameter('sheetName', undefined, {\n\t\textractValue: true,\n\t}) as string;\n\tconst { mode: sheetMode } = this.getNodeParameter('sheetName', 0) as {\n\t\tmode: ResourceLocator;\n\t};\n\n\tconst { title: sheetName } = await sheet.spreadsheetGetSheet(\n\t\tthis.getNode(),\n\t\tsheetMode,\n\t\tsheetWithinDocument,\n\t);\n\tconst sheetData = await sheet.getData(`${sheetName}!1:1`, 'FORMATTED_VALUE');\n\n\tif (sheetData === undefined) {\n\t\tthrow new NodeOperationError(this.getNode(), 'No data got returned');\n\t}\n\n\tconst columns = sheet.testFilter(sheetData, 0, 0);\n\n\tconst returnData: INodePropertyOptions[] = [];\n\n\tfor (const column of columns) {\n\t\treturnData.push({\n\t\t\tname: column as unknown as string,\n\t\t\tvalue: column as unknown as string,\n\t\t});\n\t}\n\n\treturn returnData;\n}\n\nexport async function getSheetHeaderRowAndAddColumn(\n\tthis: ILoadOptionsFunctions,\n): Promise<INodePropertyOptions[]> {\n\tconst returnData = await getSheetHeaderRow.call(this);\n\treturnData.push({\n\t\tname: 'New column ...',\n\t\tvalue: 'newColumn',\n\t});\n\tconst columnToMatchOn = this.getNodeParameter('columnToMatchOn', 0) as string;\n\treturn returnData.filter((column) => column.value !== columnToMatchOn);\n}\n\nexport async function getSheetHeaderRowWithGeneratedColumnNames(\n\tthis: ILoadOptionsFunctions,\n): Promise<INodePropertyOptions[]> {\n\tconst returnData = await getSheetHeaderRow.call(this);\n\treturn returnData.map((column, i) => {\n\t\tif (column.value !== '') return column;\n\t\tconst indexBasedValue = `col_${i + 1}`;\n\t\treturn {\n\t\t\tname: indexBasedValue,\n\t\t\tvalue: indexBasedValue,\n\t\t};\n\t});\n}\n\nexport async function getSheetHeaderRowAndSkipEmpty(\n\tthis: ILoadOptionsFunctions,\n): Promise<INodePropertyOptions[]> {\n\tconst returnData = await getSheetHeaderRow.call(this);\n\treturn returnData.filter((column) => column.value);\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,0BAAmC;AAEnC,yBAA4B;AAE5B,0BAAiC;AAEjC,eAAsB,YAAwE;AAC7F,QAAM,aAAa,KAAK,iBAAiB,cAAc,CAAC;AAExD,MAAI,CAAC,WAAY,QAAO,CAAC;AAEzB,QAAM,EAAE,MAAM,MAAM,IAAI;AAExB,QAAM,oBAAgB,sCAAiB,KAAK,QAAQ,GAAG,MAAyB,KAAe;AAE/F,QAAM,QAAQ,IAAI,+BAAY,eAAe,IAAI;AACjD,QAAM,eAAe,MAAM,MAAM,qBAAqB;AAEtD,MAAI,iBAAiB,QAAW;AAC/B,UAAM,IAAI,uCAAmB,KAAK,QAAQ,GAAG,sBAAsB;AAAA,EACpE;AAEA,QAAM,aAAqC,CAAC;AAC5C,aAAW,SAAS,aAAa,QAAS;AACzC,QAAI,MAAM,WAAY,cAAc,QAAQ;AAC3C;AAAA,IACD;AAEA,eAAW,KAAK;AAAA,MACf,MAAM,MAAM,WAAY;AAAA,MACxB,OAAO,MAAM,WAAY;AAAA,IAC1B,CAAC;AAAA,EACF;AAEA,SAAO;AACR;AAEA,eAAsB,oBAEa;AAClC,QAAM,aAAa,KAAK,iBAAiB,cAAc,CAAC;AAExD,MAAI,CAAC,WAAY,QAAO,CAAC;AAEzB,QAAM,EAAE,MAAM,MAAM,IAAI;AAExB,QAAM,oBAAgB,sCAAiB,KAAK,QAAQ,GAAG,MAAyB,KAAe;AAE/F,QAAM,QAAQ,IAAI,+BAAY,eAAe,IAAI;AACjD,QAAM,sBAAsB,KAAK,iBAAiB,aAAa,QAAW;AAAA,IACzE,cAAc;AAAA,EACf,CAAC;AACD,QAAM,EAAE,MAAM,UAAU,IAAI,KAAK,iBAAiB,aAAa,CAAC;AAIhE,QAAM,EAAE,OAAO,UAAU,IAAI,MAAM,MAAM;AAAA,IACxC,KAAK,QAAQ;AAAA,IACb;AAAA,IACA;AAAA,EACD;AACA,QAAM,YAAY,MAAM,MAAM,QAAQ,GAAG,SAAS,QAAQ,iBAAiB;AAE3E,MAAI,cAAc,QAAW;AAC5B,UAAM,IAAI,uCAAmB,KAAK,QAAQ,GAAG,sBAAsB;AAAA,EACpE;AAEA,QAAM,UAAU,MAAM,WAAW,WAAW,GAAG,CAAC;AAEhD,QAAM,aAAqC,CAAC;AAE5C,aAAW,UAAU,SAAS;AAC7B,eAAW,KAAK;AAAA,MACf,MAAM;AAAA,MACN,OAAO;AAAA,IACR,CAAC;AAAA,EACF;AAEA,SAAO;AACR;AAEA,eAAsB,gCAEa;AAClC,QAAM,aAAa,MAAM,kBAAkB,KAAK,IAAI;AACpD,aAAW,KAAK;AAAA,IACf,MAAM;AAAA,IACN,OAAO;AAAA,EACR,CAAC;AACD,QAAM,kBAAkB,KAAK,iBAAiB,mBAAmB,CAAC;AAClE,SAAO,WAAW,OAAO,CAAC,WAAW,OAAO,UAAU,eAAe;AACtE;AAEA,eAAsB,4CAEa;AAClC,QAAM,aAAa,MAAM,kBAAkB,KAAK,IAAI;AACpD,SAAO,WAAW,IAAI,CAAC,QAAQ,MAAM;AACpC,QAAI,OAAO,UAAU,GAAI,QAAO;AAChC,UAAM,kBAAkB,OAAO,IAAI,CAAC;AACpC,WAAO;AAAA,MACN,MAAM;AAAA,MACN,OAAO;AAAA,IACR;AAAA,EACD,CAAC;AACF;AAEA,eAAsB,gCAEa;AAClC,QAAM,aAAa,MAAM,kBAAkB,KAAK,IAAI;AACpD,SAAO,WAAW,OAAO,CAAC,WAAW,OAAO,KAAK;AAClD;","names":[]}