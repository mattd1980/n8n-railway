{"version":3,"sources":["../../../../../nodes/Google/Firebase/RealtimeDatabase/GoogleFirebaseRealtimeDatabase.node.ts"],"sourcesContent":["import type {\n\tIExecuteFunctions,\n\tIDataObject,\n\tILoadOptionsFunctions,\n\tINodeExecutionData,\n\tINodePropertyOptions,\n\tINodeType,\n\tINodeTypeDescription,\n\tJsonObject,\n\tIHttpRequestMethods,\n} from 'n8n-workflow';\nimport { NodeApiError, NodeConnectionTypes, NodeOperationError } from 'n8n-workflow';\n\nimport { googleApiRequest, googleApiRequestAllItems } from './GenericFunctions';\n\nexport class GoogleFirebaseRealtimeDatabase implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'Google Cloud Realtime Database',\n\t\tname: 'googleFirebaseRealtimeDatabase',\n\t\ticon: 'file:googleFirebaseRealtimeDatabase.svg',\n\t\tgroup: ['input'],\n\t\tversion: 1,\n\t\tsubtitle: '={{$parameter[\"operation\"]}}',\n\t\tdescription: 'Interact with Google Firebase - Realtime Database API',\n\t\tdefaults: {\n\t\t\tname: 'Google Cloud Realtime Database',\n\t\t},\n\t\tusableAsTool: true,\n\t\tinputs: [NodeConnectionTypes.Main],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tcredentials: [\n\t\t\t{\n\t\t\t\tname: 'googleFirebaseRealtimeDatabaseOAuth2Api',\n\t\t\t},\n\t\t],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Project Name or ID',\n\t\t\t\tname: 'projectId',\n\t\t\t\ttype: 'options',\n\t\t\t\tdefault: '',\n\t\t\t\ttypeOptions: {\n\t\t\t\t\tloadOptionsMethod: 'getProjects',\n\t\t\t\t},\n\t\t\t\tdescription:\n\t\t\t\t\t'As displayed in firebase console URL. Choose from the list, or specify an ID using an <a href=\"https://docs.n8n.io/code/expressions/\">expression</a>.',\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Operation',\n\t\t\t\tname: 'operation',\n\t\t\t\ttype: 'options',\n\t\t\t\tnoDataExpression: true,\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Create',\n\t\t\t\t\t\tvalue: 'create',\n\t\t\t\t\t\tdescription: 'Write data to a database',\n\t\t\t\t\t\taction: 'Write data to a database',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Delete',\n\t\t\t\t\t\tvalue: 'delete',\n\t\t\t\t\t\tdescription: 'Delete data from a database',\n\t\t\t\t\t\taction: 'Delete data from a database',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Get',\n\t\t\t\t\t\tvalue: 'get',\n\t\t\t\t\t\tdescription: 'Get a record from a database',\n\t\t\t\t\t\taction: 'Get a record from a database',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Push',\n\t\t\t\t\t\tvalue: 'push',\n\t\t\t\t\t\tdescription: 'Append to a list of data',\n\t\t\t\t\t\taction: 'Append to a list of data',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Update',\n\t\t\t\t\t\tvalue: 'update',\n\t\t\t\t\t\tdescription: 'Update item on a database',\n\t\t\t\t\t\taction: 'Update item in a database',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'create',\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Object Path',\n\t\t\t\tname: 'path',\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: '',\n\t\t\t\tplaceholder: 'e.g. /app/users',\n\t\t\t\t// eslint-disable-next-line n8n-nodes-base/node-param-description-miscased-json\n\t\t\t\tdescription: 'Object path on database. Do not append .json.',\n\t\t\t\trequired: true,\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\thide: {\n\t\t\t\t\t\toperation: ['get'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Object Path',\n\t\t\t\tname: 'path',\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: '',\n\t\t\t\tplaceholder: 'e.g. /app/users',\n\t\t\t\t// eslint-disable-next-line n8n-nodes-base/node-param-description-miscased-json\n\t\t\t\tdescription: 'Object path on database. Do not append .json.',\n\t\t\t\thint: 'Leave blank to get a whole database object',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['get'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Columns / Attributes',\n\t\t\t\tname: 'attributes',\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: '',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['create', 'push', 'update'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdescription: 'Attributes to save',\n\t\t\t\trequired: true,\n\t\t\t\tplaceholder: 'age, name, city',\n\t\t\t},\n\t\t],\n\t};\n\n\tmethods = {\n\t\tloadOptions: {\n\t\t\tasync getProjects(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst projects = await googleApiRequestAllItems.call(\n\t\t\t\t\tthis,\n\t\t\t\t\t'',\n\t\t\t\t\t'GET',\n\t\t\t\t\t'results',\n\t\t\t\t\t{},\n\t\t\t\t\t{},\n\t\t\t\t\t{},\n\t\t\t\t\t'https://firebase.googleapis.com/v1beta1/projects',\n\t\t\t\t);\n\n\t\t\t\tconst returnData = projects\n\t\t\t\t\t// select only realtime database projects\n\t\t\t\t\t.filter(\n\t\t\t\t\t\t(project: IDataObject) => (project.resources as IDataObject).realtimeDatabaseInstance,\n\t\t\t\t\t)\n\t\t\t\t\t.map((project: IDataObject) => ({\n\t\t\t\t\t\tname: project.projectId,\n\t\t\t\t\t\tvalue: (project.resources as IDataObject).realtimeDatabaseInstance,\n\t\t\t\t\t})) as INodePropertyOptions[];\n\n\t\t\t\treturn returnData;\n\t\t\t},\n\t\t},\n\t};\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t\tconst items = this.getInputData();\n\t\tconst returnData: INodeExecutionData[] = [];\n\t\tconst length = items.length;\n\t\tlet responseData;\n\t\tconst operation = this.getNodeParameter('operation', 0);\n\t\t//https://firebase.google.com/docs/reference/rest/database\n\n\t\tif (\n\t\t\t['push', 'create', 'update'].includes(operation) &&\n\t\t\titems.length === 1 &&\n\t\t\tObject.keys(items[0].json).length === 0\n\t\t) {\n\t\t\tthrow new NodeOperationError(this.getNode(), `The ${operation} operation needs input data`);\n\t\t}\n\n\t\tfor (let i = 0; i < length; i++) {\n\t\t\ttry {\n\t\t\t\tconst projectId = this.getNodeParameter('projectId', i) as string;\n\n\t\t\t\tlet method: IHttpRequestMethods = 'GET',\n\t\t\t\t\tattributes = '';\n\t\t\t\tconst document: IDataObject = {};\n\t\t\t\tif (operation === 'create') {\n\t\t\t\t\tmethod = 'PUT';\n\t\t\t\t\tattributes = this.getNodeParameter('attributes', i) as string;\n\t\t\t\t} else if (operation === 'delete') {\n\t\t\t\t\tmethod = 'DELETE';\n\t\t\t\t} else if (operation === 'get') {\n\t\t\t\t\tmethod = 'GET';\n\t\t\t\t} else if (operation === 'push') {\n\t\t\t\t\tmethod = 'POST';\n\t\t\t\t\tattributes = this.getNodeParameter('attributes', i) as string;\n\t\t\t\t} else if (operation === 'update') {\n\t\t\t\t\tmethod = 'PATCH';\n\t\t\t\t\tattributes = this.getNodeParameter('attributes', i) as string;\n\t\t\t\t}\n\n\t\t\t\tif (attributes) {\n\t\t\t\t\tconst attributeList = attributes.split(',').map((el) => el.trim());\n\t\t\t\t\tattributeList.map((attribute: string) => {\n\t\t\t\t\t\tif (items[i].json.hasOwnProperty(attribute)) {\n\t\t\t\t\t\t\tdocument[attribute] = items[i].json[attribute];\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tresponseData = await googleApiRequest.call(\n\t\t\t\t\tthis,\n\t\t\t\t\tprojectId,\n\t\t\t\t\tmethod,\n\t\t\t\t\tthis.getNodeParameter('path', i) as string,\n\t\t\t\t\tdocument,\n\t\t\t\t);\n\n\t\t\t\tif (responseData === null) {\n\t\t\t\t\tif (operation === 'get') {\n\t\t\t\t\t\tthrow new NodeApiError(this.getNode(), responseData as JsonObject, {\n\t\t\t\t\t\t\tmessage: 'Requested entity was not found.',\n\t\t\t\t\t\t});\n\t\t\t\t\t} else if (method === 'DELETE') {\n\t\t\t\t\t\tresponseData = { success: true };\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\tconst executionErrorData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\tthis.helpers.returnJsonArray({ error: error.message }),\n\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t);\n\t\t\t\t\treturnData.push(...executionErrorData);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tthrow error;\n\t\t\t}\n\n\t\t\tif (typeof responseData === 'string' || typeof responseData === 'number') {\n\t\t\t\tresponseData = {\n\t\t\t\t\t[this.getNodeParameter('path', i) as string]: responseData,\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t{ itemData: { item: i } },\n\t\t\t);\n\t\t\treturnData.push(...executionData);\n\t\t}\n\n\t\treturn [returnData];\n\t}\n}\n"],"mappings":"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","names":[]}