{"version":3,"sources":["../../../../../nodes/Google/Firebase/CloudFirestore/GoogleFirebaseCloudFirestore.node.ts"],"sourcesContent":["import type {\n\tIExecuteFunctions,\n\tIDataObject,\n\tILoadOptionsFunctions,\n\tINodeExecutionData,\n\tINodePropertyOptions,\n\tINodeType,\n\tINodeTypeDescription,\n} from 'n8n-workflow';\nimport { NodeConnectionTypes, jsonParse } from 'n8n-workflow';\n\nimport { collectionFields, collectionOperations } from './CollectionDescription';\nimport { documentFields, documentOperations } from './DocumentDescription';\nimport {\n\tfullDocumentToJson,\n\tgoogleApiRequest,\n\tgoogleApiRequestAllItems,\n\tjsonToDocument,\n} from './GenericFunctions';\nimport { generatePairedItemData } from '../../../../utils/utilities';\n\nexport class GoogleFirebaseCloudFirestore implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'Google Cloud Firestore',\n\t\tname: 'googleFirebaseCloudFirestore',\n\t\t// eslint-disable-next-line n8n-nodes-base/node-class-description-icon-not-svg\n\t\ticon: 'file:googleFirebaseCloudFirestore.png',\n\t\tgroup: ['input'],\n\t\tversion: [1, 1.1],\n\t\tsubtitle: '={{$parameter[\"resource\"] + \": \" + $parameter[\"operation\"]}}',\n\t\tdescription: 'Interact with Google Firebase - Cloud Firestore API',\n\t\tdefaults: {\n\t\t\tname: 'Google Cloud Firestore',\n\t\t},\n\t\tusableAsTool: true,\n\t\tinputs: [NodeConnectionTypes.Main],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tcredentials: [\n\t\t\t{\n\t\t\t\tname: 'googleFirebaseCloudFirestoreOAuth2Api',\n\t\t\t\trequired: true,\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tauthentication: ['googleFirebaseCloudFirestoreOAuth2Api'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'googleApi',\n\t\t\t\trequired: true,\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tauthentication: ['serviceAccount'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Authentication',\n\t\t\t\tname: 'authentication',\n\t\t\t\ttype: 'options',\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\t// eslint-disable-next-line n8n-nodes-base/node-param-display-name-miscased\n\t\t\t\t\t\tname: 'OAuth2 (recommended)',\n\t\t\t\t\t\tvalue: 'googleFirebaseCloudFirestoreOAuth2Api',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Service Account',\n\t\t\t\t\t\tvalue: 'serviceAccount',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'googleFirebaseCloudFirestoreOAuth2Api',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Resource',\n\t\t\t\tname: 'resource',\n\t\t\t\ttype: 'options',\n\t\t\t\tnoDataExpression: true,\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Document',\n\t\t\t\t\t\tvalue: 'document',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Collection',\n\t\t\t\t\t\tvalue: 'collection',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'document',\n\t\t\t},\n\t\t\t...documentOperations,\n\t\t\t...documentFields,\n\t\t\t...collectionOperations,\n\t\t\t...collectionFields,\n\t\t],\n\t};\n\n\tmethods = {\n\t\tloadOptions: {\n\t\t\tasync getProjects(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst collections = await googleApiRequestAllItems.call(\n\t\t\t\t\tthis,\n\t\t\t\t\t'results',\n\t\t\t\t\t'GET',\n\t\t\t\t\t'',\n\t\t\t\t\t{},\n\t\t\t\t\t{},\n\t\t\t\t\t'https://firebase.googleapis.com/v1beta1/projects',\n\t\t\t\t);\n\t\t\t\t// @ts-ignore\n\t\t\t\tconst returnData = collections.map((o) => ({\n\t\t\t\t\tname: o.projectId,\n\t\t\t\t\tvalue: o.projectId,\n\t\t\t\t})) as INodePropertyOptions[];\n\t\t\t\treturn returnData;\n\t\t\t},\n\t\t},\n\t};\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t\tconst items = this.getInputData();\n\t\tconst itemData = generatePairedItemData(items.length);\n\t\tconst returnData: INodeExecutionData[] = [];\n\t\tlet responseData;\n\n\t\tconst resource = this.getNodeParameter('resource', 0);\n\t\tconst operation = this.getNodeParameter('operation', 0);\n\n\t\tconst nodeVersion = this.getNode().typeVersion;\n\n\t\tlet itemsLength = items.length ? 1 : 0;\n\t\tlet fallbackPairedItems;\n\n\t\tif (nodeVersion >= 1.1) {\n\t\t\titemsLength = items.length;\n\t\t} else {\n\t\t\tfallbackPairedItems = generatePairedItemData(items.length);\n\t\t}\n\n\t\tif (resource === 'document') {\n\t\t\tif (operation === 'get') {\n\t\t\t\tconst projectId = this.getNodeParameter('projectId', 0) as string;\n\t\t\t\tconst database = this.getNodeParameter('database', 0) as string;\n\t\t\t\tconst simple = this.getNodeParameter('simple', 0) as boolean;\n\t\t\t\tconst documentList = items.map((_: IDataObject, i: number) => {\n\t\t\t\t\tconst collection = this.getNodeParameter('collection', i) as string;\n\t\t\t\t\tconst documentId = this.getNodeParameter('documentId', i) as string;\n\t\t\t\t\treturn `projects/${projectId}/databases/${database}/documents/${collection}/${documentId}`;\n\t\t\t\t});\n\n\t\t\t\tresponseData = await googleApiRequest.call(\n\t\t\t\t\tthis,\n\t\t\t\t\t'POST',\n\t\t\t\t\t`/${projectId}/databases/${database}/documents:batchGet`,\n\t\t\t\t\t{ documents: documentList },\n\t\t\t\t);\n\n\t\t\t\tresponseData = responseData.map((element: { found: { id: string; name: string } }) => {\n\t\t\t\t\tif (element.found) {\n\t\t\t\t\t\telement.found.id = element.found.name.split('/').pop() as string;\n\t\t\t\t\t}\n\t\t\t\t\treturn element;\n\t\t\t\t});\n\n\t\t\t\tif (simple) {\n\t\t\t\t\tresponseData = responseData\n\t\t\t\t\t\t.map((element: IDataObject) => {\n\t\t\t\t\t\t\treturn fullDocumentToJson(element.found as IDataObject);\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.filter((el: IDataObject) => !!el);\n\t\t\t\t}\n\n\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t{ itemData },\n\t\t\t\t);\n\n\t\t\t\treturnData.push(...executionData);\n\t\t\t} else if (operation === 'create') {\n\t\t\t\tconst projectId = this.getNodeParameter('projectId', 0) as string;\n\t\t\t\tconst database = this.getNodeParameter('database', 0) as string;\n\t\t\t\tconst simple = this.getNodeParameter('simple', 0) as boolean;\n\n\t\t\t\tawait Promise.all(\n\t\t\t\t\titems.map(async (item: IDataObject, i: number) => {\n\t\t\t\t\t\tconst collection = this.getNodeParameter('collection', i) as string;\n\t\t\t\t\t\tconst columns = this.getNodeParameter('columns', i) as string;\n\t\t\t\t\t\tconst documentId = this.getNodeParameter('documentId', i) as string;\n\t\t\t\t\t\tconst columnList = columns.split(',').map((column) => column.trim());\n\t\t\t\t\t\tconst document = { fields: {} };\n\t\t\t\t\t\tcolumnList.map((column) => {\n\t\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\t\tif (item.json[column]) {\n\t\t\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\t\t\tdocument.fields[column] = jsonToDocument(item.json[column] as IDataObject);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\t\t\tdocument.fields[column] = jsonToDocument(null);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t\tresponseData = await googleApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'POST',\n\t\t\t\t\t\t\t`/${projectId}/databases/${database}/documents/${collection}`,\n\t\t\t\t\t\t\tdocument,\n\t\t\t\t\t\t\t{ documentId },\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tresponseData.id = (responseData.name as string).split('/').pop();\n\n\t\t\t\t\t\tif (simple) {\n\t\t\t\t\t\t\tresponseData = fullDocumentToJson(responseData as IDataObject);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t}),\n\t\t\t\t);\n\t\t\t} else if (operation === 'getAll') {\n\t\t\t\tfor (let i = 0; i < itemsLength; i++) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst projectId = this.getNodeParameter('projectId', i) as string;\n\t\t\t\t\t\tconst database = this.getNodeParameter('database', i) as string;\n\t\t\t\t\t\tconst collection = this.getNodeParameter('collection', i) as string;\n\t\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', i);\n\t\t\t\t\t\tconst simple = this.getNodeParameter('simple', i) as boolean;\n\n\t\t\t\t\t\tif (returnAll) {\n\t\t\t\t\t\t\tresponseData = await googleApiRequestAllItems.call(\n\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t'documents',\n\t\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t\t`/${projectId}/databases/${database}/documents/${collection}`,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst limit = this.getNodeParameter('limit', i);\n\t\t\t\t\t\t\tconst getAllResponse = (await googleApiRequest.call(\n\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t\t`/${projectId}/databases/${database}/documents/${collection}`,\n\t\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t\t{ pageSize: limit },\n\t\t\t\t\t\t\t)) as IDataObject;\n\t\t\t\t\t\t\tresponseData = getAllResponse.documents;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = responseData.map((element: IDataObject) => {\n\t\t\t\t\t\t\telement.id = (element.name as string).split('/').pop();\n\t\t\t\t\t\t\treturn element;\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tif (simple) {\n\t\t\t\t\t\t\tresponseData = responseData.map((element: IDataObject) =>\n\t\t\t\t\t\t\t\tfullDocumentToJson(element),\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t\t\t{ itemData: fallbackPairedItems ?? [{ item: i }] },\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\t\t\treturnData.push({\n\t\t\t\t\t\t\t\tjson: { error: error.message },\n\t\t\t\t\t\t\t\tpairedItem: fallbackPairedItems ?? [{ item: i }],\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow error;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (operation === 'delete') {\n\t\t\t\tawait Promise.all(\n\t\t\t\t\titems.map(async (_: IDataObject, i: number) => {\n\t\t\t\t\t\tconst projectId = this.getNodeParameter('projectId', i) as string;\n\t\t\t\t\t\tconst database = this.getNodeParameter('database', i) as string;\n\t\t\t\t\t\tconst collection = this.getNodeParameter('collection', i) as string;\n\t\t\t\t\t\tconst documentId = this.getNodeParameter('documentId', i) as string;\n\n\t\t\t\t\t\tawait googleApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'DELETE',\n\t\t\t\t\t\t\t`/${projectId}/databases/${database}/documents/${collection}/${documentId}`,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray({ success: true }),\n\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t}),\n\t\t\t\t);\n\t\t\t} else if (operation === 'upsert') {\n\t\t\t\tconst projectId = this.getNodeParameter('projectId', 0) as string;\n\t\t\t\tconst database = this.getNodeParameter('database', 0) as string;\n\n\t\t\t\tconst updates = items.map((item: IDataObject, i: number) => {\n\t\t\t\t\tconst collection = this.getNodeParameter('collection', i) as string;\n\t\t\t\t\tconst updateKey = this.getNodeParameter('updateKey', i) as string;\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\tconst documentId = item.json[updateKey] as string;\n\t\t\t\t\tconst columns = this.getNodeParameter('columns', i) as string;\n\t\t\t\t\tconst columnList = columns.split(',').map((column) => column.trim());\n\t\t\t\t\tconst document = {};\n\t\t\t\t\tcolumnList.map((column) => {\n\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\tif (item.json.hasOwnProperty(column)) {\n\t\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\t\tdocument[column] = jsonToDocument(item.json[column] as IDataObject);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\t\tdocument[column] = jsonToDocument(null);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\tupdate: {\n\t\t\t\t\t\t\tname: `projects/${projectId}/databases/${database}/documents/${collection}/${documentId}`,\n\t\t\t\t\t\t\tfields: document,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tupdateMask: {\n\t\t\t\t\t\t\tfieldPaths: columnList,\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\t\t\t\t});\n\n\t\t\t\tresponseData = [];\n\n\t\t\t\tconst { writeResults, status } = await googleApiRequest.call(\n\t\t\t\t\tthis,\n\t\t\t\t\t'POST',\n\t\t\t\t\t`/${projectId}/databases/${database}/documents:batchWrite`,\n\t\t\t\t\t{ writes: updates },\n\t\t\t\t);\n\n\t\t\t\tfor (let i = 0; i < writeResults.length; i++) {\n\t\t\t\t\twriteResults[i].status = status[i];\n\t\t\t\t\tObject.assign(writeResults[i], items[i].json);\n\n\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\tthis.helpers.returnJsonArray(writeResults[i] as IDataObject[]),\n\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t);\n\n\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t}\n\t\t\t} else if (operation === 'query') {\n\t\t\t\tconst projectId = this.getNodeParameter('projectId', 0) as string;\n\t\t\t\tconst database = this.getNodeParameter('database', 0) as string;\n\t\t\t\tconst simple = this.getNodeParameter('simple', 0) as boolean;\n\n\t\t\t\tawait Promise.all(\n\t\t\t\t\titems.map(async (_: IDataObject, i: number) => {\n\t\t\t\t\t\tconst query = this.getNodeParameter('query', i) as string;\n\t\t\t\t\t\tresponseData = await googleApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'POST',\n\t\t\t\t\t\t\t`/${projectId}/databases/${database}/documents:runQuery`,\n\t\t\t\t\t\t\tjsonParse(query),\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tresponseData = responseData.map(\n\t\t\t\t\t\t\t(element: { document: { id: string; name: string } }) => {\n\t\t\t\t\t\t\t\tif (element.document) {\n\t\t\t\t\t\t\t\t\telement.document.id = element.document.name.split('/').pop() as string;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\treturn element;\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tif (simple) {\n\t\t\t\t\t\t\tresponseData = responseData\n\t\t\t\t\t\t\t\t.map((element: IDataObject) => {\n\t\t\t\t\t\t\t\t\treturn fullDocumentToJson(element.document as IDataObject);\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t.filter((element: IDataObject) => !!element);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t}),\n\t\t\t\t);\n\t\t\t}\n\t\t} else if (resource === 'collection') {\n\t\t\tif (operation === 'getAll') {\n\t\t\t\tfor (let i = 0; i < itemsLength; i++) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst projectId = this.getNodeParameter('projectId', i) as string;\n\t\t\t\t\t\tconst database = this.getNodeParameter('database', i) as string;\n\t\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', i);\n\n\t\t\t\t\t\tif (returnAll) {\n\t\t\t\t\t\t\tconst getAllResponse = await googleApiRequestAllItems.call(\n\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t'collectionIds',\n\t\t\t\t\t\t\t\t'POST',\n\t\t\t\t\t\t\t\t`/${projectId}/databases/${database}/documents:listCollectionIds`,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\t\tresponseData = getAllResponse.map((o) => ({ name: o }));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst limit = this.getNodeParameter('limit', i);\n\t\t\t\t\t\t\tconst getAllResponse = (await googleApiRequest.call(\n\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t'POST',\n\t\t\t\t\t\t\t\t`/${projectId}/databases/${database}/documents:listCollectionIds`,\n\t\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t\t{ pageSize: limit },\n\t\t\t\t\t\t\t)) as IDataObject;\n\t\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\t\tresponseData = getAllResponse.collectionIds.map((o) => ({ name: o }));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t\t\t{ itemData: fallbackPairedItems ?? [{ item: i }] },\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\t\t\treturnData.push({\n\t\t\t\t\t\t\t\tjson: { error: error.message },\n\t\t\t\t\t\t\t\tpairedItem: fallbackPairedItems ?? [{ item: i }],\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow error;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn [returnData];\n\t}\n}\n"],"mappings":"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","names":[]}