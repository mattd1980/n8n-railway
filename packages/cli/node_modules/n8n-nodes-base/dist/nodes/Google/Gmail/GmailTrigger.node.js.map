{"version":3,"sources":["../../../../nodes/Google/Gmail/GmailTrigger.node.ts"],"sourcesContent":["import { DateTime } from 'luxon';\nimport type {\n\tIDataObject,\n\tILoadOptionsFunctions,\n\tINodeExecutionData,\n\tINodePropertyOptions,\n\tINodeType,\n\tINodeTypeDescription,\n\tIPollFunctions,\n} from 'n8n-workflow';\nimport { NodeConnectionTypes } from 'n8n-workflow';\n\nimport {\n\tgoogleApiRequest,\n\tgoogleApiRequestAllItems,\n\tparseRawEmail,\n\tprepareQuery,\n\tsimplifyOutput,\n} from './GenericFunctions';\nimport type {\n\tGmailTriggerFilters,\n\tGmailTriggerOptions,\n\tGmailWorkflowStaticData,\n\tGmailWorkflowStaticDataDictionary,\n\tLabel,\n\tMessage,\n\tMessageListResponse,\n} from './types';\n\nexport class GmailTrigger implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'Gmail Trigger',\n\t\tname: 'gmailTrigger',\n\t\ticon: 'file:gmail.svg',\n\t\tgroup: ['trigger'],\n\t\tversion: [1, 1.1, 1.2],\n\t\tdescription:\n\t\t\t'Fetches emails from Gmail and starts the workflow on specified polling intervals.',\n\t\tsubtitle: '={{\"Gmail Trigger\"}}',\n\t\tdefaults: {\n\t\t\tname: 'Gmail Trigger',\n\t\t},\n\t\tcredentials: [\n\t\t\t{\n\t\t\t\tname: 'googleApi',\n\t\t\t\trequired: true,\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tauthentication: ['serviceAccount'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'gmailOAuth2',\n\t\t\t\trequired: true,\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tauthentication: ['oAuth2'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t\tpolling: true,\n\t\tinputs: [],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Authentication',\n\t\t\t\tname: 'authentication',\n\t\t\t\ttype: 'options',\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\t// eslint-disable-next-line n8n-nodes-base/node-param-display-name-miscased\n\t\t\t\t\t\tname: 'OAuth2 (recommended)',\n\t\t\t\t\t\tvalue: 'oAuth2',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Service Account',\n\t\t\t\t\t\tvalue: 'serviceAccount',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'oAuth2',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Event',\n\t\t\t\tname: 'event',\n\t\t\t\ttype: 'options',\n\t\t\t\tdefault: 'messageReceived',\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Message Received',\n\t\t\t\t\t\tvalue: 'messageReceived',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Simplify',\n\t\t\t\tname: 'simple',\n\t\t\t\ttype: 'boolean',\n\t\t\t\tdefault: true,\n\t\t\t\tdescription:\n\t\t\t\t\t'Whether to return a simplified version of the response instead of the raw data',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Filters',\n\t\t\t\tname: 'filters',\n\t\t\t\ttype: 'collection',\n\t\t\t\tplaceholder: 'Add Filter',\n\t\t\t\tdefault: {},\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Include Spam and Trash',\n\t\t\t\t\t\tname: 'includeSpamTrash',\n\t\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\t\tdefault: false,\n\t\t\t\t\t\tdescription: 'Whether to include messages from SPAM and TRASH in the results',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Include Drafts',\n\t\t\t\t\t\tname: 'includeDrafts',\n\t\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\t\tdefault: false,\n\t\t\t\t\t\tdescription: 'Whether to include email drafts in the results',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Label Names or IDs',\n\t\t\t\t\t\tname: 'labelIds',\n\t\t\t\t\t\ttype: 'multiOptions',\n\t\t\t\t\t\ttypeOptions: {\n\t\t\t\t\t\t\tloadOptionsMethod: 'getLabels',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tdefault: [],\n\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t'Only return messages with labels that match all of the specified label IDs. Choose from the list, or specify IDs using an <a href=\"https://docs.n8n.io/code/expressions/\">expression</a>.',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Search',\n\t\t\t\t\t\tname: 'q',\n\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\tplaceholder: 'has:attachment',\n\t\t\t\t\t\thint: 'Use the same format as in the Gmail search box. <a href=\"https://support.google.com/mail/answer/7190?hl=en\">More info</a>.',\n\t\t\t\t\t\tdescription: 'Only return messages matching the specified query',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Read Status',\n\t\t\t\t\t\tname: 'readStatus',\n\t\t\t\t\t\ttype: 'options',\n\t\t\t\t\t\tdefault: 'unread',\n\t\t\t\t\t\thint: 'Filter emails by whether they have been read or not',\n\t\t\t\t\t\toptions: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t// eslint-disable-next-line n8n-nodes-base/node-param-display-name-miscased\n\t\t\t\t\t\t\t\tname: 'Unread and read emails',\n\t\t\t\t\t\t\t\tvalue: 'both',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t// eslint-disable-next-line n8n-nodes-base/node-param-display-name-miscased\n\t\t\t\t\t\t\t\tname: 'Unread emails only',\n\t\t\t\t\t\t\t\tvalue: 'unread',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t// eslint-disable-next-line n8n-nodes-base/node-param-display-name-miscased\n\t\t\t\t\t\t\t\tname: 'Read emails only',\n\t\t\t\t\t\t\t\tvalue: 'read',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Sender',\n\t\t\t\t\t\tname: 'sender',\n\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\tdescription: 'Sender name or email to filter by',\n\t\t\t\t\t\thint: 'Enter an email or part of a sender name',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Options',\n\t\t\t\tname: 'options',\n\t\t\t\ttype: 'collection',\n\t\t\t\tplaceholder: 'Add option',\n\t\t\t\tdefault: {},\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\thide: {\n\t\t\t\t\t\tsimple: [true],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Attachment Prefix',\n\t\t\t\t\t\tname: 'dataPropertyAttachmentsPrefixName',\n\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\tdefault: 'attachment_',\n\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t\"Prefix for name of the binary property to which to write the attachment. An index starting with 0 will be added. So if name is 'attachment_' the first attachment is saved to 'attachment_0'.\",\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Download Attachments',\n\t\t\t\t\t\tname: 'downloadAttachments',\n\t\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\t\tdefault: false,\n\t\t\t\t\t\tdescription: \"Whether the email's attachments will be downloaded\",\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t],\n\t};\n\n\tmethods = {\n\t\tloadOptions: {\n\t\t\t// Get all the labels to display them to user so that they can\n\t\t\t// select them easily\n\t\t\tasync getLabels(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst returnData: INodePropertyOptions[] = [];\n\n\t\t\t\tconst labels = (await googleApiRequestAllItems.call(\n\t\t\t\t\tthis,\n\t\t\t\t\t'labels',\n\t\t\t\t\t'GET',\n\t\t\t\t\t'/gmail/v1/users/me/labels',\n\t\t\t\t)) as Label[];\n\n\t\t\t\tfor (const label of labels) {\n\t\t\t\t\treturnData.push({\n\t\t\t\t\t\tname: label.name,\n\t\t\t\t\t\tvalue: label.id,\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\treturn returnData.sort((a, b) => {\n\t\t\t\t\tif (a.name < b.name) {\n\t\t\t\t\t\treturn -1;\n\t\t\t\t\t}\n\t\t\t\t\tif (a.name > b.name) {\n\t\t\t\t\t\treturn 1;\n\t\t\t\t\t}\n\t\t\t\t\treturn 0;\n\t\t\t\t});\n\t\t\t},\n\t\t},\n\t};\n\n\tasync poll(this: IPollFunctions): Promise<INodeExecutionData[][] | null> {\n\t\tconst workflowStaticData = this.getWorkflowStaticData('node') as\n\t\t\t| GmailWorkflowStaticData\n\t\t\t| GmailWorkflowStaticDataDictionary;\n\t\tconst node = this.getNode();\n\n\t\tlet nodeStaticData = (workflowStaticData ?? {}) as GmailWorkflowStaticData;\n\t\tif (node.typeVersion > 1) {\n\t\t\tconst nodeName = node.name;\n\t\t\tconst dictionary = workflowStaticData as GmailWorkflowStaticDataDictionary;\n\t\t\tif (!(nodeName in workflowStaticData)) {\n\t\t\t\tdictionary[nodeName] = {};\n\t\t\t}\n\n\t\t\tnodeStaticData = dictionary[nodeName];\n\t\t}\n\n\t\tconst now = Math.floor(DateTime.now().toSeconds()).toString();\n\t\tconst startDate = nodeStaticData.lastTimeChecked ?? +now;\n\t\tconst endDate = +now;\n\n\t\tconst options = this.getNodeParameter('options', {}) as GmailTriggerOptions;\n\t\tconst filters = this.getNodeParameter('filters', {}) as GmailTriggerFilters;\n\n\t\tlet responseData: INodeExecutionData[] = [];\n\n\t\ttry {\n\t\t\tconst qs: IDataObject = {};\n\t\t\tconst allFilters: GmailTriggerFilters = { ...filters, receivedAfter: startDate };\n\n\t\t\tif (this.getMode() === 'manual') {\n\t\t\t\tqs.maxResults = 1;\n\t\t\t\tdelete allFilters.receivedAfter;\n\t\t\t}\n\n\t\t\tObject.assign(qs, prepareQuery.call(this, allFilters, 0), options);\n\n\t\t\tconst messagesResponse: MessageListResponse = await googleApiRequest.call(\n\t\t\t\tthis,\n\t\t\t\t'GET',\n\t\t\t\t'/gmail/v1/users/me/messages',\n\t\t\t\t{},\n\t\t\t\tqs,\n\t\t\t);\n\n\t\t\tconst messages = messagesResponse.messages ?? [];\n\n\t\t\tif (!messages.length) {\n\t\t\t\tnodeStaticData.lastTimeChecked = endDate;\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tconst simple = this.getNodeParameter('simple') as boolean;\n\n\t\t\tif (simple) {\n\t\t\t\tqs.format = 'metadata';\n\t\t\t\tqs.metadataHeaders = ['From', 'To', 'Cc', 'Bcc', 'Subject'];\n\t\t\t} else {\n\t\t\t\tqs.format = 'raw';\n\t\t\t}\n\n\t\t\tlet includeDrafts = false;\n\t\t\tif (node.typeVersion > 1.1) {\n\t\t\t\tincludeDrafts = filters.includeDrafts ?? false;\n\t\t\t} else {\n\t\t\t\tincludeDrafts = filters.includeDrafts ?? true;\n\t\t\t}\n\n\t\t\tdelete qs.includeDrafts;\n\n\t\t\tfor (const message of messages) {\n\t\t\t\tconst fullMessage = (await googleApiRequest.call(\n\t\t\t\t\tthis,\n\t\t\t\t\t'GET',\n\t\t\t\t\t`/gmail/v1/users/me/messages/${message.id}`,\n\t\t\t\t\t{},\n\t\t\t\t\tqs,\n\t\t\t\t)) as Message;\n\n\t\t\t\tif (!includeDrafts) {\n\t\t\t\t\tif (fullMessage.labelIds?.includes('DRAFT')) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (!simple) {\n\t\t\t\t\tconst dataPropertyNameDownload =\n\t\t\t\t\t\toptions.dataPropertyAttachmentsPrefixName || 'attachment_';\n\n\t\t\t\t\tconst parsed = await parseRawEmail.call(this, fullMessage, dataPropertyNameDownload);\n\t\t\t\t\tresponseData.push(parsed);\n\t\t\t\t} else {\n\t\t\t\t\tresponseData.push({ json: fullMessage });\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (simple) {\n\t\t\t\tresponseData = this.helpers.returnJsonArray(\n\t\t\t\t\tawait simplifyOutput.call(\n\t\t\t\t\t\tthis,\n\t\t\t\t\t\tresponseData.map((item) => item.json),\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tif (this.getMode() === 'manual' || !nodeStaticData.lastTimeChecked) {\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t\tconst workflow = this.getWorkflow();\n\t\t\tthis.logger.error(\n\t\t\t\t`There was a problem in '${node.name}' node in workflow '${workflow.id}': '${error.description}'`,\n\t\t\t\t{\n\t\t\t\t\tnode: node.name,\n\t\t\t\t\tworkflowId: workflow.id,\n\t\t\t\t\terror,\n\t\t\t\t},\n\t\t\t);\n\t\t}\n\t\tif (!responseData.length) {\n\t\t\tnodeStaticData.lastTimeChecked = endDate;\n\t\t\treturn null;\n\t\t}\n\n\t\tconst emailsWithInvalidDate = new Set<string>();\n\n\t\tconst getEmailDateAsSeconds = (email: Message): number => {\n\t\t\tlet date;\n\n\t\t\tif (email.internalDate) {\n\t\t\t\tdate = +email.internalDate / 1000;\n\t\t\t} else if (email.date) {\n\t\t\t\tdate = +DateTime.fromJSDate(new Date(email.date)).toSeconds();\n\t\t\t} else if (email.headers?.date) {\n\t\t\t\tdate = +DateTime.fromJSDate(new Date(email.headers.date)).toSeconds();\n\t\t\t}\n\n\t\t\tif (!date || isNaN(date)) {\n\t\t\t\temailsWithInvalidDate.add(email.id);\n\t\t\t\treturn +startDate;\n\t\t\t}\n\n\t\t\treturn date;\n\t\t};\n\n\t\tconst lastEmailDate = responseData.reduce((lastDate, { json }) => {\n\t\t\tconst emailDate = getEmailDateAsSeconds(json as Message);\n\t\t\treturn emailDate > lastDate ? emailDate : lastDate;\n\t\t}, 0);\n\n\t\tconst nextPollPossibleDuplicates = responseData\n\t\t\t.filter((item) => item.json)\n\t\t\t.reduce((duplicates, { json }) => {\n\t\t\t\tconst emailDate = getEmailDateAsSeconds(json as Message);\n\t\t\t\treturn emailDate <= lastEmailDate ? duplicates.concat((json as Message).id) : duplicates;\n\t\t\t}, Array.from(emailsWithInvalidDate));\n\n\t\tconst possibleDuplicates = new Set(nodeStaticData.possibleDuplicates ?? []);\n\t\tif (possibleDuplicates.size > 0) {\n\t\t\tresponseData = responseData.filter(({ json }) => {\n\t\t\t\tif (!json || typeof json.id !== 'string') return false;\n\t\t\t\treturn !possibleDuplicates.has(json.id);\n\t\t\t});\n\t\t}\n\n\t\tnodeStaticData.possibleDuplicates = nextPollPossibleDuplicates;\n\t\tnodeStaticData.lastTimeChecked = lastEmailDate || endDate;\n\n\t\tif (Array.isArray(responseData) && responseData.length) {\n\t\t\treturn [responseData];\n\t\t}\n\n\t\treturn null;\n\t}\n}\n"],"mappings":"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","names":[]}