{"version":3,"sources":["../../../../nodes/Google/Chat/GenericFunctions.ts"],"sourcesContent":["import type {\n\tIDataObject,\n\tIExecuteFunctions,\n\tIHttpRequestMethods,\n\tILoadOptionsFunctions,\n\tINodeProperties,\n\tIRequestOptions,\n\tJsonObject,\n} from 'n8n-workflow';\nimport { NodeApiError } from 'n8n-workflow';\n\nimport { getSendAndWaitConfig } from '../../../utils/sendAndWait/utils';\nimport { createUtmCampaignLink } from '../../../utils/utilities';\nimport { getGoogleAccessToken } from '../GenericFunctions';\n\nasync function googleServiceAccountApiRequest(\n\tthis: IExecuteFunctions | ILoadOptionsFunctions,\n\toptions: IRequestOptions,\n\tnoCredentials = false,\n): Promise<any> {\n\tif (noCredentials) {\n\t\treturn await this.helpers.request(options);\n\t}\n\n\tconst credentials = await this.getCredentials('googleApi');\n\n\tconst { access_token } = await getGoogleAccessToken.call(this, credentials, 'chat');\n\toptions.headers!.Authorization = `Bearer ${access_token}`;\n\n\treturn await this.helpers.request(options);\n}\n\nexport async function googleApiRequest(\n\tthis: IExecuteFunctions | ILoadOptionsFunctions,\n\tmethod: IHttpRequestMethods,\n\tresource: string,\n\tbody: IDataObject = {},\n\tqs: IDataObject = {},\n\turi?: string,\n\tnoCredentials = false,\n\tencoding?: null | undefined,\n) {\n\tconst options: IRequestOptions = {\n\t\theaders: {\n\t\t\tAccept: 'application/json',\n\t\t\t'Content-Type': 'application/json',\n\t\t},\n\t\tmethod,\n\t\tbody,\n\t\tqs,\n\t\turi: uri || `https://chat.googleapis.com${resource}`,\n\t\tqsStringifyOptions: {\n\t\t\tarrayFormat: 'repeat',\n\t\t},\n\t\tjson: true,\n\t};\n\n\tif (encoding === null) {\n\t\toptions.encoding = null;\n\t}\n\n\tif (Object.keys(body).length === 0) {\n\t\tdelete options.body;\n\t}\n\n\tlet responseData;\n\n\ttry {\n\t\tif (noCredentials || this.getNodeParameter('authentication', 0) === 'serviceAccount') {\n\t\t\tresponseData = await googleServiceAccountApiRequest.call(this, options, noCredentials);\n\t\t} else {\n\t\t\tresponseData = await this.helpers.requestWithAuthentication.call(\n\t\t\t\tthis,\n\t\t\t\t'googleChatOAuth2Api',\n\t\t\t\toptions,\n\t\t\t);\n\t\t}\n\t} catch (error) {\n\t\tif (error.code === 'ERR_OSSL_PEM_NO_START_LINE') {\n\t\t\terror.statusCode = '401';\n\t\t}\n\n\t\tthrow new NodeApiError(this.getNode(), error as JsonObject);\n\t}\n\n\tif (Object.keys(responseData as IDataObject).length !== 0) {\n\t\treturn responseData;\n\t} else {\n\t\treturn { success: true };\n\t}\n}\n\nexport async function googleApiRequestAllItems(\n\tthis: IExecuteFunctions | ILoadOptionsFunctions,\n\tpropertyName: string,\n\tmethod: IHttpRequestMethods,\n\tendpoint: string,\n\n\tbody: any = {},\n\tquery: IDataObject = {},\n): Promise<any> {\n\tconst returnData: IDataObject[] = [];\n\n\tlet responseData;\n\tquery.pageSize = 100;\n\n\tdo {\n\t\tresponseData = await googleApiRequest.call(this, method, endpoint, body, query);\n\t\tquery.pageToken = responseData.nextPageToken;\n\t\treturnData.push.apply(returnData, responseData[propertyName] as IDataObject[]);\n\t} while (responseData.nextPageToken !== undefined && responseData.nextPageToken !== '');\n\n\treturn returnData;\n}\n\nexport function validateJSON(json: string | undefined): any {\n\tlet result;\n\ttry {\n\t\tresult = JSON.parse(json!);\n\t} catch (exception) {\n\t\tresult = undefined;\n\t}\n\treturn result;\n}\n\nexport function getPagingParameters(resource: string, operation = 'getAll') {\n\tconst pagingParameters: INodeProperties[] = [\n\t\t{\n\t\t\tdisplayName: 'Return All',\n\t\t\tname: 'returnAll',\n\t\t\ttype: 'boolean',\n\t\t\tdisplayOptions: {\n\t\t\t\tshow: {\n\t\t\t\t\tresource: [resource],\n\t\t\t\t\toperation: [operation],\n\t\t\t\t},\n\t\t\t},\n\t\t\tdefault: false,\n\t\t\tdescription: 'Whether to return all results or only up to a given limit',\n\t\t},\n\t\t{\n\t\t\tdisplayName: 'Limit',\n\t\t\tname: 'limit',\n\t\t\ttype: 'number',\n\t\t\ttypeOptions: {\n\t\t\t\tmaxValue: 1000,\n\t\t\t},\n\t\t\tdisplayOptions: {\n\t\t\t\tshow: {\n\t\t\t\t\tresource: [resource],\n\t\t\t\t\toperation: [operation],\n\t\t\t\t\treturnAll: [false],\n\t\t\t\t},\n\t\t\t},\n\t\t\tdefault: 100,\n\t\t\tdescription: 'Max number of results to return',\n\t\t},\n\t];\n\treturn pagingParameters;\n}\n\nexport function createSendAndWaitMessageBody(context: IExecuteFunctions) {\n\tconst config = getSendAndWaitConfig(context);\n\n\tconst buttons: string[] = config.options.map(\n\t\t(option) => `*<${`${config.url}?approved=${option.value}`}|${option.label}>*`,\n\t);\n\n\tlet text = `${config.message}\\n\\n\\n${buttons.join('   ')}`;\n\n\tif (config.appendAttribution !== false) {\n\t\tconst instanceId = context.getInstanceId();\n\t\tconst attributionText = '_This_ _message_ _was_ _sent_ _automatically_ _with_';\n\t\tconst link = createUtmCampaignLink('n8n-nodes-base.googleChat', instanceId);\n\t\tconst attribution = `${attributionText} _<${link}|n8n>_`;\n\t\ttext += `\\n\\n${attribution}`;\n\t}\n\n\tconst body = {\n\t\ttext,\n\t};\n\n\treturn body;\n}\n"],"mappings":"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","names":[]}