{"version":3,"sources":["../../../../../../../nodes/Google/Drive/v2/actions/file/move.operation.ts"],"sourcesContent":["import type {\n\tIExecuteFunctions,\n\tIDataObject,\n\tINodeExecutionData,\n\tINodeProperties,\n} from 'n8n-workflow';\n\nimport { updateDisplayOptions } from '@utils/utilities';\n\nimport { setParentFolder } from '../../helpers/utils';\nimport { googleApiRequest } from '../../transport';\nimport { driveRLC, fileRLC, folderRLC } from '../common.descriptions';\n\nconst properties: INodeProperties[] = [\n\t{\n\t\t...fileRLC,\n\t\tdescription: 'The file to move',\n\t},\n\t{\n\t\t...driveRLC,\n\t\tdisplayName: 'Parent Drive',\n\t\tdescription: 'The drive where to move the file',\n\t},\n\t{\n\t\t...folderRLC,\n\t\tdisplayName: 'Parent Folder',\n\t\tdescription: 'The folder where to move the file',\n\t},\n];\n\nconst displayOptions = {\n\tshow: {\n\t\tresource: ['file'],\n\t\toperation: ['move'],\n\t},\n};\n\nexport const description = updateDisplayOptions(displayOptions, properties);\n\nexport async function execute(this: IExecuteFunctions, i: number): Promise<INodeExecutionData[]> {\n\tconst fileId = this.getNodeParameter('fileId', i, undefined, {\n\t\textractValue: true,\n\t});\n\n\tconst driveId = this.getNodeParameter('driveId', i, undefined, {\n\t\textractValue: true,\n\t}) as string;\n\n\tconst folderId = this.getNodeParameter('folderId', i, undefined, {\n\t\textractValue: true,\n\t}) as string;\n\n\tconst qs = {\n\t\tincludeItemsFromAllDrives: true,\n\t\tsupportsAllDrives: true,\n\t\tspaces: 'appDataFolder, drive',\n\t\tcorpora: 'allDrives',\n\t};\n\n\tconst { parents } = await googleApiRequest.call(\n\t\tthis,\n\t\t'GET',\n\t\t`/drive/v3/files/${fileId}`,\n\t\tundefined,\n\t\t{\n\t\t\t...qs,\n\t\t\tfields: 'parents',\n\t\t},\n\t);\n\n\tconst response = await googleApiRequest.call(\n\t\tthis,\n\t\t'PATCH',\n\t\t`/drive/v3/files/${fileId}`,\n\t\tundefined,\n\t\t{\n\t\t\t...qs,\n\t\t\taddParents: setParentFolder(folderId, driveId),\n\t\t\tremoveParents: ((parents as string[]) || []).join(','),\n\t\t},\n\t);\n\n\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\tthis.helpers.returnJsonArray(response as IDataObject[]),\n\t\t{ itemData: { item: i } },\n\t);\n\n\treturn executionData;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA,uBAAqC;AAErC,mBAAgC;AAChC,uBAAiC;AACjC,oBAA6C;AAE7C,MAAM,aAAgC;AAAA,EACrC;AAAA,IACC,GAAG;AAAA,IACH,aAAa;AAAA,EACd;AAAA,EACA;AAAA,IACC,GAAG;AAAA,IACH,aAAa;AAAA,IACb,aAAa;AAAA,EACd;AAAA,EACA;AAAA,IACC,GAAG;AAAA,IACH,aAAa;AAAA,IACb,aAAa;AAAA,EACd;AACD;AAEA,MAAM,iBAAiB;AAAA,EACtB,MAAM;AAAA,IACL,UAAU,CAAC,MAAM;AAAA,IACjB,WAAW,CAAC,MAAM;AAAA,EACnB;AACD;AAEO,MAAM,kBAAc,uCAAqB,gBAAgB,UAAU;AAE1E,eAAsB,QAAiC,GAA0C;AAChG,QAAM,SAAS,KAAK,iBAAiB,UAAU,GAAG,QAAW;AAAA,IAC5D,cAAc;AAAA,EACf,CAAC;AAED,QAAM,UAAU,KAAK,iBAAiB,WAAW,GAAG,QAAW;AAAA,IAC9D,cAAc;AAAA,EACf,CAAC;AAED,QAAM,WAAW,KAAK,iBAAiB,YAAY,GAAG,QAAW;AAAA,IAChE,cAAc;AAAA,EACf,CAAC;AAED,QAAM,KAAK;AAAA,IACV,2BAA2B;AAAA,IAC3B,mBAAmB;AAAA,IACnB,QAAQ;AAAA,IACR,SAAS;AAAA,EACV;AAEA,QAAM,EAAE,QAAQ,IAAI,MAAM,kCAAiB;AAAA,IAC1C;AAAA,IACA;AAAA,IACA,mBAAmB,MAAM;AAAA,IACzB;AAAA,IACA;AAAA,MACC,GAAG;AAAA,MACH,QAAQ;AAAA,IACT;AAAA,EACD;AAEA,QAAM,WAAW,MAAM,kCAAiB;AAAA,IACvC;AAAA,IACA;AAAA,IACA,mBAAmB,MAAM;AAAA,IACzB;AAAA,IACA;AAAA,MACC,GAAG;AAAA,MACH,gBAAY,8BAAgB,UAAU,OAAO;AAAA,MAC7C,gBAAiB,WAAwB,CAAC,GAAG,KAAK,GAAG;AAAA,IACtD;AAAA,EACD;AAEA,QAAM,gBAAgB,KAAK,QAAQ;AAAA,IAClC,KAAK,QAAQ,gBAAgB,QAAyB;AAAA,IACtD,EAAE,UAAU,EAAE,MAAM,EAAE,EAAE;AAAA,EACzB;AAEA,SAAO;AACR;","names":[]}