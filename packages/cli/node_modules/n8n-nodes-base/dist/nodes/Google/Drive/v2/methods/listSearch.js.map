{"version":3,"sources":["../../../../../../nodes/Google/Drive/v2/methods/listSearch.ts"],"sourcesContent":["import type {\n\tIDataObject,\n\tILoadOptionsFunctions,\n\tINodeListSearchItems,\n\tINodeListSearchResult,\n} from 'n8n-workflow';\n\nimport type { SearchFilter } from '../helpers/interfaces';\nimport { DRIVE, RLC_DRIVE_DEFAULT, RLC_FOLDER_DEFAULT } from '../helpers/interfaces';\nimport { updateDriveScopes } from '../helpers/utils';\nimport { googleApiRequest } from '../transport';\n\ninterface FilesItem {\n\tid: string;\n\tname: string;\n\tmimeType: string;\n\twebViewLink: string;\n}\n\ninterface DriveItem {\n\tid: string;\n\tname: string;\n}\n\nexport async function fileSearch(\n\tthis: ILoadOptionsFunctions,\n\tfilter?: string,\n\tpaginationToken?: string,\n): Promise<INodeListSearchResult> {\n\tconst query: string[] = ['trashed = false'];\n\tif (filter) {\n\t\tquery.push(`name contains '${filter.replace(\"'\", \"\\\\'\")}'`);\n\t}\n\tquery.push(`mimeType != '${DRIVE.FOLDER}'`);\n\tconst res = await googleApiRequest.call(this, 'GET', '/drive/v3/files', undefined, {\n\t\tq: query.join(' and '),\n\t\tpageToken: paginationToken,\n\t\tfields: 'nextPageToken,files(id,name,mimeType,webViewLink)',\n\t\torderBy: 'name_natural',\n\t\tincludeItemsFromAllDrives: true,\n\t\tsupportsAllDrives: true,\n\t\tspaces: 'appDataFolder, drive',\n\t\tcorpora: 'allDrives',\n\t});\n\treturn {\n\t\tresults: res.files.map((file: FilesItem) => ({\n\t\t\tname: file.name,\n\t\t\tvalue: file.id,\n\t\t\turl: file.webViewLink,\n\t\t})),\n\t\tpaginationToken: res.nextPageToken,\n\t};\n}\n\nexport async function driveSearch(\n\tthis: ILoadOptionsFunctions,\n\tfilter?: string,\n\tpaginationToken?: string,\n): Promise<INodeListSearchResult> {\n\tlet res = { drives: [], nextPageToken: undefined };\n\n\tres = await googleApiRequest.call(this, 'GET', '/drive/v3/drives', undefined, {\n\t\tq: filter ? `name contains '${filter.replace(\"'\", \"\\\\'\")}'` : undefined,\n\t\tpageToken: paginationToken,\n\t});\n\n\tconst results: INodeListSearchItems[] = [];\n\n\tres.drives.forEach((drive: DriveItem) => {\n\t\tresults.push({\n\t\t\tname: drive.name,\n\t\t\tvalue: drive.id,\n\t\t\turl: `https://drive.google.com/drive/folders/${drive.id}`,\n\t\t});\n\t});\n\n\treturn {\n\t\tresults,\n\t\tpaginationToken: res.nextPageToken,\n\t};\n}\n\nexport async function driveSearchWithDefault(\n\tthis: ILoadOptionsFunctions,\n\tfilter?: string,\n\tpaginationToken?: string,\n): Promise<INodeListSearchResult> {\n\tconst drives = await driveSearch.call(this, filter, paginationToken);\n\n\tlet results: INodeListSearchItems[] = [];\n\n\tif (filter && !RLC_DRIVE_DEFAULT.toLowerCase().includes(filter.toLowerCase())) {\n\t\tresults = drives.results;\n\t} else {\n\t\tresults = [\n\t\t\t{\n\t\t\t\tname: RLC_DRIVE_DEFAULT,\n\t\t\t\tvalue: RLC_DRIVE_DEFAULT,\n\t\t\t\turl: 'https://drive.google.com/drive/my-drive',\n\t\t\t},\n\t\t\t...drives.results,\n\t\t];\n\t}\n\n\treturn {\n\t\tresults,\n\t\tpaginationToken: drives.paginationToken,\n\t};\n}\n\nexport async function folderSearch(\n\tthis: ILoadOptionsFunctions,\n\tfilter?: string,\n\tpaginationToken?: string,\n): Promise<INodeListSearchResult> {\n\tconst query: string[] = [];\n\tif (filter) {\n\t\tquery.push(`name contains '${filter.replace(\"'\", \"\\\\'\")}'`);\n\t}\n\tquery.push(`mimeType = '${DRIVE.FOLDER}'`);\n\n\tconst qs: IDataObject = {\n\t\tq: query.join(' and '),\n\t\tpageToken: paginationToken,\n\t\tfields: 'nextPageToken,files(id,name,mimeType,webViewLink,parents,driveId)',\n\t\torderBy: 'name_natural',\n\t\tincludeItemsFromAllDrives: true,\n\t\tsupportsAllDrives: true,\n\t\tspaces: 'appDataFolder, drive',\n\t\tcorpora: 'allDrives',\n\t};\n\n\tlet driveId;\n\n\tdriveId = this.getNodeParameter('driveId', '') as IDataObject;\n\n\tif (!driveId) {\n\t\tconst searchFilter = this.getNodeParameter('filter', {}) as SearchFilter;\n\t\tif (searchFilter?.driveId?.mode === 'url') {\n\t\t\tsearchFilter.driveId.value = this.getNodeParameter('filter.folderId', undefined, {\n\t\t\t\textractValue: true,\n\t\t\t}) as string;\n\t\t}\n\t\tdriveId = searchFilter.driveId;\n\t}\n\tupdateDriveScopes(qs, driveId?.value as string);\n\n\tconst res = await googleApiRequest.call(this, 'GET', '/drive/v3/files', undefined, qs);\n\n\tconst results: INodeListSearchItems[] = [];\n\n\tres.files.forEach((i: FilesItem) => {\n\t\tresults.push({\n\t\t\tname: i.name,\n\t\t\tvalue: i.id,\n\t\t\turl: i.webViewLink,\n\t\t});\n\t});\n\n\treturn {\n\t\tresults,\n\t\tpaginationToken: res.nextPageToken,\n\t};\n}\n\nexport async function folderSearchWithDefault(\n\tthis: ILoadOptionsFunctions,\n\tfilter?: string,\n\tpaginationToken?: string,\n): Promise<INodeListSearchResult> {\n\tconst folders = await folderSearch.call(this, filter, paginationToken);\n\n\tlet results: INodeListSearchItems[] = [];\n\tconst rootDefaultDisplayName = '/ (Root folder)';\n\n\tif (\n\t\tfilter &&\n\t\t!(\n\t\t\tRLC_FOLDER_DEFAULT.toLowerCase().includes(filter.toLowerCase()) ||\n\t\t\trootDefaultDisplayName.toLowerCase().includes(filter.toLowerCase())\n\t\t)\n\t) {\n\t\tresults = folders.results;\n\t} else {\n\t\tresults = [\n\t\t\t{\n\t\t\t\tname: rootDefaultDisplayName,\n\t\t\t\tvalue: RLC_FOLDER_DEFAULT,\n\t\t\t\turl: 'https://drive.google.com/drive',\n\t\t\t},\n\t\t\t...folders.results,\n\t\t];\n\t}\n\n\treturn {\n\t\tresults,\n\t\tpaginationToken: folders.paginationToken,\n\t};\n}\n"],"mappings":"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","names":[]}