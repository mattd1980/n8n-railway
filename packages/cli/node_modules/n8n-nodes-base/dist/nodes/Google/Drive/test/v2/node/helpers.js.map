{"version":3,"sources":["../../../../../../../nodes/Google/Drive/test/v2/node/helpers.ts"],"sourcesContent":["import { get } from 'lodash';\nimport { constructExecutionMetaData } from 'n8n-core';\nimport type { IDataObject, IExecuteFunctions, IGetNodeParameterOptions, INode } from 'n8n-workflow';\nimport { Readable } from 'stream';\n\nexport const driveNode: INode = {\n\tid: '11',\n\tname: 'Google Drive node',\n\ttypeVersion: 3,\n\ttype: 'n8n-nodes-base.googleDrive',\n\tposition: [42, 42],\n\tparameters: {},\n};\n\nexport const createMockExecuteFunction = (\n\tnodeParameters: IDataObject,\n\tnode: INode,\n\tcontinueOnFail = false,\n) => {\n\tconst fakeExecuteFunction = {\n\t\tgetNodeParameter(\n\t\t\tparameterName: string,\n\t\t\t_itemIndex: number,\n\t\t\tfallbackValue?: IDataObject | undefined,\n\t\t\toptions?: IGetNodeParameterOptions | undefined,\n\t\t) {\n\t\t\tconst parameter = options?.extractValue ? `${parameterName}.value` : parameterName;\n\t\t\treturn get(nodeParameters, parameter, fallbackValue);\n\t\t},\n\t\tgetNode() {\n\t\t\treturn node;\n\t\t},\n\t\thelpers: {\n\t\t\tconstructExecutionMetaData,\n\t\t\treturnJsonArray: () => [],\n\t\t\tprepareBinaryData: () => {},\n\t\t\thttpRequest: () => {},\n\t\t},\n\t\tcontinueOnFail: () => continueOnFail,\n\t} as unknown as IExecuteFunctions;\n\treturn fakeExecuteFunction;\n};\n\nexport function createTestStream(byteSize: number) {\n\tlet bytesSent = 0;\n\tconst CHUNK_SIZE = 64 * 1024; // 64kB chunks (default NodeJS highWaterMark)\n\n\treturn new Readable({\n\t\tread() {\n\t\t\tconst remainingBytes = byteSize - bytesSent;\n\n\t\t\tif (remainingBytes <= 0) {\n\t\t\t\tthis.push(null);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst chunkSize = Math.min(CHUNK_SIZE, remainingBytes);\n\t\t\tconst chunk = Buffer.alloc(chunkSize, 'A'); // Test data just a string of \"A\"\n\n\t\t\tbytesSent += chunkSize;\n\t\t\tthis.push(chunk);\n\t\t},\n\t});\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAoB;AACpB,sBAA2C;AAE3C,oBAAyB;AAElB,MAAM,YAAmB;AAAA,EAC/B,IAAI;AAAA,EACJ,MAAM;AAAA,EACN,aAAa;AAAA,EACb,MAAM;AAAA,EACN,UAAU,CAAC,IAAI,EAAE;AAAA,EACjB,YAAY,CAAC;AACd;AAEO,MAAM,4BAA4B,CACxC,gBACA,MACA,iBAAiB,UACb;AACJ,QAAM,sBAAsB;AAAA,IAC3B,iBACC,eACA,YACA,eACA,SACC;AACD,YAAM,YAAY,SAAS,eAAe,GAAG,aAAa,WAAW;AACrE,iBAAO,mBAAI,gBAAgB,WAAW,aAAa;AAAA,IACpD;AAAA,IACA,UAAU;AACT,aAAO;AAAA,IACR;AAAA,IACA,SAAS;AAAA,MACR;AAAA,MACA,iBAAiB,MAAM,CAAC;AAAA,MACxB,mBAAmB,MAAM;AAAA,MAAC;AAAA,MAC1B,aAAa,MAAM;AAAA,MAAC;AAAA,IACrB;AAAA,IACA,gBAAgB,MAAM;AAAA,EACvB;AACA,SAAO;AACR;AAEO,SAAS,iBAAiB,UAAkB;AAClD,MAAI,YAAY;AAChB,QAAM,aAAa,KAAK;AAExB,SAAO,IAAI,uBAAS;AAAA,IACnB,OAAO;AACN,YAAM,iBAAiB,WAAW;AAElC,UAAI,kBAAkB,GAAG;AACxB,aAAK,KAAK,IAAI;AACd;AAAA,MACD;AAEA,YAAM,YAAY,KAAK,IAAI,YAAY,cAAc;AACrD,YAAM,QAAQ,OAAO,MAAM,WAAW,GAAG;AAEzC,mBAAa;AACb,WAAK,KAAK,KAAK;AAAA,IAChB;AAAA,EACD,CAAC;AACF;","names":[]}