{"version":3,"sources":["../../../nodes/GetResponse/GetResponseTrigger.node.ts"],"sourcesContent":["import type {\n\tIHookFunctions,\n\tIWebhookFunctions,\n\tIDataObject,\n\tILoadOptionsFunctions,\n\tINodePropertyOptions,\n\tINodeType,\n\tINodeTypeDescription,\n\tIWebhookResponseData,\n\tJsonObject,\n} from 'n8n-workflow';\nimport { NodeApiError, NodeConnectionTypes } from 'n8n-workflow';\n\nimport { getresponseApiRequest, getResponseApiRequestAllItems } from './GenericFunctions';\n\nexport class GetResponseTrigger implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'GetResponse Trigger',\n\t\tname: 'getResponseTrigger',\n\t\t// eslint-disable-next-line n8n-nodes-base/node-class-description-icon-not-svg\n\t\ticon: 'file:getResponse.png',\n\t\tgroup: ['trigger'],\n\t\tversion: 1,\n\t\tdescription: 'Starts the workflow when GetResponse events occur',\n\t\tdefaults: {\n\t\t\tname: 'GetResponse Trigger',\n\t\t},\n\t\tinputs: [],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tcredentials: [\n\t\t\t{\n\t\t\t\tname: 'getResponseApi',\n\t\t\t\trequired: true,\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tauthentication: ['apiKey'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'getResponseOAuth2Api',\n\t\t\t\trequired: true,\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tauthentication: ['oAuth2'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t\twebhooks: [\n\t\t\t{\n\t\t\t\tname: 'default',\n\t\t\t\thttpMethod: 'GET',\n\t\t\t\tresponseMode: 'onReceived',\n\t\t\t\tpath: 'webhook',\n\t\t\t},\n\t\t],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Authentication',\n\t\t\t\tname: 'authentication',\n\t\t\t\ttype: 'options',\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'API Key',\n\t\t\t\t\t\tvalue: 'apiKey',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'OAuth2',\n\t\t\t\t\t\tvalue: 'oAuth2',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'apiKey',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Events',\n\t\t\t\tname: 'events',\n\t\t\t\ttype: 'multiOptions',\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Customer Subscribed',\n\t\t\t\t\t\tvalue: 'subscribe',\n\t\t\t\t\t\tdescription: 'Receive notifications when a customer is subscribed to a list',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Customer Unsubscribed',\n\t\t\t\t\t\tvalue: 'unsubscribe',\n\t\t\t\t\t\tdescription: 'Receive notifications when a customer is unsubscribed from a list',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Email Clicked',\n\t\t\t\t\t\tvalue: 'click',\n\t\t\t\t\t\tdescription: 'Receive notifications when a email is clicked',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Email Opened',\n\t\t\t\t\t\tvalue: 'open',\n\t\t\t\t\t\tdescription: 'Receive notifications when a email is opened',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Survey Submitted',\n\t\t\t\t\t\tvalue: 'survey',\n\t\t\t\t\t\tdescription: 'Receive notifications when a survey is submitted',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: [],\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'List Names or IDs',\n\t\t\t\tname: 'listIds',\n\t\t\t\ttype: 'multiOptions',\n\t\t\t\tdescription:\n\t\t\t\t\t'Choose from the list, or specify IDs using an <a href=\"https://docs.n8n.io/code/expressions/\">expression</a>',\n\t\t\t\ttypeOptions: {\n\t\t\t\t\tloadOptionsMethod: 'getLists',\n\t\t\t\t},\n\t\t\t\tdefault: [],\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Options',\n\t\t\t\tname: 'options',\n\t\t\t\tplaceholder: 'Add option',\n\t\t\t\ttype: 'collection',\n\t\t\t\tdefault: {},\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Delete Current Subscription',\n\t\t\t\t\t\tname: 'delete',\n\t\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\t\tdefault: false,\n\t\t\t\t\t\tdescription: 'Whether to delete the current subscription',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t],\n\t};\n\n\tmethods = {\n\t\tloadOptions: {\n\t\t\t// Get all the available teams to display them to user so that they can\n\t\t\t// select them easily\n\t\t\tasync getLists(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst returnData: INodePropertyOptions[] = [];\n\t\t\t\tconst lists = await getResponseApiRequestAllItems.call(this, 'GET', '/campaigns');\n\t\t\t\treturnData.push({ name: '*', value: '*' });\n\t\t\t\tfor (const list of lists) {\n\t\t\t\t\treturnData.push({\n\t\t\t\t\t\tname: list.name,\n\t\t\t\t\t\tvalue: list.campaignId,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn returnData;\n\t\t\t},\n\t\t},\n\t};\n\n\twebhookMethods = {\n\t\tdefault: {\n\t\t\tasync checkExists(this: IHookFunctions): Promise<boolean> {\n\t\t\t\tconst webhookUrl = this.getNodeWebhookUrl('default');\n\t\t\t\tconst deleteCurrentSubscription = this.getNodeParameter('options.delete', false) as boolean;\n\n\t\t\t\ttry {\n\t\t\t\t\tconst data = await getresponseApiRequest.call(this, 'GET', '/accounts/callbacks', {});\n\n\t\t\t\t\tif (data.url !== webhookUrl) {\n\t\t\t\t\t\tif (!deleteCurrentSubscription) {\n\t\t\t\t\t\t\tthrow new NodeApiError(this.getNode(), data as JsonObject, {\n\t\t\t\t\t\t\t\tmessage: `The webhook (${data.url}) is active in the account. Delete it manually or set the parameter \"Delete Current Subscription\" to true, and the node will delete it for you.`,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\tif (error.httpCode === '404') {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tawait getresponseApiRequest.call(this, 'DELETE', '/accounts/callbacks');\n\n\t\t\t\treturn false;\n\t\t\t},\n\t\t\tasync create(this: IHookFunctions): Promise<boolean> {\n\t\t\t\tconst webhookUrl = this.getNodeWebhookUrl('default');\n\t\t\t\tconst events = this.getNodeParameter('events') as string[];\n\n\t\t\t\tconst body = {\n\t\t\t\t\turl: webhookUrl,\n\t\t\t\t\tactions: events.reduce(\n\t\t\t\t\t\t(accumulator: { [key: string]: boolean }, currentValue: string) => {\n\t\t\t\t\t\t\taccumulator[currentValue] = true;\n\t\t\t\t\t\t\treturn accumulator;\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{},\n\t\t\t\t\t),\n\t\t\t\t};\n\n\t\t\t\tawait getresponseApiRequest.call(this, 'POST', '/accounts/callbacks', body);\n\n\t\t\t\treturn true;\n\t\t\t},\n\t\t\tasync delete(this: IHookFunctions): Promise<boolean> {\n\t\t\t\ttry {\n\t\t\t\t\tawait getresponseApiRequest.call(this, 'DELETE', '/accounts/callbacks');\n\t\t\t\t} catch (error) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\t\t\t},\n\t\t},\n\t};\n\n\tasync webhook(this: IWebhookFunctions): Promise<IWebhookResponseData> {\n\t\tconst query = this.getQueryData() as IDataObject;\n\t\tconst listIds = this.getNodeParameter('listIds') as string[];\n\n\t\tif (!listIds.includes('*') && !listIds.includes(query.CAMPAIGN_ID as string)) {\n\t\t\treturn {};\n\t\t}\n\n\t\treturn {\n\t\t\tworkflowData: [this.helpers.returnJsonArray(query)],\n\t\t};\n\t}\n}\n"],"mappings":"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","names":[]}