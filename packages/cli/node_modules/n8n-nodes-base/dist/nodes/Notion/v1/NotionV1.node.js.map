{"version":3,"sources":["../../../../nodes/Notion/v1/NotionV1.node.ts"],"sourcesContent":["import moment from 'moment-timezone';\nimport type {\n\tIExecuteFunctions,\n\tIDataObject,\n\tILoadOptionsFunctions,\n\tINodeExecutionData,\n\tINodePropertyOptions,\n\tINodeType,\n\tINodeTypeBaseDescription,\n\tINodeTypeDescription,\n} from 'n8n-workflow';\n\nimport { versionDescription } from './VersionDescription';\nimport type { SortData } from '../shared/GenericFunctions';\nimport {\n\textractDatabaseId,\n\textractDatabaseMentionRLC,\n\textractPageId,\n\tformatBlocks,\n\tformatTitle,\n\tgetBlockTypesOptions,\n\tmapFilters,\n\tmapProperties,\n\tmapSorting,\n\tnotionApiRequest,\n\tnotionApiRequestAllItems,\n\tsimplifyObjects,\n} from '../shared/GenericFunctions';\nimport { listSearch } from '../shared/methods';\n\nexport class NotionV1 implements INodeType {\n\tdescription: INodeTypeDescription;\n\n\tconstructor(baseDescription: INodeTypeBaseDescription) {\n\t\tthis.description = {\n\t\t\t...baseDescription,\n\t\t\t...versionDescription,\n\t\t};\n\t}\n\n\tmethods = {\n\t\tlistSearch,\n\t\tloadOptions: {\n\t\t\tasync getDatabaseProperties(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst returnData: INodePropertyOptions[] = [];\n\t\t\t\tconst databaseId = this.getCurrentNodeParameter('databaseId', {\n\t\t\t\t\textractValue: true,\n\t\t\t\t}) as string;\n\t\t\t\tconst { properties } = await notionApiRequest.call(this, 'GET', `/databases/${databaseId}`);\n\t\t\t\tfor (const key of Object.keys(properties as IDataObject)) {\n\t\t\t\t\t//remove parameters that cannot be set from the API.\n\t\t\t\t\tif (\n\t\t\t\t\t\t![\n\t\t\t\t\t\t\t'created_time',\n\t\t\t\t\t\t\t'last_edited_time',\n\t\t\t\t\t\t\t'created_by',\n\t\t\t\t\t\t\t'last_edited_by',\n\t\t\t\t\t\t\t'formula',\n\t\t\t\t\t\t\t'files',\n\t\t\t\t\t\t\t'rollup',\n\t\t\t\t\t\t].includes(properties[key].type as string)\n\t\t\t\t\t) {\n\t\t\t\t\t\treturnData.push({\n\t\t\t\t\t\t\tname: `${key} - (${properties[key].type})`,\n\t\t\t\t\t\t\tvalue: `${key}|${properties[key].type}`,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturnData.sort((a, b) => {\n\t\t\t\t\tif (a.name.toLocaleLowerCase() < b.name.toLocaleLowerCase()) {\n\t\t\t\t\t\treturn -1;\n\t\t\t\t\t}\n\t\t\t\t\tif (a.name.toLocaleLowerCase() > b.name.toLocaleLowerCase()) {\n\t\t\t\t\t\treturn 1;\n\t\t\t\t\t}\n\t\t\t\t\treturn 0;\n\t\t\t\t});\n\t\t\t\treturn returnData;\n\t\t\t},\n\t\t\tasync getFilterProperties(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst returnData: INodePropertyOptions[] = [];\n\t\t\t\tconst databaseId = this.getCurrentNodeParameter('databaseId', {\n\t\t\t\t\textractValue: true,\n\t\t\t\t}) as string;\n\t\t\t\tconst { properties } = await notionApiRequest.call(this, 'GET', `/databases/${databaseId}`);\n\t\t\t\tfor (const key of Object.keys(properties as IDataObject)) {\n\t\t\t\t\treturnData.push({\n\t\t\t\t\t\tname: `${key} - (${properties[key].type})`,\n\t\t\t\t\t\tvalue: `${key}|${properties[key].type}`,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturnData.sort((a, b) => {\n\t\t\t\t\tif (a.name.toLocaleLowerCase() < b.name.toLocaleLowerCase()) {\n\t\t\t\t\t\treturn -1;\n\t\t\t\t\t}\n\t\t\t\t\tif (a.name.toLocaleLowerCase() > b.name.toLocaleLowerCase()) {\n\t\t\t\t\t\treturn 1;\n\t\t\t\t\t}\n\t\t\t\t\treturn 0;\n\t\t\t\t});\n\t\t\t\treturn returnData;\n\t\t\t},\n\t\t\tasync getBlockTypes(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\treturn getBlockTypesOptions();\n\t\t\t},\n\t\t\tasync getPropertySelectValues(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst [name, type] = (this.getCurrentNodeParameter('&key') as string).split('|');\n\t\t\t\tconst databaseId = this.getCurrentNodeParameter('databaseId', {\n\t\t\t\t\textractValue: true,\n\t\t\t\t}) as string;\n\t\t\t\tconst resource = this.getCurrentNodeParameter('resource') as string;\n\t\t\t\tconst operation = this.getCurrentNodeParameter('operation') as string;\n\t\t\t\tconst { properties } = await notionApiRequest.call(this, 'GET', `/databases/${databaseId}`);\n\t\t\t\tif (resource === 'databasePage') {\n\t\t\t\t\tif (['multi_select', 'select'].includes(type) && operation === 'getAll') {\n\t\t\t\t\t\treturn properties[name][type].options.map((option: IDataObject) => ({\n\t\t\t\t\t\t\tname: option.name,\n\t\t\t\t\t\t\tvalue: option.name,\n\t\t\t\t\t\t}));\n\t\t\t\t\t} else if (['multi_select'].includes(type) && ['create', 'update'].includes(operation)) {\n\t\t\t\t\t\treturn properties[name][type].options.map((option: IDataObject) => ({\n\t\t\t\t\t\t\tname: option.name,\n\t\t\t\t\t\t\tvalue: option.name,\n\t\t\t\t\t\t}));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn properties[name][type].options.map((option: IDataObject) => ({\n\t\t\t\t\tname: option.name,\n\t\t\t\t\tvalue: option.id,\n\t\t\t\t}));\n\t\t\t},\n\t\t\tasync getUsers(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst returnData: INodePropertyOptions[] = [];\n\t\t\t\tconst users = await notionApiRequestAllItems.call(this, 'results', 'GET', '/users');\n\t\t\t\tfor (const user of users) {\n\t\t\t\t\tif (user.type === 'person') {\n\t\t\t\t\t\treturnData.push({\n\t\t\t\t\t\t\tname: user.name,\n\t\t\t\t\t\t\tvalue: user.id,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn returnData;\n\t\t\t},\n\t\t\tasync getDatabaseIdFromPage(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst returnData: INodePropertyOptions[] = [];\n\t\t\t\tconst pageId = extractPageId(\n\t\t\t\t\tthis.getCurrentNodeParameter('pageId', { extractValue: true }) as string,\n\t\t\t\t);\n\t\t\t\tconst {\n\t\t\t\t\tparent: { database_id: databaseId },\n\t\t\t\t} = await notionApiRequest.call(this, 'GET', `/pages/${pageId}`);\n\t\t\t\tconst { properties } = await notionApiRequest.call(this, 'GET', `/databases/${databaseId}`);\n\t\t\t\tfor (const key of Object.keys(properties as IDataObject)) {\n\t\t\t\t\t//remove parameters that cannot be set from the API.\n\t\t\t\t\tif (\n\t\t\t\t\t\t![\n\t\t\t\t\t\t\t'created_time',\n\t\t\t\t\t\t\t'last_edited_time',\n\t\t\t\t\t\t\t'created_by',\n\t\t\t\t\t\t\t'last_edited_by',\n\t\t\t\t\t\t\t'formula',\n\t\t\t\t\t\t\t'files',\n\t\t\t\t\t\t].includes(properties[key].type as string)\n\t\t\t\t\t) {\n\t\t\t\t\t\treturnData.push({\n\t\t\t\t\t\t\tname: `${key} - (${properties[key].type})`,\n\t\t\t\t\t\t\tvalue: `${key}|${properties[key].type}`,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturnData.sort((a, b) => {\n\t\t\t\t\tif (a.name.toLocaleLowerCase() < b.name.toLocaleLowerCase()) {\n\t\t\t\t\t\treturn -1;\n\t\t\t\t\t}\n\t\t\t\t\tif (a.name.toLocaleLowerCase() > b.name.toLocaleLowerCase()) {\n\t\t\t\t\t\treturn 1;\n\t\t\t\t\t}\n\t\t\t\t\treturn 0;\n\t\t\t\t});\n\t\t\t\treturn returnData;\n\t\t\t},\n\n\t\t\tasync getDatabaseOptionsFromPage(\n\t\t\t\tthis: ILoadOptionsFunctions,\n\t\t\t): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst pageId = extractPageId(\n\t\t\t\t\tthis.getCurrentNodeParameter('pageId', { extractValue: true }) as string,\n\t\t\t\t);\n\t\t\t\tconst [name, type] = (this.getCurrentNodeParameter('&key') as string).split('|');\n\t\t\t\tconst {\n\t\t\t\t\tparent: { database_id: databaseId },\n\t\t\t\t} = await notionApiRequest.call(this, 'GET', `/pages/${pageId}`);\n\t\t\t\tconst { properties } = await notionApiRequest.call(this, 'GET', `/databases/${databaseId}`);\n\t\t\t\treturn properties[name][type].options.map((option: IDataObject) => ({\n\t\t\t\t\tname: option.name,\n\t\t\t\t\tvalue: option.id,\n\t\t\t\t}));\n\t\t\t},\n\n\t\t\t// Get all the timezones to display them to user so that they can\n\t\t\t// select them easily\n\t\t\tasync getTimezones(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst returnData: INodePropertyOptions[] = [];\n\t\t\t\tfor (const timezone of moment.tz.names()) {\n\t\t\t\t\tconst timezoneName = timezone;\n\t\t\t\t\tconst timezoneId = timezone;\n\t\t\t\t\treturnData.push({\n\t\t\t\t\t\tname: timezoneName,\n\t\t\t\t\t\tvalue: timezoneId,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturnData.unshift({\n\t\t\t\t\tname: 'Default',\n\t\t\t\t\tvalue: 'default',\n\t\t\t\t\tdescription: 'Timezone set in n8n',\n\t\t\t\t});\n\t\t\t\treturn returnData;\n\t\t\t},\n\t\t},\n\t};\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t\tconst items = this.getInputData();\n\t\tconst returnData: INodeExecutionData[] = [];\n\t\tconst length = items.length;\n\t\tlet responseData;\n\t\tconst qs: IDataObject = {};\n\t\tconst timezone = this.getTimezone();\n\n\t\tconst resource = this.getNodeParameter('resource', 0);\n\t\tconst operation = this.getNodeParameter('operation', 0);\n\n\t\tif (resource === 'block') {\n\t\t\tif (operation === 'append') {\n\t\t\t\tfor (let i = 0; i < length; i++) {\n\t\t\t\t\tconst blockId = extractPageId(\n\t\t\t\t\t\tthis.getNodeParameter('blockId', i, '', { extractValue: true }) as string,\n\t\t\t\t\t);\n\t\t\t\t\tconst blockValues = this.getNodeParameter('blockUi.blockValues', i, []) as IDataObject[];\n\t\t\t\t\textractDatabaseMentionRLC(blockValues);\n\t\t\t\t\tconst body: IDataObject = {\n\t\t\t\t\t\tchildren: formatBlocks(blockValues),\n\t\t\t\t\t};\n\t\t\t\t\tconst block = await notionApiRequest.call(\n\t\t\t\t\t\tthis,\n\t\t\t\t\t\t'PATCH',\n\t\t\t\t\t\t`/blocks/${blockId}/children`,\n\t\t\t\t\t\tbody,\n\t\t\t\t\t);\n\n\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\tthis.helpers.returnJsonArray(block as IDataObject),\n\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t);\n\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (operation === 'getAll') {\n\t\t\t\tfor (let i = 0; i < length; i++) {\n\t\t\t\t\tconst blockId = extractPageId(\n\t\t\t\t\t\tthis.getNodeParameter('blockId', i, '', { extractValue: true }) as string,\n\t\t\t\t\t);\n\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', i);\n\t\t\t\t\tif (returnAll) {\n\t\t\t\t\t\tresponseData = await notionApiRequestAllItems.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'results',\n\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t`/blocks/${blockId}/children`,\n\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tqs.page_size = this.getNodeParameter('limit', i);\n\t\t\t\t\t\tresponseData = await notionApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t`/blocks/${blockId}/children`,\n\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tresponseData = responseData.results;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject),\n\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t);\n\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (resource === 'database') {\n\t\t\tif (operation === 'get') {\n\t\t\t\tfor (let i = 0; i < length; i++) {\n\t\t\t\t\tconst databaseId = extractDatabaseId(\n\t\t\t\t\t\tthis.getNodeParameter('databaseId', i, '', { extractValue: true }) as string,\n\t\t\t\t\t);\n\t\t\t\t\tresponseData = await notionApiRequest.call(this, 'GET', `/databases/${databaseId}`);\n\n\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject),\n\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t);\n\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (operation === 'getAll') {\n\t\t\t\tfor (let i = 0; i < length; i++) {\n\t\t\t\t\tconst body: IDataObject = {\n\t\t\t\t\t\tfilter: { property: 'object', value: 'database' },\n\t\t\t\t\t};\n\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', i);\n\t\t\t\t\tif (returnAll) {\n\t\t\t\t\t\tresponseData = await notionApiRequestAllItems.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'results',\n\t\t\t\t\t\t\t'POST',\n\t\t\t\t\t\t\t'/search',\n\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbody.page_size = this.getNodeParameter('limit', i);\n\t\t\t\t\t\tresponseData = await notionApiRequest.call(this, 'POST', '/search', body);\n\t\t\t\t\t\tresponseData = responseData.results;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject),\n\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t);\n\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (resource === 'databasePage') {\n\t\t\tif (operation === 'create') {\n\t\t\t\tfor (let i = 0; i < length; i++) {\n\t\t\t\t\tconst simple = this.getNodeParameter('simple', i) as boolean;\n\n\t\t\t\t\tconst body: { [key: string]: any } = {\n\t\t\t\t\t\tparent: {},\n\t\t\t\t\t\tproperties: {},\n\t\t\t\t\t};\n\t\t\t\t\tbody.parent.database_id = this.getNodeParameter('databaseId', i, '', {\n\t\t\t\t\t\textractValue: true,\n\t\t\t\t\t}) as string;\n\t\t\t\t\tconst properties = this.getNodeParameter(\n\t\t\t\t\t\t'propertiesUi.propertyValues',\n\t\t\t\t\t\ti,\n\t\t\t\t\t\t[],\n\t\t\t\t\t) as IDataObject[];\n\t\t\t\t\tif (properties.length !== 0) {\n\t\t\t\t\t\tbody.properties = mapProperties.call(this, properties, timezone) as IDataObject;\n\t\t\t\t\t}\n\t\t\t\t\tconst blockValues = this.getNodeParameter('blockUi.blockValues', i, []) as IDataObject[];\n\t\t\t\t\textractDatabaseMentionRLC(blockValues);\n\t\t\t\t\tbody.children = formatBlocks(blockValues);\n\t\t\t\t\tresponseData = await notionApiRequest.call(this, 'POST', '/pages', body);\n\t\t\t\t\tif (simple) {\n\t\t\t\t\t\tresponseData = simplifyObjects(responseData, false, 1);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst options = this.getNodeParameter('options', i);\n\t\t\t\t\tif (options.icon) {\n\t\t\t\t\t\tif (options.iconType && options.iconType === 'file') {\n\t\t\t\t\t\t\tbody.icon = { external: { url: options.icon } };\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tbody.icon = { emoji: options.icon };\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject),\n\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t);\n\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (operation === 'getAll') {\n\t\t\t\tfor (let i = 0; i < length; i++) {\n\t\t\t\t\tconst simple = this.getNodeParameter('simple', 0) as boolean;\n\t\t\t\t\tconst databaseId = this.getNodeParameter('databaseId', i, '', {\n\t\t\t\t\t\textractValue: true,\n\t\t\t\t\t}) as string;\n\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', i);\n\t\t\t\t\tconst filters = this.getNodeParameter('options.filter', i, {}) as IDataObject;\n\t\t\t\t\tconst sort = this.getNodeParameter('options.sort.sortValue', i, []) as SortData[];\n\t\t\t\t\tconst body: IDataObject = {\n\t\t\t\t\t\tfilter: {},\n\t\t\t\t\t};\n\t\t\t\t\tif (filters.singleCondition) {\n\t\t\t\t\t\tbody.filter = mapFilters([filters.singleCondition] as IDataObject[], timezone);\n\t\t\t\t\t}\n\t\t\t\t\tif (filters.multipleCondition) {\n\t\t\t\t\t\tconst { or, and } = (filters.multipleCondition as IDataObject).condition as IDataObject;\n\t\t\t\t\t\tif (Array.isArray(or) && or.length !== 0) {\n\t\t\t\t\t\t\tObject.assign(body.filter!, {\n\t\t\t\t\t\t\t\tor: (or as IDataObject[]).map((data) => mapFilters([data], timezone)),\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (Array.isArray(and) && and.length !== 0) {\n\t\t\t\t\t\t\tObject.assign(body.filter!, {\n\t\t\t\t\t\t\t\tand: (and as IDataObject[]).map((data) => mapFilters([data], timezone)),\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (!Object.keys(body.filter as IDataObject).length) {\n\t\t\t\t\t\tdelete body.filter;\n\t\t\t\t\t}\n\t\t\t\t\tif (sort) {\n\t\t\t\t\t\tbody.sorts = mapSorting(sort);\n\t\t\t\t\t}\n\t\t\t\t\tif (returnAll) {\n\t\t\t\t\t\tresponseData = await notionApiRequestAllItems.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'results',\n\t\t\t\t\t\t\t'POST',\n\t\t\t\t\t\t\t`/databases/${databaseId}/query`,\n\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbody.page_size = this.getNodeParameter('limit', i);\n\t\t\t\t\t\tresponseData = await notionApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'POST',\n\t\t\t\t\t\t\t`/databases/${databaseId}/query`,\n\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tresponseData = responseData.results;\n\t\t\t\t\t}\n\t\t\t\t\tif (simple) {\n\t\t\t\t\t\tresponseData = simplifyObjects(responseData, false, 1);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject),\n\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t);\n\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (operation === 'update') {\n\t\t\t\tfor (let i = 0; i < length; i++) {\n\t\t\t\t\tconst pageId = extractPageId(\n\t\t\t\t\t\tthis.getNodeParameter('pageId', i, '', { extractValue: true }) as string,\n\t\t\t\t\t);\n\t\t\t\t\tconst simple = this.getNodeParameter('simple', i) as boolean;\n\t\t\t\t\tconst properties = this.getNodeParameter(\n\t\t\t\t\t\t'propertiesUi.propertyValues',\n\t\t\t\t\t\ti,\n\t\t\t\t\t\t[],\n\t\t\t\t\t) as IDataObject[];\n\n\t\t\t\t\tconst body: { [key: string]: any } = {\n\t\t\t\t\t\tproperties: {},\n\t\t\t\t\t};\n\t\t\t\t\tif (properties.length !== 0) {\n\t\t\t\t\t\tbody.properties = mapProperties.call(this, properties, timezone) as IDataObject;\n\t\t\t\t\t}\n\t\t\t\t\tresponseData = await notionApiRequest.call(this, 'PATCH', `/pages/${pageId}`, body);\n\t\t\t\t\tif (simple) {\n\t\t\t\t\t\tresponseData = simplifyObjects(responseData, false, 1);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject),\n\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t);\n\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (resource === 'user') {\n\t\t\tif (operation === 'get') {\n\t\t\t\tfor (let i = 0; i < length; i++) {\n\t\t\t\t\tconst userId = this.getNodeParameter('userId', i) as string;\n\t\t\t\t\tresponseData = await notionApiRequest.call(this, 'GET', `/users/${userId}`);\n\n\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject),\n\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t);\n\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (operation === 'getAll') {\n\t\t\t\tfor (let i = 0; i < length; i++) {\n\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', i);\n\t\t\t\t\tif (returnAll) {\n\t\t\t\t\t\tresponseData = await notionApiRequestAllItems.call(this, 'results', 'GET', '/users');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tqs.limit = this.getNodeParameter('limit', i);\n\t\t\t\t\t\tresponseData = await notionApiRequestAllItems.call(this, 'results', 'GET', '/users');\n\t\t\t\t\t\tresponseData = responseData.splice(0, qs.limit);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject),\n\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t);\n\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (resource === 'page') {\n\t\t\tif (operation === 'create') {\n\t\t\t\tfor (let i = 0; i < length; i++) {\n\t\t\t\t\tconst simple = this.getNodeParameter('simple', i) as boolean;\n\n\t\t\t\t\tconst body: { [key: string]: any } = {\n\t\t\t\t\t\tparent: {},\n\t\t\t\t\t\tproperties: {},\n\t\t\t\t\t};\n\t\t\t\t\tbody.parent.page_id = extractPageId(\n\t\t\t\t\t\tthis.getNodeParameter('pageId', i, '', { extractValue: true }) as string,\n\t\t\t\t\t);\n\t\t\t\t\tbody.properties = formatTitle(this.getNodeParameter('title', i) as string);\n\t\t\t\t\tconst blockValues = this.getNodeParameter('blockUi.blockValues', i, []) as IDataObject[];\n\t\t\t\t\textractDatabaseMentionRLC(blockValues);\n\t\t\t\t\tbody.children = formatBlocks(blockValues);\n\t\t\t\t\tresponseData = await notionApiRequest.call(this, 'POST', '/pages', body);\n\t\t\t\t\tif (simple) {\n\t\t\t\t\t\tresponseData = simplifyObjects(responseData, false, 1);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst options = this.getNodeParameter('options', i);\n\t\t\t\t\tif (options.icon) {\n\t\t\t\t\t\tif (options.iconType && options.iconType === 'file') {\n\t\t\t\t\t\t\tbody.icon = { external: { url: options.icon } };\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tbody.icon = { emoji: options.icon };\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject),\n\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t);\n\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (operation === 'get') {\n\t\t\t\tfor (let i = 0; i < length; i++) {\n\t\t\t\t\tconst pageId = extractPageId(this.getNodeParameter('pageId', i) as string);\n\t\t\t\t\tconst simple = this.getNodeParameter('simple', i) as boolean;\n\t\t\t\t\tresponseData = await notionApiRequest.call(this, 'GET', `/pages/${pageId}`);\n\t\t\t\t\tif (simple) {\n\t\t\t\t\t\tresponseData = simplifyObjects(responseData, false, 1);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject),\n\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t);\n\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (operation === 'search') {\n\t\t\t\tfor (let i = 0; i < length; i++) {\n\t\t\t\t\tconst text = this.getNodeParameter('text', i) as string;\n\t\t\t\t\tconst options = this.getNodeParameter('options', i);\n\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', i);\n\t\t\t\t\tconst simple = this.getNodeParameter('simple', i) as boolean;\n\t\t\t\t\tconst body: IDataObject = {};\n\n\t\t\t\t\tif (text) {\n\t\t\t\t\t\tbody.query = text;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (options.filter) {\n\t\t\t\t\t\tconst filter = ((options.filter as IDataObject)?.filters as IDataObject[]) || [];\n\t\t\t\t\t\tbody.filter = filter;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (options.sort) {\n\t\t\t\t\t\tconst sort = ((options.sort as IDataObject)?.sortValue as IDataObject) || {};\n\t\t\t\t\t\tbody.sort = sort;\n\t\t\t\t\t}\n\t\t\t\t\tif (returnAll) {\n\t\t\t\t\t\tresponseData = await notionApiRequestAllItems.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'results',\n\t\t\t\t\t\t\t'POST',\n\t\t\t\t\t\t\t'/search',\n\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tqs.limit = this.getNodeParameter('limit', i);\n\t\t\t\t\t\tresponseData = await notionApiRequestAllItems.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'results',\n\t\t\t\t\t\t\t'POST',\n\t\t\t\t\t\t\t'/search',\n\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tresponseData = responseData.splice(0, qs.limit);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (simple) {\n\t\t\t\t\t\tresponseData = simplifyObjects(responseData, false, 1);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject),\n\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t);\n\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn [returnData];\n\t}\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAAmB;AAYnB,gCAAmC;AAEnC,8BAaO;AACP,qBAA2B;AAEpB,MAAM,SAA8B;AAAA,EAG1C,YAAY,iBAA2C;AAOvD,mBAAU;AAAA,MACT;AAAA,MACA,aAAa;AAAA,QACZ,MAAM,wBAAoF;AACzF,gBAAM,aAAqC,CAAC;AAC5C,gBAAM,aAAa,KAAK,wBAAwB,cAAc;AAAA,YAC7D,cAAc;AAAA,UACf,CAAC;AACD,gBAAM,EAAE,WAAW,IAAI,MAAM,yCAAiB,KAAK,MAAM,OAAO,cAAc,UAAU,EAAE;AAC1F,qBAAW,OAAO,OAAO,KAAK,UAAyB,GAAG;AAEzD,gBACC,CAAC;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,YACD,EAAE,SAAS,WAAW,GAAG,EAAE,IAAc,GACxC;AACD,yBAAW,KAAK;AAAA,gBACf,MAAM,GAAG,GAAG,OAAO,WAAW,GAAG,EAAE,IAAI;AAAA,gBACvC,OAAO,GAAG,GAAG,IAAI,WAAW,GAAG,EAAE,IAAI;AAAA,cACtC,CAAC;AAAA,YACF;AAAA,UACD;AACA,qBAAW,KAAK,CAAC,GAAG,MAAM;AACzB,gBAAI,EAAE,KAAK,kBAAkB,IAAI,EAAE,KAAK,kBAAkB,GAAG;AAC5D,qBAAO;AAAA,YACR;AACA,gBAAI,EAAE,KAAK,kBAAkB,IAAI,EAAE,KAAK,kBAAkB,GAAG;AAC5D,qBAAO;AAAA,YACR;AACA,mBAAO;AAAA,UACR,CAAC;AACD,iBAAO;AAAA,QACR;AAAA,QACA,MAAM,sBAAkF;AACvF,gBAAM,aAAqC,CAAC;AAC5C,gBAAM,aAAa,KAAK,wBAAwB,cAAc;AAAA,YAC7D,cAAc;AAAA,UACf,CAAC;AACD,gBAAM,EAAE,WAAW,IAAI,MAAM,yCAAiB,KAAK,MAAM,OAAO,cAAc,UAAU,EAAE;AAC1F,qBAAW,OAAO,OAAO,KAAK,UAAyB,GAAG;AACzD,uBAAW,KAAK;AAAA,cACf,MAAM,GAAG,GAAG,OAAO,WAAW,GAAG,EAAE,IAAI;AAAA,cACvC,OAAO,GAAG,GAAG,IAAI,WAAW,GAAG,EAAE,IAAI;AAAA,YACtC,CAAC;AAAA,UACF;AACA,qBAAW,KAAK,CAAC,GAAG,MAAM;AACzB,gBAAI,EAAE,KAAK,kBAAkB,IAAI,EAAE,KAAK,kBAAkB,GAAG;AAC5D,qBAAO;AAAA,YACR;AACA,gBAAI,EAAE,KAAK,kBAAkB,IAAI,EAAE,KAAK,kBAAkB,GAAG;AAC5D,qBAAO;AAAA,YACR;AACA,mBAAO;AAAA,UACR,CAAC;AACD,iBAAO;AAAA,QACR;AAAA,QACA,MAAM,gBAA4E;AACjF,qBAAO,8CAAqB;AAAA,QAC7B;AAAA,QACA,MAAM,0BAAsF;AAC3F,gBAAM,CAAC,MAAM,IAAI,IAAK,KAAK,wBAAwB,MAAM,EAAa,MAAM,GAAG;AAC/E,gBAAM,aAAa,KAAK,wBAAwB,cAAc;AAAA,YAC7D,cAAc;AAAA,UACf,CAAC;AACD,gBAAM,WAAW,KAAK,wBAAwB,UAAU;AACxD,gBAAM,YAAY,KAAK,wBAAwB,WAAW;AAC1D,gBAAM,EAAE,WAAW,IAAI,MAAM,yCAAiB,KAAK,MAAM,OAAO,cAAc,UAAU,EAAE;AAC1F,cAAI,aAAa,gBAAgB;AAChC,gBAAI,CAAC,gBAAgB,QAAQ,EAAE,SAAS,IAAI,KAAK,cAAc,UAAU;AACxE,qBAAO,WAAW,IAAI,EAAE,IAAI,EAAE,QAAQ,IAAI,CAAC,YAAyB;AAAA,gBACnE,MAAM,OAAO;AAAA,gBACb,OAAO,OAAO;AAAA,cACf,EAAE;AAAA,YACH,WAAW,CAAC,cAAc,EAAE,SAAS,IAAI,KAAK,CAAC,UAAU,QAAQ,EAAE,SAAS,SAAS,GAAG;AACvF,qBAAO,WAAW,IAAI,EAAE,IAAI,EAAE,QAAQ,IAAI,CAAC,YAAyB;AAAA,gBACnE,MAAM,OAAO;AAAA,gBACb,OAAO,OAAO;AAAA,cACf,EAAE;AAAA,YACH;AAAA,UACD;AACA,iBAAO,WAAW,IAAI,EAAE,IAAI,EAAE,QAAQ,IAAI,CAAC,YAAyB;AAAA,YACnE,MAAM,OAAO;AAAA,YACb,OAAO,OAAO;AAAA,UACf,EAAE;AAAA,QACH;AAAA,QACA,MAAM,WAAuE;AAC5E,gBAAM,aAAqC,CAAC;AAC5C,gBAAM,QAAQ,MAAM,iDAAyB,KAAK,MAAM,WAAW,OAAO,QAAQ;AAClF,qBAAW,QAAQ,OAAO;AACzB,gBAAI,KAAK,SAAS,UAAU;AAC3B,yBAAW,KAAK;AAAA,gBACf,MAAM,KAAK;AAAA,gBACX,OAAO,KAAK;AAAA,cACb,CAAC;AAAA,YACF;AAAA,UACD;AACA,iBAAO;AAAA,QACR;AAAA,QACA,MAAM,wBAAoF;AACzF,gBAAM,aAAqC,CAAC;AAC5C,gBAAM,aAAS;AAAA,YACd,KAAK,wBAAwB,UAAU,EAAE,cAAc,KAAK,CAAC;AAAA,UAC9D;AACA,gBAAM;AAAA,YACL,QAAQ,EAAE,aAAa,WAAW;AAAA,UACnC,IAAI,MAAM,yCAAiB,KAAK,MAAM,OAAO,UAAU,MAAM,EAAE;AAC/D,gBAAM,EAAE,WAAW,IAAI,MAAM,yCAAiB,KAAK,MAAM,OAAO,cAAc,UAAU,EAAE;AAC1F,qBAAW,OAAO,OAAO,KAAK,UAAyB,GAAG;AAEzD,gBACC,CAAC;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,YACD,EAAE,SAAS,WAAW,GAAG,EAAE,IAAc,GACxC;AACD,yBAAW,KAAK;AAAA,gBACf,MAAM,GAAG,GAAG,OAAO,WAAW,GAAG,EAAE,IAAI;AAAA,gBACvC,OAAO,GAAG,GAAG,IAAI,WAAW,GAAG,EAAE,IAAI;AAAA,cACtC,CAAC;AAAA,YACF;AAAA,UACD;AACA,qBAAW,KAAK,CAAC,GAAG,MAAM;AACzB,gBAAI,EAAE,KAAK,kBAAkB,IAAI,EAAE,KAAK,kBAAkB,GAAG;AAC5D,qBAAO;AAAA,YACR;AACA,gBAAI,EAAE,KAAK,kBAAkB,IAAI,EAAE,KAAK,kBAAkB,GAAG;AAC5D,qBAAO;AAAA,YACR;AACA,mBAAO;AAAA,UACR,CAAC;AACD,iBAAO;AAAA,QACR;AAAA,QAEA,MAAM,6BAE6B;AAClC,gBAAM,aAAS;AAAA,YACd,KAAK,wBAAwB,UAAU,EAAE,cAAc,KAAK,CAAC;AAAA,UAC9D;AACA,gBAAM,CAAC,MAAM,IAAI,IAAK,KAAK,wBAAwB,MAAM,EAAa,MAAM,GAAG;AAC/E,gBAAM;AAAA,YACL,QAAQ,EAAE,aAAa,WAAW;AAAA,UACnC,IAAI,MAAM,yCAAiB,KAAK,MAAM,OAAO,UAAU,MAAM,EAAE;AAC/D,gBAAM,EAAE,WAAW,IAAI,MAAM,yCAAiB,KAAK,MAAM,OAAO,cAAc,UAAU,EAAE;AAC1F,iBAAO,WAAW,IAAI,EAAE,IAAI,EAAE,QAAQ,IAAI,CAAC,YAAyB;AAAA,YACnE,MAAM,OAAO;AAAA,YACb,OAAO,OAAO;AAAA,UACf,EAAE;AAAA,QACH;AAAA;AAAA;AAAA,QAIA,MAAM,eAA2E;AAChF,gBAAM,aAAqC,CAAC;AAC5C,qBAAW,YAAY,uBAAAA,QAAO,GAAG,MAAM,GAAG;AACzC,kBAAM,eAAe;AACrB,kBAAM,aAAa;AACnB,uBAAW,KAAK;AAAA,cACf,MAAM;AAAA,cACN,OAAO;AAAA,YACR,CAAC;AAAA,UACF;AACA,qBAAW,QAAQ;AAAA,YAClB,MAAM;AAAA,YACN,OAAO;AAAA,YACP,aAAa;AAAA,UACd,CAAC;AACD,iBAAO;AAAA,QACR;AAAA,MACD;AAAA,IACD;AA1LC,SAAK,cAAc;AAAA,MAClB,GAAG;AAAA,MACH,GAAG;AAAA,IACJ;AAAA,EACD;AAAA,EAwLA,MAAM,UAAkE;AACvE,UAAM,QAAQ,KAAK,aAAa;AAChC,UAAM,aAAmC,CAAC;AAC1C,UAAM,SAAS,MAAM;AACrB,QAAI;AACJ,UAAM,KAAkB,CAAC;AACzB,UAAM,WAAW,KAAK,YAAY;AAElC,UAAM,WAAW,KAAK,iBAAiB,YAAY,CAAC;AACpD,UAAM,YAAY,KAAK,iBAAiB,aAAa,CAAC;AAEtD,QAAI,aAAa,SAAS;AACzB,UAAI,cAAc,UAAU;AAC3B,iBAAS,IAAI,GAAG,IAAI,QAAQ,KAAK;AAChC,gBAAM,cAAU;AAAA,YACf,KAAK,iBAAiB,WAAW,GAAG,IAAI,EAAE,cAAc,KAAK,CAAC;AAAA,UAC/D;AACA,gBAAM,cAAc,KAAK,iBAAiB,uBAAuB,GAAG,CAAC,CAAC;AACtE,iEAA0B,WAAW;AACrC,gBAAM,OAAoB;AAAA,YACzB,cAAU,sCAAa,WAAW;AAAA,UACnC;AACA,gBAAM,QAAQ,MAAM,yCAAiB;AAAA,YACpC;AAAA,YACA;AAAA,YACA,WAAW,OAAO;AAAA,YAClB;AAAA,UACD;AAEA,gBAAM,gBAAgB,KAAK,QAAQ;AAAA,YAClC,KAAK,QAAQ,gBAAgB,KAAoB;AAAA,YACjD,EAAE,UAAU,EAAE,MAAM,EAAE,EAAE;AAAA,UACzB;AACA,qBAAW,KAAK,GAAG,aAAa;AAAA,QACjC;AAAA,MACD;AAEA,UAAI,cAAc,UAAU;AAC3B,iBAAS,IAAI,GAAG,IAAI,QAAQ,KAAK;AAChC,gBAAM,cAAU;AAAA,YACf,KAAK,iBAAiB,WAAW,GAAG,IAAI,EAAE,cAAc,KAAK,CAAC;AAAA,UAC/D;AACA,gBAAM,YAAY,KAAK,iBAAiB,aAAa,CAAC;AACtD,cAAI,WAAW;AACd,2BAAe,MAAM,iDAAyB;AAAA,cAC7C;AAAA,cACA;AAAA,cACA;AAAA,cACA,WAAW,OAAO;AAAA,cAClB,CAAC;AAAA,YACF;AAAA,UACD,OAAO;AACN,eAAG,YAAY,KAAK,iBAAiB,SAAS,CAAC;AAC/C,2BAAe,MAAM,yCAAiB;AAAA,cACrC;AAAA,cACA;AAAA,cACA,WAAW,OAAO;AAAA,cAClB,CAAC;AAAA,cACD;AAAA,YACD;AACA,2BAAe,aAAa;AAAA,UAC7B;AAEA,gBAAM,gBAAgB,KAAK,QAAQ;AAAA,YAClC,KAAK,QAAQ,gBAAgB,YAA2B;AAAA,YACxD,EAAE,UAAU,EAAE,MAAM,EAAE,EAAE;AAAA,UACzB;AACA,qBAAW,KAAK,GAAG,aAAa;AAAA,QACjC;AAAA,MACD;AAAA,IACD;AAEA,QAAI,aAAa,YAAY;AAC5B,UAAI,cAAc,OAAO;AACxB,iBAAS,IAAI,GAAG,IAAI,QAAQ,KAAK;AAChC,gBAAM,iBAAa;AAAA,YAClB,KAAK,iBAAiB,cAAc,GAAG,IAAI,EAAE,cAAc,KAAK,CAAC;AAAA,UAClE;AACA,yBAAe,MAAM,yCAAiB,KAAK,MAAM,OAAO,cAAc,UAAU,EAAE;AAElF,gBAAM,gBAAgB,KAAK,QAAQ;AAAA,YAClC,KAAK,QAAQ,gBAAgB,YAA2B;AAAA,YACxD,EAAE,UAAU,EAAE,MAAM,EAAE,EAAE;AAAA,UACzB;AACA,qBAAW,KAAK,GAAG,aAAa;AAAA,QACjC;AAAA,MACD;AAEA,UAAI,cAAc,UAAU;AAC3B,iBAAS,IAAI,GAAG,IAAI,QAAQ,KAAK;AAChC,gBAAM,OAAoB;AAAA,YACzB,QAAQ,EAAE,UAAU,UAAU,OAAO,WAAW;AAAA,UACjD;AACA,gBAAM,YAAY,KAAK,iBAAiB,aAAa,CAAC;AACtD,cAAI,WAAW;AACd,2BAAe,MAAM,iDAAyB;AAAA,cAC7C;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,YACD;AAAA,UACD,OAAO;AACN,iBAAK,YAAY,KAAK,iBAAiB,SAAS,CAAC;AACjD,2BAAe,MAAM,yCAAiB,KAAK,MAAM,QAAQ,WAAW,IAAI;AACxE,2BAAe,aAAa;AAAA,UAC7B;AAEA,gBAAM,gBAAgB,KAAK,QAAQ;AAAA,YAClC,KAAK,QAAQ,gBAAgB,YAA2B;AAAA,YACxD,EAAE,UAAU,EAAE,MAAM,EAAE,EAAE;AAAA,UACzB;AACA,qBAAW,KAAK,GAAG,aAAa;AAAA,QACjC;AAAA,MACD;AAAA,IACD;AAEA,QAAI,aAAa,gBAAgB;AAChC,UAAI,cAAc,UAAU;AAC3B,iBAAS,IAAI,GAAG,IAAI,QAAQ,KAAK;AAChC,gBAAM,SAAS,KAAK,iBAAiB,UAAU,CAAC;AAEhD,gBAAM,OAA+B;AAAA,YACpC,QAAQ,CAAC;AAAA,YACT,YAAY,CAAC;AAAA,UACd;AACA,eAAK,OAAO,cAAc,KAAK,iBAAiB,cAAc,GAAG,IAAI;AAAA,YACpE,cAAc;AAAA,UACf,CAAC;AACD,gBAAM,aAAa,KAAK;AAAA,YACvB;AAAA,YACA;AAAA,YACA,CAAC;AAAA,UACF;AACA,cAAI,WAAW,WAAW,GAAG;AAC5B,iBAAK,aAAa,sCAAc,KAAK,MAAM,YAAY,QAAQ;AAAA,UAChE;AACA,gBAAM,cAAc,KAAK,iBAAiB,uBAAuB,GAAG,CAAC,CAAC;AACtE,iEAA0B,WAAW;AACrC,eAAK,eAAW,sCAAa,WAAW;AACxC,yBAAe,MAAM,yCAAiB,KAAK,MAAM,QAAQ,UAAU,IAAI;AACvE,cAAI,QAAQ;AACX,+BAAe,yCAAgB,cAAc,OAAO,CAAC;AAAA,UACtD;AAEA,gBAAM,UAAU,KAAK,iBAAiB,WAAW,CAAC;AAClD,cAAI,QAAQ,MAAM;AACjB,gBAAI,QAAQ,YAAY,QAAQ,aAAa,QAAQ;AACpD,mBAAK,OAAO,EAAE,UAAU,EAAE,KAAK,QAAQ,KAAK,EAAE;AAAA,YAC/C,OAAO;AACN,mBAAK,OAAO,EAAE,OAAO,QAAQ,KAAK;AAAA,YACnC;AAAA,UACD;AAEA,gBAAM,gBAAgB,KAAK,QAAQ;AAAA,YAClC,KAAK,QAAQ,gBAAgB,YAA2B;AAAA,YACxD,EAAE,UAAU,EAAE,MAAM,EAAE,EAAE;AAAA,UACzB;AACA,qBAAW,KAAK,GAAG,aAAa;AAAA,QACjC;AAAA,MACD;AAEA,UAAI,cAAc,UAAU;AAC3B,iBAAS,IAAI,GAAG,IAAI,QAAQ,KAAK;AAChC,gBAAM,SAAS,KAAK,iBAAiB,UAAU,CAAC;AAChD,gBAAM,aAAa,KAAK,iBAAiB,cAAc,GAAG,IAAI;AAAA,YAC7D,cAAc;AAAA,UACf,CAAC;AACD,gBAAM,YAAY,KAAK,iBAAiB,aAAa,CAAC;AACtD,gBAAM,UAAU,KAAK,iBAAiB,kBAAkB,GAAG,CAAC,CAAC;AAC7D,gBAAM,OAAO,KAAK,iBAAiB,0BAA0B,GAAG,CAAC,CAAC;AAClE,gBAAM,OAAoB;AAAA,YACzB,QAAQ,CAAC;AAAA,UACV;AACA,cAAI,QAAQ,iBAAiB;AAC5B,iBAAK,aAAS,oCAAW,CAAC,QAAQ,eAAe,GAAoB,QAAQ;AAAA,UAC9E;AACA,cAAI,QAAQ,mBAAmB;AAC9B,kBAAM,EAAE,IAAI,IAAI,IAAK,QAAQ,kBAAkC;AAC/D,gBAAI,MAAM,QAAQ,EAAE,KAAK,GAAG,WAAW,GAAG;AACzC,qBAAO,OAAO,KAAK,QAAS;AAAA,gBAC3B,IAAK,GAAqB,IAAI,CAAC,aAAS,oCAAW,CAAC,IAAI,GAAG,QAAQ,CAAC;AAAA,cACrE,CAAC;AAAA,YACF;AACA,gBAAI,MAAM,QAAQ,GAAG,KAAK,IAAI,WAAW,GAAG;AAC3C,qBAAO,OAAO,KAAK,QAAS;AAAA,gBAC3B,KAAM,IAAsB,IAAI,CAAC,aAAS,oCAAW,CAAC,IAAI,GAAG,QAAQ,CAAC;AAAA,cACvE,CAAC;AAAA,YACF;AAAA,UACD;AACA,cAAI,CAAC,OAAO,KAAK,KAAK,MAAqB,EAAE,QAAQ;AACpD,mBAAO,KAAK;AAAA,UACb;AACA,cAAI,MAAM;AACT,iBAAK,YAAQ,oCAAW,IAAI;AAAA,UAC7B;AACA,cAAI,WAAW;AACd,2BAAe,MAAM,iDAAyB;AAAA,cAC7C;AAAA,cACA;AAAA,cACA;AAAA,cACA,cAAc,UAAU;AAAA,cACxB;AAAA,cACA,CAAC;AAAA,YACF;AAAA,UACD,OAAO;AACN,iBAAK,YAAY,KAAK,iBAAiB,SAAS,CAAC;AACjD,2BAAe,MAAM,yCAAiB;AAAA,cACrC;AAAA,cACA;AAAA,cACA,cAAc,UAAU;AAAA,cACxB;AAAA,cACA;AAAA,YACD;AACA,2BAAe,aAAa;AAAA,UAC7B;AACA,cAAI,QAAQ;AACX,+BAAe,yCAAgB,cAAc,OAAO,CAAC;AAAA,UACtD;AAEA,gBAAM,gBAAgB,KAAK,QAAQ;AAAA,YAClC,KAAK,QAAQ,gBAAgB,YAA2B;AAAA,YACxD,EAAE,UAAU,EAAE,MAAM,EAAE,EAAE;AAAA,UACzB;AACA,qBAAW,KAAK,GAAG,aAAa;AAAA,QACjC;AAAA,MACD;AAEA,UAAI,cAAc,UAAU;AAC3B,iBAAS,IAAI,GAAG,IAAI,QAAQ,KAAK;AAChC,gBAAM,aAAS;AAAA,YACd,KAAK,iBAAiB,UAAU,GAAG,IAAI,EAAE,cAAc,KAAK,CAAC;AAAA,UAC9D;AACA,gBAAM,SAAS,KAAK,iBAAiB,UAAU,CAAC;AAChD,gBAAM,aAAa,KAAK;AAAA,YACvB;AAAA,YACA;AAAA,YACA,CAAC;AAAA,UACF;AAEA,gBAAM,OAA+B;AAAA,YACpC,YAAY,CAAC;AAAA,UACd;AACA,cAAI,WAAW,WAAW,GAAG;AAC5B,iBAAK,aAAa,sCAAc,KAAK,MAAM,YAAY,QAAQ;AAAA,UAChE;AACA,yBAAe,MAAM,yCAAiB,KAAK,MAAM,SAAS,UAAU,MAAM,IAAI,IAAI;AAClF,cAAI,QAAQ;AACX,+BAAe,yCAAgB,cAAc,OAAO,CAAC;AAAA,UACtD;AAEA,gBAAM,gBAAgB,KAAK,QAAQ;AAAA,YAClC,KAAK,QAAQ,gBAAgB,YAA2B;AAAA,YACxD,EAAE,UAAU,EAAE,MAAM,EAAE,EAAE;AAAA,UACzB;AACA,qBAAW,KAAK,GAAG,aAAa;AAAA,QACjC;AAAA,MACD;AAAA,IACD;AAEA,QAAI,aAAa,QAAQ;AACxB,UAAI,cAAc,OAAO;AACxB,iBAAS,IAAI,GAAG,IAAI,QAAQ,KAAK;AAChC,gBAAM,SAAS,KAAK,iBAAiB,UAAU,CAAC;AAChD,yBAAe,MAAM,yCAAiB,KAAK,MAAM,OAAO,UAAU,MAAM,EAAE;AAE1E,gBAAM,gBAAgB,KAAK,QAAQ;AAAA,YAClC,KAAK,QAAQ,gBAAgB,YAA2B;AAAA,YACxD,EAAE,UAAU,EAAE,MAAM,EAAE,EAAE;AAAA,UACzB;AACA,qBAAW,KAAK,GAAG,aAAa;AAAA,QACjC;AAAA,MACD;AACA,UAAI,cAAc,UAAU;AAC3B,iBAAS,IAAI,GAAG,IAAI,QAAQ,KAAK;AAChC,gBAAM,YAAY,KAAK,iBAAiB,aAAa,CAAC;AACtD,cAAI,WAAW;AACd,2BAAe,MAAM,iDAAyB,KAAK,MAAM,WAAW,OAAO,QAAQ;AAAA,UACpF,OAAO;AACN,eAAG,QAAQ,KAAK,iBAAiB,SAAS,CAAC;AAC3C,2BAAe,MAAM,iDAAyB,KAAK,MAAM,WAAW,OAAO,QAAQ;AACnF,2BAAe,aAAa,OAAO,GAAG,GAAG,KAAK;AAAA,UAC/C;AAEA,gBAAM,gBAAgB,KAAK,QAAQ;AAAA,YAClC,KAAK,QAAQ,gBAAgB,YAA2B;AAAA,YACxD,EAAE,UAAU,EAAE,MAAM,EAAE,EAAE;AAAA,UACzB;AACA,qBAAW,KAAK,GAAG,aAAa;AAAA,QACjC;AAAA,MACD;AAAA,IACD;AAEA,QAAI,aAAa,QAAQ;AACxB,UAAI,cAAc,UAAU;AAC3B,iBAAS,IAAI,GAAG,IAAI,QAAQ,KAAK;AAChC,gBAAM,SAAS,KAAK,iBAAiB,UAAU,CAAC;AAEhD,gBAAM,OAA+B;AAAA,YACpC,QAAQ,CAAC;AAAA,YACT,YAAY,CAAC;AAAA,UACd;AACA,eAAK,OAAO,cAAU;AAAA,YACrB,KAAK,iBAAiB,UAAU,GAAG,IAAI,EAAE,cAAc,KAAK,CAAC;AAAA,UAC9D;AACA,eAAK,iBAAa,qCAAY,KAAK,iBAAiB,SAAS,CAAC,CAAW;AACzE,gBAAM,cAAc,KAAK,iBAAiB,uBAAuB,GAAG,CAAC,CAAC;AACtE,iEAA0B,WAAW;AACrC,eAAK,eAAW,sCAAa,WAAW;AACxC,yBAAe,MAAM,yCAAiB,KAAK,MAAM,QAAQ,UAAU,IAAI;AACvE,cAAI,QAAQ;AACX,+BAAe,yCAAgB,cAAc,OAAO,CAAC;AAAA,UACtD;AAEA,gBAAM,UAAU,KAAK,iBAAiB,WAAW,CAAC;AAClD,cAAI,QAAQ,MAAM;AACjB,gBAAI,QAAQ,YAAY,QAAQ,aAAa,QAAQ;AACpD,mBAAK,OAAO,EAAE,UAAU,EAAE,KAAK,QAAQ,KAAK,EAAE;AAAA,YAC/C,OAAO;AACN,mBAAK,OAAO,EAAE,OAAO,QAAQ,KAAK;AAAA,YACnC;AAAA,UACD;AAEA,gBAAM,gBAAgB,KAAK,QAAQ;AAAA,YAClC,KAAK,QAAQ,gBAAgB,YAA2B;AAAA,YACxD,EAAE,UAAU,EAAE,MAAM,EAAE,EAAE;AAAA,UACzB;AACA,qBAAW,KAAK,GAAG,aAAa;AAAA,QACjC;AAAA,MACD;AAEA,UAAI,cAAc,OAAO;AACxB,iBAAS,IAAI,GAAG,IAAI,QAAQ,KAAK;AAChC,gBAAM,aAAS,uCAAc,KAAK,iBAAiB,UAAU,CAAC,CAAW;AACzE,gBAAM,SAAS,KAAK,iBAAiB,UAAU,CAAC;AAChD,yBAAe,MAAM,yCAAiB,KAAK,MAAM,OAAO,UAAU,MAAM,EAAE;AAC1E,cAAI,QAAQ;AACX,+BAAe,yCAAgB,cAAc,OAAO,CAAC;AAAA,UACtD;AAEA,gBAAM,gBAAgB,KAAK,QAAQ;AAAA,YAClC,KAAK,QAAQ,gBAAgB,YAA2B;AAAA,YACxD,EAAE,UAAU,EAAE,MAAM,EAAE,EAAE;AAAA,UACzB;AACA,qBAAW,KAAK,GAAG,aAAa;AAAA,QACjC;AAAA,MACD;AAEA,UAAI,cAAc,UAAU;AAC3B,iBAAS,IAAI,GAAG,IAAI,QAAQ,KAAK;AAChC,gBAAM,OAAO,KAAK,iBAAiB,QAAQ,CAAC;AAC5C,gBAAM,UAAU,KAAK,iBAAiB,WAAW,CAAC;AAClD,gBAAM,YAAY,KAAK,iBAAiB,aAAa,CAAC;AACtD,gBAAM,SAAS,KAAK,iBAAiB,UAAU,CAAC;AAChD,gBAAM,OAAoB,CAAC;AAE3B,cAAI,MAAM;AACT,iBAAK,QAAQ;AAAA,UACd;AAEA,cAAI,QAAQ,QAAQ;AACnB,kBAAM,SAAW,QAAQ,QAAwB,WAA6B,CAAC;AAC/E,iBAAK,SAAS;AAAA,UACf;AAEA,cAAI,QAAQ,MAAM;AACjB,kBAAM,OAAS,QAAQ,MAAsB,aAA6B,CAAC;AAC3E,iBAAK,OAAO;AAAA,UACb;AACA,cAAI,WAAW;AACd,2BAAe,MAAM,iDAAyB;AAAA,cAC7C;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,YACD;AAAA,UACD,OAAO;AACN,eAAG,QAAQ,KAAK,iBAAiB,SAAS,CAAC;AAC3C,2BAAe,MAAM,iDAAyB;AAAA,cAC7C;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,YACD;AACA,2BAAe,aAAa,OAAO,GAAG,GAAG,KAAK;AAAA,UAC/C;AAEA,cAAI,QAAQ;AACX,+BAAe,yCAAgB,cAAc,OAAO,CAAC;AAAA,UACtD;AAEA,gBAAM,gBAAgB,KAAK,QAAQ;AAAA,YAClC,KAAK,QAAQ,gBAAgB,YAA2B;AAAA,YACxD,EAAE,UAAU,EAAE,MAAM,EAAE,EAAE;AAAA,UACzB;AACA,qBAAW,KAAK,GAAG,aAAa;AAAA,QACjC;AAAA,MACD;AAAA,IACD;AACA,WAAO,CAAC,UAAU;AAAA,EACnB;AACD;","names":["moment"]}