{"version":3,"sources":["../../../nodes/PostBin/GenericFunctions.ts"],"sourcesContent":["import type {\n\tIExecuteSingleFunctions,\n\tIHttpRequestOptions,\n\tIN8nHttpFullResponse,\n\tINodeExecutionData,\n} from 'n8n-workflow';\nimport { NodeApiError } from 'n8n-workflow';\n\n// Regular expressions used to extract binId from parameter value\nconst BIN_ID_REGEX = /\\b\\d{13}-\\d{13}\\b/g;\n\n/**\n * Extracts the PostBin Bin Id from the specified string.\n * This method should be able to extract bin Id from the\n * PostBin URL or from the string in the following format:\n * `Bin '<binId>'.`\n *\n */\nfunction parseBinId(context: IExecuteSingleFunctions) {\n\tconst binId = context.getNodeParameter('binId') as string;\n\t// Test if the Bin id is in the expected format\n\tBIN_ID_REGEX.lastIndex = 0;\n\tconst idMatch = BIN_ID_REGEX.exec(binId);\n\n\t// Return what is matched\n\tif (idMatch) {\n\t\treturn idMatch[0];\n\t}\n\n\t// If it's not recognized, error out\n\tthrow new NodeApiError(\n\t\tcontext.getNode(),\n\t\t{},\n\t\t{\n\t\t\tmessage: 'Bin ID format is not valid',\n\t\t\tdescription: 'Please check the provided Bin ID and try again.',\n\t\t\tparseXml: false,\n\t\t},\n\t);\n}\n\n/**\n * Creates correctly-formatted PostBin API URL based on the entered binId.\n * This function makes sure binId is in the expected format by parsing it\n * from current node parameter value.\n *\n */\nexport async function buildBinAPIURL(\n\tthis: IExecuteSingleFunctions,\n\trequestOptions: IHttpRequestOptions,\n): Promise<IHttpRequestOptions> {\n\tconst binId = parseBinId(this);\n\t// Assemble the PostBin API URL and put it back to requestOptions\n\trequestOptions.url = `/api/bin/${binId}`;\n\n\treturn requestOptions;\n}\n\n/**\n * Creates correctly-formatted PostBin Bin test URL based on the entered binId.\n * This function makes sure binId is in the expected format by parsing it\n * from current node parameter value.\n *\n */\nexport async function buildBinTestURL(\n\tthis: IExecuteSingleFunctions,\n\trequestOptions: IHttpRequestOptions,\n): Promise<IHttpRequestOptions> {\n\tconst binId = parseBinId(this);\n\n\t// Assemble the PostBin API URL and put it back to requestOptions\n\trequestOptions.url = `/${binId}`;\n\treturn requestOptions;\n}\n\n/**\n * Creates correctly-formatted PostBin API URL based on the entered binId and reqId.\n * This function makes sure binId is in the expected format by parsing it\n * from current node parameter value.\n *\n */\nexport async function buildRequestURL(\n\tthis: IExecuteSingleFunctions,\n\trequestOptions: IHttpRequestOptions,\n): Promise<IHttpRequestOptions> {\n\tconst reqId = this.getNodeParameter('requestId', 'shift') as string;\n\tconst binId = parseBinId(this);\n\n\trequestOptions.url = `/api/bin/${binId}/req/${reqId}`;\n\treturn requestOptions;\n}\n\n/**\n * Converts the bin response data and adds additional properties\n *\n */\nexport async function transformBinResponse(\n\tthis: IExecuteSingleFunctions,\n\titems: INodeExecutionData[],\n\t_response: IN8nHttpFullResponse,\n): Promise<INodeExecutionData[]> {\n\titems.forEach(\n\t\t(item) =>\n\t\t\t(item.json = {\n\t\t\t\tbinId: item.json.binId,\n\t\t\t\tnowTimestamp: item.json.now,\n\t\t\t\tnowIso: new Date(item.json.now as string).toISOString(),\n\t\t\t\texpiresTimestamp: item.json.expires,\n\t\t\t\texpiresIso: new Date(item.json.expires as string).toISOString(),\n\t\t\t\trequestUrl: 'https://www.postb.in/' + (item.json.binId as string),\n\t\t\t\tviewUrl: 'https://www.postb.in/b/' + (item.json.binId as string),\n\t\t\t}),\n\t);\n\treturn items;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA,0BAA6B;AAG7B,MAAM,eAAe;AASrB,SAAS,WAAW,SAAkC;AACrD,QAAM,QAAQ,QAAQ,iBAAiB,OAAO;AAE9C,eAAa,YAAY;AACzB,QAAM,UAAU,aAAa,KAAK,KAAK;AAGvC,MAAI,SAAS;AACZ,WAAO,QAAQ,CAAC;AAAA,EACjB;AAGA,QAAM,IAAI;AAAA,IACT,QAAQ,QAAQ;AAAA,IAChB,CAAC;AAAA,IACD;AAAA,MACC,SAAS;AAAA,MACT,aAAa;AAAA,MACb,UAAU;AAAA,IACX;AAAA,EACD;AACD;AAQA,eAAsB,eAErB,gBAC+B;AAC/B,QAAM,QAAQ,WAAW,IAAI;AAE7B,iBAAe,MAAM,YAAY,KAAK;AAEtC,SAAO;AACR;AAQA,eAAsB,gBAErB,gBAC+B;AAC/B,QAAM,QAAQ,WAAW,IAAI;AAG7B,iBAAe,MAAM,IAAI,KAAK;AAC9B,SAAO;AACR;AAQA,eAAsB,gBAErB,gBAC+B;AAC/B,QAAM,QAAQ,KAAK,iBAAiB,aAAa,OAAO;AACxD,QAAM,QAAQ,WAAW,IAAI;AAE7B,iBAAe,MAAM,YAAY,KAAK,QAAQ,KAAK;AACnD,SAAO;AACR;AAMA,eAAsB,qBAErB,OACA,WACgC;AAChC,QAAM;AAAA,IACL,CAAC,SACC,KAAK,OAAO;AAAA,MACZ,OAAO,KAAK,KAAK;AAAA,MACjB,cAAc,KAAK,KAAK;AAAA,MACxB,QAAQ,IAAI,KAAK,KAAK,KAAK,GAAa,EAAE,YAAY;AAAA,MACtD,kBAAkB,KAAK,KAAK;AAAA,MAC5B,YAAY,IAAI,KAAK,KAAK,KAAK,OAAiB,EAAE,YAAY;AAAA,MAC9D,YAAY,0BAA2B,KAAK,KAAK;AAAA,MACjD,SAAS,4BAA6B,KAAK,KAAK;AAAA,IACjD;AAAA,EACF;AACA,SAAO;AACR;","names":[]}