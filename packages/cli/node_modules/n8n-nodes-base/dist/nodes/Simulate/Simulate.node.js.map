{"version":3,"sources":["../../../nodes/Simulate/Simulate.node.ts"],"sourcesContent":["import { sleep, jsonParse, NodeOperationError, NodeConnectionTypes } from 'n8n-workflow';\nimport type {\n\tIExecuteFunctions,\n\tINodeExecutionData,\n\tINodeType,\n\tINodeTypeDescription,\n\tIDataObject,\n} from 'n8n-workflow';\n\nimport {\n\texecutionDurationProperty,\n\ticonSelector,\n\tjsonOutputProperty,\n\tsubtitleProperty,\n} from './descriptions';\nimport { loadOptions } from './methods';\n\nexport class Simulate implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'Simulate',\n\t\thidden: true,\n\t\tname: 'simulate',\n\t\tgroup: ['organization'],\n\t\tversion: 1,\n\t\tdescription: 'Simulate a node',\n\t\tsubtitle: '={{$parameter.subtitle || undefined}}',\n\t\ticon: 'fa:arrow-right',\n\t\tdefaults: {\n\t\t\tname: 'Simulate',\n\t\t\tcolor: '#b0b0b0',\n\t\t},\n\t\tinputs: [NodeConnectionTypes.Main],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tproperties: [\n\t\t\ticonSelector,\n\t\t\tsubtitleProperty,\n\t\t\t{\n\t\t\t\tdisplayName: 'Output',\n\t\t\t\tname: 'output',\n\t\t\t\ttype: 'options',\n\t\t\t\tdefault: 'all',\n\t\t\t\tnoDataExpression: true,\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\t// eslint-disable-next-line n8n-nodes-base/node-param-display-name-miscased\n\t\t\t\t\t\tname: 'Returns all input items',\n\t\t\t\t\t\tvalue: 'all',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t// eslint-disable-next-line n8n-nodes-base/node-param-display-name-miscased\n\t\t\t\t\t\tname: 'Specify how many of input items to return',\n\t\t\t\t\t\tvalue: 'specify',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t// eslint-disable-next-line n8n-nodes-base/node-param-display-name-miscased\n\t\t\t\t\t\tname: 'Specify output as JSON',\n\t\t\t\t\t\tvalue: 'custom',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Number of Items',\n\t\t\t\tname: 'numberOfItems',\n\t\t\t\ttype: 'number',\n\t\t\t\tdefault: 1,\n\t\t\t\tdescription:\n\t\t\t\t\t'Number input of items to return, if greater then input length all items will be returned',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toutput: ['specify'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\ttypeOptions: {\n\t\t\t\t\tminValue: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t...jsonOutputProperty,\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toutput: ['custom'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\texecutionDurationProperty,\n\t\t],\n\t};\n\n\tmethods = { loadOptions };\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t\tconst items = this.getInputData();\n\t\tlet returnItems: INodeExecutionData[] = [];\n\n\t\tconst output = this.getNodeParameter('output', 0) as string;\n\n\t\tif (output === 'all') {\n\t\t\treturnItems = items;\n\t\t} else if (output === 'specify') {\n\t\t\tconst numberOfItems = this.getNodeParameter('numberOfItems', 0) as number;\n\n\t\t\treturnItems = items.slice(0, numberOfItems);\n\t\t} else if (output === 'custom') {\n\t\t\tlet jsonOutput = this.getNodeParameter('jsonOutput', 0);\n\n\t\t\tif (typeof jsonOutput === 'string') {\n\t\t\t\ttry {\n\t\t\t\t\tjsonOutput = jsonParse<IDataObject>(jsonOutput);\n\t\t\t\t} catch (error) {\n\t\t\t\t\tthrow new NodeOperationError(this.getNode(), 'Invalid JSON');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!Array.isArray(jsonOutput)) {\n\t\t\t\tjsonOutput = [jsonOutput];\n\t\t\t}\n\n\t\t\tfor (const item of jsonOutput as IDataObject[]) {\n\t\t\t\treturnItems.push({ json: item });\n\t\t\t}\n\t\t}\n\n\t\tconst executionDuration = this.getNodeParameter('executionDuration', 0) as number;\n\n\t\tif (executionDuration > 0) {\n\t\t\tawait sleep(executionDuration);\n\t\t}\n\n\t\treturn [returnItems];\n\t}\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAA0E;AAS1E,0BAKO;AACP,qBAA4B;AAErB,MAAM,SAA8B;AAAA,EAApC;AACN,uBAAoC;AAAA,MACnC,aAAa;AAAA,MACb,QAAQ;AAAA,MACR,MAAM;AAAA,MACN,OAAO,CAAC,cAAc;AAAA,MACtB,SAAS;AAAA,MACT,aAAa;AAAA,MACb,UAAU;AAAA,MACV,MAAM;AAAA,MACN,UAAU;AAAA,QACT,MAAM;AAAA,QACN,OAAO;AAAA,MACR;AAAA,MACA,QAAQ,CAAC,wCAAoB,IAAI;AAAA,MACjC,SAAS,CAAC,wCAAoB,IAAI;AAAA,MAClC,YAAY;AAAA,QACX;AAAA,QACA;AAAA,QACA;AAAA,UACC,aAAa;AAAA,UACb,MAAM;AAAA,UACN,MAAM;AAAA,UACN,SAAS;AAAA,UACT,kBAAkB;AAAA,UAClB,SAAS;AAAA,YACR;AAAA;AAAA,cAEC,MAAM;AAAA,cACN,OAAO;AAAA,YACR;AAAA,YACA;AAAA;AAAA,cAEC,MAAM;AAAA,cACN,OAAO;AAAA,YACR;AAAA,YACA;AAAA;AAAA,cAEC,MAAM;AAAA,cACN,OAAO;AAAA,YACR;AAAA,UACD;AAAA,QACD;AAAA,QACA;AAAA,UACC,aAAa;AAAA,UACb,MAAM;AAAA,UACN,MAAM;AAAA,UACN,SAAS;AAAA,UACT,aACC;AAAA,UACD,gBAAgB;AAAA,YACf,MAAM;AAAA,cACL,QAAQ,CAAC,SAAS;AAAA,YACnB;AAAA,UACD;AAAA,UACA,aAAa;AAAA,YACZ,UAAU;AAAA,UACX;AAAA,QACD;AAAA,QACA;AAAA,UACC,GAAG;AAAA,UACH,gBAAgB;AAAA,YACf,MAAM;AAAA,cACL,QAAQ,CAAC,QAAQ;AAAA,YAClB;AAAA,UACD;AAAA,QACD;AAAA,QACA;AAAA,MACD;AAAA,IACD;AAEA,mBAAU,EAAE,wCAAY;AAAA;AAAA,EAExB,MAAM,UAAkE;AACvE,UAAM,QAAQ,KAAK,aAAa;AAChC,QAAI,cAAoC,CAAC;AAEzC,UAAM,SAAS,KAAK,iBAAiB,UAAU,CAAC;AAEhD,QAAI,WAAW,OAAO;AACrB,oBAAc;AAAA,IACf,WAAW,WAAW,WAAW;AAChC,YAAM,gBAAgB,KAAK,iBAAiB,iBAAiB,CAAC;AAE9D,oBAAc,MAAM,MAAM,GAAG,aAAa;AAAA,IAC3C,WAAW,WAAW,UAAU;AAC/B,UAAI,aAAa,KAAK,iBAAiB,cAAc,CAAC;AAEtD,UAAI,OAAO,eAAe,UAAU;AACnC,YAAI;AACH,2BAAa,+BAAuB,UAAU;AAAA,QAC/C,SAAS,OAAO;AACf,gBAAM,IAAI,uCAAmB,KAAK,QAAQ,GAAG,cAAc;AAAA,QAC5D;AAAA,MACD;AAEA,UAAI,CAAC,MAAM,QAAQ,UAAU,GAAG;AAC/B,qBAAa,CAAC,UAAU;AAAA,MACzB;AAEA,iBAAW,QAAQ,YAA6B;AAC/C,oBAAY,KAAK,EAAE,MAAM,KAAK,CAAC;AAAA,MAChC;AAAA,IACD;AAEA,UAAM,oBAAoB,KAAK,iBAAiB,qBAAqB,CAAC;AAEtE,QAAI,oBAAoB,GAAG;AAC1B,gBAAM,2BAAM,iBAAiB;AAAA,IAC9B;AAEA,WAAO,CAAC,WAAW;AAAA,EACpB;AACD;","names":[]}