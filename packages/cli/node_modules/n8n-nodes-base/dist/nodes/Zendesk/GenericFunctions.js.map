{"version":3,"sources":["../../../nodes/Zendesk/GenericFunctions.ts"],"sourcesContent":["import type {\n\tIDataObject,\n\tIExecuteFunctions,\n\tIHookFunctions,\n\tILoadOptionsFunctions,\n\tIHttpRequestMethods,\n\tIRequestOptions,\n} from 'n8n-workflow';\n\nfunction getUri(resource: string, subdomain: string) {\n\tif (resource.includes('webhooks')) {\n\t\treturn `https://${subdomain}.zendesk.com/api/v2${resource}`;\n\t} else {\n\t\treturn `https://${subdomain}.zendesk.com/api/v2${resource}.json`;\n\t}\n}\n\nexport async function zendeskApiRequest(\n\tthis: IHookFunctions | IExecuteFunctions | ILoadOptionsFunctions,\n\tmethod: IHttpRequestMethods,\n\tresource: string,\n\n\tbody: any = {},\n\tqs: IDataObject = {},\n\turi?: string,\n\toption: IDataObject = {},\n) {\n\tconst authenticationMethod = this.getNodeParameter('authentication', 0);\n\n\tlet credentials;\n\n\tif (authenticationMethod === 'apiToken') {\n\t\tcredentials = await this.getCredentials<{ subdomain: string }>('zendeskApi');\n\t} else {\n\t\tcredentials = await this.getCredentials<{ subdomain: string }>('zendeskOAuth2Api');\n\t}\n\n\tlet options: IRequestOptions = {\n\t\tmethod,\n\t\tqs,\n\t\tbody,\n\t\turi: uri || getUri(resource, credentials.subdomain),\n\t\tjson: true,\n\t\tqsStringifyOptions: {\n\t\t\tarrayFormat: 'brackets',\n\t\t},\n\t};\n\n\toptions = Object.assign({}, options, option);\n\tif (Object.keys(options.body as IDataObject).length === 0) {\n\t\tdelete options.body;\n\t}\n\n\tconst credentialType = authenticationMethod === 'apiToken' ? 'zendeskApi' : 'zendeskOAuth2Api';\n\n\treturn await this.helpers.requestWithAuthentication.call(this, credentialType, options);\n}\n\n/**\n * Make an API request to paginated flow endpoint\n * and return all results\n */\nexport async function zendeskApiRequestAllItems(\n\tthis: IHookFunctions | IExecuteFunctions | ILoadOptionsFunctions,\n\tpropertyName: string,\n\tmethod: IHttpRequestMethods,\n\tresource: string,\n\n\tbody: any = {},\n\tquery: IDataObject = {},\n): Promise<any> {\n\tconst returnData: IDataObject[] = [];\n\n\tlet responseData;\n\n\tlet uri: string | undefined;\n\n\tdo {\n\t\tresponseData = await zendeskApiRequest.call(this, method, resource, body, query, uri);\n\t\turi = responseData.next_page;\n\t\treturnData.push.apply(returnData, responseData[propertyName] as IDataObject[]);\n\t\tconst limit = query.limit as number | undefined;\n\t\tif (limit && limit <= returnData.length) {\n\t\t\treturn returnData;\n\t\t}\n\t} while (responseData.next_page !== undefined && responseData.next_page !== null);\n\n\treturn returnData;\n}\n\nexport function validateJSON(json: string | undefined): any {\n\tlet result;\n\ttry {\n\t\tresult = JSON.parse(json!);\n\t} catch (exception) {\n\t\tresult = undefined;\n\t}\n\treturn result;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA,SAAS,OAAO,UAAkB,WAAmB;AACpD,MAAI,SAAS,SAAS,UAAU,GAAG;AAClC,WAAO,WAAW,SAAS,sBAAsB,QAAQ;AAAA,EAC1D,OAAO;AACN,WAAO,WAAW,SAAS,sBAAsB,QAAQ;AAAA,EAC1D;AACD;AAEA,eAAsB,kBAErB,QACA,UAEA,OAAY,CAAC,GACb,KAAkB,CAAC,GACnB,KACA,SAAsB,CAAC,GACtB;AACD,QAAM,uBAAuB,KAAK,iBAAiB,kBAAkB,CAAC;AAEtE,MAAI;AAEJ,MAAI,yBAAyB,YAAY;AACxC,kBAAc,MAAM,KAAK,eAAsC,YAAY;AAAA,EAC5E,OAAO;AACN,kBAAc,MAAM,KAAK,eAAsC,kBAAkB;AAAA,EAClF;AAEA,MAAI,UAA2B;AAAA,IAC9B;AAAA,IACA;AAAA,IACA;AAAA,IACA,KAAK,OAAO,OAAO,UAAU,YAAY,SAAS;AAAA,IAClD,MAAM;AAAA,IACN,oBAAoB;AAAA,MACnB,aAAa;AAAA,IACd;AAAA,EACD;AAEA,YAAU,OAAO,OAAO,CAAC,GAAG,SAAS,MAAM;AAC3C,MAAI,OAAO,KAAK,QAAQ,IAAmB,EAAE,WAAW,GAAG;AAC1D,WAAO,QAAQ;AAAA,EAChB;AAEA,QAAM,iBAAiB,yBAAyB,aAAa,eAAe;AAE5E,SAAO,MAAM,KAAK,QAAQ,0BAA0B,KAAK,MAAM,gBAAgB,OAAO;AACvF;AAMA,eAAsB,0BAErB,cACA,QACA,UAEA,OAAY,CAAC,GACb,QAAqB,CAAC,GACP;AACf,QAAM,aAA4B,CAAC;AAEnC,MAAI;AAEJ,MAAI;AAEJ,KAAG;AACF,mBAAe,MAAM,kBAAkB,KAAK,MAAM,QAAQ,UAAU,MAAM,OAAO,GAAG;AACpF,UAAM,aAAa;AACnB,eAAW,KAAK,MAAM,YAAY,aAAa,YAAY,CAAkB;AAC7E,UAAM,QAAQ,MAAM;AACpB,QAAI,SAAS,SAAS,WAAW,QAAQ;AACxC,aAAO;AAAA,IACR;AAAA,EACD,SAAS,aAAa,cAAc,UAAa,aAAa,cAAc;AAE5E,SAAO;AACR;AAEO,SAAS,aAAa,MAA+B;AAC3D,MAAI;AACJ,MAAI;AACH,aAAS,KAAK,MAAM,IAAK;AAAA,EAC1B,SAAS,WAAW;AACnB,aAAS;AAAA,EACV;AACA,SAAO;AACR;","names":[]}