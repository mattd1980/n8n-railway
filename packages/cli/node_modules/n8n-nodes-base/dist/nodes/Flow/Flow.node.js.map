{"version":3,"sources":["../../../nodes/Flow/Flow.node.ts"],"sourcesContent":["import type {\n\tIExecuteFunctions,\n\tIDataObject,\n\tINodeExecutionData,\n\tINodeType,\n\tINodeTypeDescription,\n\tJsonObject,\n} from 'n8n-workflow';\nimport { NodeConnectionTypes, NodeApiError } from 'n8n-workflow';\n\nimport { flowApiRequest, FlowApiRequestAllItems } from './GenericFunctions';\nimport { taskFields, taskOperations } from './TaskDescription';\nimport type { ITask, TaskInfo } from './TaskInterface';\n\nexport class Flow implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'Flow',\n\t\tname: 'flow',\n\t\ticon: 'file:flow.svg',\n\t\tgroup: ['output'],\n\t\tversion: 1,\n\t\tsubtitle: '={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}',\n\t\tdescription: 'Consume Flow API',\n\t\tdefaults: {\n\t\t\tname: 'Flow',\n\t\t},\n\t\tinputs: [NodeConnectionTypes.Main],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tcredentials: [\n\t\t\t{\n\t\t\t\tname: 'flowApi',\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Resource',\n\t\t\t\tname: 'resource',\n\t\t\t\ttype: 'options',\n\t\t\t\tnoDataExpression: true,\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Task',\n\t\t\t\t\t\tvalue: 'task',\n\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t'Tasks are units of work that can be private or assigned to a list. Through this endpoint, you can manipulate your tasks in Flow, including creating new ones.',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'task',\n\t\t\t},\n\t\t\t...taskOperations,\n\t\t\t...taskFields,\n\t\t],\n\t};\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t\tconst credentials = await this.getCredentials('flowApi');\n\n\t\tconst items = this.getInputData();\n\t\tconst returnData: INodeExecutionData[] = [];\n\t\tconst length = items.length;\n\t\tlet responseData;\n\t\tconst qs: IDataObject = {};\n\t\tconst resource = this.getNodeParameter('resource', 0);\n\t\tconst operation = this.getNodeParameter('operation', 0);\n\n\t\tfor (let i = 0; i < length; i++) {\n\t\t\tif (resource === 'task') {\n\t\t\t\t//https://developer.getflow.com/api/#tasks_create-task\n\t\t\t\tif (operation === 'create') {\n\t\t\t\t\tconst workspaceId = this.getNodeParameter('workspaceId', i) as string;\n\t\t\t\t\tconst name = this.getNodeParameter('name', i) as string;\n\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i);\n\t\t\t\t\tconst body: ITask = {\n\t\t\t\t\t\torganization_id: credentials.organizationId as number,\n\t\t\t\t\t};\n\t\t\t\t\tconst task: TaskInfo = {\n\t\t\t\t\t\tname,\n\t\t\t\t\t\tworkspace_id: parseInt(workspaceId, 10),\n\t\t\t\t\t};\n\t\t\t\t\tif (additionalFields.ownerId) {\n\t\t\t\t\t\ttask.owner_id = parseInt(additionalFields.ownerId as string, 10);\n\t\t\t\t\t}\n\t\t\t\t\tif (additionalFields.listId) {\n\t\t\t\t\t\ttask.list_id = parseInt(additionalFields.listId as string, 10);\n\t\t\t\t\t}\n\t\t\t\t\tif (additionalFields.startsOn) {\n\t\t\t\t\t\ttask.starts_on = additionalFields.startsOn as string;\n\t\t\t\t\t}\n\t\t\t\t\tif (additionalFields.dueOn) {\n\t\t\t\t\t\ttask.due_on = additionalFields.dueOn as string;\n\t\t\t\t\t}\n\t\t\t\t\tif (additionalFields.mirrorParentSubscribers) {\n\t\t\t\t\t\ttask.mirror_parent_subscribers = additionalFields.mirrorParentSubscribers as boolean;\n\t\t\t\t\t}\n\t\t\t\t\tif (additionalFields.mirrorParentTags) {\n\t\t\t\t\t\ttask.mirror_parent_tags = additionalFields.mirrorParentTags as boolean;\n\t\t\t\t\t}\n\t\t\t\t\tif (additionalFields.noteContent) {\n\t\t\t\t\t\ttask.note_content = additionalFields.noteContent as string;\n\t\t\t\t\t}\n\t\t\t\t\tif (additionalFields.noteMimeType) {\n\t\t\t\t\t\ttask.note_mime_type = additionalFields.noteMimeType as string;\n\t\t\t\t\t}\n\t\t\t\t\tif (additionalFields.parentId) {\n\t\t\t\t\t\ttask.parent_id = parseInt(additionalFields.parentId as string, 10);\n\t\t\t\t\t}\n\t\t\t\t\tif (additionalFields.positionList) {\n\t\t\t\t\t\ttask.position_list = additionalFields.positionList as number;\n\t\t\t\t\t}\n\t\t\t\t\tif (additionalFields.positionUpcoming) {\n\t\t\t\t\t\ttask.position_upcoming = additionalFields.positionUpcoming as number;\n\t\t\t\t\t}\n\t\t\t\t\tif (additionalFields.position) {\n\t\t\t\t\t\ttask.position = additionalFields.position as number;\n\t\t\t\t\t}\n\t\t\t\t\tif (additionalFields.sectionId) {\n\t\t\t\t\t\ttask.section_id = additionalFields.sectionId as number;\n\t\t\t\t\t}\n\t\t\t\t\tif (additionalFields.tags) {\n\t\t\t\t\t\ttask.tags = (additionalFields.tags as string).split(',');\n\t\t\t\t\t}\n\t\t\t\t\tbody.task = task;\n\t\t\t\t\ttry {\n\t\t\t\t\t\tresponseData = await flowApiRequest.call(this, 'POST', '/tasks', body);\n\t\t\t\t\t\tresponseData = responseData.task;\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tthrow new NodeApiError(this.getNode(), error as JsonObject);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t//https://developer.getflow.com/api/#tasks_update-a-task\n\t\t\t\tif (operation === 'update') {\n\t\t\t\t\tconst workspaceId = this.getNodeParameter('workspaceId', i) as string;\n\t\t\t\t\tconst taskId = this.getNodeParameter('taskId', i) as string;\n\t\t\t\t\tconst updateFields = this.getNodeParameter('updateFields', i);\n\t\t\t\t\tconst body: ITask = {\n\t\t\t\t\t\torganization_id: credentials.organizationId as number,\n\t\t\t\t\t};\n\t\t\t\t\tconst task: TaskInfo = {\n\t\t\t\t\t\tworkspace_id: parseInt(workspaceId, 10),\n\t\t\t\t\t\tid: parseInt(taskId, 10),\n\t\t\t\t\t};\n\t\t\t\t\tif (updateFields.name) {\n\t\t\t\t\t\ttask.name = updateFields.name as string;\n\t\t\t\t\t}\n\t\t\t\t\tif (updateFields.ownerId) {\n\t\t\t\t\t\ttask.owner_id = parseInt(updateFields.ownerId as string, 10);\n\t\t\t\t\t}\n\t\t\t\t\tif (updateFields.listId) {\n\t\t\t\t\t\ttask.list_id = parseInt(updateFields.listId as string, 10);\n\t\t\t\t\t}\n\t\t\t\t\tif (updateFields.startsOn) {\n\t\t\t\t\t\ttask.starts_on = updateFields.startsOn as string;\n\t\t\t\t\t}\n\t\t\t\t\tif (updateFields.dueOn) {\n\t\t\t\t\t\ttask.due_on = updateFields.dueOn as string;\n\t\t\t\t\t}\n\t\t\t\t\tif (updateFields.mirrorParentSubscribers) {\n\t\t\t\t\t\ttask.mirror_parent_subscribers = updateFields.mirrorParentSubscribers as boolean;\n\t\t\t\t\t}\n\t\t\t\t\tif (updateFields.mirrorParentTags) {\n\t\t\t\t\t\ttask.mirror_parent_tags = updateFields.mirrorParentTags as boolean;\n\t\t\t\t\t}\n\t\t\t\t\tif (updateFields.noteContent) {\n\t\t\t\t\t\ttask.note_content = updateFields.noteContent as string;\n\t\t\t\t\t}\n\t\t\t\t\tif (updateFields.noteMimeType) {\n\t\t\t\t\t\ttask.note_mime_type = updateFields.noteMimeType as string;\n\t\t\t\t\t}\n\t\t\t\t\tif (updateFields.parentId) {\n\t\t\t\t\t\ttask.parent_id = parseInt(updateFields.parentId as string, 10);\n\t\t\t\t\t}\n\t\t\t\t\tif (updateFields.positionList) {\n\t\t\t\t\t\ttask.position_list = updateFields.positionList as number;\n\t\t\t\t\t}\n\t\t\t\t\tif (updateFields.positionUpcoming) {\n\t\t\t\t\t\ttask.position_upcoming = updateFields.positionUpcoming as number;\n\t\t\t\t\t}\n\t\t\t\t\tif (updateFields.position) {\n\t\t\t\t\t\ttask.position = updateFields.position as number;\n\t\t\t\t\t}\n\t\t\t\t\tif (updateFields.sectionId) {\n\t\t\t\t\t\ttask.section_id = updateFields.sectionId as number;\n\t\t\t\t\t}\n\t\t\t\t\tif (updateFields.tags) {\n\t\t\t\t\t\ttask.tags = (updateFields.tags as string).split(',');\n\t\t\t\t\t}\n\t\t\t\t\tif (updateFields.completed) {\n\t\t\t\t\t\ttask.completed = updateFields.completed as boolean;\n\t\t\t\t\t}\n\t\t\t\t\tbody.task = task;\n\t\t\t\t\ttry {\n\t\t\t\t\t\tresponseData = await flowApiRequest.call(this, 'PUT', `/tasks/${taskId}`, body);\n\t\t\t\t\t\tresponseData = responseData.task;\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tthrow new NodeApiError(this.getNode(), error as JsonObject);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t//https://developer.getflow.com/api/#tasks_get-task\n\t\t\t\tif (operation === 'get') {\n\t\t\t\t\tconst taskId = this.getNodeParameter('taskId', i) as string;\n\t\t\t\t\tconst filters = this.getNodeParameter('filters', i);\n\t\t\t\t\tqs.organization_id = credentials.organizationId as number;\n\t\t\t\t\tif (filters.include) {\n\t\t\t\t\t\tqs.include = (filters.include as string[]).join(',');\n\t\t\t\t\t}\n\t\t\t\t\ttry {\n\t\t\t\t\t\tresponseData = await flowApiRequest.call(this, 'GET', `/tasks/${taskId}`, {}, qs);\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tthrow new NodeApiError(this.getNode(), error as JsonObject);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t//https://developer.getflow.com/api/#tasks_get-tasks\n\t\t\t\tif (operation === 'getAll') {\n\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', i);\n\t\t\t\t\tconst filters = this.getNodeParameter('filters', i);\n\t\t\t\t\tqs.organization_id = credentials.organizationId as number;\n\t\t\t\t\tif (filters.include) {\n\t\t\t\t\t\tqs.include = (filters.include as string[]).join(',');\n\t\t\t\t\t}\n\t\t\t\t\tif (filters.order) {\n\t\t\t\t\t\tqs.order = filters.order as string;\n\t\t\t\t\t}\n\t\t\t\t\tif (filters.workspaceId) {\n\t\t\t\t\t\tqs.workspace_id = filters.workspaceId as string;\n\t\t\t\t\t}\n\t\t\t\t\tif (filters.createdBefore) {\n\t\t\t\t\t\tqs.created_before = filters.createdBefore as string;\n\t\t\t\t\t}\n\t\t\t\t\tif (filters.createdAfter) {\n\t\t\t\t\t\tqs.created_after = filters.createdAfter as string;\n\t\t\t\t\t}\n\t\t\t\t\tif (filters.updateBefore) {\n\t\t\t\t\t\tqs.updated_before = filters.updateBefore as string;\n\t\t\t\t\t}\n\t\t\t\t\tif (filters.updateAfter) {\n\t\t\t\t\t\tqs.updated_after = filters.updateAfter as string;\n\t\t\t\t\t}\n\t\t\t\t\tif (filters.deleted) {\n\t\t\t\t\t\tqs.deleted = filters.deleted as boolean;\n\t\t\t\t\t}\n\t\t\t\t\tif (filters.cleared) {\n\t\t\t\t\t\tqs.cleared = filters.cleared as boolean;\n\t\t\t\t\t}\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (returnAll) {\n\t\t\t\t\t\t\tresponseData = await FlowApiRequestAllItems.call(\n\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t'tasks',\n\t\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t\t'/tasks',\n\t\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tqs.limit = this.getNodeParameter('limit', i);\n\t\t\t\t\t\t\tresponseData = await flowApiRequest.call(this, 'GET', '/tasks', {}, qs);\n\t\t\t\t\t\t\tresponseData = responseData.tasks;\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tthrow new NodeApiError(this.getNode(), error as JsonObject, { itemIndex: i });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t{ itemData: { item: i } },\n\t\t\t);\n\t\t\treturnData.push(...executionData);\n\t\t}\n\t\treturn [returnData];\n\t}\n}\n"],"mappings":"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","names":[]}