{"version":3,"sources":["../../../nodes/Flow/FlowTrigger.node.ts"],"sourcesContent":["import type {\n\tIHookFunctions,\n\tIWebhookFunctions,\n\tIDataObject,\n\tINodeType,\n\tINodeTypeDescription,\n\tIWebhookResponseData,\n} from 'n8n-workflow';\nimport { NodeConnectionTypes } from 'n8n-workflow';\n\nimport { flowApiRequest } from './GenericFunctions';\n\nexport class FlowTrigger implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'Flow Trigger',\n\t\tname: 'flowTrigger',\n\t\ticon: 'file:flow.svg',\n\t\tgroup: ['trigger'],\n\t\tversion: 1,\n\t\tdescription: 'Handle Flow events via webhooks',\n\t\tdefaults: {\n\t\t\tname: 'Flow Trigger',\n\t\t},\n\t\tinputs: [],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tcredentials: [\n\t\t\t{\n\t\t\t\tname: 'flowApi',\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t],\n\t\twebhooks: [\n\t\t\t{\n\t\t\t\tname: 'default',\n\t\t\t\thttpMethod: 'POST',\n\t\t\t\tresponseMode: 'onReceived',\n\t\t\t\tpath: 'webhook',\n\t\t\t},\n\t\t],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Resource',\n\t\t\t\tname: 'resource',\n\t\t\t\ttype: 'options',\n\t\t\t\tnoDataExpression: true,\n\t\t\t\tdefault: '',\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Project',\n\t\t\t\t\t\tvalue: 'list',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Task',\n\t\t\t\t\t\tvalue: 'task',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdescription: 'Resource that triggers the webhook',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Project ID',\n\t\t\t\tname: 'listIds',\n\t\t\t\ttype: 'string',\n\t\t\t\trequired: true,\n\t\t\t\tdefault: '',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tresource: ['list'],\n\t\t\t\t\t},\n\t\t\t\t\thide: {\n\t\t\t\t\t\tresource: ['task'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdescription: 'Lists IDs, perhaps known better as \"Projects\" separated by a comma (,)',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Task ID',\n\t\t\t\tname: 'taskIds',\n\t\t\t\ttype: 'string',\n\t\t\t\trequired: true,\n\t\t\t\tdefault: '',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tresource: ['task'],\n\t\t\t\t\t},\n\t\t\t\t\thide: {\n\t\t\t\t\t\tresource: ['list'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdescription: 'Task IDs separated by a comma (,)',\n\t\t\t},\n\t\t],\n\t};\n\n\twebhookMethods = {\n\t\tdefault: {\n\t\t\tasync checkExists(this: IHookFunctions): Promise<boolean> {\n\t\t\t\tconst credentials = await this.getCredentials('flowApi');\n\n\t\t\t\tlet webhooks;\n\t\t\t\tconst qs: IDataObject = {};\n\t\t\t\tconst webhookData = this.getWorkflowStaticData('node');\n\t\t\t\tif (!Array.isArray(webhookData.webhookIds)) {\n\t\t\t\t\twebhookData.webhookIds = [];\n\t\t\t\t}\n\t\t\t\tif (!(webhookData.webhookIds as [number]).length) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tqs.organization_id = credentials.organizationId as number;\n\t\t\t\tconst endpoint = '/integration_webhooks';\n\t\t\t\twebhooks = await flowApiRequest.call(this, 'GET', endpoint, {}, qs);\n\t\t\t\twebhooks = webhooks.integration_webhooks;\n\t\t\t\tfor (const webhook of webhooks) {\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\tif (webhookData.webhookIds.includes(webhook.id)) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t},\n\t\t\tasync create(this: IHookFunctions): Promise<boolean> {\n\t\t\t\tconst credentials = await this.getCredentials('flowApi');\n\n\t\t\t\tlet resourceIds, body, responseData;\n\t\t\t\tconst webhookUrl = this.getNodeWebhookUrl('default');\n\t\t\t\tconst webhookData = this.getWorkflowStaticData('node');\n\t\t\t\tconst resource = this.getNodeParameter('resource') as string;\n\t\t\t\tconst endpoint = '/integration_webhooks';\n\t\t\t\tif (resource === 'list') {\n\t\t\t\t\tresourceIds = (this.getNodeParameter('listIds') as string).split(',');\n\t\t\t\t}\n\t\t\t\tif (resource === 'task') {\n\t\t\t\t\tresourceIds = (this.getNodeParameter('taskIds') as string).split(',');\n\t\t\t\t}\n\t\t\t\t// @ts-ignore\n\t\t\t\tfor (const resourceId of resourceIds) {\n\t\t\t\t\tbody = {\n\t\t\t\t\t\torganization_id: credentials.organizationId as number,\n\t\t\t\t\t\tintegration_webhook: {\n\t\t\t\t\t\t\tname: 'n8n-trigger',\n\t\t\t\t\t\t\turl: webhookUrl,\n\t\t\t\t\t\t\tresource_type: resource,\n\t\t\t\t\t\t\tresource_id: parseInt(resourceId, 10),\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\t\t\t\t\ttry {\n\t\t\t\t\t\tresponseData = await flowApiRequest.call(this, 'POST', endpoint, body);\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\tif (\n\t\t\t\t\t\tresponseData.integration_webhook === undefined ||\n\t\t\t\t\t\tresponseData.integration_webhook.id === undefined\n\t\t\t\t\t) {\n\t\t\t\t\t\t// Required data is missing so was not successful\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\twebhookData.webhookIds.push(responseData.integration_webhook.id);\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t},\n\t\t\tasync delete(this: IHookFunctions): Promise<boolean> {\n\t\t\t\tconst credentials = await this.getCredentials('flowApi');\n\n\t\t\t\tconst qs: IDataObject = {};\n\t\t\t\tconst webhookData = this.getWorkflowStaticData('node');\n\t\t\t\tqs.organization_id = credentials.organizationId as number;\n\t\t\t\t// @ts-ignore\n\t\t\t\tif (webhookData.webhookIds.length > 0) {\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\tfor (const webhookId of webhookData.webhookIds) {\n\t\t\t\t\t\tconst endpoint = `/integration_webhooks/${webhookId}`;\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tawait flowApiRequest.call(this, 'DELETE', endpoint, {}, qs);\n\t\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tdelete webhookData.webhookIds;\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t},\n\t\t},\n\t};\n\n\tasync webhook(this: IWebhookFunctions): Promise<IWebhookResponseData> {\n\t\tconst req = this.getRequestObject();\n\t\treturn {\n\t\t\tworkflowData: [this.helpers.returnJsonArray(req.body as IDataObject[])],\n\t\t};\n\t}\n}\n"],"mappings":"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","names":[]}