{"version":3,"sources":["../../../nodes/Postmark/PostmarkTrigger.node.ts"],"sourcesContent":["import {\n\ttype IDataObject,\n\ttype IHookFunctions,\n\ttype IWebhookFunctions,\n\ttype INodeType,\n\ttype INodeTypeDescription,\n\ttype IWebhookResponseData,\n\tNodeConnectionTypes,\n} from 'n8n-workflow';\n\nimport {\n\tconvertTriggerObjectToStringArray,\n\teventExists,\n\tpostmarkApiRequest,\n} from './GenericFunctions';\n\nexport class PostmarkTrigger implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'Postmark Trigger',\n\t\tname: 'postmarkTrigger',\n\t\t// eslint-disable-next-line n8n-nodes-base/node-class-description-icon-not-svg\n\t\ticon: 'file:postmark.png',\n\t\tgroup: ['trigger'],\n\t\tversion: 1,\n\t\tdescription: 'Starts the workflow when Postmark events occur',\n\t\tdefaults: {\n\t\t\tname: 'Postmark Trigger',\n\t\t},\n\t\tinputs: [],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tcredentials: [\n\t\t\t{\n\t\t\t\tname: 'postmarkApi',\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t],\n\t\twebhooks: [\n\t\t\t{\n\t\t\t\tname: 'default',\n\t\t\t\thttpMethod: 'POST',\n\t\t\t\tresponseMode: 'onReceived',\n\t\t\t\tpath: 'webhook',\n\t\t\t},\n\t\t],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Events',\n\t\t\t\tname: 'events',\n\t\t\t\ttype: 'multiOptions',\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Bounce',\n\t\t\t\t\t\tvalue: 'bounce',\n\t\t\t\t\t\tdescription: 'Trigger on bounce',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Click',\n\t\t\t\t\t\tvalue: 'click',\n\t\t\t\t\t\tdescription: 'Trigger on click',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Delivery',\n\t\t\t\t\t\tvalue: 'delivery',\n\t\t\t\t\t\tdescription: 'Trigger on delivery',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Open',\n\t\t\t\t\t\tvalue: 'open',\n\t\t\t\t\t\tdescription: 'Trigger webhook on open',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Spam Complaint',\n\t\t\t\t\t\tvalue: 'spamComplaint',\n\t\t\t\t\t\tdescription: 'Trigger on spam complaint',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Subscription Change',\n\t\t\t\t\t\tvalue: 'subscriptionChange',\n\t\t\t\t\t\tdescription: 'Trigger on subscription change',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: [],\n\t\t\t\trequired: true,\n\t\t\t\tdescription: 'Webhook events that will be enabled for that endpoint',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'First Open',\n\t\t\t\tname: 'firstOpen',\n\t\t\t\t// eslint-disable-next-line n8n-nodes-base/node-param-description-boolean-without-whether\n\t\t\t\tdescription: 'Only fires on first open for event \"Open\"',\n\t\t\t\ttype: 'boolean',\n\t\t\t\tdefault: false,\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tevents: ['open'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Include Content',\n\t\t\t\tname: 'includeContent',\n\t\t\t\tdescription: 'Whether to include message content for events \"Bounce\" and \"Spam Complaint\"',\n\t\t\t\ttype: 'boolean',\n\t\t\t\tdefault: false,\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tevents: ['bounce', 'spamComplaint'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t};\n\n\twebhookMethods = {\n\t\tdefault: {\n\t\t\tasync checkExists(this: IHookFunctions): Promise<boolean> {\n\t\t\t\tconst webhookData = this.getWorkflowStaticData('node');\n\t\t\t\tconst webhookUrl = this.getNodeWebhookUrl('default');\n\t\t\t\tconst events = this.getNodeParameter('events') as string[];\n\n\t\t\t\tif (events.includes('bounce') || events.includes('spamComplaint')) {\n\t\t\t\t\tif (this.getNodeParameter('includeContent') as boolean) {\n\t\t\t\t\t\tevents.push('includeContent');\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (events.includes('open')) {\n\t\t\t\t\tif (this.getNodeParameter('firstOpen') as boolean) {\n\t\t\t\t\t\tevents.push('firstOpen');\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Get all webhooks\n\t\t\t\tconst endpoint = '/webhooks';\n\n\t\t\t\tconst responseData = await postmarkApiRequest.call(this, 'GET', endpoint, {});\n\n\t\t\t\t// No webhooks exist\n\t\t\t\tif (responseData.Webhooks.length === 0) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t// If webhooks exist, check if any match current settings\n\t\t\t\tfor (const webhook of responseData.Webhooks) {\n\t\t\t\t\tif (\n\t\t\t\t\t\twebhook.Url === webhookUrl &&\n\t\t\t\t\t\teventExists(events, convertTriggerObjectToStringArray(webhook))\n\t\t\t\t\t) {\n\t\t\t\t\t\twebhookData.webhookId = webhook.ID;\n\t\t\t\t\t\t// webhook identical to current settings. re-assign webhook id to found webhook.\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn false;\n\t\t\t},\n\t\t\tasync create(this: IHookFunctions): Promise<boolean> {\n\t\t\t\tconst webhookUrl = this.getNodeWebhookUrl('default');\n\n\t\t\t\tconst endpoint = '/webhooks';\n\n\t\t\t\tconst body: any = {\n\t\t\t\t\tUrl: webhookUrl,\n\t\t\t\t\tTriggers: {\n\t\t\t\t\t\tOpen: {\n\t\t\t\t\t\t\tEnabled: false,\n\t\t\t\t\t\t\tPostFirstOpenOnly: false,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tClick: {\n\t\t\t\t\t\t\tEnabled: false,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tDelivery: {\n\t\t\t\t\t\t\tEnabled: false,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tBounce: {\n\t\t\t\t\t\t\tEnabled: false,\n\t\t\t\t\t\t\tIncludeContent: false,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tSpamComplaint: {\n\t\t\t\t\t\t\tEnabled: false,\n\t\t\t\t\t\t\tIncludeContent: false,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tSubscriptionChange: {\n\t\t\t\t\t\t\tEnabled: false,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t};\n\n\t\t\t\tconst events = this.getNodeParameter('events') as string[];\n\n\t\t\t\tif (events.includes('open')) {\n\t\t\t\t\tbody.Triggers.Open.Enabled = true;\n\t\t\t\t\tbody.Triggers.Open.PostFirstOpenOnly = this.getNodeParameter('firstOpen') as boolean;\n\t\t\t\t}\n\t\t\t\tif (events.includes('click')) {\n\t\t\t\t\tbody.Triggers.Click.Enabled = true;\n\t\t\t\t}\n\t\t\t\tif (events.includes('delivery')) {\n\t\t\t\t\tbody.Triggers.Delivery.Enabled = true;\n\t\t\t\t}\n\t\t\t\tif (events.includes('bounce')) {\n\t\t\t\t\tbody.Triggers.Bounce.Enabled = true;\n\t\t\t\t\tbody.Triggers.Bounce.IncludeContent = this.getNodeParameter('includeContent') as boolean;\n\t\t\t\t}\n\t\t\t\tif (events.includes('spamComplaint')) {\n\t\t\t\t\tbody.Triggers.SpamComplaint.Enabled = true;\n\t\t\t\t\tbody.Triggers.SpamComplaint.IncludeContent = this.getNodeParameter(\n\t\t\t\t\t\t'includeContent',\n\t\t\t\t\t) as boolean;\n\t\t\t\t}\n\t\t\t\tif (events.includes('subscriptionChange')) {\n\t\t\t\t\tbody.Triggers.SubscriptionChange.Enabled = true;\n\t\t\t\t}\n\n\t\t\t\tconst responseData = await postmarkApiRequest.call(this, 'POST', endpoint, body);\n\n\t\t\t\tif (responseData.ID === undefined) {\n\t\t\t\t\t// Required data is missing so was not successful\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tconst webhookData = this.getWorkflowStaticData('node');\n\t\t\t\twebhookData.webhookId = responseData.ID as string;\n\n\t\t\t\treturn true;\n\t\t\t},\n\t\t\tasync delete(this: IHookFunctions): Promise<boolean> {\n\t\t\t\tconst webhookData = this.getWorkflowStaticData('node');\n\n\t\t\t\tif (webhookData.webhookId !== undefined) {\n\t\t\t\t\tconst endpoint = `/webhooks/${webhookData.webhookId}`;\n\t\t\t\t\tconst body = {};\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tawait postmarkApiRequest.call(this, 'DELETE', endpoint, body);\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Remove from the static workflow data so that it is clear\n\t\t\t\t\t// that no webhooks are registered anymore\n\t\t\t\t\tdelete webhookData.webhookId;\n\t\t\t\t\tdelete webhookData.webhookEvents;\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\t\t\t},\n\t\t},\n\t};\n\n\tasync webhook(this: IWebhookFunctions): Promise<IWebhookResponseData> {\n\t\tconst req = this.getRequestObject();\n\t\treturn {\n\t\t\tworkflowData: [this.helpers.returnJsonArray(req.body as IDataObject[])],\n\t\t};\n\t}\n}\n"],"mappings":"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","names":[]}