{"version":3,"sources":["../../../nodes/Brandfetch/Brandfetch.node.ts"],"sourcesContent":["import type {\n\tIExecuteFunctions,\n\tIDataObject,\n\tINodeExecutionData,\n\tINodeType,\n\tINodeTypeDescription,\n} from 'n8n-workflow';\nimport { NodeConnectionTypes } from 'n8n-workflow';\n\nimport { brandfetchApiRequest, fetchAndPrepareBinaryData } from './GenericFunctions';\n\nexport class Brandfetch implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'Brandfetch',\n\t\t// eslint-disable-next-line n8n-nodes-base/node-class-description-name-miscased\n\t\tname: 'Brandfetch',\n\t\t// eslint-disable-next-line n8n-nodes-base/node-class-description-icon-not-svg\n\t\ticon: 'file:brandfetch.png',\n\t\tgroup: ['output'],\n\t\tversion: 1,\n\t\tsubtitle: '={{$parameter[\"operation\"]}}',\n\t\tdescription: 'Consume Brandfetch API',\n\t\tdefaults: {\n\t\t\tname: 'Brandfetch',\n\t\t},\n\t\tusableAsTool: true,\n\t\tinputs: [NodeConnectionTypes.Main],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tcredentials: [\n\t\t\t{\n\t\t\t\tname: 'brandfetchApi',\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Operation',\n\t\t\t\tname: 'operation',\n\t\t\t\ttype: 'options',\n\t\t\t\tnoDataExpression: true,\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Color',\n\t\t\t\t\t\tvalue: 'color',\n\t\t\t\t\t\tdescription: \"Return a company's colors\",\n\t\t\t\t\t\taction: \"Return a company's colors\",\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Company',\n\t\t\t\t\t\tvalue: 'company',\n\t\t\t\t\t\tdescription: \"Return a company's data\",\n\t\t\t\t\t\taction: \"Return a company's data\",\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Font',\n\t\t\t\t\t\tvalue: 'font',\n\t\t\t\t\t\tdescription: \"Return a company's fonts\",\n\t\t\t\t\t\taction: \"Return a company's fonts\",\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Industry',\n\t\t\t\t\t\tvalue: 'industry',\n\t\t\t\t\t\tdescription: \"Return a company's industry\",\n\t\t\t\t\t\taction: \"Return a company's industry\",\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Logo',\n\t\t\t\t\t\tvalue: 'logo',\n\t\t\t\t\t\tdescription: \"Return a company's logo & icon\",\n\t\t\t\t\t\taction: \"Return a company's logo & icon\",\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'logo',\n\t\t\t},\n\n\t\t\t// ----------------------------------\n\t\t\t//         All\n\t\t\t// ----------------------------------\n\t\t\t{\n\t\t\t\tdisplayName: 'Domain',\n\t\t\t\tname: 'domain',\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: '',\n\t\t\t\tdescription: 'The domain name of the company',\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Download',\n\t\t\t\tname: 'download',\n\t\t\t\ttype: 'boolean',\n\t\t\t\tdefault: false,\n\t\t\t\trequired: true,\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['logo'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t// eslint-disable-next-line n8n-nodes-base/node-param-description-boolean-without-whether\n\t\t\t\tdescription: 'Name of the binary property to which to write the data of the read file',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Image Type',\n\t\t\t\tname: 'imageTypes',\n\t\t\t\ttype: 'multiOptions',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['logo'],\n\t\t\t\t\t\tdownload: [true],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Icon',\n\t\t\t\t\t\tvalue: 'icon',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Logo',\n\t\t\t\t\t\tvalue: 'logo',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: ['logo', 'icon'],\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Image Format',\n\t\t\t\tname: 'imageFormats',\n\t\t\t\ttype: 'multiOptions',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['logo'],\n\t\t\t\t\t\tdownload: [true],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'PNG',\n\t\t\t\t\t\tvalue: 'png',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'SVG',\n\t\t\t\t\t\tvalue: 'svg',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: ['png'],\n\t\t\t\tdescription: 'The image format in which the logo should be returned as',\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t],\n\t};\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t\tconst items = this.getInputData();\n\t\tconst length = items.length;\n\n\t\tconst operation = this.getNodeParameter('operation', 0);\n\t\tconst responseData: INodeExecutionData[] = [];\n\t\tfor (let i = 0; i < length; i++) {\n\t\t\ttry {\n\t\t\t\tconst domain = this.getNodeParameter('domain', i) as string;\n\t\t\t\tif (operation === 'logo') {\n\t\t\t\t\tconst download = this.getNodeParameter('download', i);\n\n\t\t\t\t\tconst response = await brandfetchApiRequest.call(this, 'GET', `/brands/${domain}`);\n\n\t\t\t\t\tif (download) {\n\t\t\t\t\t\tconst imageTypes = this.getNodeParameter('imageTypes', i) as string[];\n\n\t\t\t\t\t\tconst imageFormats = this.getNodeParameter('imageFormats', i) as string[];\n\n\t\t\t\t\t\tconst newItem: INodeExecutionData = {\n\t\t\t\t\t\t\tjson: {},\n\t\t\t\t\t\t\tbinary: {},\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tif (items[i].binary !== undefined) {\n\t\t\t\t\t\t\t// Create a shallow copy of the binary data so that the old\n\t\t\t\t\t\t\t// data references which do not get changed still stay behind\n\t\t\t\t\t\t\t// but the incoming data does not get changed.\n\t\t\t\t\t\t\tObject.assign(newItem.binary!, items[i].binary);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tnewItem.json = response.logos;\n\n\t\t\t\t\t\tfor (const imageType of imageTypes) {\n\t\t\t\t\t\t\tfor (const imageFormat of imageFormats) {\n\t\t\t\t\t\t\t\tconst logoUrls = response.logos;\n\n\t\t\t\t\t\t\t\tfor (const logoUrl of logoUrls) {\n\t\t\t\t\t\t\t\t\tif (logoUrl.type !== imageType) {\n\t\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tfor (const logoFormats of logoUrl.formats) {\n\t\t\t\t\t\t\t\t\t\tif (logoFormats.format === imageFormat && logoFormats.src !== null) {\n\t\t\t\t\t\t\t\t\t\t\tawait fetchAndPrepareBinaryData.call(\n\t\t\t\t\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t\t\t\t\timageType,\n\t\t\t\t\t\t\t\t\t\t\t\timageFormat,\n\t\t\t\t\t\t\t\t\t\t\t\tlogoFormats,\n\t\t\t\t\t\t\t\t\t\t\t\tdomain,\n\t\t\t\t\t\t\t\t\t\t\t\tnewItem,\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\titems[i] = newItem;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (Object.keys(items[i].binary!).length === 0) {\n\t\t\t\t\t\t\tdelete items[i].binary;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray(response.logos as IDataObject),\n\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t);\n\t\t\t\t\t\tresponseData.push(...executionData);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (operation === 'color') {\n\t\t\t\t\tconst response = await brandfetchApiRequest.call(this, 'GET', `/brands/${domain}`);\n\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\tthis.helpers.returnJsonArray(response.colors as IDataObject),\n\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t);\n\t\t\t\t\tresponseData.push(...executionData);\n\t\t\t\t}\n\t\t\t\tif (operation === 'font') {\n\t\t\t\t\tconst response = await brandfetchApiRequest.call(this, 'GET', `/brands/${domain}`);\n\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\tthis.helpers.returnJsonArray(response.fonts as IDataObject),\n\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t);\n\t\t\t\t\tresponseData.push(...executionData);\n\t\t\t\t}\n\t\t\t\tif (operation === 'company') {\n\t\t\t\t\tconst response = await brandfetchApiRequest.call(this, 'GET', `/brands/${domain}`);\n\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\tthis.helpers.returnJsonArray(response.company as IDataObject),\n\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t);\n\t\t\t\t\tresponseData.push(...executionData);\n\t\t\t\t}\n\t\t\t\tif (operation === 'industry') {\n\t\t\t\t\tconst response = await brandfetchApiRequest.call(this, 'GET', `/brands/${domain}`);\n\n\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\tthis.helpers.returnJsonArray(response as IDataObject),\n\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t);\n\t\t\t\t\tresponseData.push(...executionData);\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\tresponseData.push({ error: error.message, json: {}, itemIndex: i });\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\n\t\tif (operation === 'logo' && this.getNodeParameter('download', 0)) {\n\t\t\t// For file downloads the files get attached to the existing items\n\t\t\treturn [items];\n\t\t} else {\n\t\t\treturn [responseData];\n\t\t}\n\t}\n}\n"],"mappings":"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","names":[]}