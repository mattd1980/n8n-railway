{"version":3,"sources":["../../../../../../../nodes/BambooHr/v1/actions/employee/create/execute.ts"],"sourcesContent":["import { capitalCase } from 'change-case';\nimport moment from 'moment-timezone';\nimport type { IExecuteFunctions, IDataObject, INodeExecutionData } from 'n8n-workflow';\n\nimport { apiRequest } from '../../../transport';\n\nexport async function create(\n\tthis: IExecuteFunctions,\n\tindex: number,\n): Promise<INodeExecutionData[]> {\n\tconst body: IDataObject = {};\n\tconst requestMethod = 'POST';\n\tconst endpoint = 'employees';\n\n\t//body parameters\n\tbody.firstName = this.getNodeParameter('firstName', index) as string;\n\tbody.lastName = this.getNodeParameter('lastName', index) as string;\n\n\tconst additionalFields = this.getNodeParameter('additionalFields', index);\n\tconst synced = this.getNodeParameter('synced', index) as boolean;\n\n\tif (synced) {\n\t\tObject.assign(body, {\n\t\t\taddress: this.getNodeParameter('address.value', index, {}) as IDataObject,\n\t\t});\n\t\tObject.assign(body, {\n\t\t\tpayRate: this.getNodeParameter('payRate.value', index, {}) as IDataObject,\n\t\t});\n\t\tbody.department = this.getNodeParameter('department', index) as string;\n\t\tbody.dateOfBirth = this.getNodeParameter('dateOfBirth', index);\n\t\tbody.division = this.getNodeParameter('division', index) as string;\n\t\tbody.employeeNumber = this.getNodeParameter('employeeNumber', index) as string;\n\t\tbody.exempt = this.getNodeParameter('exempt', index) as string;\n\t\tbody.gender = this.getNodeParameter('gender', index) as string;\n\t\tbody.hireDate = this.getNodeParameter('hireDate', index) as string;\n\t\tbody.location = this.getNodeParameter('location', index) as string;\n\t\tbody.maritalStatus = this.getNodeParameter('maritalStatus', index) as string;\n\t\tbody.mobilePhone = this.getNodeParameter('mobilePhone', index) as string;\n\t\tbody.paidPer = this.getNodeParameter('paidPer', index) as string;\n\t\tbody.payType = this.getNodeParameter('payType', index) as string;\n\t\tbody.preferredName = this.getNodeParameter('preferredName', index) as string;\n\t\tbody.ssn = this.getNodeParameter('ssn', index) as string;\n\t} else {\n\t\tObject.assign(body, {\n\t\t\taddress: this.getNodeParameter('additionalFields.address.value', index, {}) as IDataObject,\n\t\t});\n\t\tObject.assign(body, {\n\t\t\tpayRate: this.getNodeParameter('additionalFields.payRate.value', index, {}) as IDataObject,\n\t\t});\n\t\tdelete additionalFields.address;\n\t\tdelete additionalFields.payRate;\n\t}\n\n\tObject.assign(body, additionalFields);\n\n\tif (body.gender) {\n\t\tbody.gender = capitalCase(body.gender as string);\n\t}\n\n\tif (body.dateOfBirth) {\n\t\tbody.dateOfBirth = moment(body.dateOfBirth as string).format('YYYY-MM-DD');\n\t}\n\n\tif (body.exempt) {\n\t\tbody.exempt = capitalCase(body.exempt as string);\n\t}\n\n\tif (body.hireDate) {\n\t\tbody.hireDate = moment(body.hireDate as string).format('YYYY-MM-DD');\n\t}\n\n\tif (body.maritalStatus) {\n\t\tbody.maritalStatus = capitalCase(body.maritalStatus as string);\n\t}\n\n\tif (body.payType) {\n\t\tbody.payType = capitalCase(body.payType as string);\n\t}\n\n\tif (body.paidPer) {\n\t\tbody.paidPer = capitalCase(body.paidPer as string);\n\t}\n\n\tif (!Object.keys(body.payRate as IDataObject).length) {\n\t\tdelete body.payRate;\n\t}\n\n\t//response\n\tconst responseData = await apiRequest.call(\n\t\tthis,\n\t\trequestMethod,\n\t\tendpoint,\n\t\tbody,\n\t\t{},\n\t\t{ resolveWithFullResponse: true },\n\t);\n\n\t//obtain employeeID\n\tconst rawEmployeeId: number = responseData.headers.location.lastIndexOf('/');\n\tconst employeeId = responseData.headers.location.substring(rawEmployeeId + 1);\n\n\t//return\n\treturn this.helpers.returnJsonArray({ id: employeeId });\n}\n"],"mappings":"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","names":["moment"]}