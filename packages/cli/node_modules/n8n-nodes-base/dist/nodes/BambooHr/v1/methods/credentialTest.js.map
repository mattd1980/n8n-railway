{"version":3,"sources":["../../../../../nodes/BambooHr/v1/methods/credentialTest.ts"],"sourcesContent":["import type {\n\tICredentialDataDecryptedObject,\n\tICredentialsDecrypted,\n\tICredentialTestFunctions,\n\tIHttpRequestOptions,\n\tINodeCredentialTestResult,\n} from 'n8n-workflow';\n\nasync function validateCredentials(\n\tthis: ICredentialTestFunctions,\n\tdecryptedCredentials: ICredentialDataDecryptedObject,\n): Promise<any> {\n\tconst credentials = decryptedCredentials;\n\n\tconst { subdomain, apiKey } = credentials as {\n\t\tsubdomain: string;\n\t\tapiKey: string;\n\t};\n\n\tconst options: IHttpRequestOptions = {\n\t\tmethod: 'GET',\n\t\tauth: {\n\t\t\tusername: apiKey,\n\t\t\tpassword: 'x',\n\t\t},\n\t\turl: `https://api.bamboohr.com/api/gateway.php/${subdomain}/v1/employees/directory`,\n\t};\n\n\treturn await this.helpers.request(options);\n}\n\nexport async function bambooHrApiCredentialTest(\n\tthis: ICredentialTestFunctions,\n\tcredential: ICredentialsDecrypted,\n): Promise<INodeCredentialTestResult> {\n\ttry {\n\t\tawait validateCredentials.call(this, credential.data as ICredentialDataDecryptedObject);\n\t} catch (error) {\n\t\treturn {\n\t\t\tstatus: 'Error',\n\t\t\tmessage: 'The API Key included in the request is invalid',\n\t\t};\n\t}\n\n\treturn {\n\t\tstatus: 'OK',\n\t\tmessage: 'Connection successful!',\n\t} as INodeCredentialTestResult;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA,eAAe,oBAEd,sBACe;AACf,QAAM,cAAc;AAEpB,QAAM,EAAE,WAAW,OAAO,IAAI;AAK9B,QAAM,UAA+B;AAAA,IACpC,QAAQ;AAAA,IACR,MAAM;AAAA,MACL,UAAU;AAAA,MACV,UAAU;AAAA,IACX;AAAA,IACA,KAAK,4CAA4C,SAAS;AAAA,EAC3D;AAEA,SAAO,MAAM,KAAK,QAAQ,QAAQ,OAAO;AAC1C;AAEA,eAAsB,0BAErB,YACqC;AACrC,MAAI;AACH,UAAM,oBAAoB,KAAK,MAAM,WAAW,IAAsC;AAAA,EACvF,SAAS,OAAO;AACf,WAAO;AAAA,MACN,QAAQ;AAAA,MACR,SAAS;AAAA,IACV;AAAA,EACD;AAEA,SAAO;AAAA,IACN,QAAQ;AAAA,IACR,SAAS;AAAA,EACV;AACD;","names":[]}