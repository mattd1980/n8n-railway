{"version":3,"sources":["../../../nodes/FileMaker/GenericFunctions.ts"],"sourcesContent":["import type {\n\tIExecuteFunctions,\n\tILoadOptionsFunctions,\n\tIDataObject,\n\tINodePropertyOptions,\n\tJsonObject,\n\tIRequestOptions,\n} from 'n8n-workflow';\nimport { ApplicationError, NodeApiError, NodeOperationError } from 'n8n-workflow';\n\ninterface ScriptsOptions {\n\tscript?: any;\n\t'script.param'?: any;\n\t'script.prerequest'?: any;\n\t'script.prerequest.param'?: any;\n\t'script.presort'?: any;\n\t'script.presort.param'?: any;\n}\ninterface LayoutObject {\n\tname: string;\n\tisFolder?: boolean;\n\tfolderLayoutNames?: LayoutObject[];\n}\n\ninterface ScriptObject {\n\tname: string;\n\tisFolder?: boolean;\n\tfolderScriptNames?: LayoutObject[];\n}\n\nexport async function getToken(this: ILoadOptionsFunctions | IExecuteFunctions): Promise<any> {\n\tconst credentials = await this.getCredentials('fileMaker');\n\n\tconst host = credentials.host as string;\n\tconst db = credentials.db as string;\n\tconst login = credentials.login as string;\n\tconst password = credentials.password as string;\n\n\tconst url = `https://${host}/fmi/data/v1/databases/${db}/sessions`;\n\n\t// Reset all values\n\tconst requestOptions: IRequestOptions = {\n\t\turi: url,\n\t\theaders: {},\n\t\tmethod: 'POST',\n\t\tjson: true,\n\t\t//rejectUnauthorized: !this.getNodeParameter('allowUnauthorizedCerts', itemIndex, false) as boolean,\n\t};\n\trequestOptions.auth = {\n\t\tuser: login,\n\t\tpass: password,\n\t};\n\trequestOptions.body = {\n\t\tfmDataSource: [\n\t\t\t{\n\t\t\t\tdatabase: host,\n\t\t\t\tusername: login,\n\t\t\t\tpassword,\n\t\t\t},\n\t\t],\n\t};\n\n\ttry {\n\t\tconst response = await this.helpers.request(requestOptions);\n\n\t\tif (typeof response === 'string') {\n\t\t\tthrow new NodeOperationError(\n\t\t\t\tthis.getNode(),\n\t\t\t\t'DataAPI response body is not valid JSON. Is the DataAPI enabled?',\n\t\t\t);\n\t\t}\n\n\t\treturn response.response.token;\n\t} catch (error) {\n\t\tlet message;\n\t\tif (error.statusCode === 502) {\n\t\t\tmessage = 'The server is not responding. Is the DataAPI enabled?';\n\t\t} else if (error.error) {\n\t\t\tmessage = error.error.messages[0].code + ' - ' + error.error.messages[0].message;\n\t\t} else {\n\t\t\tmessage = error.message;\n\t\t}\n\t\tthrow new ApplicationError(message, { level: 'warning' });\n\t}\n}\n\nfunction parseLayouts(layouts: LayoutObject[]): INodePropertyOptions[] {\n\tconst returnData: INodePropertyOptions[] = [];\n\tfor (const layout of layouts) {\n\t\tif (layout.isFolder!) {\n\t\t\treturnData.push(...parseLayouts(layout.folderLayoutNames!));\n\t\t} else {\n\t\t\treturnData.push({\n\t\t\t\tname: layout.name,\n\t\t\t\tvalue: layout.name,\n\t\t\t});\n\t\t}\n\t}\n\treturn returnData;\n}\n\n/**\n * Make an API request to ActiveCampaign\n *\n */\nexport async function layoutsApiRequest(\n\tthis: ILoadOptionsFunctions | IExecuteFunctions,\n): Promise<INodePropertyOptions[]> {\n\tconst token = await getToken.call(this);\n\tconst credentials = await this.getCredentials('fileMaker');\n\n\tconst host = credentials.host as string;\n\tconst db = credentials.db as string;\n\n\tconst url = `https://${host}/fmi/data/v1/databases/${db}/layouts`;\n\tconst options: IRequestOptions = {\n\t\theaders: {\n\t\t\tAuthorization: `Bearer ${token}`,\n\t\t},\n\t\tmethod: 'GET',\n\t\turi: url,\n\t\tjson: true,\n\t};\n\n\ttry {\n\t\tconst responseData = await this.helpers.request(options);\n\t\tconst items = parseLayouts(responseData.response.layouts as LayoutObject[]);\n\t\titems.sort((a, b) => (a.name > b.name ? 0 : 1));\n\t\treturn items;\n\t} catch (error) {\n\t\tthrow new NodeApiError(this.getNode(), error as JsonObject);\n\t}\n}\n\n/**\n * Make an API request to ActiveCampaign\n *\n */\nexport async function getFields(this: ILoadOptionsFunctions): Promise<any> {\n\tconst token = await getToken.call(this);\n\tconst credentials = await this.getCredentials('fileMaker');\n\tconst layout = this.getCurrentNodeParameter('layout') as string;\n\n\tconst host = credentials.host as string;\n\tconst db = credentials.db as string;\n\n\tconst url = `https://${host}/fmi/data/v1/databases/${db}/layouts/${layout}`;\n\tconst options: IRequestOptions = {\n\t\theaders: {\n\t\t\tAuthorization: `Bearer ${token}`,\n\t\t},\n\t\tmethod: 'GET',\n\t\turi: url,\n\t\tjson: true,\n\t};\n\n\tconst responseData = await this.helpers.request(options);\n\treturn responseData.response.fieldMetaData;\n}\n\n/**\n * Make an API request to ActiveCampaign\n *\n */\nexport async function getPortals(this: ILoadOptionsFunctions): Promise<any> {\n\tconst token = await getToken.call(this);\n\tconst credentials = await this.getCredentials('fileMaker');\n\tconst layout = this.getCurrentNodeParameter('layout') as string;\n\n\tconst host = credentials.host as string;\n\tconst db = credentials.db as string;\n\n\tconst url = `https://${host}/fmi/data/v1/databases/${db}/layouts/${layout}`;\n\tconst options: IRequestOptions = {\n\t\theaders: {\n\t\t\tAuthorization: `Bearer ${token}`,\n\t\t},\n\t\tmethod: 'GET',\n\t\turi: url,\n\t\tjson: true,\n\t};\n\n\tconst responseData = await this.helpers.request(options);\n\treturn responseData.response.portalMetaData;\n}\n\nfunction parseScriptsList(scripts: ScriptObject[]): INodePropertyOptions[] {\n\tconst returnData: INodePropertyOptions[] = [];\n\tfor (const script of scripts) {\n\t\tif (script.isFolder!) {\n\t\t\treturnData.push(...parseScriptsList(script.folderScriptNames!));\n\t\t} else if (script.name !== '-') {\n\t\t\treturnData.push({\n\t\t\t\tname: script.name,\n\t\t\t\tvalue: script.name,\n\t\t\t});\n\t\t}\n\t}\n\treturn returnData;\n}\n\n/**\n * Make an API request to ActiveCampaign\n *\n */\nexport async function getScripts(this: ILoadOptionsFunctions): Promise<any> {\n\tconst token = await getToken.call(this);\n\tconst credentials = await this.getCredentials('fileMaker');\n\n\tconst host = credentials.host as string;\n\tconst db = credentials.db as string;\n\n\tconst url = `https://${host}/fmi/data/v1/databases/${db}/scripts`;\n\tconst options: IRequestOptions = {\n\t\theaders: {\n\t\t\tAuthorization: `Bearer ${token}`,\n\t\t},\n\t\tmethod: 'GET',\n\t\turi: url,\n\t\tjson: true,\n\t};\n\n\tconst responseData = await this.helpers.request(options);\n\tconst items = parseScriptsList(responseData.response.scripts as ScriptObject[]);\n\titems.sort((a, b) => (a.name > b.name ? 0 : 1));\n\treturn items;\n}\n\nexport async function logout(\n\tthis: ILoadOptionsFunctions | IExecuteFunctions,\n\ttoken: string,\n): Promise<any> {\n\tconst credentials = await this.getCredentials('fileMaker');\n\n\tconst host = credentials.host as string;\n\tconst db = credentials.db as string;\n\n\tconst url = `https://${host}/fmi/data/v1/databases/${db}/sessions/${token}`;\n\n\t// Reset all values\n\tconst requestOptions: IRequestOptions = {\n\t\turi: url,\n\t\theaders: {},\n\t\tmethod: 'DELETE',\n\t\tjson: true,\n\t\t//rejectUnauthorized: !this.getNodeParameter('allowUnauthorizedCerts', itemIndex, false) as boolean,\n\t};\n\n\tconst response = await this.helpers.request(requestOptions);\n\treturn response;\n}\n\nexport function parseSort(this: IExecuteFunctions, i: number): object | null {\n\tlet sort;\n\tconst setSort = this.getNodeParameter('setSort', i, false);\n\tif (!setSort) {\n\t\tsort = null;\n\t} else {\n\t\tsort = [];\n\t\tconst sortParametersUi = this.getNodeParameter('sortParametersUi', i, {}) as IDataObject;\n\t\tif (sortParametersUi.rules !== undefined) {\n\t\t\tfor (const parameterData of sortParametersUi.rules as IDataObject[]) {\n\t\t\t\tsort.push({\n\t\t\t\t\tfieldName: parameterData.name as string,\n\t\t\t\t\tsortOrder: parameterData.value,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\treturn sort;\n}\n\nexport function parseScripts(this: IExecuteFunctions, i: number): object | null {\n\tconst setScriptAfter = this.getNodeParameter('setScriptAfter', i, false);\n\tconst setScriptBefore = this.getNodeParameter('setScriptBefore', i, false);\n\tconst setScriptSort = this.getNodeParameter('setScriptSort', i, false);\n\n\tif (!setScriptAfter && setScriptBefore && setScriptSort) {\n\t\treturn {};\n\t} else {\n\t\tconst scripts = {} as ScriptsOptions;\n\t\tif (setScriptAfter) {\n\t\t\tscripts.script = this.getNodeParameter('scriptAfter', i);\n\t\t\tscripts['script.param'] = this.getNodeParameter('scriptAfter', i);\n\t\t}\n\t\tif (setScriptBefore) {\n\t\t\tscripts['script.prerequest'] = this.getNodeParameter('scriptBefore', i);\n\t\t\tscripts['script.prerequest.param'] = this.getNodeParameter('scriptBeforeParam', i);\n\t\t}\n\t\tif (setScriptSort) {\n\t\t\tscripts['script.presort'] = this.getNodeParameter('scriptSort', i);\n\t\t\tscripts['script.presort.param'] = this.getNodeParameter('scriptSortParam', i);\n\t\t}\n\t\treturn scripts;\n\t}\n}\n\nexport function parsePortals(this: IExecuteFunctions, i: number): object | null {\n\tlet portals;\n\tconst getPortalsData = this.getNodeParameter('getPortals', i);\n\tif (!getPortalsData) {\n\t\tportals = [];\n\t} else {\n\t\tportals = this.getNodeParameter('portals', i);\n\t}\n\treturn portals as IDataObject;\n}\n\nexport function parseQuery(this: IExecuteFunctions, i: number): object | null {\n\tlet queries;\n\tconst queriesParamUi = this.getNodeParameter('queries', i, {}) as IDataObject;\n\tif (queriesParamUi.query !== undefined) {\n\t\tqueries = [];\n\t\tfor (const queryParam of queriesParamUi.query as IDataObject[]) {\n\t\t\tconst query: IDataObject = {\n\t\t\t\tomit: queryParam.omit ? 'true' : 'false',\n\t\t\t};\n\t\t\tfor (const field of (queryParam.fields as IDataObject).field as IDataObject[]) {\n\t\t\t\tquery[field.name as string] = field.value;\n\t\t\t}\n\t\t\tqueries.push(query);\n\t\t}\n\t} else {\n\t\tqueries = null;\n\t}\n\treturn queries;\n}\n\nexport function parseFields(this: IExecuteFunctions, i: number): object | null {\n\tlet fieldData: IDataObject | null;\n\tconst fieldsParametersUi = this.getNodeParameter('fieldsParametersUi', i, {}) as IDataObject;\n\tif (fieldsParametersUi.fields !== undefined) {\n\t\tfieldData = {};\n\t\tfor (const field of fieldsParametersUi.fields as IDataObject[]) {\n\t\t\tfieldData[field.name as string] = field.value;\n\t\t}\n\t} else {\n\t\tfieldData = null;\n\t}\n\n\treturn fieldData;\n}\n"],"mappings":"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","names":[]}