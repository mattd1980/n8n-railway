{"version":3,"sources":["../../../nodes/Ssh/Ssh.node.ts"],"sourcesContent":["import { writeFile } from 'fs/promises';\nimport type {\n\tICredentialTestFunctions,\n\tICredentialsDecrypted,\n\tIDataObject,\n\tIExecuteFunctions,\n\tINodeCredentialTestResult,\n\tINodeExecutionData,\n\tINodeType,\n\tINodeTypeDescription,\n} from 'n8n-workflow';\nimport { BINARY_ENCODING, NodeConnectionTypes, NodeOperationError } from 'n8n-workflow';\nimport type { Config } from 'node-ssh';\nimport { NodeSSH } from 'node-ssh';\nimport type { Readable } from 'stream';\nimport { file as tmpFile } from 'tmp-promise';\n\nimport { formatPrivateKey } from '@utils/utilities';\n\nasync function resolveHomeDir(\n\tthis: IExecuteFunctions,\n\tpath: string,\n\tssh: NodeSSH,\n\titemIndex: number,\n) {\n\tif (path.startsWith('~/')) {\n\t\tlet homeDir = (await ssh.execCommand('echo $HOME')).stdout;\n\n\t\tif (homeDir.charAt(homeDir.length - 1) !== '/') {\n\t\t\thomeDir += '/';\n\t\t}\n\n\t\treturn path.replace('~/', homeDir);\n\t}\n\n\tif (path.startsWith('~')) {\n\t\tthrow new NodeOperationError(\n\t\t\tthis.getNode(),\n\t\t\t'Invalid path. Replace \"~\" with home directory or \"~/\"',\n\t\t\t{\n\t\t\t\titemIndex,\n\t\t\t},\n\t\t);\n\t}\n\n\treturn path;\n}\n\nexport class Ssh implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'SSH',\n\t\tname: 'ssh',\n\t\ticon: 'fa:terminal',\n\t\ticonColor: 'black',\n\t\tgroup: ['input'],\n\t\tversion: 1,\n\t\tsubtitle: '={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}',\n\t\tdescription: 'Execute commands via SSH',\n\t\tdefaults: {\n\t\t\tname: 'SSH',\n\t\t\tcolor: '#000000',\n\t\t},\n\t\tinputs: [NodeConnectionTypes.Main],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tcredentials: [\n\t\t\t{\n\t\t\t\tname: 'sshPassword',\n\t\t\t\trequired: true,\n\t\t\t\ttestedBy: 'sshConnectionTest',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tauthentication: ['password'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'sshPrivateKey',\n\t\t\t\trequired: true,\n\t\t\t\ttestedBy: 'sshConnectionTest',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tauthentication: ['privateKey'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Authentication',\n\t\t\t\tname: 'authentication',\n\t\t\t\ttype: 'options',\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Password',\n\t\t\t\t\t\tvalue: 'password',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Private Key',\n\t\t\t\t\t\tvalue: 'privateKey',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'password',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Resource',\n\t\t\t\tname: 'resource',\n\t\t\t\ttype: 'options',\n\t\t\t\tnoDataExpression: true,\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Command',\n\t\t\t\t\t\tvalue: 'command',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'File',\n\t\t\t\t\t\tvalue: 'file',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'command',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Operation',\n\t\t\t\tname: 'operation',\n\t\t\t\ttype: 'options',\n\t\t\t\tnoDataExpression: true,\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tresource: ['command'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Execute',\n\t\t\t\t\t\tvalue: 'execute',\n\t\t\t\t\t\tdescription: 'Execute a command',\n\t\t\t\t\t\taction: 'Execute a command',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'execute',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Command',\n\t\t\t\tname: 'command',\n\t\t\t\ttype: 'string',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tresource: ['command'],\n\t\t\t\t\t\toperation: ['execute'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdefault: '',\n\t\t\t\tdescription: 'The command to be executed on a remote device',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Working Directory',\n\t\t\t\tname: 'cwd',\n\t\t\t\ttype: 'string',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tresource: ['command'],\n\t\t\t\t\t\toperation: ['execute'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdefault: '/',\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Operation',\n\t\t\t\tname: 'operation',\n\t\t\t\ttype: 'options',\n\t\t\t\tnoDataExpression: true,\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tresource: ['file'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Download',\n\t\t\t\t\t\tvalue: 'download',\n\t\t\t\t\t\tdescription: 'Download a file',\n\t\t\t\t\t\taction: 'Download a file',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Upload',\n\t\t\t\t\t\tvalue: 'upload',\n\t\t\t\t\t\tdescription: 'Upload a file',\n\t\t\t\t\t\taction: 'Upload a file',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'upload',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Input Binary Field',\n\t\t\t\tname: 'binaryPropertyName',\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: 'data',\n\t\t\t\trequired: true,\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['upload'],\n\t\t\t\t\t\tresource: ['file'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tplaceholder: '',\n\t\t\t\thint: 'The name of the input binary field containing the file to be uploaded',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Target Directory',\n\t\t\t\tname: 'path',\n\t\t\t\ttype: 'string',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tresource: ['file'],\n\t\t\t\t\t\toperation: ['upload'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdefault: '',\n\t\t\t\trequired: true,\n\t\t\t\tplaceholder: '/home/user',\n\t\t\t\tdescription:\n\t\t\t\t\t'The directory to upload the file to. The name of the file does not need to be specified, it\\'s taken from the binary data file name. To override this behavior, set the parameter \"File Name\" under options.',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Path',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tresource: ['file'],\n\t\t\t\t\t\toperation: ['download'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tname: 'path',\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: '',\n\t\t\t\tplaceholder: '/home/user/invoice.txt',\n\t\t\t\tdescription:\n\t\t\t\t\t'The file path of the file to download. Has to contain the full path including file name.',\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'File Property',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tresource: ['file'],\n\t\t\t\t\t\toperation: ['download'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tname: 'binaryPropertyName',\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: 'data',\n\t\t\t\tdescription: 'Object property name which holds binary data',\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Options',\n\t\t\t\tname: 'options',\n\t\t\t\ttype: 'collection',\n\t\t\t\tplaceholder: 'Add option',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tresource: ['file'],\n\t\t\t\t\t\toperation: ['upload', 'download'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdefault: {},\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'File Name',\n\t\t\t\t\t\tname: 'fileName',\n\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\tdescription: 'Overrides the binary data file name',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t],\n\t};\n\n\tmethods = {\n\t\tcredentialTest: {\n\t\t\tasync sshConnectionTest(\n\t\t\t\tthis: ICredentialTestFunctions,\n\t\t\t\tcredential: ICredentialsDecrypted,\n\t\t\t): Promise<INodeCredentialTestResult> {\n\t\t\t\tconst credentials = credential.data as IDataObject;\n\t\t\t\tconst ssh = new NodeSSH();\n\t\t\t\ttry {\n\t\t\t\t\tif (!credentials.privateKey) {\n\t\t\t\t\t\tawait ssh.connect({\n\t\t\t\t\t\t\thost: credentials.host as string,\n\t\t\t\t\t\t\tusername: credentials.username as string,\n\t\t\t\t\t\t\tport: credentials.port as number,\n\t\t\t\t\t\t\tpassword: credentials.password as string,\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst options: Config = {\n\t\t\t\t\t\t\thost: credentials.host as string,\n\t\t\t\t\t\t\tusername: credentials.username as string,\n\t\t\t\t\t\t\tport: credentials.port as number,\n\t\t\t\t\t\t\tprivateKey: formatPrivateKey(credentials.privateKey as string),\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tif (credentials.passphrase) {\n\t\t\t\t\t\t\toptions.passphrase = credentials.passphrase as string;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tawait ssh.connect(options);\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\tconst message = `SSH connection failed: ${error.message}`;\n\t\t\t\t\treturn {\n\t\t\t\t\t\tstatus: 'Error',\n\t\t\t\t\t\tmessage,\n\t\t\t\t\t};\n\t\t\t\t} finally {\n\t\t\t\t\tssh.dispose();\n\t\t\t\t}\n\t\t\t\treturn {\n\t\t\t\t\tstatus: 'OK',\n\t\t\t\t\tmessage: 'Connection successful!',\n\t\t\t\t};\n\t\t\t},\n\t\t},\n\t};\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t\tconst items = this.getInputData();\n\n\t\tconst returnItems: INodeExecutionData[] = [];\n\n\t\tconst resource = this.getNodeParameter('resource', 0);\n\t\tconst operation = this.getNodeParameter('operation', 0);\n\t\tconst authentication = this.getNodeParameter('authentication', 0) as string;\n\n\t\tconst ssh = new NodeSSH();\n\n\t\ttry {\n\t\t\tif (authentication === 'password') {\n\t\t\t\tconst credentials = await this.getCredentials('sshPassword');\n\n\t\t\t\tawait ssh.connect({\n\t\t\t\t\thost: credentials.host as string,\n\t\t\t\t\tusername: credentials.username as string,\n\t\t\t\t\tport: credentials.port as number,\n\t\t\t\t\tpassword: credentials.password as string,\n\t\t\t\t});\n\t\t\t} else if (authentication === 'privateKey') {\n\t\t\t\tconst credentials = await this.getCredentials('sshPrivateKey');\n\t\t\t\tconst options: Config = {\n\t\t\t\t\thost: credentials.host as string,\n\t\t\t\t\tusername: credentials.username as string,\n\t\t\t\t\tport: credentials.port as number,\n\t\t\t\t\tprivateKey: formatPrivateKey(credentials.privateKey as string),\n\t\t\t\t};\n\n\t\t\t\tif (credentials.passphrase) {\n\t\t\t\t\toptions.passphrase = credentials.passphrase as string;\n\t\t\t\t}\n\n\t\t\t\tawait ssh.connect(options);\n\t\t\t}\n\n\t\t\tfor (let i = 0; i < items.length; i++) {\n\t\t\t\ttry {\n\t\t\t\t\tif (resource === 'command') {\n\t\t\t\t\t\tif (operation === 'execute') {\n\t\t\t\t\t\t\tconst command = this.getNodeParameter('command', i) as string;\n\t\t\t\t\t\t\tconst cwd = await resolveHomeDir.call(\n\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\tthis.getNodeParameter('cwd', i) as string,\n\t\t\t\t\t\t\t\tssh,\n\t\t\t\t\t\t\t\ti,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\treturnItems.push({\n\t\t\t\t\t\t\t\tjson: (await ssh.execCommand(command, { cwd })) as unknown as IDataObject,\n\t\t\t\t\t\t\t\tpairedItem: {\n\t\t\t\t\t\t\t\t\titem: i,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (resource === 'file') {\n\t\t\t\t\t\tif (operation === 'download') {\n\t\t\t\t\t\t\tconst dataPropertyNameDownload = this.getNodeParameter('binaryPropertyName', i);\n\t\t\t\t\t\t\tconst parameterPath = await resolveHomeDir.call(\n\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\tthis.getNodeParameter('path', i) as string,\n\t\t\t\t\t\t\t\tssh,\n\t\t\t\t\t\t\t\ti,\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tconst binaryFile = await tmpFile({ prefix: 'n8n-ssh-' });\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tawait ssh.getFile(binaryFile.path, parameterPath);\n\n\t\t\t\t\t\t\t\tconst newItem: INodeExecutionData = {\n\t\t\t\t\t\t\t\t\tjson: items[i].json,\n\t\t\t\t\t\t\t\t\tbinary: {},\n\t\t\t\t\t\t\t\t\tpairedItem: {\n\t\t\t\t\t\t\t\t\t\titem: i,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\tif (items[i].binary !== undefined && newItem.binary) {\n\t\t\t\t\t\t\t\t\t// Create a shallow copy of the binary data so that the old\n\t\t\t\t\t\t\t\t\t// data references which do not get changed still stay behind\n\t\t\t\t\t\t\t\t\t// but the incoming data does not get changed.\n\t\t\t\t\t\t\t\t\tObject.assign(newItem.binary, items[i].binary);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\titems[i] = newItem;\n\n\t\t\t\t\t\t\t\tconst fileName = this.getNodeParameter('options.fileName', i, '') as string;\n\t\t\t\t\t\t\t\titems[i].binary![dataPropertyNameDownload] = await this.nodeHelpers.copyBinaryFile(\n\t\t\t\t\t\t\t\t\tbinaryFile.path,\n\t\t\t\t\t\t\t\t\tfileName || parameterPath,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t} finally {\n\t\t\t\t\t\t\t\tawait binaryFile.cleanup();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (operation === 'upload') {\n\t\t\t\t\t\t\tconst parameterPath = await resolveHomeDir.call(\n\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\tthis.getNodeParameter('path', i) as string,\n\t\t\t\t\t\t\t\tssh,\n\t\t\t\t\t\t\t\ti,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tconst fileName = this.getNodeParameter('options.fileName', i, '') as string;\n\n\t\t\t\t\t\t\tconst binaryPropertyName = this.getNodeParameter('binaryPropertyName', i);\n\t\t\t\t\t\t\tconst binaryData = this.helpers.assertBinaryData(i, binaryPropertyName);\n\n\t\t\t\t\t\t\tlet uploadData: Buffer | Readable;\n\t\t\t\t\t\t\tif (binaryData.id) {\n\t\t\t\t\t\t\t\tuploadData = await this.helpers.getBinaryStream(binaryData.id);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tuploadData = Buffer.from(binaryData.data, BINARY_ENCODING);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tconst binaryFile = await tmpFile({ prefix: 'n8n-ssh-' });\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tawait writeFile(binaryFile.path, uploadData);\n\n\t\t\t\t\t\t\t\tawait ssh.putFile(\n\t\t\t\t\t\t\t\t\tbinaryFile.path,\n\t\t\t\t\t\t\t\t\t`${parameterPath}${\n\t\t\t\t\t\t\t\t\t\tparameterPath.charAt(parameterPath.length - 1) === '/' ? '' : '/'\n\t\t\t\t\t\t\t\t\t}${fileName || binaryData.fileName}`,\n\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\treturnItems.push({\n\t\t\t\t\t\t\t\t\tjson: {\n\t\t\t\t\t\t\t\t\t\tsuccess: true,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tpairedItem: {\n\t\t\t\t\t\t\t\t\t\titem: i,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t} finally {\n\t\t\t\t\t\t\t\tawait binaryFile.cleanup();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\t\tif (resource === 'file' && operation === 'download') {\n\t\t\t\t\t\t\titems[i] = {\n\t\t\t\t\t\t\t\tjson: {\n\t\t\t\t\t\t\t\t\terror: error.message,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturnItems.push({\n\t\t\t\t\t\t\t\tjson: {\n\t\t\t\t\t\t\t\t\terror: error.message,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tpairedItem: {\n\t\t\t\t\t\t\t\t\titem: i,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\t\t\t}\n\t\t} finally {\n\t\t\tssh.dispose();\n\t\t}\n\n\t\tif (resource === 'file' && operation === 'download') {\n\t\t\t// For file downloads the files get attached to the existing items\n\t\t\treturn [items];\n\t\t} else {\n\t\t\treturn [returnItems];\n\t\t}\n\t}\n}\n"],"mappings":"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","names":["tmpFile"]}