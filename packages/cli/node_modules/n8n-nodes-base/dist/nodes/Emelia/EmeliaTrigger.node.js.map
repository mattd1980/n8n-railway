{"version":3,"sources":["../../../nodes/Emelia/EmeliaTrigger.node.ts"],"sourcesContent":["import {\n\tNodeConnectionTypes,\n\ttype IDataObject,\n\ttype IHookFunctions,\n\ttype ILoadOptionsFunctions,\n\ttype INodePropertyOptions,\n\ttype INodeType,\n\ttype INodeTypeDescription,\n\ttype IWebhookFunctions,\n\ttype IWebhookResponseData,\n} from 'n8n-workflow';\n\nimport { emeliaApiRequest, emeliaApiTest, emeliaGraphqlRequest } from './GenericFunctions';\n\ninterface Campaign {\n\t_id: string;\n\tname: string;\n}\n\nexport class EmeliaTrigger implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'Emelia Trigger',\n\t\tname: 'emeliaTrigger',\n\t\ticon: 'file:emelia.svg',\n\t\tsubtitle: '={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}',\n\t\tgroup: ['trigger'],\n\t\tversion: 1,\n\t\tdescription: 'Handle Emelia campaign activity events via webhooks',\n\t\tdefaults: {\n\t\t\tname: 'Emelia Trigger',\n\t\t},\n\t\tinputs: [],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tcredentials: [\n\t\t\t{\n\t\t\t\tname: 'emeliaApi',\n\t\t\t\trequired: true,\n\t\t\t\ttestedBy: 'emeliaApiTest',\n\t\t\t},\n\t\t],\n\t\twebhooks: [\n\t\t\t{\n\t\t\t\tname: 'default',\n\t\t\t\thttpMethod: 'POST',\n\t\t\t\tresponseMode: 'onReceived',\n\t\t\t\tpath: 'webhook',\n\t\t\t},\n\t\t],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Campaign Name or ID',\n\t\t\t\tname: 'campaignId',\n\t\t\t\ttype: 'options',\n\t\t\t\tdescription:\n\t\t\t\t\t'Choose from the list, or specify an ID using an <a href=\"https://docs.n8n.io/code/expressions/\">expression</a>',\n\t\t\t\ttypeOptions: {\n\t\t\t\t\tloadOptionsMethod: 'getCampaigns',\n\t\t\t\t},\n\t\t\t\trequired: true,\n\t\t\t\tdefault: '',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Events',\n\t\t\t\tname: 'events',\n\t\t\t\ttype: 'multiOptions',\n\t\t\t\trequired: true,\n\t\t\t\tdefault: [],\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Email Bounced',\n\t\t\t\t\t\tvalue: 'bounced',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Email Opened',\n\t\t\t\t\t\tvalue: 'opened',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Email Replied',\n\t\t\t\t\t\tvalue: 'replied',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Email Sent',\n\t\t\t\t\t\tvalue: 'sent',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Link Clicked',\n\t\t\t\t\t\tvalue: 'clicked',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Unsubscribed Contact',\n\t\t\t\t\t\tvalue: 'unsubscribed',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t],\n\t};\n\n\tmethods = {\n\t\tcredentialTest: {\n\t\t\temeliaApiTest,\n\t\t},\n\n\t\tloadOptions: {\n\t\t\tasync getCampaigns(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst responseData = await emeliaGraphqlRequest.call(this, {\n\t\t\t\t\tquery: `\n\t\t\t\t\tquery GetCampaigns {\n\t\t\t\t\t\tcampaigns {\n\t\t\t\t\t\t\t_id\n\t\t\t\t\t\t\tname\n\t\t\t\t\t\t}\n\t\t\t\t\t}`,\n\t\t\t\t\toperationName: 'GetCampaigns',\n\t\t\t\t\tvariables: '{}',\n\t\t\t\t});\n\n\t\t\t\treturn responseData.data.campaigns.map((campaign: Campaign) => ({\n\t\t\t\t\tname: campaign.name,\n\t\t\t\t\tvalue: campaign._id,\n\t\t\t\t}));\n\t\t\t},\n\t\t},\n\t};\n\n\twebhookMethods = {\n\t\tdefault: {\n\t\t\tasync checkExists(this: IHookFunctions): Promise<boolean> {\n\t\t\t\tconst webhookUrl = this.getNodeWebhookUrl('default') as string;\n\t\t\t\tconst campaignId = this.getNodeParameter('campaignId') as string;\n\t\t\t\tconst { webhooks } = await emeliaApiRequest.call(this, 'GET', '/webhook');\n\t\t\t\tfor (const webhook of webhooks) {\n\t\t\t\t\tif (webhook.url === webhookUrl && webhook.campaignId === campaignId) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn false;\n\t\t\t},\n\t\t\tasync create(this: IHookFunctions): Promise<boolean> {\n\t\t\t\tconst webhookUrl = this.getNodeWebhookUrl('default') as string;\n\t\t\t\tconst webhookData = this.getWorkflowStaticData('node');\n\t\t\t\tconst events = this.getNodeParameter('events') as string[];\n\n\t\t\t\tconst campaignId = this.getNodeParameter('campaignId') as string;\n\t\t\t\tconst body = {\n\t\t\t\t\thookUrl: webhookUrl,\n\t\t\t\t\tevents: events.map((e) => e.toUpperCase()),\n\t\t\t\t\tcampaignId,\n\t\t\t\t};\n\n\t\t\t\tconst { webhookId } = await emeliaApiRequest.call(this, 'POST', '/webhook/webhook', body);\n\t\t\t\twebhookData.webhookId = webhookId;\n\t\t\t\treturn true;\n\t\t\t},\n\t\t\tasync delete(this: IHookFunctions): Promise<boolean> {\n\t\t\t\tconst webhookData = this.getWorkflowStaticData('node');\n\t\t\t\tconst webhookUrl = this.getNodeWebhookUrl('default') as string;\n\t\t\t\tconst campaignId = this.getNodeParameter('campaignId') as string;\n\n\t\t\t\ttry {\n\t\t\t\t\tconst body = {\n\t\t\t\t\t\thookUrl: webhookUrl,\n\t\t\t\t\t\tcampaignId,\n\t\t\t\t\t};\n\t\t\t\t\tawait emeliaApiRequest.call(this, 'DELETE', '/webhook/webhook', body);\n\t\t\t\t} catch (error) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tdelete webhookData.webhookId;\n\t\t\t\treturn true;\n\t\t\t},\n\t\t},\n\t};\n\n\tasync webhook(this: IWebhookFunctions): Promise<IWebhookResponseData> {\n\t\tconst req = this.getRequestObject();\n\t\treturn {\n\t\t\tworkflowData: [this.helpers.returnJsonArray(req.body as IDataObject)],\n\t\t};\n\t}\n}\n"],"mappings":"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","names":[]}