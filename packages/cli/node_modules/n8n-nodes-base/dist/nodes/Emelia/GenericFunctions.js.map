{"version":3,"sources":["../../../nodes/Emelia/GenericFunctions.ts"],"sourcesContent":["import type {\n\tICredentialsDecrypted,\n\tICredentialTestFunctions,\n\tIExecuteFunctions,\n\tILoadOptionsFunctions,\n\tIHookFunctions,\n\tINodeCredentialTestResult,\n\tINodePropertyOptions,\n\tJsonObject,\n\tIRequestOptions,\n\tIHttpRequestMethods,\n\tIDataObject,\n} from 'n8n-workflow';\nimport { NodeApiError } from 'n8n-workflow';\n\n/**\n * Make an authenticated REST API request to Emelia, used for trigger node.\n */\nexport async function emeliaApiRequest(\n\tthis: IExecuteFunctions | ILoadOptionsFunctions | IHookFunctions,\n\tmethod: IHttpRequestMethods,\n\tendpoint: string,\n\tbody: object = {},\n\tqs: IDataObject = {},\n) {\n\tconst { apiKey } = await this.getCredentials<{ apiKey: string }>('emeliaApi');\n\n\tconst options: IRequestOptions = {\n\t\theaders: {\n\t\t\tAuthorization: apiKey,\n\t\t},\n\t\tmethod,\n\t\tbody,\n\t\tqs,\n\t\turi: `https://graphql.emelia.io${endpoint}`,\n\t\tjson: true,\n\t};\n\n\ttry {\n\t\treturn await this.helpers.request.call(this, options);\n\t} catch (error) {\n\t\tthrow new NodeApiError(this.getNode(), error as JsonObject);\n\t}\n}\n\n/**\n * Make an authenticated GraphQL request to Emelia.\n */\nexport async function emeliaGraphqlRequest(\n\tthis: IExecuteFunctions | ILoadOptionsFunctions,\n\tbody: object = {},\n) {\n\tconst response = await emeliaApiRequest.call(this, 'POST', '/graphql', body);\n\n\tif (response.errors) {\n\t\tthrow new NodeApiError(this.getNode(), response as JsonObject);\n\t}\n\n\treturn response;\n}\n\n/**\n * Load resources so that the user can select them easily.\n */\nexport async function loadResource(\n\tthis: ILoadOptionsFunctions,\n\tresource: 'campaign' | 'contactList',\n): Promise<INodePropertyOptions[]> {\n\tconst mapping: { [key in 'campaign' | 'contactList']: { query: string; key: string } } = {\n\t\tcampaign: {\n\t\t\tquery: `\n\t\t\t\tquery GetCampaigns {\n\t\t\t\t\tcampaigns {\n\t\t\t\t\t\t_id\n\t\t\t\t\t\tname\n\t\t\t\t\t}\n\t\t\t\t}`,\n\t\t\tkey: 'campaigns',\n\t\t},\n\t\tcontactList: {\n\t\t\tquery: `\n\t\t\tquery GetContactLists {\n\t\t\t\tcontact_lists {\n\t\t\t\t\t_id\n\t\t\t\t\tname\n\t\t\t\t}\n\t\t\t}`,\n\t\t\tkey: 'contact_lists',\n\t\t},\n\t};\n\n\tconst responseData = await emeliaGraphqlRequest.call(this, { query: mapping[resource].query });\n\n\treturn responseData.data[mapping[resource].key].map(\n\t\t(campaign: { name: string; _id: string }) => ({\n\t\t\tname: campaign.name,\n\t\t\tvalue: campaign._id,\n\t\t}),\n\t);\n}\n\nexport async function emeliaApiTest(\n\tthis: ICredentialTestFunctions,\n\tcredential: ICredentialsDecrypted,\n): Promise<INodeCredentialTestResult> {\n\tconst credentials = credential.data;\n\n\tconst body = {\n\t\tquery: `\n\t\t\t\tquery all_campaigns {\n\t\t\t\t\tall_campaigns {\n\t\t\t\t\t\t_id\n\t\t\t\t\t\tname\n\t\t\t\t\t\tstatus\n\t\t\t\t\t\tcreatedAt\n\t\t\t\t\t\tstats {\n\t\t\t\t\t\t\tmailsSent\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}`,\n\t\toperationName: 'all_campaigns',\n\t};\n\n\tconst options = {\n\t\theaders: {\n\t\t\tAuthorization: credentials?.apiKey,\n\t\t},\n\t\tmethod: 'POST',\n\t\tbody,\n\t\turi: 'https://graphql.emelia.io/graphql',\n\t\tjson: true,\n\t};\n\n\ttry {\n\t\tawait this.helpers.request(options);\n\t} catch (error) {\n\t\treturn {\n\t\t\tstatus: 'Error',\n\t\t\tmessage: `Connection details not valid: ${(error as JsonObject).message}`,\n\t\t};\n\t}\n\treturn {\n\t\tstatus: 'OK',\n\t\tmessage: 'Authentication successful!',\n\t};\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA,0BAA6B;AAK7B,eAAsB,iBAErB,QACA,UACA,OAAe,CAAC,GAChB,KAAkB,CAAC,GAClB;AACD,QAAM,EAAE,OAAO,IAAI,MAAM,KAAK,eAAmC,WAAW;AAE5E,QAAM,UAA2B;AAAA,IAChC,SAAS;AAAA,MACR,eAAe;AAAA,IAChB;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,KAAK,4BAA4B,QAAQ;AAAA,IACzC,MAAM;AAAA,EACP;AAEA,MAAI;AACH,WAAO,MAAM,KAAK,QAAQ,QAAQ,KAAK,MAAM,OAAO;AAAA,EACrD,SAAS,OAAO;AACf,UAAM,IAAI,iCAAa,KAAK,QAAQ,GAAG,KAAmB;AAAA,EAC3D;AACD;AAKA,eAAsB,qBAErB,OAAe,CAAC,GACf;AACD,QAAM,WAAW,MAAM,iBAAiB,KAAK,MAAM,QAAQ,YAAY,IAAI;AAE3E,MAAI,SAAS,QAAQ;AACpB,UAAM,IAAI,iCAAa,KAAK,QAAQ,GAAG,QAAsB;AAAA,EAC9D;AAEA,SAAO;AACR;AAKA,eAAsB,aAErB,UACkC;AAClC,QAAM,UAAmF;AAAA,IACxF,UAAU;AAAA,MACT,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOP,KAAK;AAAA,IACN;AAAA,IACA,aAAa;AAAA,MACZ,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOP,KAAK;AAAA,IACN;AAAA,EACD;AAEA,QAAM,eAAe,MAAM,qBAAqB,KAAK,MAAM,EAAE,OAAO,QAAQ,QAAQ,EAAE,MAAM,CAAC;AAE7F,SAAO,aAAa,KAAK,QAAQ,QAAQ,EAAE,GAAG,EAAE;AAAA,IAC/C,CAAC,cAA6C;AAAA,MAC7C,MAAM,SAAS;AAAA,MACf,OAAO,SAAS;AAAA,IACjB;AAAA,EACD;AACD;AAEA,eAAsB,cAErB,YACqC;AACrC,QAAM,cAAc,WAAW;AAE/B,QAAM,OAAO;AAAA,IACZ,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAYP,eAAe;AAAA,EAChB;AAEA,QAAM,UAAU;AAAA,IACf,SAAS;AAAA,MACR,eAAe,aAAa;AAAA,IAC7B;AAAA,IACA,QAAQ;AAAA,IACR;AAAA,IACA,KAAK;AAAA,IACL,MAAM;AAAA,EACP;AAEA,MAAI;AACH,UAAM,KAAK,QAAQ,QAAQ,OAAO;AAAA,EACnC,SAAS,OAAO;AACf,WAAO;AAAA,MACN,QAAQ;AAAA,MACR,SAAS,iCAAkC,MAAqB,OAAO;AAAA,IACxE;AAAA,EACD;AACA,SAAO;AAAA,IACN,QAAQ;AAAA,IACR,SAAS;AAAA,EACV;AACD;","names":[]}