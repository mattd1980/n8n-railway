{"version":3,"sources":["../../../nodes/Emelia/Emelia.node.ts"],"sourcesContent":["import isEmpty from 'lodash/isEmpty';\nimport {\n\ttype IExecuteFunctions,\n\ttype IDataObject,\n\ttype ILoadOptionsFunctions,\n\ttype INodeExecutionData,\n\ttype INodeType,\n\ttype INodeTypeDescription,\n\tNodeConnectionTypes,\n} from 'n8n-workflow';\n\nimport { campaignFields, campaignOperations } from './CampaignDescription';\nimport { contactListFields, contactListOperations } from './ContactListDescription';\nimport { emeliaApiTest, emeliaGraphqlRequest, loadResource } from './GenericFunctions';\n\nexport class Emelia implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'Emelia',\n\t\tname: 'emelia',\n\t\ticon: 'file:emelia.svg',\n\t\tgroup: ['input'],\n\t\tversion: 1,\n\t\tsubtitle: '={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}',\n\t\tdescription: 'Consume the Emelia API',\n\t\tdefaults: {\n\t\t\tname: 'Emelia',\n\t\t},\n\t\tusableAsTool: true,\n\t\tinputs: [NodeConnectionTypes.Main],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tcredentials: [\n\t\t\t{\n\t\t\t\tname: 'emeliaApi',\n\t\t\t\trequired: true,\n\t\t\t\ttestedBy: 'emeliaApiTest',\n\t\t\t},\n\t\t],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Resource',\n\t\t\t\tname: 'resource',\n\t\t\t\ttype: 'options',\n\t\t\t\tnoDataExpression: true,\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Campaign',\n\t\t\t\t\t\tvalue: 'campaign',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Contact List',\n\t\t\t\t\t\tvalue: 'contactList',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'campaign',\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t\t...campaignOperations,\n\t\t\t...campaignFields,\n\t\t\t...contactListOperations,\n\t\t\t...contactListFields,\n\t\t],\n\t};\n\n\tmethods = {\n\t\tcredentialTest: {\n\t\t\temeliaApiTest,\n\t\t},\n\n\t\tloadOptions: {\n\t\t\tasync getCampaigns(this: ILoadOptionsFunctions) {\n\t\t\t\treturn await loadResource.call(this, 'campaign');\n\t\t\t},\n\n\t\t\tasync getContactLists(this: ILoadOptionsFunctions) {\n\t\t\t\treturn await loadResource.call(this, 'contactList');\n\t\t\t},\n\t\t},\n\t};\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t\tconst items = this.getInputData();\n\t\tconst returnData: INodeExecutionData[] = [];\n\n\t\tconst resource = this.getNodeParameter('resource', 0);\n\t\tconst operation = this.getNodeParameter('operation', 0);\n\n\t\tfor (let i = 0; i < items.length; i++) {\n\t\t\ttry {\n\t\t\t\tif (resource === 'campaign') {\n\t\t\t\t\t// **********************************\n\t\t\t\t\t//            campaign\n\t\t\t\t\t// **********************************\n\n\t\t\t\t\tif (operation === 'addContact') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//       campaign: addContact\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\tconst contact = {\n\t\t\t\t\t\t\temail: this.getNodeParameter('contactEmail', i) as string,\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i);\n\n\t\t\t\t\t\tif (!isEmpty(additionalFields)) {\n\t\t\t\t\t\t\tObject.assign(contact, additionalFields);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (additionalFields.customFieldsUi) {\n\t\t\t\t\t\t\tconst customFields =\n\t\t\t\t\t\t\t\t((additionalFields.customFieldsUi as IDataObject)\n\t\t\t\t\t\t\t\t\t?.customFieldsValues as IDataObject[]) || [];\n\t\t\t\t\t\t\tconst data = customFields.reduce(\n\t\t\t\t\t\t\t\t(obj, value) => Object.assign(obj, { [`${value.fieldName}`]: value.value }),\n\t\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tObject.assign(contact, data);\n\t\t\t\t\t\t\t//@ts-ignore\n\t\t\t\t\t\t\tdelete contact.customFieldsUi;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst responseData = await emeliaGraphqlRequest.call(this, {\n\t\t\t\t\t\t\tquery: `\n\t\t\t\t\t\t\t\t\tmutation AddContactToCampaignHook($id: ID!, $contact: JSON!) {\n\t\t\t\t\t\t\t\t\t\taddContactToCampaignHook(id: $id, contact: $contact)\n\t\t\t\t\t\t\t\t}`,\n\t\t\t\t\t\t\toperationName: 'AddContactToCampaignHook',\n\t\t\t\t\t\t\tvariables: {\n\t\t\t\t\t\t\t\tid: this.getNodeParameter('campaignId', i),\n\t\t\t\t\t\t\t\tcontact,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray({\n\t\t\t\t\t\t\t\tcontactId: responseData.data.addContactToCampaignHook,\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t} else if (operation === 'create') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//        campaign: create\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\tconst responseData = await emeliaGraphqlRequest.call(this, {\n\t\t\t\t\t\t\toperationName: 'createCampaign',\n\t\t\t\t\t\t\tquery: `\n\t\t\t\t\t\t\t\t\tmutation createCampaign($name: String!) {\n\t\t\t\t\t\t\t\t\t\tcreateCampaign(name: $name) {\n\t\t\t\t\t\t\t\t\t\t\t_id\n\t\t\t\t\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\t\t\t\t\tstatus\n\t\t\t\t\t\t\t\t\t\t\tcreatedAt\n\t\t\t\t\t\t\t\t\t\t\tprovider\n\t\t\t\t\t\t\t\t\t\t\tstartAt\n\t\t\t\t\t\t\t\t\t\t\testimatedEnd\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}`,\n\t\t\t\t\t\t\tvariables: {\n\t\t\t\t\t\t\t\tname: this.getNodeParameter('campaignName', i),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData.data.createCampaign as IDataObject),\n\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t} else if (operation === 'get') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//        campaign: get\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\tconst responseData = await emeliaGraphqlRequest.call(this, {\n\t\t\t\t\t\t\tquery: `\n\t\t\t\t\t\t\t\t\tquery campaign($id: ID!){\n\t\t\t\t\t\t\t\t\t\tcampaign(id: $id){\n\t\t\t\t\t\t\t\t\t\t\t_id\n\t\t\t\t\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\t\t\t\t\tstatus\n\t\t\t\t\t\t\t\t\t\t\tcreatedAt\n\t\t\t\t\t\t\t\t\t\t\tschedule{\n\t\t\t\t\t\t\t\t\t\t\t\tdailyContact\n\t\t\t\t\t\t\t\t\t\t\t\tdailyLimit\n\t\t\t\t\t\t\t\t\t\t\t\tminInterval\n\t\t\t\t\t\t\t\t\t\t\t\tmaxInterval\n\t\t\t\t\t\t\t\t\t\t\t\ttrackLinks\n\t\t\t\t\t\t\t\t\t\t\t\ttrackOpens\n\t\t\t\t\t\t\t\t\t\t\t\ttimeZone\n\t\t\t\t\t\t\t\t\t\t\t\tdays\n\t\t\t\t\t\t\t\t\t\t\t\tstart\n\t\t\t\t\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\t\t\t\t\t\teventToStopMails\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tprovider\n\t\t\t\t\t\t\t\t\t\t\tstartAt\n\t\t\t\t\t\t\t\t\t\t\trecipients{\n\t\t\t\t\t\t\t\t\t\t\t\ttotal_count\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\testimatedEnd\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}`,\n\t\t\t\t\t\t\toperationName: 'campaign',\n\t\t\t\t\t\t\tvariables: {\n\t\t\t\t\t\t\t\tid: this.getNodeParameter('campaignId', i),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData.data.campaign as IDataObject),\n\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t} else if (operation === 'getAll') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//        campaign: getAll\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\tconst responseData = await emeliaGraphqlRequest.call(this, {\n\t\t\t\t\t\t\tquery: `\n\t\t\t\t\t\t\t\t\tquery all_campaigns {\n\t\t\t\t\t\t\t\t\t\tall_campaigns {\n\t\t\t\t\t\t\t\t\t\t\t_id\n\t\t\t\t\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\t\t\t\t\tstatus\n\t\t\t\t\t\t\t\t\t\t\tcreatedAt\n\t\t\t\t\t\t\t\t\t\t\tstats {\n\t\t\t\t\t\t\t\t\t\t\t\tmailsSent\n\t\t\t\t\t\t\t\t\t\t\t\tuniqueOpensPercent\n\t\t\t\t\t\t\t\t\t\t\t\topens\n\t\t\t\t\t\t\t\t\t\t\t\tlinkClickedPercent\n\t\t\t\t\t\t\t\t\t\t\t\trepliedPercent\n\t\t\t\t\t\t\t\t\t\t\t\tbouncedPercent\n\t\t\t\t\t\t\t\t\t\t\t\tunsubscribePercent\n\t\t\t\t\t\t\t\t\t\t\t\tprogressPercent\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}`,\n\t\t\t\t\t\t\toperationName: 'all_campaigns',\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tlet campaigns = responseData.data.all_campaigns;\n\n\t\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', i);\n\n\t\t\t\t\t\tif (!returnAll) {\n\t\t\t\t\t\t\tconst limit = this.getNodeParameter('limit', i);\n\t\t\t\t\t\t\tcampaigns = campaigns.slice(0, limit);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray(campaigns as IDataObject[]),\n\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t} else if (operation === 'pause') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//        campaign: pause\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\tawait emeliaGraphqlRequest.call(this, {\n\t\t\t\t\t\t\tquery: `\n\t\t\t\t\t\t\t\t\tmutation pauseCampaign($id: ID!) {\n\t\t\t\t\t\t\t\t\t\tpauseCampaign(id: $id)\n\t\t\t\t\t\t\t\t\t}`,\n\t\t\t\t\t\t\toperationName: 'pauseCampaign',\n\t\t\t\t\t\t\tvariables: {\n\t\t\t\t\t\t\t\tid: this.getNodeParameter('campaignId', i),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray({ success: true }),\n\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t} else if (operation === 'start') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//        campaign: start\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\tawait emeliaGraphqlRequest.call(this, {\n\t\t\t\t\t\t\tquery: `\n\t\t\t\t\t\t\t\t\tmutation startCampaign($id: ID!) {\n\t\t\t\t\t\t\t\t\t\tstartCampaign(id: $id)\n\t\t\t\t\t\t\t\t\t}`,\n\t\t\t\t\t\t\toperationName: 'startCampaign',\n\t\t\t\t\t\t\tvariables: {\n\t\t\t\t\t\t\t\tid: this.getNodeParameter('campaignId', i),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray({ success: true }),\n\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t} else if (operation === 'duplicate') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//        campaign: duplicate\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\tconst options = this.getNodeParameter('options', i);\n\t\t\t\t\t\tconst variables = {\n\t\t\t\t\t\t\tfromId: this.getNodeParameter('campaignId', i),\n\t\t\t\t\t\t\tname: this.getNodeParameter('campaignName', i),\n\t\t\t\t\t\t\tcopySettings: true,\n\t\t\t\t\t\t\tcopyMails: true,\n\t\t\t\t\t\t\tcopyContacts: false,\n\t\t\t\t\t\t\tcopyProvider: true,\n\t\t\t\t\t\t\t...options,\n\t\t\t\t\t\t};\n\t\t\t\t\t\tconst {\n\t\t\t\t\t\t\tdata: { duplicateCampaign },\n\t\t\t\t\t\t} = await emeliaGraphqlRequest.call(this, {\n\t\t\t\t\t\t\tquery: `\n\t\t\t\t\t\t\t\t\tmutation duplicateCampaign(\n\t\t\t\t\t\t\t\t\t\t$fromId: ID!\n\t\t\t\t\t\t\t\t\t\t$name: String!\n\t\t\t\t\t\t\t\t\t\t$copySettings: Boolean!\n\t\t\t\t\t\t\t\t\t\t$copyMails: Boolean!\n\t\t\t\t\t\t\t\t\t\t$copyContacts: Boolean!\n\t\t\t\t\t\t\t\t\t\t$copyProvider: Boolean!\n\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\tduplicateCampaign(\n\t\t\t\t\t\t\t\t\t\t\tfromId: $fromId\n\t\t\t\t\t\t\t\t\t\t\tname: $name\n\t\t\t\t\t\t\t\t\t\t\tcopySettings: $copySettings\n\t\t\t\t\t\t\t\t\t\t\tcopyMails: $copyMails\n\t\t\t\t\t\t\t\t\t\t\tcopyContacts: $copyContacts\n\t\t\t\t\t\t\t\t\t\t\tcopyProvider: $copyProvider\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t}`,\n\t\t\t\t\t\t\toperationName: 'duplicateCampaign',\n\t\t\t\t\t\t\tvariables,\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray({ _id: duplicateCampaign }),\n\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t}\n\t\t\t\t} else if (resource === 'contactList') {\n\t\t\t\t\t// **********************************\n\t\t\t\t\t//           ContactList\n\t\t\t\t\t// **********************************\n\n\t\t\t\t\tif (operation === 'add') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//      contactList: add\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\tconst contact = {\n\t\t\t\t\t\t\temail: this.getNodeParameter('contactEmail', i) as string,\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i);\n\n\t\t\t\t\t\tif (!isEmpty(additionalFields)) {\n\t\t\t\t\t\t\tObject.assign(contact, additionalFields);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (additionalFields.customFieldsUi) {\n\t\t\t\t\t\t\tconst customFields =\n\t\t\t\t\t\t\t\t((additionalFields.customFieldsUi as IDataObject)\n\t\t\t\t\t\t\t\t\t?.customFieldsValues as IDataObject[]) || [];\n\t\t\t\t\t\t\tconst data = customFields.reduce(\n\t\t\t\t\t\t\t\t(obj, value) => Object.assign(obj, { [`${value.fieldName}`]: value.value }),\n\t\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tObject.assign(contact, data);\n\t\t\t\t\t\t\t//@ts-ignore\n\t\t\t\t\t\t\tdelete contact.customFieldsUi;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst responseData = await emeliaGraphqlRequest.call(this, {\n\t\t\t\t\t\t\tquery: `\n\t\t\t\t\t\t\t\t\tmutation AddContactsToListHook($id: ID!, $contact: JSON!) {\n\t\t\t\t\t\t\t\t\t\taddContactsToListHook(id: $id, contact: $contact)\n\t\t\t\t\t\t\t\t\t}`,\n\t\t\t\t\t\t\toperationName: 'AddContactsToListHook',\n\t\t\t\t\t\t\tvariables: {\n\t\t\t\t\t\t\t\tid: this.getNodeParameter('contactListId', i),\n\t\t\t\t\t\t\t\tcontact,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray({ contactId: responseData.data.addContactsToListHook }),\n\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t} else if (operation === 'getAll') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//       contactList: getAll\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\tconst responseData = await emeliaGraphqlRequest.call(this, {\n\t\t\t\t\t\t\tquery: `\n\t\t\t\t\t\t\t\t\tquery contact_lists{\n\t\t\t\t\t\t\t\t\t\tcontact_lists{\n\t\t\t\t\t\t\t\t\t\t\t_id\n\t\t\t\t\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\t\t\t\t\tcontactCount\n\t\t\t\t\t\t\t\t\t\t\tfields\n\t\t\t\t\t\t\t\t\t\t\tusedInCampaign\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}`,\n\t\t\t\t\t\t\toperationName: 'contact_lists',\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tlet contactLists = responseData.data.contact_lists;\n\n\t\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', i);\n\n\t\t\t\t\t\tif (!returnAll) {\n\t\t\t\t\t\t\tconst limit = this.getNodeParameter('limit', i);\n\t\t\t\t\t\t\tcontactLists = contactLists.slice(0, limit);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray(contactLists as IDataObject[]),\n\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\tconst executionErrorData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\tthis.helpers.returnJsonArray({ error: error.message }),\n\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t);\n\t\t\t\t\treturnData.push(...executionErrorData);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\t\treturn [returnData];\n\t}\n}\n"],"mappings":"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","names":["isEmpty"]}