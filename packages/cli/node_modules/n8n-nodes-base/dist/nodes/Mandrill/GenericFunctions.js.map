{"version":3,"sources":["../../../nodes/Mandrill/GenericFunctions.ts"],"sourcesContent":["import map from 'lodash/map';\nimport type {\n\tIDataObject,\n\tIExecuteFunctions,\n\tIHookFunctions,\n\tIHttpRequestMethods,\n\tILoadOptionsFunctions,\n\tIRequestOptions,\n\tJsonObject,\n} from 'n8n-workflow';\nimport { NodeApiError } from 'n8n-workflow';\n\nexport async function mandrillApiRequest(\n\tthis: IExecuteFunctions | IHookFunctions | ILoadOptionsFunctions,\n\tresource: string,\n\tmethod: IHttpRequestMethods,\n\taction: string,\n\n\tbody: any = {},\n\theaders?: IDataObject,\n): Promise<any> {\n\tconst credentials = await this.getCredentials('mandrillApi');\n\n\tconst data = Object.assign({}, body, { key: credentials.apiKey });\n\n\tconst endpoint = 'mandrillapp.com/api/1.0';\n\n\tconst options: IRequestOptions = {\n\t\theaders,\n\t\tmethod,\n\t\turi: `https://${endpoint}${resource}${action}.json`,\n\t\tbody: data,\n\t\tjson: true,\n\t};\n\n\ttry {\n\t\treturn await this.helpers.request(options);\n\t} catch (error) {\n\t\tthrow new NodeApiError(this.getNode(), error as JsonObject);\n\t}\n}\n\nexport function getToEmailArray(toEmail: string): any {\n\tlet toEmailArray;\n\tif (toEmail.split(',').length > 0) {\n\t\tconst array = toEmail.split(',');\n\t\ttoEmailArray = map(array, (email) => {\n\t\t\treturn {\n\t\t\t\temail,\n\t\t\t\ttype: 'to',\n\t\t\t};\n\t\t});\n\t} else {\n\t\ttoEmailArray = [\n\t\t\t{\n\t\t\t\temail: toEmail,\n\t\t\t\ttype: 'to',\n\t\t\t},\n\t\t];\n\t}\n\treturn toEmailArray;\n}\n\nexport function getGoogleAnalyticsDomainsArray(s: string): string[] {\n\tlet array: string[] = [];\n\tif (s.split(',').length > 0) {\n\t\tarray = s.split(',');\n\t} else {\n\t\tarray = [s];\n\t}\n\treturn array;\n}\n\nexport function getTags(s: string): any[] {\n\tlet array = [];\n\tif (s.split(',').length > 0) {\n\t\tarray = s.split(',');\n\t} else {\n\t\tarray = [s];\n\t}\n\treturn array;\n}\n\nexport function validateJSON(json: string | undefined): any {\n\tlet result;\n\ttry {\n\t\tresult = JSON.parse(json!);\n\t} catch (exception) {\n\t\tresult = [];\n\t}\n\treturn result;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAgB;AAUhB,0BAA6B;AAE7B,eAAsB,mBAErB,UACA,QACA,QAEA,OAAY,CAAC,GACb,SACe;AACf,QAAM,cAAc,MAAM,KAAK,eAAe,aAAa;AAE3D,QAAM,OAAO,OAAO,OAAO,CAAC,GAAG,MAAM,EAAE,KAAK,YAAY,OAAO,CAAC;AAEhE,QAAM,WAAW;AAEjB,QAAM,UAA2B;AAAA,IAChC;AAAA,IACA;AAAA,IACA,KAAK,WAAW,QAAQ,GAAG,QAAQ,GAAG,MAAM;AAAA,IAC5C,MAAM;AAAA,IACN,MAAM;AAAA,EACP;AAEA,MAAI;AACH,WAAO,MAAM,KAAK,QAAQ,QAAQ,OAAO;AAAA,EAC1C,SAAS,OAAO;AACf,UAAM,IAAI,iCAAa,KAAK,QAAQ,GAAG,KAAmB;AAAA,EAC3D;AACD;AAEO,SAAS,gBAAgB,SAAsB;AACrD,MAAI;AACJ,MAAI,QAAQ,MAAM,GAAG,EAAE,SAAS,GAAG;AAClC,UAAM,QAAQ,QAAQ,MAAM,GAAG;AAC/B,uBAAe,WAAAA,SAAI,OAAO,CAAC,UAAU;AACpC,aAAO;AAAA,QACN;AAAA,QACA,MAAM;AAAA,MACP;AAAA,IACD,CAAC;AAAA,EACF,OAAO;AACN,mBAAe;AAAA,MACd;AAAA,QACC,OAAO;AAAA,QACP,MAAM;AAAA,MACP;AAAA,IACD;AAAA,EACD;AACA,SAAO;AACR;AAEO,SAAS,+BAA+B,GAAqB;AACnE,MAAI,QAAkB,CAAC;AACvB,MAAI,EAAE,MAAM,GAAG,EAAE,SAAS,GAAG;AAC5B,YAAQ,EAAE,MAAM,GAAG;AAAA,EACpB,OAAO;AACN,YAAQ,CAAC,CAAC;AAAA,EACX;AACA,SAAO;AACR;AAEO,SAAS,QAAQ,GAAkB;AACzC,MAAI,QAAQ,CAAC;AACb,MAAI,EAAE,MAAM,GAAG,EAAE,SAAS,GAAG;AAC5B,YAAQ,EAAE,MAAM,GAAG;AAAA,EACpB,OAAO;AACN,YAAQ,CAAC,CAAC;AAAA,EACX;AACA,SAAO;AACR;AAEO,SAAS,aAAa,MAA+B;AAC3D,MAAI;AACJ,MAAI;AACH,aAAS,KAAK,MAAM,IAAK;AAAA,EAC1B,SAAS,WAAW;AACnB,aAAS,CAAC;AAAA,EACX;AACA,SAAO;AACR;","names":["map"]}