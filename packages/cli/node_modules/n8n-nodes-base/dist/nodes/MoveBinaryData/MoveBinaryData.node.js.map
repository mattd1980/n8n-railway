{"version":3,"sources":["../../../nodes/MoveBinaryData/MoveBinaryData.node.ts"],"sourcesContent":["import iconv from 'iconv-lite';\nimport get from 'lodash/get';\nimport set from 'lodash/set';\nimport unset from 'lodash/unset';\nimport type {\n\tIExecuteFunctions,\n\tIDataObject,\n\tINodeExecutionData,\n\tINodePropertyOptions,\n\tINodeType,\n\tINodeTypeDescription,\n} from 'n8n-workflow';\nimport {\n\tBINARY_ENCODING,\n\tdeepCopy,\n\tjsonParse,\n\tNodeConnectionTypes,\n\tNodeOperationError,\n} from 'n8n-workflow';\n\niconv.encodingExists('utf8');\n\n// Create options for bomAware and encoding\nconst bomAware: string[] = [];\nconst encodeDecodeOptions: INodePropertyOptions[] = [];\nconst encodings = (iconv as any).encodings;\nObject.keys(encodings as IDataObject).forEach((encoding) => {\n\tif (!(encoding.startsWith('_') || typeof encodings[encoding] === 'string')) {\n\t\t// only encodings without direct alias or internals\n\t\tif (encodings[encoding].bomAware) {\n\t\t\tbomAware.push(encoding);\n\t\t}\n\t\tencodeDecodeOptions.push({ name: encoding, value: encoding });\n\t}\n});\n\nencodeDecodeOptions.sort((a, b) => {\n\tif (a.name < b.name) {\n\t\treturn -1;\n\t}\n\tif (a.name > b.name) {\n\t\treturn 1;\n\t}\n\treturn 0;\n});\n\nexport class MoveBinaryData implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\thidden: true,\n\t\tdisplayName: 'Convert to/from binary data',\n\t\tname: 'moveBinaryData',\n\t\ticon: 'fa:exchange-alt',\n\t\tgroup: ['transform'],\n\t\tversion: [1, 1.1],\n\t\tsubtitle: '={{$parameter[\"mode\"]===\"binaryToJson\" ? \"Binary to JSON\" : \"JSON to Binary\"}}',\n\t\tdescription: 'Move data between binary and JSON properties',\n\t\tdefaults: {\n\t\t\tname: 'Convert to/from binary data',\n\t\t\tcolor: '#7722CC',\n\t\t},\n\t\tinputs: [NodeConnectionTypes.Main],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Mode',\n\t\t\t\tname: 'mode',\n\t\t\t\ttype: 'options',\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Binary to JSON',\n\t\t\t\t\t\tvalue: 'binaryToJson',\n\t\t\t\t\t\tdescription: 'Move data from Binary to JSON',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'JSON to Binary',\n\t\t\t\t\t\tvalue: 'jsonToBinary',\n\t\t\t\t\t\tdescription: 'Move data from JSON to Binary',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'binaryToJson',\n\t\t\t\tdescription: 'From and to where data should be moved',\n\t\t\t},\n\n\t\t\t// ----------------------------------\n\t\t\t//         binaryToJson\n\t\t\t// ----------------------------------\n\t\t\t{\n\t\t\t\tdisplayName: 'Set All Data',\n\t\t\t\tname: 'setAllData',\n\t\t\t\ttype: 'boolean',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tmode: ['binaryToJson'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdefault: true,\n\t\t\t\tdescription:\n\t\t\t\t\t'Whether all JSON data should be replaced with the data retrieved from binary key. Else the data will be written to a single key.',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Source Key',\n\t\t\t\tname: 'sourceKey',\n\t\t\t\ttype: 'string',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tmode: ['binaryToJson'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdefault: 'data',\n\t\t\t\trequired: true,\n\t\t\t\tplaceholder: 'data',\n\t\t\t\tdescription:\n\t\t\t\t\t'The name of the binary key to get data from. It is also possible to define deep keys by using dot-notation like for example: \"level1.level2.currentKey\".',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Destination Key',\n\t\t\t\tname: 'destinationKey',\n\t\t\t\ttype: 'string',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tmode: ['binaryToJson'],\n\t\t\t\t\t\tsetAllData: [false],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdefault: 'data',\n\t\t\t\trequired: true,\n\t\t\t\tplaceholder: '',\n\t\t\t\tdescription:\n\t\t\t\t\t'The name the JSON key to copy data to. It is also possible to define deep keys by using dot-notation like for example: \"level1.level2.newKey\".',\n\t\t\t},\n\n\t\t\t// ----------------------------------\n\t\t\t//         jsonToBinary\n\t\t\t// ----------------------------------\n\t\t\t{\n\t\t\t\tdisplayName: 'Convert All Data',\n\t\t\t\tname: 'convertAllData',\n\t\t\t\ttype: 'boolean',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tmode: ['jsonToBinary'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdefault: true,\n\t\t\t\tdescription:\n\t\t\t\t\t'Whether all JSON data should be converted to binary. Else only the data of one key will be converted.',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Source Key',\n\t\t\t\tname: 'sourceKey',\n\t\t\t\ttype: 'string',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tconvertAllData: [false],\n\t\t\t\t\t\tmode: ['jsonToBinary'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdefault: 'data',\n\t\t\t\trequired: true,\n\t\t\t\tplaceholder: 'data',\n\t\t\t\tdescription:\n\t\t\t\t\t'The name of the JSON key to get data from. It is also possible to define deep keys by using dot-notation like for example: \"level1.level2.currentKey\".',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Destination Key',\n\t\t\t\tname: 'destinationKey',\n\t\t\t\ttype: 'string',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tmode: ['jsonToBinary'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdefault: 'data',\n\t\t\t\trequired: true,\n\t\t\t\tplaceholder: 'data',\n\t\t\t\tdescription:\n\t\t\t\t\t'The name the binary key to copy data to. It is also possible to define deep keys by using dot-notation like for example: \"level1.level2.newKey\".',\n\t\t\t},\n\n\t\t\t{\n\t\t\t\tdisplayName: 'Options',\n\t\t\t\tname: 'options',\n\t\t\t\ttype: 'collection',\n\t\t\t\tplaceholder: 'Add option',\n\t\t\t\tdefault: {},\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Add Byte Order Mark (BOM)',\n\t\t\t\t\t\tname: 'addBOM',\n\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t'Whether to add special marker at the start of your text file. This marker helps some programs understand how to read the file correctly.',\n\t\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\t\t'/mode': ['jsonToBinary'],\n\t\t\t\t\t\t\t\tencoding: bomAware,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\t\tdefault: false,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Data Is Base64',\n\t\t\t\t\t\tname: 'dataIsBase64',\n\t\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\t\thide: {\n\t\t\t\t\t\t\t\tuseRawData: [true],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\t\t'/mode': ['jsonToBinary'],\n\t\t\t\t\t\t\t\t'/convertAllData': [false],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\tdefault: false,\n\t\t\t\t\t\tdescription: 'Whether to keep the binary data as base64 string',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Encoding',\n\t\t\t\t\t\tname: 'encoding',\n\t\t\t\t\t\ttype: 'options',\n\t\t\t\t\t\toptions: encodeDecodeOptions,\n\t\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\t\t'/mode': ['binaryToJson', 'jsonToBinary'],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\tdefault: 'utf8',\n\t\t\t\t\t\tdescription: 'Choose the character set to use to encode the data',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Strip BOM',\n\t\t\t\t\t\tname: 'stripBOM',\n\t\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\t\t'/mode': ['binaryToJson'],\n\t\t\t\t\t\t\t\tencoding: bomAware,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\t\tdefault: true,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'File Name',\n\t\t\t\t\t\tname: 'fileName',\n\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\t\t'/mode': ['jsonToBinary'],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\tplaceholder: 'example.json',\n\t\t\t\t\t\tdescription: 'The file name to set',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'JSON Parse',\n\t\t\t\t\t\tname: 'jsonParse',\n\t\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\t\thide: {\n\t\t\t\t\t\t\t\tkeepAsBase64: [true],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\t\t'/mode': ['binaryToJson'],\n\t\t\t\t\t\t\t\t'/setAllData': [false],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\tdefault: false,\n\t\t\t\t\t\tdescription: 'Whether to run JSON parse on the data to get proper object data',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Keep Source',\n\t\t\t\t\t\tname: 'keepSource',\n\t\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\t\tdefault: false,\n\t\t\t\t\t\tdescription: 'Whether the source key should be kept. By default it will be deleted.',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Keep As Base64',\n\t\t\t\t\t\tname: 'keepAsBase64',\n\t\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\t\thide: {\n\t\t\t\t\t\t\t\tjsonParse: [true],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\t\t'/mode': ['binaryToJson'],\n\t\t\t\t\t\t\t\t'/setAllData': [false],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\tdefault: false,\n\t\t\t\t\t\tdescription: 'Whether to keep the binary data as base64 string',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'MIME Type',\n\t\t\t\t\t\tname: 'mimeType',\n\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\t\t'/mode': ['jsonToBinary'],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\tdefault: 'application/json',\n\t\t\t\t\t\tplaceholder: 'application/json',\n\t\t\t\t\t\tdescription: 'The mime-type to set. By default will the mime-type for JSON be set.',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Use Raw Data',\n\t\t\t\t\t\tname: 'useRawData',\n\t\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\t\thide: {\n\t\t\t\t\t\t\t\tdataIsBase64: [true],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\t\t'/mode': ['jsonToBinary'],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\tdefault: false,\n\t\t\t\t\t\tdescription: 'Whether to use data as is and do not JSON.stringify it',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t],\n\t};\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t\tconst items = this.getInputData();\n\t\tconst mode = this.getNodeParameter('mode', 0) as string;\n\t\tconst returnData: INodeExecutionData[] = [];\n\n\t\tlet item: INodeExecutionData;\n\t\tlet newItem: INodeExecutionData;\n\t\tlet options: IDataObject;\n\t\tfor (let itemIndex = 0; itemIndex < items.length; itemIndex++) {\n\t\t\titem = items[itemIndex];\n\t\t\toptions = this.getNodeParameter('options', itemIndex, {});\n\n\t\t\t// Copy the whole JSON data as data on any level can be renamed\n\t\t\tnewItem = {\n\t\t\t\tjson: {},\n\t\t\t\tpairedItem: {\n\t\t\t\t\titem: itemIndex,\n\t\t\t\t},\n\t\t\t};\n\n\t\t\tif (mode === 'binaryToJson') {\n\t\t\t\tconst setAllData = this.getNodeParameter('setAllData', itemIndex) as boolean;\n\t\t\t\tconst sourceKey = this.getNodeParameter('sourceKey', itemIndex) as string;\n\n\t\t\t\tconst value = get(item.binary, sourceKey);\n\n\t\t\t\tif (value === undefined) {\n\t\t\t\t\t// No data found so skip\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst encoding = (options.encoding as string) || 'utf8';\n\n\t\t\t\tconst buffer = await this.helpers.getBinaryDataBuffer(itemIndex, sourceKey);\n\n\t\t\t\tlet convertedValue: string;\n\n\t\t\t\tif (setAllData) {\n\t\t\t\t\t// Set the full data\n\t\t\t\t\tconvertedValue = iconv.decode(buffer, encoding, {\n\t\t\t\t\t\tstripBOM: options.stripBOM as boolean,\n\t\t\t\t\t});\n\t\t\t\t\tnewItem.json = jsonParse(convertedValue);\n\t\t\t\t} else {\n\t\t\t\t\t// Does get added to existing data so copy it first\n\t\t\t\t\tnewItem.json = deepCopy(item.json);\n\n\t\t\t\t\tif (options.keepAsBase64 !== true) {\n\t\t\t\t\t\tconvertedValue = iconv.decode(buffer, encoding, {\n\t\t\t\t\t\t\tstripBOM: options.stripBOM as boolean,\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconvertedValue = Buffer.from(buffer).toString(BINARY_ENCODING);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (options.jsonParse) {\n\t\t\t\t\t\tconvertedValue = jsonParse(convertedValue);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst destinationKey = this.getNodeParameter('destinationKey', itemIndex, '') as string;\n\t\t\t\t\tset(newItem.json, destinationKey, convertedValue);\n\t\t\t\t}\n\n\t\t\t\tif (options.keepSource === true) {\n\t\t\t\t\t// Binary data does not get touched so simply reference it\n\t\t\t\t\tnewItem.binary = item.binary;\n\t\t\t\t} else {\n\t\t\t\t\t// Binary data will change so copy it\n\t\t\t\t\tnewItem.binary = deepCopy(item.binary);\n\t\t\t\t\tunset(newItem.binary, sourceKey);\n\t\t\t\t}\n\t\t\t} else if (mode === 'jsonToBinary') {\n\t\t\t\tconst convertAllData = this.getNodeParameter('convertAllData', itemIndex) as boolean;\n\t\t\t\tconst destinationKey = this.getNodeParameter('destinationKey', itemIndex) as string;\n\n\t\t\t\tconst encoding = (options.encoding as string) || 'utf8';\n\t\t\t\tlet value: IDataObject | string = item.json;\n\t\t\t\tif (!convertAllData) {\n\t\t\t\t\tconst sourceKey = this.getNodeParameter('sourceKey', itemIndex) as string;\n\t\t\t\t\tvalue = get(item.json, sourceKey) as IDataObject;\n\t\t\t\t}\n\n\t\t\t\tif (value === undefined) {\n\t\t\t\t\t// No data found so skip\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (item.binary !== undefined) {\n\t\t\t\t\t// Item already has binary data so copy it\n\t\t\t\t\tnewItem.binary = deepCopy(item.binary);\n\t\t\t\t} else {\n\t\t\t\t\t// Item does not have binary data yet so initialize empty\n\t\t\t\t\tnewItem.binary = {};\n\t\t\t\t}\n\n\t\t\t\tconst nodeVersion = this.getNode().typeVersion;\n\t\t\t\tlet mimeType = options.mimeType as string;\n\n\t\t\t\tlet data: Buffer;\n\t\t\t\tif (options.dataIsBase64 !== true) {\n\t\t\t\t\tif (options.useRawData !== true || typeof value === 'object') {\n\t\t\t\t\t\tvalue = JSON.stringify(value);\n\n\t\t\t\t\t\tif (!mimeType) {\n\t\t\t\t\t\t\tmimeType = 'application/json';\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tdata = iconv.encode(value, encoding, { addBOM: options.addBOM as boolean });\n\t\t\t\t} else {\n\t\t\t\t\tdata = Buffer.from(value as unknown as string, BINARY_ENCODING);\n\t\t\t\t}\n\n\t\t\t\tif (!mimeType && nodeVersion === 1) {\n\t\t\t\t\tmimeType = 'application/json';\n\t\t\t\t}\n\n\t\t\t\tconst convertedValue = await this.helpers.prepareBinaryData(\n\t\t\t\t\tdata,\n\t\t\t\t\toptions.fileName as string,\n\t\t\t\t\tmimeType,\n\t\t\t\t);\n\n\t\t\t\tif (!convertedValue.fileName && nodeVersion > 1) {\n\t\t\t\t\tconst fileExtension = convertedValue.fileExtension\n\t\t\t\t\t\t? `.${convertedValue.fileExtension}`\n\t\t\t\t\t\t: '';\n\t\t\t\t\tconvertedValue.fileName = `file${fileExtension}`;\n\t\t\t\t}\n\n\t\t\t\tset(newItem.binary, destinationKey, convertedValue);\n\n\t\t\t\tif (options.keepSource === true) {\n\t\t\t\t\t// JSON data does not get touched so simply reference it\n\t\t\t\t\tnewItem.json = item.json;\n\t\t\t\t} else {\n\t\t\t\t\t// JSON data will change so copy it\n\n\t\t\t\t\tif (convertAllData) {\n\t\t\t\t\t\t// Data should not be kept and all data got converted. So simply set new as empty\n\t\t\t\t\t\tnewItem.json = {};\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Data should not be kept and only one key has to get removed. So copy all\n\t\t\t\t\t\t// data and then remove the not needed one\n\t\t\t\t\t\tnewItem.json = deepCopy(item.json);\n\t\t\t\t\t\tconst sourceKey = this.getNodeParameter('sourceKey', itemIndex) as string;\n\n\t\t\t\t\t\tunset(newItem.json, sourceKey);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthrow new NodeOperationError(this.getNode(), `The operation \"${mode}\" is not known!`, {\n\t\t\t\t\titemIndex,\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturnData.push(newItem);\n\t\t}\n\n\t\treturn [returnData];\n\t}\n}\n"],"mappings":"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","names":["iconv","get","set","unset"]}