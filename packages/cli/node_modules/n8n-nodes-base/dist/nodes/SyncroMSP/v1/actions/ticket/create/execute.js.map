{"version":3,"sources":["../../../../../../../nodes/SyncroMSP/v1/actions/ticket/create/execute.ts"],"sourcesContent":["import type { IExecuteFunctions, IDataObject, INodeExecutionData } from 'n8n-workflow';\n\nimport { apiRequest } from '../../../transport';\n\nexport async function createTicket(\n\tthis: IExecuteFunctions,\n\tindex: number,\n): Promise<INodeExecutionData[]> {\n\tconst id = this.getNodeParameter('customerId', index) as IDataObject;\n\tconst subject = this.getNodeParameter('subject', index) as IDataObject;\n\tconst { assetId, issueType, status, contactId } = this.getNodeParameter(\n\t\t'additionalFields',\n\t\tindex,\n\t);\n\n\tconst qs = {} as IDataObject;\n\tconst requestMethod = 'POST';\n\tconst endpoint = 'tickets';\n\tlet body = {} as IDataObject;\n\n\tbody = {\n\t\tasset_id: assetId,\n\t\t//due_date: dueDate,\n\t\tproblem_type: issueType,\n\t\tstatus,\n\t\tcontact_id: contactId,\n\t};\n\n\tbody.customer_id = id;\n\tbody.subject = subject;\n\n\tconst responseData = await apiRequest.call(this, requestMethod, endpoint, body, qs);\n\n\treturn this.helpers.returnJsonArray(responseData.ticket as IDataObject[]);\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,uBAA2B;AAE3B,eAAsB,aAErB,OACgC;AAChC,QAAM,KAAK,KAAK,iBAAiB,cAAc,KAAK;AACpD,QAAM,UAAU,KAAK,iBAAiB,WAAW,KAAK;AACtD,QAAM,EAAE,SAAS,WAAW,QAAQ,UAAU,IAAI,KAAK;AAAA,IACtD;AAAA,IACA;AAAA,EACD;AAEA,QAAM,KAAK,CAAC;AACZ,QAAM,gBAAgB;AACtB,QAAM,WAAW;AACjB,MAAI,OAAO,CAAC;AAEZ,SAAO;AAAA,IACN,UAAU;AAAA;AAAA,IAEV,cAAc;AAAA,IACd;AAAA,IACA,YAAY;AAAA,EACb;AAEA,OAAK,cAAc;AACnB,OAAK,UAAU;AAEf,QAAM,eAAe,MAAM,4BAAW,KAAK,MAAM,eAAe,UAAU,MAAM,EAAE;AAElF,SAAO,KAAK,QAAQ,gBAAgB,aAAa,MAAuB;AACzE;","names":[]}