{"version":3,"sources":["../../../../../nodes/SyncroMSP/v1/actions/router.ts"],"sourcesContent":["import type { IExecuteFunctions, INodeExecutionData, JsonObject } from 'n8n-workflow';\nimport { NodeApiError } from 'n8n-workflow';\n\nimport * as contact from './contact';\nimport * as customer from './customer';\nimport type { SyncroMsp } from './Interfaces';\nimport * as rmm from './rmm';\nimport * as ticket from './ticket';\n\nexport async function router(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\tconst items = this.getInputData();\n\tconst operationResult: INodeExecutionData[] = [];\n\n\tfor (let i = 0; i < items.length; i++) {\n\t\tconst resource = this.getNodeParameter<SyncroMsp>('resource', i);\n\t\tlet operation = this.getNodeParameter('operation', i);\n\t\tlet responseData: INodeExecutionData[] = [];\n\t\tif (operation === 'del') {\n\t\t\toperation = 'delete';\n\t\t}\n\n\t\tconst syncroMsp = {\n\t\t\tresource,\n\t\t\toperation,\n\t\t} as SyncroMsp;\n\n\t\ttry {\n\t\t\tif (syncroMsp.resource === 'customer') {\n\t\t\t\tresponseData = await customer[syncroMsp.operation].execute.call(this, i);\n\t\t\t} else if (syncroMsp.resource === 'ticket') {\n\t\t\t\tresponseData = await ticket[syncroMsp.operation].execute.call(this, i);\n\t\t\t} else if (syncroMsp.resource === 'contact') {\n\t\t\t\tresponseData = await contact[syncroMsp.operation].execute.call(this, i);\n\t\t\t} else if (syncroMsp.resource === 'rmm') {\n\t\t\t\tresponseData = await rmm[syncroMsp.operation].execute.call(this, i);\n\t\t\t}\n\n\t\t\tconst executionData = this.helpers.constructExecutionMetaData(responseData, {\n\t\t\t\titemData: { item: i },\n\t\t\t});\n\n\t\t\toperationResult.push(...executionData);\n\t\t} catch (err) {\n\t\t\tif (this.continueOnFail()) {\n\t\t\t\tconst executionErrorData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\tthis.helpers.returnJsonArray({ error: err.message }),\n\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t);\n\t\t\t\toperationResult.push(...executionErrorData);\n\t\t\t} else {\n\t\t\t\tthrow new NodeApiError(this.getNode(), err as JsonObject, { itemIndex: i });\n\t\t\t}\n\t\t}\n\t}\n\n\treturn [operationResult];\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,0BAA6B;AAE7B,cAAyB;AACzB,eAA0B;AAE1B,UAAqB;AACrB,aAAwB;AAExB,eAAsB,SAAiE;AACtF,QAAM,QAAQ,KAAK,aAAa;AAChC,QAAM,kBAAwC,CAAC;AAE/C,WAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACtC,UAAM,WAAW,KAAK,iBAA4B,YAAY,CAAC;AAC/D,QAAI,YAAY,KAAK,iBAAiB,aAAa,CAAC;AACpD,QAAI,eAAqC,CAAC;AAC1C,QAAI,cAAc,OAAO;AACxB,kBAAY;AAAA,IACb;AAEA,UAAM,YAAY;AAAA,MACjB;AAAA,MACA;AAAA,IACD;AAEA,QAAI;AACH,UAAI,UAAU,aAAa,YAAY;AACtC,uBAAe,MAAM,SAAS,UAAU,SAAS,EAAE,QAAQ,KAAK,MAAM,CAAC;AAAA,MACxE,WAAW,UAAU,aAAa,UAAU;AAC3C,uBAAe,MAAM,OAAO,UAAU,SAAS,EAAE,QAAQ,KAAK,MAAM,CAAC;AAAA,MACtE,WAAW,UAAU,aAAa,WAAW;AAC5C,uBAAe,MAAM,QAAQ,UAAU,SAAS,EAAE,QAAQ,KAAK,MAAM,CAAC;AAAA,MACvE,WAAW,UAAU,aAAa,OAAO;AACxC,uBAAe,MAAM,IAAI,UAAU,SAAS,EAAE,QAAQ,KAAK,MAAM,CAAC;AAAA,MACnE;AAEA,YAAM,gBAAgB,KAAK,QAAQ,2BAA2B,cAAc;AAAA,QAC3E,UAAU,EAAE,MAAM,EAAE;AAAA,MACrB,CAAC;AAED,sBAAgB,KAAK,GAAG,aAAa;AAAA,IACtC,SAAS,KAAK;AACb,UAAI,KAAK,eAAe,GAAG;AAC1B,cAAM,qBAAqB,KAAK,QAAQ;AAAA,UACvC,KAAK,QAAQ,gBAAgB,EAAE,OAAO,IAAI,QAAQ,CAAC;AAAA,UACnD,EAAE,UAAU,EAAE,MAAM,EAAE,EAAE;AAAA,QACzB;AACA,wBAAgB,KAAK,GAAG,kBAAkB;AAAA,MAC3C,OAAO;AACN,cAAM,IAAI,iCAAa,KAAK,QAAQ,GAAG,KAAmB,EAAE,WAAW,EAAE,CAAC;AAAA,MAC3E;AAAA,IACD;AAAA,EACD;AAEA,SAAO,CAAC,eAAe;AACxB;","names":[]}