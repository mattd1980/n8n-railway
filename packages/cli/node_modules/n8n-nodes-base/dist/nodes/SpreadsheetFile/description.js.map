{"version":3,"sources":["../../../nodes/SpreadsheetFile/description.ts"],"sourcesContent":["import type { INodeProperties } from 'n8n-workflow';\n\nexport const operationProperty: INodeProperties = {\n\tdisplayName: 'Operation',\n\tname: 'operation',\n\ttype: 'options',\n\tnoDataExpression: true,\n\toptions: [\n\t\t{\n\t\t\tname: 'Read From File',\n\t\t\tvalue: 'fromFile',\n\t\t\tdescription: 'Reads data from a spreadsheet file',\n\t\t\taction: 'Read data from a spreadsheet file',\n\t\t},\n\t\t{\n\t\t\tname: 'Write to File',\n\t\t\tvalue: 'toFile',\n\t\t\tdescription: 'Writes the workflow data to a spreadsheet file',\n\t\t\taction: 'Write data to a spreadsheet file',\n\t\t},\n\t],\n\tdefault: 'fromFile',\n};\n\nexport const binaryProperty: INodeProperties = {\n\tdisplayName: 'Input Binary Field',\n\tname: 'binaryPropertyName',\n\ttype: 'string',\n\tdefault: 'data',\n\trequired: true,\n\tplaceholder: '',\n\thint: 'The name of the input field containing the file data to be processed',\n\tdisplayOptions: {\n\t\tshow: {\n\t\t\toperation: ['fromFile'],\n\t\t},\n\t},\n};\n\nexport const toFileProperties: INodeProperties[] = [\n\t{\n\t\tdisplayName: 'File Format',\n\t\tname: 'fileFormat',\n\t\ttype: 'options',\n\t\toptions: [\n\t\t\t{\n\t\t\t\tname: 'CSV',\n\t\t\t\tvalue: 'csv',\n\t\t\t\tdescription: 'Comma-separated values',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'HTML',\n\t\t\t\tvalue: 'html',\n\t\t\t\tdescription: 'HTML Table',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'ODS',\n\t\t\t\tvalue: 'ods',\n\t\t\t\tdescription: 'OpenDocument Spreadsheet',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'RTF',\n\t\t\t\tvalue: 'rtf',\n\t\t\t\tdescription: 'Rich Text Format',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'XLS',\n\t\t\t\tvalue: 'xls',\n\t\t\t\tdescription: 'Excel',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'XLSX',\n\t\t\t\tvalue: 'xlsx',\n\t\t\t\tdescription: 'Excel',\n\t\t\t},\n\t\t],\n\t\tdefault: 'xls',\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\toperation: ['toFile'],\n\t\t\t},\n\t\t},\n\t\tdescription: 'The format of the file to save the data as',\n\t},\n\t{\n\t\tdisplayName: 'Put Output File in Field',\n\t\tname: 'binaryPropertyName',\n\t\ttype: 'string',\n\t\tdefault: 'data',\n\t\trequired: true,\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\toperation: ['toFile'],\n\t\t\t},\n\t\t},\n\t\tplaceholder: '',\n\t\thint: 'The name of the output binary field to put the file in',\n\t},\n];\n\nexport const toFileOptions: INodeProperties = {\n\tdisplayName: 'Options',\n\tname: 'options',\n\ttype: 'collection',\n\tplaceholder: 'Add option',\n\tdefault: {},\n\tdisplayOptions: {\n\t\tshow: {\n\t\t\toperation: ['toFile'],\n\t\t},\n\t},\n\toptions: [\n\t\t{\n\t\t\tdisplayName: 'Compression',\n\t\t\tname: 'compression',\n\t\t\ttype: 'boolean',\n\t\t\tdisplayOptions: {\n\t\t\t\tshow: {\n\t\t\t\t\t'/fileFormat': ['xlsx', 'ods'],\n\t\t\t\t},\n\t\t\t},\n\t\t\tdefault: false,\n\t\t\tdescription: 'Whether compression will be applied or not',\n\t\t},\n\t\t{\n\t\t\tdisplayName: 'File Name',\n\t\t\tname: 'fileName',\n\t\t\ttype: 'string',\n\t\t\tdefault: '',\n\t\t\tdescription:\n\t\t\t\t'File name to set in binary data. By default will \"spreadsheet.&lt;fileFormat&gt;\" be used.',\n\t\t},\n\t\t{\n\t\t\tdisplayName: 'Header Row',\n\t\t\tname: 'headerRow',\n\t\t\ttype: 'boolean',\n\t\t\tdefault: true,\n\t\t\tdescription: 'Whether the first row of the file contains the header names',\n\t\t},\n\t\t{\n\t\t\tdisplayName: 'Sheet Name',\n\t\t\tname: 'sheetName',\n\t\t\ttype: 'string',\n\t\t\tdisplayOptions: {\n\t\t\t\tshow: {\n\t\t\t\t\t'/fileFormat': ['ods', 'xls', 'xlsx'],\n\t\t\t\t},\n\t\t\t},\n\t\t\tdefault: 'Sheet',\n\t\t\tdescription: 'Name of the sheet to create in the spreadsheet',\n\t\t},\n\t],\n};\n\nexport const fromFileOptions: INodeProperties = {\n\tdisplayName: 'Options',\n\tname: 'options',\n\ttype: 'collection',\n\tplaceholder: 'Add option',\n\tdefault: {},\n\tdisplayOptions: {\n\t\tshow: {\n\t\t\toperation: ['fromFile'],\n\t\t},\n\t},\n\toptions: [\n\t\t{\n\t\t\tdisplayName: 'Delimiter',\n\t\t\tname: 'delimiter',\n\t\t\ttype: 'string',\n\t\t\tdisplayOptions: {\n\t\t\t\tshow: {\n\t\t\t\t\t'/fileFormat': ['csv'],\n\t\t\t\t},\n\t\t\t},\n\t\t\tdefault: ',',\n\t\t\tplaceholder: 'e.g. ,',\n\t\t\tdescription: 'Set the field delimiter, usually a comma',\n\t\t},\n\t\t{\n\t\t\tdisplayName: 'Encoding',\n\t\t\tname: 'encoding',\n\t\t\ttype: 'options',\n\t\t\tdisplayOptions: {\n\t\t\t\tshow: {\n\t\t\t\t\t'/fileFormat': ['csv'],\n\t\t\t\t},\n\t\t\t},\n\t\t\toptions: [\n\t\t\t\t{ name: 'ASCII', value: 'ascii' },\n\t\t\t\t{ name: 'Latin1', value: 'latin1' },\n\t\t\t\t{ name: 'UCS-2', value: 'ucs-2' },\n\t\t\t\t{ name: 'UCS2', value: 'ucs2' },\n\t\t\t\t{ name: 'UTF-8', value: 'utf-8' },\n\t\t\t\t{ name: 'UTF16LE', value: 'utf16le' },\n\t\t\t\t{ name: 'UTF8', value: 'utf8' },\n\t\t\t],\n\t\t\tdefault: 'utf-8',\n\t\t},\n\t\t{\n\t\t\tdisplayName: 'Exclude Byte Order Mark (BOM)',\n\t\t\tname: 'enableBOM',\n\t\t\ttype: 'boolean',\n\t\t\tdisplayOptions: {\n\t\t\t\tshow: {\n\t\t\t\t\t'/fileFormat': ['csv'],\n\t\t\t\t},\n\t\t\t},\n\t\t\tdefault: false,\n\t\t\tdescription:\n\t\t\t\t'Whether to detect and exclude the byte-order-mark from the CSV Input if present',\n\t\t},\n\t\t{\n\t\t\tdisplayName: 'Preserve Quotes',\n\t\t\tname: 'relaxQuotes',\n\t\t\ttype: 'boolean',\n\t\t\tdisplayOptions: {\n\t\t\t\tshow: {\n\t\t\t\t\t'/fileFormat': ['csv'],\n\t\t\t\t},\n\t\t\t},\n\t\t\tdefault: false,\n\t\t\tdescription:\n\t\t\t\t\"Whether to handle unclosed quotes in CSV fields as part of the field's content instead of throwing a parsing error\",\n\t\t},\n\t\t{\n\t\t\tdisplayName: 'Header Row',\n\t\t\tname: 'headerRow',\n\t\t\ttype: 'boolean',\n\t\t\tdefault: true,\n\t\t\tdescription: 'Whether the first row of the file contains the header names',\n\t\t},\n\t\t{\n\t\t\tdisplayName: 'Include Empty Cells',\n\t\t\tname: 'includeEmptyCells',\n\t\t\ttype: 'boolean',\n\t\t\tdefault: false,\n\t\t\tdescription:\n\t\t\t\t'Whether to include empty cells when reading from file. They will be filled with an empty string.',\n\t\t},\n\t\t{\n\t\t\tdisplayName: 'Max Number of Rows to Load',\n\t\t\tname: 'maxRowCount',\n\t\t\ttype: 'number',\n\t\t\tdisplayOptions: {\n\t\t\t\tshow: {\n\t\t\t\t\t'/fileFormat': ['csv'],\n\t\t\t\t},\n\t\t\t},\n\t\t\tdefault: -1,\n\t\t\tplaceholder: 'e.g. 10',\n\t\t\tdescription:\n\t\t\t\t'Stop handling records after the requested number of rows are read. Use -1 if you want to load all rows.',\n\t\t},\n\t\t{\n\t\t\tdisplayName: 'Range',\n\t\t\tname: 'range',\n\t\t\ttype: 'string',\n\t\t\tdefault: '',\n\t\t\tdescription:\n\t\t\t\t'The range to read from the table. If set to a number it will be the starting row. If set to string it will be used as A1-style notation range.',\n\t\t},\n\t\t{\n\t\t\tdisplayName: 'RAW Data',\n\t\t\tname: 'rawData',\n\t\t\ttype: 'boolean',\n\t\t\tdefault: false,\n\t\t\tdescription: 'Whether to return RAW data, instead of parsing it',\n\t\t},\n\t\t{\n\t\t\tdisplayName: 'Read As String',\n\t\t\tname: 'readAsString',\n\t\t\ttype: 'boolean',\n\t\t\tdefault: false,\n\t\t\t// eslint-disable-next-line n8n-nodes-base/node-param-description-boolean-without-whether\n\t\t\tdescription:\n\t\t\t\t'In some cases and file formats, it is necessary to read as string to ensure special characters are interpreted correctly',\n\t\t},\n\t\t{\n\t\t\tdisplayName: 'Sheet Name',\n\t\t\tname: 'sheetName',\n\t\t\ttype: 'string',\n\t\t\tdefault: 'Sheet',\n\t\t\tplaceholder: 'e.g. mySheet',\n\t\t\tdescription:\n\t\t\t\t'Name of the sheet to read from in the spreadsheet (if supported). If not set, the first one will be chosen.',\n\t\t},\n\t\t{\n\t\t\tdisplayName: 'Starting Line',\n\t\t\tname: 'fromLine',\n\t\t\ttype: 'number',\n\t\t\tdisplayOptions: {\n\t\t\t\tshow: {\n\t\t\t\t\t'/fileFormat': ['csv'],\n\t\t\t\t},\n\t\t\t},\n\t\t\tdefault: 0,\n\t\t\tplaceholder: 'e.g. 0',\n\t\t\tdescription: 'Start handling records from the requested line number. Starts at 0.',\n\t\t},\n\t],\n};\n"],"mappings":"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","names":[]}