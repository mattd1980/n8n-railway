{"version":3,"sources":["../../../../nodes/SpreadsheetFile/v1/SpreadsheetFileV1.node.ts"],"sourcesContent":["import type {\n\tIDataObject,\n\tIExecuteFunctions,\n\tINodeExecutionData,\n\tINodeType,\n\tINodeTypeBaseDescription,\n\tINodeTypeDescription,\n} from 'n8n-workflow';\nimport { BINARY_ENCODING, NodeConnectionTypes, NodeOperationError } from 'n8n-workflow';\nimport type {\n\tJSON2SheetOpts,\n\tParsingOptions,\n\tSheet2JSONOpts,\n\tWorkBook,\n\tWritingOptions,\n} from 'xlsx';\nimport {\n\tread as xlsxRead,\n\treadFile as xlsxReadFile,\n\tutils as xlsxUtils,\n\twrite as xlsxWrite,\n} from 'xlsx';\n\nimport { oldVersionNotice } from '@utils/descriptions';\nimport { flattenObject, generatePairedItemData } from '@utils/utilities';\n\nimport {\n\toperationProperty,\n\tbinaryProperty,\n\ttoFileProperties,\n\tfromFileOptions,\n\ttoFileOptions,\n} from '../description';\n\nexport class SpreadsheetFileV1 implements INodeType {\n\tdescription: INodeTypeDescription;\n\n\tconstructor(baseDescription: INodeTypeBaseDescription) {\n\t\tthis.description = {\n\t\t\t...baseDescription,\n\t\t\tversion: 1,\n\t\t\tdefaults: {\n\t\t\t\tname: 'Spreadsheet File',\n\t\t\t\tcolor: '#2244FF',\n\t\t\t},\n\t\t\tinputs: [NodeConnectionTypes.Main],\n\t\t\toutputs: [NodeConnectionTypes.Main],\n\t\t\tproperties: [\n\t\t\t\toldVersionNotice,\n\t\t\t\toperationProperty,\n\t\t\t\tbinaryProperty,\n\t\t\t\t...toFileProperties,\n\t\t\t\tfromFileOptions,\n\t\t\t\ttoFileOptions,\n\t\t\t],\n\t\t};\n\t}\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t\tconst items = this.getInputData();\n\t\tconst pairedItem = generatePairedItemData(items.length);\n\n\t\tconst operation = this.getNodeParameter('operation', 0);\n\n\t\tconst newItems: INodeExecutionData[] = [];\n\n\t\tif (operation === 'fromFile') {\n\t\t\t// Read data from spreadsheet file to workflow\n\t\t\tfor (let i = 0; i < items.length; i++) {\n\t\t\t\ttry {\n\t\t\t\t\tconst binaryPropertyName = this.getNodeParameter('binaryPropertyName', i);\n\t\t\t\t\tconst options = this.getNodeParameter('options', i, {});\n\t\t\t\t\tconst binaryData = this.helpers.assertBinaryData(i, binaryPropertyName);\n\n\t\t\t\t\t// Read the binary spreadsheet data\n\t\t\t\t\tlet workbook: WorkBook;\n\t\t\t\t\tconst xlsxOptions: ParsingOptions = { raw: options.rawData as boolean };\n\t\t\t\t\tif (options.readAsString) xlsxOptions.type = 'string';\n\n\t\t\t\t\tif (binaryData.id) {\n\t\t\t\t\t\tconst binaryPath = this.helpers.getBinaryPath(binaryData.id);\n\t\t\t\t\t\txlsxOptions.codepage = 65001; // utf8 codepage\n\t\t\t\t\t\tworkbook = xlsxReadFile(binaryPath, xlsxOptions);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst binaryDataBuffer = Buffer.from(binaryData.data, BINARY_ENCODING);\n\t\t\t\t\t\tworkbook = xlsxRead(\n\t\t\t\t\t\t\toptions.readAsString ? binaryDataBuffer.toString() : binaryDataBuffer,\n\t\t\t\t\t\t\txlsxOptions,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (workbook.SheetNames.length === 0) {\n\t\t\t\t\t\tthrow new NodeOperationError(this.getNode(), 'Spreadsheet does not have any sheets!', {\n\t\t\t\t\t\t\titemIndex: i,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\tlet sheetName = workbook.SheetNames[0];\n\t\t\t\t\tif (options.sheetName) {\n\t\t\t\t\t\tif (!workbook.SheetNames.includes(options.sheetName as string)) {\n\t\t\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t\t\t`Spreadsheet does not contain sheet called \"${options.sheetName}\"!`,\n\t\t\t\t\t\t\t\t{ itemIndex: i },\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tsheetName = options.sheetName as string;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Convert it to json\n\t\t\t\t\tconst sheetToJsonOptions: Sheet2JSONOpts = {};\n\t\t\t\t\tif (options.range) {\n\t\t\t\t\t\tif (isNaN(options.range as number)) {\n\t\t\t\t\t\t\tsheetToJsonOptions.range = options.range;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tsheetToJsonOptions.range = parseInt(options.range as string, 10);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (options.includeEmptyCells) {\n\t\t\t\t\t\tsheetToJsonOptions.defval = '';\n\t\t\t\t\t}\n\t\t\t\t\tif (options.headerRow === false) {\n\t\t\t\t\t\tsheetToJsonOptions.header = 1; // Consider the first row as a data row\n\t\t\t\t\t}\n\n\t\t\t\t\tconst sheetJson = xlsxUtils.sheet_to_json(workbook.Sheets[sheetName], sheetToJsonOptions);\n\n\t\t\t\t\t// Check if data could be found in file\n\t\t\t\t\tif (sheetJson.length === 0) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Add all the found data columns to the workflow data\n\t\t\t\t\tif (options.headerRow === false) {\n\t\t\t\t\t\t// Data was returned as an array - https://github.com/SheetJS/sheetjs#json\n\t\t\t\t\t\tfor (const rowData of sheetJson) {\n\t\t\t\t\t\t\tnewItems.push({\n\t\t\t\t\t\t\t\tjson: {\n\t\t\t\t\t\t\t\t\trow: rowData,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tpairedItem: {\n\t\t\t\t\t\t\t\t\titem: i,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t} as INodeExecutionData);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfor (const rowData of sheetJson) {\n\t\t\t\t\t\t\tnewItems.push({\n\t\t\t\t\t\t\t\tjson: rowData,\n\t\t\t\t\t\t\t\tpairedItem: {\n\t\t\t\t\t\t\t\t\titem: i,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t} as INodeExecutionData);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\t\tnewItems.push({\n\t\t\t\t\t\t\tjson: {\n\t\t\t\t\t\t\t\terror: error.message,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tpairedItem: {\n\t\t\t\t\t\t\t\titem: i,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t});\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn [newItems];\n\t\t} else if (operation === 'toFile') {\n\t\t\ttry {\n\t\t\t\t// Write the workflow data to spreadsheet file\n\t\t\t\tconst binaryPropertyName = this.getNodeParameter('binaryPropertyName', 0);\n\t\t\t\tconst fileFormat = this.getNodeParameter('fileFormat', 0) as string;\n\t\t\t\tconst options = this.getNodeParameter('options', 0, {});\n\t\t\t\tconst sheetToJsonOptions: JSON2SheetOpts = {};\n\t\t\t\tif (options.headerRow === false) {\n\t\t\t\t\tsheetToJsonOptions.skipHeader = true;\n\t\t\t\t}\n\t\t\t\t// Get the json data of the items and flatten it\n\t\t\t\tlet item: INodeExecutionData;\n\t\t\t\tconst itemData: IDataObject[] = [];\n\t\t\t\tfor (let itemIndex = 0; itemIndex < items.length; itemIndex++) {\n\t\t\t\t\titem = items[itemIndex];\n\t\t\t\t\titemData.push(flattenObject(item.json));\n\t\t\t\t}\n\n\t\t\t\tconst ws = xlsxUtils.json_to_sheet(itemData, sheetToJsonOptions);\n\n\t\t\t\tconst wopts: WritingOptions = {\n\t\t\t\t\tbookSST: false,\n\t\t\t\t\ttype: 'buffer',\n\t\t\t\t};\n\n\t\t\t\tif (fileFormat === 'csv') {\n\t\t\t\t\twopts.bookType = 'csv';\n\t\t\t\t} else if (fileFormat === 'html') {\n\t\t\t\t\twopts.bookType = 'html';\n\t\t\t\t} else if (fileFormat === 'rtf') {\n\t\t\t\t\twopts.bookType = 'rtf';\n\t\t\t\t} else if (fileFormat === 'ods') {\n\t\t\t\t\twopts.bookType = 'ods';\n\t\t\t\t\tif (options.compression) {\n\t\t\t\t\t\twopts.compression = true;\n\t\t\t\t\t}\n\t\t\t\t} else if (fileFormat === 'xls') {\n\t\t\t\t\twopts.bookType = 'xls';\n\t\t\t\t} else if (fileFormat === 'xlsx') {\n\t\t\t\t\twopts.bookType = 'xlsx';\n\t\t\t\t\tif (options.compression) {\n\t\t\t\t\t\twopts.compression = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Convert the data in the correct format\n\t\t\t\tconst sheetName = (options.sheetName as string) || 'Sheet';\n\t\t\t\tconst wb: WorkBook = {\n\t\t\t\t\tSheetNames: [sheetName],\n\t\t\t\t\tSheets: {\n\t\t\t\t\t\t[sheetName]: ws,\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t\tconst wbout: Buffer = xlsxWrite(wb, wopts);\n\n\t\t\t\t// Create a new item with only the binary spreadsheet data\n\t\t\t\tconst newItem: INodeExecutionData = {\n\t\t\t\t\tjson: {},\n\t\t\t\t\tbinary: {},\n\t\t\t\t\tpairedItem,\n\t\t\t\t};\n\n\t\t\t\tlet fileName = `spreadsheet.${fileFormat}`;\n\t\t\t\tif (options.fileName !== undefined) {\n\t\t\t\t\tfileName = options.fileName as string;\n\t\t\t\t}\n\n\t\t\t\tnewItem.binary![binaryPropertyName] = await this.helpers.prepareBinaryData(wbout, fileName);\n\n\t\t\t\tnewItems.push(newItem);\n\t\t\t} catch (error) {\n\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\tnewItems.push({\n\t\t\t\t\t\tjson: {\n\t\t\t\t\t\t\terror: error.message,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tpairedItem,\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tif (this.continueOnFail()) {\n\t\t\t\treturn [[{ json: { error: `The operation \"${operation}\" is not supported!` } }]];\n\t\t\t} else {\n\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t`The operation \"${operation}\" is not supported!`,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn [newItems];\n\t}\n}\n"],"mappings":"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","names":["xlsxReadFile","xlsxRead","xlsxUtils","xlsxWrite"]}