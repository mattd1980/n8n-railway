{"version":3,"sources":["../../../nodes/RssFeedRead/RssFeedReadTrigger.node.ts"],"sourcesContent":["import moment from 'moment-timezone';\nimport type {\n\tIDataObject,\n\tINodeExecutionData,\n\tINodeType,\n\tINodeTypeDescription,\n\tIPollFunctions,\n} from 'n8n-workflow';\nimport { NodeConnectionTypes, NodeOperationError } from 'n8n-workflow';\nimport Parser from 'rss-parser';\n\ninterface PollData {\n\tlastItemDate?: string;\n\tlastTimeChecked?: string;\n}\n\nexport class RssFeedReadTrigger implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'RSS Feed Trigger',\n\t\tname: 'rssFeedReadTrigger',\n\t\ticon: 'fa:rss',\n\t\ticonColor: 'orange-red',\n\t\tgroup: ['trigger'],\n\t\tversion: 1,\n\t\tdescription: 'Starts a workflow when an RSS feed is updated',\n\t\tsubtitle: '={{$parameter[\"event\"]}}',\n\t\tdefaults: {\n\t\t\tname: 'RSS Feed Trigger',\n\t\t\tcolor: '#b02020',\n\t\t},\n\t\tpolling: true,\n\t\tinputs: [],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Feed URL',\n\t\t\t\tname: 'feedUrl',\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: 'https://blog.n8n.io/rss/',\n\t\t\t\trequired: true,\n\t\t\t\tdescription: 'URL of the RSS feed to poll',\n\t\t\t},\n\t\t],\n\t};\n\n\tasync poll(this: IPollFunctions): Promise<INodeExecutionData[][] | null> {\n\t\tconst pollData = this.getWorkflowStaticData('node') as PollData;\n\t\tconst feedUrl = this.getNodeParameter('feedUrl') as string;\n\n\t\tconst dateToCheck = Date.parse(\n\t\t\tpollData.lastItemDate ?? pollData.lastTimeChecked ?? moment().utc().format(),\n\t\t);\n\n\t\tif (!feedUrl) {\n\t\t\tthrow new NodeOperationError(this.getNode(), 'The parameter \"URL\" has to be set!');\n\t\t}\n\n\t\tconst parser = new Parser();\n\n\t\tlet feed: Parser.Output<IDataObject>;\n\t\ttry {\n\t\t\tfeed = await parser.parseURL(feedUrl);\n\t\t} catch (error) {\n\t\t\tif (error.code === 'ECONNREFUSED') {\n\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t`It was not possible to connect to the URL. Please make sure the URL \"${feedUrl}\" it is valid!`,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tthrow new NodeOperationError(this.getNode(), error as Error);\n\t\t}\n\n\t\tconst returnData: IDataObject[] = [];\n\n\t\tif (feed.items) {\n\t\t\tif (this.getMode() === 'manual') {\n\t\t\t\treturn [this.helpers.returnJsonArray(feed.items[0])];\n\t\t\t}\n\t\t\tfeed.items.forEach((item) => {\n\t\t\t\tif (item.isoDate && Date.parse(item.isoDate) > dateToCheck) {\n\t\t\t\t\treturnData.push(item);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (feed.items.length) {\n\t\t\t\tpollData.lastItemDate = feed.items.reduce((a, b) =>\n\t\t\t\t\tnew Date(a.isoDate!) > new Date(b.isoDate!) ? a : b,\n\t\t\t\t).isoDate;\n\t\t\t}\n\t\t}\n\n\t\tif (Array.isArray(returnData) && returnData.length !== 0) {\n\t\t\treturn [this.helpers.returnJsonArray(returnData)];\n\t\t}\n\n\t\treturn null;\n\t}\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAAmB;AAQnB,0BAAwD;AACxD,wBAAmB;AAOZ,MAAM,mBAAwC;AAAA,EAA9C;AACN,uBAAoC;AAAA,MACnC,aAAa;AAAA,MACb,MAAM;AAAA,MACN,MAAM;AAAA,MACN,WAAW;AAAA,MACX,OAAO,CAAC,SAAS;AAAA,MACjB,SAAS;AAAA,MACT,aAAa;AAAA,MACb,UAAU;AAAA,MACV,UAAU;AAAA,QACT,MAAM;AAAA,QACN,OAAO;AAAA,MACR;AAAA,MACA,SAAS;AAAA,MACT,QAAQ,CAAC;AAAA,MACT,SAAS,CAAC,wCAAoB,IAAI;AAAA,MAClC,YAAY;AAAA,QACX;AAAA,UACC,aAAa;AAAA,UACb,MAAM;AAAA,UACN,MAAM;AAAA,UACN,SAAS;AAAA,UACT,UAAU;AAAA,UACV,aAAa;AAAA,QACd;AAAA,MACD;AAAA,IACD;AAAA;AAAA,EAEA,MAAM,OAAmE;AACxE,UAAM,WAAW,KAAK,sBAAsB,MAAM;AAClD,UAAM,UAAU,KAAK,iBAAiB,SAAS;AAE/C,UAAM,cAAc,KAAK;AAAA,MACxB,SAAS,gBAAgB,SAAS,uBAAmB,uBAAAA,SAAO,EAAE,IAAI,EAAE,OAAO;AAAA,IAC5E;AAEA,QAAI,CAAC,SAAS;AACb,YAAM,IAAI,uCAAmB,KAAK,QAAQ,GAAG,oCAAoC;AAAA,IAClF;AAEA,UAAM,SAAS,IAAI,kBAAAC,QAAO;AAE1B,QAAI;AACJ,QAAI;AACH,aAAO,MAAM,OAAO,SAAS,OAAO;AAAA,IACrC,SAAS,OAAO;AACf,UAAI,MAAM,SAAS,gBAAgB;AAClC,cAAM,IAAI;AAAA,UACT,KAAK,QAAQ;AAAA,UACb,wEAAwE,OAAO;AAAA,QAChF;AAAA,MACD;AAEA,YAAM,IAAI,uCAAmB,KAAK,QAAQ,GAAG,KAAc;AAAA,IAC5D;AAEA,UAAM,aAA4B,CAAC;AAEnC,QAAI,KAAK,OAAO;AACf,UAAI,KAAK,QAAQ,MAAM,UAAU;AAChC,eAAO,CAAC,KAAK,QAAQ,gBAAgB,KAAK,MAAM,CAAC,CAAC,CAAC;AAAA,MACpD;AACA,WAAK,MAAM,QAAQ,CAAC,SAAS;AAC5B,YAAI,KAAK,WAAW,KAAK,MAAM,KAAK,OAAO,IAAI,aAAa;AAC3D,qBAAW,KAAK,IAAI;AAAA,QACrB;AAAA,MACD,CAAC;AAED,UAAI,KAAK,MAAM,QAAQ;AACtB,iBAAS,eAAe,KAAK,MAAM;AAAA,UAAO,CAAC,GAAG,MAC7C,IAAI,KAAK,EAAE,OAAQ,IAAI,IAAI,KAAK,EAAE,OAAQ,IAAI,IAAI;AAAA,QACnD,EAAE;AAAA,MACH;AAAA,IACD;AAEA,QAAI,MAAM,QAAQ,UAAU,KAAK,WAAW,WAAW,GAAG;AACzD,aAAO,CAAC,KAAK,QAAQ,gBAAgB,UAAU,CAAC;AAAA,IACjD;AAEA,WAAO;AAAA,EACR;AACD;","names":["moment","Parser"]}