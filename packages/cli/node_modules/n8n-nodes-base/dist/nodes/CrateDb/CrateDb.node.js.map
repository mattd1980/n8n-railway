{"version":3,"sources":["../../../nodes/CrateDb/CrateDb.node.ts"],"sourcesContent":["import type {\n\tIExecuteFunctions,\n\tINodeExecutionData,\n\tINodeType,\n\tINodeTypeDescription,\n} from 'n8n-workflow';\nimport { NodeConnectionTypes, NodeOperationError } from 'n8n-workflow';\nimport pgPromise from 'pg-promise';\n\nimport {\n\tgenerateReturning,\n\tgetItemCopy,\n\tgetItemsCopy,\n\tpgInsert,\n\tpgQueryV2,\n\tpgUpdate,\n} from '../Postgres/v1/genericFunctions';\n\nexport class CrateDb implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'CrateDB',\n\t\tname: 'crateDb',\n\t\t// eslint-disable-next-line n8n-nodes-base/node-class-description-icon-not-svg\n\t\ticon: 'file:cratedb.png',\n\t\tgroup: ['input'],\n\t\tversion: 1,\n\t\tdescription: 'Add and update data in CrateDB',\n\t\tdefaults: {\n\t\t\tname: 'CrateDB',\n\t\t},\n\t\tusableAsTool: true,\n\t\tinputs: [NodeConnectionTypes.Main],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tcredentials: [\n\t\t\t{\n\t\t\t\tname: 'crateDb',\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Operation',\n\t\t\t\tname: 'operation',\n\t\t\t\ttype: 'options',\n\t\t\t\tnoDataExpression: true,\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Execute Query',\n\t\t\t\t\t\tvalue: 'executeQuery',\n\t\t\t\t\t\tdescription: 'Execute an SQL query',\n\t\t\t\t\t\taction: 'Execute a SQL query',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Insert',\n\t\t\t\t\t\tvalue: 'insert',\n\t\t\t\t\t\tdescription: 'Insert rows in database',\n\t\t\t\t\t\taction: 'Insert rows in database',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Update',\n\t\t\t\t\t\tvalue: 'update',\n\t\t\t\t\t\tdescription: 'Update rows in database',\n\t\t\t\t\t\taction: 'Update rows in database',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'insert',\n\t\t\t},\n\n\t\t\t// ----------------------------------\n\t\t\t//         executeQuery\n\t\t\t// ----------------------------------\n\t\t\t{\n\t\t\t\tdisplayName: 'Query',\n\t\t\t\tname: 'query',\n\t\t\t\ttype: 'string',\n\t\t\t\tnoDataExpression: true,\n\t\t\t\ttypeOptions: {\n\t\t\t\t\teditor: 'sqlEditor',\n\t\t\t\t\trows: 5,\n\t\t\t\t\tsqlDialect: 'PostgreSQL',\n\t\t\t\t},\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['executeQuery'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdefault: '',\n\t\t\t\tplaceholder: 'SELECT id, name FROM product WHERE quantity > $1 AND price <= $2',\n\t\t\t\trequired: true,\n\t\t\t\tdescription:\n\t\t\t\t\t'The SQL query to execute. You can use n8n expressions or $1 and $2 in conjunction with query parameters.',\n\t\t\t},\n\n\t\t\t// ----------------------------------\n\t\t\t//         insert\n\t\t\t// ----------------------------------\n\t\t\t{\n\t\t\t\tdisplayName: 'Schema',\n\t\t\t\tname: 'schema',\n\t\t\t\ttype: 'string',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['insert'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdefault: 'doc',\n\t\t\t\trequired: true,\n\t\t\t\tdescription: 'Name of the schema the table belongs to',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Table',\n\t\t\t\tname: 'table',\n\t\t\t\ttype: 'string',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['insert'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdefault: '',\n\t\t\t\trequired: true,\n\t\t\t\tdescription: 'Name of the table in which to insert data to',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Columns',\n\t\t\t\tname: 'columns',\n\t\t\t\ttype: 'string',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['insert'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdefault: '',\n\t\t\t\tplaceholder: 'id,name,description',\n\t\t\t\tdescription:\n\t\t\t\t\t'Comma-separated list of the properties which should used as columns for the new rows',\n\t\t\t},\n\n\t\t\t// ----------------------------------\n\t\t\t//         update\n\t\t\t// ----------------------------------\n\t\t\t{\n\t\t\t\tdisplayName: 'Schema',\n\t\t\t\tname: 'schema',\n\t\t\t\ttype: 'string',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['update'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdefault: 'doc',\n\t\t\t\trequired: true,\n\t\t\t\tdescription: 'Name of the schema the table belongs to',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Table',\n\t\t\t\tname: 'table',\n\t\t\t\ttype: 'string',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['update'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdefault: '',\n\t\t\t\trequired: true,\n\t\t\t\tdescription: 'Name of the table in which to update data in',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Update Key',\n\t\t\t\tname: 'updateKey',\n\t\t\t\ttype: 'string',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['update'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdefault: 'id',\n\t\t\t\trequired: true,\n\t\t\t\t// eslint-disable-next-line n8n-nodes-base/node-param-description-miscased-id\n\t\t\t\tdescription:\n\t\t\t\t\t'Comma-separated list of the properties which decides which rows in the database should be updated. Normally that would be \"id\".',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Columns',\n\t\t\t\tname: 'columns',\n\t\t\t\ttype: 'string',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['update'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdefault: '',\n\t\t\t\tplaceholder: 'name,description',\n\t\t\t\tdescription:\n\t\t\t\t\t'Comma-separated list of the properties which should used as columns for rows to update',\n\t\t\t},\n\n\t\t\t// ----------------------------------\n\t\t\t//         insert,update\n\t\t\t// ----------------------------------\n\t\t\t{\n\t\t\t\tdisplayName: 'Return Fields',\n\t\t\t\tname: 'returnFields',\n\t\t\t\ttype: 'string',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['insert', 'update'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdefault: '*',\n\t\t\t\tdescription: 'Comma-separated list of the fields that the operation will return',\n\t\t\t},\n\t\t\t// ----------------------------------\n\t\t\t//         additional fields\n\t\t\t// ----------------------------------\n\t\t\t{\n\t\t\t\tdisplayName: 'Additional Fields',\n\t\t\t\tname: 'additionalFields',\n\t\t\t\ttype: 'collection',\n\t\t\t\tplaceholder: 'Add Field',\n\t\t\t\tdefault: {},\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Mode',\n\t\t\t\t\t\tname: 'mode',\n\t\t\t\t\t\ttype: 'options',\n\t\t\t\t\t\toptions: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: 'Independently',\n\t\t\t\t\t\t\t\tvalue: 'independently',\n\t\t\t\t\t\t\t\tdescription: 'Execute each query independently',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: 'Multiple Queries',\n\t\t\t\t\t\t\t\tvalue: 'multiple',\n\t\t\t\t\t\t\t\tdescription: '<b>Default</b>. Sends multiple queries at once to database.',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t\tdefault: 'multiple',\n\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t'The way queries should be sent to database. Can be used in conjunction with <b>Continue on Fail</b>. See <a href=\"https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.cratedb/\">the docs</a> for more examples.',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Query Parameters',\n\t\t\t\t\t\tname: 'queryParams',\n\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\t\t'/operation': ['executeQuery'],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\tplaceholder: 'quantity,price',\n\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t'Comma-separated list of properties which should be used as query parameters',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t],\n\t};\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t\tconst credentials = await this.getCredentials('crateDb');\n\n\t\tconst pgp = pgPromise();\n\n\t\tconst config = {\n\t\t\thost: credentials.host as string,\n\t\t\tport: credentials.port as number,\n\t\t\tdatabase: credentials.database as string,\n\t\t\tuser: credentials.user as string,\n\t\t\tpassword: credentials.password as string,\n\t\t\tssl: !['disable', undefined].includes(credentials.ssl as string | undefined),\n\t\t\tsslmode: (credentials.ssl as string) || 'disable',\n\t\t};\n\n\t\tconst db = pgp(config);\n\n\t\tlet returnItems: INodeExecutionData[] = [];\n\n\t\tconst items = this.getInputData();\n\t\tconst operation = this.getNodeParameter('operation', 0);\n\n\t\tif (operation === 'executeQuery') {\n\t\t\t// ----------------------------------\n\t\t\t//         executeQuery\n\t\t\t// ----------------------------------\n\n\t\t\tconst queryResult = await pgQueryV2.call(this, pgp, db, items, this.continueOnFail(), {\n\t\t\t\tresolveExpression: true,\n\t\t\t});\n\n\t\t\treturnItems = this.helpers.returnJsonArray(queryResult);\n\t\t} else if (operation === 'insert') {\n\t\t\t// ----------------------------------\n\t\t\t//         insert\n\t\t\t// ----------------------------------\n\n\t\t\tconst insertData = await pgInsert(\n\t\t\t\tthis.getNodeParameter,\n\t\t\t\tpgp,\n\t\t\t\tdb,\n\t\t\t\titems,\n\t\t\t\tthis.continueOnFail(),\n\t\t\t);\n\n\t\t\tfor (let i = 0; i < insertData.length; i++) {\n\t\t\t\treturnItems.push({\n\t\t\t\t\tjson: insertData[i],\n\t\t\t\t});\n\t\t\t}\n\t\t} else if (operation === 'update') {\n\t\t\t// ----------------------------------\n\t\t\t//         update\n\t\t\t// ----------------------------------\n\n\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', 0);\n\t\t\tconst mode = additionalFields.mode ?? ('multiple' as string);\n\n\t\t\tif (mode === 'independently') {\n\t\t\t\tconst updateItems = await pgUpdate(\n\t\t\t\t\tthis.getNodeParameter,\n\t\t\t\t\tpgp,\n\t\t\t\t\tdb,\n\t\t\t\t\titems,\n\t\t\t\t\tthis.continueOnFail(),\n\t\t\t\t);\n\n\t\t\t\treturnItems = this.helpers.returnJsonArray(updateItems);\n\t\t\t} else if (mode === 'multiple') {\n\t\t\t\t// Crate db does not support multiple-update queries\n\t\t\t\t// Therefore we cannot invoke `pgUpdate` using multiple mode\n\t\t\t\t// so we have to call multiple updates manually here\n\n\t\t\t\tconst table = this.getNodeParameter('table', 0) as string;\n\t\t\t\tconst schema = this.getNodeParameter('schema', 0) as string;\n\t\t\t\tconst updateKeys = (this.getNodeParameter('updateKey', 0) as string)\n\t\t\t\t\t.split(',')\n\t\t\t\t\t.map((column) => column.trim());\n\t\t\t\tconst columns = (this.getNodeParameter('columns', 0) as string)\n\t\t\t\t\t.split(',')\n\t\t\t\t\t.map((column) => column.trim());\n\t\t\t\tconst queryColumns = columns.slice();\n\n\t\t\t\tupdateKeys.forEach((updateKey) => {\n\t\t\t\t\tif (!queryColumns.includes(updateKey)) {\n\t\t\t\t\t\tcolumns.unshift(updateKey);\n\t\t\t\t\t\tqueryColumns.unshift('?' + updateKey);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tconst cs = new pgp.helpers.ColumnSet(queryColumns, { table: { table, schema } });\n\n\t\t\t\tconst where =\n\t\t\t\t\t' WHERE ' +\n\t\t\t\t\tupdateKeys\n\t\t\t\t\t\t// eslint-disable-next-line n8n-local-rules/no-interpolation-in-regular-string\n\t\t\t\t\t\t.map((updateKey) => pgp.as.name(updateKey) + ' = ${' + updateKey + '}')\n\t\t\t\t\t\t.join(' AND ');\n\t\t\t\t// updateKeyValue = item.json[updateKey] as string | number;\n\t\t\t\t// if (updateKeyValue === undefined) {\n\t\t\t\t// \tthrow new NodeOperationError(this.getNode(), 'No value found for update key!');\n\t\t\t\t// }\n\n\t\t\t\tconst returning = generateReturning(\n\t\t\t\t\tpgp,\n\t\t\t\t\tthis.getNodeParameter('returnFields', 0) as string,\n\t\t\t\t);\n\t\t\t\tconst queries: string[] = [];\n\t\t\t\tfor (let i = 0; i < items.length; i++) {\n\t\t\t\t\tconst itemCopy = getItemCopy(items[i], columns);\n\t\t\t\t\tqueries.push(\n\t\t\t\t\t\t(pgp.helpers.update(itemCopy, cs) as string) +\n\t\t\t\t\t\t\tpgp.as.format(where, itemCopy) +\n\t\t\t\t\t\t\treturning,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tawait db.multi(pgp.helpers.concat(queries));\n\t\t\t\treturnItems = this.helpers.returnJsonArray(getItemsCopy(items, columns));\n\t\t\t}\n\t\t} else {\n\t\t\tawait db.$pool.end();\n\t\t\tthrow new NodeOperationError(\n\t\t\t\tthis.getNode(),\n\t\t\t\t`The operation \"${operation}\" is not supported!`,\n\t\t\t);\n\t\t}\n\n\t\t// shuts down the connection pool associated with the db object to allow the process to finish\n\t\tawait db.$pool.end();\n\n\t\treturn [returnItems];\n\t}\n}\n"],"mappings":"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","names":["pgPromise"]}