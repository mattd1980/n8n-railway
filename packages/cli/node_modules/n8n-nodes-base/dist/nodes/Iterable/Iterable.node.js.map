{"version":3,"sources":["../../../nodes/Iterable/Iterable.node.ts"],"sourcesContent":["import moment from 'moment-timezone';\nimport type {\n\tIExecuteFunctions,\n\tIDataObject,\n\tILoadOptionsFunctions,\n\tINodeExecutionData,\n\tINodePropertyOptions,\n\tINodeType,\n\tINodeTypeDescription,\n\tJsonObject,\n} from 'n8n-workflow';\nimport { NodeConnectionTypes, NodeApiError, NodeOperationError } from 'n8n-workflow';\n\nimport { eventFields, eventOperations } from './EventDescription';\nimport { iterableApiRequest } from './GenericFunctions';\nimport { userFields, userOperations } from './UserDescription';\nimport { userListFields, userListOperations } from './UserListDescription';\n\nexport class Iterable implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'Iterable',\n\t\tname: 'iterable',\n\t\t// eslint-disable-next-line n8n-nodes-base/node-class-description-icon-not-svg\n\t\ticon: 'file:iterable.png',\n\t\tgroup: ['input'],\n\t\tversion: 1,\n\t\tsubtitle: '={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}',\n\t\tdescription: 'Consume Iterable API',\n\t\tdefaults: {\n\t\t\tname: 'Iterable',\n\t\t},\n\t\tusableAsTool: true,\n\t\tinputs: [NodeConnectionTypes.Main],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tcredentials: [\n\t\t\t{\n\t\t\t\tname: 'iterableApi',\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Resource',\n\t\t\t\tname: 'resource',\n\t\t\t\ttype: 'options',\n\t\t\t\tnoDataExpression: true,\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Event',\n\t\t\t\t\t\tvalue: 'event',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'User',\n\t\t\t\t\t\tvalue: 'user',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'User List',\n\t\t\t\t\t\tvalue: 'userList',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'user',\n\t\t\t},\n\t\t\t...eventOperations,\n\t\t\t...eventFields,\n\t\t\t...userOperations,\n\t\t\t...userFields,\n\t\t\t...userListOperations,\n\t\t\t...userListFields,\n\t\t],\n\t};\n\n\tmethods = {\n\t\tloadOptions: {\n\t\t\t// Get all the lists available channels\n\t\t\tasync getLists(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst { lists } = await iterableApiRequest.call(this, 'GET', '/lists');\n\t\t\t\tconst returnData: INodePropertyOptions[] = [];\n\t\t\t\tfor (const list of lists) {\n\t\t\t\t\treturnData.push({\n\t\t\t\t\t\tname: list.name,\n\t\t\t\t\t\tvalue: list.id,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn returnData;\n\t\t\t},\n\t\t},\n\t};\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t\tconst items = this.getInputData();\n\t\tconst returnData: IDataObject[] = [];\n\t\tconst length = items.length;\n\t\tconst timezone = this.getTimezone();\n\t\tconst qs: IDataObject = {};\n\t\tlet responseData;\n\t\tconst resource = this.getNodeParameter('resource', 0);\n\t\tconst operation = this.getNodeParameter('operation', 0);\n\n\t\tif (resource === 'event') {\n\t\t\tif (operation === 'track') {\n\t\t\t\t// https://api.iterable.com/api/docs#events_trackBulk\n\t\t\t\tconst events = [];\n\n\t\t\t\tfor (let i = 0; i < length; i++) {\n\t\t\t\t\tconst name = this.getNodeParameter('name', i) as string;\n\n\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i);\n\n\t\t\t\t\tif (!additionalFields.email && !additionalFields.id) {\n\t\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t\t'Either email or userId must be passed in to identify the user. Please add one of both via \"Additional Fields\". If both are passed in, email takes precedence.',\n\t\t\t\t\t\t\t{ itemIndex: i },\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst body: IDataObject = {\n\t\t\t\t\t\teventName: name,\n\t\t\t\t\t};\n\n\t\t\t\t\tObject.assign(body, additionalFields);\n\n\t\t\t\t\tif (body.dataFieldsUi) {\n\t\t\t\t\t\tconst dataFields = (body.dataFieldsUi as IDataObject).dataFieldValues as IDataObject[];\n\t\t\t\t\t\tconst data: IDataObject = {};\n\t\t\t\t\t\tfor (const dataField of dataFields) {\n\t\t\t\t\t\t\tdata[dataField.key as string] = dataField.value;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbody.dataFields = data;\n\t\t\t\t\t\tdelete body.dataFieldsUi;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (body.createdAt) {\n\t\t\t\t\t\tbody.createdAt = moment.tz(body.createdAt, timezone).unix();\n\t\t\t\t\t}\n\n\t\t\t\t\tevents.push(body);\n\t\t\t\t}\n\n\t\t\t\tresponseData = await iterableApiRequest.call(this, 'POST', '/events/trackBulk', { events });\n\n\t\t\t\treturnData.push(responseData as IDataObject);\n\t\t\t}\n\t\t}\n\n\t\tif (resource === 'user') {\n\t\t\tif (operation === 'upsert') {\n\t\t\t\t// https://api.iterable.com/api/docs#users_updateUser\n\t\t\t\tfor (let i = 0; i < length; i++) {\n\t\t\t\t\tconst identifier = this.getNodeParameter('identifier', i) as string;\n\n\t\t\t\t\tconst value = this.getNodeParameter('value', i) as string;\n\n\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i);\n\n\t\t\t\t\tconst body: IDataObject = {};\n\n\t\t\t\t\tif (identifier === 'email') {\n\t\t\t\t\t\tbody.email = value;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbody.preferUserId = this.getNodeParameter('preferUserId', i) as boolean;\n\t\t\t\t\t\tbody.userId = value;\n\t\t\t\t\t}\n\n\t\t\t\t\tObject.assign(body, additionalFields);\n\n\t\t\t\t\tif (body.dataFieldsUi) {\n\t\t\t\t\t\tconst dataFields = (body.dataFieldsUi as IDataObject).dataFieldValues as IDataObject[];\n\t\t\t\t\t\tconst data: IDataObject = {};\n\t\t\t\t\t\tfor (const dataField of dataFields) {\n\t\t\t\t\t\t\tdata[dataField.key as string] = dataField.value;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbody.dataFields = data;\n\t\t\t\t\t\tdelete body.dataFieldsUi;\n\t\t\t\t\t}\n\n\t\t\t\t\tresponseData = await iterableApiRequest.call(this, 'POST', '/users/update', body);\n\n\t\t\t\t\tif (!this.continueOnFail()) {\n\t\t\t\t\t\tif (responseData.code !== 'Success') {\n\t\t\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t\t\t`Iterable error response [400]: ${responseData.msg}`,\n\t\t\t\t\t\t\t\t{ itemIndex: i },\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturnData.push(responseData as IDataObject);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (operation === 'delete') {\n\t\t\t\t// https://api.iterable.com/api/docs#users_delete\n\t\t\t\t// https://api.iterable.com/api/docs#users_delete_0\n\t\t\t\tfor (let i = 0; i < length; i++) {\n\t\t\t\t\tconst by = this.getNodeParameter('by', i) as string;\n\n\t\t\t\t\tlet endpoint;\n\n\t\t\t\t\tif (by === 'email') {\n\t\t\t\t\t\tconst email = this.getNodeParameter('email', i) as string;\n\t\t\t\t\t\tendpoint = `/users/${email}`;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst userId = this.getNodeParameter('userId', i) as string;\n\t\t\t\t\t\tendpoint = `/users/byUserId/${userId}`;\n\t\t\t\t\t}\n\n\t\t\t\t\tresponseData = await iterableApiRequest.call(this, 'DELETE', endpoint);\n\n\t\t\t\t\tif (!this.continueOnFail()) {\n\t\t\t\t\t\tif (responseData.code !== 'Success') {\n\t\t\t\t\t\t\tthrow new NodeApiError(this.getNode(), responseData as JsonObject);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturnData.push(responseData as IDataObject);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (operation === 'get') {\n\t\t\t\t// https://api.iterable.com/api/docs#users_getUser\n\t\t\t\t// https://api.iterable.com/api/docs#users_getUserById\n\t\t\t\tfor (let i = 0; i < length; i++) {\n\t\t\t\t\tconst by = this.getNodeParameter('by', i) as string;\n\n\t\t\t\t\tlet endpoint;\n\n\t\t\t\t\tif (by === 'email') {\n\t\t\t\t\t\tconst email = this.getNodeParameter('email', i) as string;\n\t\t\t\t\t\tendpoint = '/users/getByEmail';\n\t\t\t\t\t\tqs.email = email;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst userId = this.getNodeParameter('userId', i) as string;\n\t\t\t\t\t\tendpoint = `/users/byUserId/${userId}`;\n\t\t\t\t\t}\n\n\t\t\t\t\tresponseData = await iterableApiRequest.call(this, 'GET', endpoint, {}, qs);\n\n\t\t\t\t\tif (!this.continueOnFail()) {\n\t\t\t\t\t\tif (Object.keys(responseData as IDataObject).length === 0) {\n\t\t\t\t\t\t\tthrow new NodeApiError(this.getNode(), responseData as JsonObject, {\n\t\t\t\t\t\t\t\tmessage: 'User not found',\n\t\t\t\t\t\t\t\thttpCode: '404',\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tresponseData = responseData.user || {};\n\t\t\t\t\treturnData.push(responseData as IDataObject);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (resource === 'userList') {\n\t\t\tif (operation === 'add') {\n\t\t\t\t//https://api.iterable.com/api/docs#lists_subscribe\n\t\t\t\tconst listId = this.getNodeParameter('listId', 0) as string;\n\n\t\t\t\tconst identifier = this.getNodeParameter('identifier', 0) as string;\n\n\t\t\t\tconst body: IDataObject = {\n\t\t\t\t\tlistId: parseInt(listId, 10),\n\t\t\t\t\tsubscribers: [],\n\t\t\t\t};\n\n\t\t\t\tconst subscribers: IDataObject[] = [];\n\n\t\t\t\tfor (let i = 0; i < length; i++) {\n\t\t\t\t\tconst value = this.getNodeParameter('value', i) as string;\n\n\t\t\t\t\tif (identifier === 'email') {\n\t\t\t\t\t\tsubscribers.push({ email: value });\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsubscribers.push({ userId: value });\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tbody.subscribers = subscribers;\n\n\t\t\t\tresponseData = await iterableApiRequest.call(this, 'POST', '/lists/subscribe', body);\n\n\t\t\t\treturnData.push(responseData as IDataObject);\n\t\t\t}\n\n\t\t\tif (operation === 'remove') {\n\t\t\t\t//https://api.iterable.com/api/docs#lists_unsubscribe\n\t\t\t\tconst listId = this.getNodeParameter('listId', 0) as string;\n\n\t\t\t\tconst identifier = this.getNodeParameter('identifier', 0) as string;\n\n\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', 0);\n\n\t\t\t\tconst body: IDataObject = {\n\t\t\t\t\tlistId: parseInt(listId, 10),\n\t\t\t\t\tsubscribers: [],\n\t\t\t\t\tcampaignId: additionalFields.campaignId as number,\n\t\t\t\t\tchannelUnsubscribe: additionalFields.channelUnsubscribe as boolean,\n\t\t\t\t};\n\n\t\t\t\tconst subscribers: IDataObject[] = [];\n\n\t\t\t\tfor (let i = 0; i < length; i++) {\n\t\t\t\t\tconst value = this.getNodeParameter('value', i) as string;\n\n\t\t\t\t\tif (identifier === 'email') {\n\t\t\t\t\t\tsubscribers.push({ email: value });\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsubscribers.push({ userId: value });\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tbody.subscribers = subscribers;\n\n\t\t\t\tresponseData = await iterableApiRequest.call(this, 'POST', '/lists/unsubscribe', body);\n\n\t\t\t\treturnData.push(responseData as IDataObject);\n\t\t\t}\n\t\t}\n\t\treturn [this.helpers.returnJsonArray(returnData)];\n\t}\n}\n"],"mappings":"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","names":["moment"]}