{"version":3,"sources":["../../../nodes/Reddit/GenericFunctions.ts"],"sourcesContent":["import type {\n\tIExecuteFunctions,\n\tIHookFunctions,\n\tIDataObject,\n\tJsonObject,\n\tIHttpRequestMethods,\n\tIRequestOptions,\n} from 'n8n-workflow';\nimport { NodeApiError } from 'n8n-workflow';\n\n/**\n * Make an authenticated or unauthenticated API request to Reddit.\n */\nexport async function redditApiRequest(\n\tthis: IHookFunctions | IExecuteFunctions,\n\tmethod: IHttpRequestMethods,\n\tendpoint: string,\n\tqs: IDataObject,\n): Promise<any> {\n\tconst resource = this.getNodeParameter('resource', 0) as string;\n\n\tconst authRequired = ['profile', 'post', 'postComment'].includes(resource);\n\n\tqs.api_type = 'json';\n\n\tconst options: IRequestOptions = {\n\t\theaders: {\n\t\t\t'user-agent': 'n8n',\n\t\t},\n\t\tmethod,\n\t\turi: authRequired\n\t\t\t? `https://oauth.reddit.com/${endpoint}`\n\t\t\t: `https://www.reddit.com/${endpoint}`,\n\t\tqs,\n\t\tjson: true,\n\t};\n\n\tif (!Object.keys(qs).length) {\n\t\tdelete options.qs;\n\t}\n\n\tif (authRequired) {\n\t\ttry {\n\t\t\treturn await this.helpers.requestOAuth2.call(this, 'redditOAuth2Api', options);\n\t\t} catch (error) {\n\t\t\tthrow new NodeApiError(this.getNode(), error as JsonObject);\n\t\t}\n\t} else {\n\t\ttry {\n\t\t\treturn await this.helpers.request.call(this, options);\n\t\t} catch (error) {\n\t\t\tthrow new NodeApiError(this.getNode(), error as JsonObject);\n\t\t}\n\t}\n}\n\n/**\n * Make an unauthenticated API request to Reddit and return all results.\n */\nexport async function redditApiRequestAllItems(\n\tthis: IHookFunctions | IExecuteFunctions,\n\tmethod: IHttpRequestMethods,\n\tendpoint: string,\n\tqs: IDataObject,\n): Promise<any> {\n\tlet responseData;\n\tconst returnData: IDataObject[] = [];\n\n\tconst resource = this.getNodeParameter('resource', 0);\n\tconst operation = this.getNodeParameter('operation', 0);\n\tconst returnAll = this.getNodeParameter('returnAll', 0, false) as boolean;\n\n\tqs.limit = 100;\n\n\tdo {\n\t\tresponseData = await redditApiRequest.call(this, method, endpoint, qs);\n\t\tif (!Array.isArray(responseData)) {\n\t\t\tqs.after = responseData.data.after;\n\t\t}\n\n\t\tif (endpoint === 'api/search_subreddits.json') {\n\t\t\tresponseData.subreddits.forEach((child: any) => returnData.push(child as IDataObject));\n\t\t} else if (resource === 'postComment' && operation === 'getAll') {\n\t\t\tresponseData[1].data.children.forEach((child: any) =>\n\t\t\t\treturnData.push(child.data as IDataObject),\n\t\t\t);\n\t\t} else {\n\t\t\tresponseData.data.children.forEach((child: any) =>\n\t\t\t\treturnData.push(child.data as IDataObject),\n\t\t\t);\n\t\t}\n\t\tif (qs.limit && returnData.length >= qs.limit && !returnAll) {\n\t\t\treturn returnData;\n\t\t}\n\t} while (responseData.data?.after);\n\n\treturn returnData;\n}\n\n/**\n * Handles a large Reddit listing by returning all items or up to a limit.\n */\nexport async function handleListing(\n\tthis: IExecuteFunctions,\n\ti: number,\n\tendpoint: string,\n\tqs: IDataObject = {},\n\trequestMethod: 'GET' | 'POST' = 'GET',\n): Promise<any> {\n\tlet responseData;\n\n\tconst returnAll = this.getNodeParameter('returnAll', i);\n\n\tif (returnAll) {\n\t\tresponseData = await redditApiRequestAllItems.call(this, requestMethod, endpoint, qs);\n\t} else {\n\t\tconst limit = this.getNodeParameter('limit', i);\n\t\tqs.limit = limit;\n\t\tresponseData = await redditApiRequestAllItems.call(this, requestMethod, endpoint, qs);\n\t\tresponseData = responseData.slice(0, limit);\n\t}\n\n\treturn responseData;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA,0BAA6B;AAK7B,eAAsB,iBAErB,QACA,UACA,IACe;AACf,QAAM,WAAW,KAAK,iBAAiB,YAAY,CAAC;AAEpD,QAAM,eAAe,CAAC,WAAW,QAAQ,aAAa,EAAE,SAAS,QAAQ;AAEzE,KAAG,WAAW;AAEd,QAAM,UAA2B;AAAA,IAChC,SAAS;AAAA,MACR,cAAc;AAAA,IACf;AAAA,IACA;AAAA,IACA,KAAK,eACF,4BAA4B,QAAQ,KACpC,0BAA0B,QAAQ;AAAA,IACrC;AAAA,IACA,MAAM;AAAA,EACP;AAEA,MAAI,CAAC,OAAO,KAAK,EAAE,EAAE,QAAQ;AAC5B,WAAO,QAAQ;AAAA,EAChB;AAEA,MAAI,cAAc;AACjB,QAAI;AACH,aAAO,MAAM,KAAK,QAAQ,cAAc,KAAK,MAAM,mBAAmB,OAAO;AAAA,IAC9E,SAAS,OAAO;AACf,YAAM,IAAI,iCAAa,KAAK,QAAQ,GAAG,KAAmB;AAAA,IAC3D;AAAA,EACD,OAAO;AACN,QAAI;AACH,aAAO,MAAM,KAAK,QAAQ,QAAQ,KAAK,MAAM,OAAO;AAAA,IACrD,SAAS,OAAO;AACf,YAAM,IAAI,iCAAa,KAAK,QAAQ,GAAG,KAAmB;AAAA,IAC3D;AAAA,EACD;AACD;AAKA,eAAsB,yBAErB,QACA,UACA,IACe;AACf,MAAI;AACJ,QAAM,aAA4B,CAAC;AAEnC,QAAM,WAAW,KAAK,iBAAiB,YAAY,CAAC;AACpD,QAAM,YAAY,KAAK,iBAAiB,aAAa,CAAC;AACtD,QAAM,YAAY,KAAK,iBAAiB,aAAa,GAAG,KAAK;AAE7D,KAAG,QAAQ;AAEX,KAAG;AACF,mBAAe,MAAM,iBAAiB,KAAK,MAAM,QAAQ,UAAU,EAAE;AACrE,QAAI,CAAC,MAAM,QAAQ,YAAY,GAAG;AACjC,SAAG,QAAQ,aAAa,KAAK;AAAA,IAC9B;AAEA,QAAI,aAAa,8BAA8B;AAC9C,mBAAa,WAAW,QAAQ,CAAC,UAAe,WAAW,KAAK,KAAoB,CAAC;AAAA,IACtF,WAAW,aAAa,iBAAiB,cAAc,UAAU;AAChE,mBAAa,CAAC,EAAE,KAAK,SAAS;AAAA,QAAQ,CAAC,UACtC,WAAW,KAAK,MAAM,IAAmB;AAAA,MAC1C;AAAA,IACD,OAAO;AACN,mBAAa,KAAK,SAAS;AAAA,QAAQ,CAAC,UACnC,WAAW,KAAK,MAAM,IAAmB;AAAA,MAC1C;AAAA,IACD;AACA,QAAI,GAAG,SAAS,WAAW,UAAU,GAAG,SAAS,CAAC,WAAW;AAC5D,aAAO;AAAA,IACR;AAAA,EACD,SAAS,aAAa,MAAM;AAE5B,SAAO;AACR;AAKA,eAAsB,cAErB,GACA,UACA,KAAkB,CAAC,GACnB,gBAAgC,OACjB;AACf,MAAI;AAEJ,QAAM,YAAY,KAAK,iBAAiB,aAAa,CAAC;AAEtD,MAAI,WAAW;AACd,mBAAe,MAAM,yBAAyB,KAAK,MAAM,eAAe,UAAU,EAAE;AAAA,EACrF,OAAO;AACN,UAAM,QAAQ,KAAK,iBAAiB,SAAS,CAAC;AAC9C,OAAG,QAAQ;AACX,mBAAe,MAAM,yBAAyB,KAAK,MAAM,eAAe,UAAU,EAAE;AACpF,mBAAe,aAAa,MAAM,GAAG,KAAK;AAAA,EAC3C;AAEA,SAAO;AACR;","names":[]}