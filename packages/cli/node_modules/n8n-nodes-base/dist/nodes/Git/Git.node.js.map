{"version":3,"sources":["../../../nodes/Git/Git.node.ts"],"sourcesContent":["import { access, mkdir } from 'fs/promises';\nimport type {\n\tIExecuteFunctions,\n\tINodeExecutionData,\n\tINodeType,\n\tINodeTypeDescription,\n} from 'n8n-workflow';\nimport { NodeConnectionTypes } from 'n8n-workflow';\nimport type { LogOptions, SimpleGit, SimpleGitOptions } from 'simple-git';\nimport simpleGit from 'simple-git';\nimport { URL } from 'url';\n\nimport {\n\taddConfigFields,\n\taddFields,\n\tcloneFields,\n\tcommitFields,\n\tlogFields,\n\tpushFields,\n\ttagFields,\n} from './descriptions';\n\nexport class Git implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'Git',\n\t\tname: 'git',\n\t\ticon: 'file:git.svg',\n\t\tgroup: ['transform'],\n\t\tversion: 1,\n\t\tdescription: 'Control git.',\n\t\tdefaults: {\n\t\t\tname: 'Git',\n\t\t},\n\t\tusableAsTool: true,\n\t\tinputs: [NodeConnectionTypes.Main],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tcredentials: [\n\t\t\t{\n\t\t\t\tname: 'gitPassword',\n\t\t\t\trequired: true,\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tauthentication: ['gitPassword'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Authentication',\n\t\t\t\tname: 'authentication',\n\t\t\t\ttype: 'options',\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Authenticate',\n\t\t\t\t\t\tvalue: 'gitPassword',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'None',\n\t\t\t\t\t\tvalue: 'none',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['clone', 'push'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdefault: 'none',\n\t\t\t\tdescription: 'The way to authenticate',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Operation',\n\t\t\t\tname: 'operation',\n\t\t\t\ttype: 'options',\n\t\t\t\tnoDataExpression: true,\n\t\t\t\tdefault: 'log',\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Add',\n\t\t\t\t\t\tvalue: 'add',\n\t\t\t\t\t\tdescription: 'Add a file or folder to commit',\n\t\t\t\t\t\taction: 'Add a file or folder to commit',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Add Config',\n\t\t\t\t\t\tvalue: 'addConfig',\n\t\t\t\t\t\tdescription: 'Add configuration property',\n\t\t\t\t\t\taction: 'Add configuration property',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Clone',\n\t\t\t\t\t\tvalue: 'clone',\n\t\t\t\t\t\tdescription: 'Clone a repository',\n\t\t\t\t\t\taction: 'Clone a repository',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Commit',\n\t\t\t\t\t\tvalue: 'commit',\n\t\t\t\t\t\tdescription: 'Commit files or folders to git',\n\t\t\t\t\t\taction: 'Commit files or folders to git',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Fetch',\n\t\t\t\t\t\tvalue: 'fetch',\n\t\t\t\t\t\tdescription: 'Fetch from remote repository',\n\t\t\t\t\t\taction: 'Fetch from remote repository',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'List Config',\n\t\t\t\t\t\tvalue: 'listConfig',\n\t\t\t\t\t\tdescription: 'Return current configuration',\n\t\t\t\t\t\taction: 'Return current configuration',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Log',\n\t\t\t\t\t\tvalue: 'log',\n\t\t\t\t\t\tdescription: 'Return git commit history',\n\t\t\t\t\t\taction: 'Return git commit history',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Pull',\n\t\t\t\t\t\tvalue: 'pull',\n\t\t\t\t\t\tdescription: 'Pull from remote repository',\n\t\t\t\t\t\taction: 'Pull from remote repository',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Push',\n\t\t\t\t\t\tvalue: 'push',\n\t\t\t\t\t\tdescription: 'Push to remote repository',\n\t\t\t\t\t\taction: 'Push to remote repository',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Push Tags',\n\t\t\t\t\t\tvalue: 'pushTags',\n\t\t\t\t\t\tdescription: 'Push Tags to remote repository',\n\t\t\t\t\t\taction: 'Push tags to remote repository',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Status',\n\t\t\t\t\t\tvalue: 'status',\n\t\t\t\t\t\tdescription: 'Return status of current repository',\n\t\t\t\t\t\taction: 'Return status of current repository',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Tag',\n\t\t\t\t\t\tvalue: 'tag',\n\t\t\t\t\t\tdescription: 'Create a new tag',\n\t\t\t\t\t\taction: 'Create a new tag',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'User Setup',\n\t\t\t\t\t\tvalue: 'userSetup',\n\t\t\t\t\t\tdescription: 'Set the user',\n\t\t\t\t\t\taction: 'Set up a user',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\n\t\t\t{\n\t\t\t\tdisplayName: 'Repository Path',\n\t\t\t\tname: 'repositoryPath',\n\t\t\t\ttype: 'string',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\thide: {\n\t\t\t\t\t\toperation: ['clone'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdefault: '',\n\t\t\t\tplaceholder: '/tmp/repository',\n\t\t\t\trequired: true,\n\t\t\t\tdescription: 'Local path of the git repository to operate on',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'New Repository Path',\n\t\t\t\tname: 'repositoryPath',\n\t\t\t\ttype: 'string',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['clone'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdefault: '',\n\t\t\t\tplaceholder: '/tmp/repository',\n\t\t\t\trequired: true,\n\t\t\t\tdescription: 'Local path to which the git repository should be cloned into',\n\t\t\t},\n\n\t\t\t...addFields,\n\t\t\t...addConfigFields,\n\t\t\t...cloneFields,\n\t\t\t...commitFields,\n\t\t\t...logFields,\n\t\t\t...pushFields,\n\t\t\t...tagFields,\n\t\t\t// ...userSetupFields,\n\t\t],\n\t};\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t\tconst items = this.getInputData();\n\n\t\tconst prepareRepository = async (repositoryPath: string): Promise<string> => {\n\t\t\tconst authentication = this.getNodeParameter('authentication', 0) as string;\n\n\t\t\tif (authentication === 'gitPassword') {\n\t\t\t\tconst gitCredentials = await this.getCredentials('gitPassword');\n\n\t\t\t\tconst url = new URL(repositoryPath);\n\t\t\t\turl.username = gitCredentials.username as string;\n\t\t\t\turl.password = gitCredentials.password as string;\n\n\t\t\t\treturn url.toString();\n\t\t\t}\n\n\t\t\treturn repositoryPath;\n\t\t};\n\n\t\tconst operation = this.getNodeParameter('operation', 0);\n\t\tconst returnItems: INodeExecutionData[] = [];\n\t\tfor (let itemIndex = 0; itemIndex < items.length; itemIndex++) {\n\t\t\ttry {\n\t\t\t\tconst repositoryPath = this.getNodeParameter('repositoryPath', itemIndex, '') as string;\n\t\t\t\tconst options = this.getNodeParameter('options', itemIndex, {});\n\n\t\t\t\tif (operation === 'clone') {\n\t\t\t\t\t// Create repository folder if it does not exist\n\t\t\t\t\ttry {\n\t\t\t\t\t\tawait access(repositoryPath);\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tawait mkdir(repositoryPath);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst gitOptions: Partial<SimpleGitOptions> = {\n\t\t\t\t\tbaseDir: repositoryPath,\n\t\t\t\t};\n\n\t\t\t\tconst git: SimpleGit = simpleGit(gitOptions)\n\t\t\t\t\t// Tell git not to ask for any information via the terminal like for\n\t\t\t\t\t// example the username. As nobody will be able to answer it would\n\t\t\t\t\t// n8n keep on waiting forever.\n\t\t\t\t\t.env('GIT_TERMINAL_PROMPT', '0');\n\n\t\t\t\tif (operation === 'add') {\n\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t//         add\n\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\tconst pathsToAdd = this.getNodeParameter('pathsToAdd', itemIndex, '') as string;\n\n\t\t\t\t\tawait git.add(pathsToAdd.split(','));\n\n\t\t\t\t\treturnItems.push({\n\t\t\t\t\t\tjson: {\n\t\t\t\t\t\t\tsuccess: true,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tpairedItem: {\n\t\t\t\t\t\t\titem: itemIndex,\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\t\t\t\t} else if (operation === 'addConfig') {\n\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t//         addConfig\n\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\tconst key = this.getNodeParameter('key', itemIndex, '') as string;\n\t\t\t\t\tconst value = this.getNodeParameter('value', itemIndex, '') as string;\n\t\t\t\t\tlet append = false;\n\n\t\t\t\t\tif (options.mode === 'append') {\n\t\t\t\t\t\tappend = true;\n\t\t\t\t\t}\n\n\t\t\t\t\tawait git.addConfig(key, value, append);\n\t\t\t\t\treturnItems.push({\n\t\t\t\t\t\tjson: {\n\t\t\t\t\t\t\tsuccess: true,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tpairedItem: {\n\t\t\t\t\t\t\titem: itemIndex,\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\t\t\t\t} else if (operation === 'clone') {\n\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t//         clone\n\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\tlet sourceRepository = this.getNodeParameter('sourceRepository', itemIndex, '') as string;\n\t\t\t\t\tsourceRepository = await prepareRepository(sourceRepository);\n\n\t\t\t\t\tawait git.clone(sourceRepository, '.');\n\n\t\t\t\t\treturnItems.push({\n\t\t\t\t\t\tjson: {\n\t\t\t\t\t\t\tsuccess: true,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tpairedItem: {\n\t\t\t\t\t\t\titem: itemIndex,\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\t\t\t\t} else if (operation === 'commit') {\n\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t//         commit\n\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\tconst message = this.getNodeParameter('message', itemIndex, '') as string;\n\n\t\t\t\t\tlet pathsToAdd: string[] | undefined = undefined;\n\t\t\t\t\tif (options.files !== undefined) {\n\t\t\t\t\t\tpathsToAdd = (options.pathsToAdd as string).split(',');\n\t\t\t\t\t}\n\n\t\t\t\t\tawait git.commit(message, pathsToAdd);\n\n\t\t\t\t\treturnItems.push({\n\t\t\t\t\t\tjson: {\n\t\t\t\t\t\t\tsuccess: true,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tpairedItem: {\n\t\t\t\t\t\t\titem: itemIndex,\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\t\t\t\t} else if (operation === 'fetch') {\n\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t//         fetch\n\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\tawait git.fetch();\n\t\t\t\t\treturnItems.push({\n\t\t\t\t\t\tjson: {\n\t\t\t\t\t\t\tsuccess: true,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tpairedItem: {\n\t\t\t\t\t\t\titem: itemIndex,\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\t\t\t\t} else if (operation === 'log') {\n\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t//         log\n\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\tconst logOptions: LogOptions = {};\n\n\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', itemIndex, false);\n\t\t\t\t\tif (!returnAll) {\n\t\t\t\t\t\tlogOptions.maxCount = this.getNodeParameter('limit', itemIndex, 100);\n\t\t\t\t\t}\n\t\t\t\t\tif (options.file) {\n\t\t\t\t\t\tlogOptions.file = options.file as string;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst log = await git.log(logOptions);\n\n\t\t\t\t\treturnItems.push(\n\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\t...this.helpers.returnJsonArray(log.all).map((item) => {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t...item,\n\t\t\t\t\t\t\t\tpairedItem: { item: itemIndex },\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}),\n\t\t\t\t\t);\n\t\t\t\t} else if (operation === 'pull') {\n\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t//         pull\n\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\tawait git.pull();\n\t\t\t\t\treturnItems.push({\n\t\t\t\t\t\tjson: {\n\t\t\t\t\t\t\tsuccess: true,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tpairedItem: {\n\t\t\t\t\t\t\titem: itemIndex,\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\t\t\t\t} else if (operation === 'push') {\n\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t//         push\n\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\tif (options.repository) {\n\t\t\t\t\t\tconst targetRepository = await prepareRepository(options.targetRepository as string);\n\t\t\t\t\t\tawait git.push(targetRepository);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst authentication = this.getNodeParameter('authentication', 0) as string;\n\t\t\t\t\t\tif (authentication === 'gitPassword') {\n\t\t\t\t\t\t\t// Try to get remote repository path from git repository itself to add\n\t\t\t\t\t\t\t// authentication data\n\t\t\t\t\t\t\tconst config = await git.listConfig();\n\t\t\t\t\t\t\tlet targetRepository;\n\t\t\t\t\t\t\tfor (const fileName of Object.keys(config.values)) {\n\t\t\t\t\t\t\t\tif (config.values[fileName]['remote.origin.url']) {\n\t\t\t\t\t\t\t\t\ttargetRepository = config.values[fileName]['remote.origin.url'];\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\ttargetRepository = await prepareRepository(targetRepository as string);\n\t\t\t\t\t\t\tawait git.push(targetRepository);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tawait git.push();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturnItems.push({\n\t\t\t\t\t\tjson: {\n\t\t\t\t\t\t\tsuccess: true,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tpairedItem: {\n\t\t\t\t\t\t\titem: itemIndex,\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\t\t\t\t} else if (operation === 'pushTags') {\n\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t//         pushTags\n\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\tawait git.pushTags();\n\t\t\t\t\treturnItems.push({\n\t\t\t\t\t\tjson: {\n\t\t\t\t\t\t\tsuccess: true,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tpairedItem: {\n\t\t\t\t\t\t\titem: itemIndex,\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\t\t\t\t} else if (operation === 'listConfig') {\n\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t//         listConfig\n\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\tconst config = await git.listConfig();\n\n\t\t\t\t\tconst data = [];\n\t\t\t\t\tfor (const fileName of Object.keys(config.values)) {\n\t\t\t\t\t\tdata.push({\n\t\t\t\t\t\t\t_file: fileName,\n\t\t\t\t\t\t\t...config.values[fileName],\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\treturnItems.push(\n\t\t\t\t\t\t...this.helpers.returnJsonArray(data).map((item) => {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t...item,\n\t\t\t\t\t\t\t\tpairedItem: { item: itemIndex },\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}),\n\t\t\t\t\t);\n\t\t\t\t} else if (operation === 'status') {\n\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t//         status\n\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\tconst status = await git.status();\n\n\t\t\t\t\treturnItems.push(\n\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\t...this.helpers.returnJsonArray([status]).map((item) => {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t...item,\n\t\t\t\t\t\t\t\tpairedItem: { item: itemIndex },\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}),\n\t\t\t\t\t);\n\t\t\t\t} else if (operation === 'tag') {\n\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t//         tag\n\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\tconst name = this.getNodeParameter('name', itemIndex, '') as string;\n\n\t\t\t\t\tawait git.addTag(name);\n\t\t\t\t\treturnItems.push({\n\t\t\t\t\t\tjson: {\n\t\t\t\t\t\t\tsuccess: true,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tpairedItem: {\n\t\t\t\t\t\t\titem: itemIndex,\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\treturnItems.push({\n\t\t\t\t\t\tjson: {\n\t\t\t\t\t\t\terror: error.toString(),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tpairedItem: {\n\t\t\t\t\t\t\titem: itemIndex,\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\n\t\treturn [returnItems];\n\t}\n}\n"],"mappings":"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","names":["simpleGit"]}