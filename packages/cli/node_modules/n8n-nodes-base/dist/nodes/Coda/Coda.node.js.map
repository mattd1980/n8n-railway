{"version":3,"sources":["../../../nodes/Coda/Coda.node.ts"],"sourcesContent":["import type {\n\tIExecuteFunctions,\n\tIDataObject,\n\tILoadOptionsFunctions,\n\tINodeExecutionData,\n\tINodePropertyOptions,\n\tINodeType,\n\tINodeTypeDescription,\n\tJsonObject,\n} from 'n8n-workflow';\nimport { NodeConnectionTypes, NodeApiError } from 'n8n-workflow';\n\nimport { controlFields, controlOperations } from './ControlDescription';\nimport { formulaFields, formulaOperations } from './FormulaDescription';\nimport { codaApiRequest, codaApiRequestAllItems } from './GenericFunctions';\nimport { tableFields, tableOperations } from './TableDescription';\nimport { viewFields, viewOperations } from './ViewDescription';\n\nexport class Coda implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'Coda',\n\t\tname: 'coda',\n\t\ticon: 'file:coda.svg',\n\t\tgroup: ['output'],\n\t\tversion: [1, 1.1],\n\t\tsubtitle: '={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}',\n\t\tdescription: 'Consume Coda API',\n\t\tdefaults: {\n\t\t\tname: 'Coda',\n\t\t},\n\t\tusableAsTool: true,\n\t\tinputs: [NodeConnectionTypes.Main],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tcredentials: [\n\t\t\t{\n\t\t\t\tname: 'codaApi',\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Resource',\n\t\t\t\tname: 'resource',\n\t\t\t\ttype: 'options',\n\t\t\t\tnoDataExpression: true,\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Control',\n\t\t\t\t\t\tvalue: 'control',\n\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t'Controls provide a user-friendly way to input a value that can affect other parts of the doc',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Formula',\n\t\t\t\t\t\tvalue: 'formula',\n\t\t\t\t\t\tdescription: 'Formulas can be great for performing one-off computations',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Table',\n\t\t\t\t\t\tvalue: 'table',\n\t\t\t\t\t\tdescription: 'Access data of tables in documents',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'View',\n\t\t\t\t\t\tvalue: 'view',\n\t\t\t\t\t\tdescription: 'Access data of views in documents',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'table',\n\t\t\t},\n\t\t\t...tableOperations,\n\t\t\t...tableFields,\n\t\t\t...formulaOperations,\n\t\t\t...formulaFields,\n\t\t\t...controlOperations,\n\t\t\t...controlFields,\n\t\t\t...viewOperations,\n\t\t\t...viewFields,\n\t\t],\n\t};\n\n\tmethods = {\n\t\tloadOptions: {\n\t\t\t// Get all the available docs to display them to user so that they can\n\t\t\t// select them easily\n\t\t\tasync getDocs(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst returnData: INodePropertyOptions[] = [];\n\t\t\t\tconst qs = {};\n\t\t\t\tconst docs = await codaApiRequestAllItems.call(this, 'items', 'GET', '/docs', {}, qs);\n\t\t\t\tfor (const doc of docs) {\n\t\t\t\t\tconst docName = doc.name;\n\t\t\t\t\tconst docId = doc.id;\n\t\t\t\t\treturnData.push({\n\t\t\t\t\t\tname: docName,\n\t\t\t\t\t\tvalue: docId,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn returnData;\n\t\t\t},\n\t\t\t// Get all the available tables to display them to user so that they can\n\t\t\t// select them easily\n\t\t\tasync getTables(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst returnData: INodePropertyOptions[] = [];\n\n\t\t\t\tconst docId = this.getCurrentNodeParameter('docId');\n\n\t\t\t\tconst tables = await codaApiRequestAllItems.call(\n\t\t\t\t\tthis,\n\t\t\t\t\t'items',\n\t\t\t\t\t'GET',\n\t\t\t\t\t`/docs/${docId}/tables`,\n\t\t\t\t\t{},\n\t\t\t\t);\n\t\t\t\tfor (const table of tables) {\n\t\t\t\t\tconst tableName = table.name;\n\t\t\t\t\tconst tableId = table.id;\n\t\t\t\t\treturnData.push({\n\t\t\t\t\t\tname: tableName,\n\t\t\t\t\t\tvalue: tableId,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn returnData;\n\t\t\t},\n\t\t\t// Get all the available columns to display them to user so that they can\n\t\t\t// select them easily\n\t\t\tasync getColumns(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst returnData: INodePropertyOptions[] = [];\n\n\t\t\t\tconst docId = this.getCurrentNodeParameter('docId');\n\t\t\t\tconst tableId = this.getCurrentNodeParameter('tableId');\n\n\t\t\t\tconst columns = await codaApiRequestAllItems.call(\n\t\t\t\t\tthis,\n\t\t\t\t\t'items',\n\t\t\t\t\t'GET',\n\t\t\t\t\t`/docs/${docId}/tables/${tableId}/columns`,\n\t\t\t\t\t{},\n\t\t\t\t);\n\t\t\t\tfor (const column of columns) {\n\t\t\t\t\tconst columnName = column.name;\n\t\t\t\t\tconst columnId = column.id;\n\t\t\t\t\treturnData.push({\n\t\t\t\t\t\tname: columnName,\n\t\t\t\t\t\tvalue: columnId,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn returnData;\n\t\t\t},\n\t\t\t// Get all the available views to display them to user so that they can\n\t\t\t// select them easily\n\t\t\tasync getViews(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst returnData: INodePropertyOptions[] = [];\n\t\t\t\tconst docId = this.getCurrentNodeParameter('docId');\n\t\t\t\tconst views = await codaApiRequestAllItems.call(\n\t\t\t\t\tthis,\n\t\t\t\t\t'items',\n\t\t\t\t\t'GET',\n\t\t\t\t\t`/docs/${docId}/tables?tableTypes=view`,\n\t\t\t\t\t{},\n\t\t\t\t);\n\t\t\t\tfor (const view of views) {\n\t\t\t\t\tconst viewName = view.name;\n\t\t\t\t\tconst viewId = view.id;\n\t\t\t\t\treturnData.push({\n\t\t\t\t\t\tname: viewName,\n\t\t\t\t\t\tvalue: viewId,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn returnData;\n\t\t\t},\n\t\t\t// Get all the available formulas to display them to user so that they can\n\t\t\t// select them easily\n\t\t\tasync getFormulas(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst returnData: INodePropertyOptions[] = [];\n\t\t\t\tconst docId = this.getCurrentNodeParameter('docId');\n\t\t\t\tconst formulas = await codaApiRequestAllItems.call(\n\t\t\t\t\tthis,\n\t\t\t\t\t'items',\n\t\t\t\t\t'GET',\n\t\t\t\t\t`/docs/${docId}/formulas`,\n\t\t\t\t\t{},\n\t\t\t\t);\n\t\t\t\tfor (const formula of formulas) {\n\t\t\t\t\tconst formulaName = formula.name;\n\t\t\t\t\tconst formulaId = formula.id;\n\t\t\t\t\treturnData.push({\n\t\t\t\t\t\tname: formulaName,\n\t\t\t\t\t\tvalue: formulaId,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn returnData;\n\t\t\t},\n\t\t\t// Get all the available view rows to display them to user so that they can\n\t\t\t// select them easily\n\t\t\tasync getViewRows(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst returnData: INodePropertyOptions[] = [];\n\t\t\t\tconst docId = this.getCurrentNodeParameter('docId');\n\t\t\t\tconst viewId = this.getCurrentNodeParameter('viewId');\n\t\t\t\tconst viewRows = await codaApiRequestAllItems.call(\n\t\t\t\t\tthis,\n\t\t\t\t\t'items',\n\t\t\t\t\t'GET',\n\t\t\t\t\t`/docs/${docId}/tables/${viewId}/rows`,\n\t\t\t\t\t{},\n\t\t\t\t);\n\t\t\t\tfor (const viewRow of viewRows) {\n\t\t\t\t\tconst viewRowName = viewRow.name;\n\t\t\t\t\tconst viewRowId = viewRow.id;\n\t\t\t\t\treturnData.push({\n\t\t\t\t\t\tname: viewRowName,\n\t\t\t\t\t\tvalue: viewRowId,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn returnData;\n\t\t\t},\n\t\t\t// Get all the available view columns to display them to user so that they can\n\t\t\t// select them easily\n\t\t\tasync getViewColumns(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst returnData: INodePropertyOptions[] = [];\n\n\t\t\t\tconst docId = this.getCurrentNodeParameter('docId');\n\t\t\t\tconst viewId = this.getCurrentNodeParameter('viewId');\n\n\t\t\t\tconst viewColumns = await codaApiRequestAllItems.call(\n\t\t\t\t\tthis,\n\t\t\t\t\t'items',\n\t\t\t\t\t'GET',\n\t\t\t\t\t`/docs/${docId}/tables/${viewId}/columns`,\n\t\t\t\t\t{},\n\t\t\t\t);\n\t\t\t\tfor (const viewColumn of viewColumns) {\n\t\t\t\t\tconst viewColumnName = viewColumn.name;\n\t\t\t\t\tconst viewColumnId = viewColumn.id;\n\t\t\t\t\treturnData.push({\n\t\t\t\t\t\tname: viewColumnName,\n\t\t\t\t\t\tvalue: viewColumnId,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn returnData;\n\t\t\t},\n\t\t},\n\t};\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t\tconst nodeVersion = this.getNode().typeVersion;\n\t\tconst returnData: INodeExecutionData[] = [];\n\t\tconst items = this.getInputData();\n\t\tlet responseData;\n\t\tconst resource = this.getNodeParameter('resource', 0);\n\t\tlet qs: IDataObject = {};\n\t\tconst operation = this.getNodeParameter('operation', 0);\n\n\t\tif (resource === 'table') {\n\t\t\t// https://coda.io/developers/apis/v1beta1#operation/upsertRows\n\t\t\tif (operation === 'createRow') {\n\t\t\t\ttry {\n\t\t\t\t\tconst sendData = {} as IDataObject;\n\t\t\t\t\tfor (let i = 0; i < items.length; i++) {\n\t\t\t\t\t\tqs = {};\n\t\t\t\t\t\tconst docId = this.getNodeParameter('docId', i) as string;\n\t\t\t\t\t\tconst tableId = this.getNodeParameter('tableId', i) as string;\n\t\t\t\t\t\tconst options = this.getNodeParameter('options', i);\n\t\t\t\t\t\tconst endpoint = `/docs/${docId}/tables/${tableId}/rows`;\n\n\t\t\t\t\t\tif (options.disableParsing) {\n\t\t\t\t\t\t\tqs.disableParsing = options.disableParsing as boolean;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst cells = [];\n\t\t\t\t\t\tcells.length = 0;\n\t\t\t\t\t\tfor (const key of Object.keys(items[i].json)) {\n\t\t\t\t\t\t\tcells.push({\n\t\t\t\t\t\t\t\tcolumn: key,\n\t\t\t\t\t\t\t\tvalue: items[i].json[key],\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Collect all the data for the different docs/tables\n\t\t\t\t\t\tif (sendData[endpoint] === undefined) {\n\t\t\t\t\t\t\tsendData[endpoint] = {\n\t\t\t\t\t\t\t\trows: [],\n\t\t\t\t\t\t\t\t// TODO: This is not perfect as it ignores if qs changes between\n\t\t\t\t\t\t\t\t//       different items but should be OK for now\n\t\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t\t((sendData[endpoint]! as IDataObject).rows! as IDataObject[]).push({ cells });\n\n\t\t\t\t\t\tif (options.keyColumns) {\n\t\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\t\t(sendData[endpoint]! as IDataObject).keyColumns = options.keyColumns.split(\n\t\t\t\t\t\t\t\t',',\n\t\t\t\t\t\t\t) as string[];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Now that all data got collected make all the requests\n\t\t\t\t\tfor (const endpoint of Object.keys(sendData)) {\n\t\t\t\t\t\tawait codaApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'POST',\n\t\t\t\t\t\t\tendpoint,\n\t\t\t\t\t\t\tsendData[endpoint],\n\t\t\t\t\t\t\t(sendData[endpoint]! as IDataObject).qs! as IDataObject,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\t\treturn [this.helpers.returnJsonArray({ error: error.message })];\n\t\t\t\t\t}\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\t\t\t\t// Return the incoming data\n\t\t\t\treturn [items];\n\t\t\t}\n\t\t\t// https://coda.io/developers/apis/v1beta1#operation/getRow\n\t\t\tif (operation === 'getRow') {\n\t\t\t\tfor (let i = 0; i < items.length; i++) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst docId = this.getNodeParameter('docId', i) as string;\n\t\t\t\t\t\tconst tableId = this.getNodeParameter('tableId', i) as string;\n\t\t\t\t\t\tconst rowId = this.getNodeParameter('rowId', i) as string;\n\t\t\t\t\t\tconst options = this.getNodeParameter('options', i);\n\n\t\t\t\t\t\tconst endpoint = `/docs/${docId}/tables/${tableId}/rows/${rowId}`;\n\t\t\t\t\t\tif (options.useColumnNames === false) {\n\t\t\t\t\t\t\tqs.useColumnNames = options.useColumnNames as boolean;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tqs.useColumnNames = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (options.valueFormat) {\n\t\t\t\t\t\t\tqs.valueFormat = options.valueFormat as string;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await codaApiRequest.call(this, 'GET', endpoint, {}, qs);\n\t\t\t\t\t\tif (options.rawData === true) {\n\t\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\t\tthis.helpers.returnJsonArray({\n\t\t\t\t\t\t\t\t\tid: responseData.id as string,\n\t\t\t\t\t\t\t\t\t...(responseData.values as IDataObject),\n\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\t\t\tconst executionErrorData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\t\tthis.helpers.returnJsonArray({ error: error.messsage }),\n\t\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\treturnData.push(...executionErrorData);\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow error;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn [returnData];\n\t\t\t}\n\t\t\t// https://coda.io/developers/apis/v1beta1#operation/listRows\n\t\t\tif (operation === 'getAllRows') {\n\t\t\t\tlet itemsLength = items.length ? 1 : 0;\n\n\t\t\t\tif (nodeVersion >= 1.1) {\n\t\t\t\t\titemsLength = items.length;\n\t\t\t\t}\n\n\t\t\t\tfor (let i = 0; i < itemsLength; i++) {\n\t\t\t\t\tconst docId = this.getNodeParameter('docId', i) as string;\n\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', i);\n\t\t\t\t\tconst tableId = this.getNodeParameter('tableId', i) as string;\n\t\t\t\t\tconst options = this.getNodeParameter('options', i);\n\t\t\t\t\tconst endpoint = `/docs/${docId}/tables/${tableId}/rows`;\n\t\t\t\t\tif (options.useColumnNames === false) {\n\t\t\t\t\t\tqs.useColumnNames = options.useColumnNames as boolean;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tqs.useColumnNames = true;\n\t\t\t\t\t}\n\t\t\t\t\tif (options.valueFormat) {\n\t\t\t\t\t\tqs.valueFormat = options.valueFormat as string;\n\t\t\t\t\t}\n\t\t\t\t\tif (options.sortBy) {\n\t\t\t\t\t\tqs.sortBy = options.sortBy as string;\n\t\t\t\t\t}\n\t\t\t\t\tif (options.visibleOnly) {\n\t\t\t\t\t\tqs.visibleOnly = options.visibleOnly as boolean;\n\t\t\t\t\t}\n\t\t\t\t\tif (options.query) {\n\t\t\t\t\t\tqs.query = options.query as string;\n\t\t\t\t\t}\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (returnAll) {\n\t\t\t\t\t\t\tresponseData = await codaApiRequestAllItems.call(\n\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t'items',\n\t\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t\tendpoint,\n\t\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tqs.limit = this.getNodeParameter('limit', i);\n\t\t\t\t\t\t\tresponseData = await codaApiRequest.call(this, 'GET', endpoint, {}, qs);\n\t\t\t\t\t\t\tresponseData = responseData.items;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (options.rawData === true) {\n\t\t\t\t\t\t\tfor (const item of responseData) {\n\t\t\t\t\t\t\t\treturnData.push({\n\t\t\t\t\t\t\t\t\tjson: item,\n\t\t\t\t\t\t\t\t\tpairedItem: [{ item: i }],\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tfor (const item of responseData) {\n\t\t\t\t\t\t\t\treturnData.push({\n\t\t\t\t\t\t\t\t\tjson: {\n\t\t\t\t\t\t\t\t\t\tid: item.id,\n\t\t\t\t\t\t\t\t\t\t...item.values,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tpairedItem: [{ item: i }],\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\t\t\treturnData.push({\n\t\t\t\t\t\t\t\tjson: { error: error.message },\n\t\t\t\t\t\t\t\tpairedItem: [{ item: i }],\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow new NodeApiError(this.getNode(), error as JsonObject);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn [returnData];\n\t\t\t}\n\t\t\t// https://coda.io/developers/apis/v1beta1#operation/deleteRows\n\t\t\tif (operation === 'deleteRow') {\n\t\t\t\ttry {\n\t\t\t\t\tconst sendData = {} as IDataObject;\n\t\t\t\t\tfor (let i = 0; i < items.length; i++) {\n\t\t\t\t\t\tconst docId = this.getNodeParameter('docId', i) as string;\n\t\t\t\t\t\tconst tableId = this.getNodeParameter('tableId', i) as string;\n\t\t\t\t\t\tconst rowId = this.getNodeParameter('rowId', i) as string;\n\t\t\t\t\t\tconst endpoint = `/docs/${docId}/tables/${tableId}/rows`;\n\n\t\t\t\t\t\t// Collect all the data for the different docs/tables\n\t\t\t\t\t\tif (sendData[endpoint] === undefined) {\n\t\t\t\t\t\t\tsendData[endpoint] = [];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t(sendData[endpoint] as string[]).push(rowId);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Now that all data got collected make all the requests\n\t\t\t\t\tfor (const endpoint of Object.keys(sendData)) {\n\t\t\t\t\t\tawait codaApiRequest.call(this, 'DELETE', endpoint, { rowIds: sendData[endpoint] }, qs);\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\t\treturn [this.helpers.returnJsonArray({ error: error.message })];\n\t\t\t\t\t}\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\t\t\t\t// Return the incoming data\n\t\t\t\treturn [items];\n\t\t\t}\n\t\t\t// https://coda.io/developers/apis/v1beta1#operation/pushButton\n\t\t\tif (operation === 'pushButton') {\n\t\t\t\tfor (let i = 0; i < items.length; i++) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst docId = this.getNodeParameter('docId', i) as string;\n\t\t\t\t\t\tconst tableId = this.getNodeParameter('tableId', i) as string;\n\t\t\t\t\t\tconst rowId = this.getNodeParameter('rowId', i) as string;\n\t\t\t\t\t\tconst columnId = this.getNodeParameter('columnId', i) as string;\n\t\t\t\t\t\tconst endpoint = `/docs/${docId}/tables/${tableId}/rows/${rowId}/buttons/${columnId}`;\n\t\t\t\t\t\tresponseData = await codaApiRequest.call(this, 'POST', endpoint, {});\n\t\t\t\t\t\treturnData.push(responseData as INodeExecutionData);\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\t\t\tconst executionErrorData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\t\tthis.helpers.returnJsonArray({ error: error.messsage }),\n\t\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\treturnData.push(...executionErrorData);\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow error;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn [this.helpers.returnJsonArray(returnData)];\n\t\t\t}\n\t\t\t//https://coda.io/developers/apis/v1beta1#operation/getColumn\n\t\t\tif (operation === 'getColumn') {\n\t\t\t\tfor (let i = 0; i < items.length; i++) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst docId = this.getNodeParameter('docId', i) as string;\n\t\t\t\t\t\tconst tableId = this.getNodeParameter('tableId', i) as string;\n\t\t\t\t\t\tconst columnId = this.getNodeParameter('columnId', i) as string;\n\t\t\t\t\t\tconst endpoint = `/docs/${docId}/tables/${tableId}/columns/${columnId}`;\n\t\t\t\t\t\tresponseData = await codaApiRequest.call(this, 'GET', endpoint, {});\n\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\t\t\tconst executionErrorData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\t\tthis.helpers.returnJsonArray({ error: error.messsage }),\n\t\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\treturnData.push(...executionErrorData);\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow error;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn [this.helpers.returnJsonArray(returnData)];\n\t\t\t}\n\t\t\t//https://coda.io/developers/apis/v1beta1#operation/listColumns\n\t\t\tif (operation === 'getAllColumns') {\n\t\t\t\tfor (let i = 0; i < items.length; i++) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', 0);\n\t\t\t\t\t\tconst docId = this.getNodeParameter('docId', i) as string;\n\t\t\t\t\t\tconst tableId = this.getNodeParameter('tableId', i) as string;\n\t\t\t\t\t\tconst endpoint = `/docs/${docId}/tables/${tableId}/columns`;\n\t\t\t\t\t\tif (returnAll) {\n\t\t\t\t\t\t\tresponseData = await codaApiRequestAllItems.call(this, 'items', 'GET', endpoint, {});\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tqs.limit = this.getNodeParameter('limit', 0);\n\t\t\t\t\t\t\tresponseData = await codaApiRequest.call(this, 'GET', endpoint, {}, qs);\n\t\t\t\t\t\t\tresponseData = responseData.items;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\t\t\tconst executionErrorData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\t\tthis.helpers.returnJsonArray({ error: error.messsage }),\n\t\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\treturnData.push(...executionErrorData);\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow error;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn [returnData];\n\t\t\t}\n\t\t}\n\t\tif (resource === 'formula') {\n\t\t\t//https://coda.io/developers/apis/v1beta1#operation/getFormula\n\t\t\tif (operation === 'get') {\n\t\t\t\tfor (let i = 0; i < items.length; i++) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst docId = this.getNodeParameter('docId', i) as string;\n\t\t\t\t\t\tconst formulaId = this.getNodeParameter('formulaId', i) as string;\n\t\t\t\t\t\tconst endpoint = `/docs/${docId}/formulas/${formulaId}`;\n\t\t\t\t\t\tresponseData = await codaApiRequest.call(this, 'GET', endpoint, {});\n\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\t\t\tconst executionErrorData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\t\tthis.helpers.returnJsonArray({ error: error.messsage }),\n\t\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\treturnData.push(...executionErrorData);\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow error;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn [returnData];\n\t\t\t}\n\t\t\t//https://coda.io/developers/apis/v1beta1#operation/listFormulas\n\t\t\tif (operation === 'getAll') {\n\t\t\t\tfor (let i = 0; i < items.length; i++) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', 0);\n\t\t\t\t\t\tconst docId = this.getNodeParameter('docId', i) as string;\n\t\t\t\t\t\tconst endpoint = `/docs/${docId}/formulas`;\n\t\t\t\t\t\tif (returnAll) {\n\t\t\t\t\t\t\tresponseData = await codaApiRequestAllItems.call(this, 'items', 'GET', endpoint, {});\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tqs.limit = this.getNodeParameter('limit', 0);\n\t\t\t\t\t\t\tresponseData = await codaApiRequest.call(this, 'GET', endpoint, {}, qs);\n\t\t\t\t\t\t\tresponseData = responseData.items;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\t\t\tconst executionErrorData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\t\tthis.helpers.returnJsonArray({ error: error.messsage }),\n\t\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\treturnData.push(...executionErrorData);\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow error;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn [returnData];\n\t\t\t}\n\t\t}\n\t\tif (resource === 'control') {\n\t\t\t//https://coda.io/developers/apis/v1beta1#operation/getControl\n\t\t\tif (operation === 'get') {\n\t\t\t\tfor (let i = 0; i < items.length; i++) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst docId = this.getNodeParameter('docId', i) as string;\n\t\t\t\t\t\tconst controlId = this.getNodeParameter('controlId', i) as string;\n\t\t\t\t\t\tconst endpoint = `/docs/${docId}/controls/${controlId}`;\n\t\t\t\t\t\tresponseData = await codaApiRequest.call(this, 'GET', endpoint, {});\n\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\t\t\tconst executionErrorData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\t\tthis.helpers.returnJsonArray({ error: error.messsage }),\n\t\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\treturnData.push(...executionErrorData);\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow error;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn [returnData];\n\t\t\t}\n\t\t\t//https://coda.io/developers/apis/v1beta1#operation/listControls\n\t\t\tif (operation === 'getAll') {\n\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', 0);\n\t\t\t\tqs.limit = this.getNodeParameter('limit', 0);\n\t\t\t\tfor (let i = 0; i < items.length; i++) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst docId = this.getNodeParameter('docId', i) as string;\n\t\t\t\t\t\tconst endpoint = `/docs/${docId}/controls`;\n\t\t\t\t\t\tif (returnAll) {\n\t\t\t\t\t\t\tresponseData = await codaApiRequestAllItems.call(this, 'items', 'GET', endpoint, {});\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresponseData = await codaApiRequest.call(this, 'GET', endpoint, {}, qs);\n\t\t\t\t\t\t\tresponseData = responseData.items;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\t\t\tconst executionErrorData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\t\tthis.helpers.returnJsonArray({ error: error.messsage }),\n\t\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\treturnData.push(...executionErrorData);\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow error;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn [returnData];\n\t\t\t}\n\t\t}\n\t\tif (resource === 'view') {\n\t\t\t//https://coda.io/developers/apis/v1beta1#operation/getView\n\t\t\tif (operation === 'get') {\n\t\t\t\tfor (let i = 0; i < items.length; i++) {\n\t\t\t\t\tconst docId = this.getNodeParameter('docId', i) as string;\n\t\t\t\t\tconst viewId = this.getNodeParameter('viewId', i) as string;\n\t\t\t\t\tconst endpoint = `/docs/${docId}/tables/${viewId}`;\n\t\t\t\t\tresponseData = await codaApiRequest.call(this, 'GET', endpoint, {});\n\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t);\n\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t}\n\t\t\t\treturn [returnData];\n\t\t\t}\n\t\t\t//https://coda.io/developers/apis/v1beta1#operation/listViews\n\t\t\tif (operation === 'getAll') {\n\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', 0);\n\t\t\t\tqs.limit = this.getNodeParameter('limit', 0);\n\t\t\t\tfor (let i = 0; i < items.length; i++) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst docId = this.getNodeParameter('docId', i) as string;\n\t\t\t\t\t\tconst endpoint = `/docs/${docId}/tables?tableTypes=view`;\n\t\t\t\t\t\tif (returnAll) {\n\t\t\t\t\t\t\tresponseData = await codaApiRequestAllItems.call(this, 'items', 'GET', endpoint, {});\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresponseData = await codaApiRequest.call(this, 'GET', endpoint, {}, qs);\n\t\t\t\t\t\t\tresponseData = responseData.items;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresponseData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturnData.push(...responseData);\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\t\t\tconst executionErrorData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\t\tthis.helpers.returnJsonArray({ error: error.messsage }),\n\t\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\treturnData.push(...executionErrorData);\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow error;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn [returnData];\n\t\t\t}\n\t\t\tif (operation === 'getAllViewRows') {\n\t\t\t\tlet itemsLength = items.length ? 1 : 0;\n\n\t\t\t\tif (nodeVersion >= 1.1) {\n\t\t\t\t\titemsLength = items.length;\n\t\t\t\t}\n\n\t\t\t\tfor (let i = 0; i < itemsLength; i++) {\n\t\t\t\t\tconst docId = this.getNodeParameter('docId', i) as string;\n\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', i);\n\t\t\t\t\tconst viewId = this.getNodeParameter('viewId', i) as string;\n\t\t\t\t\tconst options = this.getNodeParameter('options', i);\n\t\t\t\t\tconst endpoint = `/docs/${docId}/tables/${viewId}/rows`;\n\t\t\t\t\tif (options.useColumnNames === false) {\n\t\t\t\t\t\tqs.useColumnNames = options.useColumnNames as boolean;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tqs.useColumnNames = true;\n\t\t\t\t\t}\n\t\t\t\t\tif (options.valueFormat) {\n\t\t\t\t\t\tqs.valueFormat = options.valueFormat as string;\n\t\t\t\t\t}\n\t\t\t\t\tif (options.sortBy) {\n\t\t\t\t\t\tqs.sortBy = options.sortBy as string;\n\t\t\t\t\t}\n\t\t\t\t\tif (options.query) {\n\t\t\t\t\t\tqs.query = options.query as string;\n\t\t\t\t\t}\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (returnAll) {\n\t\t\t\t\t\t\tresponseData = await codaApiRequestAllItems.call(\n\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t'items',\n\t\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t\tendpoint,\n\t\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tqs.limit = this.getNodeParameter('limit', i);\n\t\t\t\t\t\t\tresponseData = await codaApiRequest.call(this, 'GET', endpoint, {}, qs);\n\t\t\t\t\t\t\tresponseData = responseData.items;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (options.rawData === true) {\n\t\t\t\t\t\t\tfor (const item of responseData) {\n\t\t\t\t\t\t\t\treturnData.push({\n\t\t\t\t\t\t\t\t\tjson: item,\n\t\t\t\t\t\t\t\t\tpairedItem: [{ item: i }],\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tfor (const item of responseData) {\n\t\t\t\t\t\t\t\treturnData.push({\n\t\t\t\t\t\t\t\t\tjson: {\n\t\t\t\t\t\t\t\t\t\tid: item.id,\n\t\t\t\t\t\t\t\t\t\t...item.values,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tpairedItem: [{ item: i }],\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\t\t\treturnData.push({\n\t\t\t\t\t\t\t\tjson: { error: error.message },\n\t\t\t\t\t\t\t\tpairedItem: [{ item: i }],\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow new NodeApiError(this.getNode(), error as JsonObject);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn [returnData];\n\t\t\t}\n\t\t\t//https://coda.io/developers/apis/v1beta1#operation/deleteViewRow\n\t\t\tif (operation === 'deleteViewRow') {\n\t\t\t\tfor (let i = 0; i < items.length; i++) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst docId = this.getNodeParameter('docId', i) as string;\n\t\t\t\t\t\tconst viewId = this.getNodeParameter('viewId', i) as string;\n\t\t\t\t\t\tconst rowId = this.getNodeParameter('rowId', i) as string;\n\t\t\t\t\t\tconst endpoint = `/docs/${docId}/tables/${viewId}/rows/${rowId}`;\n\t\t\t\t\t\tresponseData = await codaApiRequest.call(this, 'DELETE', endpoint);\n\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\t\t\tconst executionErrorData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\t\tthis.helpers.returnJsonArray({ error: error.messsage }),\n\t\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\treturnData.push(...executionErrorData);\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow error;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn [returnData];\n\t\t\t}\n\t\t\t//https://coda.io/developers/apis/v1beta1#operation/pushViewButton\n\t\t\tif (operation === 'pushViewButton') {\n\t\t\t\tfor (let i = 0; i < items.length; i++) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst docId = this.getNodeParameter('docId', i) as string;\n\t\t\t\t\t\tconst viewId = this.getNodeParameter('viewId', i) as string;\n\t\t\t\t\t\tconst rowId = this.getNodeParameter('rowId', i) as string;\n\t\t\t\t\t\tconst columnId = this.getNodeParameter('columnId', i) as string;\n\t\t\t\t\t\tconst endpoint = `/docs/${docId}/tables/${viewId}/rows/${rowId}/buttons/${columnId}`;\n\t\t\t\t\t\tresponseData = await codaApiRequest.call(this, 'POST', endpoint);\n\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject),\n\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\t\t\tconst executionErrorData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\t\tthis.helpers.returnJsonArray({ error: error.messsage }),\n\t\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\treturnData.push(...executionErrorData);\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow error;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn [returnData];\n\t\t\t}\n\t\t\tif (operation === 'getAllViewColumns') {\n\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', 0);\n\t\t\t\tqs.limit = this.getNodeParameter('limit', 0);\n\t\t\t\tfor (let i = 0; i < items.length; i++) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst docId = this.getNodeParameter('docId', i) as string;\n\t\t\t\t\t\tconst viewId = this.getNodeParameter('viewId', i) as string;\n\t\t\t\t\t\tconst endpoint = `/docs/${docId}/tables/${viewId}/columns`;\n\t\t\t\t\t\tif (returnAll) {\n\t\t\t\t\t\t\tresponseData = await codaApiRequestAllItems.call(this, 'items', 'GET', endpoint, {});\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresponseData = await codaApiRequest.call(this, 'GET', endpoint, {}, qs);\n\t\t\t\t\t\t\tresponseData = responseData.items;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject),\n\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\t\t\tconst executionErrorData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\t\tthis.helpers.returnJsonArray({ error: error.messsage }),\n\t\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\treturnData.push(...executionErrorData);\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow error;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn [returnData];\n\t\t\t}\n\t\t\t//https://coda.io/developers/apis/v1beta1#operation/updateViewRow\n\t\t\tif (operation === 'updateViewRow') {\n\t\t\t\tfor (let i = 0; i < items.length; i++) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tqs = {};\n\t\t\t\t\t\tconst docId = this.getNodeParameter('docId', i) as string;\n\t\t\t\t\t\tconst viewId = this.getNodeParameter('viewId', i) as string;\n\t\t\t\t\t\tconst rowId = this.getNodeParameter('rowId', i) as string;\n\t\t\t\t\t\tconst keyName = this.getNodeParameter('keyName', i) as string;\n\t\t\t\t\t\tconst options = this.getNodeParameter('options', i);\n\t\t\t\t\t\tconst body: IDataObject = {};\n\t\t\t\t\t\tconst endpoint = `/docs/${docId}/tables/${viewId}/rows/${rowId}`;\n\t\t\t\t\t\tif (options.disableParsing) {\n\t\t\t\t\t\t\tqs.disableParsing = options.disableParsing as boolean;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst cells = [];\n\t\t\t\t\t\tcells.length = 0;\n\n\t\t\t\t\t\t//@ts-ignore\n\t\t\t\t\t\tfor (const key of Object.keys(items[i].json[keyName])) {\n\t\t\t\t\t\t\tcells.push({\n\t\t\t\t\t\t\t\tcolumn: key,\n\t\t\t\t\t\t\t\t//@ts-ignore\n\t\t\t\t\t\t\t\tvalue: items[i].json[keyName][key],\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbody.row = {\n\t\t\t\t\t\t\tcells,\n\t\t\t\t\t\t};\n\t\t\t\t\t\tawait codaApiRequest.call(this, 'PUT', endpoint, body, qs);\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\t\t\titems[i].json = { error: error.message };\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow error;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn [items];\n\t\t\t}\n\t\t}\n\t\treturn [];\n\t}\n}\n"],"mappings":"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","names":[]}