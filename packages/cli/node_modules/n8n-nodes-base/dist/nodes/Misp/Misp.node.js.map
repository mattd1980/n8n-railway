{"version":3,"sources":["../../../nodes/Misp/Misp.node.ts"],"sourcesContent":["import {\n\ttype IExecuteFunctions,\n\ttype ILoadOptionsFunctions,\n\ttype IDataObject,\n\ttype INodeExecutionData,\n\ttype INodeType,\n\ttype INodeTypeDescription,\n\tNodeConnectionTypes,\n} from 'n8n-workflow';\n\nimport {\n\tattributeFields,\n\tattributeOperations,\n\teventFields,\n\teventOperations,\n\teventTagFields,\n\teventTagOperations,\n\tfeedFields,\n\tfeedOperations,\n\tgalaxyFields,\n\tgalaxyOperations,\n\tnoticelistFields,\n\tnoticelistOperations,\n\tobjectOperations,\n\tobjectFields,\n\torganisationFields,\n\torganisationOperations,\n\ttagFields,\n\ttagOperations,\n\tuserFields,\n\tuserOperations,\n\twarninglistFields,\n\twarninglistOperations,\n} from './descriptions';\nimport {\n\tmispApiRequest,\n\tmispApiRequestAllItems,\n\tmispApiRestSearch,\n\tthrowOnEmptyUpdate,\n\tthrowOnInvalidUrl,\n\tthrowOnMissingSharingGroup,\n} from './GenericFunctions';\nimport type { LoadedOrgs, LoadedSharingGroups, LoadedTags, LoadedUsers } from './types';\n\nexport class Misp implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'MISP',\n\t\tname: 'misp',\n\t\ticon: 'file:misp.svg',\n\t\tgroup: ['transform'],\n\t\tversion: 1,\n\t\tsubtitle: '={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}',\n\t\tdescription: 'Consume the MISP API',\n\t\tdefaults: {\n\t\t\tname: 'MISP',\n\t\t},\n\t\tusableAsTool: true,\n\t\tinputs: [NodeConnectionTypes.Main],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tcredentials: [\n\t\t\t{\n\t\t\t\tname: 'mispApi',\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Resource',\n\t\t\t\tname: 'resource',\n\t\t\t\ttype: 'options',\n\t\t\t\tnoDataExpression: true,\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Attribute',\n\t\t\t\t\t\tvalue: 'attribute',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Event',\n\t\t\t\t\t\tvalue: 'event',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Event Tag',\n\t\t\t\t\t\tvalue: 'eventTag',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Feed',\n\t\t\t\t\t\tvalue: 'feed',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Galaxy',\n\t\t\t\t\t\tvalue: 'galaxy',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Noticelist',\n\t\t\t\t\t\tvalue: 'noticelist',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Object',\n\t\t\t\t\t\tvalue: 'object',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Organisation',\n\t\t\t\t\t\tvalue: 'organisation',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Tag',\n\t\t\t\t\t\tvalue: 'tag',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'User',\n\t\t\t\t\t\tvalue: 'user',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Warninglist',\n\t\t\t\t\t\tvalue: 'warninglist',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'attribute',\n\t\t\t},\n\t\t\t...attributeOperations,\n\t\t\t...attributeFields,\n\t\t\t...eventOperations,\n\t\t\t...eventFields,\n\t\t\t...eventTagOperations,\n\t\t\t...eventTagFields,\n\t\t\t...feedOperations,\n\t\t\t...feedFields,\n\t\t\t...galaxyOperations,\n\t\t\t...galaxyFields,\n\t\t\t...noticelistOperations,\n\t\t\t...noticelistFields,\n\t\t\t...objectOperations,\n\t\t\t...objectFields,\n\t\t\t...organisationOperations,\n\t\t\t...organisationFields,\n\t\t\t...tagOperations,\n\t\t\t...tagFields,\n\t\t\t...userOperations,\n\t\t\t...userFields,\n\t\t\t...warninglistOperations,\n\t\t\t...warninglistFields,\n\t\t],\n\t};\n\n\tmethods = {\n\t\tloadOptions: {\n\t\t\tasync getOrgs(this: ILoadOptionsFunctions) {\n\t\t\t\tconst responseData = (await mispApiRequest.call(\n\t\t\t\t\tthis,\n\t\t\t\t\t'GET',\n\t\t\t\t\t'/organisations',\n\t\t\t\t)) as LoadedOrgs;\n\t\t\t\treturn responseData.map((i) => ({ name: i.Organisation.name, value: i.Organisation.id }));\n\t\t\t},\n\n\t\t\tasync getSharingGroups(this: ILoadOptionsFunctions) {\n\t\t\t\tconst responseData = (await mispApiRequest.call(\n\t\t\t\t\tthis,\n\t\t\t\t\t'GET',\n\t\t\t\t\t'/sharing_groups',\n\t\t\t\t)) as LoadedSharingGroups;\n\t\t\t\treturn responseData.response.map((i) => ({\n\t\t\t\t\tname: i.SharingGroup.name,\n\t\t\t\t\tvalue: i.SharingGroup.id,\n\t\t\t\t}));\n\t\t\t},\n\n\t\t\tasync getTags(this: ILoadOptionsFunctions) {\n\t\t\t\tconst responseData = (await mispApiRequest.call(this, 'GET', '/tags')) as LoadedTags;\n\t\t\t\treturn responseData.Tag.map((i) => ({ name: i.name, value: i.id }));\n\t\t\t},\n\n\t\t\tasync getUsers(this: ILoadOptionsFunctions) {\n\t\t\t\tconst responseData = (await mispApiRequest.call(\n\t\t\t\t\tthis,\n\t\t\t\t\t'GET',\n\t\t\t\t\t'/admin/users',\n\t\t\t\t)) as LoadedUsers;\n\t\t\t\treturn responseData.map((i) => ({ name: i.User.email, value: i.User.id }));\n\t\t\t},\n\t\t},\n\t};\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t\tconst items = this.getInputData();\n\t\tconst returnData: INodeExecutionData[] = [];\n\n\t\tconst resource = this.getNodeParameter('resource', 0);\n\t\tconst operation = this.getNodeParameter('operation', 0);\n\n\t\tlet responseData;\n\n\t\tfor (let i = 0; i < items.length; i++) {\n\t\t\ttry {\n\t\t\t\tif (resource === 'attribute') {\n\t\t\t\t\t// **********************************************************************\n\t\t\t\t\t//                               attribute\n\t\t\t\t\t// **********************************************************************\n\n\t\t\t\t\tif (operation === 'create') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//            attribute: create\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst body = {\n\t\t\t\t\t\t\ttype: this.getNodeParameter('type', i),\n\t\t\t\t\t\t\tvalue: this.getNodeParameter('value', i),\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i);\n\n\t\t\t\t\t\tthrowOnMissingSharingGroup.call(this, additionalFields);\n\n\t\t\t\t\t\tif (Object.keys(additionalFields)) {\n\t\t\t\t\t\t\tObject.assign(body, additionalFields);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst eventId = this.getNodeParameter('eventId', i);\n\t\t\t\t\t\tconst endpoint = `/attributes/add/${eventId}`;\n\t\t\t\t\t\tresponseData = await mispApiRequest.call(this, 'POST', endpoint, body);\n\t\t\t\t\t\tresponseData = responseData.Attribute;\n\t\t\t\t\t} else if (operation === 'delete') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//            attribute: delete\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst attributeId = this.getNodeParameter('attributeId', i);\n\t\t\t\t\t\tconst endpoint = `/attributes/delete/${attributeId}`;\n\t\t\t\t\t\tresponseData = await mispApiRequest.call(this, 'DELETE', endpoint);\n\t\t\t\t\t} else if (operation === 'get') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//              attribute: get\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst attributeId = this.getNodeParameter('attributeId', i);\n\t\t\t\t\t\tconst endpoint = `/attributes/view/${attributeId}`;\n\t\t\t\t\t\tresponseData = await mispApiRequest.call(this, 'GET', endpoint);\n\t\t\t\t\t\tresponseData = responseData.Attribute;\n\t\t\t\t\t} else if (operation === 'getAll') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//            attribute: getAll\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tresponseData = await mispApiRequestAllItems.call(this, '/attributes');\n\t\t\t\t\t} else if (operation === 'search') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//            attribute: search\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tresponseData = await mispApiRestSearch.call(this, 'attributes', i);\n\t\t\t\t\t} else if (operation === 'update') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//            attribute: update\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst body = {};\n\t\t\t\t\t\tconst updateFields = this.getNodeParameter('updateFields', i);\n\n\t\t\t\t\t\tthrowOnEmptyUpdate.call(this, resource, updateFields);\n\t\t\t\t\t\tthrowOnMissingSharingGroup.call(this, updateFields);\n\n\t\t\t\t\t\tObject.assign(body, updateFields);\n\n\t\t\t\t\t\tconst attributeId = this.getNodeParameter('attributeId', i);\n\t\t\t\t\t\tconst endpoint = `/attributes/edit/${attributeId}`;\n\t\t\t\t\t\tresponseData = await mispApiRequest.call(this, 'PUT', endpoint, body);\n\t\t\t\t\t\tresponseData = responseData.Attribute;\n\t\t\t\t\t}\n\t\t\t\t} else if (resource === 'event') {\n\t\t\t\t\t// **********************************************************************\n\t\t\t\t\t//                                 event\n\t\t\t\t\t// **********************************************************************\n\n\t\t\t\t\tif (operation === 'create') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//              event: create\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst body = {\n\t\t\t\t\t\t\torg_id: this.getNodeParameter('org_id', i),\n\t\t\t\t\t\t\tinfo: this.getNodeParameter('information', i),\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i);\n\n\t\t\t\t\t\tthrowOnMissingSharingGroup.call(this, additionalFields);\n\n\t\t\t\t\t\tif (Object.keys(additionalFields)) {\n\t\t\t\t\t\t\tObject.assign(body, additionalFields);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await mispApiRequest.call(this, 'POST', '/events', body);\n\t\t\t\t\t\tresponseData = responseData.Event;\n\t\t\t\t\t} else if (operation === 'delete') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//              event: delete\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst eventId = this.getNodeParameter('eventId', i);\n\t\t\t\t\t\tconst endpoint = `/events/delete/${eventId}`;\n\t\t\t\t\t\tresponseData = await mispApiRequest.call(this, 'DELETE', endpoint);\n\t\t\t\t\t} else if (operation === 'get') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//                event: get\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst eventId = this.getNodeParameter('eventId', i);\n\t\t\t\t\t\tconst endpoint = `/events/view/${eventId}`;\n\t\t\t\t\t\tresponseData = await mispApiRequest.call(this, 'GET', endpoint);\n\t\t\t\t\t\tresponseData = responseData.Event;\n\t\t\t\t\t\tdelete responseData.Attribute; // prevent excessive payload size\n\t\t\t\t\t} else if (operation === 'getAll') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//              event: getAll\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tresponseData = await mispApiRequestAllItems.call(this, '/events');\n\t\t\t\t\t} else if (operation === 'search') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//            event: search\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tresponseData = await mispApiRestSearch.call(this, 'events', i);\n\t\t\t\t\t} else if (operation === 'publish') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//              event: publish\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst eventId = this.getNodeParameter('eventId', i);\n\t\t\t\t\t\tconst endpoint = `/events/publish/${eventId}`;\n\t\t\t\t\t\tresponseData = await mispApiRequest.call(this, 'POST', endpoint);\n\t\t\t\t\t} else if (operation === 'unpublish') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//             event: unpublish\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst eventId = this.getNodeParameter('eventId', i);\n\n\t\t\t\t\t\tconst endpoint = `/events/unpublish/${eventId}`;\n\t\t\t\t\t\tresponseData = await mispApiRequest.call(this, 'POST', endpoint);\n\t\t\t\t\t} else if (operation === 'update') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//              event: update\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst body = {};\n\t\t\t\t\t\tconst updateFields = this.getNodeParameter('updateFields', i);\n\n\t\t\t\t\t\tthrowOnEmptyUpdate.call(this, resource, updateFields);\n\t\t\t\t\t\tthrowOnMissingSharingGroup.call(this, updateFields);\n\n\t\t\t\t\t\tObject.assign(body, updateFields);\n\n\t\t\t\t\t\tconst eventId = this.getNodeParameter('eventId', i);\n\t\t\t\t\t\tconst endpoint = `/events/edit/${eventId}`;\n\t\t\t\t\t\tresponseData = await mispApiRequest.call(this, 'PUT', endpoint, body);\n\t\t\t\t\t\tresponseData = responseData.Event;\n\t\t\t\t\t\tdelete responseData.Attribute; // prevent excessive payload size\n\t\t\t\t\t}\n\t\t\t\t} else if (resource === 'eventTag') {\n\t\t\t\t\tif (operation === 'add') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//             eventTag: add\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst body = {\n\t\t\t\t\t\t\tevent: this.getNodeParameter('eventId', i),\n\t\t\t\t\t\t\ttag: this.getNodeParameter('tagId', i),\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tconst endpoint = '/events/addTag';\n\t\t\t\t\t\tresponseData = await mispApiRequest.call(this, 'POST', endpoint, body);\n\t\t\t\t\t} else if (operation === 'remove') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//             eventTag: remove\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst eventId = this.getNodeParameter('eventId', i);\n\t\t\t\t\t\tconst tagId = this.getNodeParameter('tagId', i);\n\n\t\t\t\t\t\tconst endpoint = `/events/removeTag/${eventId}/${tagId}`;\n\t\t\t\t\t\tresponseData = await mispApiRequest.call(this, 'POST', endpoint);\n\t\t\t\t\t}\n\t\t\t\t} else if (resource === 'feed') {\n\t\t\t\t\t// **********************************************************************\n\t\t\t\t\t//                                  feed\n\t\t\t\t\t// **********************************************************************\n\n\t\t\t\t\tif (operation === 'create') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//               feed: create\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst url = this.getNodeParameter('url', i) as string;\n\n\t\t\t\t\t\tthrowOnInvalidUrl.call(this, url);\n\n\t\t\t\t\t\tconst body = {\n\t\t\t\t\t\t\tname: this.getNodeParameter('name', i),\n\t\t\t\t\t\t\tprovider: this.getNodeParameter('provider', i),\n\t\t\t\t\t\t\turl,\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i);\n\n\t\t\t\t\t\tif (Object.keys(additionalFields)) {\n\t\t\t\t\t\t\tObject.assign(body, additionalFields);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await mispApiRequest.call(this, 'POST', '/feeds/add', body);\n\t\t\t\t\t\tresponseData = responseData.Feed;\n\t\t\t\t\t} else if (operation === 'disable') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//              feed: disable\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst feedId = this.getNodeParameter('feedId', i);\n\n\t\t\t\t\t\tconst endpoint = `/feeds/disable/${feedId}`;\n\t\t\t\t\t\tresponseData = await mispApiRequest.call(this, 'POST', endpoint);\n\t\t\t\t\t} else if (operation === 'enable') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//               feed: enable\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst feedId = this.getNodeParameter('feedId', i);\n\t\t\t\t\t\tconst endpoint = `/feeds/enable/${feedId}`;\n\t\t\t\t\t\tresponseData = await mispApiRequest.call(this, 'POST', endpoint);\n\t\t\t\t\t} else if (operation === 'get') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//                feed: get\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst feedId = this.getNodeParameter('feedId', i);\n\t\t\t\t\t\tresponseData = await mispApiRequest.call(this, 'GET', `/feeds/view/${feedId}`);\n\t\t\t\t\t\tresponseData = responseData.Feed;\n\t\t\t\t\t} else if (operation === 'getAll') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//               feed: getAll\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tresponseData = (await mispApiRequestAllItems.call(this, '/feeds')) as Array<{\n\t\t\t\t\t\t\tFeed: unknown;\n\t\t\t\t\t\t}>;\n\t\t\t\t\t\tresponseData = responseData.map((entry) => entry.Feed);\n\t\t\t\t\t} else if (operation === 'update') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//               feed: update\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst body = {};\n\t\t\t\t\t\tconst updateFields = this.getNodeParameter('updateFields', i) as IDataObject & {\n\t\t\t\t\t\t\turl: string;\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tthrowOnEmptyUpdate.call(this, resource, updateFields);\n\n\t\t\t\t\t\tif (updateFields.url) {\n\t\t\t\t\t\t\tthrowOnInvalidUrl.call(this, updateFields.url);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tObject.assign(body, updateFields);\n\n\t\t\t\t\t\tconst feedId = this.getNodeParameter('feedId', i);\n\t\t\t\t\t\tresponseData = await mispApiRequest.call(this, 'PUT', `/feeds/edit/${feedId}`, body);\n\t\t\t\t\t\tresponseData = responseData.Feed;\n\t\t\t\t\t}\n\t\t\t\t} else if (resource === 'galaxy') {\n\t\t\t\t\t// **********************************************************************\n\t\t\t\t\t//                                 galaxy\n\t\t\t\t\t// **********************************************************************\n\n\t\t\t\t\tif (operation === 'delete') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//              galaxy: delete\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst galaxyId = this.getNodeParameter('galaxyId', i);\n\t\t\t\t\t\tconst endpoint = `/galaxies/delete/${galaxyId}`;\n\t\t\t\t\t\tresponseData = await mispApiRequest.call(this, 'DELETE', endpoint);\n\t\t\t\t\t} else if (operation === 'get') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//               galaxy: get\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst galaxyId = this.getNodeParameter('galaxyId', i);\n\t\t\t\t\t\tconst endpoint = `/galaxies/view/${galaxyId}`;\n\t\t\t\t\t\tresponseData = await mispApiRequest.call(this, 'GET', endpoint);\n\t\t\t\t\t\tresponseData = responseData.Galaxy;\n\t\t\t\t\t} else if (operation === 'getAll') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//              galaxy: getAll\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tresponseData = (await mispApiRequestAllItems.call(this, '/galaxies')) as Array<{\n\t\t\t\t\t\t\tGalaxy: unknown;\n\t\t\t\t\t\t}>;\n\t\t\t\t\t\tresponseData = responseData.map((entry) => entry.Galaxy);\n\t\t\t\t\t}\n\t\t\t\t} else if (resource === 'noticelist') {\n\t\t\t\t\t// **********************************************************************\n\t\t\t\t\t//                               noticelist\n\t\t\t\t\t// **********************************************************************\n\n\t\t\t\t\tif (operation === 'get') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//             noticelist: get\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst noticelistId = this.getNodeParameter('noticelistId', i);\n\t\t\t\t\t\tconst endpoint = `/noticelists/view/${noticelistId}`;\n\t\t\t\t\t\tresponseData = await mispApiRequest.call(this, 'GET', endpoint);\n\t\t\t\t\t\tresponseData = responseData.Noticelist;\n\t\t\t\t\t} else if (operation === 'getAll') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//            noticelist: getAll\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tresponseData = (await mispApiRequestAllItems.call(this, '/noticelists')) as Array<{\n\t\t\t\t\t\t\tNoticelist: unknown;\n\t\t\t\t\t\t}>;\n\t\t\t\t\t\tresponseData = responseData.map((entry) => entry.Noticelist);\n\t\t\t\t\t}\n\t\t\t\t} else if (resource === 'object') {\n\t\t\t\t\t// **********************************************************************\n\t\t\t\t\t//                                    object\n\t\t\t\t\t// **********************************************************************\n\t\t\t\t\tif (operation === 'search') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//            attribute: search\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tresponseData = await mispApiRestSearch.call(this, 'objects', i);\n\t\t\t\t\t}\n\t\t\t\t} else if (resource === 'organisation') {\n\t\t\t\t\t// **********************************************************************\n\t\t\t\t\t//                              organisation\n\t\t\t\t\t// **********************************************************************\n\n\t\t\t\t\tif (operation === 'create') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//           organisation: create\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst body = {\n\t\t\t\t\t\t\tname: this.getNodeParameter('name', i),\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i);\n\n\t\t\t\t\t\tif (Object.keys(additionalFields)) {\n\t\t\t\t\t\t\tObject.assign(body, additionalFields);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst endpoint = '/admin/organisations/add';\n\t\t\t\t\t\tresponseData = await mispApiRequest.call(this, 'POST', endpoint, body);\n\t\t\t\t\t\tresponseData = responseData.Organisation;\n\t\t\t\t\t} else if (operation === 'delete') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//           organisation: delete\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst organisationId = this.getNodeParameter('organisationId', i);\n\t\t\t\t\t\tconst endpoint = `/admin/organisations/delete/${organisationId}`;\n\t\t\t\t\t\tresponseData = await mispApiRequest.call(this, 'DELETE', endpoint);\n\t\t\t\t\t} else if (operation === 'get') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//            organisation: get\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst organisationId = this.getNodeParameter('organisationId', i);\n\t\t\t\t\t\tconst endpoint = `/organisations/view/${organisationId}`;\n\t\t\t\t\t\tresponseData = await mispApiRequest.call(this, 'GET', endpoint);\n\t\t\t\t\t\tresponseData = responseData.Organisation;\n\t\t\t\t\t} else if (operation === 'getAll') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//           organisation: getAll\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tresponseData = (await mispApiRequestAllItems.call(this, '/organisations')) as Array<{\n\t\t\t\t\t\t\tOrganisation: unknown;\n\t\t\t\t\t\t}>;\n\t\t\t\t\t\tresponseData = responseData.map((entry) => entry.Organisation);\n\t\t\t\t\t} else if (operation === 'update') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//           organisation: update\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst body = {};\n\t\t\t\t\t\tconst updateFields = this.getNodeParameter('updateFields', i);\n\t\t\t\t\t\tthrowOnEmptyUpdate.call(this, resource, updateFields);\n\t\t\t\t\t\tObject.assign(body, updateFields);\n\n\t\t\t\t\t\tconst organisationId = this.getNodeParameter('organisationId', i);\n\t\t\t\t\t\tconst endpoint = `/admin/organisations/edit/${organisationId}`;\n\t\t\t\t\t\tresponseData = await mispApiRequest.call(this, 'PUT', endpoint, body);\n\t\t\t\t\t\tresponseData = responseData.Organisation;\n\t\t\t\t\t}\n\t\t\t\t} else if (resource === 'tag') {\n\t\t\t\t\t// **********************************************************************\n\t\t\t\t\t//                                  tag\n\t\t\t\t\t// **********************************************************************\n\n\t\t\t\t\tif (operation === 'create') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//               tag: create\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst body = {\n\t\t\t\t\t\t\tname: this.getNodeParameter('name', i),\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tconst { colour } = this.getNodeParameter('additionalFields', i) as {\n\t\t\t\t\t\t\tname?: string;\n\t\t\t\t\t\t\tcolour?: string;\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tif (colour) {\n\t\t\t\t\t\t\tObject.assign(body, {\n\t\t\t\t\t\t\t\tcolour: !colour.startsWith('#') ? `#${colour}` : colour,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await mispApiRequest.call(this, 'POST', '/tags/add', body);\n\t\t\t\t\t\tresponseData = responseData.Tag;\n\t\t\t\t\t} else if (operation === 'delete') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//               tag: delete\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst tagId = this.getNodeParameter('tagId', i);\n\t\t\t\t\t\tresponseData = await mispApiRequest.call(this, 'POST', `/tags/delete/${tagId}`);\n\t\t\t\t\t} else if (operation === 'getAll') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//               tag: getAll\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tresponseData = (await mispApiRequest.call(this, 'GET', '/tags')) as LoadedTags;\n\n\t\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', 0);\n\n\t\t\t\t\t\tif (!returnAll) {\n\t\t\t\t\t\t\tconst limit = this.getNodeParameter('limit', 0);\n\t\t\t\t\t\t\tresponseData = responseData.Tag.slice(0, limit);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (operation === 'update') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//               tag: update\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst body = {};\n\t\t\t\t\t\tconst updateFields = this.getNodeParameter('updateFields', i) as {\n\t\t\t\t\t\t\tcolour?: string;\n\t\t\t\t\t\t\tname?: string;\n\t\t\t\t\t\t};\n\t\t\t\t\t\tthrowOnEmptyUpdate.call(this, resource, updateFields);\n\t\t\t\t\t\tObject.assign(body, updateFields);\n\n\t\t\t\t\t\tconst { colour, name } = updateFields;\n\n\t\t\t\t\t\tObject.assign(body, {\n\t\t\t\t\t\t\t...(name && { name }),\n\t\t\t\t\t\t\t...(colour && { colour: !colour.startsWith('#') ? `#${colour}` : colour }),\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tconst tagId = this.getNodeParameter('tagId', i);\n\t\t\t\t\t\tresponseData = await mispApiRequest.call(this, 'POST', `/tags/edit/${tagId}`, body);\n\t\t\t\t\t\tresponseData = responseData.Tag;\n\t\t\t\t\t}\n\t\t\t\t} else if (resource === 'user') {\n\t\t\t\t\t// **********************************************************************\n\t\t\t\t\t//                                  user\n\t\t\t\t\t// **********************************************************************\n\n\t\t\t\t\tif (operation === 'create') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//               user: create\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst body = {\n\t\t\t\t\t\t\temail: this.getNodeParameter('email', i),\n\t\t\t\t\t\t\trole_id: this.getNodeParameter('role_id', i),\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i);\n\n\t\t\t\t\t\tif (Object.keys(additionalFields)) {\n\t\t\t\t\t\t\tObject.assign(body, additionalFields);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await mispApiRequest.call(this, 'POST', '/admin/users/add', body);\n\t\t\t\t\t\tresponseData = responseData.User;\n\t\t\t\t\t} else if (operation === 'delete') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//               user: delete\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst userId = this.getNodeParameter('userId', i);\n\t\t\t\t\t\tconst endpoint = `/admin/users/delete/${userId}`;\n\t\t\t\t\t\tresponseData = await mispApiRequest.call(this, 'DELETE', endpoint);\n\t\t\t\t\t} else if (operation === 'get') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//                user: get\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst userId = this.getNodeParameter('userId', i);\n\t\t\t\t\t\tconst endpoint = `/admin/users/view/${userId}`;\n\t\t\t\t\t\tresponseData = await mispApiRequest.call(this, 'GET', endpoint);\n\t\t\t\t\t\tresponseData = responseData.User;\n\t\t\t\t\t} else if (operation === 'getAll') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//               user: getAll\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tresponseData = (await mispApiRequestAllItems.call(this, '/admin/users')) as Array<{\n\t\t\t\t\t\t\tUser: unknown;\n\t\t\t\t\t\t}>;\n\t\t\t\t\t\tresponseData = responseData.map((entry) => entry.User);\n\t\t\t\t\t} else if (operation === 'update') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//               user: update\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst body = {};\n\t\t\t\t\t\tconst updateFields = this.getNodeParameter('updateFields', i);\n\t\t\t\t\t\tthrowOnEmptyUpdate.call(this, resource, updateFields);\n\t\t\t\t\t\tObject.assign(body, updateFields);\n\n\t\t\t\t\t\tconst userId = this.getNodeParameter('userId', i);\n\t\t\t\t\t\tconst endpoint = `/admin/users/edit/${userId}`;\n\t\t\t\t\t\tresponseData = await mispApiRequest.call(this, 'PUT', endpoint, body);\n\t\t\t\t\t\tresponseData = responseData.User;\n\t\t\t\t\t}\n\t\t\t\t} else if (resource === 'warninglist') {\n\t\t\t\t\t// **********************************************************************\n\t\t\t\t\t//                              warninglist\n\t\t\t\t\t// **********************************************************************\n\n\t\t\t\t\tif (operation === 'get') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//             warninglist: get\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst warninglistId = this.getNodeParameter('warninglistId', i);\n\t\t\t\t\t\tconst endpoint = `/warninglists/view/${warninglistId}`;\n\t\t\t\t\t\tresponseData = await mispApiRequest.call(this, 'GET', endpoint);\n\t\t\t\t\t\tresponseData = responseData.Warninglist;\n\t\t\t\t\t} else if (operation === 'getAll') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//           warninglist: getAll\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tresponseData = (await mispApiRequest.call(this, 'GET', '/warninglists')) as {\n\t\t\t\t\t\t\tWarninglists: Array<{ Warninglist: unknown }>;\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', 0);\n\n\t\t\t\t\t\tif (!returnAll) {\n\t\t\t\t\t\t\tconst limit = this.getNodeParameter('limit', 0);\n\t\t\t\t\t\t\tresponseData = responseData.Warninglists.slice(0, limit).map(\n\t\t\t\t\t\t\t\t(entry) => entry.Warninglist,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresponseData = responseData.Warninglists.map((entry) => entry.Warninglist);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\tconst executionErrorData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\tthis.helpers.returnJsonArray({ error: error.message }),\n\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t);\n\t\t\t\t\treturnData.push(...executionErrorData);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tthrow error;\n\t\t\t}\n\n\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t{ itemData: { item: i } },\n\t\t\t);\n\n\t\t\treturnData.push(...executionData);\n\t\t}\n\n\t\treturn [returnData];\n\t}\n}\n"],"mappings":"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","names":[]}