{"version":3,"sources":["../../../nodes/MQTT/MqttTrigger.node.ts"],"sourcesContent":["import type { ISubscriptionMap } from 'mqtt';\nimport type { QoS } from 'mqtt-packet';\nimport type {\n\tITriggerFunctions,\n\tIDataObject,\n\tINodeType,\n\tINodeTypeDescription,\n\tITriggerResponse,\n\tIRun,\n} from 'n8n-workflow';\nimport { NodeConnectionTypes, NodeOperationError } from 'n8n-workflow';\n\nimport { createClient, type MqttCredential } from './GenericFunctions';\n\ninterface Options {\n\tjsonParseBody: boolean;\n\tonlyMessage: boolean;\n\tparallelProcessing: boolean;\n}\n\nexport class MqttTrigger implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'MQTT Trigger',\n\t\tname: 'mqttTrigger',\n\t\ticon: 'file:mqtt.svg',\n\t\tgroup: ['trigger'],\n\t\tversion: 1,\n\t\tdescription: 'Listens to MQTT events',\n\t\teventTriggerDescription: '',\n\t\tdefaults: {\n\t\t\tname: 'MQTT Trigger',\n\t\t},\n\t\ttriggerPanel: {\n\t\t\theader: '',\n\t\t\texecutionsHelp: {\n\t\t\t\tinactive:\n\t\t\t\t\t\"<b>While building your workflow</b>, click the 'execute step' button, then trigger an MQTT event. This will trigger an execution, which will show up in this editor.<br /> <br /><b>Once you're happy with your workflow</b>, <a data-key='activate'>activate</a> it. Then every time a change is detected, the workflow will execute. These executions will show up in the <a data-key='executions'>executions list</a>, but not in the editor.\",\n\t\t\t\tactive:\n\t\t\t\t\t\"<b>While building your workflow</b>, click the 'execute step' button, then trigger an MQTT event. This will trigger an execution, which will show up in this editor.<br /> <br /><b>Your workflow will also execute automatically</b>, since it's activated. Every time a change is detected, this node will trigger an execution. These executions will show up in the <a data-key='executions'>executions list</a>, but not in the editor.\",\n\t\t\t},\n\t\t\tactivationHint:\n\t\t\t\t\"Once you’ve finished building your workflow, <a data-key='activate'>activate</a> it to have it also listen continuously (you just won’t see those executions here).\",\n\t\t},\n\t\tinputs: [],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tcredentials: [\n\t\t\t{\n\t\t\t\tname: 'mqtt',\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Topics',\n\t\t\t\tname: 'topics',\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: '',\n\t\t\t\tdescription:\n\t\t\t\t\t'Topics to subscribe to, multiple can be defined with comma. Wildcard characters are supported (+ - for single level and # - for multi level). By default all subscription used QoS=0. To set a different QoS, write the QoS desired after the topic preceded by a colom. For Example: topicA:1,topicB:2',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Options',\n\t\t\t\tname: 'options',\n\t\t\t\ttype: 'collection',\n\t\t\t\tplaceholder: 'Add option',\n\t\t\t\tdefault: {},\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'JSON Parse Body',\n\t\t\t\t\t\tname: 'jsonParseBody',\n\t\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\t\tdefault: false,\n\t\t\t\t\t\tdescription: 'Whether to try parse the message to an object',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Only Message',\n\t\t\t\t\t\tname: 'onlyMessage',\n\t\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\t\tdefault: false,\n\t\t\t\t\t\tdescription: 'Whether to return only the message property',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Parallel Processing',\n\t\t\t\t\t\tname: 'parallelProcessing',\n\t\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\t\tdefault: true,\n\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t'Whether to process messages in parallel or by keeping the message in order',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t],\n\t};\n\n\tasync trigger(this: ITriggerFunctions): Promise<ITriggerResponse> {\n\t\tconst topics = (this.getNodeParameter('topics') as string).split(',');\n\t\tif (!topics?.length) {\n\t\t\tthrow new NodeOperationError(this.getNode(), 'Topics are mandatory!');\n\t\t}\n\n\t\tconst topicsQoS: ISubscriptionMap = {};\n\t\tfor (const data of topics) {\n\t\t\tconst [topic, qosString] = data.split(':');\n\t\t\tlet qos = qosString ? parseInt(qosString, 10) : 0;\n\t\t\tif (qos < 0 || qos > 2) qos = 0;\n\t\t\ttopicsQoS[topic] = { qos: qos as QoS };\n\t\t}\n\n\t\tconst options = this.getNodeParameter('options') as Options;\n\t\tconst credentials = await this.getCredentials<MqttCredential>('mqtt');\n\t\tconst client = await createClient(credentials);\n\n\t\tconst parsePayload = (topic: string, payload: Buffer) => {\n\t\t\tlet message = payload.toString();\n\n\t\t\tif (options.jsonParseBody) {\n\t\t\t\ttry {\n\t\t\t\t\tmessage = JSON.parse(message);\n\t\t\t\t} catch (e) {}\n\t\t\t}\n\n\t\t\tlet result: IDataObject = { message, topic };\n\n\t\t\tif (options.onlyMessage) {\n\t\t\t\t//@ts-ignore\n\t\t\t\tresult = [message];\n\t\t\t}\n\n\t\t\treturn [this.helpers.returnJsonArray([result])];\n\t\t};\n\n\t\tconst manualTriggerFunction = async () =>\n\t\t\tawait new Promise<void>(async (resolve) => {\n\t\t\t\tclient.once('message', (topic, payload) => {\n\t\t\t\t\tthis.emit(parsePayload(topic, payload));\n\t\t\t\t\tresolve();\n\t\t\t\t});\n\t\t\t\tawait client.subscribeAsync(topicsQoS);\n\t\t\t});\n\n\t\tif (this.getMode() === 'trigger') {\n\t\t\tconst donePromise = !options.parallelProcessing\n\t\t\t\t? this.helpers.createDeferredPromise<IRun>()\n\t\t\t\t: undefined;\n\t\t\tclient.on('message', async (topic, payload) => {\n\t\t\t\tthis.emit(parsePayload(topic, payload), undefined, donePromise);\n\t\t\t\tawait donePromise?.promise;\n\t\t\t});\n\t\t\tawait client.subscribeAsync(topicsQoS);\n\t\t}\n\n\t\tasync function closeFunction() {\n\t\t\tawait client.endAsync();\n\t\t}\n\n\t\treturn {\n\t\t\tcloseFunction,\n\t\t\tmanualTriggerFunction,\n\t\t};\n\t}\n}\n"],"mappings":"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","names":[]}