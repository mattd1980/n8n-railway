{"version":3,"sources":["../../../nodes/MQTT/Mqtt.node.ts"],"sourcesContent":["import type { IClientPublishOptions } from 'mqtt';\nimport {\n\ttype IExecuteFunctions,\n\ttype ICredentialsDecrypted,\n\ttype ICredentialTestFunctions,\n\ttype INodeCredentialTestResult,\n\ttype INodeExecutionData,\n\ttype INodeType,\n\ttype INodeTypeDescription,\n\tNodeConnectionTypes,\n\tensureError,\n} from 'n8n-workflow';\n\nimport { createClient, type MqttCredential } from './GenericFunctions';\n\ntype PublishOption = Pick<IClientPublishOptions, 'qos' | 'retain'>;\n\nexport class Mqtt implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'MQTT',\n\t\tname: 'mqtt',\n\t\ticon: 'file:mqtt.svg',\n\t\tgroup: ['input'],\n\t\tversion: 1,\n\t\tdescription: 'Push messages to MQTT',\n\t\tdefaults: {\n\t\t\tname: 'MQTT',\n\t\t},\n\t\tusableAsTool: true,\n\t\tinputs: [NodeConnectionTypes.Main],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tcredentials: [\n\t\t\t{\n\t\t\t\tname: 'mqtt',\n\t\t\t\trequired: true,\n\t\t\t\ttestedBy: 'mqttConnectionTest',\n\t\t\t},\n\t\t],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Topic',\n\t\t\t\tname: 'topic',\n\t\t\t\ttype: 'string',\n\t\t\t\trequired: true,\n\t\t\t\tdefault: '',\n\t\t\t\tdescription: 'The topic to publish to',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Send Input Data',\n\t\t\t\tname: 'sendInputData',\n\t\t\t\ttype: 'boolean',\n\t\t\t\tdefault: true,\n\t\t\t\tdescription: 'Whether to send the data the node receives as JSON',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Message',\n\t\t\t\tname: 'message',\n\t\t\t\ttype: 'string',\n\t\t\t\trequired: true,\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tsendInputData: [false],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdefault: '',\n\t\t\t\tdescription: 'The message to publish',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Options',\n\t\t\t\tname: 'options',\n\t\t\t\ttype: 'collection',\n\t\t\t\tplaceholder: 'Add option',\n\t\t\t\tdefault: {},\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'QoS',\n\t\t\t\t\t\tname: 'qos',\n\t\t\t\t\t\ttype: 'options',\n\t\t\t\t\t\toptions: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: 'Received at Most Once',\n\t\t\t\t\t\t\t\tvalue: 0,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: 'Received at Least Once',\n\t\t\t\t\t\t\t\tvalue: 1,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: 'Exactly Once',\n\t\t\t\t\t\t\t\tvalue: 2,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t\tdefault: 0,\n\t\t\t\t\t\tdescription: 'QoS subscription level',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Retain',\n\t\t\t\t\t\tname: 'retain',\n\t\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\t\tdefault: false,\n\t\t\t\t\t\t// eslint-disable-next-line n8n-nodes-base/node-param-description-boolean-without-whether\n\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t'Normally if a publisher publishes a message to a topic, and no one is subscribed to that topic the message is simply discarded by the broker. However the publisher can tell the broker to keep the last message on that topic by setting the retain flag to true.',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t],\n\t};\n\n\tmethods = {\n\t\tcredentialTest: {\n\t\t\tasync mqttConnectionTest(\n\t\t\t\tthis: ICredentialTestFunctions,\n\t\t\t\tcredential: ICredentialsDecrypted,\n\t\t\t): Promise<INodeCredentialTestResult> {\n\t\t\t\tconst credentials = credential.data as unknown as MqttCredential;\n\n\t\t\t\ttry {\n\t\t\t\t\tconst client = await createClient(credentials);\n\t\t\t\t\tclient.end();\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconst error = ensureError(e);\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\tstatus: 'Error',\n\t\t\t\t\t\tmessage: error.message,\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\treturn {\n\t\t\t\t\tstatus: 'OK',\n\t\t\t\t\tmessage: 'Connection successful!',\n\t\t\t\t};\n\t\t\t},\n\t\t},\n\t};\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t\tconst credentials = await this.getCredentials<MqttCredential>('mqtt');\n\t\tconst client = await createClient(credentials);\n\n\t\tconst publishPromises = [];\n\t\tconst items = this.getInputData();\n\t\tfor (let i = 0; i < items.length; i++) {\n\t\t\tconst topic = this.getNodeParameter('topic', i) as string;\n\t\t\tconst options = this.getNodeParameter('options', i) as unknown as PublishOption;\n\t\t\tconst sendInputData = this.getNodeParameter('sendInputData', i) as boolean;\n\t\t\tconst message = sendInputData\n\t\t\t\t? JSON.stringify(items[i].json)\n\t\t\t\t: (this.getNodeParameter('message', i) as string);\n\t\t\tpublishPromises.push(client.publishAsync(topic, message, options));\n\t\t}\n\n\t\tawait Promise.all(publishPromises);\n\n\t\t// wait for the in-flight messages to be acked.\n\t\t// needed for messages with QoS 1 & 2\n\t\tawait client.endAsync();\n\n\t\treturn [items];\n\t}\n}\n"],"mappings":"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","names":[]}