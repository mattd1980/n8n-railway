{"version":3,"sources":["../../../../nodes/Aws/SQS/AwsSqs.node.ts"],"sourcesContent":["import { pascalCase } from 'change-case';\nimport type {\n\tIDataObject,\n\tIExecuteFunctions,\n\tILoadOptionsFunctions,\n\tINodeExecutionData,\n\tINodeParameters,\n\tINodePropertyOptions,\n\tINodeType,\n\tINodeTypeDescription,\n\tJsonObject,\n} from 'n8n-workflow';\nimport { NodeApiError, NodeConnectionTypes } from 'n8n-workflow';\nimport { URL } from 'url';\n\nimport { awsApiRequestSOAP } from '../GenericFunctions';\n\nexport class AwsSqs implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'AWS SQS',\n\t\tname: 'awsSqs',\n\t\ticon: 'file:sqs.svg',\n\t\tgroup: ['output'],\n\t\tversion: 1,\n\t\tsubtitle: '={{$parameter[\"operation\"]}}',\n\t\tdescription: 'Sends messages to AWS SQS',\n\t\tdefaults: {\n\t\t\tname: 'AWS SQS',\n\t\t},\n\t\tinputs: [NodeConnectionTypes.Main],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tcredentials: [\n\t\t\t{\n\t\t\t\tname: 'aws',\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Operation',\n\t\t\t\tname: 'operation',\n\t\t\t\ttype: 'options',\n\t\t\t\tnoDataExpression: true,\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Send Message',\n\t\t\t\t\t\tvalue: 'sendMessage',\n\t\t\t\t\t\tdescription: 'Send a message to a queue',\n\t\t\t\t\t\taction: 'Send a message to a queue',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'sendMessage',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Queue Name or ID',\n\t\t\t\tname: 'queue',\n\t\t\t\ttype: 'options',\n\t\t\t\ttypeOptions: {\n\t\t\t\t\tloadOptionsMethod: 'getQueues',\n\t\t\t\t},\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['sendMessage'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\toptions: [],\n\t\t\t\tdefault: '',\n\t\t\t\trequired: true,\n\t\t\t\tdescription:\n\t\t\t\t\t'Queue to send a message to. Choose from the list, or specify an ID using an <a href=\"https://docs.n8n.io/code/expressions/\">expression</a>.',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Queue Type',\n\t\t\t\tname: 'queueType',\n\t\t\t\ttype: 'options',\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'FIFO',\n\t\t\t\t\t\tvalue: 'fifo',\n\t\t\t\t\t\tdescription: 'FIFO SQS queue',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Standard',\n\t\t\t\t\t\tvalue: 'standard',\n\t\t\t\t\t\tdescription: 'Standard SQS queue',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'standard',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Send Input Data',\n\t\t\t\tname: 'sendInputData',\n\t\t\t\ttype: 'boolean',\n\t\t\t\tdefault: true,\n\t\t\t\tdescription: 'Whether to send the data the node receives as JSON to SQS',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Message',\n\t\t\t\tname: 'message',\n\t\t\t\ttype: 'string',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['sendMessage'],\n\t\t\t\t\t\tsendInputData: [false],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\trequired: true,\n\t\t\t\tdefault: '',\n\t\t\t\tdescription: 'Message to send to the queue',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Message Group ID',\n\t\t\t\tname: 'messageGroupId',\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: '',\n\t\t\t\tdescription:\n\t\t\t\t\t'Tag that specifies that a message belongs to a specific message group. Applies only to FIFO (first-in-first-out) queues.',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tqueueType: ['fifo'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Options',\n\t\t\t\tname: 'options',\n\t\t\t\ttype: 'collection',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['sendMessage'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdefault: {},\n\t\t\t\tplaceholder: 'Add option',\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Delay Seconds',\n\t\t\t\t\t\tname: 'delaySeconds',\n\t\t\t\t\t\ttype: 'number',\n\t\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\t\t'/queueType': ['standard'],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\tdescription: 'How long, in seconds, to delay a message for',\n\t\t\t\t\t\tdefault: 0,\n\t\t\t\t\t\ttypeOptions: {\n\t\t\t\t\t\t\tminValue: 0,\n\t\t\t\t\t\t\tmaxValue: 900,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Message Attributes',\n\t\t\t\t\t\tname: 'messageAttributes',\n\t\t\t\t\t\tplaceholder: 'Add Attribute',\n\t\t\t\t\t\ttype: 'fixedCollection',\n\t\t\t\t\t\ttypeOptions: {\n\t\t\t\t\t\t\tmultipleValues: true,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tdescription: 'Attributes to set',\n\t\t\t\t\t\tdefault: {},\n\t\t\t\t\t\toptions: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: 'binary',\n\t\t\t\t\t\t\t\tdisplayName: 'Binary',\n\t\t\t\t\t\t\t\tvalues: [\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tdisplayName: 'Name',\n\t\t\t\t\t\t\t\t\t\tname: 'name',\n\t\t\t\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\t\t\t\t\tdescription: 'Name of the attribute',\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tdisplayName: 'Property Name',\n\t\t\t\t\t\t\t\t\t\tname: 'dataPropertyName',\n\t\t\t\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\t\t\t\tdefault: 'data',\n\t\t\t\t\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t\t\t\t\t'Name of the binary property which contains the data for the message attribute',\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: 'number',\n\t\t\t\t\t\t\t\tdisplayName: 'Number',\n\t\t\t\t\t\t\t\tvalues: [\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tdisplayName: 'Name',\n\t\t\t\t\t\t\t\t\t\tname: 'name',\n\t\t\t\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\t\t\t\t\tdescription: 'Name of the attribute',\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tdisplayName: 'Value',\n\t\t\t\t\t\t\t\t\t\tname: 'value',\n\t\t\t\t\t\t\t\t\t\ttype: 'number',\n\t\t\t\t\t\t\t\t\t\tdefault: 0,\n\t\t\t\t\t\t\t\t\t\tdescription: 'Number value of the attribute',\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: 'string',\n\t\t\t\t\t\t\t\tdisplayName: 'String',\n\t\t\t\t\t\t\t\tvalues: [\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tdisplayName: 'Name',\n\t\t\t\t\t\t\t\t\t\tname: 'name',\n\t\t\t\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\t\t\t\t\tdescription: 'Name of the attribute',\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tdisplayName: 'Value',\n\t\t\t\t\t\t\t\t\t\tname: 'value',\n\t\t\t\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\t\t\t\t\tdescription: 'String value of attribute',\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Message Deduplication ID',\n\t\t\t\t\t\tname: 'messageDeduplicationId',\n\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t'Token used for deduplication of sent messages. Applies only to FIFO (first-in-first-out) queues.',\n\t\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\t\t'/queueType': ['fifo'],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t],\n\t};\n\n\tmethods = {\n\t\tloadOptions: {\n\t\t\t// Get all the available queues to display them to user so that it can be selected easily\n\t\t\tasync getQueues(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst params = ['Version=2012-11-05', 'Action=ListQueues'];\n\n\t\t\t\tlet data;\n\t\t\t\ttry {\n\t\t\t\t\t// loads first 1000 queues from SQS\n\t\t\t\t\tdata = await awsApiRequestSOAP.call(this, 'sqs', 'GET', `?${params.join('&')}`);\n\t\t\t\t} catch (error) {\n\t\t\t\t\tthrow new NodeApiError(this.getNode(), error as JsonObject);\n\t\t\t\t}\n\n\t\t\t\tlet queues = data.ListQueuesResponse.ListQueuesResult.QueueUrl;\n\t\t\t\tif (!queues) {\n\t\t\t\t\treturn [];\n\t\t\t\t}\n\n\t\t\t\tif (!Array.isArray(queues)) {\n\t\t\t\t\t// If user has only a single queue no array get returned so we make\n\t\t\t\t\t// one manually to be able to process everything identically\n\t\t\t\t\tqueues = [queues];\n\t\t\t\t}\n\n\t\t\t\treturn queues.map((queueUrl: string) => {\n\t\t\t\t\tconst urlParts = queueUrl.split('/');\n\t\t\t\t\tconst name = urlParts[urlParts.length - 1];\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\tname,\n\t\t\t\t\t\tvalue: queueUrl,\n\t\t\t\t\t};\n\t\t\t\t});\n\t\t\t},\n\t\t},\n\t};\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t\tconst items = this.getInputData();\n\t\tconst returnData: IDataObject[] = [];\n\n\t\tconst operation = this.getNodeParameter('operation', 0);\n\n\t\tfor (let i = 0; i < items.length; i++) {\n\t\t\ttry {\n\t\t\t\tconst queueUrl = this.getNodeParameter('queue', i) as string;\n\t\t\t\tconst queuePath = new URL(queueUrl).pathname;\n\n\t\t\t\tconst params = ['Version=2012-11-05', `Action=${pascalCase(operation)}`];\n\n\t\t\t\tconst options = this.getNodeParameter('options', i, {});\n\t\t\t\tconst sendInputData = this.getNodeParameter('sendInputData', i) as boolean;\n\n\t\t\t\tlet message = sendInputData\n\t\t\t\t\t? JSON.stringify(items[i].json)\n\t\t\t\t\t: this.getNodeParameter('message', i);\n\n\t\t\t\t// This prevents [object Object] from being sent as message when sending json in an expression\n\t\t\t\tif (typeof message === 'object') {\n\t\t\t\t\tmessage = JSON.stringify(message);\n\t\t\t\t}\n\n\t\t\t\tparams.push(`MessageBody=${encodeURIComponent(message as string)}`);\n\n\t\t\t\tif (options.delaySeconds) {\n\t\t\t\t\tparams.push(`DelaySeconds=${options.delaySeconds}`);\n\t\t\t\t}\n\n\t\t\t\tconst queueType = this.getNodeParameter('queueType', i, {}) as string;\n\t\t\t\tif (queueType === 'fifo') {\n\t\t\t\t\tconst messageDeduplicationId = this.getNodeParameter(\n\t\t\t\t\t\t'options.messageDeduplicationId',\n\t\t\t\t\t\ti,\n\t\t\t\t\t\t'',\n\t\t\t\t\t) as string;\n\t\t\t\t\tif (messageDeduplicationId) {\n\t\t\t\t\t\tparams.push(`MessageDeduplicationId=${messageDeduplicationId}`);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst messageGroupId = this.getNodeParameter('messageGroupId', i) as string;\n\t\t\t\t\tif (messageGroupId) {\n\t\t\t\t\t\tparams.push(`MessageGroupId=${messageGroupId}`);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tlet attributeCount = 0;\n\t\t\t\t// Add string values\n\t\t\t\t(\n\t\t\t\t\tthis.getNodeParameter('options.messageAttributes.string', i, []) as INodeParameters[]\n\t\t\t\t).forEach((attribute) => {\n\t\t\t\t\tattributeCount++;\n\t\t\t\t\tparams.push(`MessageAttribute.${attributeCount}.Name=${attribute.name}`);\n\t\t\t\t\tparams.push(`MessageAttribute.${attributeCount}.Value.StringValue=${attribute.value}`);\n\t\t\t\t\tparams.push(`MessageAttribute.${attributeCount}.Value.DataType=String`);\n\t\t\t\t});\n\n\t\t\t\t// Add binary values\n\t\t\t\t(\n\t\t\t\t\tthis.getNodeParameter('options.messageAttributes.binary', i, []) as INodeParameters[]\n\t\t\t\t).forEach((attribute) => {\n\t\t\t\t\tattributeCount++;\n\n\t\t\t\t\tconst dataPropertyName = attribute.dataPropertyName as string;\n\t\t\t\t\tconst binaryData = this.helpers.assertBinaryData(i, dataPropertyName);\n\n\t\t\t\t\tparams.push(`MessageAttribute.${attributeCount}.Name=${attribute.name}`);\n\t\t\t\t\tparams.push(`MessageAttribute.${attributeCount}.Value.BinaryValue=${binaryData.data}`);\n\t\t\t\t\tparams.push(`MessageAttribute.${attributeCount}.Value.DataType=Binary`);\n\t\t\t\t});\n\n\t\t\t\t// Add number values\n\t\t\t\t(\n\t\t\t\t\tthis.getNodeParameter('options.messageAttributes.number', i, []) as INodeParameters[]\n\t\t\t\t).forEach((attribute) => {\n\t\t\t\t\tattributeCount++;\n\t\t\t\t\tparams.push(`MessageAttribute.${attributeCount}.Name=${attribute.name}`);\n\t\t\t\t\tparams.push(`MessageAttribute.${attributeCount}.Value.StringValue=${attribute.value}`);\n\t\t\t\t\tparams.push(`MessageAttribute.${attributeCount}.Value.DataType=Number`);\n\t\t\t\t});\n\n\t\t\t\tlet responseData;\n\t\t\t\ttry {\n\t\t\t\t\tresponseData = await awsApiRequestSOAP.call(\n\t\t\t\t\t\tthis,\n\t\t\t\t\t\t'sqs',\n\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t`${queuePath}?${params.join('&')}`,\n\t\t\t\t\t);\n\t\t\t\t} catch (error) {\n\t\t\t\t\tthrow new NodeApiError(this.getNode(), error as JsonObject);\n\t\t\t\t}\n\n\t\t\t\tconst result = responseData.SendMessageResponse.SendMessageResult;\n\t\t\t\treturnData.push(result as IDataObject);\n\t\t\t} catch (error) {\n\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\treturnData.push({ error: error.description });\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\n\t\treturn [this.helpers.returnJsonArray(returnData)];\n\t}\n}\n"],"mappings":"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","names":[]}