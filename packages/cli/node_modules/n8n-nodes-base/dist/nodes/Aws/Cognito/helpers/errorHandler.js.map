{"version":3,"sources":["../../../../../nodes/Aws/Cognito/helpers/errorHandler.ts"],"sourcesContent":["import type {\n\tJsonObject,\n\tIExecuteSingleFunctions,\n\tIN8nHttpFullResponse,\n\tINodeExecutionData,\n} from 'n8n-workflow';\nimport { NodeApiError } from 'n8n-workflow';\n\nimport { ERROR_MESSAGES } from './constants';\nimport type { AwsError, ErrorMessage } from './interfaces';\n\nfunction mapErrorToResponse(\n\terrorType: string,\n\tresource: string,\n\toperation: string,\n\tinputValue?: string,\n): ErrorMessage | undefined {\n\tconst op = operation as keyof typeof ERROR_MESSAGES.ResourceNotFound.User;\n\tconst nameLabel = resource.charAt(0).toUpperCase() + resource.slice(1);\n\tconst valuePart = inputValue ? ` \"${inputValue}\"` : '';\n\n\tconst notFoundMessage = (base: ErrorMessage, suffix: string): ErrorMessage => ({\n\t\t...base,\n\t\tmessage: `${nameLabel}${valuePart} ${suffix}`,\n\t});\n\n\tconst isNotFound = [\n\t\t'UserNotFoundException',\n\t\t'ResourceNotFoundException',\n\t\t'NoSuchEntity',\n\t].includes(errorType);\n\n\tconst isExists = [\n\t\t'UsernameExistsException',\n\t\t'EntityAlreadyExists',\n\t\t'GroupExistsException',\n\t].includes(errorType);\n\n\tif (isNotFound) {\n\t\tif (resource === 'user') {\n\t\t\tif (operation === 'addToGroup') {\n\t\t\t\treturn notFoundMessage(ERROR_MESSAGES.UserGroup.add, 'not found while adding to group.');\n\t\t\t}\n\t\t\tif (operation === 'removeFromGroup') {\n\t\t\t\treturn notFoundMessage(\n\t\t\t\t\tERROR_MESSAGES.UserGroup.remove,\n\t\t\t\t\t'not found while removing from group.',\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn notFoundMessage(ERROR_MESSAGES.ResourceNotFound.User[op], 'not found.');\n\t\t}\n\n\t\tif (resource === 'group') {\n\t\t\treturn notFoundMessage(ERROR_MESSAGES.ResourceNotFound.Group[op], 'not found.');\n\t\t}\n\t}\n\n\tif (isExists) {\n\t\tconst existsMessage = `${nameLabel}${valuePart} already exists.`;\n\n\t\tif (resource === 'user') {\n\t\t\treturn { ...ERROR_MESSAGES.EntityAlreadyExists.User, message: existsMessage };\n\t\t}\n\t\tif (resource === 'group') {\n\t\t\treturn { ...ERROR_MESSAGES.EntityAlreadyExists.Group, message: existsMessage };\n\t\t}\n\t}\n\n\treturn undefined;\n}\n\nexport async function handleError(\n\tthis: IExecuteSingleFunctions,\n\tdata: INodeExecutionData[],\n\tresponse: IN8nHttpFullResponse,\n): Promise<INodeExecutionData[]> {\n\tconst statusCode = String(response.statusCode);\n\n\tif (!statusCode.startsWith('4') && !statusCode.startsWith('5')) {\n\t\treturn data;\n\t}\n\n\tconst resource = this.getNodeParameter('resource') as string;\n\tconst operation = this.getNodeParameter('operation') as string;\n\n\tlet inputValue: string | undefined;\n\n\tif (operation === 'create') {\n\t\tif (resource === 'user') {\n\t\t\tinputValue = this.getNodeParameter('newUserName', '') as string;\n\t\t} else if (resource === 'group') {\n\t\t\tinputValue = this.getNodeParameter('newGroupName', '') as string;\n\t\t}\n\t} else {\n\t\tinputValue = this.getNodeParameter(resource, '', { extractValue: true }) as string;\n\t}\n\n\tconst responseBody = response.body as AwsError;\n\tconst errorType = (responseBody.__type ?? response.headers?.['x-amzn-errortype']) as string;\n\tconst errorMessage = (responseBody.message ??\n\t\tresponse.headers?.['x-amzn-errormessage']) as string;\n\n\tif (!errorType) {\n\t\tthrow new NodeApiError(this.getNode(), response as unknown as JsonObject);\n\t}\n\n\tconst specificError = mapErrorToResponse(errorType, resource, operation, inputValue);\n\n\tthrow new NodeApiError(\n\t\tthis.getNode(),\n\t\tresponse as unknown as JsonObject,\n\t\tspecificError ?? {\n\t\t\tmessage: errorType,\n\t\t\tdescription: errorMessage,\n\t\t},\n\t);\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA,0BAA6B;AAE7B,uBAA+B;AAG/B,SAAS,mBACR,WACA,UACA,WACA,YAC2B;AAC3B,QAAM,KAAK;AACX,QAAM,YAAY,SAAS,OAAO,CAAC,EAAE,YAAY,IAAI,SAAS,MAAM,CAAC;AACrE,QAAM,YAAY,aAAa,KAAK,UAAU,MAAM;AAEpD,QAAM,kBAAkB,CAAC,MAAoB,YAAkC;AAAA,IAC9E,GAAG;AAAA,IACH,SAAS,GAAG,SAAS,GAAG,SAAS,IAAI,MAAM;AAAA,EAC5C;AAEA,QAAM,aAAa;AAAA,IAClB;AAAA,IACA;AAAA,IACA;AAAA,EACD,EAAE,SAAS,SAAS;AAEpB,QAAM,WAAW;AAAA,IAChB;AAAA,IACA;AAAA,IACA;AAAA,EACD,EAAE,SAAS,SAAS;AAEpB,MAAI,YAAY;AACf,QAAI,aAAa,QAAQ;AACxB,UAAI,cAAc,cAAc;AAC/B,eAAO,gBAAgB,gCAAe,UAAU,KAAK,kCAAkC;AAAA,MACxF;AACA,UAAI,cAAc,mBAAmB;AACpC,eAAO;AAAA,UACN,gCAAe,UAAU;AAAA,UACzB;AAAA,QACD;AAAA,MACD;AACA,aAAO,gBAAgB,gCAAe,iBAAiB,KAAK,EAAE,GAAG,YAAY;AAAA,IAC9E;AAEA,QAAI,aAAa,SAAS;AACzB,aAAO,gBAAgB,gCAAe,iBAAiB,MAAM,EAAE,GAAG,YAAY;AAAA,IAC/E;AAAA,EACD;AAEA,MAAI,UAAU;AACb,UAAM,gBAAgB,GAAG,SAAS,GAAG,SAAS;AAE9C,QAAI,aAAa,QAAQ;AACxB,aAAO,EAAE,GAAG,gCAAe,oBAAoB,MAAM,SAAS,cAAc;AAAA,IAC7E;AACA,QAAI,aAAa,SAAS;AACzB,aAAO,EAAE,GAAG,gCAAe,oBAAoB,OAAO,SAAS,cAAc;AAAA,IAC9E;AAAA,EACD;AAEA,SAAO;AACR;AAEA,eAAsB,YAErB,MACA,UACgC;AAChC,QAAM,aAAa,OAAO,SAAS,UAAU;AAE7C,MAAI,CAAC,WAAW,WAAW,GAAG,KAAK,CAAC,WAAW,WAAW,GAAG,GAAG;AAC/D,WAAO;AAAA,EACR;AAEA,QAAM,WAAW,KAAK,iBAAiB,UAAU;AACjD,QAAM,YAAY,KAAK,iBAAiB,WAAW;AAEnD,MAAI;AAEJ,MAAI,cAAc,UAAU;AAC3B,QAAI,aAAa,QAAQ;AACxB,mBAAa,KAAK,iBAAiB,eAAe,EAAE;AAAA,IACrD,WAAW,aAAa,SAAS;AAChC,mBAAa,KAAK,iBAAiB,gBAAgB,EAAE;AAAA,IACtD;AAAA,EACD,OAAO;AACN,iBAAa,KAAK,iBAAiB,UAAU,IAAI,EAAE,cAAc,KAAK,CAAC;AAAA,EACxE;AAEA,QAAM,eAAe,SAAS;AAC9B,QAAM,YAAa,aAAa,UAAU,SAAS,UAAU,kBAAkB;AAC/E,QAAM,eAAgB,aAAa,WAClC,SAAS,UAAU,qBAAqB;AAEzC,MAAI,CAAC,WAAW;AACf,UAAM,IAAI,iCAAa,KAAK,QAAQ,GAAG,QAAiC;AAAA,EACzE;AAEA,QAAM,gBAAgB,mBAAmB,WAAW,UAAU,WAAW,UAAU;AAEnF,QAAM,IAAI;AAAA,IACT,KAAK,QAAQ;AAAA,IACb;AAAA,IACA,iBAAiB;AAAA,MAChB,SAAS;AAAA,MACT,aAAa;AAAA,IACd;AAAA,EACD;AACD;","names":[]}