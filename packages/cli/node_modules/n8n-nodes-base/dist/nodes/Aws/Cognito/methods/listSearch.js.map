{"version":3,"sources":["../../../../../nodes/Aws/Cognito/methods/listSearch.ts"],"sourcesContent":["import type {\n\tIDataObject,\n\tIExecuteSingleFunctions,\n\tILoadOptionsFunctions,\n\tINodeListSearchItems,\n\tINodeListSearchResult,\n} from 'n8n-workflow';\nimport { NodeOperationError } from 'n8n-workflow';\n\nimport type { IGroup, IUser, IUserAttribute, IUserPool } from '../helpers/interfaces';\nimport { getUserNameFromExistingUsers, getUserPool } from '../helpers/utils';\nimport { awsApiRequest, awsApiRequestAllItems } from '../transport';\n\nfunction formatResults(items: IDataObject[], filter?: string): INodeListSearchItems[] {\n\treturn items\n\t\t.map(({ id, name }) => ({\n\t\t\tname: String(name).replace(/ /g, ''),\n\t\t\tvalue: String(id),\n\t\t}))\n\t\t.filter(({ name }) => !filter || name.toLowerCase().includes(filter.toLowerCase()))\n\t\t.sort((a, b) => a.name.toLowerCase().localeCompare(b.name.toLowerCase()));\n}\n\nexport async function searchGroups(\n\tthis: ILoadOptionsFunctions,\n\tfilter?: string,\n\tpaginationToken?: string,\n): Promise<INodeListSearchResult> {\n\tconst userPoolId = this.getNodeParameter('userPool', undefined, {\n\t\textractValue: true,\n\t}) as string;\n\tif (!userPoolId) {\n\t\tthrow new NodeOperationError(this.getNode(), 'User Pool ID is required to search groups');\n\t}\n\n\tconst responseData = (await awsApiRequest.call(\n\t\tthis,\n\t\t'POST',\n\t\t'ListGroups',\n\t\tJSON.stringify({ UserPoolId: userPoolId, Limit: 50, NextToken: paginationToken }),\n\t)) as IDataObject;\n\n\tconst groups = responseData.Groups as IDataObject[];\n\n\tconst groupsMapped = groups.map(({ GroupName }) => ({\n\t\tid: GroupName,\n\t\tname: GroupName,\n\t}));\n\n\tconst formattedResults = formatResults(groupsMapped, filter);\n\n\treturn { results: formattedResults, paginationToken: responseData.NextToken };\n}\n\nexport async function searchGroupsForUser(\n\tthis: ILoadOptionsFunctions,\n\tfilter?: string,\n): Promise<INodeListSearchResult> {\n\tconst userPoolId = this.getNodeParameter('userPool', undefined, {\n\t\textractValue: true,\n\t}) as string;\n\tconst inputUser = this.getNodeParameter('user', undefined, {\n\t\textractValue: true,\n\t}) as string;\n\n\tif (!userPoolId || !inputUser) {\n\t\treturn { results: [] };\n\t}\n\n\tconst userPool = await getUserPool.call(this, userPoolId);\n\n\tconst usernameAttributes = userPool.UsernameAttributes ?? [];\n\tconst isEmailAuth = usernameAttributes.includes('email');\n\tconst isPhoneAuth = usernameAttributes.includes('phone_number');\n\tconst isEmailOrPhone = isEmailAuth || isPhoneAuth;\n\n\tconst userName = await getUserNameFromExistingUsers.call(\n\t\tthis,\n\t\tinputUser,\n\t\tuserPoolId,\n\t\tisEmailOrPhone,\n\t);\n\n\tif (!userName) {\n\t\treturn { results: [] };\n\t}\n\n\tconst groups = (await awsApiRequestAllItems.call(\n\t\tthis,\n\t\t'POST',\n\t\t'AdminListGroupsForUser',\n\t\t{\n\t\t\tUsername: userName,\n\t\t\tUserPoolId: userPoolId,\n\t\t},\n\t\t'Groups',\n\t)) as unknown as IGroup[];\n\n\tconst resultGroups = groups\n\t\t.filter((group) => !filter || group.GroupName.toLowerCase().includes(filter.toLowerCase()))\n\t\t.map((group) => ({\n\t\t\tname: group.GroupName,\n\t\t\tvalue: group.GroupName,\n\t\t}))\n\t\t.sort((a, b) => a.name.localeCompare(b.name));\n\n\treturn { results: resultGroups };\n}\n\nexport async function searchUsers(\n\tthis: IExecuteSingleFunctions | ILoadOptionsFunctions,\n\tfilter?: string,\n\tpaginationToken?: string,\n): Promise<INodeListSearchResult> {\n\tconst userPoolId = this.getNodeParameter('userPool', undefined, { extractValue: true }) as string;\n\n\tif (!userPoolId) {\n\t\tthrow new NodeOperationError(this.getNode(), 'User Pool ID is required to search users');\n\t}\n\n\tconst userPoolData = (await awsApiRequest.call(\n\t\tthis,\n\t\t'POST',\n\t\t'DescribeUserPool',\n\t\tJSON.stringify({ UserPoolId: userPoolId }),\n\t)) as IDataObject;\n\n\tconst userPool = userPoolData.UserPool as IUserPool;\n\tconst usernameAttributes = userPool.UsernameAttributes;\n\n\tconst responseData = (await awsApiRequest.call(\n\t\tthis,\n\t\t'POST',\n\t\t'ListUsers',\n\t\tJSON.stringify({\n\t\t\tUserPoolId: userPoolId,\n\t\t\tLimit: 50,\n\t\t\tNextToken: paginationToken,\n\t\t}),\n\t)) as IDataObject;\n\n\tconst users = responseData.Users as IUser[];\n\n\tif (!users.length) {\n\t\treturn { results: [] };\n\t}\n\n\tconst userResults = users.map((user) => {\n\t\tconst attributes: IUserAttribute[] = user.Attributes ?? [];\n\t\tconst username = user.Username;\n\n\t\tconst email = attributes.find((attr) => attr.Name === 'email')?.Value ?? '';\n\t\tconst phoneNumber = attributes.find((attr) => attr.Name === 'phone_number')?.Value ?? '';\n\t\tconst sub = attributes.find((attr) => attr.Name === 'sub')?.Value ?? '';\n\n\t\tconst name = usernameAttributes?.includes('email')\n\t\t\t? email\n\t\t\t: usernameAttributes?.includes('phone_number')\n\t\t\t\t? phoneNumber\n\t\t\t\t: username;\n\n\t\treturn { id: sub, name, value: sub };\n\t});\n\n\treturn { results: formatResults(userResults, filter), paginationToken: responseData.NextToken };\n}\n\nexport async function searchUserPools(\n\tthis: ILoadOptionsFunctions,\n\tfilter?: string,\n\tpaginationToken?: string,\n): Promise<INodeListSearchResult> {\n\tconst responseData = (await awsApiRequest.call(\n\t\tthis,\n\t\t'POST',\n\t\t'ListUserPools',\n\t\tJSON.stringify({ Limit: 50, NextToken: paginationToken }),\n\t)) as IDataObject;\n\n\tconst userPools = responseData.UserPools as IUserPool[];\n\n\tconst userPoolsMapped = userPools.map((userPool) => ({\n\t\tid: userPool.Id,\n\t\tname: userPool.Name,\n\t}));\n\n\tconst formattedResults = formatResults(userPoolsMapped, filter);\n\n\treturn { results: formattedResults, paginationToken: responseData.NextToken };\n}\n"],"mappings":"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","names":[]}