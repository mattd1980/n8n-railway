{"version":3,"sources":["../../../../nodes/Aws/DynamoDB/AwsDynamoDB.node.ts"],"sourcesContent":["/* eslint-disable n8n-nodes-base/node-filename-against-convention */\nimport {\n\ttype IExecuteFunctions,\n\ttype IDataObject,\n\ttype ILoadOptionsFunctions,\n\ttype INodeExecutionData,\n\ttype INodeType,\n\ttype INodeTypeDescription,\n\ttype NodeParameterValue,\n\tNodeConnectionTypes,\n} from 'n8n-workflow';\n\nimport { awsApiRequest, awsApiRequestAllItems } from './GenericFunctions';\nimport { itemFields, itemOperations } from './ItemDescription';\nimport type {\n\tFieldsUiValues,\n\tIAttributeNameUi,\n\tIAttributeValue,\n\tIAttributeValueUi,\n\tIRequestBody,\n\tPutItemUi,\n} from './types';\nimport {\n\tadjustExpressionAttributeName,\n\tadjustExpressionAttributeValues,\n\tadjustPutItem,\n\tdecodeItem,\n\tsimplify,\n} from './utils';\n\nexport class AwsDynamoDB implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'AWS DynamoDB',\n\t\tname: 'awsDynamoDb',\n\t\ticon: 'file:dynamodb.svg',\n\t\tgroup: ['transform'],\n\t\tversion: 1,\n\t\tsubtitle: '={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}',\n\t\tdescription: 'Consume the AWS DynamoDB API',\n\t\tdefaults: {\n\t\t\tname: 'AWS DynamoDB',\n\t\t},\n\t\tinputs: [NodeConnectionTypes.Main],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tcredentials: [\n\t\t\t{\n\t\t\t\tname: 'aws',\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Resource',\n\t\t\t\tname: 'resource',\n\t\t\t\ttype: 'options',\n\t\t\t\tnoDataExpression: true,\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Item',\n\t\t\t\t\t\tvalue: 'item',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'item',\n\t\t\t},\n\t\t\t...itemOperations,\n\t\t\t...itemFields,\n\t\t],\n\t};\n\n\tmethods = {\n\t\tloadOptions: {\n\t\t\tasync getTables(this: ILoadOptionsFunctions) {\n\t\t\t\tconst headers = {\n\t\t\t\t\t'Content-Type': 'application/x-amz-json-1.0',\n\t\t\t\t\t'X-Amz-Target': 'DynamoDB_20120810.ListTables',\n\t\t\t\t};\n\n\t\t\t\tconst responseData = await awsApiRequest.call(this, 'dynamodb', 'POST', '/', {}, headers);\n\n\t\t\t\treturn responseData.TableNames.map((table: string) => ({ name: table, value: table }));\n\t\t\t},\n\t\t},\n\t};\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t\tconst items = this.getInputData();\n\n\t\tconst resource = this.getNodeParameter('resource', 0);\n\t\tconst operation = this.getNodeParameter('operation', 0);\n\n\t\tlet responseData;\n\t\tconst returnData: INodeExecutionData[] = [];\n\n\t\tfor (let i = 0; i < items.length; i++) {\n\t\t\ttry {\n\t\t\t\tif (resource === 'item') {\n\t\t\t\t\tif (operation === 'upsert') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//             upsert\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\t// https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_PutItem.html\n\n\t\t\t\t\t\tconst eavUi = this.getNodeParameter(\n\t\t\t\t\t\t\t'additionalFields.eavUi.eavValues',\n\t\t\t\t\t\t\ti,\n\t\t\t\t\t\t\t[],\n\t\t\t\t\t\t) as IAttributeValueUi[];\n\t\t\t\t\t\tconst conditionExpession = this.getNodeParameter(\n\t\t\t\t\t\t\t'conditionExpression',\n\t\t\t\t\t\t\ti,\n\t\t\t\t\t\t\t'',\n\t\t\t\t\t\t) as string;\n\t\t\t\t\t\tconst eanUi = this.getNodeParameter(\n\t\t\t\t\t\t\t'additionalFields.eanUi.eanValues',\n\t\t\t\t\t\t\ti,\n\t\t\t\t\t\t\t[],\n\t\t\t\t\t\t) as IAttributeNameUi[];\n\n\t\t\t\t\t\tconst body: IRequestBody = {\n\t\t\t\t\t\t\tTableName: this.getNodeParameter('tableName', i) as string,\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tconst expressionAttributeValues = adjustExpressionAttributeValues(eavUi);\n\n\t\t\t\t\t\tif (Object.keys(expressionAttributeValues).length) {\n\t\t\t\t\t\t\tbody.ExpressionAttributeValues = expressionAttributeValues;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst expressionAttributeName = adjustExpressionAttributeName(eanUi);\n\n\t\t\t\t\t\tif (Object.keys(expressionAttributeName).length) {\n\t\t\t\t\t\t\tbody.expressionAttributeNames = expressionAttributeName;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (conditionExpession) {\n\t\t\t\t\t\t\tbody.ConditionExpression = conditionExpession;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst dataToSend = this.getNodeParameter('dataToSend', 0) as\n\t\t\t\t\t\t\t| 'defineBelow'\n\t\t\t\t\t\t\t| 'autoMapInputData';\n\t\t\t\t\t\tconst item: { [key: string]: string } = {};\n\n\t\t\t\t\t\tif (dataToSend === 'autoMapInputData') {\n\t\t\t\t\t\t\tconst incomingKeys = Object.keys(items[i].json);\n\t\t\t\t\t\t\tconst rawInputsToIgnore = this.getNodeParameter('inputsToIgnore', i) as string;\n\t\t\t\t\t\t\tconst inputsToIgnore = rawInputsToIgnore.split(',').map((c) => c.trim());\n\n\t\t\t\t\t\t\tfor (const key of incomingKeys) {\n\t\t\t\t\t\t\t\tif (inputsToIgnore.includes(key)) continue;\n\t\t\t\t\t\t\t\titem[key] = items[i].json[key] as string;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbody.Item = adjustPutItem(item as PutItemUi);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst fields = this.getNodeParameter('fieldsUi.fieldValues', i, []) as FieldsUiValues;\n\t\t\t\t\t\t\tfields.forEach(({ fieldId, fieldValue }) => (item[fieldId] = fieldValue));\n\t\t\t\t\t\t\tbody.Item = adjustPutItem(item as PutItemUi);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst headers = {\n\t\t\t\t\t\t\t'Content-Type': 'application/x-amz-json-1.0',\n\t\t\t\t\t\t\t'X-Amz-Target': 'DynamoDB_20120810.PutItem',\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tresponseData = await awsApiRequest.call(this, 'dynamodb', 'POST', '/', body, headers);\n\t\t\t\t\t\tresponseData = item;\n\t\t\t\t\t} else if (operation === 'delete') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//              delete\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\t// https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_DeleteItem.html\n\n\t\t\t\t\t\tconst body: { [key: string]: any } = {\n\t\t\t\t\t\t\tTableName: this.getNodeParameter('tableName', i) as string,\n\t\t\t\t\t\t\tKey: {},\n\t\t\t\t\t\t\tReturnValues: this.getNodeParameter('returnValues', 0) as string,\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tconst eavUi = this.getNodeParameter(\n\t\t\t\t\t\t\t'additionalFields.eavUi.eavValues',\n\t\t\t\t\t\t\ti,\n\t\t\t\t\t\t\t[],\n\t\t\t\t\t\t) as IAttributeValueUi[];\n\t\t\t\t\t\tconst eanUi = this.getNodeParameter(\n\t\t\t\t\t\t\t'additionalFields.eanUi.eanValues',\n\t\t\t\t\t\t\ti,\n\t\t\t\t\t\t\t[],\n\t\t\t\t\t\t) as IAttributeNameUi[];\n\t\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i);\n\t\t\t\t\t\tconst simple = this.getNodeParameter('simple', 0, false) as boolean;\n\n\t\t\t\t\t\tconst keyValues = this.getNodeParameter('keysUi.keyValues', i, []) as [\n\t\t\t\t\t\t\t{ key: string; type: string; value: string },\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tfor (const item of keyValues) {\n\t\t\t\t\t\t\tlet value = item.value as NodeParameterValue;\n\t\t\t\t\t\t\t// All data has to get send as string even numbers\n\t\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\t\tvalue = ![null, undefined].includes(value) ? value?.toString() : '';\n\t\t\t\t\t\t\tbody.Key[item.key] = { [item.type]: value };\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst expressionAttributeValues = adjustExpressionAttributeValues(eavUi);\n\n\t\t\t\t\t\tif (Object.keys(expressionAttributeValues).length) {\n\t\t\t\t\t\t\tbody.ExpressionAttributeValues = expressionAttributeValues;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst expressionAttributeName = adjustExpressionAttributeName(eanUi);\n\n\t\t\t\t\t\tif (Object.keys(expressionAttributeName).length) {\n\t\t\t\t\t\t\tbody.expressionAttributeNames = expressionAttributeName;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst headers = {\n\t\t\t\t\t\t\t'Content-Type': 'application/x-amz-json-1.0',\n\t\t\t\t\t\t\t'X-Amz-Target': 'DynamoDB_20120810.DeleteItem',\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tif (additionalFields.conditionExpression) {\n\t\t\t\t\t\t\tbody.ConditionExpression = additionalFields.conditionExpression as string;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await awsApiRequest.call(this, 'dynamodb', 'POST', '/', body, headers);\n\n\t\t\t\t\t\tif (!Object.keys(responseData as IDataObject).length) {\n\t\t\t\t\t\t\tresponseData = { success: true };\n\t\t\t\t\t\t} else if (simple) {\n\t\t\t\t\t\t\tresponseData = decodeItem(responseData.Attributes as IAttributeValue);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (operation === 'get') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//              get\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\t// https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_GetItem.html\n\n\t\t\t\t\t\tconst tableName = this.getNodeParameter('tableName', 0) as string;\n\t\t\t\t\t\tconst simple = this.getNodeParameter('simple', 0, false) as boolean;\n\t\t\t\t\t\tconst select = this.getNodeParameter('select', 0) as string;\n\t\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i);\n\t\t\t\t\t\tconst eanUi = this.getNodeParameter(\n\t\t\t\t\t\t\t'additionalFields.eanUi.eanValues',\n\t\t\t\t\t\t\ti,\n\t\t\t\t\t\t\t[],\n\t\t\t\t\t\t) as IAttributeNameUi[];\n\n\t\t\t\t\t\tconst body: { [key: string]: any } = {\n\t\t\t\t\t\t\tTableName: tableName,\n\t\t\t\t\t\t\tKey: {},\n\t\t\t\t\t\t\tSelect: select,\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tObject.assign(body, additionalFields);\n\n\t\t\t\t\t\tconst expressionAttributeName = adjustExpressionAttributeName(eanUi);\n\n\t\t\t\t\t\tif (Object.keys(expressionAttributeName).length) {\n\t\t\t\t\t\t\tbody.expressionAttributeNames = expressionAttributeName;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (additionalFields.readType) {\n\t\t\t\t\t\t\tbody.ConsistentRead = additionalFields.readType === 'stronglyConsistentRead';\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (additionalFields.projectionExpression) {\n\t\t\t\t\t\t\tbody.ProjectionExpression = additionalFields.projectionExpression as string;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst keyValues = this.getNodeParameter('keysUi.keyValues', i, []) as IDataObject[];\n\n\t\t\t\t\t\tfor (const item of keyValues) {\n\t\t\t\t\t\t\tlet value = item.value as NodeParameterValue;\n\t\t\t\t\t\t\t// All data has to get send as string even numbers\n\t\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\t\tvalue = ![null, undefined].includes(value) ? value?.toString() : '';\n\t\t\t\t\t\t\tbody.Key[item.key as string] = { [item.type as string]: value };\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst headers = {\n\t\t\t\t\t\t\t'X-Amz-Target': 'DynamoDB_20120810.GetItem',\n\t\t\t\t\t\t\t'Content-Type': 'application/x-amz-json-1.0',\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tresponseData = await awsApiRequest.call(this, 'dynamodb', 'POST', '/', body, headers);\n\n\t\t\t\t\t\tresponseData = responseData.Item;\n\n\t\t\t\t\t\tif (simple && responseData) {\n\t\t\t\t\t\t\tresponseData = decodeItem(responseData as IAttributeValue);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (operation === 'getAll') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//             getAll\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\t// https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_Query.html\n\n\t\t\t\t\t\tconst eavUi = this.getNodeParameter('eavUi.eavValues', i, []) as IAttributeValueUi[];\n\t\t\t\t\t\tconst simple = this.getNodeParameter('simple', 0, false) as boolean;\n\t\t\t\t\t\tconst select = this.getNodeParameter('select', 0) as string;\n\t\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', 0);\n\t\t\t\t\t\tconst scan = this.getNodeParameter('scan', 0) as boolean;\n\t\t\t\t\t\tconst eanUi = this.getNodeParameter(\n\t\t\t\t\t\t\t'options.eanUi.eanValues',\n\t\t\t\t\t\t\ti,\n\t\t\t\t\t\t\t[],\n\t\t\t\t\t\t) as IAttributeNameUi[];\n\n\t\t\t\t\t\tconst body: IRequestBody = {\n\t\t\t\t\t\t\tTableName: this.getNodeParameter('tableName', i) as string,\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tif (scan) {\n\t\t\t\t\t\t\tconst filterExpression = this.getNodeParameter('filterExpression', i) as string;\n\t\t\t\t\t\t\tif (filterExpression) {\n\t\t\t\t\t\t\t\tbody.FilterExpression = filterExpression;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tbody.KeyConditionExpression = this.getNodeParameter(\n\t\t\t\t\t\t\t\t'keyConditionExpression',\n\t\t\t\t\t\t\t\ti,\n\t\t\t\t\t\t\t) as string;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst { indexName, projectionExpression, filterExpression } = this.getNodeParameter(\n\t\t\t\t\t\t\t'options',\n\t\t\t\t\t\t\ti,\n\t\t\t\t\t\t) as {\n\t\t\t\t\t\t\tindexName: string;\n\t\t\t\t\t\t\tprojectionExpression: string;\n\t\t\t\t\t\t\tfilterExpression: string;\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tconst expressionAttributeName = adjustExpressionAttributeName(eanUi);\n\n\t\t\t\t\t\tif (Object.keys(expressionAttributeName).length) {\n\t\t\t\t\t\t\tbody.ExpressionAttributeNames = expressionAttributeName;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst expressionAttributeValues = adjustExpressionAttributeValues(eavUi);\n\n\t\t\t\t\t\tif (Object.keys(expressionAttributeValues).length) {\n\t\t\t\t\t\t\tbody.ExpressionAttributeValues = expressionAttributeValues;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (indexName) {\n\t\t\t\t\t\t\tbody.IndexName = indexName;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (projectionExpression && select !== 'COUNT') {\n\t\t\t\t\t\t\tbody.ProjectionExpression = projectionExpression;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (filterExpression) {\n\t\t\t\t\t\t\tbody.FilterExpression = filterExpression;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (select) {\n\t\t\t\t\t\t\tbody.Select = select;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst headers = {\n\t\t\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t\t\t\t'X-Amz-Target': scan ? 'DynamoDB_20120810.Scan' : 'DynamoDB_20120810.Query',\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tif (returnAll && select !== 'COUNT') {\n\t\t\t\t\t\t\tresponseData = await awsApiRequestAllItems.call(\n\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t'dynamodb',\n\t\t\t\t\t\t\t\t'POST',\n\t\t\t\t\t\t\t\t'/',\n\t\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t\t\theaders,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tbody.Limit = this.getNodeParameter('limit', 0, 1);\n\t\t\t\t\t\t\tresponseData = await awsApiRequest.call(this, 'dynamodb', 'POST', '/', body, headers);\n\t\t\t\t\t\t\tif (select !== 'COUNT') {\n\t\t\t\t\t\t\t\tresponseData = responseData.Items;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (simple) {\n\t\t\t\t\t\t\tresponseData = responseData.map(simplify);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t);\n\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\tthis.helpers.returnJsonArray({ error: error.message }),\n\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t);\n\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\n\t\treturn [returnData];\n\t}\n}\n"],"mappings":"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","names":["filterExpression"]}