{"version":3,"sources":["../../../../nodes/Aws/CertificateManager/GenericFunctions.ts"],"sourcesContent":["import get from 'lodash/get';\nimport type {\n\tIDataObject,\n\tIExecuteFunctions,\n\tIHookFunctions,\n\tILoadOptionsFunctions,\n\tIWebhookFunctions,\n\tIHttpRequestOptions,\n\tJsonObject,\n\tIHttpRequestMethods,\n} from 'n8n-workflow';\nimport { jsonParse, NodeApiError } from 'n8n-workflow';\n\nexport async function awsApiRequest(\n\tthis: IHookFunctions | IExecuteFunctions | ILoadOptionsFunctions | IWebhookFunctions,\n\tservice: string,\n\tmethod: IHttpRequestMethods,\n\tpath: string,\n\tbody?: string | Buffer,\n\tquery: IDataObject = {},\n\theaders?: object,\n): Promise<any> {\n\tconst credentials = await this.getCredentials('aws');\n\n\tconst requestOptions = {\n\t\tqs: {\n\t\t\tservice,\n\t\t\tpath,\n\t\t\t...query,\n\t\t},\n\t\theaders,\n\t\tmethod,\n\t\turl: '',\n\t\tbody,\n\t\tregion: credentials?.region as string,\n\t} as IHttpRequestOptions;\n\n\ttry {\n\t\treturn await this.helpers.requestWithAuthentication.call(this, 'aws', requestOptions);\n\t} catch (error) {\n\t\tthrow new NodeApiError(this.getNode(), error as JsonObject);\n\t}\n}\n\nexport async function awsApiRequestREST(\n\tthis: IHookFunctions | IExecuteFunctions | ILoadOptionsFunctions,\n\tservice: string,\n\tmethod: IHttpRequestMethods,\n\tpath: string,\n\tbody?: string,\n\tquery: IDataObject = {},\n\theaders?: object,\n): Promise<any> {\n\tconst response = await awsApiRequest.call(this, service, method, path, body, query, headers);\n\ttry {\n\t\treturn JSON.parse(response as string);\n\t} catch (e) {\n\t\treturn response;\n\t}\n}\n\nexport async function awsApiRequestAllItems(\n\tthis: IHookFunctions | IExecuteFunctions | ILoadOptionsFunctions,\n\tpropertyName: string,\n\tservice: string,\n\tmethod: IHttpRequestMethods,\n\tpath: string,\n\tbody?: string,\n\tquery: IDataObject = {},\n\theaders: IDataObject = {},\n): Promise<any> {\n\tconst returnData: IDataObject[] = [];\n\n\tlet responseData;\n\n\tdo {\n\t\tresponseData = await awsApiRequestREST.call(this, service, method, path, body, query, headers);\n\t\tif (responseData.NextToken) {\n\t\t\tconst data = jsonParse<any>(body as string, {\n\t\t\t\terrorMessage: 'Response body is not valid JSON',\n\t\t\t});\n\t\t\tdata.NextToken = responseData.NextToken;\n\t\t}\n\t\treturnData.push.apply(returnData, get(responseData, propertyName) as IDataObject[]);\n\t} while (responseData.NextToken !== undefined);\n\n\treturn returnData;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAgB;AAWhB,0BAAwC;AAExC,eAAsB,cAErB,SACA,QACA,MACA,MACA,QAAqB,CAAC,GACtB,SACe;AACf,QAAM,cAAc,MAAM,KAAK,eAAe,KAAK;AAEnD,QAAM,iBAAiB;AAAA,IACtB,IAAI;AAAA,MACH;AAAA,MACA;AAAA,MACA,GAAG;AAAA,IACJ;AAAA,IACA;AAAA,IACA;AAAA,IACA,KAAK;AAAA,IACL;AAAA,IACA,QAAQ,aAAa;AAAA,EACtB;AAEA,MAAI;AACH,WAAO,MAAM,KAAK,QAAQ,0BAA0B,KAAK,MAAM,OAAO,cAAc;AAAA,EACrF,SAAS,OAAO;AACf,UAAM,IAAI,iCAAa,KAAK,QAAQ,GAAG,KAAmB;AAAA,EAC3D;AACD;AAEA,eAAsB,kBAErB,SACA,QACA,MACA,MACA,QAAqB,CAAC,GACtB,SACe;AACf,QAAM,WAAW,MAAM,cAAc,KAAK,MAAM,SAAS,QAAQ,MAAM,MAAM,OAAO,OAAO;AAC3F,MAAI;AACH,WAAO,KAAK,MAAM,QAAkB;AAAA,EACrC,SAAS,GAAG;AACX,WAAO;AAAA,EACR;AACD;AAEA,eAAsB,sBAErB,cACA,SACA,QACA,MACA,MACA,QAAqB,CAAC,GACtB,UAAuB,CAAC,GACT;AACf,QAAM,aAA4B,CAAC;AAEnC,MAAI;AAEJ,KAAG;AACF,mBAAe,MAAM,kBAAkB,KAAK,MAAM,SAAS,QAAQ,MAAM,MAAM,OAAO,OAAO;AAC7F,QAAI,aAAa,WAAW;AAC3B,YAAM,WAAO,+BAAe,MAAgB;AAAA,QAC3C,cAAc;AAAA,MACf,CAAC;AACD,WAAK,YAAY,aAAa;AAAA,IAC/B;AACA,eAAW,KAAK,MAAM,gBAAY,WAAAA,SAAI,cAAc,YAAY,CAAkB;AAAA,EACnF,SAAS,aAAa,cAAc;AAEpC,SAAO;AACR;","names":["get"]}