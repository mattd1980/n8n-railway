{"version":3,"sources":["../../../../../nodes/Aws/S3/V1/AwsS3V1.node.ts"],"sourcesContent":["import { paramCase, snakeCase } from 'change-case';\nimport { createHash } from 'crypto';\nimport type {\n\tIDataObject,\n\tIExecuteFunctions,\n\tINodeExecutionData,\n\tINodeType,\n\tINodeTypeBaseDescription,\n\tINodeTypeDescription,\n} from 'n8n-workflow';\nimport { NodeConnectionTypes, NodeOperationError } from 'n8n-workflow';\nimport { Builder } from 'xml2js';\n\nimport { bucketFields, bucketOperations } from './BucketDescription';\nimport { fileFields, fileOperations } from './FileDescription';\nimport { folderFields, folderOperations } from './FolderDescription';\nimport {\n\tawsApiRequestREST,\n\tawsApiRequestSOAP,\n\tawsApiRequestSOAPAllItems,\n} from './GenericFunctions';\n\nexport class AwsS3V1 implements INodeType {\n\tdescription: INodeTypeDescription;\n\n\tconstructor(baseDescription: INodeTypeBaseDescription) {\n\t\tthis.description = {\n\t\t\t...baseDescription,\n\t\t\tdisplayName: 'AWS S3',\n\t\t\tname: 'awsS3',\n\t\t\ticon: 'file:s3.svg',\n\t\t\tgroup: ['output'],\n\t\t\tversion: 1,\n\t\t\tsubtitle: '={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}',\n\t\t\tdescription: 'Sends data to AWS S3',\n\t\t\tdefaults: {\n\t\t\t\tname: 'AWS S3',\n\t\t\t},\n\t\t\tinputs: [NodeConnectionTypes.Main],\n\t\t\toutputs: [NodeConnectionTypes.Main],\n\t\t\tcredentials: [\n\t\t\t\t{\n\t\t\t\t\tname: 'aws',\n\t\t\t\t\trequired: true,\n\t\t\t\t},\n\t\t\t],\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'Resource',\n\t\t\t\t\tname: 'resource',\n\t\t\t\t\ttype: 'options',\n\t\t\t\t\tnoDataExpression: true,\n\t\t\t\t\toptions: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'Bucket',\n\t\t\t\t\t\t\tvalue: 'bucket',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'File',\n\t\t\t\t\t\t\tvalue: 'file',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'Folder',\n\t\t\t\t\t\t\tvalue: 'folder',\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t\tdefault: 'file',\n\t\t\t\t},\n\t\t\t\t// BUCKET\n\t\t\t\t...bucketOperations,\n\t\t\t\t...bucketFields,\n\t\t\t\t// FOLDER\n\t\t\t\t...folderOperations,\n\t\t\t\t...folderFields,\n\t\t\t\t// UPLOAD\n\t\t\t\t...fileOperations,\n\t\t\t\t...fileFields,\n\t\t\t],\n\t\t};\n\t}\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t\tconst items = this.getInputData();\n\t\tconst returnData: INodeExecutionData[] = [];\n\t\tconst qs: IDataObject = {};\n\t\tlet responseData;\n\t\tconst resource = this.getNodeParameter('resource', 0);\n\t\tconst operation = this.getNodeParameter('operation', 0);\n\t\tfor (let i = 0; i < items.length; i++) {\n\t\t\tconst headers: IDataObject = {};\n\t\t\ttry {\n\t\t\t\tif (resource === 'bucket') {\n\t\t\t\t\t//https://docs.aws.amazon.com/AmazonS3/latest/API/API_CreateBucket.html\n\t\t\t\t\tif (operation === 'create') {\n\t\t\t\t\t\tconst credentials = await this.getCredentials('aws');\n\t\t\t\t\t\tconst name = this.getNodeParameter('name', i) as string;\n\t\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i);\n\t\t\t\t\t\tif (additionalFields.acl) {\n\t\t\t\t\t\t\theaders['x-amz-acl'] = paramCase(additionalFields.acl as string);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (additionalFields.bucketObjectLockEnabled) {\n\t\t\t\t\t\t\theaders['x-amz-bucket-object-lock-enabled'] =\n\t\t\t\t\t\t\t\tadditionalFields.bucketObjectLockEnabled as boolean;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (additionalFields.grantFullControl) {\n\t\t\t\t\t\t\theaders['x-amz-grant-full-control'] = '';\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (additionalFields.grantRead) {\n\t\t\t\t\t\t\theaders['x-amz-grant-read'] = '';\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (additionalFields.grantReadAcp) {\n\t\t\t\t\t\t\theaders['x-amz-grant-read-acp'] = '';\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (additionalFields.grantWrite) {\n\t\t\t\t\t\t\theaders['x-amz-grant-write'] = '';\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (additionalFields.grantWriteAcp) {\n\t\t\t\t\t\t\theaders['x-amz-grant-write-acp'] = '';\n\t\t\t\t\t\t}\n\t\t\t\t\t\tlet region = credentials.region as string;\n\n\t\t\t\t\t\tif (additionalFields.region) {\n\t\t\t\t\t\t\tregion = additionalFields.region as string;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst body: IDataObject = {\n\t\t\t\t\t\t\tCreateBucketConfiguration: {\n\t\t\t\t\t\t\t\t$: {\n\t\t\t\t\t\t\t\t\txmlns: 'http://s3.amazonaws.com/doc/2006-03-01/',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t};\n\t\t\t\t\t\tlet data = '';\n\t\t\t\t\t\t// if credentials has the S3 defaul region (us-east-1) the body (XML) does not have to be sent.\n\t\t\t\t\t\tif (region !== 'us-east-1') {\n\t\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\t\tbody.CreateBucketConfiguration.LocationConstraint = [region];\n\t\t\t\t\t\t\tconst builder = new Builder();\n\t\t\t\t\t\t\tdata = builder.buildObject(body);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresponseData = await awsApiRequestSOAP.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t`${name}.s3`,\n\t\t\t\t\t\t\t'PUT',\n\t\t\t\t\t\t\t'',\n\t\t\t\t\t\t\tdata,\n\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t\theaders,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray({ success: true }),\n\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t}\n\n\t\t\t\t\t// https://docs.aws.amazon.com/AmazonS3/latest/API/API_DeleteBucket.html\n\t\t\t\t\tif (operation === 'delete') {\n\t\t\t\t\t\tconst name = this.getNodeParameter('name', i) as string;\n\n\t\t\t\t\t\tresponseData = await awsApiRequestSOAP.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t`${name}.s3`,\n\t\t\t\t\t\t\t'DELETE',\n\t\t\t\t\t\t\t'',\n\t\t\t\t\t\t\t'',\n\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\theaders,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray({ success: true }),\n\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t}\n\n\t\t\t\t\t//https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListBuckets.html\n\t\t\t\t\tif (operation === 'getAll') {\n\t\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', 0);\n\t\t\t\t\t\tif (returnAll) {\n\t\t\t\t\t\t\tresponseData = await awsApiRequestSOAPAllItems.call(\n\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t'ListAllMyBucketsResult.Buckets.Bucket',\n\t\t\t\t\t\t\t\t's3',\n\t\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t\t'',\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tqs.limit = this.getNodeParameter('limit', 0);\n\t\t\t\t\t\t\tresponseData = await awsApiRequestSOAPAllItems.call(\n\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t'ListAllMyBucketsResult.Buckets.Bucket',\n\t\t\t\t\t\t\t\t's3',\n\t\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t\t'',\n\t\t\t\t\t\t\t\t'',\n\t\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tresponseData = responseData.slice(0, qs.limit);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t}\n\n\t\t\t\t\t//https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListObjectsV2.html\n\t\t\t\t\tif (operation === 'search') {\n\t\t\t\t\t\tconst bucketName = this.getNodeParameter('bucketName', i) as string;\n\t\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', 0);\n\t\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', 0);\n\n\t\t\t\t\t\tif (additionalFields.prefix) {\n\t\t\t\t\t\t\tqs.prefix = additionalFields.prefix as string;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (additionalFields.encodingType) {\n\t\t\t\t\t\t\tqs['encoding-type'] = additionalFields.encodingType as string;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (additionalFields.delimiter) {\n\t\t\t\t\t\t\tqs.delimiter = additionalFields.delimiter as string;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (additionalFields.fetchOwner) {\n\t\t\t\t\t\t\tqs['fetch-owner'] = additionalFields.fetchOwner as string;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (additionalFields.startAfter) {\n\t\t\t\t\t\t\tqs['start-after'] = additionalFields.startAfter as string;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (additionalFields.requesterPays) {\n\t\t\t\t\t\t\tqs['x-amz-request-payer'] = 'requester';\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tqs['list-type'] = 2;\n\n\t\t\t\t\t\tresponseData = await awsApiRequestSOAP.call(this, `${bucketName}.s3`, 'GET', '', '', {\n\t\t\t\t\t\t\tlocation: '',\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tconst region = responseData.LocationConstraint._ as string;\n\n\t\t\t\t\t\tif (returnAll) {\n\t\t\t\t\t\t\tresponseData = await awsApiRequestSOAPAllItems.call(\n\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t'ListBucketResult.Contents',\n\t\t\t\t\t\t\t\t`${bucketName}.s3`,\n\t\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t\t'',\n\t\t\t\t\t\t\t\t'',\n\t\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t\tregion,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tqs['max-keys'] = this.getNodeParameter('limit', 0);\n\t\t\t\t\t\t\tresponseData = await awsApiRequestSOAP.call(\n\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t`${bucketName}.s3`,\n\t\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t\t'',\n\t\t\t\t\t\t\t\t'',\n\t\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t\tregion,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tresponseData = responseData.ListBucketResult.Contents;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (resource === 'folder') {\n\t\t\t\t\t//https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutObject.html\n\t\t\t\t\tif (operation === 'create') {\n\t\t\t\t\t\tconst bucketName = this.getNodeParameter('bucketName', i) as string;\n\t\t\t\t\t\tconst folderName = this.getNodeParameter('folderName', i) as string;\n\t\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i);\n\t\t\t\t\t\tlet path = `/${folderName}/`;\n\n\t\t\t\t\t\tif (additionalFields.requesterPays) {\n\t\t\t\t\t\t\theaders['x-amz-request-payer'] = 'requester';\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (additionalFields.parentFolderKey) {\n\t\t\t\t\t\t\tpath = `/${additionalFields.parentFolderKey}${folderName}/`;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (additionalFields.storageClass) {\n\t\t\t\t\t\t\theaders['x-amz-storage-class'] = snakeCase(\n\t\t\t\t\t\t\t\tadditionalFields.storageClass as string,\n\t\t\t\t\t\t\t).toUpperCase();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresponseData = await awsApiRequestSOAP.call(this, `${bucketName}.s3`, 'GET', '', '', {\n\t\t\t\t\t\t\tlocation: '',\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tconst region = responseData.LocationConstraint._;\n\n\t\t\t\t\t\tresponseData = await awsApiRequestSOAP.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t`${bucketName}.s3`,\n\t\t\t\t\t\t\t'PUT',\n\t\t\t\t\t\t\tpath,\n\t\t\t\t\t\t\t'',\n\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t\theaders,\n\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\tregion as string,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray({ success: true }),\n\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t}\n\t\t\t\t\t//https://docs.aws.amazon.com/AmazonS3/latest/API/API_DeleteObjects.html\n\t\t\t\t\tif (operation === 'delete') {\n\t\t\t\t\t\tconst bucketName = this.getNodeParameter('bucketName', i) as string;\n\t\t\t\t\t\tconst folderKey = this.getNodeParameter('folderKey', i) as string;\n\n\t\t\t\t\t\tresponseData = await awsApiRequestSOAP.call(this, `${bucketName}.s3`, 'GET', '', '', {\n\t\t\t\t\t\t\tlocation: '',\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tconst region = responseData.LocationConstraint._;\n\n\t\t\t\t\t\tresponseData = await awsApiRequestSOAPAllItems.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'ListBucketResult.Contents',\n\t\t\t\t\t\t\t`${bucketName}.s3`,\n\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t'/',\n\t\t\t\t\t\t\t'',\n\t\t\t\t\t\t\t{ 'list-type': 2, prefix: folderKey },\n\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\tregion as string,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t// folder empty then just delete it\n\t\t\t\t\t\tif (responseData.length === 0) {\n\t\t\t\t\t\t\tresponseData = await awsApiRequestSOAP.call(\n\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t`${bucketName}.s3`,\n\t\t\t\t\t\t\t\t'DELETE',\n\t\t\t\t\t\t\t\t`/${folderKey}`,\n\t\t\t\t\t\t\t\t'',\n\t\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t\tregion as string,\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tresponseData = { deleted: [{ Key: folderKey }] };\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// delete everything inside the folder\n\t\t\t\t\t\t\tconst body: IDataObject = {\n\t\t\t\t\t\t\t\tDelete: {\n\t\t\t\t\t\t\t\t\t$: {\n\t\t\t\t\t\t\t\t\t\txmlns: 'http://s3.amazonaws.com/doc/2006-03-01/',\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tObject: [],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\tfor (const childObject of responseData) {\n\t\t\t\t\t\t\t\t//@ts-ignore\n\t\t\t\t\t\t\t\t(body.Delete.Object as IDataObject[]).push({\n\t\t\t\t\t\t\t\t\tKey: childObject.Key as string,\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tconst builder = new Builder();\n\t\t\t\t\t\t\tconst data = builder.buildObject(body);\n\n\t\t\t\t\t\t\theaders['Content-MD5'] = createHash('md5').update(data).digest('base64');\n\n\t\t\t\t\t\t\theaders['Content-Type'] = 'application/xml';\n\n\t\t\t\t\t\t\tresponseData = await awsApiRequestSOAP.call(\n\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t`${bucketName}.s3`,\n\t\t\t\t\t\t\t\t'POST',\n\t\t\t\t\t\t\t\t'/',\n\t\t\t\t\t\t\t\tdata,\n\t\t\t\t\t\t\t\t{ delete: '' },\n\t\t\t\t\t\t\t\theaders,\n\t\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t\tregion as string,\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tresponseData = { deleted: responseData.DeleteResult.Deleted };\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData),\n\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t}\n\t\t\t\t\t//https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListObjectsV2.html\n\t\t\t\t\tif (operation === 'getAll') {\n\t\t\t\t\t\tconst bucketName = this.getNodeParameter('bucketName', i) as string;\n\t\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', 0);\n\t\t\t\t\t\tconst options = this.getNodeParameter('options', 0);\n\n\t\t\t\t\t\tif (options.folderKey) {\n\t\t\t\t\t\t\tqs.prefix = options.folderKey as string;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (options.fetchOwner) {\n\t\t\t\t\t\t\tqs['fetch-owner'] = options.fetchOwner as string;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tqs['list-type'] = 2;\n\n\t\t\t\t\t\tresponseData = await awsApiRequestSOAP.call(this, `${bucketName}.s3`, 'GET', '', '', {\n\t\t\t\t\t\t\tlocation: '',\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tconst region = responseData.LocationConstraint._;\n\n\t\t\t\t\t\tif (returnAll) {\n\t\t\t\t\t\t\tresponseData = await awsApiRequestSOAPAllItems.call(\n\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t'ListBucketResult.Contents',\n\t\t\t\t\t\t\t\t`${bucketName}.s3`,\n\t\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t\t'',\n\t\t\t\t\t\t\t\t'',\n\t\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t\tregion as string,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tqs.limit = this.getNodeParameter('limit', 0);\n\t\t\t\t\t\t\tresponseData = await awsApiRequestSOAPAllItems.call(\n\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t'ListBucketResult.Contents',\n\t\t\t\t\t\t\t\t`${bucketName}.s3`,\n\t\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t\t'',\n\t\t\t\t\t\t\t\t'',\n\t\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t\tregion as string,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (Array.isArray(responseData)) {\n\t\t\t\t\t\t\tresponseData = responseData.filter(\n\t\t\t\t\t\t\t\t(e: IDataObject) =>\n\t\t\t\t\t\t\t\t\t(e.Key as string).endsWith('/') && e.Size === '0' && e.Key !== options.folderKey,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tif (qs.limit) {\n\t\t\t\t\t\t\t\tresponseData = responseData.splice(0, qs.limit as number);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData),\n\t\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (resource === 'file') {\n\t\t\t\t\t//https://docs.aws.amazon.com/AmazonS3/latest/API/API_CopyObject.html\n\t\t\t\t\tif (operation === 'copy') {\n\t\t\t\t\t\tconst sourcePath = this.getNodeParameter('sourcePath', i) as string;\n\t\t\t\t\t\tconst destinationPath = this.getNodeParameter('destinationPath', i) as string;\n\t\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i);\n\n\t\t\t\t\t\theaders['x-amz-copy-source'] = sourcePath;\n\n\t\t\t\t\t\tif (additionalFields.requesterPays) {\n\t\t\t\t\t\t\theaders['x-amz-request-payer'] = 'requester';\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (additionalFields.storageClass) {\n\t\t\t\t\t\t\theaders['x-amz-storage-class'] = snakeCase(\n\t\t\t\t\t\t\t\tadditionalFields.storageClass as string,\n\t\t\t\t\t\t\t).toUpperCase();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (additionalFields.acl) {\n\t\t\t\t\t\t\theaders['x-amz-acl'] = paramCase(additionalFields.acl as string);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (additionalFields.grantFullControl) {\n\t\t\t\t\t\t\theaders['x-amz-grant-full-control'] = '';\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (additionalFields.grantRead) {\n\t\t\t\t\t\t\theaders['x-amz-grant-read'] = '';\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (additionalFields.grantReadAcp) {\n\t\t\t\t\t\t\theaders['x-amz-grant-read-acp'] = '';\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (additionalFields.grantWriteAcp) {\n\t\t\t\t\t\t\theaders['x-amz-grant-write-acp'] = '';\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (additionalFields.lockLegalHold) {\n\t\t\t\t\t\t\theaders['x-amz-object-lock-legal-hold'] = (additionalFields.lockLegalHold as boolean)\n\t\t\t\t\t\t\t\t? 'ON'\n\t\t\t\t\t\t\t\t: 'OFF';\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (additionalFields.lockMode) {\n\t\t\t\t\t\t\theaders['x-amz-object-lock-mode'] = (\n\t\t\t\t\t\t\t\tadditionalFields.lockMode as string\n\t\t\t\t\t\t\t).toUpperCase();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (additionalFields.lockRetainUntilDate) {\n\t\t\t\t\t\t\theaders['x-amz-object-lock-retain-until-date'] =\n\t\t\t\t\t\t\t\tadditionalFields.lockRetainUntilDate as string;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (additionalFields.serverSideEncryption) {\n\t\t\t\t\t\t\theaders['x-amz-server-side-encryption'] =\n\t\t\t\t\t\t\t\tadditionalFields.serverSideEncryption as string;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (additionalFields.encryptionAwsKmsKeyId) {\n\t\t\t\t\t\t\theaders['x-amz-server-side-encryption-aws-kms-key-id'] =\n\t\t\t\t\t\t\t\tadditionalFields.encryptionAwsKmsKeyId as string;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (additionalFields.serverSideEncryptionContext) {\n\t\t\t\t\t\t\theaders['x-amz-server-side-encryption-context'] =\n\t\t\t\t\t\t\t\tadditionalFields.serverSideEncryptionContext as string;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (additionalFields.serversideEncryptionCustomerAlgorithm) {\n\t\t\t\t\t\t\theaders['x-amz-server-side-encryption-customer-algorithm'] =\n\t\t\t\t\t\t\t\tadditionalFields.serversideEncryptionCustomerAlgorithm as string;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (additionalFields.serversideEncryptionCustomerKey) {\n\t\t\t\t\t\t\theaders['x-amz-server-side-encryption-customer-key'] =\n\t\t\t\t\t\t\t\tadditionalFields.serversideEncryptionCustomerKey as string;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (additionalFields.serversideEncryptionCustomerKeyMD5) {\n\t\t\t\t\t\t\theaders['x-amz-server-side-encryption-customer-key-MD5'] =\n\t\t\t\t\t\t\t\tadditionalFields.serversideEncryptionCustomerKeyMD5 as string;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (additionalFields.taggingDirective) {\n\t\t\t\t\t\t\theaders['x-amz-tagging-directive'] = (\n\t\t\t\t\t\t\t\tadditionalFields.taggingDirective as string\n\t\t\t\t\t\t\t).toUpperCase();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (additionalFields.metadataDirective) {\n\t\t\t\t\t\t\theaders['x-amz-metadata-directive'] = (\n\t\t\t\t\t\t\t\tadditionalFields.metadataDirective as string\n\t\t\t\t\t\t\t).toUpperCase();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst destinationParts = destinationPath.split('/');\n\n\t\t\t\t\t\tconst bucketName = destinationParts[1];\n\n\t\t\t\t\t\tconst destination = `/${destinationParts.slice(2, destinationParts.length).join('/')}`;\n\n\t\t\t\t\t\tresponseData = await awsApiRequestSOAP.call(this, `${bucketName}.s3`, 'GET', '', '', {\n\t\t\t\t\t\t\tlocation: '',\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tconst region = responseData.LocationConstraint._;\n\n\t\t\t\t\t\tresponseData = await awsApiRequestSOAP.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t`${bucketName}.s3`,\n\t\t\t\t\t\t\t'PUT',\n\t\t\t\t\t\t\tdestination,\n\t\t\t\t\t\t\t'',\n\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t\theaders,\n\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\tregion as string,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData.CopyObjectResult as IDataObject[]),\n\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t}\n\t\t\t\t\t//https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetObject.html\n\t\t\t\t\tif (operation === 'download') {\n\t\t\t\t\t\tconst bucketName = this.getNodeParameter('bucketName', i) as string;\n\n\t\t\t\t\t\tconst fileKey = this.getNodeParameter('fileKey', i) as string;\n\n\t\t\t\t\t\tconst fileName = fileKey.split('/')[fileKey.split('/').length - 1];\n\n\t\t\t\t\t\tif (fileKey.substring(fileKey.length - 1) === '/') {\n\t\t\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t\t\t'Downloading a whole directory is not yet supported, please provide a file key',\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tlet region = await awsApiRequestSOAP.call(this, `${bucketName}.s3`, 'GET', '', '', {\n\t\t\t\t\t\t\tlocation: '',\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tregion = region.LocationConstraint._;\n\n\t\t\t\t\t\tconst response = await awsApiRequestREST.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t`${bucketName}.s3`,\n\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t`/${fileKey}`,\n\t\t\t\t\t\t\t'',\n\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t{ encoding: null, resolveWithFullResponse: true },\n\t\t\t\t\t\t\tregion as string,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tlet mimeType: string | undefined;\n\t\t\t\t\t\tif (response.headers['content-type']) {\n\t\t\t\t\t\t\tmimeType = response.headers['content-type'];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst newItem: INodeExecutionData = {\n\t\t\t\t\t\t\tjson: items[i].json,\n\t\t\t\t\t\t\tbinary: {},\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tif (items[i].binary !== undefined && newItem.binary) {\n\t\t\t\t\t\t\t// Create a shallow copy of the binary data so that the old\n\t\t\t\t\t\t\t// data references which do not get changed still stay behind\n\t\t\t\t\t\t\t// but the incoming data does not get changed.\n\t\t\t\t\t\t\tObject.assign(newItem.binary, items[i].binary);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\titems[i] = newItem;\n\n\t\t\t\t\t\tconst dataPropertyNameDownload = this.getNodeParameter('binaryPropertyName', i);\n\n\t\t\t\t\t\tconst data = Buffer.from(response.body as string, 'utf8');\n\n\t\t\t\t\t\titems[i].binary![dataPropertyNameDownload] = await this.helpers.prepareBinaryData(\n\t\t\t\t\t\t\tdata as unknown as Buffer,\n\t\t\t\t\t\t\tfileName,\n\t\t\t\t\t\t\tmimeType,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\t//https://docs.aws.amazon.com/AmazonS3/latest/API/API_DeleteObject.html\n\t\t\t\t\tif (operation === 'delete') {\n\t\t\t\t\t\tconst bucketName = this.getNodeParameter('bucketName', i) as string;\n\n\t\t\t\t\t\tconst fileKey = this.getNodeParameter('fileKey', i) as string;\n\n\t\t\t\t\t\tconst options = this.getNodeParameter('options', i);\n\n\t\t\t\t\t\tif (options.versionId) {\n\t\t\t\t\t\t\tqs.versionId = options.versionId as string;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await awsApiRequestSOAP.call(this, `${bucketName}.s3`, 'GET', '', '', {\n\t\t\t\t\t\t\tlocation: '',\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tconst region = responseData.LocationConstraint._;\n\n\t\t\t\t\t\tresponseData = await awsApiRequestSOAP.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t`${bucketName}.s3`,\n\t\t\t\t\t\t\t'DELETE',\n\t\t\t\t\t\t\t`/${fileKey}`,\n\t\t\t\t\t\t\t'',\n\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\tregion as string,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray({ success: true }),\n\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t}\n\t\t\t\t\t//https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListObjectsV2.html\n\t\t\t\t\tif (operation === 'getAll') {\n\t\t\t\t\t\tconst bucketName = this.getNodeParameter('bucketName', i) as string;\n\t\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', 0);\n\t\t\t\t\t\tconst options = this.getNodeParameter('options', 0);\n\n\t\t\t\t\t\tif (options.folderKey) {\n\t\t\t\t\t\t\tqs.prefix = options.folderKey as string;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (options.fetchOwner) {\n\t\t\t\t\t\t\tqs['fetch-owner'] = options.fetchOwner as string;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tqs.delimiter = '/';\n\n\t\t\t\t\t\tqs['list-type'] = 2;\n\n\t\t\t\t\t\tresponseData = await awsApiRequestSOAP.call(this, `${bucketName}.s3`, 'GET', '', '', {\n\t\t\t\t\t\t\tlocation: '',\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tconst region = responseData.LocationConstraint._;\n\n\t\t\t\t\t\tif (returnAll) {\n\t\t\t\t\t\t\tresponseData = await awsApiRequestSOAPAllItems.call(\n\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t'ListBucketResult.Contents',\n\t\t\t\t\t\t\t\t`${bucketName}.s3`,\n\t\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t\t'',\n\t\t\t\t\t\t\t\t'',\n\t\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t\tregion as string,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tqs.limit = this.getNodeParameter('limit', 0);\n\t\t\t\t\t\t\tresponseData = await awsApiRequestSOAPAllItems.call(\n\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t'ListBucketResult.Contents',\n\t\t\t\t\t\t\t\t`${bucketName}.s3`,\n\t\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t\t'',\n\t\t\t\t\t\t\t\t'',\n\t\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t\tregion as string,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tresponseData = responseData.splice(0, qs.limit);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (Array.isArray(responseData)) {\n\t\t\t\t\t\t\tresponseData = responseData.filter(\n\t\t\t\t\t\t\t\t(e: IDataObject) => !(e.Key as string).endsWith('/') && e.Size !== '0',\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tif (qs.limit) {\n\t\t\t\t\t\t\t\tresponseData = responseData.splice(0, qs.limit as number);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData),\n\t\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t//https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutObject.html\n\t\t\t\t\tif (operation === 'upload') {\n\t\t\t\t\t\tconst bucketName = this.getNodeParameter('bucketName', i) as string;\n\t\t\t\t\t\tconst fileName = this.getNodeParameter('fileName', i) as string;\n\t\t\t\t\t\tconst isBinaryData = this.getNodeParameter('binaryData', i);\n\t\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i);\n\t\t\t\t\t\tconst tagsValues = (this.getNodeParameter('tagsUi', i) as IDataObject)\n\t\t\t\t\t\t\t.tagsValues as IDataObject[];\n\t\t\t\t\t\tlet path = '/';\n\t\t\t\t\t\tlet body;\n\n\t\t\t\t\t\tif (additionalFields.requesterPays) {\n\t\t\t\t\t\t\theaders['x-amz-request-payer'] = 'requester';\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (additionalFields.parentFolderKey) {\n\t\t\t\t\t\t\tpath = `/${additionalFields.parentFolderKey}/`;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (additionalFields.storageClass) {\n\t\t\t\t\t\t\theaders['x-amz-storage-class'] = snakeCase(\n\t\t\t\t\t\t\t\tadditionalFields.storageClass as string,\n\t\t\t\t\t\t\t).toUpperCase();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (additionalFields.acl) {\n\t\t\t\t\t\t\theaders['x-amz-acl'] = paramCase(additionalFields.acl as string);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (additionalFields.grantFullControl) {\n\t\t\t\t\t\t\theaders['x-amz-grant-full-control'] = '';\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (additionalFields.grantRead) {\n\t\t\t\t\t\t\theaders['x-amz-grant-read'] = '';\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (additionalFields.grantReadAcp) {\n\t\t\t\t\t\t\theaders['x-amz-grant-read-acp'] = '';\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (additionalFields.grantWriteAcp) {\n\t\t\t\t\t\t\theaders['x-amz-grant-write-acp'] = '';\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (additionalFields.lockLegalHold) {\n\t\t\t\t\t\t\theaders['x-amz-object-lock-legal-hold'] = (additionalFields.lockLegalHold as boolean)\n\t\t\t\t\t\t\t\t? 'ON'\n\t\t\t\t\t\t\t\t: 'OFF';\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (additionalFields.lockMode) {\n\t\t\t\t\t\t\theaders['x-amz-object-lock-mode'] = (\n\t\t\t\t\t\t\t\tadditionalFields.lockMode as string\n\t\t\t\t\t\t\t).toUpperCase();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (additionalFields.lockRetainUntilDate) {\n\t\t\t\t\t\t\theaders['x-amz-object-lock-retain-until-date'] =\n\t\t\t\t\t\t\t\tadditionalFields.lockRetainUntilDate as string;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (additionalFields.serverSideEncryption) {\n\t\t\t\t\t\t\theaders['x-amz-server-side-encryption'] =\n\t\t\t\t\t\t\t\tadditionalFields.serverSideEncryption as string;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (additionalFields.encryptionAwsKmsKeyId) {\n\t\t\t\t\t\t\theaders['x-amz-server-side-encryption-aws-kms-key-id'] =\n\t\t\t\t\t\t\t\tadditionalFields.encryptionAwsKmsKeyId as string;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (additionalFields.serverSideEncryptionContext) {\n\t\t\t\t\t\t\theaders['x-amz-server-side-encryption-context'] =\n\t\t\t\t\t\t\t\tadditionalFields.serverSideEncryptionContext as string;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (additionalFields.serversideEncryptionCustomerAlgorithm) {\n\t\t\t\t\t\t\theaders['x-amz-server-side-encryption-customer-algorithm'] =\n\t\t\t\t\t\t\t\tadditionalFields.serversideEncryptionCustomerAlgorithm as string;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (additionalFields.serversideEncryptionCustomerKey) {\n\t\t\t\t\t\t\theaders['x-amz-server-side-encryption-customer-key'] =\n\t\t\t\t\t\t\t\tadditionalFields.serversideEncryptionCustomerKey as string;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (additionalFields.serversideEncryptionCustomerKeyMD5) {\n\t\t\t\t\t\t\theaders['x-amz-server-side-encryption-customer-key-MD5'] =\n\t\t\t\t\t\t\t\tadditionalFields.serversideEncryptionCustomerKeyMD5 as string;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (tagsValues) {\n\t\t\t\t\t\t\tconst tags: string[] = [];\n\t\t\t\t\t\t\ttagsValues.forEach((o: IDataObject) => {\n\t\t\t\t\t\t\t\ttags.push(`${o.key}=${o.value}`);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\theaders['x-amz-tagging'] = tags.join('&');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await awsApiRequestSOAP.call(this, `${bucketName}.s3`, 'GET', '', '', {\n\t\t\t\t\t\t\tlocation: '',\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tconst region = responseData.LocationConstraint._;\n\n\t\t\t\t\t\tif (isBinaryData) {\n\t\t\t\t\t\t\tconst binaryPropertyName = this.getNodeParameter('binaryPropertyName', i);\n\t\t\t\t\t\t\tconst binaryPropertyData = this.helpers.assertBinaryData(i, binaryPropertyName);\n\t\t\t\t\t\t\tconst binaryDataBuffer = await this.helpers.getBinaryDataBuffer(\n\t\t\t\t\t\t\t\ti,\n\t\t\t\t\t\t\t\tbinaryPropertyName,\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbody = binaryDataBuffer;\n\n\t\t\t\t\t\t\theaders['Content-Type'] = binaryPropertyData.mimeType;\n\n\t\t\t\t\t\t\theaders['Content-MD5'] = createHash('md5').update(body).digest('base64');\n\n\t\t\t\t\t\t\tresponseData = await awsApiRequestSOAP.call(\n\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t`${bucketName}.s3`,\n\t\t\t\t\t\t\t\t'PUT',\n\t\t\t\t\t\t\t\t`${path}${fileName || binaryPropertyData.fileName}`,\n\t\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t\t\theaders,\n\t\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t\tregion as string,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst fileContent = this.getNodeParameter('fileContent', i) as string;\n\n\t\t\t\t\t\t\tbody = Buffer.from(fileContent, 'utf8');\n\n\t\t\t\t\t\t\theaders['Content-Type'] = 'text/html';\n\n\t\t\t\t\t\t\theaders['Content-MD5'] = createHash('md5').update(fileContent).digest('base64');\n\n\t\t\t\t\t\t\tresponseData = await awsApiRequestSOAP.call(\n\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t`${bucketName}.s3`,\n\t\t\t\t\t\t\t\t'PUT',\n\t\t\t\t\t\t\t\t`${path}${fileName}`,\n\t\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t\t\theaders,\n\t\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t\tregion as string,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray({ success: true }),\n\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\tthis.helpers.returnJsonArray({ error: error.message }),\n\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t);\n\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\t\tif (resource === 'file' && operation === 'download') {\n\t\t\t// For file downloads the files get attached to the existing items\n\t\t\treturn [items];\n\t\t} else {\n\t\t\treturn [returnData];\n\t\t}\n\t}\n}\n"],"mappings":"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","names":[]}