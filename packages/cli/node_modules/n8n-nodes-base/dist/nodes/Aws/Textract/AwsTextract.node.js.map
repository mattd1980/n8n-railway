{"version":3,"sources":["../../../../nodes/Aws/Textract/AwsTextract.node.ts"],"sourcesContent":["import {\n\tNodeConnectionTypes,\n\ttype ICredentialDataDecryptedObject,\n\ttype ICredentialsDecrypted,\n\ttype ICredentialTestFunctions,\n\ttype IDataObject,\n\ttype IExecuteFunctions,\n\ttype INodeCredentialTestResult,\n\ttype INodeExecutionData,\n\ttype INodeType,\n\ttype INodeTypeDescription,\n} from 'n8n-workflow';\n\nimport type { IExpenseDocument } from './GenericFunctions';\nimport { awsApiRequestREST, simplify, validateCredentials } from './GenericFunctions';\n\nexport class AwsTextract implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'AWS Textract',\n\t\tname: 'awsTextract',\n\t\ticon: 'file:textract.svg',\n\t\tgroup: ['output'],\n\t\tversion: 1,\n\t\tsubtitle: '={{$parameter[\"operation\"]}}',\n\t\tdescription: 'Sends data to Amazon Textract',\n\t\tdefaults: {\n\t\t\tname: 'AWS Textract',\n\t\t},\n\t\tusableAsTool: true,\n\t\tinputs: [NodeConnectionTypes.Main],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tcredentials: [\n\t\t\t{\n\t\t\t\tname: 'aws',\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Operation',\n\t\t\t\tname: 'operation',\n\t\t\t\ttype: 'options',\n\t\t\t\tnoDataExpression: true,\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Analyze Receipt or Invoice',\n\t\t\t\t\t\tvalue: 'analyzeExpense',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'analyzeExpense',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Input Data Field Name',\n\t\t\t\tname: 'binaryPropertyName',\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: 'data',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['analyzeExpense'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\trequired: true,\n\t\t\t\tdescription:\n\t\t\t\t\t'The name of the input field containing the binary file data to be uploaded. Supported file types: PNG, JPEG.',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Simplify',\n\t\t\t\tname: 'simple',\n\t\t\t\ttype: 'boolean',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['analyzeExpense'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdefault: true,\n\t\t\t\tdescription:\n\t\t\t\t\t'Whether to return a simplified version of the response instead of the raw data',\n\t\t\t},\n\t\t],\n\t};\n\n\tmethods = {\n\t\tcredentialTest: {\n\t\t\tasync awsTextractApiCredentialTest(\n\t\t\t\tthis: ICredentialTestFunctions,\n\t\t\t\tcredential: ICredentialsDecrypted,\n\t\t\t): Promise<INodeCredentialTestResult> {\n\t\t\t\ttry {\n\t\t\t\t\tawait validateCredentials.call(\n\t\t\t\t\t\tthis,\n\t\t\t\t\t\tcredential.data as ICredentialDataDecryptedObject,\n\t\t\t\t\t\t'sts',\n\t\t\t\t\t);\n\t\t\t\t} catch (error) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tstatus: 'Error',\n\t\t\t\t\t\tmessage: 'The security token included in the request is invalid',\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\tstatus: 'OK',\n\t\t\t\t\tmessage: 'Connection successful!',\n\t\t\t\t};\n\t\t\t},\n\t\t},\n\t};\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t\tconst items = this.getInputData();\n\t\tconst returnData: IDataObject[] = [];\n\t\tlet responseData;\n\t\tconst operation = this.getNodeParameter('operation', 0);\n\t\tfor (let i = 0; i < items.length; i++) {\n\t\t\ttry {\n\t\t\t\t//https://docs.aws.amazon.com/textract/latest/dg/API_AnalyzeExpense.html\n\t\t\t\tif (operation === 'analyzeExpense') {\n\t\t\t\t\tconst simple = this.getNodeParameter('simple', i) as boolean;\n\t\t\t\t\tconst binaryPropertyName = this.getNodeParameter('binaryPropertyName', i);\n\t\t\t\t\tconst binaryData = this.helpers.assertBinaryData(i, binaryPropertyName);\n\n\t\t\t\t\tconst body: IDataObject = {\n\t\t\t\t\t\tDocument: {\n\t\t\t\t\t\t\tBytes: binaryData.data,\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\n\t\t\t\t\tconst action = 'Textract.AnalyzeExpense';\n\t\t\t\t\tresponseData = (await awsApiRequestREST.call(\n\t\t\t\t\t\tthis,\n\t\t\t\t\t\t'textract',\n\t\t\t\t\t\t'POST',\n\t\t\t\t\t\t'',\n\t\t\t\t\t\tJSON.stringify(body),\n\t\t\t\t\t\t{ 'x-amz-target': action, 'Content-Type': 'application/x-amz-json-1.1' },\n\t\t\t\t\t)) as IExpenseDocument;\n\t\t\t\t\tif (simple) {\n\t\t\t\t\t\tresponseData = simplify(responseData);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (Array.isArray(responseData)) {\n\t\t\t\t\treturnData.push.apply(returnData, responseData as IDataObject[]);\n\t\t\t\t} else {\n\t\t\t\t\treturnData.push(responseData as unknown as IDataObject);\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\treturnData.push({ error: error.message });\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\t\treturn [this.helpers.returnJsonArray(returnData)];\n\t}\n}\n"],"mappings":"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","names":[]}