{"version":3,"sources":["../../../../nodes/Splunk/v1/SplunkV1.node.ts"],"sourcesContent":["import set from 'lodash/set';\nimport type {\n\tIExecuteFunctions,\n\tIDataObject,\n\tILoadOptionsFunctions,\n\tINodeExecutionData,\n\tINodeType,\n\tINodeTypeDescription,\n\tINodeTypeBaseDescription,\n} from 'n8n-workflow';\nimport { NodeApiError, NodeConnectionTypes, NodeOperationError } from 'n8n-workflow';\n\nimport {\n\tfiredAlertOperations,\n\tsearchConfigurationFields,\n\tsearchConfigurationOperations,\n\tsearchJobFields,\n\tsearchJobOperations,\n\tsearchResultFields,\n\tsearchResultOperations,\n\tuserFields,\n\tuserOperations,\n} from './descriptions';\nimport {\n\tformatFeed,\n\tformatResults,\n\tformatSearch,\n\tgetId,\n\tpopulate,\n\tsetCount,\n\tsplunkApiRequest,\n\ttoUnixEpoch,\n} from './GenericFunctions';\nimport type { SplunkFeedResponse } from './types';\nimport { oldVersionNotice } from '../../../utils/descriptions';\n\nconst versionDescription: INodeTypeDescription = {\n\tdisplayName: 'Splunk',\n\tname: 'splunk',\n\ticon: 'file:splunk.svg',\n\tgroup: ['transform'],\n\tversion: 1,\n\tsubtitle: '={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}',\n\tdescription: 'Consume the Splunk Enterprise API',\n\tdefaults: {\n\t\tname: 'Splunk',\n\t},\n\tinputs: [NodeConnectionTypes.Main],\n\toutputs: [NodeConnectionTypes.Main],\n\tcredentials: [\n\t\t{\n\t\t\tname: 'splunkApi',\n\t\t\trequired: true,\n\t\t},\n\t],\n\tproperties: [\n\t\toldVersionNotice,\n\t\t{\n\t\t\tdisplayName: 'Resource',\n\t\t\tname: 'resource',\n\t\t\ttype: 'options',\n\t\t\tnoDataExpression: true,\n\t\t\toptions: [\n\t\t\t\t{\n\t\t\t\t\tname: 'Fired Alert',\n\t\t\t\t\tvalue: 'firedAlert',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'Search Configuration',\n\t\t\t\t\tvalue: 'searchConfiguration',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'Search Job',\n\t\t\t\t\tvalue: 'searchJob',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'Search Result',\n\t\t\t\t\tvalue: 'searchResult',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'User',\n\t\t\t\t\tvalue: 'user',\n\t\t\t\t},\n\t\t\t],\n\t\t\tdefault: 'searchJob',\n\t\t},\n\t\t...firedAlertOperations,\n\t\t...searchConfigurationOperations,\n\t\t...searchConfigurationFields,\n\t\t...searchJobOperations,\n\t\t...searchJobFields,\n\t\t...searchResultOperations,\n\t\t...searchResultFields,\n\t\t...userOperations,\n\t\t...userFields,\n\t],\n};\n\nexport class SplunkV1 implements INodeType {\n\tdescription: INodeTypeDescription;\n\n\tconstructor(baseDescription: INodeTypeBaseDescription) {\n\t\tthis.description = {\n\t\t\t...baseDescription,\n\t\t\t...versionDescription,\n\t\t};\n\t}\n\n\tmethods = {\n\t\tloadOptions: {\n\t\t\tasync getRoles(this: ILoadOptionsFunctions) {\n\t\t\t\tconst endpoint = '/services/authorization/roles';\n\t\t\t\tconst responseData = (await splunkApiRequest.call(\n\t\t\t\t\tthis,\n\t\t\t\t\t'GET',\n\t\t\t\t\tendpoint,\n\t\t\t\t)) as SplunkFeedResponse;\n\t\t\t\tconst { entry: entries } = responseData.feed;\n\n\t\t\t\treturn Array.isArray(entries)\n\t\t\t\t\t? entries.map((entry) => ({ name: entry.title, value: entry.title }))\n\t\t\t\t\t: [{ name: entries.title, value: entries.title }];\n\t\t\t},\n\t\t},\n\t};\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t\tconst items = this.getInputData();\n\t\tconst returnData: INodeExecutionData[] = [];\n\n\t\tconst resource = this.getNodeParameter('resource', 0);\n\t\tconst operation = this.getNodeParameter('operation', 0);\n\n\t\tlet responseData;\n\n\t\tfor (let i = 0; i < items.length; i++) {\n\t\t\ttry {\n\t\t\t\tif (resource === 'firedAlert') {\n\t\t\t\t\t// **********************************************************************\n\t\t\t\t\t//                               firedAlert\n\t\t\t\t\t// **********************************************************************\n\n\t\t\t\t\tif (operation === 'getReport') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//            firedAlert: getReport\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\t// https://docs.splunk.com/Documentation/Splunk/latest/RESTREF/RESTsearch#alerts.2Ffired_alerts\n\n\t\t\t\t\t\tconst endpoint = '/services/alerts/fired_alerts';\n\t\t\t\t\t\tresponseData = await splunkApiRequest.call(this, 'GET', endpoint).then(formatFeed);\n\t\t\t\t\t}\n\t\t\t\t} else if (resource === 'searchConfiguration') {\n\t\t\t\t\t// **********************************************************************\n\t\t\t\t\t//                          searchConfiguration\n\t\t\t\t\t// **********************************************************************\n\n\t\t\t\t\tif (operation === 'delete') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//       searchConfiguration: delete\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\t// https://docs.splunk.com/Documentation/Splunk/8.2.2/RESTREF/RESTsearch#saved.2Fsearches.2F.7Bname.7D\n\n\t\t\t\t\t\tconst partialEndpoint = '/services/saved/searches/';\n\t\t\t\t\t\tconst searchConfigurationId = getId.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\ti,\n\t\t\t\t\t\t\t'searchConfigurationId',\n\t\t\t\t\t\t\t'/search/saved/searches/',\n\t\t\t\t\t\t); // id endpoint differs from operation endpoint\n\t\t\t\t\t\tconst endpoint = `${partialEndpoint}/${searchConfigurationId}`;\n\n\t\t\t\t\t\tresponseData = await splunkApiRequest.call(this, 'DELETE', endpoint);\n\t\t\t\t\t} else if (operation === 'get') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//         searchConfiguration: get\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\t// https://docs.splunk.com/Documentation/Splunk/8.2.2/RESTREF/RESTsearch#saved.2Fsearches.2F.7Bname.7D\n\n\t\t\t\t\t\tconst partialEndpoint = '/services/saved/searches/';\n\t\t\t\t\t\tconst searchConfigurationId = getId.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\ti,\n\t\t\t\t\t\t\t'searchConfigurationId',\n\t\t\t\t\t\t\t'/search/saved/searches/',\n\t\t\t\t\t\t); // id endpoint differs from operation endpoint\n\t\t\t\t\t\tconst endpoint = `${partialEndpoint}/${searchConfigurationId}`;\n\n\t\t\t\t\t\tresponseData = await splunkApiRequest.call(this, 'GET', endpoint).then(formatFeed);\n\t\t\t\t\t} else if (operation === 'getAll') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//       searchConfiguration: getAll\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\t// https://docs.splunk.com/Documentation/Splunk/8.2.2/RESTREF/RESTsearch#saved.2Fsearches\n\n\t\t\t\t\t\tconst qs = {} as IDataObject;\n\t\t\t\t\t\tconst options = this.getNodeParameter('options', i);\n\n\t\t\t\t\t\tpopulate(options, qs);\n\t\t\t\t\t\tsetCount.call(this, qs);\n\n\t\t\t\t\t\tconst endpoint = '/services/saved/searches';\n\t\t\t\t\t\tresponseData = await splunkApiRequest\n\t\t\t\t\t\t\t.call(this, 'GET', endpoint, {}, qs)\n\t\t\t\t\t\t\t.then(formatFeed);\n\t\t\t\t\t}\n\t\t\t\t} else if (resource === 'searchJob') {\n\t\t\t\t\t// **********************************************************************\n\t\t\t\t\t//                               searchJob\n\t\t\t\t\t// **********************************************************************\n\n\t\t\t\t\tif (operation === 'create') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//            searchJob: create\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\t// https://docs.splunk.com/Documentation/Splunk/8.2.2/RESTREF/RESTsearch#search.2Fjobs\n\n\t\t\t\t\t\tconst body = {\n\t\t\t\t\t\t\tsearch: this.getNodeParameter('search', i),\n\t\t\t\t\t\t} as IDataObject;\n\n\t\t\t\t\t\tconst { earliest_time, latest_time, index_earliest, index_latest, ...rest } =\n\t\t\t\t\t\t\tthis.getNodeParameter('additionalFields', i) as IDataObject & {\n\t\t\t\t\t\t\t\tearliest_time?: string;\n\t\t\t\t\t\t\t\tlatest_time?: string;\n\t\t\t\t\t\t\t\tindex_earliest?: string;\n\t\t\t\t\t\t\t\tindex_latest?: string;\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\tpopulate(\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t...(earliest_time && { earliest_time: toUnixEpoch(earliest_time) }),\n\t\t\t\t\t\t\t\t...(latest_time && { latest_time: toUnixEpoch(latest_time) }),\n\t\t\t\t\t\t\t\t...(index_earliest && { index_earliest: toUnixEpoch(index_earliest) }),\n\t\t\t\t\t\t\t\t...(index_latest && { index_latest: toUnixEpoch(index_latest) }),\n\t\t\t\t\t\t\t\t...rest,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tconst endpoint = '/services/search/jobs';\n\t\t\t\t\t\tresponseData = await splunkApiRequest.call(this, 'POST', endpoint, body);\n\n\t\t\t\t\t\tconst getEndpoint = `/services/search/jobs/${responseData.response.sid}`;\n\t\t\t\t\t\tresponseData = await splunkApiRequest.call(this, 'GET', getEndpoint).then(formatSearch);\n\t\t\t\t\t} else if (operation === 'delete') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//            searchJob: delete\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\t// https://docs.splunk.com/Documentation/Splunk/8.2.2/RESTREF/RESTsearch#search.2Fjobs.2F.7Bsearch_id.7D\n\n\t\t\t\t\t\tconst partialEndpoint = '/services/search/jobs/';\n\t\t\t\t\t\tconst searchJobId = getId.call(this, i, 'searchJobId', partialEndpoint);\n\t\t\t\t\t\tconst endpoint = `${partialEndpoint}/${searchJobId}`;\n\t\t\t\t\t\tresponseData = await splunkApiRequest.call(this, 'DELETE', endpoint);\n\t\t\t\t\t} else if (operation === 'get') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//              searchJob: get\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\t// https://docs.splunk.com/Documentation/Splunk/8.2.2/RESTREF/RESTsearch#search.2Fjobs.2F.7Bsearch_id.7D\n\n\t\t\t\t\t\tconst partialEndpoint = '/services/search/jobs/';\n\t\t\t\t\t\tconst searchJobId = getId.call(this, i, 'searchJobId', partialEndpoint);\n\t\t\t\t\t\tconst endpoint = `${partialEndpoint}/${searchJobId}`;\n\t\t\t\t\t\tresponseData = await splunkApiRequest.call(this, 'GET', endpoint).then(formatSearch);\n\t\t\t\t\t} else if (operation === 'getAll') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//            searchJob: getAll\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\t// https://docs.splunk.com/Documentation/Splunk/8.2.2/RESTREF/RESTsearch#search.2Fjobs\n\n\t\t\t\t\t\tconst qs = {} as IDataObject;\n\t\t\t\t\t\tconst options = this.getNodeParameter('options', i);\n\n\t\t\t\t\t\tpopulate(options, qs);\n\t\t\t\t\t\tsetCount.call(this, qs);\n\n\t\t\t\t\t\tconst endpoint = '/services/search/jobs';\n\t\t\t\t\t\tresponseData = (await splunkApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\tendpoint,\n\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t)) as SplunkFeedResponse;\n\t\t\t\t\t\tresponseData = formatFeed(responseData);\n\t\t\t\t\t}\n\t\t\t\t} else if (resource === 'searchResult') {\n\t\t\t\t\t// **********************************************************************\n\t\t\t\t\t//                              searchResult\n\t\t\t\t\t// **********************************************************************\n\n\t\t\t\t\tif (operation === 'getAll') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//           searchResult: getAll\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\t// https://docs.splunk.com/Documentation/Splunk/latest/RESTREF/RESTsearch#search.2Fjobs.2F.7Bsearch_id.7D.2Fresults\n\n\t\t\t\t\t\tconst searchJobId = this.getNodeParameter('searchJobId', i);\n\n\t\t\t\t\t\tconst qs = {} as IDataObject;\n\t\t\t\t\t\tconst filters = this.getNodeParameter('filters', i) as IDataObject & {\n\t\t\t\t\t\t\tkeyValueMatch?: { keyValuePair?: { key: string; value: string } };\n\t\t\t\t\t\t};\n\t\t\t\t\t\tconst options = this.getNodeParameter('options', i);\n\n\t\t\t\t\t\tconst keyValuePair = filters?.keyValueMatch?.keyValuePair;\n\n\t\t\t\t\t\tif (keyValuePair?.key && keyValuePair?.value) {\n\t\t\t\t\t\t\tqs.search = `search ${keyValuePair.key}=${keyValuePair.value}`;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tpopulate(options, qs);\n\t\t\t\t\t\tsetCount.call(this, qs);\n\n\t\t\t\t\t\tconst endpoint = `/services/search/jobs/${searchJobId}/results`;\n\t\t\t\t\t\tresponseData = await splunkApiRequest\n\t\t\t\t\t\t\t.call(this, 'GET', endpoint, {}, qs)\n\t\t\t\t\t\t\t.then(formatResults);\n\t\t\t\t\t}\n\t\t\t\t} else if (resource === 'user') {\n\t\t\t\t\t// **********************************************************************\n\t\t\t\t\t//                                  user\n\t\t\t\t\t// **********************************************************************\n\n\t\t\t\t\tif (operation === 'create') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//               user: create\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\t// https://docs.splunk.com/Documentation/Splunk/8.2.2/RESTREF/RESTaccess#authentication.2Fusers\n\n\t\t\t\t\t\tconst roles = this.getNodeParameter('roles', i) as string[];\n\n\t\t\t\t\t\tconst body = {\n\t\t\t\t\t\t\tname: this.getNodeParameter('name', i),\n\t\t\t\t\t\t\troles,\n\t\t\t\t\t\t\tpassword: this.getNodeParameter('password', i),\n\t\t\t\t\t\t} as IDataObject;\n\n\t\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i);\n\n\t\t\t\t\t\tpopulate(additionalFields, body);\n\n\t\t\t\t\t\tconst endpoint = '/services/authentication/users';\n\t\t\t\t\t\tresponseData = (await splunkApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'POST',\n\t\t\t\t\t\t\tendpoint,\n\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t)) as SplunkFeedResponse;\n\t\t\t\t\t\tresponseData = formatFeed(responseData);\n\t\t\t\t\t} else if (operation === 'delete') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//               user: delete\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\t// https://docs.splunk.com/Documentation/Splunk/8.2.2/RESTREF/RESTaccess#authentication.2Fusers.2F.7Bname.7D\n\n\t\t\t\t\t\tconst partialEndpoint = '/services/authentication/users';\n\t\t\t\t\t\tconst userId = getId.call(this, i, 'userId', partialEndpoint);\n\t\t\t\t\t\tconst endpoint = `${partialEndpoint}/${userId}`;\n\t\t\t\t\t\tawait splunkApiRequest.call(this, 'DELETE', endpoint);\n\t\t\t\t\t\tresponseData = { success: true };\n\t\t\t\t\t} else if (operation === 'get') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//                user: get\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\t// https://docs.splunk.com/Documentation/Splunk/8.2.2/RESTREF/RESTaccess#authentication.2Fusers.2F.7Bname.7D\n\n\t\t\t\t\t\tconst partialEndpoint = '/services/authentication/users/';\n\t\t\t\t\t\tconst userId = getId.call(this, i, 'userId', '/services/authentication/users/');\n\t\t\t\t\t\tconst endpoint = `${partialEndpoint}/${userId}`;\n\t\t\t\t\t\tresponseData = await splunkApiRequest.call(this, 'GET', endpoint).then(formatFeed);\n\t\t\t\t\t} else if (operation === 'getAll') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//               user: getAll\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\t// https://docs.splunk.com/Documentation/Splunk/8.2.2/RESTREF/RESTaccess#authentication.2Fusers\n\n\t\t\t\t\t\tconst qs = {} as IDataObject;\n\t\t\t\t\t\tsetCount.call(this, qs);\n\n\t\t\t\t\t\tconst endpoint = '/services/authentication/users';\n\t\t\t\t\t\tresponseData = await splunkApiRequest\n\t\t\t\t\t\t\t.call(this, 'GET', endpoint, {}, qs)\n\t\t\t\t\t\t\t.then(formatFeed);\n\t\t\t\t\t} else if (operation === 'update') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//               user: update\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\t// https://docs.splunk.com/Documentation/Splunk/8.2.2/RESTREF/RESTaccess#authentication.2Fusers.2F.7Bname.7D\n\n\t\t\t\t\t\tconst body = {} as IDataObject;\n\t\t\t\t\t\tconst { roles, ...rest } = this.getNodeParameter('updateFields', i) as IDataObject & {\n\t\t\t\t\t\t\troles: string[];\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tpopulate(\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t...(roles && { roles }),\n\t\t\t\t\t\t\t\t...rest,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tconst partialEndpoint = '/services/authentication/users/';\n\t\t\t\t\t\tconst userId = getId.call(this, i, 'userId', partialEndpoint);\n\t\t\t\t\t\tconst endpoint = `${partialEndpoint}/${userId}`;\n\t\t\t\t\t\tresponseData = await splunkApiRequest\n\t\t\t\t\t\t\t.call(this, 'POST', endpoint, body)\n\t\t\t\t\t\t\t.then(formatFeed);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\treturnData.push({ json: { error: error.cause.error }, pairedItem: { item: i } });\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (error instanceof NodeApiError) {\n\t\t\t\t\tset(error, 'context.itemIndex', i);\n\t\t\t\t}\n\n\t\t\t\tif (error instanceof NodeOperationError && error?.context?.itemIndex === undefined) {\n\t\t\t\t\tset(error, 'context.itemIndex', i);\n\t\t\t\t}\n\n\t\t\t\tthrow new NodeOperationError(this.getNode(), error, { itemIndex: i });\n\t\t\t}\n\n\t\t\tif (Array.isArray(responseData)) {\n\t\t\t\tfor (const item of responseData) {\n\t\t\t\t\treturnData.push({ json: item, pairedItem: { item: i } });\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturnData.push({ json: responseData, pairedItem: { item: i } });\n\t\t\t}\n\t\t}\n\n\t\treturn [returnData];\n\t}\n}\n"],"mappings":"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","names":["import_descriptions","set"]}