{"version":3,"sources":["../../../../../nodes/Splunk/v2/methods/listSearch.ts"],"sourcesContent":["import type { IDataObject, ILoadOptionsFunctions, INodeListSearchResult } from 'n8n-workflow';\n\nimport { splunkApiJsonRequest } from '../transport';\n\nexport async function searchReports(\n\tthis: ILoadOptionsFunctions,\n\tfilter?: string,\n): Promise<INodeListSearchResult> {\n\tconst qs: IDataObject = {};\n\n\tif (filter) {\n\t\tqs.search = filter;\n\t}\n\n\tconst endpoint = '/services/saved/searches';\n\tconst response = await splunkApiJsonRequest.call(this, 'GET', endpoint, undefined, qs);\n\n\treturn {\n\t\tresults: (response as IDataObject[]).map((entry: IDataObject) => {\n\t\t\treturn {\n\t\t\t\tname: entry.name as string,\n\t\t\t\tvalue: entry.id as string,\n\t\t\t\turl: entry.entryUrl as string,\n\t\t\t};\n\t\t}),\n\t};\n}\n\nexport async function searchJobs(\n\tthis: ILoadOptionsFunctions,\n\tfilter?: string,\n): Promise<INodeListSearchResult> {\n\tconst qs: IDataObject = {};\n\n\tif (filter) {\n\t\tqs.search = filter;\n\t}\n\n\tconst endpoint = '/services/search/jobs';\n\tconst response = await splunkApiJsonRequest.call(this, 'GET', endpoint, undefined, qs);\n\n\treturn {\n\t\tresults: (response as IDataObject[]).map((entry: IDataObject) => {\n\t\t\treturn {\n\t\t\t\tname: (entry.name as string).replace(/^\\|\\s*/, ''),\n\t\t\t\tvalue: entry.id as string,\n\t\t\t\turl: entry.entryUrl as string,\n\t\t\t};\n\t\t}),\n\t};\n}\n\nexport async function searchUsers(\n\tthis: ILoadOptionsFunctions,\n\tfilter?: string,\n): Promise<INodeListSearchResult> {\n\tconst qs: IDataObject = {};\n\n\tif (filter) {\n\t\tqs.search = filter;\n\t}\n\n\tconst endpoint = '/services/authentication/users';\n\tconst response = await splunkApiJsonRequest.call(this, 'GET', endpoint, undefined, qs);\n\n\treturn {\n\t\tresults: (response as IDataObject[]).map((entry: IDataObject) => {\n\t\t\treturn {\n\t\t\t\tname: entry.name as string,\n\t\t\t\tvalue: entry.id as string,\n\t\t\t\turl: entry.entryUrl as string,\n\t\t\t};\n\t\t}),\n\t};\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,uBAAqC;AAErC,eAAsB,cAErB,QACiC;AACjC,QAAM,KAAkB,CAAC;AAEzB,MAAI,QAAQ;AACX,OAAG,SAAS;AAAA,EACb;AAEA,QAAM,WAAW;AACjB,QAAM,WAAW,MAAM,sCAAqB,KAAK,MAAM,OAAO,UAAU,QAAW,EAAE;AAErF,SAAO;AAAA,IACN,SAAU,SAA2B,IAAI,CAAC,UAAuB;AAChE,aAAO;AAAA,QACN,MAAM,MAAM;AAAA,QACZ,OAAO,MAAM;AAAA,QACb,KAAK,MAAM;AAAA,MACZ;AAAA,IACD,CAAC;AAAA,EACF;AACD;AAEA,eAAsB,WAErB,QACiC;AACjC,QAAM,KAAkB,CAAC;AAEzB,MAAI,QAAQ;AACX,OAAG,SAAS;AAAA,EACb;AAEA,QAAM,WAAW;AACjB,QAAM,WAAW,MAAM,sCAAqB,KAAK,MAAM,OAAO,UAAU,QAAW,EAAE;AAErF,SAAO;AAAA,IACN,SAAU,SAA2B,IAAI,CAAC,UAAuB;AAChE,aAAO;AAAA,QACN,MAAO,MAAM,KAAgB,QAAQ,UAAU,EAAE;AAAA,QACjD,OAAO,MAAM;AAAA,QACb,KAAK,MAAM;AAAA,MACZ;AAAA,IACD,CAAC;AAAA,EACF;AACD;AAEA,eAAsB,YAErB,QACiC;AACjC,QAAM,KAAkB,CAAC;AAEzB,MAAI,QAAQ;AACX,OAAG,SAAS;AAAA,EACb;AAEA,QAAM,WAAW;AACjB,QAAM,WAAW,MAAM,sCAAqB,KAAK,MAAM,OAAO,UAAU,QAAW,EAAE;AAErF,SAAO;AAAA,IACN,SAAU,SAA2B,IAAI,CAAC,UAAuB;AAChE,aAAO;AAAA,QACN,MAAM,MAAM;AAAA,QACZ,OAAO,MAAM;AAAA,QACb,KAAK,MAAM;AAAA,MACZ;AAAA,IACD,CAAC;AAAA,EACF;AACD;","names":[]}