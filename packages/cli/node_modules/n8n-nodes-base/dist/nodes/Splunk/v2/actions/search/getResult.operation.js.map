{"version":3,"sources":["../../../../../../nodes/Splunk/v2/actions/search/getResult.operation.ts"],"sourcesContent":["import type { INodeProperties, IExecuteFunctions, IDataObject } from 'n8n-workflow';\n\nimport { updateDisplayOptions } from '../../../../../utils/utilities';\nimport { searchJobRLC } from '../../helpers/descriptions';\nimport { populate, setReturnAllOrLimit } from '../../helpers/utils';\nimport { splunkApiJsonRequest } from '../../transport';\n\nconst properties: INodeProperties[] = [\n\tsearchJobRLC,\n\t{\n\t\tdisplayName: 'Return All',\n\t\tname: 'returnAll',\n\t\ttype: 'boolean',\n\t\tdefault: false,\n\t\tdescription: 'Whether to return all results or only up to a given limit',\n\t},\n\t{\n\t\tdisplayName: 'Limit',\n\t\tname: 'limit',\n\t\ttype: 'number',\n\t\tdefault: 50,\n\t\tdescription: 'Max number of results to return',\n\t\ttypeOptions: {\n\t\t\tminValue: 1,\n\t\t},\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\treturnAll: [false],\n\t\t\t},\n\t\t},\n\t},\n\t{\n\t\tdisplayName: 'Filters',\n\t\tname: 'filters',\n\t\ttype: 'collection',\n\t\tplaceholder: 'Add Filter',\n\t\tdefault: {},\n\t\toptions: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Key-Value Match',\n\t\t\t\tname: 'keyValueMatch',\n\t\t\t\tdescription:\n\t\t\t\t\t'Key-value pair to match against. Example: if \"Key\" is set to <code>user</code> and \"Field\" is set to <code>john</code>, only the results where <code>user</code> is <code>john</code> will be returned.',\n\t\t\t\ttype: 'fixedCollection',\n\t\t\t\tdefault: {},\n\t\t\t\tplaceholder: 'Add Key-Value Pair',\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Key-Value Pair',\n\t\t\t\t\t\tname: 'keyValuePair',\n\t\t\t\t\t\tvalues: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdisplayName: 'Key',\n\t\t\t\t\t\t\t\tname: 'key',\n\t\t\t\t\t\t\t\tdescription: 'Key to match against',\n\t\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdisplayName: 'Value',\n\t\t\t\t\t\t\t\tname: 'value',\n\t\t\t\t\t\t\t\tdescription: 'Value to match against',\n\t\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t],\n\t},\n\t{\n\t\tdisplayName: 'Options',\n\t\tname: 'options',\n\t\ttype: 'collection',\n\t\tplaceholder: 'Add option',\n\t\tdefault: {},\n\t\toptions: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Add Summary to Metadata',\n\t\t\t\tname: 'add_summary_to_metadata',\n\t\t\t\tdescription: 'Whether to include field summary statistics in the response',\n\t\t\t\ttype: 'boolean',\n\t\t\t\tdefault: false,\n\t\t\t},\n\t\t],\n\t},\n];\n\nconst displayOptions = {\n\tshow: {\n\t\tresource: ['search'],\n\t\toperation: ['getResult'],\n\t},\n};\n\nexport const description = updateDisplayOptions(displayOptions, properties);\n\nexport async function execute(\n\tthis: IExecuteFunctions,\n\ti: number,\n): Promise<IDataObject | IDataObject[]> {\n\t// https://docs.splunk.com/Documentation/Splunk/latest/RESTREF/RESTsearch#search.2Fjobs.2F.7Bsearch_id.7D.2Fresults\n\n\tconst searchJobId = this.getNodeParameter('searchJobId', i, '', { extractValue: true }) as string;\n\n\tconst qs = {} as IDataObject;\n\tconst filters = this.getNodeParameter('filters', i) as IDataObject & {\n\t\tkeyValueMatch?: { keyValuePair?: { key: string; value: string } };\n\t};\n\tconst options = this.getNodeParameter('options', i);\n\n\tconst keyValuePair = filters?.keyValueMatch?.keyValuePair;\n\n\tif (keyValuePair?.key && keyValuePair?.value) {\n\t\tqs.search = `search ${keyValuePair.key}=${keyValuePair.value}`;\n\t}\n\n\tpopulate(options, qs);\n\tsetReturnAllOrLimit.call(this, qs);\n\n\tconst endpoint = `/services/search/jobs/${searchJobId}/results`;\n\tconst returnData = await splunkApiJsonRequest.call(this, 'GET', endpoint, {}, qs);\n\n\treturn returnData;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,uBAAqC;AACrC,0BAA6B;AAC7B,mBAA8C;AAC9C,uBAAqC;AAErC,MAAM,aAAgC;AAAA,EACrC;AAAA,EACA;AAAA,IACC,aAAa;AAAA,IACb,MAAM;AAAA,IACN,MAAM;AAAA,IACN,SAAS;AAAA,IACT,aAAa;AAAA,EACd;AAAA,EACA;AAAA,IACC,aAAa;AAAA,IACb,MAAM;AAAA,IACN,MAAM;AAAA,IACN,SAAS;AAAA,IACT,aAAa;AAAA,IACb,aAAa;AAAA,MACZ,UAAU;AAAA,IACX;AAAA,IACA,gBAAgB;AAAA,MACf,MAAM;AAAA,QACL,WAAW,CAAC,KAAK;AAAA,MAClB;AAAA,IACD;AAAA,EACD;AAAA,EACA;AAAA,IACC,aAAa;AAAA,IACb,MAAM;AAAA,IACN,MAAM;AAAA,IACN,aAAa;AAAA,IACb,SAAS,CAAC;AAAA,IACV,SAAS;AAAA,MACR;AAAA,QACC,aAAa;AAAA,QACb,MAAM;AAAA,QACN,aACC;AAAA,QACD,MAAM;AAAA,QACN,SAAS,CAAC;AAAA,QACV,aAAa;AAAA,QACb,SAAS;AAAA,UACR;AAAA,YACC,aAAa;AAAA,YACb,MAAM;AAAA,YACN,QAAQ;AAAA,cACP;AAAA,gBACC,aAAa;AAAA,gBACb,MAAM;AAAA,gBACN,aAAa;AAAA,gBACb,MAAM;AAAA,gBACN,SAAS;AAAA,cACV;AAAA,cACA;AAAA,gBACC,aAAa;AAAA,gBACb,MAAM;AAAA,gBACN,aAAa;AAAA,gBACb,MAAM;AAAA,gBACN,SAAS;AAAA,cACV;AAAA,YACD;AAAA,UACD;AAAA,QACD;AAAA,MACD;AAAA,IACD;AAAA,EACD;AAAA,EACA;AAAA,IACC,aAAa;AAAA,IACb,MAAM;AAAA,IACN,MAAM;AAAA,IACN,aAAa;AAAA,IACb,SAAS,CAAC;AAAA,IACV,SAAS;AAAA,MACR;AAAA,QACC,aAAa;AAAA,QACb,MAAM;AAAA,QACN,aAAa;AAAA,QACb,MAAM;AAAA,QACN,SAAS;AAAA,MACV;AAAA,IACD;AAAA,EACD;AACD;AAEA,MAAM,iBAAiB;AAAA,EACtB,MAAM;AAAA,IACL,UAAU,CAAC,QAAQ;AAAA,IACnB,WAAW,CAAC,WAAW;AAAA,EACxB;AACD;AAEO,MAAM,kBAAc,uCAAqB,gBAAgB,UAAU;AAE1E,eAAsB,QAErB,GACuC;AAGvC,QAAM,cAAc,KAAK,iBAAiB,eAAe,GAAG,IAAI,EAAE,cAAc,KAAK,CAAC;AAEtF,QAAM,KAAK,CAAC;AACZ,QAAM,UAAU,KAAK,iBAAiB,WAAW,CAAC;AAGlD,QAAM,UAAU,KAAK,iBAAiB,WAAW,CAAC;AAElD,QAAM,eAAe,SAAS,eAAe;AAE7C,MAAI,cAAc,OAAO,cAAc,OAAO;AAC7C,OAAG,SAAS,UAAU,aAAa,GAAG,IAAI,aAAa,KAAK;AAAA,EAC7D;AAEA,6BAAS,SAAS,EAAE;AACpB,mCAAoB,KAAK,MAAM,EAAE;AAEjC,QAAM,WAAW,yBAAyB,WAAW;AACrD,QAAM,aAAa,MAAM,sCAAqB,KAAK,MAAM,OAAO,UAAU,CAAC,GAAG,EAAE;AAEhF,SAAO;AACR;","names":[]}