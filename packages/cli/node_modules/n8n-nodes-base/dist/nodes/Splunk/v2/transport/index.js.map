{"version":3,"sources":["../../../../../nodes/Splunk/v2/transport/index.ts"],"sourcesContent":["import type {\n\tIExecuteFunctions,\n\tIDataObject,\n\tILoadOptionsFunctions,\n\tJsonObject,\n\tIHttpRequestMethods,\n\tIHttpRequestOptions,\n\tIRequestOptions,\n} from 'n8n-workflow';\nimport { NodeApiError, NodeOperationError, sleep } from 'n8n-workflow';\n\nimport type { SplunkCredentials, SplunkError } from '../helpers/interfaces';\nimport { extractErrorDescription, formatEntry, parseXml } from '../helpers/utils';\n\nexport async function splunkApiRequest(\n\tthis: IExecuteFunctions | ILoadOptionsFunctions,\n\tmethod: IHttpRequestMethods,\n\tendpoint: string,\n\tbody: IDataObject = {},\n\tqs: IDataObject = {},\n): Promise<any> {\n\tconst { baseUrl, allowUnauthorizedCerts } =\n\t\tawait this.getCredentials<SplunkCredentials>('splunkApi');\n\n\tconst options: IRequestOptions = {\n\t\theaders: {\n\t\t\t'Content-Type': 'application/x-www-form-urlencoded',\n\t\t},\n\t\tmethod,\n\t\tform: body,\n\t\tqs,\n\t\turi: `${baseUrl}${endpoint}`,\n\t\tjson: true,\n\t\trejectUnauthorized: !allowUnauthorizedCerts,\n\t\tuseQuerystring: true, // serialize roles array as `roles=A&roles=B`\n\t};\n\n\tif (!Object.keys(body).length) {\n\t\tdelete options.body;\n\t}\n\n\tif (!Object.keys(qs).length) {\n\t\tdelete options.qs;\n\t}\n\n\tlet result;\n\ttry {\n\t\tlet attempts = 0;\n\n\t\tdo {\n\t\t\ttry {\n\t\t\t\tconst response = await this.helpers.requestWithAuthentication.call(\n\t\t\t\t\tthis,\n\t\t\t\t\t'splunkApi',\n\t\t\t\t\toptions,\n\t\t\t\t);\n\t\t\t\tresult = await parseXml(response);\n\t\t\t\treturn result;\n\t\t\t} catch (error) {\n\t\t\t\tif (attempts >= 5) {\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\t\t\t\tawait sleep(1000);\n\t\t\t\tattempts++;\n\t\t\t}\n\t\t} while (true);\n\t} catch (error) {\n\t\tif (error instanceof NodeApiError) throw error;\n\n\t\tif (result === undefined) {\n\t\t\tthrow new NodeOperationError(this.getNode(), 'No response from API call', {\n\t\t\t\tdescription: \"Try to use 'Retry On Fail' option from node's settings\",\n\t\t\t});\n\t\t}\n\t\tif (error?.cause?.code === 'ECONNREFUSED') {\n\t\t\tthrow new NodeApiError(this.getNode(), { ...(error as JsonObject), code: 401 });\n\t\t}\n\n\t\tconst rawError = (await parseXml(error.error as string)) as SplunkError;\n\t\terror = extractErrorDescription(rawError);\n\n\t\tif ('fatal' in error) {\n\t\t\terror = { error: error.fatal };\n\t\t}\n\n\t\tthrow new NodeApiError(this.getNode(), error as JsonObject);\n\t}\n}\n\nexport async function splunkApiJsonRequest(\n\tthis: IExecuteFunctions | ILoadOptionsFunctions,\n\tmethod: IHttpRequestMethods,\n\tendpoint: string,\n\tbody: IDataObject = {},\n\tqs: IDataObject = {},\n) {\n\tconst { baseUrl, allowUnauthorizedCerts } =\n\t\tawait this.getCredentials<SplunkCredentials>('splunkApi');\n\n\tqs.output_mode = 'json';\n\n\tconst options: IHttpRequestOptions = {\n\t\tmethod,\n\t\tbody,\n\t\tqs: qs ?? {},\n\t\turl: `${baseUrl}${endpoint}`,\n\t\tjson: true,\n\t\tskipSslCertificateValidation: allowUnauthorizedCerts,\n\t};\n\n\tif (!Object.keys(body).length) delete options.body;\n\n\tlet result;\n\ttry {\n\t\tlet attempts = 0;\n\n\t\tdo {\n\t\t\ttry {\n\t\t\t\tresult = await this.helpers.httpRequestWithAuthentication.call(this, 'splunkApi', options);\n\n\t\t\t\tif (result.entry) {\n\t\t\t\t\tconst { entry } = result;\n\t\t\t\t\treturn (entry as IDataObject[]).map((e) => formatEntry(e, true));\n\t\t\t\t}\n\n\t\t\t\treturn result;\n\t\t\t} catch (error) {\n\t\t\t\tif (attempts >= 5) {\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\t\t\t\tawait sleep(1000);\n\t\t\t\tattempts++;\n\t\t\t}\n\t\t} while (true);\n\t} catch (error) {\n\t\tif (error instanceof NodeApiError) throw error;\n\n\t\tif (result === undefined) {\n\t\t\tthrow new NodeOperationError(this.getNode(), 'No response from API call', {\n\t\t\t\tdescription: \"Try to use 'Retry On Fail' option from node's settings\",\n\t\t\t});\n\t\t}\n\t\tif (error?.cause?.code === 'ECONNREFUSED') {\n\t\t\tthrow new NodeApiError(this.getNode(), { ...(error as JsonObject), code: 401 });\n\t\t}\n\n\t\tif ('fatal' in error) error = { error: error.fatal };\n\n\t\tthrow new NodeApiError(this.getNode(), error as JsonObject);\n\t}\n}\n"],"mappings":"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","names":[]}