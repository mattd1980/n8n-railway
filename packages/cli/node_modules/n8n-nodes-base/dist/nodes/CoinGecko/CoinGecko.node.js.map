{"version":3,"sources":["../../../nodes/CoinGecko/CoinGecko.node.ts"],"sourcesContent":["import moment from 'moment-timezone';\nimport type {\n\tIExecuteFunctions,\n\tIDataObject,\n\tILoadOptionsFunctions,\n\tINodeExecutionData,\n\tINodePropertyOptions,\n\tINodeType,\n\tINodeTypeDescription,\n} from 'n8n-workflow';\nimport { NodeConnectionTypes } from 'n8n-workflow';\n\nimport { coinFields, coinOperations } from './CoinDescription';\nimport { eventFields, eventOperations } from './EventDescription';\nimport { coinGeckoApiRequest, coinGeckoRequestAllItems } from './GenericFunctions';\n\nexport class CoinGecko implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'CoinGecko',\n\t\tname: 'coinGecko',\n\t\ticon: 'file:coinGecko.svg',\n\t\tgroup: ['output'],\n\t\tversion: 1,\n\t\tdescription: 'Consume CoinGecko API',\n\t\tsubtitle: '={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}',\n\t\tdefaults: {\n\t\t\tname: 'CoinGecko',\n\t\t},\n\t\tusableAsTool: true,\n\t\tinputs: [NodeConnectionTypes.Main],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Resource',\n\t\t\t\tname: 'resource',\n\t\t\t\ttype: 'options',\n\t\t\t\tnoDataExpression: true,\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Coin',\n\t\t\t\t\t\tvalue: 'coin',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Event',\n\t\t\t\t\t\tvalue: 'event',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'coin',\n\t\t\t},\n\t\t\t...coinOperations,\n\t\t\t...coinFields,\n\t\t\t...eventOperations,\n\t\t\t...eventFields,\n\t\t],\n\t};\n\n\tmethods = {\n\t\tloadOptions: {\n\t\t\tasync getCurrencies(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst returnData: INodePropertyOptions[] = [];\n\t\t\t\tconst currencies = await coinGeckoApiRequest.call(\n\t\t\t\t\tthis,\n\t\t\t\t\t'GET',\n\t\t\t\t\t'/simple/supported_vs_currencies',\n\t\t\t\t);\n\t\t\t\tcurrencies.sort();\n\t\t\t\tfor (const currency of currencies) {\n\t\t\t\t\treturnData.push({\n\t\t\t\t\t\tname: currency.toUpperCase(),\n\t\t\t\t\t\tvalue: currency,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn returnData;\n\t\t\t},\n\n\t\t\tasync getCoins(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst returnData: INodePropertyOptions[] = [];\n\t\t\t\tconst coins = await coinGeckoApiRequest.call(this, 'GET', '/coins/list');\n\t\t\t\tfor (const coin of coins) {\n\t\t\t\t\treturnData.push({\n\t\t\t\t\t\tname: coin.symbol.toUpperCase(),\n\t\t\t\t\t\tvalue: coin.id,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturnData.sort((a, b) => {\n\t\t\t\t\tif (a.name < b.name) {\n\t\t\t\t\t\treturn -1;\n\t\t\t\t\t}\n\t\t\t\t\tif (a.name > b.name) {\n\t\t\t\t\t\treturn 1;\n\t\t\t\t\t}\n\t\t\t\t\treturn 0;\n\t\t\t\t});\n\t\t\t\treturn returnData;\n\t\t\t},\n\n\t\t\tasync getExchanges(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst returnData: INodePropertyOptions[] = [];\n\t\t\t\tconst exchanges = await coinGeckoApiRequest.call(this, 'GET', '/exchanges/list');\n\t\t\t\tfor (const exchange of exchanges) {\n\t\t\t\t\treturnData.push({\n\t\t\t\t\t\tname: exchange.name,\n\t\t\t\t\t\tvalue: exchange.id,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn returnData;\n\t\t\t},\n\n\t\t\tasync getEventCountryCodes(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst returnData: INodePropertyOptions[] = [];\n\t\t\t\tconst countryCodes = await coinGeckoApiRequest.call(this, 'GET', '/events/countries');\n\t\t\t\tfor (const code of countryCodes.data) {\n\t\t\t\t\tif (!code.code) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\treturnData.push({\n\t\t\t\t\t\tname: code.country,\n\t\t\t\t\t\tvalue: code.code,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn returnData;\n\t\t\t},\n\n\t\t\tasync getEventTypes(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst returnData: INodePropertyOptions[] = [];\n\t\t\t\tconst eventTypes = await coinGeckoApiRequest.call(this, 'GET', '/events/types');\n\t\t\t\tfor (const type of eventTypes.data) {\n\t\t\t\t\treturnData.push({\n\t\t\t\t\t\tname: type,\n\t\t\t\t\t\tvalue: type,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn returnData;\n\t\t\t},\n\t\t},\n\t};\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t\tconst items = this.getInputData();\n\t\tconst returnData: INodeExecutionData[] = [];\n\t\tconst length = items.length;\n\t\tconst qs: IDataObject = {};\n\t\tlet responseData;\n\t\tconst resource = this.getNodeParameter('resource', 0);\n\t\tconst operation = this.getNodeParameter('operation', 0);\n\t\tfor (let i = 0; i < length; i++) {\n\t\t\ttry {\n\t\t\t\tif (resource === 'coin') {\n\t\t\t\t\t//https://www.coingecko.com/api/documentations/v3#/coins/get_coins__id_\n\t\t\t\t\t//https://www.coingecko.com/api/documentations/v3#/contract/get_coins__id__contract__contract_address_\n\t\t\t\t\tif (operation === 'get') {\n\t\t\t\t\t\tconst options = this.getNodeParameter('options', i);\n\n\t\t\t\t\t\tqs.community_data = false;\n\t\t\t\t\t\tqs.developer_data = false;\n\t\t\t\t\t\tqs.localization = false;\n\t\t\t\t\t\tqs.market_data = false;\n\t\t\t\t\t\tqs.sparkline = false;\n\t\t\t\t\t\tqs.tickers = false;\n\n\t\t\t\t\t\tObject.assign(qs, options);\n\n\t\t\t\t\t\tconst searchBy = this.getNodeParameter('searchBy', i) as string;\n\n\t\t\t\t\t\tif (searchBy === 'coinId') {\n\t\t\t\t\t\t\tconst coinId = this.getNodeParameter('coinId', i) as string;\n\n\t\t\t\t\t\t\tresponseData = await coinGeckoApiRequest.call(\n\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t\t`/coins/${coinId}`,\n\t\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (searchBy === 'contractAddress') {\n\t\t\t\t\t\t\tconst platformId = this.getNodeParameter('platformId', i) as string;\n\t\t\t\t\t\t\tconst contractAddress = this.getNodeParameter('contractAddress', i) as string;\n\n\t\t\t\t\t\t\tresponseData = await coinGeckoApiRequest.call(\n\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t\t`/coins/${platformId}/contract/${contractAddress}`,\n\t\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t//https://www.coingecko.com/api/documentations/v3#/coins/get_coins_list\n\t\t\t\t\tif (operation === 'getAll') {\n\t\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', i);\n\n\t\t\t\t\t\tlet limit;\n\n\t\t\t\t\t\tresponseData = await coinGeckoApiRequest.call(this, 'GET', '/coins/list', {}, qs);\n\n\t\t\t\t\t\tif (!returnAll) {\n\t\t\t\t\t\t\tlimit = this.getNodeParameter('limit', i);\n\t\t\t\t\t\t\tresponseData = responseData.splice(0, limit);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t//https://www.coingecko.com/api/documentations/v3#/coins/get_coins_list\n\t\t\t\t\tif (operation === 'market') {\n\t\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', i);\n\t\t\t\t\t\tconst baseCurrency = this.getNodeParameter('baseCurrency', i) as string;\n\t\t\t\t\t\tconst options = this.getNodeParameter('options', i);\n\n\t\t\t\t\t\tqs.vs_currency = baseCurrency;\n\n\t\t\t\t\t\tObject.assign(qs, options);\n\n\t\t\t\t\t\tif (options.price_change_percentage) {\n\t\t\t\t\t\t\tqs.price_change_percentage = (options.price_change_percentage as string[]).join(',');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (returnAll) {\n\t\t\t\t\t\t\tresponseData = await coinGeckoRequestAllItems.call(\n\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t'',\n\t\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t\t'/coins/markets',\n\t\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst limit = this.getNodeParameter('limit', i);\n\n\t\t\t\t\t\t\tqs.per_page = limit;\n\n\t\t\t\t\t\t\tresponseData = await coinGeckoApiRequest.call(this, 'GET', '/coins/markets', {}, qs);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t//https://www.coingecko.com/api/documentations/v3#/simple/get_simple_price\n\t\t\t\t\t//https://www.coingecko.com/api/documentations/v3#/simple/get_simple_token_price__id_\n\t\t\t\t\tif (operation === 'price') {\n\t\t\t\t\t\tconst searchBy = this.getNodeParameter('searchBy', i) as string;\n\t\t\t\t\t\tconst quoteCurrencies = this.getNodeParameter('quoteCurrencies', i) as string[];\n\t\t\t\t\t\tconst options = this.getNodeParameter('options', i);\n\n\t\t\t\t\t\tqs.vs_currencies = quoteCurrencies.join(',');\n\n\t\t\t\t\t\tObject.assign(qs, options);\n\n\t\t\t\t\t\tif (searchBy === 'coinId') {\n\t\t\t\t\t\t\tconst baseCurrencies = this.getNodeParameter('baseCurrencies', i) as string[];\n\n\t\t\t\t\t\t\tqs.ids = baseCurrencies.join(',');\n\n\t\t\t\t\t\t\tresponseData = await coinGeckoApiRequest.call(this, 'GET', '/simple/price', {}, qs);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (searchBy === 'contractAddress') {\n\t\t\t\t\t\t\tconst platformId = this.getNodeParameter('platformId', i) as string;\n\t\t\t\t\t\t\tconst contractAddresses = this.getNodeParameter('contractAddresses', i) as string;\n\n\t\t\t\t\t\t\tqs.contract_addresses = contractAddresses;\n\n\t\t\t\t\t\t\tresponseData = await coinGeckoApiRequest.call(\n\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t\t`/simple/token_price/${platformId}`,\n\t\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t//https://www.coingecko.com/api/documentations/v3#/coins/get_coins__id__tickers\n\t\t\t\t\tif (operation === 'ticker') {\n\t\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', i);\n\t\t\t\t\t\tconst coinId = this.getNodeParameter('coinId', i) as string;\n\t\t\t\t\t\tconst options = this.getNodeParameter('options', i);\n\n\t\t\t\t\t\tObject.assign(qs, options);\n\n\t\t\t\t\t\tif (options.exchange_ids) {\n\t\t\t\t\t\t\tqs.exchange_ids = (options.exchange_ids as string[]).join(',');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (returnAll) {\n\t\t\t\t\t\t\tresponseData = await coinGeckoRequestAllItems.call(\n\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t'tickers',\n\t\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t\t`/coins/${coinId}/tickers`,\n\t\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst limit = this.getNodeParameter('limit', i);\n\n\t\t\t\t\t\t\tresponseData = await coinGeckoApiRequest.call(\n\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t\t`/coins/${coinId}/tickers`,\n\t\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tresponseData = responseData.tickers;\n\t\t\t\t\t\t\tresponseData = responseData.splice(0, limit);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t//https://www.coingecko.com/api/documentations/v3#/coins/get_coins__id__history\n\t\t\t\t\tif (operation === 'history') {\n\t\t\t\t\t\tconst coinId = this.getNodeParameter('coinId', i) as string;\n\t\t\t\t\t\tconst date = this.getNodeParameter('date', i) as string;\n\t\t\t\t\t\tconst options = this.getNodeParameter('options', i);\n\n\t\t\t\t\t\tObject.assign(qs, options);\n\n\t\t\t\t\t\tqs.date = moment(date).format('DD-MM-YYYY');\n\n\t\t\t\t\t\tresponseData = await coinGeckoApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t`/coins/${coinId}/history`,\n\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\t//https://www.coingecko.com/api/documentations/v3#/coins/get_coins__id__market_chart\n\t\t\t\t\t//https://www.coingecko.com/api/documentations/v3#/contract/get_coins__id__contract__contract_address__market_chart_\n\t\t\t\t\tif (operation === 'marketChart') {\n\t\t\t\t\t\tlet respData;\n\n\t\t\t\t\t\tconst searchBy = this.getNodeParameter('searchBy', i) as string;\n\t\t\t\t\t\tconst quoteCurrency = this.getNodeParameter('quoteCurrency', i) as string;\n\t\t\t\t\t\tconst days = this.getNodeParameter('days', i) as string;\n\n\t\t\t\t\t\tqs.vs_currency = quoteCurrency;\n\t\t\t\t\t\tqs.days = days;\n\n\t\t\t\t\t\tif (searchBy === 'coinId') {\n\t\t\t\t\t\t\tconst coinId = this.getNodeParameter('baseCurrency', i) as string;\n\n\t\t\t\t\t\t\trespData = await coinGeckoApiRequest.call(\n\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t\t`/coins/${coinId}/market_chart`,\n\t\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (searchBy === 'contractAddress') {\n\t\t\t\t\t\t\tconst platformId = this.getNodeParameter('platformId', i) as string;\n\t\t\t\t\t\t\tconst contractAddress = this.getNodeParameter('contractAddress', i) as string;\n\n\t\t\t\t\t\t\trespData = await coinGeckoApiRequest.call(\n\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t\t`/coins/${platformId}/contract/${contractAddress}/market_chart`,\n\t\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = [];\n\t\t\t\t\t\tfor (let idx = 0; idx < respData.prices.length; idx++) {\n\t\t\t\t\t\t\tconst [time, price] = respData.prices[idx];\n\t\t\t\t\t\t\tconst marketCaps = respData.market_caps[idx][1];\n\t\t\t\t\t\t\tconst totalVolume = respData.total_volumes[idx][1];\n\t\t\t\t\t\t\tresponseData.push({\n\t\t\t\t\t\t\t\ttime: moment(time as string).toISOString(),\n\t\t\t\t\t\t\t\tprice,\n\t\t\t\t\t\t\t\tmarketCaps,\n\t\t\t\t\t\t\t\ttotalVolume,\n\t\t\t\t\t\t\t} as IDataObject);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t//https://www.coingecko.com/api/documentations/v3#/coins/get_coins__id__ohlc\n\t\t\t\t\tif (operation === 'candlestick') {\n\t\t\t\t\t\tconst baseCurrency = this.getNodeParameter('baseCurrency', i) as string;\n\t\t\t\t\t\tconst quoteCurrency = this.getNodeParameter('quoteCurrency', i) as string;\n\t\t\t\t\t\tconst days = this.getNodeParameter('days', i) as string;\n\n\t\t\t\t\t\tqs.vs_currency = quoteCurrency;\n\t\t\t\t\t\tqs.days = days;\n\n\t\t\t\t\t\tresponseData = await coinGeckoApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t`/coins/${baseCurrency}/ohlc`,\n\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tfor (let idx = 0; idx < responseData.length; idx++) {\n\t\t\t\t\t\t\tconst [time, open, high, low, close] = responseData[idx];\n\t\t\t\t\t\t\tresponseData[idx] = {\n\t\t\t\t\t\t\t\ttime: moment(time as string).toISOString(),\n\t\t\t\t\t\t\t\topen,\n\t\t\t\t\t\t\t\thigh,\n\t\t\t\t\t\t\t\tlow,\n\t\t\t\t\t\t\t\tclose,\n\t\t\t\t\t\t\t} as IDataObject;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (resource === 'event') {\n\t\t\t\t\t//https://www.coingecko.com/api/documentations/v3#/events/get_events\n\t\t\t\t\tif (operation === 'getAll') {\n\t\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', i);\n\t\t\t\t\t\tconst options = this.getNodeParameter('options', i);\n\n\t\t\t\t\t\tObject.assign(qs, options);\n\n\t\t\t\t\t\tif (returnAll) {\n\t\t\t\t\t\t\tresponseData = await coinGeckoRequestAllItems.call(\n\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t'data',\n\t\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t\t'/events',\n\t\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst limit = this.getNodeParameter('limit', i);\n\n\t\t\t\t\t\t\tqs.per_page = limit;\n\n\t\t\t\t\t\t\tresponseData = await coinGeckoApiRequest.call(this, 'GET', '/events', {}, qs);\n\t\t\t\t\t\t\tresponseData = responseData.data;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (resource === 'simple') {\n\t\t\t\t\t//https://www.coingecko.com/api/documentations/v3#/simple/get_simple_price\n\t\t\t\t\tif (operation === 'price') {\n\t\t\t\t\t\tconst ids = this.getNodeParameter('ids', i) as string;\n\t\t\t\t\t\tconst currencies = this.getNodeParameter('currencies', i) as string[];\n\t\t\t\t\t\tconst options = this.getNodeParameter('options', i);\n\n\t\t\t\t\t\tqs.ids = ids;\n\t\t\t\t\t\tqs.vs_currencies = currencies.join(',');\n\n\t\t\t\t\t\tObject.assign(qs, options);\n\n\t\t\t\t\t\tresponseData = await coinGeckoApiRequest.call(this, 'GET', '/simple/price', {}, qs);\n\t\t\t\t\t}\n\n\t\t\t\t\t//https://www.coingecko.com/api/documentations/v3#/simple/get_simple_token_price__id_\n\t\t\t\t\tif (operation === 'tokenPrice') {\n\t\t\t\t\t\tconst id = this.getNodeParameter('id', i) as string;\n\t\t\t\t\t\tconst contractAddresses = this.getNodeParameter('contractAddresses', i) as string;\n\t\t\t\t\t\tconst currencies = this.getNodeParameter('currencies', i) as string[];\n\t\t\t\t\t\tconst options = this.getNodeParameter('options', i);\n\n\t\t\t\t\t\tqs.contract_addresses = contractAddresses;\n\t\t\t\t\t\tqs.vs_currencies = currencies.join(',');\n\n\t\t\t\t\t\tObject.assign(qs, options);\n\n\t\t\t\t\t\tresponseData = await coinGeckoApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t`/simple/token_price/${id}`,\n\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t);\n\t\t\t\treturnData.push(...executionData);\n\t\t\t} catch (error) {\n\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\treturnData.push({ error: error.message, json: {} });\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\n\t\treturn [returnData];\n\t}\n}\n"],"mappings":"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","names":["moment"]}