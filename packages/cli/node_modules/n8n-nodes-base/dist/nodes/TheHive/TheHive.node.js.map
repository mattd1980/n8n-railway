{"version":3,"sources":["../../../nodes/TheHive/TheHive.node.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/dot-notation */\nimport set from 'lodash/set';\nimport {\n\tNodeConnectionTypes,\n\ttype IDataObject,\n\ttype IExecuteFunctions,\n\ttype IHttpRequestMethods,\n\ttype ILoadOptionsFunctions,\n\ttype INodeExecutionData,\n\ttype INodeParameters,\n\ttype INodePropertyOptions,\n\ttype INodeType,\n\ttype INodeTypeDescription,\n} from 'n8n-workflow';\n\nimport { alertFields, alertOperations } from './descriptions/AlertDescription';\nimport { caseFields, caseOperations } from './descriptions/CaseDescription';\nimport { logFields, logOperations } from './descriptions/LogDescription';\nimport { observableFields, observableOperations } from './descriptions/ObservableDescription';\nimport { taskFields, taskOperations } from './descriptions/TaskDescription';\nimport {\n\tbuildCustomFieldSearch,\n\tmapResource,\n\tprepareCustomFields,\n\tprepareOptional,\n\tprepareRangeQuery,\n\tprepareSortQuery,\n\tsplitTags,\n\ttheHiveApiRequest,\n} from './GenericFunctions';\nimport type { IQueryObject } from './QueryFunctions';\nimport { And, Between, ContainsString, Eq, Id, In, Parent } from './QueryFunctions';\n\nexport class TheHive implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'TheHive',\n\t\tname: 'theHive',\n\t\ticon: 'file:thehive.svg',\n\t\tgroup: ['transform'],\n\t\tsubtitle: '={{$parameter[\"operation\"]}} : {{$parameter[\"resource\"]}}',\n\t\tversion: 1,\n\t\tdescription: 'Consume TheHive API',\n\t\tdefaults: {\n\t\t\tname: 'TheHive',\n\t\t},\n\t\tusableAsTool: true,\n\t\tinputs: [NodeConnectionTypes.Main],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tcredentials: [\n\t\t\t{\n\t\t\t\tname: 'theHiveApi',\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Resource',\n\t\t\t\tname: 'resource',\n\t\t\t\ttype: 'options',\n\t\t\t\tnoDataExpression: true,\n\t\t\t\trequired: true,\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Alert',\n\t\t\t\t\t\tvalue: 'alert',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Case',\n\t\t\t\t\t\tvalue: 'case',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Log',\n\t\t\t\t\t\tvalue: 'log',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Observable',\n\t\t\t\t\t\tvalue: 'observable',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Task',\n\t\t\t\t\t\tvalue: 'task',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'alert',\n\t\t\t},\n\t\t\t// Alert\n\t\t\t...alertOperations,\n\t\t\t...alertFields,\n\t\t\t// Observable\n\t\t\t...observableOperations,\n\t\t\t...observableFields,\n\t\t\t// Case\n\t\t\t...caseOperations,\n\t\t\t...caseFields,\n\t\t\t// Task\n\t\t\t...taskOperations,\n\t\t\t...taskFields,\n\t\t\t// Log\n\t\t\t...logOperations,\n\t\t\t...logFields,\n\t\t],\n\t};\n\n\tmethods = {\n\t\tloadOptions: {\n\t\t\tasync loadResponders(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\t// request the analyzers from instance\n\t\t\t\tconst resource = mapResource(this.getNodeParameter('resource') as string);\n\t\t\t\tconst resourceId = this.getNodeParameter('id');\n\t\t\t\tconst endpoint = `/connector/cortex/responder/${resource}/${resourceId}`;\n\n\t\t\t\tconst responders = await theHiveApiRequest.call(this, 'GET', endpoint);\n\n\t\t\t\tconst returnData: INodePropertyOptions[] = [];\n\n\t\t\t\tfor (const responder of responders) {\n\t\t\t\t\treturnData.push({\n\t\t\t\t\t\tname: responder.name as string,\n\t\t\t\t\t\tvalue: responder.id,\n\t\t\t\t\t\tdescription: responder.description as string,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn returnData;\n\t\t\t},\n\n\t\t\tasync loadAnalyzers(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\t// request the analyzers from instance\n\t\t\t\tconst dataType = this.getNodeParameter('dataType') as string;\n\t\t\t\tconst endpoint = `/connector/cortex/analyzer/type/${dataType}`;\n\t\t\t\tconst requestResult = await theHiveApiRequest.call(this, 'GET', endpoint);\n\t\t\t\tconst returnData: INodePropertyOptions[] = [];\n\n\t\t\t\tfor (const analyzer of requestResult) {\n\t\t\t\t\tfor (const cortexId of analyzer.cortexIds) {\n\t\t\t\t\t\treturnData.push({\n\t\t\t\t\t\t\tname: `[${cortexId}] ${analyzer.name}`,\n\t\t\t\t\t\t\tvalue: `${analyzer.id as string}::${cortexId as string}`,\n\t\t\t\t\t\t\tdescription: analyzer.description as string,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn returnData;\n\t\t\t},\n\t\t\tasync loadCustomFields(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst credentials = await this.getCredentials('theHiveApi');\n\t\t\t\tconst version = credentials.apiVersion;\n\t\t\t\tconst endpoint = version === 'v1' ? '/customField' : '/list/custom_fields';\n\n\t\t\t\tconst requestResult = await theHiveApiRequest.call(this, 'GET', endpoint as string);\n\n\t\t\t\tconst returnData: INodePropertyOptions[] = [];\n\n\t\t\t\t// Convert TheHive3 response to the same format as TheHive 4\n\t\t\t\tconst customFields =\n\t\t\t\t\tversion === 'v1'\n\t\t\t\t\t\t? requestResult\n\t\t\t\t\t\t: Object.keys(requestResult as IDataObject).map((key) => requestResult[key]);\n\n\t\t\t\tfor (const field of customFields) {\n\t\t\t\t\treturnData.push({\n\t\t\t\t\t\tname: `${field.name}: ${field.reference}`,\n\t\t\t\t\t\tvalue: field.reference,\n\t\t\t\t\t\tdescription: `${field.type}: ${field.description}`,\n\t\t\t\t\t} as INodePropertyOptions);\n\t\t\t\t}\n\n\t\t\t\treturn returnData;\n\t\t\t},\n\t\t\tasync loadObservableOptions(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\t// if v1 is not used we remove 'count' option\n\t\t\t\tconst version = (await this.getCredentials('theHiveApi')).apiVersion;\n\n\t\t\t\tconst options = [\n\t\t\t\t\t...(version === 'v1'\n\t\t\t\t\t\t? [{ name: 'Count', value: 'count', description: 'Count observables' }]\n\t\t\t\t\t\t: []),\n\t\t\t\t\t{ name: 'Create', value: 'create', description: 'Create observable' },\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Execute Analyzer',\n\t\t\t\t\t\tvalue: 'executeAnalyzer',\n\t\t\t\t\t\tdescription: 'Execute an responder on selected observable',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Execute Responder',\n\t\t\t\t\t\tvalue: 'executeResponder',\n\t\t\t\t\t\tdescription: 'Execute a responder on selected observable',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Get Many',\n\t\t\t\t\t\tvalue: 'getAll',\n\t\t\t\t\t\tdescription: 'Get all observables of a specific case',\n\t\t\t\t\t},\n\t\t\t\t\t{ name: 'Get', value: 'get', description: 'Get a single observable' },\n\t\t\t\t\t{ name: 'Search', value: 'search', description: 'Search observables' },\n\t\t\t\t\t{ name: 'Update', value: 'update', description: 'Update observable' },\n\t\t\t\t];\n\t\t\t\treturn options;\n\t\t\t},\n\t\t\tasync loadObservableTypes(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst version = (await this.getCredentials('theHiveApi')).apiVersion;\n\t\t\t\tconst endpoint =\n\t\t\t\t\tversion === 'v1' ? '/observable/type?range=all' : '/list/list_artifactDataType';\n\n\t\t\t\tconst dataTypes = await theHiveApiRequest.call(this, 'GET', endpoint as string);\n\n\t\t\t\tlet returnData: INodePropertyOptions[] = [];\n\n\t\t\t\tif (version === 'v1') {\n\t\t\t\t\treturnData = dataTypes.map((dataType: IDataObject) => {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tname: dataType.name as string,\n\t\t\t\t\t\t\tvalue: dataType.name as string,\n\t\t\t\t\t\t};\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\treturnData = Object.keys(dataTypes as IDataObject).map((key) => {\n\t\t\t\t\t\tconst dataType = dataTypes[key] as string;\n\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tname: dataType,\n\t\t\t\t\t\t\tvalue: dataType,\n\t\t\t\t\t\t};\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\t// Sort the array by option name\n\t\t\t\treturnData.sort((a, b) => {\n\t\t\t\t\tif (a.name < b.name) {\n\t\t\t\t\t\treturn -1;\n\t\t\t\t\t}\n\t\t\t\t\tif (a.name > b.name) {\n\t\t\t\t\t\treturn 1;\n\t\t\t\t\t}\n\t\t\t\t\treturn 0;\n\t\t\t\t});\n\n\t\t\t\treturn returnData;\n\t\t\t},\n\t\t\tasync loadTaskOptions(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst credentials = await this.getCredentials('theHiveApi');\n\t\t\t\tconst version = credentials.apiVersion;\n\t\t\t\tconst options = [\n\t\t\t\t\t...(version === 'v1'\n\t\t\t\t\t\t? [{ name: 'Count', value: 'count', description: 'Count tasks' }]\n\t\t\t\t\t\t: []),\n\t\t\t\t\t{ name: 'Create', value: 'create', description: 'Create a task' },\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Execute Responder',\n\t\t\t\t\t\tvalue: 'executeResponder',\n\t\t\t\t\t\tdescription: 'Execute a responder on the specified task',\n\t\t\t\t\t},\n\t\t\t\t\t{ name: 'Get Many', value: 'getAll', description: 'Get all asks of a specific case' },\n\t\t\t\t\t{ name: 'Get', value: 'get', description: 'Get a single task' },\n\t\t\t\t\t{ name: 'Search', value: 'search', description: 'Search tasks' },\n\t\t\t\t\t{ name: 'Update', value: 'update', description: 'Update a task' },\n\t\t\t\t];\n\t\t\t\treturn options;\n\t\t\t},\n\t\t\tasync loadAlertOptions(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst credentials = await this.getCredentials('theHiveApi');\n\t\t\t\tconst version = credentials.apiVersion;\n\t\t\t\tconst options = [\n\t\t\t\t\t...(version === 'v1'\n\t\t\t\t\t\t? [{ name: 'Count', value: 'count', description: 'Count alerts' }]\n\t\t\t\t\t\t: []),\n\t\t\t\t\t{ name: 'Create', value: 'create', description: 'Create alert' },\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Execute Responder',\n\t\t\t\t\t\tvalue: 'executeResponder',\n\t\t\t\t\t\tdescription: 'Execute a responder on the specified alert',\n\t\t\t\t\t},\n\t\t\t\t\t{ name: 'Get', value: 'get', description: 'Get an alert' },\n\t\t\t\t\t{ name: 'Get Many', value: 'getAll', description: 'Get all alerts' },\n\t\t\t\t\t{ name: 'Mark as Read', value: 'markAsRead', description: 'Mark the alert as read' },\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Mark as Unread',\n\t\t\t\t\t\tvalue: 'markAsUnread',\n\t\t\t\t\t\tdescription: 'Mark the alert as unread',\n\t\t\t\t\t},\n\t\t\t\t\t{ name: 'Merge', value: 'merge', description: 'Merge alert into an existing case' },\n\t\t\t\t\t{ name: 'Promote', value: 'promote', description: 'Promote an alert into a case' },\n\t\t\t\t\t{ name: 'Update', value: 'update', description: 'Update alert' },\n\t\t\t\t];\n\t\t\t\treturn options;\n\t\t\t},\n\t\t\tasync loadCaseOptions(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst credentials = await this.getCredentials('theHiveApi');\n\t\t\t\tconst version = credentials.apiVersion;\n\t\t\t\tconst options = [\n\t\t\t\t\t...(version === 'v1'\n\t\t\t\t\t\t? [{ name: 'Count', value: 'count', description: 'Count a case' }]\n\t\t\t\t\t\t: []),\n\t\t\t\t\t{ name: 'Create', value: 'create', description: 'Create a case' },\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Execute Responder',\n\t\t\t\t\t\tvalue: 'executeResponder',\n\t\t\t\t\t\tdescription: 'Execute a responder on the specified case',\n\t\t\t\t\t},\n\t\t\t\t\t{ name: 'Get Many', value: 'getAll', description: 'Get all cases' },\n\t\t\t\t\t{ name: 'Get', value: 'get', description: 'Get a single case' },\n\t\t\t\t\t{ name: 'Update', value: 'update', description: 'Update a case' },\n\t\t\t\t];\n\t\t\t\treturn options;\n\t\t\t},\n\t\t},\n\t};\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t\tconst items = this.getInputData();\n\t\tconst returnData: INodeExecutionData[] = [];\n\t\tconst length = items.length;\n\t\tconst qs: IDataObject = {};\n\t\tlet responseData;\n\t\tconst resource = this.getNodeParameter('resource', 0);\n\t\tconst operation = this.getNodeParameter('operation', 0);\n\n\t\tfor (let i = 0; i < length; i++) {\n\t\t\ttry {\n\t\t\t\tif (resource === 'alert') {\n\t\t\t\t\tif (operation === 'count') {\n\t\t\t\t\t\tconst filters = this.getNodeParameter('filters', i, {}) as INodeParameters;\n\t\t\t\t\t\tconst countQueryAttributs = prepareOptional(filters);\n\n\t\t\t\t\t\tconst _countSearchQuery: IQueryObject = And();\n\n\t\t\t\t\t\tif ('customFieldsUi' in filters) {\n\t\t\t\t\t\t\tconst customFields = (await prepareCustomFields.call(this, filters)) as IDataObject;\n\t\t\t\t\t\t\tconst searchQueries = buildCustomFieldSearch(customFields);\n\t\t\t\t\t\t\t(_countSearchQuery['_and'] as IQueryObject[]).push(...searchQueries);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfor (const key of Object.keys(countQueryAttributs)) {\n\t\t\t\t\t\t\tif (key === 'tags') {\n\t\t\t\t\t\t\t\t(_countSearchQuery['_and'] as IQueryObject[]).push(\n\t\t\t\t\t\t\t\t\tIn(key, countQueryAttributs[key] as string[]),\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t} else if (key === 'description' || key === 'title') {\n\t\t\t\t\t\t\t\t(_countSearchQuery['_and'] as IQueryObject[]).push(\n\t\t\t\t\t\t\t\t\tContainsString(key, countQueryAttributs[key] as string),\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t(_countSearchQuery['_and'] as IQueryObject[]).push(\n\t\t\t\t\t\t\t\t\tEq(key, countQueryAttributs[key] as string),\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst body = {\n\t\t\t\t\t\t\tquery: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t_name: 'listAlert',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t_name: 'filter',\n\t\t\t\t\t\t\t\t\t_and: _countSearchQuery['_and'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tbody['query'].push({\n\t\t\t\t\t\t\t_name: 'count',\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tqs.name = 'count-Alert';\n\n\t\t\t\t\t\tresponseData = await theHiveApiRequest.call(this, 'POST', '/v1/query', body, qs);\n\n\t\t\t\t\t\tresponseData = { count: responseData };\n\t\t\t\t\t}\n\n\t\t\t\t\tif (operation === 'create') {\n\t\t\t\t\t\tconst additionalFields = this.getNodeParameter(\n\t\t\t\t\t\t\t'additionalFields',\n\t\t\t\t\t\t\ti,\n\t\t\t\t\t\t) as INodeParameters;\n\t\t\t\t\t\tconst jsonParameters = this.getNodeParameter('jsonParameters', i);\n\n\t\t\t\t\t\tconst customFields = await prepareCustomFields.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\tadditionalFields,\n\t\t\t\t\t\t\tjsonParameters,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tconst body: IDataObject = {\n\t\t\t\t\t\t\ttitle: this.getNodeParameter('title', i),\n\t\t\t\t\t\t\tdescription: this.getNodeParameter('description', i),\n\t\t\t\t\t\t\tseverity: this.getNodeParameter('severity', i),\n\t\t\t\t\t\t\tdate: Date.parse(this.getNodeParameter('date', i) as string),\n\t\t\t\t\t\t\ttags: splitTags(this.getNodeParameter('tags', i) as string),\n\t\t\t\t\t\t\ttlp: this.getNodeParameter('tlp', i),\n\t\t\t\t\t\t\tstatus: this.getNodeParameter('status', i),\n\t\t\t\t\t\t\ttype: this.getNodeParameter('type', i),\n\t\t\t\t\t\t\tsource: this.getNodeParameter('source', i),\n\t\t\t\t\t\t\tsourceRef: this.getNodeParameter('sourceRef', i),\n\t\t\t\t\t\t\tfollow: this.getNodeParameter('follow', i, true),\n\t\t\t\t\t\t\t...prepareOptional(additionalFields),\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tif (customFields) {\n\t\t\t\t\t\t\tObject.keys(customFields).forEach((key) => {\n\t\t\t\t\t\t\t\tset(body, key, customFields[key]);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst artifactUi = this.getNodeParameter('artifactUi', i) as IDataObject;\n\n\t\t\t\t\t\tif (artifactUi) {\n\t\t\t\t\t\t\tconst artifactValues = artifactUi.artifactValues as IDataObject[];\n\n\t\t\t\t\t\t\tif (artifactValues) {\n\t\t\t\t\t\t\t\tconst artifactData = [];\n\n\t\t\t\t\t\t\t\tfor (const artifactvalue of artifactValues) {\n\t\t\t\t\t\t\t\t\tconst element: IDataObject = {};\n\n\t\t\t\t\t\t\t\t\telement.message = artifactvalue.message as string;\n\n\t\t\t\t\t\t\t\t\telement.tags = (artifactvalue.tags as string).split(',');\n\n\t\t\t\t\t\t\t\t\telement.dataType = artifactvalue.dataType as string;\n\n\t\t\t\t\t\t\t\t\telement.data = artifactvalue.data as string;\n\n\t\t\t\t\t\t\t\t\tif (artifactvalue.dataType === 'file') {\n\t\t\t\t\t\t\t\t\t\tconst binaryPropertyName = artifactvalue.binaryProperty as string;\n\t\t\t\t\t\t\t\t\t\tconst binaryData = this.helpers.assertBinaryData(i, binaryPropertyName);\n\t\t\t\t\t\t\t\t\t\telement.data = `${binaryData.fileName};${binaryData.mimeType};${binaryData.data}`;\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tartifactData.push(element);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbody.artifacts = artifactData;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await theHiveApiRequest.call(this, 'POST', '/alert' as string, body);\n\t\t\t\t\t}\n\n\t\t\t\t\t/*\n\t\t\t\t\t\tExecute responder feature differs from Cortex execute responder\n\t\t\t\t\t\tif it doesn't interfere with n8n standards then we should keep it\n\t\t\t\t\t*/\n\n\t\t\t\t\tif (operation === 'executeResponder') {\n\t\t\t\t\t\tconst alertId = this.getNodeParameter('id', i);\n\t\t\t\t\t\tconst responderId = this.getNodeParameter('responder', i) as string;\n\t\t\t\t\t\tlet body: IDataObject;\n\t\t\t\t\t\tlet response;\n\t\t\t\t\t\tresponseData = [];\n\t\t\t\t\t\tbody = {\n\t\t\t\t\t\t\tresponderId,\n\t\t\t\t\t\t\tobjectId: alertId,\n\t\t\t\t\t\t\tobjectType: 'alert',\n\t\t\t\t\t\t};\n\t\t\t\t\t\tresponse = await theHiveApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'POST',\n\t\t\t\t\t\t\t'/connector/cortex/action' as string,\n\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tbody = {\n\t\t\t\t\t\t\tquery: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t_name: 'listAction',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t_name: 'filter',\n\t\t\t\t\t\t\t\t\t_and: [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t_field: 'cortexId',\n\t\t\t\t\t\t\t\t\t\t\t_value: response.cortexId,\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t_field: 'objectId',\n\t\t\t\t\t\t\t\t\t\t\t_value: response.objectId,\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t_field: 'startDate',\n\t\t\t\t\t\t\t\t\t\t\t_value: response.startDate,\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t};\n\t\t\t\t\t\tqs.name = 'log-actions';\n\t\t\t\t\t\tdo {\n\t\t\t\t\t\t\tresponse = await theHiveApiRequest.call(this, 'POST', '/v1/query', body, qs);\n\t\t\t\t\t\t} while (response.status === 'Waiting' || response.status === 'InProgress');\n\n\t\t\t\t\t\tresponseData = response;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (operation === 'get') {\n\t\t\t\t\t\tconst alertId = this.getNodeParameter('id', i) as string;\n\t\t\t\t\t\tconst includeSimilar = this.getNodeParameter(\n\t\t\t\t\t\t\t'options.includeSimilar',\n\t\t\t\t\t\t\ti,\n\t\t\t\t\t\t\tfalse,\n\t\t\t\t\t\t) as boolean;\n\n\t\t\t\t\t\tif (includeSimilar) {\n\t\t\t\t\t\t\tqs.similarity = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await theHiveApiRequest.call(this, 'GET', `/alert/${alertId}`, {}, qs);\n\t\t\t\t\t}\n\t\t\t\t\tif (operation === 'getAll') {\n\t\t\t\t\t\tconst credentials = await this.getCredentials('theHiveApi');\n\n\t\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', i);\n\n\t\t\t\t\t\tconst version = credentials.apiVersion;\n\n\t\t\t\t\t\tconst filters = this.getNodeParameter('filters', i, {}) as INodeParameters;\n\t\t\t\t\t\tconst queryAttributs = prepareOptional(filters);\n\t\t\t\t\t\tconst options = this.getNodeParameter('options', i);\n\n\t\t\t\t\t\tconst _searchQuery: IQueryObject = And();\n\n\t\t\t\t\t\tif ('customFieldsUi' in filters) {\n\t\t\t\t\t\t\tconst customFields = (await prepareCustomFields.call(this, filters)) as IDataObject;\n\t\t\t\t\t\t\tconst searchQueries = buildCustomFieldSearch(customFields);\n\t\t\t\t\t\t\t(_searchQuery['_and'] as IQueryObject[]).push(...searchQueries);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfor (const key of Object.keys(queryAttributs)) {\n\t\t\t\t\t\t\tif (key === 'tags') {\n\t\t\t\t\t\t\t\t(_searchQuery['_and'] as IQueryObject[]).push(\n\t\t\t\t\t\t\t\t\tIn(key, queryAttributs[key] as string[]),\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t} else if (key === 'description' || key === 'title') {\n\t\t\t\t\t\t\t\t(_searchQuery['_and'] as IQueryObject[]).push(\n\t\t\t\t\t\t\t\t\tContainsString(key, queryAttributs[key] as string),\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t(_searchQuery['_and'] as IQueryObject[]).push(\n\t\t\t\t\t\t\t\t\tEq(key, queryAttributs[key] as string),\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tlet endpoint;\n\n\t\t\t\t\t\tlet method: IHttpRequestMethods;\n\n\t\t\t\t\t\tlet body: IDataObject = {};\n\n\t\t\t\t\t\tlet limit = undefined;\n\n\t\t\t\t\t\tif (!returnAll) {\n\t\t\t\t\t\t\tlimit = this.getNodeParameter('limit', i);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (version === 'v1') {\n\t\t\t\t\t\t\tendpoint = '/v1/query';\n\n\t\t\t\t\t\t\tmethod = 'POST';\n\n\t\t\t\t\t\t\tbody = {\n\t\t\t\t\t\t\t\tquery: [\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t_name: 'listAlert',\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t_name: 'filter',\n\t\t\t\t\t\t\t\t\t\t_and: _searchQuery['_and'],\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t//@ts-ignore\n\t\t\t\t\t\t\tprepareSortQuery(options.sort, body);\n\n\t\t\t\t\t\t\tif (limit !== undefined) {\n\t\t\t\t\t\t\t\t//@ts-ignore\n\t\t\t\t\t\t\t\tprepareRangeQuery(`0-${limit}`, body);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tqs.name = 'alerts';\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tmethod = 'POST';\n\n\t\t\t\t\t\t\tendpoint = '/alert/_search';\n\n\t\t\t\t\t\t\tif (limit !== undefined) {\n\t\t\t\t\t\t\t\tqs.range = `0-${limit}`;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbody.query = _searchQuery;\n\n\t\t\t\t\t\t\tObject.assign(qs, prepareOptional(options));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await theHiveApiRequest.call(this, method, endpoint, body, qs);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (operation === 'markAsRead') {\n\t\t\t\t\t\tconst alertId = this.getNodeParameter('id', i) as string;\n\n\t\t\t\t\t\tresponseData = await theHiveApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'POST',\n\t\t\t\t\t\t\t`/alert/${alertId}/markAsRead`,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (operation === 'markAsUnread') {\n\t\t\t\t\t\tconst alertId = this.getNodeParameter('id', i) as string;\n\n\t\t\t\t\t\tresponseData = await theHiveApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'POST',\n\t\t\t\t\t\t\t`/alert/${alertId}/markAsUnread`,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (operation === 'merge') {\n\t\t\t\t\t\tconst alertId = this.getNodeParameter('id', i) as string;\n\n\t\t\t\t\t\tconst caseId = this.getNodeParameter('caseId', i) as string;\n\n\t\t\t\t\t\tresponseData = await theHiveApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'POST',\n\t\t\t\t\t\t\t`/alert/${alertId}/merge/${caseId}`,\n\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (operation === 'promote') {\n\t\t\t\t\t\tconst alertId = this.getNodeParameter('id', i) as string;\n\n\t\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i);\n\n\t\t\t\t\t\tconst body: IDataObject = {};\n\n\t\t\t\t\t\tObject.assign(body, additionalFields);\n\n\t\t\t\t\t\tresponseData = await theHiveApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'POST',\n\t\t\t\t\t\t\t`/alert/${alertId}/createCase`,\n\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (operation === 'update') {\n\t\t\t\t\t\tconst alertId = this.getNodeParameter('id', i) as string;\n\t\t\t\t\t\tconst jsonParameters = this.getNodeParameter('jsonParameters', i);\n\n\t\t\t\t\t\tconst updateFields = this.getNodeParameter('updateFields', i);\n\t\t\t\t\t\tconst customFields = await prepareCustomFields.call(this, updateFields, jsonParameters);\n\n\t\t\t\t\t\tconst artifactUi = updateFields.artifactUi as IDataObject;\n\n\t\t\t\t\t\tdelete updateFields.artifactUi;\n\n\t\t\t\t\t\tconst body: IDataObject = {\n\t\t\t\t\t\t\t...customFields,\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tObject.assign(body, updateFields);\n\n\t\t\t\t\t\tif (artifactUi) {\n\t\t\t\t\t\t\tconst artifactValues = artifactUi.artifactValues as IDataObject[];\n\n\t\t\t\t\t\t\tif (artifactValues) {\n\t\t\t\t\t\t\t\tconst artifactData = [];\n\n\t\t\t\t\t\t\t\tfor (const artifactvalue of artifactValues) {\n\t\t\t\t\t\t\t\t\tconst element: IDataObject = {};\n\n\t\t\t\t\t\t\t\t\telement.message = artifactvalue.message as string;\n\n\t\t\t\t\t\t\t\t\telement.tags = (artifactvalue.tags as string).split(',');\n\n\t\t\t\t\t\t\t\t\telement.dataType = artifactvalue.dataType as string;\n\n\t\t\t\t\t\t\t\t\telement.data = artifactvalue.data as string;\n\n\t\t\t\t\t\t\t\t\tif (artifactvalue.dataType === 'file') {\n\t\t\t\t\t\t\t\t\t\tconst binaryPropertyName = artifactvalue.binaryProperty as string;\n\t\t\t\t\t\t\t\t\t\tconst binaryData = this.helpers.assertBinaryData(i, binaryPropertyName);\n\t\t\t\t\t\t\t\t\t\telement.data = `${binaryData.fileName};${binaryData.mimeType};${binaryData.data}`;\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tartifactData.push(element);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbody.artifacts = artifactData;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await theHiveApiRequest.call(this, 'PATCH', `/alert/${alertId}`, body);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (resource === 'observable') {\n\t\t\t\t\tif (operation === 'count') {\n\t\t\t\t\t\tconst countQueryAttributs = prepareOptional(\n\t\t\t\t\t\t\tthis.getNodeParameter('filters', i, {}) as INodeParameters,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tconst _countSearchQuery: IQueryObject = And();\n\n\t\t\t\t\t\tfor (const key of Object.keys(countQueryAttributs)) {\n\t\t\t\t\t\t\tif (key === 'dataType' || key === 'tags') {\n\t\t\t\t\t\t\t\t(_countSearchQuery['_and'] as IQueryObject[]).push(\n\t\t\t\t\t\t\t\t\tIn(key, countQueryAttributs[key] as string[]),\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t} else if (key === 'description' || key === 'keywork' || key === 'message') {\n\t\t\t\t\t\t\t\t(_countSearchQuery['_and'] as IQueryObject[]).push(\n\t\t\t\t\t\t\t\t\tContainsString(key, countQueryAttributs[key] as string),\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t} else if (key === 'range') {\n\t\t\t\t\t\t\t\t(_countSearchQuery['_and'] as IQueryObject[]).push(\n\t\t\t\t\t\t\t\t\tBetween(\n\t\t\t\t\t\t\t\t\t\t'startDate',\n\t\t\t\t\t\t\t\t\t\t((countQueryAttributs['range'] as IDataObject)['dateRange'] as IDataObject)[\n\t\t\t\t\t\t\t\t\t\t\t'fromDate'\n\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t((countQueryAttributs['range'] as IDataObject)['dateRange'] as IDataObject)[\n\t\t\t\t\t\t\t\t\t\t\t'toDate'\n\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t(_countSearchQuery['_and'] as IQueryObject[]).push(\n\t\t\t\t\t\t\t\t\tEq(key, countQueryAttributs[key] as string),\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst body = {\n\t\t\t\t\t\t\tquery: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t_name: 'listObservable',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t_name: 'filter',\n\t\t\t\t\t\t\t\t\t_and: _countSearchQuery['_and'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tbody['query'].push({\n\t\t\t\t\t\t\t_name: 'count',\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tqs.name = 'count-observables';\n\n\t\t\t\t\t\tresponseData = await theHiveApiRequest.call(this, 'POST', '/v1/query', body, qs);\n\n\t\t\t\t\t\tresponseData = { count: responseData };\n\t\t\t\t\t}\n\n\t\t\t\t\tif (operation === 'executeAnalyzer') {\n\t\t\t\t\t\tconst observableId = this.getNodeParameter('id', i);\n\t\t\t\t\t\tconst analyzers = (this.getNodeParameter('analyzers', i) as string[]).map(\n\t\t\t\t\t\t\t(analyzer) => {\n\t\t\t\t\t\t\t\tconst parts = analyzer.split('::');\n\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\tanalyzerId: parts[0],\n\t\t\t\t\t\t\t\t\tcortexId: parts[1],\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t);\n\t\t\t\t\t\tlet response: any;\n\t\t\t\t\t\tlet body: IDataObject;\n\t\t\t\t\t\tresponseData = [];\n\t\t\t\t\t\tfor (const analyzer of analyzers) {\n\t\t\t\t\t\t\tbody = {\n\t\t\t\t\t\t\t\t...analyzer,\n\t\t\t\t\t\t\t\tartifactId: observableId,\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t// execute the analyzer\n\t\t\t\t\t\t\tresponse = await theHiveApiRequest.call(\n\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t'POST',\n\t\t\t\t\t\t\t\t'/connector/cortex/job' as string,\n\t\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tconst jobId = response.id;\n\t\t\t\t\t\t\tqs.name = 'observable-jobs';\n\t\t\t\t\t\t\t// query the job result (including the report)\n\t\t\t\t\t\t\tdo {\n\t\t\t\t\t\t\t\tresponseData = await theHiveApiRequest.call(\n\t\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t\t\t`/connector/cortex/job/${jobId}`,\n\t\t\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t} while (responseData.status === 'Waiting' || responseData.status === 'InProgress');\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (operation === 'executeResponder') {\n\t\t\t\t\t\tconst observableId = this.getNodeParameter('id', i);\n\t\t\t\t\t\tconst responderId = this.getNodeParameter('responder', i) as string;\n\t\t\t\t\t\tlet body: IDataObject;\n\t\t\t\t\t\tlet response;\n\t\t\t\t\t\tresponseData = [];\n\t\t\t\t\t\tbody = {\n\t\t\t\t\t\t\tresponderId,\n\t\t\t\t\t\t\tobjectId: observableId,\n\t\t\t\t\t\t\tobjectType: 'case_artifact',\n\t\t\t\t\t\t};\n\t\t\t\t\t\tresponse = await theHiveApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'POST',\n\t\t\t\t\t\t\t'/connector/cortex/action' as string,\n\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tbody = {\n\t\t\t\t\t\t\tquery: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t_name: 'listAction',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t_name: 'filter',\n\t\t\t\t\t\t\t\t\t_and: [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t_field: 'cortexId',\n\t\t\t\t\t\t\t\t\t\t\t_value: response.cortexId,\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t_field: 'objectId',\n\t\t\t\t\t\t\t\t\t\t\t_value: response.objectId,\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t_field: 'startDate',\n\t\t\t\t\t\t\t\t\t\t\t_value: response.startDate,\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t};\n\t\t\t\t\t\tqs.name = 'log-actions';\n\t\t\t\t\t\tdo {\n\t\t\t\t\t\t\tresponse = await theHiveApiRequest.call(this, 'POST', '/v1/query', body, qs);\n\t\t\t\t\t\t} while (response.status === 'Waiting' || response.status === 'InProgress');\n\n\t\t\t\t\t\tresponseData = response;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (operation === 'create') {\n\t\t\t\t\t\tconst caseId = this.getNodeParameter('caseId', i);\n\n\t\t\t\t\t\tlet body: IDataObject = {\n\t\t\t\t\t\t\tdataType: this.getNodeParameter('dataType', i) as string,\n\t\t\t\t\t\t\tmessage: this.getNodeParameter('message', i) as string,\n\t\t\t\t\t\t\tstartDate: Date.parse(this.getNodeParameter('startDate', i) as string),\n\t\t\t\t\t\t\ttlp: this.getNodeParameter('tlp', i) as number,\n\t\t\t\t\t\t\tioc: this.getNodeParameter('ioc', i) as boolean,\n\t\t\t\t\t\t\tsighted: this.getNodeParameter('sighted', i) as boolean,\n\t\t\t\t\t\t\tstatus: this.getNodeParameter('status', i) as string,\n\t\t\t\t\t\t\t...prepareOptional(this.getNodeParameter('options', i, {}) as INodeParameters),\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tlet options: IDataObject = {};\n\n\t\t\t\t\t\tif (body.dataType === 'file') {\n\t\t\t\t\t\t\tconst binaryPropertyName = this.getNodeParameter('binaryProperty', i);\n\t\t\t\t\t\t\tconst binaryData = this.helpers.assertBinaryData(i, binaryPropertyName);\n\t\t\t\t\t\t\tconst dataBuffer = await this.helpers.getBinaryDataBuffer(i, binaryPropertyName);\n\n\t\t\t\t\t\t\toptions = {\n\t\t\t\t\t\t\t\tformData: {\n\t\t\t\t\t\t\t\t\tattachment: {\n\t\t\t\t\t\t\t\t\t\tvalue: dataBuffer,\n\t\t\t\t\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\t\t\t\t\tcontentType: binaryData.mimeType,\n\t\t\t\t\t\t\t\t\t\t\tfilename: binaryData.fileName,\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t_json: JSON.stringify(body),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tbody = {};\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tbody.data = this.getNodeParameter('data', i) as string;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await theHiveApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'POST',\n\t\t\t\t\t\t\t`/case/${caseId}/artifact`,\n\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t\t'',\n\t\t\t\t\t\t\toptions,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (operation === 'get') {\n\t\t\t\t\t\tconst observableId = this.getNodeParameter('id', i) as string;\n\n\t\t\t\t\t\tconst credentials = await this.getCredentials('theHiveApi');\n\n\t\t\t\t\t\tconst version = credentials.apiVersion;\n\n\t\t\t\t\t\tlet endpoint;\n\n\t\t\t\t\t\tlet method: IHttpRequestMethods;\n\n\t\t\t\t\t\tlet body: IDataObject = {};\n\n\t\t\t\t\t\tif (version === 'v1') {\n\t\t\t\t\t\t\tendpoint = '/v1/query';\n\n\t\t\t\t\t\t\tmethod = 'POST';\n\n\t\t\t\t\t\t\tbody = {\n\t\t\t\t\t\t\t\tquery: [\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t_name: 'getObservable',\n\t\t\t\t\t\t\t\t\t\tidOrName: observableId,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\tqs.name = `get-observable-${observableId}`;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tmethod = 'GET';\n\n\t\t\t\t\t\t\tendpoint = `/case/artifact/${observableId}`;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await theHiveApiRequest.call(this, method, endpoint, body, qs);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (operation === 'getAll') {\n\t\t\t\t\t\tconst credentials = await this.getCredentials('theHiveApi');\n\n\t\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', i);\n\n\t\t\t\t\t\tconst version = credentials.apiVersion;\n\n\t\t\t\t\t\tconst options = this.getNodeParameter('options', i);\n\n\t\t\t\t\t\tconst caseId = this.getNodeParameter('caseId', i);\n\n\t\t\t\t\t\tlet endpoint;\n\n\t\t\t\t\t\tlet method: IHttpRequestMethods;\n\n\t\t\t\t\t\tlet body: IDataObject = {};\n\n\t\t\t\t\t\tlet limit = undefined;\n\n\t\t\t\t\t\tif (!returnAll) {\n\t\t\t\t\t\t\tlimit = this.getNodeParameter('limit', i);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (version === 'v1') {\n\t\t\t\t\t\t\tendpoint = '/v1/query';\n\n\t\t\t\t\t\t\tmethod = 'POST';\n\n\t\t\t\t\t\t\tbody = {\n\t\t\t\t\t\t\t\tquery: [\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t_name: 'getCase',\n\t\t\t\t\t\t\t\t\t\tidOrName: caseId,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t_name: 'observables',\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t//@ts-ignore\n\t\t\t\t\t\t\tprepareSortQuery(options.sort, body);\n\n\t\t\t\t\t\t\tif (limit !== undefined) {\n\t\t\t\t\t\t\t\t//@ts-ignore\n\t\t\t\t\t\t\t\tprepareRangeQuery(`0-${limit}`, body);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tqs.name = 'observables';\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tmethod = 'POST';\n\n\t\t\t\t\t\t\tendpoint = '/case/artifact/_search';\n\n\t\t\t\t\t\t\tif (limit !== undefined) {\n\t\t\t\t\t\t\t\tqs.range = `0-${limit}`;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbody.query = Parent('case', Id(caseId as string));\n\n\t\t\t\t\t\t\tObject.assign(qs, prepareOptional(options));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await theHiveApiRequest.call(this, method, endpoint, body, qs);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (operation === 'search') {\n\t\t\t\t\t\tconst credentials = await this.getCredentials('theHiveApi');\n\n\t\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', i);\n\n\t\t\t\t\t\tconst version = credentials.apiVersion;\n\n\t\t\t\t\t\tconst queryAttributs = prepareOptional(\n\t\t\t\t\t\t\tthis.getNodeParameter('filters', i, {}) as INodeParameters,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tconst _searchQuery: IQueryObject = And();\n\n\t\t\t\t\t\tconst options = this.getNodeParameter('options', i);\n\n\t\t\t\t\t\tfor (const key of Object.keys(queryAttributs)) {\n\t\t\t\t\t\t\tif (key === 'dataType' || key === 'tags') {\n\t\t\t\t\t\t\t\t(_searchQuery['_and'] as IQueryObject[]).push(\n\t\t\t\t\t\t\t\t\tIn(key, queryAttributs[key] as string[]),\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t} else if (key === 'description' || key === 'keywork' || key === 'message') {\n\t\t\t\t\t\t\t\t(_searchQuery['_and'] as IQueryObject[]).push(\n\t\t\t\t\t\t\t\t\tContainsString(key, queryAttributs[key] as string),\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t} else if (key === 'range') {\n\t\t\t\t\t\t\t\t(_searchQuery['_and'] as IQueryObject[]).push(\n\t\t\t\t\t\t\t\t\tBetween(\n\t\t\t\t\t\t\t\t\t\t'startDate',\n\t\t\t\t\t\t\t\t\t\t((queryAttributs['range'] as IDataObject)['dateRange'] as IDataObject)[\n\t\t\t\t\t\t\t\t\t\t\t'fromDate'\n\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t((queryAttributs['range'] as IDataObject)['dateRange'] as IDataObject)[\n\t\t\t\t\t\t\t\t\t\t\t'toDate'\n\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t(_searchQuery['_and'] as IQueryObject[]).push(\n\t\t\t\t\t\t\t\t\tEq(key, queryAttributs[key] as string),\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tlet endpoint;\n\n\t\t\t\t\t\tlet method: IHttpRequestMethods;\n\n\t\t\t\t\t\tlet body: IDataObject = {};\n\n\t\t\t\t\t\tlet limit = undefined;\n\n\t\t\t\t\t\tif (!returnAll) {\n\t\t\t\t\t\t\tlimit = this.getNodeParameter('limit', i);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (version === 'v1') {\n\t\t\t\t\t\t\tendpoint = '/v1/query';\n\n\t\t\t\t\t\t\tmethod = 'POST';\n\n\t\t\t\t\t\t\tbody = {\n\t\t\t\t\t\t\t\tquery: [\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t_name: 'listObservable',\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t_name: 'filter',\n\t\t\t\t\t\t\t\t\t\t_and: _searchQuery['_and'],\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t//@ts-ignore\n\t\t\t\t\t\t\tprepareSortQuery(options.sort, body);\n\n\t\t\t\t\t\t\tif (limit !== undefined) {\n\t\t\t\t\t\t\t\t//@ts-ignore\n\t\t\t\t\t\t\t\tprepareRangeQuery(`0-${limit}`, body);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tqs.name = 'observables';\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tmethod = 'POST';\n\n\t\t\t\t\t\t\tendpoint = '/case/artifact/_search';\n\n\t\t\t\t\t\t\tif (limit !== undefined) {\n\t\t\t\t\t\t\t\tqs.range = `0-${limit}`;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbody.query = _searchQuery;\n\n\t\t\t\t\t\t\tObject.assign(qs, prepareOptional(options));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await theHiveApiRequest.call(this, method, endpoint, body, qs);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (operation === 'update') {\n\t\t\t\t\t\tconst id = this.getNodeParameter('id', i) as string;\n\n\t\t\t\t\t\tconst body: IDataObject = {\n\t\t\t\t\t\t\t...prepareOptional(this.getNodeParameter('updateFields', i, {}) as INodeParameters),\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tresponseData = await theHiveApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'PATCH',\n\t\t\t\t\t\t\t`/case/artifact/${id}`,\n\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tresponseData = { success: true };\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (resource === 'case') {\n\t\t\t\t\tif (operation === 'count') {\n\t\t\t\t\t\tconst filters = this.getNodeParameter('filters', i, {}) as INodeParameters;\n\t\t\t\t\t\tconst countQueryAttributs = prepareOptional(filters);\n\n\t\t\t\t\t\tconst _countSearchQuery: IQueryObject = And();\n\n\t\t\t\t\t\tif ('customFieldsUi' in filters) {\n\t\t\t\t\t\t\tconst customFields = (await prepareCustomFields.call(this, filters)) as IDataObject;\n\t\t\t\t\t\t\tconst searchQueries = buildCustomFieldSearch(customFields);\n\t\t\t\t\t\t\t(_countSearchQuery['_and'] as IQueryObject[]).push(...searchQueries);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfor (const key of Object.keys(countQueryAttributs)) {\n\t\t\t\t\t\t\tif (key === 'tags') {\n\t\t\t\t\t\t\t\t(_countSearchQuery['_and'] as IQueryObject[]).push(\n\t\t\t\t\t\t\t\t\tIn(key, countQueryAttributs[key] as string[]),\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t} else if (key === 'description' || key === 'summary' || key === 'title') {\n\t\t\t\t\t\t\t\t(_countSearchQuery['_and'] as IQueryObject[]).push(\n\t\t\t\t\t\t\t\t\tContainsString(key, countQueryAttributs[key] as string),\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t(_countSearchQuery['_and'] as IQueryObject[]).push(\n\t\t\t\t\t\t\t\t\tEq(key, countQueryAttributs[key] as string),\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst body = {\n\t\t\t\t\t\t\tquery: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t_name: 'listCase',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t_name: 'filter',\n\t\t\t\t\t\t\t\t\t_and: _countSearchQuery['_and'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tbody['query'].push({\n\t\t\t\t\t\t\t_name: 'count',\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tqs.name = 'count-cases';\n\n\t\t\t\t\t\tresponseData = await theHiveApiRequest.call(this, 'POST', '/v1/query', body, qs);\n\n\t\t\t\t\t\tresponseData = { count: responseData };\n\t\t\t\t\t}\n\n\t\t\t\t\tif (operation === 'executeResponder') {\n\t\t\t\t\t\tconst caseId = this.getNodeParameter('id', i);\n\t\t\t\t\t\tconst responderId = this.getNodeParameter('responder', i) as string;\n\t\t\t\t\t\tlet body: IDataObject;\n\t\t\t\t\t\tlet response;\n\t\t\t\t\t\tresponseData = [];\n\t\t\t\t\t\tbody = {\n\t\t\t\t\t\t\tresponderId,\n\t\t\t\t\t\t\tobjectId: caseId,\n\t\t\t\t\t\t\tobjectType: 'case',\n\t\t\t\t\t\t};\n\t\t\t\t\t\tresponse = await theHiveApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'POST',\n\t\t\t\t\t\t\t'/connector/cortex/action' as string,\n\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tbody = {\n\t\t\t\t\t\t\tquery: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t_name: 'listAction',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t_name: 'filter',\n\t\t\t\t\t\t\t\t\t_and: [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t_field: 'cortexId',\n\t\t\t\t\t\t\t\t\t\t\t_value: response.cortexId,\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t_field: 'objectId',\n\t\t\t\t\t\t\t\t\t\t\t_value: response.objectId,\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t_field: 'startDate',\n\t\t\t\t\t\t\t\t\t\t\t_value: response.startDate,\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t};\n\t\t\t\t\t\tqs.name = 'log-actions';\n\t\t\t\t\t\tdo {\n\t\t\t\t\t\t\tresponse = await theHiveApiRequest.call(this, 'POST', '/v1/query', body, qs);\n\t\t\t\t\t\t} while (response.status === 'Waiting' || response.status === 'InProgress');\n\n\t\t\t\t\t\tresponseData = response;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (operation === 'create') {\n\t\t\t\t\t\tconst options = this.getNodeParameter('options', i, {}) as INodeParameters;\n\t\t\t\t\t\tconst jsonParameters = this.getNodeParameter('jsonParameters', i);\n\t\t\t\t\t\tconst customFields = await prepareCustomFields.call(this, options, jsonParameters);\n\n\t\t\t\t\t\tconst body: IDataObject = {\n\t\t\t\t\t\t\ttitle: this.getNodeParameter('title', i),\n\t\t\t\t\t\t\tdescription: this.getNodeParameter('description', i),\n\t\t\t\t\t\t\tseverity: this.getNodeParameter('severity', i),\n\t\t\t\t\t\t\tstartDate: Date.parse(this.getNodeParameter('startDate', i) as string),\n\t\t\t\t\t\t\towner: this.getNodeParameter('owner', i),\n\t\t\t\t\t\t\tflag: this.getNodeParameter('flag', i),\n\t\t\t\t\t\t\ttlp: this.getNodeParameter('tlp', i),\n\t\t\t\t\t\t\ttags: splitTags(this.getNodeParameter('tags', i) as string),\n\t\t\t\t\t\t\t...prepareOptional(options),\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tif (customFields) {\n\t\t\t\t\t\t\tObject.keys(customFields).forEach((key) => {\n\t\t\t\t\t\t\t\tset(body, key, customFields[key]);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await theHiveApiRequest.call(this, 'POST', '/case' as string, body);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (operation === 'get') {\n\t\t\t\t\t\tconst caseId = this.getNodeParameter('id', i) as string;\n\n\t\t\t\t\t\tconst credentials = await this.getCredentials('theHiveApi');\n\n\t\t\t\t\t\tconst version = credentials.apiVersion;\n\n\t\t\t\t\t\tlet endpoint;\n\n\t\t\t\t\t\tlet method: IHttpRequestMethods;\n\n\t\t\t\t\t\tlet body: IDataObject = {};\n\n\t\t\t\t\t\tif (version === 'v1') {\n\t\t\t\t\t\t\tendpoint = '/v1/query';\n\n\t\t\t\t\t\t\tmethod = 'POST';\n\n\t\t\t\t\t\t\tbody = {\n\t\t\t\t\t\t\t\tquery: [\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t_name: 'getCase',\n\t\t\t\t\t\t\t\t\t\tidOrName: caseId,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\tqs.name = `get-case-${caseId}`;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tmethod = 'GET';\n\n\t\t\t\t\t\t\tendpoint = `/case/${caseId}`;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await theHiveApiRequest.call(this, method, endpoint, body, qs);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (operation === 'getAll') {\n\t\t\t\t\t\tconst credentials = await this.getCredentials('theHiveApi');\n\n\t\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', i);\n\n\t\t\t\t\t\tconst version = credentials.apiVersion;\n\n\t\t\t\t\t\tconst filters = this.getNodeParameter('filters', i, {}) as INodeParameters;\n\t\t\t\t\t\tconst queryAttributs = prepareOptional(filters);\n\n\t\t\t\t\t\tconst _searchQuery: IQueryObject = And();\n\n\t\t\t\t\t\tconst options = this.getNodeParameter('options', i);\n\n\t\t\t\t\t\tif ('customFieldsUi' in filters) {\n\t\t\t\t\t\t\tconst customFields = (await prepareCustomFields.call(this, filters)) as IDataObject;\n\t\t\t\t\t\t\tconst searchQueries = buildCustomFieldSearch(customFields);\n\t\t\t\t\t\t\t(_searchQuery['_and'] as IQueryObject[]).push(...searchQueries);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfor (const key of Object.keys(queryAttributs)) {\n\t\t\t\t\t\t\tif (key === 'tags') {\n\t\t\t\t\t\t\t\t(_searchQuery['_and'] as IQueryObject[]).push(\n\t\t\t\t\t\t\t\t\tIn(key, queryAttributs[key] as string[]),\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t} else if (key === 'description' || key === 'summary' || key === 'title') {\n\t\t\t\t\t\t\t\t(_searchQuery['_and'] as IQueryObject[]).push(\n\t\t\t\t\t\t\t\t\tContainsString(key, queryAttributs[key] as string),\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t(_searchQuery['_and'] as IQueryObject[]).push(\n\t\t\t\t\t\t\t\t\tEq(key, queryAttributs[key] as string),\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tlet endpoint;\n\n\t\t\t\t\t\tlet method: IHttpRequestMethods;\n\n\t\t\t\t\t\tlet body: IDataObject = {};\n\n\t\t\t\t\t\tlet limit = undefined;\n\n\t\t\t\t\t\tif (!returnAll) {\n\t\t\t\t\t\t\tlimit = this.getNodeParameter('limit', i);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (version === 'v1') {\n\t\t\t\t\t\t\tendpoint = '/v1/query';\n\n\t\t\t\t\t\t\tmethod = 'POST';\n\n\t\t\t\t\t\t\tbody = {\n\t\t\t\t\t\t\t\tquery: [\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t_name: 'listCase',\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t_name: 'filter',\n\t\t\t\t\t\t\t\t\t\t_and: _searchQuery['_and'],\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t//@ts-ignore\n\t\t\t\t\t\t\tprepareSortQuery(options.sort, body);\n\n\t\t\t\t\t\t\tif (limit !== undefined) {\n\t\t\t\t\t\t\t\t//@ts-ignore\n\t\t\t\t\t\t\t\tprepareRangeQuery(`0-${limit}`, body);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tqs.name = 'cases';\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tmethod = 'POST';\n\n\t\t\t\t\t\t\tendpoint = '/case/_search';\n\n\t\t\t\t\t\t\tif (limit !== undefined) {\n\t\t\t\t\t\t\t\tqs.range = `0-${limit}`;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbody.query = _searchQuery;\n\n\t\t\t\t\t\t\tObject.assign(qs, prepareOptional(options));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await theHiveApiRequest.call(this, method, endpoint, body, qs);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (operation === 'update') {\n\t\t\t\t\t\tconst id = this.getNodeParameter('id', i) as string;\n\t\t\t\t\t\tconst updateFields = this.getNodeParameter('updateFields', i, {}) as INodeParameters;\n\t\t\t\t\t\tconst jsonParameters = this.getNodeParameter('jsonParameters', i);\n\n\t\t\t\t\t\tconst customFields = await prepareCustomFields.call(this, updateFields, jsonParameters);\n\n\t\t\t\t\t\tconst body: IDataObject = {\n\t\t\t\t\t\t\t...customFields,\n\t\t\t\t\t\t\t...prepareOptional(updateFields),\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tresponseData = await theHiveApiRequest.call(this, 'PATCH', `/case/${id}`, body);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (resource === 'task') {\n\t\t\t\t\tif (operation === 'count') {\n\t\t\t\t\t\tconst countQueryAttributs = prepareOptional(\n\t\t\t\t\t\t\tthis.getNodeParameter('filters', i, {}) as INodeParameters,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tconst _countSearchQuery: IQueryObject = And();\n\n\t\t\t\t\t\tfor (const key of Object.keys(countQueryAttributs)) {\n\t\t\t\t\t\t\tif (key === 'title' || key === 'description') {\n\t\t\t\t\t\t\t\t(_countSearchQuery['_and'] as IQueryObject[]).push(\n\t\t\t\t\t\t\t\t\tContainsString(key, countQueryAttributs[key] as string),\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t(_countSearchQuery['_and'] as IQueryObject[]).push(\n\t\t\t\t\t\t\t\t\tEq(key, countQueryAttributs[key] as string),\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst body = {\n\t\t\t\t\t\t\tquery: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t_name: 'listTask',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t_name: 'filter',\n\t\t\t\t\t\t\t\t\t_and: _countSearchQuery['_and'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tbody['query'].push({\n\t\t\t\t\t\t\t_name: 'count',\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tqs.name = 'count-tasks';\n\n\t\t\t\t\t\tresponseData = await theHiveApiRequest.call(this, 'POST', '/v1/query', body, qs);\n\n\t\t\t\t\t\tresponseData = { count: responseData };\n\t\t\t\t\t}\n\n\t\t\t\t\tif (operation === 'create') {\n\t\t\t\t\t\tconst caseId = this.getNodeParameter('caseId', i) as string;\n\n\t\t\t\t\t\tconst body: IDataObject = {\n\t\t\t\t\t\t\ttitle: this.getNodeParameter('title', i) as string,\n\t\t\t\t\t\t\tstatus: this.getNodeParameter('status', i) as string,\n\t\t\t\t\t\t\tflag: this.getNodeParameter('flag', i),\n\t\t\t\t\t\t\t...prepareOptional(this.getNodeParameter('options', i, {}) as INodeParameters),\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tresponseData = await theHiveApiRequest.call(this, 'POST', `/case/${caseId}/task`, body);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (operation === 'executeResponder') {\n\t\t\t\t\t\tconst taskId = this.getNodeParameter('id', i);\n\t\t\t\t\t\tconst responderId = this.getNodeParameter('responder', i) as string;\n\t\t\t\t\t\tlet body: IDataObject;\n\t\t\t\t\t\tlet response;\n\t\t\t\t\t\tresponseData = [];\n\t\t\t\t\t\tbody = {\n\t\t\t\t\t\t\tresponderId,\n\t\t\t\t\t\t\tobjectId: taskId,\n\t\t\t\t\t\t\tobjectType: 'case_task',\n\t\t\t\t\t\t};\n\t\t\t\t\t\tresponse = await theHiveApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'POST',\n\t\t\t\t\t\t\t'/connector/cortex/action' as string,\n\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tbody = {\n\t\t\t\t\t\t\tquery: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t_name: 'listAction',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t_name: 'filter',\n\t\t\t\t\t\t\t\t\t_and: [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t_field: 'cortexId',\n\t\t\t\t\t\t\t\t\t\t\t_value: response.cortexId,\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t_field: 'objectId',\n\t\t\t\t\t\t\t\t\t\t\t_value: response.objectId,\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t_field: 'startDate',\n\t\t\t\t\t\t\t\t\t\t\t_value: response.startDate,\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t};\n\t\t\t\t\t\tqs.name = 'task-actions';\n\t\t\t\t\t\tdo {\n\t\t\t\t\t\t\tresponse = await theHiveApiRequest.call(this, 'POST', '/v1/query', body, qs);\n\t\t\t\t\t\t} while (response.status === 'Waiting' || response.status === 'InProgress');\n\n\t\t\t\t\t\tresponseData = response;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (operation === 'get') {\n\t\t\t\t\t\tconst taskId = this.getNodeParameter('id', i) as string;\n\n\t\t\t\t\t\tconst credentials = await this.getCredentials('theHiveApi');\n\n\t\t\t\t\t\tconst version = credentials.apiVersion;\n\n\t\t\t\t\t\tlet endpoint;\n\n\t\t\t\t\t\tlet method: IHttpRequestMethods;\n\n\t\t\t\t\t\tlet body: IDataObject = {};\n\n\t\t\t\t\t\tif (version === 'v1') {\n\t\t\t\t\t\t\tendpoint = '/v1/query';\n\n\t\t\t\t\t\t\tmethod = 'POST';\n\n\t\t\t\t\t\t\tbody = {\n\t\t\t\t\t\t\t\tquery: [\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t_name: 'getTask',\n\t\t\t\t\t\t\t\t\t\tidOrName: taskId,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\tqs.name = `get-task-${taskId}`;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tmethod = 'GET';\n\n\t\t\t\t\t\t\tendpoint = `/case/task/${taskId}`;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await theHiveApiRequest.call(this, method, endpoint, body, qs);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (operation === 'getAll') {\n\t\t\t\t\t\t// get all require a case id (it retursn all tasks for a specific case)\n\t\t\t\t\t\tconst credentials = await this.getCredentials('theHiveApi');\n\n\t\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', i);\n\n\t\t\t\t\t\tconst version = credentials.apiVersion;\n\n\t\t\t\t\t\tconst caseId = this.getNodeParameter('caseId', i) as string;\n\n\t\t\t\t\t\tconst options = this.getNodeParameter('options', i);\n\n\t\t\t\t\t\tlet endpoint;\n\n\t\t\t\t\t\tlet method: IHttpRequestMethods;\n\n\t\t\t\t\t\tlet body: IDataObject = {};\n\n\t\t\t\t\t\tlet limit = undefined;\n\n\t\t\t\t\t\tif (!returnAll) {\n\t\t\t\t\t\t\tlimit = this.getNodeParameter('limit', i);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (version === 'v1') {\n\t\t\t\t\t\t\tendpoint = '/v1/query';\n\n\t\t\t\t\t\t\tmethod = 'POST';\n\n\t\t\t\t\t\t\tbody = {\n\t\t\t\t\t\t\t\tquery: [\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t_name: 'getCase',\n\t\t\t\t\t\t\t\t\t\tidOrName: caseId,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t_name: 'tasks',\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t//@ts-ignore\n\t\t\t\t\t\t\tprepareSortQuery(options.sort, body);\n\n\t\t\t\t\t\t\tif (limit !== undefined) {\n\t\t\t\t\t\t\t\t//@ts-ignore\n\t\t\t\t\t\t\t\tprepareRangeQuery(`0-${limit}`, body);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tqs.name = 'case-tasks';\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tmethod = 'POST';\n\n\t\t\t\t\t\t\tendpoint = '/case/task/_search';\n\n\t\t\t\t\t\t\tif (limit !== undefined) {\n\t\t\t\t\t\t\t\tqs.range = `0-${limit}`;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbody.query = And(Parent('case', Id(caseId)));\n\n\t\t\t\t\t\t\tObject.assign(qs, prepareOptional(options));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await theHiveApiRequest.call(this, method, endpoint, body, qs);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (operation === 'search') {\n\t\t\t\t\t\tconst credentials = await this.getCredentials('theHiveApi');\n\n\t\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', i);\n\n\t\t\t\t\t\tconst version = credentials.apiVersion;\n\n\t\t\t\t\t\tconst queryAttributs = prepareOptional(\n\t\t\t\t\t\t\tthis.getNodeParameter('filters', i, {}) as INodeParameters,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tconst _searchQuery: IQueryObject = And();\n\n\t\t\t\t\t\tconst options = this.getNodeParameter('options', i);\n\n\t\t\t\t\t\tfor (const key of Object.keys(queryAttributs)) {\n\t\t\t\t\t\t\tif (key === 'title' || key === 'description') {\n\t\t\t\t\t\t\t\t(_searchQuery['_and'] as IQueryObject[]).push(\n\t\t\t\t\t\t\t\t\tContainsString(key, queryAttributs[key] as string),\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t(_searchQuery['_and'] as IQueryObject[]).push(\n\t\t\t\t\t\t\t\t\tEq(key, queryAttributs[key] as string),\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tlet endpoint;\n\n\t\t\t\t\t\tlet method: IHttpRequestMethods;\n\n\t\t\t\t\t\tlet body: IDataObject = {};\n\n\t\t\t\t\t\tlet limit = undefined;\n\n\t\t\t\t\t\tif (!returnAll) {\n\t\t\t\t\t\t\tlimit = this.getNodeParameter('limit', i);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (version === 'v1') {\n\t\t\t\t\t\t\tendpoint = '/v1/query';\n\n\t\t\t\t\t\t\tmethod = 'POST';\n\n\t\t\t\t\t\t\tbody = {\n\t\t\t\t\t\t\t\tquery: [\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t_name: 'listTask',\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t_name: 'filter',\n\t\t\t\t\t\t\t\t\t\t_and: _searchQuery['_and'],\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t//@ts-ignore\n\t\t\t\t\t\t\tprepareSortQuery(options.sort, body);\n\n\t\t\t\t\t\t\tif (limit !== undefined) {\n\t\t\t\t\t\t\t\t//@ts-ignore\n\t\t\t\t\t\t\t\tprepareRangeQuery(`0-${limit}`, body);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tqs.name = 'tasks';\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tmethod = 'POST';\n\n\t\t\t\t\t\t\tendpoint = '/case/task/_search';\n\n\t\t\t\t\t\t\tif (limit !== undefined) {\n\t\t\t\t\t\t\t\tqs.range = `0-${limit}`;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbody.query = _searchQuery;\n\n\t\t\t\t\t\t\tObject.assign(qs, prepareOptional(options));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await theHiveApiRequest.call(this, method, endpoint, body, qs);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (operation === 'update') {\n\t\t\t\t\t\tconst id = this.getNodeParameter('id', i) as string;\n\n\t\t\t\t\t\tconst body: IDataObject = {\n\t\t\t\t\t\t\t...prepareOptional(this.getNodeParameter('updateFields', i, {}) as INodeParameters),\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tresponseData = await theHiveApiRequest.call(this, 'PATCH', `/case/task/${id}`, body);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (resource === 'log') {\n\t\t\t\t\tif (operation === 'create') {\n\t\t\t\t\t\tconst taskId = this.getNodeParameter('taskId', i) as string;\n\n\t\t\t\t\t\tlet body: IDataObject = {\n\t\t\t\t\t\t\tmessage: this.getNodeParameter('message', i),\n\t\t\t\t\t\t\tstartDate: Date.parse(this.getNodeParameter('startDate', i) as string),\n\t\t\t\t\t\t\tstatus: this.getNodeParameter('status', i),\n\t\t\t\t\t\t};\n\t\t\t\t\t\tconst optionals = this.getNodeParameter('options', i);\n\n\t\t\t\t\t\tlet options: IDataObject = {};\n\n\t\t\t\t\t\tif (optionals.attachementUi) {\n\t\t\t\t\t\t\tconst attachmentValues = (optionals.attachementUi as IDataObject)\n\t\t\t\t\t\t\t\t.attachmentValues as IDataObject;\n\n\t\t\t\t\t\t\tif (attachmentValues) {\n\t\t\t\t\t\t\t\tconst binaryPropertyName = attachmentValues.binaryProperty as string;\n\t\t\t\t\t\t\t\tconst binaryData = this.helpers.assertBinaryData(i, binaryPropertyName);\n\t\t\t\t\t\t\t\tconst dataBuffer = await this.helpers.getBinaryDataBuffer(i, binaryPropertyName);\n\n\t\t\t\t\t\t\t\toptions = {\n\t\t\t\t\t\t\t\t\tformData: {\n\t\t\t\t\t\t\t\t\t\tattachment: {\n\t\t\t\t\t\t\t\t\t\t\tvalue: dataBuffer,\n\t\t\t\t\t\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\t\t\t\t\t\tcontentType: binaryData.mimeType,\n\t\t\t\t\t\t\t\t\t\t\t\tfilename: binaryData.fileName,\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t_json: JSON.stringify(body),\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\tbody = {};\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await theHiveApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'POST',\n\t\t\t\t\t\t\t`/case/task/${taskId}/log`,\n\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t\t'',\n\t\t\t\t\t\t\toptions,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (operation === 'executeResponder') {\n\t\t\t\t\t\tconst logId = this.getNodeParameter('id', i);\n\t\t\t\t\t\tconst responderId = this.getNodeParameter('responder', i) as string;\n\t\t\t\t\t\tlet body: IDataObject;\n\t\t\t\t\t\tlet response;\n\t\t\t\t\t\tresponseData = [];\n\t\t\t\t\t\tbody = {\n\t\t\t\t\t\t\tresponderId,\n\t\t\t\t\t\t\tobjectId: logId,\n\t\t\t\t\t\t\tobjectType: 'case_task_log',\n\t\t\t\t\t\t};\n\t\t\t\t\t\tresponse = await theHiveApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'POST',\n\t\t\t\t\t\t\t'/connector/cortex/action' as string,\n\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tbody = {\n\t\t\t\t\t\t\tquery: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t_name: 'listAction',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t_name: 'filter',\n\t\t\t\t\t\t\t\t\t_and: [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t_field: 'cortexId',\n\t\t\t\t\t\t\t\t\t\t\t_value: response.cortexId,\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t_field: 'objectId',\n\t\t\t\t\t\t\t\t\t\t\t_value: response.objectId,\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t_field: 'startDate',\n\t\t\t\t\t\t\t\t\t\t\t_value: response.startDate,\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t};\n\t\t\t\t\t\tqs.name = 'log-actions';\n\t\t\t\t\t\tdo {\n\t\t\t\t\t\t\tresponse = await theHiveApiRequest.call(this, 'POST', '/v1/query', body, qs);\n\t\t\t\t\t\t} while (response.status === 'Waiting' || response.status === 'InProgress');\n\n\t\t\t\t\t\tresponseData = response;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (operation === 'get') {\n\t\t\t\t\t\tconst logId = this.getNodeParameter('id', i) as string;\n\n\t\t\t\t\t\tconst credentials = await this.getCredentials('theHiveApi');\n\n\t\t\t\t\t\tconst version = credentials.apiVersion;\n\n\t\t\t\t\t\tlet endpoint;\n\n\t\t\t\t\t\tlet method: IHttpRequestMethods;\n\n\t\t\t\t\t\tlet body: IDataObject = {};\n\n\t\t\t\t\t\tif (version === 'v1') {\n\t\t\t\t\t\t\tendpoint = '/v1/query';\n\n\t\t\t\t\t\t\tmethod = 'POST';\n\n\t\t\t\t\t\t\tbody = {\n\t\t\t\t\t\t\t\tquery: [\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t_name: 'getLog',\n\t\t\t\t\t\t\t\t\t\tidOrName: logId,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\tqs.name = `get-log-${logId}`;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tmethod = 'POST';\n\n\t\t\t\t\t\t\tendpoint = '/case/task/log/_search';\n\n\t\t\t\t\t\t\tbody.query = { _id: logId };\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await theHiveApiRequest.call(this, method, endpoint, body, qs);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (operation === 'getAll') {\n\t\t\t\t\t\tconst credentials = await this.getCredentials('theHiveApi');\n\n\t\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', i);\n\n\t\t\t\t\t\tconst version = credentials.apiVersion;\n\n\t\t\t\t\t\tconst taskId = this.getNodeParameter('taskId', i) as string;\n\n\t\t\t\t\t\tlet endpoint;\n\n\t\t\t\t\t\tlet method: IHttpRequestMethods;\n\n\t\t\t\t\t\tlet body: IDataObject = {};\n\n\t\t\t\t\t\tlet limit = undefined;\n\n\t\t\t\t\t\tif (!returnAll) {\n\t\t\t\t\t\t\tlimit = this.getNodeParameter('limit', i);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (version === 'v1') {\n\t\t\t\t\t\t\tendpoint = '/v1/query';\n\n\t\t\t\t\t\t\tmethod = 'POST';\n\n\t\t\t\t\t\t\tbody = {\n\t\t\t\t\t\t\t\tquery: [\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t_name: 'getTask',\n\t\t\t\t\t\t\t\t\t\tidOrName: taskId,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t_name: 'logs',\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\tif (limit !== undefined) {\n\t\t\t\t\t\t\t\t//@ts-ignore\n\t\t\t\t\t\t\t\tprepareRangeQuery(`0-${limit}`, body);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tqs.name = 'case-task-logs';\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tmethod = 'POST';\n\n\t\t\t\t\t\t\tendpoint = '/case/task/log/_search';\n\n\t\t\t\t\t\t\tif (limit !== undefined) {\n\t\t\t\t\t\t\t\tqs.range = `0-${limit}`;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbody.query = And(Parent('task', Id(taskId)));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await theHiveApiRequest.call(this, method, endpoint, body, qs);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t);\n\t\t\t\treturnData.push(...executionData);\n\t\t\t} catch (error) {\n\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\tthis.helpers.returnJsonArray({ error: error.message }),\n\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t);\n\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\t\treturn [returnData];\n\t}\n}\n"],"mappings":"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","names":["set"]}