{"version":3,"sources":["../../../nodes/Gong/GenericFunctions.ts"],"sourcesContent":["import get from 'lodash/get';\nimport type {\n\tDeclarativeRestApiSettings,\n\tIDataObject,\n\tIExecuteFunctions,\n\tIExecutePaginationFunctions,\n\tIExecuteSingleFunctions,\n\tIHttpRequestMethods,\n\tIHttpRequestOptions,\n\tILoadOptionsFunctions,\n\tIN8nHttpFullResponse,\n\tINodeExecutionData,\n\tJsonObject,\n} from 'n8n-workflow';\nimport { NodeApiError } from 'n8n-workflow';\n\nexport async function gongApiRequest(\n\tthis: IExecuteFunctions | ILoadOptionsFunctions,\n\tmethod: IHttpRequestMethods,\n\tendpoint: string,\n\tbody: IDataObject = {},\n\tquery: IDataObject = {},\n) {\n\tconst authentication = this.getNodeParameter('authentication', 0) as 'accessToken' | 'oAuth2';\n\tconst credentialsType = authentication === 'oAuth2' ? 'gongOAuth2Api' : 'gongApi';\n\tconst { baseUrl } = await this.getCredentials<{\n\t\tbaseUrl: string;\n\t}>(credentialsType);\n\n\tconst options: IHttpRequestOptions = {\n\t\tmethod,\n\t\turl: baseUrl.replace(new RegExp('/$'), '') + endpoint,\n\t\tjson: true,\n\t\theaders: {\n\t\t\t'Content-Type': 'application/json',\n\t\t},\n\t\tbody,\n\t\tqs: query,\n\t};\n\n\tif (Object.keys(body).length === 0) {\n\t\tdelete options.body;\n\t}\n\n\treturn await this.helpers.requestWithAuthentication.call(this, credentialsType, options);\n}\n\nexport async function gongApiPaginateRequest(\n\tthis: IExecuteFunctions | IExecuteSingleFunctions | ILoadOptionsFunctions,\n\tmethod: IHttpRequestMethods,\n\tendpoint: string,\n\tbody: IDataObject = {},\n\tquery: IDataObject = {},\n\titemIndex: number = 0,\n\trootProperty: string | undefined = undefined,\n): Promise<any> {\n\tconst authentication = this.getNodeParameter('authentication', 0) as 'accessToken' | 'oAuth2';\n\tconst credentialsType = authentication === 'oAuth2' ? 'gongOAuth2Api' : 'gongApi';\n\tconst { baseUrl } = await this.getCredentials<{\n\t\tbaseUrl: string;\n\t}>(credentialsType);\n\n\tconst options: IHttpRequestOptions = {\n\t\tmethod,\n\t\turl: baseUrl.replace(new RegExp('/$'), '') + endpoint,\n\t\tjson: true,\n\t\theaders: {\n\t\t\t'Content-Type': 'application/json',\n\t\t},\n\t\tbody,\n\t\tqs: query,\n\t};\n\n\tif (Object.keys(body).length === 0) {\n\t\tdelete options.body;\n\t}\n\n\tconst pages = await this.helpers.requestWithAuthenticationPaginated.call(\n\t\tthis,\n\t\toptions,\n\t\titemIndex,\n\t\t{\n\t\t\trequestInterval: 340, // Rate limit 3 calls per second\n\t\t\tcontinue: '={{ $response.body.records.cursor }}',\n\t\t\trequest: {\n\t\t\t\t[method === 'POST' ? 'body' : 'qs']:\n\t\t\t\t\t'={{ $if($response.body?.records.cursor, { cursor: $response.body.records.cursor }, {}) }}',\n\t\t\t\turl: options.url,\n\t\t\t},\n\t\t},\n\t\tcredentialsType,\n\t);\n\n\tif (rootProperty) {\n\t\tlet results: IDataObject[] = [];\n\t\tfor (const page of pages) {\n\t\t\tconst items = page.body[rootProperty];\n\t\t\tif (items) {\n\t\t\t\tresults = results.concat(items);\n\t\t\t}\n\t\t}\n\t\treturn results;\n\t} else {\n\t\treturn pages.flat();\n\t}\n}\n\nconst getCursorPaginator = (\n\textractItems: (items: INodeExecutionData[]) => INodeExecutionData[],\n) => {\n\treturn async function cursorPagination(\n\t\tthis: IExecutePaginationFunctions,\n\t\trequestOptions: DeclarativeRestApiSettings.ResultOptions,\n\t): Promise<INodeExecutionData[]> {\n\t\tlet executions: INodeExecutionData[] = [];\n\t\tlet responseData: INodeExecutionData[];\n\t\tlet nextCursor: string | undefined = undefined;\n\t\tconst returnAll = this.getNodeParameter('returnAll', true) as boolean;\n\n\t\tdo {\n\t\t\t(requestOptions.options.body as IDataObject).cursor = nextCursor;\n\t\t\tresponseData = await this.makeRoutingRequest(requestOptions);\n\t\t\tconst lastItem = responseData[responseData.length - 1].json;\n\t\t\tnextCursor = (lastItem.records as IDataObject)?.cursor as string | undefined;\n\t\t\texecutions = executions.concat(extractItems(responseData));\n\t\t} while (returnAll && nextCursor);\n\n\t\treturn executions;\n\t};\n};\n\nexport const extractCalls = (items: INodeExecutionData[]): INodeExecutionData[] => {\n\tconst calls: IDataObject[] = items.flatMap((item) => get(item.json, 'calls') as IDataObject[]);\n\treturn calls.map((call) => {\n\t\tconst { metaData, ...rest } = call ?? {};\n\t\treturn { json: { ...(metaData as IDataObject), ...rest } };\n\t});\n};\n\nexport const extractUsers = (items: INodeExecutionData[]): INodeExecutionData[] => {\n\tconst users: IDataObject[] = items.flatMap((item) => get(item.json, 'users') as IDataObject[]);\n\treturn users.map((user) => ({ json: user }));\n};\n\nexport const getCursorPaginatorCalls = () => {\n\treturn getCursorPaginator(extractCalls);\n};\n\nexport const getCursorPaginatorUsers = () => {\n\treturn getCursorPaginator(extractUsers);\n};\n\nexport async function handleErrorPostReceive(\n\tthis: IExecuteSingleFunctions,\n\tdata: INodeExecutionData[],\n\tresponse: IN8nHttpFullResponse,\n): Promise<INodeExecutionData[]> {\n\tif (String(response.statusCode).startsWith('4') || String(response.statusCode).startsWith('5')) {\n\t\tconst { resource, operation } = this.getNode().parameters;\n\n\t\tif (resource === 'call') {\n\t\t\tif (operation === 'get') {\n\t\t\t\tif (response.statusCode === 404) {\n\t\t\t\t\tthrow new NodeApiError(this.getNode(), response as unknown as JsonObject, {\n\t\t\t\t\t\tmessage: \"The required call doesn't match any existing one\",\n\t\t\t\t\t\tdescription: \"Double-check the value in the parameter 'Call to Get' and try again\",\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} else if (operation === 'getAll') {\n\t\t\t\tif (response.statusCode === 404) {\n\t\t\t\t\tconst primaryUserId = this.getNodeParameter('filters.primaryUserIds', {}) as IDataObject;\n\t\t\t\t\tif (Object.keys(primaryUserId).length !== 0) {\n\t\t\t\t\t\treturn [{ json: {} }];\n\t\t\t\t\t}\n\t\t\t\t} else if (response.statusCode === 400 || response.statusCode === 500) {\n\t\t\t\t\tthrow new NodeApiError(this.getNode(), response as unknown as JsonObject, {\n\t\t\t\t\t\tdescription: 'Double-check the value(s) in the parameter(s)',\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (resource === 'user') {\n\t\t\tif (operation === 'get') {\n\t\t\t\tif (response.statusCode === 404) {\n\t\t\t\t\tthrow new NodeApiError(this.getNode(), response as unknown as JsonObject, {\n\t\t\t\t\t\tmessage: \"The required user doesn't match any existing one\",\n\t\t\t\t\t\tdescription: \"Double-check the value in the parameter 'User to Get' and try again\",\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} else if (operation === 'getAll') {\n\t\t\t\tif (response.statusCode === 404) {\n\t\t\t\t\tconst userIds = this.getNodeParameter('filters.userIds', '') as string;\n\t\t\t\t\tif (userIds) {\n\t\t\t\t\t\tthrow new NodeApiError(this.getNode(), response as unknown as JsonObject, {\n\t\t\t\t\t\t\tmessage: \"The Users IDs don't match any existing user\",\n\t\t\t\t\t\t\tdescription: \"Double-check the values in the parameter 'Users IDs' and try again\",\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthrow new NodeApiError(this.getNode(), response as unknown as JsonObject);\n\t}\n\n\treturn data;\n}\n\nexport function isValidNumberIds(value: number | number[] | string | string[]): boolean {\n\tif (typeof value === 'number') {\n\t\treturn true;\n\t}\n\n\tif (Array.isArray(value) && value.every((item) => typeof item === 'number')) {\n\t\treturn true;\n\t}\n\n\tif (typeof value === 'string') {\n\t\tconst parts = value.split(',');\n\t\treturn parts.every((part) => !isNaN(Number(part.trim())));\n\t}\n\n\tif (Array.isArray(value) && value.every((item) => typeof item === 'string')) {\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n"],"mappings":"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","names":["get"]}