{"version":3,"sources":["../../../../nodes/Gong/descriptions/CallDescription.ts"],"sourcesContent":["import type {\n\tIDataObject,\n\tIExecuteSingleFunctions,\n\tIHttpRequestOptions,\n\tIN8nHttpFullResponse,\n\tINodeExecutionData,\n\tINodeProperties,\n} from 'n8n-workflow';\nimport { NodeApiError } from 'n8n-workflow';\n\nimport {\n\tgetCursorPaginatorCalls,\n\tgongApiPaginateRequest,\n\tisValidNumberIds,\n\thandleErrorPostReceive,\n\textractCalls,\n} from '../GenericFunctions';\n\nexport const callOperations: INodeProperties[] = [\n\t{\n\t\tdisplayName: 'Operation',\n\t\tname: 'operation',\n\t\ttype: 'options',\n\t\tnoDataExpression: true,\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tresource: ['call'],\n\t\t\t},\n\t\t},\n\t\toptions: [\n\t\t\t{\n\t\t\t\tname: 'Get',\n\t\t\t\tvalue: 'get',\n\t\t\t\tdescription: 'Retrieve data for a specific call',\n\t\t\t\trouting: {\n\t\t\t\t\trequest: {\n\t\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\t\turl: '/v2/calls/extensive',\n\t\t\t\t\t\tignoreHttpStatusErrors: true,\n\t\t\t\t\t},\n\t\t\t\t\toutput: {\n\t\t\t\t\t\tpostReceive: [handleErrorPostReceive],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\taction: 'Get call',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Get Many',\n\t\t\t\tvalue: 'getAll',\n\t\t\t\tdescription: 'Retrieve a list of calls',\n\t\t\t\trouting: {\n\t\t\t\t\trequest: {\n\t\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\t\turl: '/v2/calls/extensive',\n\t\t\t\t\t\tbody: {\n\t\t\t\t\t\t\tfilter: {},\n\t\t\t\t\t\t},\n\t\t\t\t\t\tignoreHttpStatusErrors: true,\n\t\t\t\t\t},\n\t\t\t\t\toutput: {\n\t\t\t\t\t\tpostReceive: [handleErrorPostReceive],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\taction: 'Get many calls',\n\t\t\t},\n\t\t],\n\t\tdefault: 'getAll',\n\t},\n];\n\nconst getFields: INodeProperties[] = [\n\t{\n\t\tdisplayName: 'Call to Get',\n\t\tname: 'call',\n\t\tdefault: {\n\t\t\tmode: 'list',\n\t\t\tvalue: '',\n\t\t},\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tresource: ['call'],\n\t\t\t\toperation: ['get'],\n\t\t\t},\n\t\t},\n\t\tmodes: [\n\t\t\t{\n\t\t\t\tdisplayName: 'From List',\n\t\t\t\tname: 'list',\n\t\t\t\ttype: 'list',\n\t\t\t\ttypeOptions: {\n\t\t\t\t\tsearchListMethod: 'getCalls',\n\t\t\t\t\tsearchable: true,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'By ID',\n\t\t\t\tname: 'id',\n\t\t\t\tplaceholder: 'e.g. 7782342274025937895',\n\t\t\t\ttype: 'string',\n\t\t\t\tvalidation: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: 'regex',\n\t\t\t\t\t\tproperties: {\n\t\t\t\t\t\t\tregex: '[0-9]{1,20}',\n\t\t\t\t\t\t\terrorMessage: 'Not a valid Gong Call ID',\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'By URL',\n\t\t\t\tname: 'url',\n\t\t\t\textractValue: {\n\t\t\t\t\ttype: 'regex',\n\t\t\t\t\tregex: 'https:\\\\/\\\\/[a-zA-Z0-9-]+\\\\.app\\\\.gong\\\\.io\\\\/call\\\\?id=([0-9]{1,20})',\n\t\t\t\t},\n\t\t\t\tplaceholder: 'e.g. https://subdomain.app.gong.io/call?id=7782342274025937895',\n\t\t\t\ttype: 'string',\n\t\t\t\tvalidation: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: 'regex',\n\t\t\t\t\t\tproperties: {\n\t\t\t\t\t\t\tregex: 'https:\\\\/\\\\/[a-zA-Z0-9-]+\\\\.app\\\\.gong\\\\.io\\\\/call\\\\?id=([0-9]{1,20})',\n\t\t\t\t\t\t\terrorMessage: 'Not a valid Gong URL',\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t],\n\t\trequired: true,\n\t\trouting: {\n\t\t\tsend: {\n\t\t\t\ttype: 'body',\n\t\t\t\tproperty: 'filter.callIds',\n\t\t\t\tpropertyInDotNotation: true,\n\t\t\t\tvalue: '={{ [$value] }}',\n\t\t\t},\n\t\t\toutput: {\n\t\t\t\tpostReceive: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: 'rootProperty',\n\t\t\t\t\t\tproperties: {\n\t\t\t\t\t\t\tproperty: 'calls',\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t},\n\t\ttype: 'resourceLocator',\n\t},\n\t{\n\t\tdisplayName: 'Options',\n\t\tname: 'options',\n\t\tdefault: {},\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tresource: ['call'],\n\t\t\t\toperation: ['get'],\n\t\t\t},\n\t\t},\n\t\toptions: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Call Data to Include',\n\t\t\t\tname: 'properties',\n\t\t\t\ttype: 'multiOptions',\n\t\t\t\tdefault: [],\n\t\t\t\tdescription:\n\t\t\t\t\t'The Call properties to include in the returned results. Choose from a list, or specify IDs using an <a href=\"https://docs.n8n.io/code-examples/expressions/\">expression</a>.',\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Action Items',\n\t\t\t\t\t\tvalue: 'pointsOfInterest',\n\t\t\t\t\t\tdescription: 'Call points of interest',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Audio and Video URLs',\n\t\t\t\t\t\tvalue: 'media',\n\t\t\t\t\t\tdescription: 'Audio and video URL of the call. The URLs will be available for 8 hours.',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Brief',\n\t\t\t\t\t\tvalue: 'brief',\n\t\t\t\t\t\tdescription: 'Spotlight call brief',\n\t\t\t\t\t\trouting: {\n\t\t\t\t\t\t\tsend: {\n\t\t\t\t\t\t\t\ttype: 'body',\n\t\t\t\t\t\t\t\tproperty: 'contentSelector.exposedFields.content.brief',\n\t\t\t\t\t\t\t\tpropertyInDotNotation: true,\n\t\t\t\t\t\t\t\tvalue: '={{ $value }}',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Comments',\n\t\t\t\t\t\tvalue: 'publicComments',\n\t\t\t\t\t\tdescription: 'Public comments made for this call',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Highlights',\n\t\t\t\t\t\tvalue: 'highlights',\n\t\t\t\t\t\tdescription: 'Call highlights',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Keypoints',\n\t\t\t\t\t\tvalue: 'keyPoints',\n\t\t\t\t\t\tdescription: 'Key points of the call',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Outcome',\n\t\t\t\t\t\tvalue: 'callOutcome',\n\t\t\t\t\t\tdescription: 'Outcome of the call',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Outline',\n\t\t\t\t\t\tvalue: 'outline',\n\t\t\t\t\t\tdescription: 'Call outline',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Participants',\n\t\t\t\t\t\tvalue: 'parties',\n\t\t\t\t\t\tdescription: 'Information about the participants of the call',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Structure',\n\t\t\t\t\t\tvalue: 'structure',\n\t\t\t\t\t\tdescription: 'Call agenda',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Topics',\n\t\t\t\t\t\tvalue: 'topics',\n\t\t\t\t\t\tdescription: 'Duration of call topics',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Trackers',\n\t\t\t\t\t\tvalue: 'trackers',\n\t\t\t\t\t\tdescription: 'Smart tracker and keyword tracker information for the call',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Transcript',\n\t\t\t\t\t\tvalue: 'transcript',\n\t\t\t\t\t\tdescription: 'Information about the participants',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\trouting: {\n\t\t\t\t\tsend: {\n\t\t\t\t\t\tpreSend: [\n\t\t\t\t\t\t\tasync function (\n\t\t\t\t\t\t\t\tthis: IExecuteSingleFunctions,\n\t\t\t\t\t\t\t\trequestOptions: IHttpRequestOptions,\n\t\t\t\t\t\t\t): Promise<IHttpRequestOptions> {\n\t\t\t\t\t\t\t\tconst contentProperties = [\n\t\t\t\t\t\t\t\t\t'pointsOfInterest',\n\t\t\t\t\t\t\t\t\t'brief',\n\t\t\t\t\t\t\t\t\t'highlights',\n\t\t\t\t\t\t\t\t\t'keyPoints',\n\t\t\t\t\t\t\t\t\t'outline',\n\t\t\t\t\t\t\t\t\t'callOutcome',\n\t\t\t\t\t\t\t\t\t'structure',\n\t\t\t\t\t\t\t\t\t'trackers',\n\t\t\t\t\t\t\t\t\t'topics',\n\t\t\t\t\t\t\t\t];\n\t\t\t\t\t\t\t\tconst exposedFieldsProperties = ['media', 'parties'];\n\t\t\t\t\t\t\t\tconst collaborationProperties = ['publicComments'];\n\n\t\t\t\t\t\t\t\tconst properties = this.getNodeParameter('options.properties') as string[];\n\t\t\t\t\t\t\t\tconst contentSelector = { exposedFields: {} } as any;\n\t\t\t\t\t\t\t\tfor (const property of properties) {\n\t\t\t\t\t\t\t\t\tif (exposedFieldsProperties.includes(property)) {\n\t\t\t\t\t\t\t\t\t\tcontentSelector.exposedFields[property] = true;\n\t\t\t\t\t\t\t\t\t} else if (contentProperties.includes(property)) {\n\t\t\t\t\t\t\t\t\t\tcontentSelector.exposedFields.content ??= {};\n\t\t\t\t\t\t\t\t\t\tcontentSelector.exposedFields.content[property] = true;\n\t\t\t\t\t\t\t\t\t} else if (collaborationProperties.includes(property)) {\n\t\t\t\t\t\t\t\t\t\tcontentSelector.exposedFields.collaboration ??= {};\n\t\t\t\t\t\t\t\t\t\tcontentSelector.exposedFields.collaboration[property] = true;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\trequestOptions.body ||= {};\n\t\t\t\t\t\t\t\tObject.assign(requestOptions.body, { contentSelector });\n\t\t\t\t\t\t\t\treturn requestOptions;\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t\toutput: {\n\t\t\t\t\t\tpostReceive: [\n\t\t\t\t\t\t\tasync function (\n\t\t\t\t\t\t\t\tthis: IExecuteSingleFunctions,\n\t\t\t\t\t\t\t\titems: INodeExecutionData[],\n\t\t\t\t\t\t\t\t_responseData: IN8nHttpFullResponse,\n\t\t\t\t\t\t\t): Promise<INodeExecutionData[]> {\n\t\t\t\t\t\t\t\tconst properties = this.getNodeParameter('options.properties') as string[];\n\t\t\t\t\t\t\t\tif (properties.includes('transcript')) {\n\t\t\t\t\t\t\t\t\tfor (const item of items) {\n\t\t\t\t\t\t\t\t\t\tconst callTranscripts = await gongApiPaginateRequest.call(\n\t\t\t\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t\t\t\t'POST',\n\t\t\t\t\t\t\t\t\t\t\t'/v2/calls/transcript',\n\t\t\t\t\t\t\t\t\t\t\t{ filter: { callIds: [(item.json.metaData as IDataObject).id] } },\n\t\t\t\t\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t\t\t\t\titem.index ?? 0,\n\t\t\t\t\t\t\t\t\t\t\t'callTranscripts',\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\titem.json.transcript = callTranscripts?.length\n\t\t\t\t\t\t\t\t\t\t\t? callTranscripts[0].transcript\n\t\t\t\t\t\t\t\t\t\t\t: [];\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\treturn items;\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t\tplaceholder: 'Add Option',\n\t\ttype: 'collection',\n\t},\n];\n\nconst getAllFields: INodeProperties[] = [\n\t{\n\t\tdisplayName: 'Return All',\n\t\tname: 'returnAll',\n\t\tdefault: false,\n\t\tdescription: 'Whether to return all results or only up to a given limit',\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tresource: ['call'],\n\t\t\t\toperation: ['getAll'],\n\t\t\t},\n\t\t},\n\t\trouting: {\n\t\t\tsend: {\n\t\t\t\tpaginate: '={{ $value }}',\n\t\t\t},\n\t\t\toperations: {\n\t\t\t\tpagination: getCursorPaginatorCalls(),\n\t\t\t},\n\t\t},\n\t\ttype: 'boolean',\n\t},\n\t{\n\t\tdisplayName: 'Limit',\n\t\tname: 'limit',\n\t\tdefault: 50,\n\t\tdescription: 'Max number of results to return',\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tresource: ['call'],\n\t\t\t\toperation: ['getAll'],\n\t\t\t\treturnAll: [false],\n\t\t\t},\n\t\t},\n\t\trouting: {\n\t\t\toutput: {\n\t\t\t\tpostReceive: [\n\t\t\t\t\tasync function (\n\t\t\t\t\t\tthis: IExecuteSingleFunctions,\n\t\t\t\t\t\titems: INodeExecutionData[],\n\t\t\t\t\t\t_response: IN8nHttpFullResponse,\n\t\t\t\t\t): Promise<INodeExecutionData[]> {\n\t\t\t\t\t\treturn extractCalls(items);\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: 'limit',\n\t\t\t\t\t\tproperties: {\n\t\t\t\t\t\t\tmaxResults: '={{ $value }}',\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t},\n\t\ttype: 'number',\n\t\ttypeOptions: {\n\t\t\tminValue: 1,\n\t\t},\n\t\tvalidateType: 'number',\n\t},\n\t{\n\t\tdisplayName: 'Filters',\n\t\tname: 'filters',\n\t\tdefault: {},\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tresource: ['call'],\n\t\t\t\toperation: ['getAll'],\n\t\t\t},\n\t\t},\n\t\toptions: [\n\t\t\t{\n\t\t\t\tdisplayName: 'After',\n\t\t\t\tname: 'fromDateTime',\n\t\t\t\tdefault: '',\n\t\t\t\tdescription:\n\t\t\t\t\t'Returns calls that started on or after the specified date and time. If not provided, list starts with earliest call. For web-conference calls recorded by Gong, the date denotes its scheduled time, otherwise, it denotes its actual start time.',\n\t\t\t\tplaceholder: 'e.g. 2018-02-18T02:30:00-07:00 or 2018-02-18T08:00:00Z',\n\t\t\t\trouting: {\n\t\t\t\t\tsend: {\n\t\t\t\t\t\ttype: 'body',\n\t\t\t\t\t\tproperty: 'filter.fromDateTime',\n\t\t\t\t\t\tpropertyInDotNotation: true,\n\t\t\t\t\t\tvalue: '={{ new Date($value).toISOString() }}',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\ttype: 'dateTime',\n\t\t\t\tvalidateType: 'dateTime',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Before',\n\t\t\t\tname: 'toDateTime',\n\t\t\t\tdefault: '',\n\t\t\t\tdescription:\n\t\t\t\t\t'Returns calls that started up to but excluding specified date and time. If not provided, list ends with most recent call. For web-conference calls recorded by Gong, the date denotes its scheduled time, otherwise, it denotes its actual start time.',\n\t\t\t\tplaceholder: 'e.g. 2018-02-18T02:30:00-07:00 or 2018-02-18T08:00:00Z',\n\t\t\t\trouting: {\n\t\t\t\t\tsend: {\n\t\t\t\t\t\ttype: 'body',\n\t\t\t\t\t\tproperty: 'filter.toDateTime',\n\t\t\t\t\t\tpropertyInDotNotation: true,\n\t\t\t\t\t\tvalue: '={{ new Date($value).toISOString() }}',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\ttype: 'dateTime',\n\t\t\t\tvalidateType: 'dateTime',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Workspace ID',\n\t\t\t\tname: 'workspaceId',\n\t\t\t\tdefault: '',\n\t\t\t\tdescription: 'Return only the calls belonging to this workspace',\n\t\t\t\tplaceholder: 'e.g. 623457276584334',\n\t\t\t\trouting: {\n\t\t\t\t\tsend: {\n\t\t\t\t\t\ttype: 'body',\n\t\t\t\t\t\tproperty: 'filter.workspaceId',\n\t\t\t\t\t\tpropertyInDotNotation: true,\n\t\t\t\t\t\tvalue: '={{ $value }}',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\ttype: 'string',\n\t\t\t\tvalidateType: 'number',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Call IDs',\n\t\t\t\tname: 'callIds',\n\t\t\t\tdefault: '',\n\t\t\t\tdescription: 'List of calls IDs to be filtered',\n\t\t\t\thint: 'Comma separated list of IDs, array of strings can be set in expression',\n\t\t\t\trouting: {\n\t\t\t\t\tsend: {\n\t\t\t\t\t\tpreSend: [\n\t\t\t\t\t\t\tasync function (\n\t\t\t\t\t\t\t\tthis: IExecuteSingleFunctions,\n\t\t\t\t\t\t\t\trequestOptions: IHttpRequestOptions,\n\t\t\t\t\t\t\t): Promise<IHttpRequestOptions> {\n\t\t\t\t\t\t\t\tconst callIdsParam = this.getNodeParameter('filters.callIds') as\n\t\t\t\t\t\t\t\t\t| number\n\t\t\t\t\t\t\t\t\t| number[]\n\t\t\t\t\t\t\t\t\t| string\n\t\t\t\t\t\t\t\t\t| string[];\n\t\t\t\t\t\t\t\tif (callIdsParam && !isValidNumberIds(callIdsParam)) {\n\t\t\t\t\t\t\t\t\tthrow new NodeApiError(this.getNode(), {\n\t\t\t\t\t\t\t\t\t\tmessage: 'Call IDs must be numeric',\n\t\t\t\t\t\t\t\t\t\tdescription: \"Double-check the value in the parameter 'Call IDs' and try again\",\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tconst callIds = Array.isArray(callIdsParam)\n\t\t\t\t\t\t\t\t\t? callIdsParam.map((x) => x.toString())\n\t\t\t\t\t\t\t\t\t: callIdsParam\n\t\t\t\t\t\t\t\t\t\t\t.toString()\n\t\t\t\t\t\t\t\t\t\t\t.split(',')\n\t\t\t\t\t\t\t\t\t\t\t.map((x) => x.trim());\n\n\t\t\t\t\t\t\t\trequestOptions.body ||= {};\n\t\t\t\t\t\t\t\t(requestOptions.body as IDataObject).filter ||= {};\n\t\t\t\t\t\t\t\tObject.assign((requestOptions.body as IDataObject).filter as IDataObject, {\n\t\t\t\t\t\t\t\t\tcallIds,\n\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\treturn requestOptions;\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tplaceholder: 'e.g. 7782342274025937895',\n\t\t\t\ttype: 'string',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Organizer',\n\t\t\t\tname: 'primaryUserIds',\n\t\t\t\tdefault: {\n\t\t\t\t\tmode: 'list',\n\t\t\t\t\tvalue: '',\n\t\t\t\t},\n\t\t\t\tdescription: 'Return only the calls hosted by the specified user',\n\t\t\t\tmodes: [\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'From List',\n\t\t\t\t\t\tname: 'list',\n\t\t\t\t\t\ttype: 'list',\n\t\t\t\t\t\ttypeOptions: {\n\t\t\t\t\t\t\tsearchListMethod: 'getUsers',\n\t\t\t\t\t\t\tsearchable: true,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'By ID',\n\t\t\t\t\t\tname: 'id',\n\t\t\t\t\t\tplaceholder: 'e.g. 7782342274025937895',\n\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\tvalidation: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttype: 'regex',\n\t\t\t\t\t\t\t\tproperties: {\n\t\t\t\t\t\t\t\t\tregex: '[0-9]{1,20}',\n\t\t\t\t\t\t\t\t\terrorMessage: 'Not a valid Gong User ID',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\trouting: {\n\t\t\t\t\tsend: {\n\t\t\t\t\t\ttype: 'body',\n\t\t\t\t\t\tproperty: 'filter.primaryUserIds',\n\t\t\t\t\t\tpropertyInDotNotation: true,\n\t\t\t\t\t\tvalue: '={{ [$value] }}',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\ttype: 'resourceLocator',\n\t\t\t},\n\t\t],\n\t\tplaceholder: 'Add Filter',\n\t\ttype: 'collection',\n\t},\n\t{\n\t\tdisplayName: 'Options',\n\t\tname: 'options',\n\t\tdefault: {},\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tresource: ['call'],\n\t\t\t\toperation: ['getAll'],\n\t\t\t},\n\t\t},\n\t\toptions: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Call Data to Include',\n\t\t\t\tname: 'properties',\n\t\t\t\ttype: 'multiOptions',\n\t\t\t\tdefault: [],\n\t\t\t\tdescription:\n\t\t\t\t\t'The Call properties to include in the returned results. Choose from a list, or specify IDs using an <a href=\"https://docs.n8n.io/code-examples/expressions/\">expression</a>.',\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Participants',\n\t\t\t\t\t\tvalue: 'parties',\n\t\t\t\t\t\tdescription: 'Information about the participants of the call',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Topics',\n\t\t\t\t\t\tvalue: 'topics',\n\t\t\t\t\t\tdescription: 'Information about the topics of the call',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\trouting: {\n\t\t\t\t\tsend: {\n\t\t\t\t\t\tpreSend: [\n\t\t\t\t\t\t\tasync function (\n\t\t\t\t\t\t\t\tthis: IExecuteSingleFunctions,\n\t\t\t\t\t\t\t\trequestOptions: IHttpRequestOptions,\n\t\t\t\t\t\t\t): Promise<IHttpRequestOptions> {\n\t\t\t\t\t\t\t\tconst contentProperties = ['topics'];\n\t\t\t\t\t\t\t\tconst exposedFieldsProperties = ['parties'];\n\n\t\t\t\t\t\t\t\tconst properties = this.getNodeParameter('options.properties') as string[];\n\t\t\t\t\t\t\t\tconst contentSelector = { exposedFields: {} } as any;\n\t\t\t\t\t\t\t\tfor (const property of properties) {\n\t\t\t\t\t\t\t\t\tif (exposedFieldsProperties.includes(property)) {\n\t\t\t\t\t\t\t\t\t\tcontentSelector.exposedFields[property] = true;\n\t\t\t\t\t\t\t\t\t} else if (contentProperties.includes(property)) {\n\t\t\t\t\t\t\t\t\t\tcontentSelector.exposedFields.content ??= {};\n\t\t\t\t\t\t\t\t\t\tcontentSelector.exposedFields.content[property] = true;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\trequestOptions.body ||= {};\n\t\t\t\t\t\t\t\tObject.assign(requestOptions.body, { contentSelector });\n\t\t\t\t\t\t\t\treturn requestOptions;\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t\tplaceholder: 'Add Option',\n\t\ttype: 'collection',\n\t},\n];\n\nexport const callFields: INodeProperties[] = [...getFields, ...getAllFields];\n"],"mappings":"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","names":[]}