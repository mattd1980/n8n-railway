{"version":3,"sources":["../../../nodes/Copper/Copper.node.ts"],"sourcesContent":["import type {\n\tIExecuteFunctions,\n\tIDataObject,\n\tINodeExecutionData,\n\tINodeType,\n\tINodeTypeDescription,\n} from 'n8n-workflow';\nimport { NodeConnectionTypes } from 'n8n-workflow';\n\nimport {\n\tcompanyFields,\n\tcompanyOperations,\n\tcustomerSourceFields,\n\tcustomerSourceOperations,\n\tleadFields,\n\tleadOperations,\n\topportunityFields,\n\topportunityOperations,\n\tpersonFields,\n\tpersonOperations,\n\tprojectFields,\n\tprojectOperations,\n\ttaskFields,\n\ttaskOperations,\n\tuserFields,\n\tuserOperations,\n} from './descriptions';\nimport {\n\tadjustCompanyFields,\n\tadjustLeadFields,\n\tadjustPersonFields,\n\tadjustTaskFields,\n\tcopperApiRequest,\n\thandleListing,\n} from './GenericFunctions';\n\nexport class Copper implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'Copper',\n\t\tname: 'copper',\n\t\ticon: 'file:copper.svg',\n\t\tgroup: ['transform'],\n\t\tversion: 1,\n\t\tsubtitle: '={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}',\n\t\tdescription: 'Consume the Copper API',\n\t\tdefaults: {\n\t\t\tname: 'Copper',\n\t\t},\n\t\tusableAsTool: true,\n\t\tinputs: [NodeConnectionTypes.Main],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tcredentials: [\n\t\t\t{\n\t\t\t\tname: 'copperApi',\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Resource',\n\t\t\t\tname: 'resource',\n\t\t\t\ttype: 'options',\n\t\t\t\tnoDataExpression: true,\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Company',\n\t\t\t\t\t\tvalue: 'company',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Customer Source',\n\t\t\t\t\t\tvalue: 'customerSource',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Lead',\n\t\t\t\t\t\tvalue: 'lead',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Opportunity',\n\t\t\t\t\t\tvalue: 'opportunity',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Person',\n\t\t\t\t\t\tvalue: 'person',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Project',\n\t\t\t\t\t\tvalue: 'project',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Task',\n\t\t\t\t\t\tvalue: 'task',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'User',\n\t\t\t\t\t\tvalue: 'user',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'company',\n\t\t\t},\n\t\t\t...companyOperations,\n\t\t\t...companyFields,\n\t\t\t...customerSourceOperations,\n\t\t\t...customerSourceFields,\n\t\t\t...leadOperations,\n\t\t\t...leadFields,\n\t\t\t...opportunityOperations,\n\t\t\t...opportunityFields,\n\t\t\t...personOperations,\n\t\t\t...personFields,\n\t\t\t...projectOperations,\n\t\t\t...projectFields,\n\t\t\t...taskOperations,\n\t\t\t...taskFields,\n\t\t\t...userOperations,\n\t\t\t...userFields,\n\t\t],\n\t};\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t\tconst items = this.getInputData();\n\t\tconst returnData: INodeExecutionData[] = [];\n\n\t\tconst resource = this.getNodeParameter('resource', 0);\n\t\tconst operation = this.getNodeParameter('operation', 0);\n\n\t\tlet responseData;\n\n\t\tfor (let i = 0; i < items.length; i++) {\n\t\t\ttry {\n\t\t\t\tif (resource === 'company') {\n\t\t\t\t\t// **********************************************************************\n\t\t\t\t\t//                                company\n\t\t\t\t\t// **********************************************************************\n\n\t\t\t\t\tif (operation === 'create') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//             company: create\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\t// https://developer.copper.com/companies/create-a-new-company.html\n\n\t\t\t\t\t\tconst body: IDataObject = {\n\t\t\t\t\t\t\tname: this.getNodeParameter('name', i),\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i);\n\n\t\t\t\t\t\tif (Object.keys(additionalFields).length) {\n\t\t\t\t\t\t\tObject.assign(body, adjustCompanyFields(additionalFields));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await copperApiRequest.call(this, 'POST', '/companies', body);\n\t\t\t\t\t} else if (operation === 'delete') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//             company: delete\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\t// https://developer.copper.com/companies/delete-a-company.html\n\n\t\t\t\t\t\tconst companyId = this.getNodeParameter('companyId', i);\n\n\t\t\t\t\t\tresponseData = await copperApiRequest.call(this, 'DELETE', `/companies/${companyId}`);\n\t\t\t\t\t} else if (operation === 'get') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//               company: get\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\t// https://developer.copper.com/companies/fetch-a-company-by-id.html\n\n\t\t\t\t\t\tconst companyId = this.getNodeParameter('companyId', i);\n\n\t\t\t\t\t\tresponseData = await copperApiRequest.call(this, 'GET', `/companies/${companyId}`);\n\t\t\t\t\t} else if (operation === 'getAll') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//             company: getAll\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\t// https://developer.copper.com/companies/list-companies-search.html\n\n\t\t\t\t\t\tconst body: IDataObject = {};\n\t\t\t\t\t\tconst filterFields = this.getNodeParameter('filterFields', i) as IDataObject;\n\n\t\t\t\t\t\tif (Object.keys(filterFields).length) {\n\t\t\t\t\t\t\tObject.assign(body, filterFields);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await handleListing.call(this, 'POST', '/companies/search', body);\n\t\t\t\t\t} else if (operation === 'update') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//             company: update\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\t// https://developer.copper.com/companies/update-a-company.html\n\n\t\t\t\t\t\tconst companyId = this.getNodeParameter('companyId', i);\n\n\t\t\t\t\t\tconst body: IDataObject = {};\n\t\t\t\t\t\tconst updateFields = this.getNodeParameter('updateFields', i);\n\n\t\t\t\t\t\tif (Object.keys(updateFields).length) {\n\t\t\t\t\t\t\tObject.assign(body, adjustCompanyFields(updateFields));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await copperApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'PUT',\n\t\t\t\t\t\t\t`/companies/${companyId}`,\n\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t} else if (resource === 'customerSource') {\n\t\t\t\t\t// **********************************************************************\n\t\t\t\t\t//                            customerSource\n\t\t\t\t\t// **********************************************************************\n\n\t\t\t\t\tif (operation === 'getAll') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//        customerSource: getAll\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tresponseData = await handleListing.call(this, 'GET', '/customer_sources');\n\t\t\t\t\t}\n\t\t\t\t} else if (resource === 'lead') {\n\t\t\t\t\t// **********************************************************************\n\t\t\t\t\t//                                  lead\n\t\t\t\t\t// **********************************************************************\n\n\t\t\t\t\tif (operation === 'create') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//               lead: create\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\t// https://developer.copper.com/leads/create-a-new-lead.html\n\n\t\t\t\t\t\tconst body: IDataObject = {\n\t\t\t\t\t\t\tname: this.getNodeParameter('name', i),\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i);\n\n\t\t\t\t\t\tif (Object.keys(additionalFields).length) {\n\t\t\t\t\t\t\tObject.assign(body, adjustLeadFields(additionalFields));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await copperApiRequest.call(this, 'POST', '/leads', body);\n\t\t\t\t\t} else if (operation === 'delete') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//               lead: delete\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\t// https://developer.copper.com/leads/delete-a-lead.html\n\n\t\t\t\t\t\tconst leadId = this.getNodeParameter('leadId', i);\n\n\t\t\t\t\t\tresponseData = await copperApiRequest.call(this, 'DELETE', `/leads/${leadId}`);\n\t\t\t\t\t} else if (operation === 'get') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//                lead: get\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\t// https://developer.copper.com/leads/fetch-a-lead-by-id.html\n\n\t\t\t\t\t\tconst leadId = this.getNodeParameter('leadId', i);\n\n\t\t\t\t\t\tresponseData = await copperApiRequest.call(this, 'GET', `/leads/${leadId}`);\n\t\t\t\t\t} else if (operation === 'getAll') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//               lead: getAll\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst body: IDataObject = {};\n\t\t\t\t\t\tconst filterFields = this.getNodeParameter('filterFields', i) as IDataObject;\n\n\t\t\t\t\t\tif (Object.keys(filterFields).length) {\n\t\t\t\t\t\t\tObject.assign(body, filterFields);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await handleListing.call(this, 'POST', '/leads/search', body);\n\t\t\t\t\t} else if (operation === 'update') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//               lead: update\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\t// https://developer.copper.com/leads/update-a-lead.html\n\n\t\t\t\t\t\tconst leadId = this.getNodeParameter('leadId', i);\n\n\t\t\t\t\t\tconst body: IDataObject = {};\n\t\t\t\t\t\tconst updateFields = this.getNodeParameter('updateFields', i);\n\n\t\t\t\t\t\tif (Object.keys(updateFields).length) {\n\t\t\t\t\t\t\tObject.assign(body, adjustLeadFields(updateFields));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await copperApiRequest.call(this, 'PUT', `/leads/${leadId}`, body);\n\t\t\t\t\t}\n\t\t\t\t} else if (resource === 'opportunity') {\n\t\t\t\t\t// **********************************************************************\n\t\t\t\t\t//                              opportunity\n\t\t\t\t\t// **********************************************************************\n\n\t\t\t\t\tif (operation === 'create') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//           opportunity: create\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\t// https://developer.copper.com/opportunities/create-a-new-opportunity.html\n\n\t\t\t\t\t\tconst body: IDataObject = {\n\t\t\t\t\t\t\tname: this.getNodeParameter('name', i),\n\t\t\t\t\t\t\tcustomer_source_id: this.getNodeParameter('customerSourceId', i),\n\t\t\t\t\t\t\tprimary_contact_id: this.getNodeParameter('primaryContactId', i),\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tresponseData = await copperApiRequest.call(this, 'POST', '/opportunities', body);\n\t\t\t\t\t} else if (operation === 'delete') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//           opportunity: delete\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\t// https://developer.copper.com/opportunities/delete-an-opportunity.html\n\n\t\t\t\t\t\tconst opportunityId = this.getNodeParameter('opportunityId', i);\n\n\t\t\t\t\t\tresponseData = await copperApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'DELETE',\n\t\t\t\t\t\t\t`/opportunities/${opportunityId}`,\n\t\t\t\t\t\t);\n\t\t\t\t\t} else if (operation === 'get') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//             opportunity: get\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\t// https://developer.copper.com/opportunities/fetch-an-opportunity-by-id.html\n\n\t\t\t\t\t\tconst opportunityId = this.getNodeParameter('opportunityId', i);\n\n\t\t\t\t\t\tresponseData = await copperApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t`/opportunities/${opportunityId}`,\n\t\t\t\t\t\t);\n\t\t\t\t\t} else if (operation === 'getAll') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//           opportunity: getAll\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\t// https://developer.copper.com/opportunities/list-opportunities-search.html\n\n\t\t\t\t\t\tconst body: IDataObject = {};\n\t\t\t\t\t\tconst filterFields = this.getNodeParameter('filterFields', i) as IDataObject;\n\n\t\t\t\t\t\tif (Object.keys(filterFields).length) {\n\t\t\t\t\t\t\tObject.assign(body, filterFields);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await handleListing.call(this, 'POST', '/opportunities/search', body);\n\t\t\t\t\t} else if (operation === 'update') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//           opportunity: update\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\t// https://developer.copper.com/opportunities/update-an-opportunity.html\n\n\t\t\t\t\t\tconst opportunityId = this.getNodeParameter('opportunityId', i);\n\n\t\t\t\t\t\tconst body: IDataObject = {};\n\t\t\t\t\t\tconst updateFields = this.getNodeParameter('updateFields', i);\n\n\t\t\t\t\t\tif (Object.keys(updateFields).length) {\n\t\t\t\t\t\t\tObject.assign(body, updateFields);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await copperApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'PUT',\n\t\t\t\t\t\t\t`/opportunities/${opportunityId}`,\n\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t} else if (resource === 'person') {\n\t\t\t\t\t// **********************************************************************\n\t\t\t\t\t//                                 person\n\t\t\t\t\t// **********************************************************************\n\n\t\t\t\t\tif (operation === 'create') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//              person: create\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\t// https://developer.copper.com/people/create-a-new-person.html\n\n\t\t\t\t\t\tconst body: IDataObject = {\n\t\t\t\t\t\t\tname: this.getNodeParameter('name', i),\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i);\n\n\t\t\t\t\t\tif (Object.keys(additionalFields).length) {\n\t\t\t\t\t\t\tObject.assign(body, adjustPersonFields(additionalFields));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await copperApiRequest.call(this, 'POST', '/people', body);\n\t\t\t\t\t} else if (operation === 'delete') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//              person: delete\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\t// https://developer.copper.com/people/delete-a-person.html\n\n\t\t\t\t\t\tconst personId = this.getNodeParameter('personId', i);\n\n\t\t\t\t\t\tresponseData = await copperApiRequest.call(this, 'DELETE', `/people/${personId}`);\n\t\t\t\t\t} else if (operation === 'get') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//               person: get\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\t// https://developer.copper.com/people/fetch-a-person-by-id.html\n\n\t\t\t\t\t\tconst personId = this.getNodeParameter('personId', i);\n\n\t\t\t\t\t\tresponseData = await copperApiRequest.call(this, 'GET', `/people/${personId}`);\n\t\t\t\t\t} else if (operation === 'getAll') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//              person: getAll\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst body: IDataObject = {};\n\t\t\t\t\t\tconst filterFields = this.getNodeParameter('filterFields', i) as IDataObject;\n\n\t\t\t\t\t\tif (Object.keys(filterFields).length) {\n\t\t\t\t\t\t\tObject.assign(body, filterFields);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await handleListing.call(this, 'POST', '/people/search', body);\n\t\t\t\t\t} else if (operation === 'update') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//              person: update\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\t// https://developer.copper.com/people/update-a-person.html\n\n\t\t\t\t\t\tconst personId = this.getNodeParameter('personId', i);\n\n\t\t\t\t\t\tconst body: IDataObject = {};\n\t\t\t\t\t\tconst updateFields = this.getNodeParameter('updateFields', i);\n\n\t\t\t\t\t\tif (Object.keys(updateFields).length) {\n\t\t\t\t\t\t\tObject.assign(body, adjustPersonFields(updateFields));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await copperApiRequest.call(this, 'PUT', `/people/${personId}`, body);\n\t\t\t\t\t}\n\t\t\t\t} else if (resource === 'project') {\n\t\t\t\t\t// **********************************************************************\n\t\t\t\t\t//                                project\n\t\t\t\t\t// **********************************************************************\n\n\t\t\t\t\tif (operation === 'create') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//             project: create\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\t// https://developer.copper.com/projects/create-a-new-project.html\n\n\t\t\t\t\t\tconst body: IDataObject = {\n\t\t\t\t\t\t\tname: this.getNodeParameter('name', i),\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i);\n\n\t\t\t\t\t\tif (Object.keys(additionalFields).length) {\n\t\t\t\t\t\t\tObject.assign(body, additionalFields);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await copperApiRequest.call(this, 'POST', '/projects', body);\n\t\t\t\t\t} else if (operation === 'delete') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//             project: delete\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\t// https://developer.copper.com/projects/delete-a-project.html\n\n\t\t\t\t\t\tconst projectId = this.getNodeParameter('projectId', i);\n\n\t\t\t\t\t\tresponseData = await copperApiRequest.call(this, 'DELETE', `/projects/${projectId}`);\n\t\t\t\t\t} else if (operation === 'get') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//               project: get\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\t// https://developer.copper.com/projects/fetch-a-project-by-id.html\n\n\t\t\t\t\t\tconst projectId = this.getNodeParameter('projectId', i);\n\n\t\t\t\t\t\tresponseData = await copperApiRequest.call(this, 'GET', `/projects/${projectId}`);\n\t\t\t\t\t} else if (operation === 'getAll') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//             project: getAll\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\t// https://developer.copper.com/projects/list-projects-search.html\n\n\t\t\t\t\t\tconst body: IDataObject = {};\n\t\t\t\t\t\tconst filterFields = this.getNodeParameter('filterFields', i) as IDataObject;\n\n\t\t\t\t\t\tif (Object.keys(filterFields).length) {\n\t\t\t\t\t\t\tObject.assign(body, filterFields);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await handleListing.call(this, 'POST', '/projects/search', body);\n\t\t\t\t\t} else if (operation === 'update') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//             project: update\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\t// https://developer.copper.com/projects/update-a-project.html\n\n\t\t\t\t\t\tconst projectId = this.getNodeParameter('projectId', i);\n\n\t\t\t\t\t\tconst body: IDataObject = {};\n\t\t\t\t\t\tconst updateFields = this.getNodeParameter('updateFields', i);\n\n\t\t\t\t\t\tif (Object.keys(updateFields).length) {\n\t\t\t\t\t\t\tObject.assign(body, updateFields);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await copperApiRequest.call(this, 'PUT', `/projects/${projectId}`, body);\n\t\t\t\t\t}\n\t\t\t\t} else if (resource === 'task') {\n\t\t\t\t\t// **********************************************************************\n\t\t\t\t\t//                                  task\n\t\t\t\t\t// **********************************************************************\n\n\t\t\t\t\tif (operation === 'create') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//               task: create\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\t// https://developer.copper.com/tasks/create-a-new-task.html\n\n\t\t\t\t\t\tconst body: IDataObject = {\n\t\t\t\t\t\t\tname: this.getNodeParameter('name', i),\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i);\n\n\t\t\t\t\t\tif (Object.keys(additionalFields).length) {\n\t\t\t\t\t\t\tObject.assign(body, additionalFields);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await copperApiRequest.call(this, 'POST', '/tasks', body);\n\t\t\t\t\t} else if (operation === 'delete') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//               task: delete\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\t// https://developer.copper.com/tasks/delete-a-task.html\n\n\t\t\t\t\t\tconst taskId = this.getNodeParameter('taskId', i);\n\n\t\t\t\t\t\tresponseData = await copperApiRequest.call(this, 'DELETE', `/tasks/${taskId}`);\n\t\t\t\t\t} else if (operation === 'get') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//                task: get\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\t// https://developer.copper.com/tasks/fetch-a-task-by-id.html\n\n\t\t\t\t\t\tconst taskId = this.getNodeParameter('taskId', i);\n\n\t\t\t\t\t\tresponseData = await copperApiRequest.call(this, 'GET', `/tasks/${taskId}`);\n\t\t\t\t\t} else if (operation === 'getAll') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//               task: getAll\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\t// https://developer.copper.com/tasks/list-tasks-search.html\n\n\t\t\t\t\t\tconst body: IDataObject = {};\n\t\t\t\t\t\tconst filterFields = this.getNodeParameter('filterFields', i) as IDataObject;\n\n\t\t\t\t\t\tif (Object.keys(filterFields).length) {\n\t\t\t\t\t\t\tObject.assign(body, adjustTaskFields(filterFields));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await handleListing.call(this, 'POST', '/tasks/search', body);\n\t\t\t\t\t} else if (operation === 'update') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//               task: update\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\t// https://developer.copper.com/tasks/update-a-task.html\n\n\t\t\t\t\t\tconst taskId = this.getNodeParameter('taskId', i);\n\n\t\t\t\t\t\tconst body: IDataObject = {};\n\t\t\t\t\t\tconst updateFields = this.getNodeParameter('updateFields', i);\n\n\t\t\t\t\t\tif (Object.keys(updateFields).length) {\n\t\t\t\t\t\t\tObject.assign(body, updateFields);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await copperApiRequest.call(this, 'PUT', `/tasks/${taskId}`, body);\n\t\t\t\t\t}\n\t\t\t\t} else if (resource === 'user') {\n\t\t\t\t\t// **********************************************************************\n\t\t\t\t\t//                            user\n\t\t\t\t\t// **********************************************************************\n\n\t\t\t\t\tif (operation === 'getAll') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//              user: getAll\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tresponseData = await handleListing.call(this, 'POST', '/users/search');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\treturnData.push({ error: error.toString(), json: {} });\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tthrow error;\n\t\t\t}\n\n\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t{ itemData: { item: i } },\n\t\t\t);\n\t\t\treturnData.push(...executionData);\n\t\t}\n\n\t\treturn [returnData];\n\t}\n}\n"],"mappings":"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","names":[]}