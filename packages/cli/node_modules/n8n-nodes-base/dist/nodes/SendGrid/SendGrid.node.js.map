{"version":3,"sources":["../../../nodes/SendGrid/SendGrid.node.ts"],"sourcesContent":["import moment from 'moment-timezone';\nimport {\n\tNodeConnectionTypes,\n\ttype IDataObject,\n\ttype IExecuteFunctions,\n\ttype IHttpRequestMethods,\n\ttype ILoadOptionsFunctions,\n\ttype INodeExecutionData,\n\ttype INodePropertyOptions,\n\ttype INodeType,\n\ttype INodeTypeDescription,\n} from 'n8n-workflow';\n\nimport { contactFields, contactOperations } from './ContactDescription';\nimport { sendGridApiRequest, sendGridApiRequestAllItems } from './GenericFunctions';\nimport { listFields, listOperations } from './ListDescription';\nimport type { SendMailBody } from './MailDescription';\nimport { mailFields, mailOperations } from './MailDescription';\n\nexport class SendGrid implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'SendGrid',\n\t\tname: 'sendGrid',\n\t\ticon: 'file:sendGrid.svg',\n\t\tgroup: ['transform'],\n\t\tversion: 1,\n\t\tsubtitle: '={{$parameter[\"operation\"] + \":\" + $parameter[\"resource\"]}}',\n\t\tdescription: 'Consume SendGrid API',\n\t\tdefaults: {\n\t\t\tname: 'SendGrid',\n\t\t},\n\t\tusableAsTool: true,\n\t\tinputs: [NodeConnectionTypes.Main],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tcredentials: [\n\t\t\t{\n\t\t\t\tname: 'sendGridApi',\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t],\n\t\tproperties: [\n\t\t\t// Node properties which the user gets displayed and\n\t\t\t// can change on the node.\n\t\t\t{\n\t\t\t\tdisplayName: 'Resource',\n\t\t\t\tname: 'resource',\n\t\t\t\ttype: 'options',\n\t\t\t\tnoDataExpression: true,\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Contact',\n\t\t\t\t\t\tvalue: 'contact',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'List',\n\t\t\t\t\t\tvalue: 'list',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Mail',\n\t\t\t\t\t\tvalue: 'mail',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'list',\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t\t...listOperations,\n\t\t\t...listFields,\n\t\t\t...contactOperations,\n\t\t\t...contactFields,\n\t\t\t...mailOperations,\n\t\t\t...mailFields,\n\t\t],\n\t};\n\n\tmethods = {\n\t\tloadOptions: {\n\t\t\t// Get custom fields to display to user so that they can select them easily\n\t\t\tasync getCustomFields(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst returnData: INodePropertyOptions[] = [];\n\t\t\t\tconst { custom_fields } = await sendGridApiRequest.call(\n\t\t\t\t\tthis,\n\t\t\t\t\t'/marketing/field_definitions',\n\t\t\t\t\t'GET',\n\t\t\t\t\t{},\n\t\t\t\t\t{},\n\t\t\t\t);\n\t\t\t\tif (custom_fields !== undefined) {\n\t\t\t\t\tfor (const customField of custom_fields) {\n\t\t\t\t\t\treturnData.push({\n\t\t\t\t\t\t\tname: customField.name,\n\t\t\t\t\t\t\tvalue: customField.id,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn returnData;\n\t\t\t},\n\t\t\t// Get lists to display to user so that they can select them easily\n\t\t\tasync getListIds(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst returnData: INodePropertyOptions[] = [];\n\t\t\t\tconst lists = await sendGridApiRequestAllItems.call(\n\t\t\t\t\tthis,\n\t\t\t\t\t'/marketing/lists',\n\t\t\t\t\t'GET',\n\t\t\t\t\t'result',\n\t\t\t\t\t{},\n\t\t\t\t\t{},\n\t\t\t\t);\n\t\t\t\tfor (const list of lists) {\n\t\t\t\t\treturnData.push({\n\t\t\t\t\t\tname: list.name,\n\t\t\t\t\t\tvalue: list.id,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn returnData;\n\t\t\t},\n\t\t\tasync getTemplateIds(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst responseData = await sendGridApiRequest.call(\n\t\t\t\t\tthis,\n\t\t\t\t\t'/templates',\n\t\t\t\t\t'GET',\n\t\t\t\t\t{},\n\t\t\t\t\t{ generations: 'dynamic' },\n\t\t\t\t);\n\t\t\t\treturn responseData.templates.map(({ id, name }: { id: string; name: string }) => ({\n\t\t\t\t\tname,\n\t\t\t\t\tvalue: id,\n\t\t\t\t}));\n\t\t\t},\n\t\t},\n\t};\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t\tconst items = this.getInputData();\n\t\tconst length = items.length;\n\t\tconst qs: IDataObject = {};\n\t\tlet responseData;\n\t\tconst timezone = this.getTimezone();\n\t\tconst returnData: INodeExecutionData[] = [];\n\t\tconst resource = this.getNodeParameter('resource', 0);\n\t\tconst operation = this.getNodeParameter('operation', 0);\n\t\t// https://sendgrid.com/docs/api-reference/\n\t\tif (resource === 'contact') {\n\t\t\tif (operation === 'getAll') {\n\t\t\t\tfor (let i = 0; i < length; i++) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', i);\n\t\t\t\t\t\tconst filters = this.getNodeParameter('filters', i);\n\t\t\t\t\t\tlet endpoint = '/marketing/contacts';\n\t\t\t\t\t\tlet method: IHttpRequestMethods = 'GET';\n\t\t\t\t\t\tconst body: IDataObject = {};\n\t\t\t\t\t\tif (filters.query && filters.query !== '') {\n\t\t\t\t\t\t\tendpoint = '/marketing/contacts/search';\n\t\t\t\t\t\t\tmethod = 'POST';\n\t\t\t\t\t\t\tObject.assign(body, { query: filters.query });\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresponseData = await sendGridApiRequestAllItems.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\tendpoint,\n\t\t\t\t\t\t\tmethod,\n\t\t\t\t\t\t\t'result',\n\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tif (!returnAll) {\n\t\t\t\t\t\t\tconst limit = this.getNodeParameter('limit', i);\n\t\t\t\t\t\t\tresponseData = responseData.splice(0, limit);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\t\tthis.helpers.returnJsonArray({ error: error.message }),\n\t\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow error;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (operation === 'get') {\n\t\t\t\tconst by = this.getNodeParameter('by', 0) as string;\n\t\t\t\tlet endpoint;\n\t\t\t\tlet method: IHttpRequestMethods;\n\t\t\t\tconst body: IDataObject = {};\n\t\t\t\tfor (let i = 0; i < length; i++) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (by === 'id') {\n\t\t\t\t\t\t\tmethod = 'GET';\n\t\t\t\t\t\t\tconst contactId = this.getNodeParameter('contactId', i) as string;\n\t\t\t\t\t\t\tendpoint = `/marketing/contacts/${contactId}`;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst email = this.getNodeParameter('email', i) as string;\n\t\t\t\t\t\t\tendpoint = '/marketing/contacts/search';\n\t\t\t\t\t\t\tmethod = 'POST';\n\t\t\t\t\t\t\tObject.assign(body, { query: `email LIKE '${email}' ` });\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresponseData = await sendGridApiRequest.call(this, endpoint, method, body, qs);\n\t\t\t\t\t\tresponseData = responseData.result || responseData;\n\t\t\t\t\t\tif (Array.isArray(responseData)) {\n\t\t\t\t\t\t\tresponseData = responseData[0];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\t\tthis.helpers.returnJsonArray({ error: error.message }),\n\t\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow error;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (operation === 'upsert') {\n\t\t\t\ttry {\n\t\t\t\t\tconst contacts = [];\n\t\t\t\t\tlet lists;\n\t\t\t\t\tfor (let i = 0; i < length; i++) {\n\t\t\t\t\t\tconst email = this.getNodeParameter('email', i) as string;\n\t\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i);\n\t\t\t\t\t\tconst contact: IDataObject = {\n\t\t\t\t\t\t\temail,\n\t\t\t\t\t\t};\n\t\t\t\t\t\tif (additionalFields.addressUi) {\n\t\t\t\t\t\t\tconst addressValues = (additionalFields.addressUi as IDataObject)\n\t\t\t\t\t\t\t\t.addressValues as IDataObject;\n\t\t\t\t\t\t\tconst addressLine1 = addressValues.address1 as string;\n\t\t\t\t\t\t\tconst addressLine2 = addressValues.address2 as string;\n\t\t\t\t\t\t\tif (addressLine2) {\n\t\t\t\t\t\t\t\tObject.assign(contact, { address_line_2: addressLine2 });\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tObject.assign(contact, { address_line_1: addressLine1 });\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (additionalFields.city) {\n\t\t\t\t\t\t\tconst city = additionalFields.city as string;\n\t\t\t\t\t\t\tObject.assign(contact, { city });\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (additionalFields.country) {\n\t\t\t\t\t\t\tconst country = additionalFields.country as string;\n\t\t\t\t\t\t\tObject.assign(contact, { country });\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (additionalFields.firstName) {\n\t\t\t\t\t\t\tconst firstName = additionalFields.firstName as string;\n\t\t\t\t\t\t\tObject.assign(contact, { first_name: firstName });\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (additionalFields.lastName) {\n\t\t\t\t\t\t\tconst lastName = additionalFields.lastName as string;\n\t\t\t\t\t\t\tObject.assign(contact, { last_name: lastName });\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (additionalFields.postalCode) {\n\t\t\t\t\t\t\tconst postalCode = additionalFields.postalCode as string;\n\t\t\t\t\t\t\tObject.assign(contact, { postal_code: postalCode });\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (additionalFields.stateProvinceRegion) {\n\t\t\t\t\t\t\tconst stateProvinceRegion = additionalFields.stateProvinceRegion as string;\n\t\t\t\t\t\t\tObject.assign(contact, { state_province_region: stateProvinceRegion });\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (additionalFields.alternateEmails) {\n\t\t\t\t\t\t\tconst alternateEmails = (additionalFields.alternateEmails as string)\n\t\t\t\t\t\t\t\t.split(',')\n\t\t\t\t\t\t\t\t.filter((mail) => !!mail);\n\t\t\t\t\t\t\tif (alternateEmails.length !== 0) {\n\t\t\t\t\t\t\t\tObject.assign(contact, { alternate_emails: alternateEmails });\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (additionalFields.listIdsUi) {\n\t\t\t\t\t\t\tconst listIdValues = (additionalFields.listIdsUi as IDataObject)\n\t\t\t\t\t\t\t\t.listIdValues as IDataObject;\n\t\t\t\t\t\t\tconst listIds = listIdValues.listIds as IDataObject[];\n\t\t\t\t\t\t\tlists = listIds;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (additionalFields.customFieldsUi) {\n\t\t\t\t\t\t\tconst customFields = (additionalFields.customFieldsUi as IDataObject)\n\t\t\t\t\t\t\t\t.customFieldValues as IDataObject[];\n\t\t\t\t\t\t\tif (customFields) {\n\t\t\t\t\t\t\t\tconst data = customFields.reduce(\n\t\t\t\t\t\t\t\t\t(obj, value) => Object.assign(obj, { [`${value.fieldId}`]: value.fieldValue }),\n\t\t\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tObject.assign(contact, { custom_fields: data });\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcontacts.push(contact);\n\t\t\t\t\t}\n\t\t\t\t\tresponseData = await sendGridApiRequest.call(\n\t\t\t\t\t\tthis,\n\t\t\t\t\t\t'/marketing/contacts',\n\t\t\t\t\t\t'PUT',\n\t\t\t\t\t\t{ list_ids: lists, contacts },\n\t\t\t\t\t\tqs,\n\t\t\t\t\t);\n\t\t\t\t\treturnData.push(responseData as INodeExecutionData);\n\t\t\t\t} catch (error) {\n\t\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\t\treturnData.push({ json: { error: error.message } });\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow error;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (operation === 'delete') {\n\t\t\t\tfor (let i = 0; i < length; i++) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst deleteAll = this.getNodeParameter('deleteAll', i) as boolean;\n\t\t\t\t\t\tif (deleteAll) {\n\t\t\t\t\t\t\tqs.delete_all_contacts = 'true';\n\t\t\t\t\t\t}\n\t\t\t\t\t\tqs.ids = (this.getNodeParameter('ids', i) as string).replace(/\\s/g, '');\n\t\t\t\t\t\tresponseData = await sendGridApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'/marketing/contacts',\n\t\t\t\t\t\t\t'DELETE',\n\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\t\tthis.helpers.returnJsonArray({ error: error.message }),\n\t\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow error;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (resource === 'list') {\n\t\t\tif (operation === 'getAll') {\n\t\t\t\tfor (let i = 0; i < length; i++) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', i);\n\t\t\t\t\t\tresponseData = await sendGridApiRequestAllItems.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'/marketing/lists',\n\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t'result',\n\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tif (!returnAll) {\n\t\t\t\t\t\t\tconst limit = this.getNodeParameter('limit', i);\n\t\t\t\t\t\t\tresponseData = responseData.splice(0, limit);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\t\tthis.helpers.returnJsonArray({ error: error.message }),\n\t\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow error;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (operation === 'get') {\n\t\t\t\tfor (let i = 0; i < length; i++) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst listId = this.getNodeParameter('listId', i) as string;\n\t\t\t\t\t\tqs.contact_sample = this.getNodeParameter('contactSample', i) as boolean;\n\t\t\t\t\t\tresponseData = await sendGridApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t`/marketing/lists/${listId}`,\n\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\t\tthis.helpers.returnJsonArray({ error: error.message }),\n\t\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow error;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (operation === 'create') {\n\t\t\t\tfor (let i = 0; i < length; i++) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst name = this.getNodeParameter('name', i) as string;\n\t\t\t\t\t\tresponseData = await sendGridApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'/marketing/lists',\n\t\t\t\t\t\t\t'POST',\n\t\t\t\t\t\t\t{ name },\n\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\t\tthis.helpers.returnJsonArray({ error: error.message }),\n\t\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow error;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (operation === 'delete') {\n\t\t\t\tfor (let i = 0; i < length; i++) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst listId = this.getNodeParameter('listId', i) as string;\n\t\t\t\t\t\tqs.delete_contacts = this.getNodeParameter('deleteContacts', i) as boolean;\n\t\t\t\t\t\tresponseData = await sendGridApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t`/marketing/lists/${listId}`,\n\t\t\t\t\t\t\t'DELETE',\n\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tresponseData = { success: true };\n\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData),\n\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\t\tthis.helpers.returnJsonArray({ error: error.message }),\n\t\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow error;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (operation === 'update') {\n\t\t\t\tfor (let i = 0; i < length; i++) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst name = this.getNodeParameter('name', i) as string;\n\t\t\t\t\t\tconst listId = this.getNodeParameter('listId', i) as string;\n\t\t\t\t\t\tresponseData = await sendGridApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t`/marketing/lists/${listId}`,\n\t\t\t\t\t\t\t'PATCH',\n\t\t\t\t\t\t\t{ name },\n\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\t\tthis.helpers.returnJsonArray({ error: error.message }),\n\t\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow error;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (resource === 'mail') {\n\t\t\tif (operation === 'send') {\n\t\t\t\tfor (let i = 0; i < length; i++) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst toEmail = this.getNodeParameter('toEmail', i) as string;\n\n\t\t\t\t\t\tconst parsedToEmail = toEmail.includes(',')\n\t\t\t\t\t\t\t? toEmail.split(',').map((entry) => ({ email: entry.trim() }))\n\t\t\t\t\t\t\t: [{ email: toEmail.trim() }];\n\n\t\t\t\t\t\tconst {\n\t\t\t\t\t\t\tbccEmail,\n\t\t\t\t\t\t\tccEmail,\n\t\t\t\t\t\t\tenableSandbox,\n\t\t\t\t\t\t\tsendAt,\n\t\t\t\t\t\t\theaders,\n\t\t\t\t\t\t\tattachments,\n\t\t\t\t\t\t\tcategories,\n\t\t\t\t\t\t\tipPoolName,\n\t\t\t\t\t\t\treplyToEmail,\n\t\t\t\t\t\t} = this.getNodeParameter('additionalFields', i) as {\n\t\t\t\t\t\t\tbccEmail: string;\n\t\t\t\t\t\t\tccEmail: string;\n\t\t\t\t\t\t\tenableSandbox: boolean;\n\t\t\t\t\t\t\tsendAt: string;\n\t\t\t\t\t\t\theaders: { details: Array<{ key: string; value: string }> };\n\t\t\t\t\t\t\tattachments: string;\n\t\t\t\t\t\t\tcategories: string;\n\t\t\t\t\t\t\tipPoolName: string;\n\t\t\t\t\t\t\treplyToEmail: string;\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tconst body: SendMailBody = {\n\t\t\t\t\t\t\tpersonalizations: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tto: parsedToEmail,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\tfrom: {\n\t\t\t\t\t\t\t\temail: (this.getNodeParameter('fromEmail', i) as string).trim(),\n\t\t\t\t\t\t\t\tname: this.getNodeParameter('fromName', i) as string,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tmail_settings: {\n\t\t\t\t\t\t\t\tsandbox_mode: {\n\t\t\t\t\t\t\t\t\tenable: enableSandbox || false,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tconst dynamicTemplateEnabled = this.getNodeParameter('dynamicTemplate', i);\n\n\t\t\t\t\t\t// dynamic template\n\t\t\t\t\t\tif (dynamicTemplateEnabled) {\n\t\t\t\t\t\t\tbody.template_id = this.getNodeParameter('templateId', i) as string;\n\n\t\t\t\t\t\t\tconst { fields } = this.getNodeParameter('dynamicTemplateFields', i) as {\n\t\t\t\t\t\t\t\tfields: Array<{ [key: string]: string }>;\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\tif (fields) {\n\t\t\t\t\t\t\t\tbody.personalizations[0].dynamic_template_data = {};\n\t\t\t\t\t\t\t\tfields.forEach((field) => {\n\t\t\t\t\t\t\t\t\tbody.personalizations[0].dynamic_template_data![field.key] = field.value;\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// message body\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tbody.personalizations[0].subject = this.getNodeParameter('subject', i) as string;\n\t\t\t\t\t\t\tbody.content = [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\ttype: this.getNodeParameter('contentType', i) as string,\n\t\t\t\t\t\t\t\t\tvalue: this.getNodeParameter('contentValue', i) as string,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (attachments) {\n\t\t\t\t\t\t\tconst attachmentsToSend = [];\n\t\t\t\t\t\t\tconst binaryProperties = attachments.split(',').map((p) => p.trim());\n\n\t\t\t\t\t\t\tfor (const property of binaryProperties) {\n\t\t\t\t\t\t\t\tconst binaryData = this.helpers.assertBinaryData(i, property);\n\t\t\t\t\t\t\t\tconst dataBuffer = await this.helpers.getBinaryDataBuffer(i, property);\n\n\t\t\t\t\t\t\t\tattachmentsToSend.push({\n\t\t\t\t\t\t\t\t\tcontent: dataBuffer.toString('base64'),\n\t\t\t\t\t\t\t\t\tfilename: binaryData.fileName || 'unknown',\n\t\t\t\t\t\t\t\t\ttype: binaryData.mimeType,\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (attachmentsToSend.length) {\n\t\t\t\t\t\t\t\tbody.attachments = attachmentsToSend;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (bccEmail) {\n\t\t\t\t\t\t\tbody.personalizations[0].bcc = bccEmail\n\t\t\t\t\t\t\t\t.split(',')\n\t\t\t\t\t\t\t\t.map((entry) => ({ email: entry.trim() }));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (ccEmail) {\n\t\t\t\t\t\t\tbody.personalizations[0].cc = ccEmail\n\t\t\t\t\t\t\t\t.split(',')\n\t\t\t\t\t\t\t\t.map((entry) => ({ email: entry.trim() }));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (headers?.details.length) {\n\t\t\t\t\t\t\tconst parsedHeaders: { [key: string]: string } = {};\n\t\t\t\t\t\t\theaders.details.forEach((obj) => (parsedHeaders[obj.key] = obj.value));\n\t\t\t\t\t\t\tbody.headers = parsedHeaders;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (categories) {\n\t\t\t\t\t\t\tbody.categories = categories.split(',');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (ipPoolName) {\n\t\t\t\t\t\t\tbody.ip_pool_name = ipPoolName;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (sendAt) {\n\t\t\t\t\t\t\tbody.personalizations[0].send_at = moment.tz(sendAt, timezone).unix();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (replyToEmail) {\n\t\t\t\t\t\t\tbody.reply_to_list = replyToEmail\n\t\t\t\t\t\t\t\t.split(',')\n\t\t\t\t\t\t\t\t.map((entry) => ({ email: entry.trim() }));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst data = await sendGridApiRequest.call(this, '/mail/send', 'POST', body, qs, {\n\t\t\t\t\t\t\tresolveWithFullResponse: true,\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray({ messageId: data.headers['x-message-id'] }),\n\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\t\tthis.helpers.returnJsonArray({ error: error.message }),\n\t\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow error;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn [returnData];\n\t}\n}\n"],"mappings":"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","names":["moment"]}