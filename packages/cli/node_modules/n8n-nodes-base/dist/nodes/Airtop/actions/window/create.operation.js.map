{"version":3,"sources":["../../../../../nodes/Airtop/actions/window/create.operation.ts"],"sourcesContent":["import type {\n\tIExecuteFunctions,\n\tINodeExecutionData,\n\tIDataObject,\n\tINodeProperties,\n} from 'n8n-workflow';\nimport { NodeApiError } from 'n8n-workflow';\n\nimport {\n\tvalidateAirtopApiResponse,\n\tvalidateSessionId,\n\tvalidateUrl,\n\tvalidateScreenResolution,\n} from '../../GenericFunctions';\nimport { apiRequest } from '../../transport';\nimport type { IAirtopResponse } from '../../transport/types';\nimport { urlField } from '../common/fields';\n\nexport const description: INodeProperties[] = [\n\t{\n\t\t...urlField,\n\t\tdescription: 'Initial URL to load in the window. Defaults to https://www.google.com.',\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tresource: ['window'],\n\t\t\t\toperation: ['create'],\n\t\t\t},\n\t\t},\n\t},\n\t// Live View Options\n\t{\n\t\tdisplayName: 'Get Live View',\n\t\tname: 'getLiveView',\n\t\ttype: 'boolean',\n\t\tdefault: false,\n\t\tdescription:\n\t\t\t'Whether to get the URL of the window\\'s <a href=\"https://docs.airtop.ai/guides/how-to/creating-a-live-view\" target=\"_blank\">Live View</a>',\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tresource: ['window'],\n\t\t\t\toperation: ['create'],\n\t\t\t},\n\t\t},\n\t},\n\t{\n\t\tdisplayName: 'Include Navigation Bar',\n\t\tname: 'includeNavigationBar',\n\t\ttype: 'boolean',\n\t\tdefault: false,\n\t\tdescription:\n\t\t\t'Whether to include the navigation bar in the Live View. When enabled, the navigation bar will be visible allowing you to navigate between pages.',\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tresource: ['window'],\n\t\t\t\toperation: ['create'],\n\t\t\t\tgetLiveView: [true],\n\t\t\t},\n\t\t},\n\t},\n\t{\n\t\tdisplayName: 'Screen Resolution',\n\t\tname: 'screenResolution',\n\t\ttype: 'string',\n\t\tdefault: '',\n\t\tdescription:\n\t\t\t'The screen resolution of the Live View. Setting a resolution will force the window to open at that specific size.',\n\t\tplaceholder: 'e.g. 1280x720',\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tresource: ['window'],\n\t\t\t\toperation: ['create'],\n\t\t\t\tgetLiveView: [true],\n\t\t\t},\n\t\t},\n\t},\n\t{\n\t\tdisplayName: 'Disable Resize',\n\t\tname: 'disableResize',\n\t\ttype: 'boolean',\n\t\tdefault: false,\n\t\tdescription: 'Whether to disable the window from being resized in the Live View',\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tresource: ['window'],\n\t\t\t\toperation: ['create'],\n\t\t\t\tgetLiveView: [true],\n\t\t\t},\n\t\t},\n\t},\n\t{\n\t\tdisplayName: 'Additional Fields',\n\t\tname: 'additionalFields',\n\t\ttype: 'collection',\n\t\tplaceholder: 'Add Field',\n\t\tdefault: {},\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tresource: ['window'],\n\t\t\t\toperation: ['create'],\n\t\t\t},\n\t\t},\n\t\toptions: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Wait Until',\n\t\t\t\tname: 'waitUntil',\n\t\t\t\ttype: 'options',\n\t\t\t\tdescription: 'Wait until the specified loading event occurs',\n\t\t\t\tdefault: 'load',\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Load',\n\t\t\t\t\t\tvalue: 'load',\n\t\t\t\t\t\tdescription: \"Wait until the page dom and it's assets have loaded\",\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'DOM Content Loaded',\n\t\t\t\t\t\tvalue: 'domContentLoaded',\n\t\t\t\t\t\tdescription: 'Wait until the page DOM has loaded',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Complete',\n\t\t\t\t\t\tvalue: 'complete',\n\t\t\t\t\t\tdescription: 'Wait until all iframes in the page have loaded',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'No Wait',\n\t\t\t\t\t\tvalue: 'noWait',\n\t\t\t\t\t\tdescription: 'Do not wait for any loading event and it will return immediately',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t],\n\t},\n];\n\nexport async function execute(\n\tthis: IExecuteFunctions,\n\tindex: number,\n): Promise<INodeExecutionData[]> {\n\tconst sessionId = validateSessionId.call(this, index);\n\tconst url = validateUrl.call(this, index);\n\tconst additionalFields = this.getNodeParameter('additionalFields', index);\n\t// Live View Options\n\tconst getLiveView = this.getNodeParameter('getLiveView', index, false);\n\tconst includeNavigationBar = this.getNodeParameter('includeNavigationBar', index, false);\n\tconst screenResolution = validateScreenResolution.call(this, index);\n\tconst disableResize = this.getNodeParameter('disableResize', index, false);\n\n\tlet response: IAirtopResponse;\n\n\tconst body: IDataObject = {\n\t\turl,\n\t\t...additionalFields,\n\t};\n\n\tresponse = await apiRequest.call(this, 'POST', `/sessions/${sessionId}/windows`, body);\n\n\tif (!response?.data?.windowId) {\n\t\tthrow new NodeApiError(this.getNode(), {\n\t\t\tmessage: 'Failed to create window',\n\t\t\tcode: 500,\n\t\t});\n\t}\n\n\tconst windowId = String(response.data.windowId);\n\n\tif (getLiveView) {\n\t\t// Get Window info\n\t\tresponse = await apiRequest.call(\n\t\t\tthis,\n\t\t\t'GET',\n\t\t\t`/sessions/${sessionId}/windows/${windowId}`,\n\t\t\tundefined,\n\t\t\t{\n\t\t\t\t...(includeNavigationBar && { includeNavigationBar: true }),\n\t\t\t\t...(screenResolution && { screenResolution }),\n\t\t\t\t...(disableResize && { disableResize: true }),\n\t\t\t},\n\t\t);\n\t}\n\n\t// validate response\n\tvalidateAirtopApiResponse(this.getNode(), response);\n\n\treturn this.helpers.returnJsonArray({ sessionId, windowId, ...response });\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA,0BAA6B;AAE7B,8BAKO;AACP,uBAA2B;AAE3B,oBAAyB;AAElB,MAAM,cAAiC;AAAA,EAC7C;AAAA,IACC,GAAG;AAAA,IACH,aAAa;AAAA,IACb,gBAAgB;AAAA,MACf,MAAM;AAAA,QACL,UAAU,CAAC,QAAQ;AAAA,QACnB,WAAW,CAAC,QAAQ;AAAA,MACrB;AAAA,IACD;AAAA,EACD;AAAA;AAAA,EAEA;AAAA,IACC,aAAa;AAAA,IACb,MAAM;AAAA,IACN,MAAM;AAAA,IACN,SAAS;AAAA,IACT,aACC;AAAA,IACD,gBAAgB;AAAA,MACf,MAAM;AAAA,QACL,UAAU,CAAC,QAAQ;AAAA,QACnB,WAAW,CAAC,QAAQ;AAAA,MACrB;AAAA,IACD;AAAA,EACD;AAAA,EACA;AAAA,IACC,aAAa;AAAA,IACb,MAAM;AAAA,IACN,MAAM;AAAA,IACN,SAAS;AAAA,IACT,aACC;AAAA,IACD,gBAAgB;AAAA,MACf,MAAM;AAAA,QACL,UAAU,CAAC,QAAQ;AAAA,QACnB,WAAW,CAAC,QAAQ;AAAA,QACpB,aAAa,CAAC,IAAI;AAAA,MACnB;AAAA,IACD;AAAA,EACD;AAAA,EACA;AAAA,IACC,aAAa;AAAA,IACb,MAAM;AAAA,IACN,MAAM;AAAA,IACN,SAAS;AAAA,IACT,aACC;AAAA,IACD,aAAa;AAAA,IACb,gBAAgB;AAAA,MACf,MAAM;AAAA,QACL,UAAU,CAAC,QAAQ;AAAA,QACnB,WAAW,CAAC,QAAQ;AAAA,QACpB,aAAa,CAAC,IAAI;AAAA,MACnB;AAAA,IACD;AAAA,EACD;AAAA,EACA;AAAA,IACC,aAAa;AAAA,IACb,MAAM;AAAA,IACN,MAAM;AAAA,IACN,SAAS;AAAA,IACT,aAAa;AAAA,IACb,gBAAgB;AAAA,MACf,MAAM;AAAA,QACL,UAAU,CAAC,QAAQ;AAAA,QACnB,WAAW,CAAC,QAAQ;AAAA,QACpB,aAAa,CAAC,IAAI;AAAA,MACnB;AAAA,IACD;AAAA,EACD;AAAA,EACA;AAAA,IACC,aAAa;AAAA,IACb,MAAM;AAAA,IACN,MAAM;AAAA,IACN,aAAa;AAAA,IACb,SAAS,CAAC;AAAA,IACV,gBAAgB;AAAA,MACf,MAAM;AAAA,QACL,UAAU,CAAC,QAAQ;AAAA,QACnB,WAAW,CAAC,QAAQ;AAAA,MACrB;AAAA,IACD;AAAA,IACA,SAAS;AAAA,MACR;AAAA,QACC,aAAa;AAAA,QACb,MAAM;AAAA,QACN,MAAM;AAAA,QACN,aAAa;AAAA,QACb,SAAS;AAAA,QACT,SAAS;AAAA,UACR;AAAA,YACC,MAAM;AAAA,YACN,OAAO;AAAA,YACP,aAAa;AAAA,UACd;AAAA,UACA;AAAA,YACC,MAAM;AAAA,YACN,OAAO;AAAA,YACP,aAAa;AAAA,UACd;AAAA,UACA;AAAA,YACC,MAAM;AAAA,YACN,OAAO;AAAA,YACP,aAAa;AAAA,UACd;AAAA,UACA;AAAA,YACC,MAAM;AAAA,YACN,OAAO;AAAA,YACP,aAAa;AAAA,UACd;AAAA,QACD;AAAA,MACD;AAAA,IACD;AAAA,EACD;AACD;AAEA,eAAsB,QAErB,OACgC;AAChC,QAAM,YAAY,0CAAkB,KAAK,MAAM,KAAK;AACpD,QAAM,MAAM,oCAAY,KAAK,MAAM,KAAK;AACxC,QAAM,mBAAmB,KAAK,iBAAiB,oBAAoB,KAAK;AAExE,QAAM,cAAc,KAAK,iBAAiB,eAAe,OAAO,KAAK;AACrE,QAAM,uBAAuB,KAAK,iBAAiB,wBAAwB,OAAO,KAAK;AACvF,QAAM,mBAAmB,iDAAyB,KAAK,MAAM,KAAK;AAClE,QAAM,gBAAgB,KAAK,iBAAiB,iBAAiB,OAAO,KAAK;AAEzE,MAAI;AAEJ,QAAM,OAAoB;AAAA,IACzB;AAAA,IACA,GAAG;AAAA,EACJ;AAEA,aAAW,MAAM,4BAAW,KAAK,MAAM,QAAQ,aAAa,SAAS,YAAY,IAAI;AAErF,MAAI,CAAC,UAAU,MAAM,UAAU;AAC9B,UAAM,IAAI,iCAAa,KAAK,QAAQ,GAAG;AAAA,MACtC,SAAS;AAAA,MACT,MAAM;AAAA,IACP,CAAC;AAAA,EACF;AAEA,QAAM,WAAW,OAAO,SAAS,KAAK,QAAQ;AAE9C,MAAI,aAAa;AAEhB,eAAW,MAAM,4BAAW;AAAA,MAC3B;AAAA,MACA;AAAA,MACA,aAAa,SAAS,YAAY,QAAQ;AAAA,MAC1C;AAAA,MACA;AAAA,QACC,GAAI,wBAAwB,EAAE,sBAAsB,KAAK;AAAA,QACzD,GAAI,oBAAoB,EAAE,iBAAiB;AAAA,QAC3C,GAAI,iBAAiB,EAAE,eAAe,KAAK;AAAA,MAC5C;AAAA,IACD;AAAA,EACD;AAGA,yDAA0B,KAAK,QAAQ,GAAG,QAAQ;AAElD,SAAO,KAAK,QAAQ,gBAAgB,EAAE,WAAW,UAAU,GAAG,SAAS,CAAC;AACzE;","names":[]}