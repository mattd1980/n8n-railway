{"version":3,"sources":["../../../nodes/MongoDb/MongoDb.node.ts"],"sourcesContent":["import type {\n\tFindOneAndReplaceOptions,\n\tFindOneAndUpdateOptions,\n\tUpdateOptions,\n\tSort,\n} from 'mongodb';\nimport { ObjectId } from 'mongodb';\nimport { ApplicationError, NodeConnectionTypes } from 'n8n-workflow';\nimport type {\n\tIExecuteFunctions,\n\tICredentialsDecrypted,\n\tICredentialTestFunctions,\n\tIDataObject,\n\tINodeCredentialTestResult,\n\tINodeExecutionData,\n\tINodeType,\n\tINodeTypeDescription,\n\tJsonObject,\n} from 'n8n-workflow';\n\nimport {\n\tbuildParameterizedConnString,\n\tconnectMongoClient,\n\tprepareFields,\n\tprepareItems,\n\tstringifyObjectIDs,\n\tvalidateAndResolveMongoCredentials,\n} from './GenericFunctions';\nimport type { IMongoParametricCredentials } from './mongoDb.types';\nimport { nodeProperties } from './MongoDbProperties';\nimport { generatePairedItemData } from '../../utils/utilities';\n\nexport class MongoDb implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'MongoDB',\n\t\tname: 'mongoDb',\n\t\ticon: 'file:mongodb.svg',\n\t\tgroup: ['input'],\n\t\tversion: [1, 1.1],\n\t\tdescription: 'Find, insert and update documents in MongoDB',\n\t\tdefaults: {\n\t\t\tname: 'MongoDB',\n\t\t},\n\t\tinputs: [NodeConnectionTypes.Main],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tusableAsTool: true,\n\t\tcredentials: [\n\t\t\t{\n\t\t\t\tname: 'mongoDb',\n\t\t\t\trequired: true,\n\t\t\t\ttestedBy: 'mongoDbCredentialTest',\n\t\t\t},\n\t\t],\n\t\tproperties: nodeProperties,\n\t};\n\n\tmethods = {\n\t\tcredentialTest: {\n\t\t\tasync mongoDbCredentialTest(\n\t\t\t\tthis: ICredentialTestFunctions,\n\t\t\t\tcredential: ICredentialsDecrypted,\n\t\t\t): Promise<INodeCredentialTestResult> {\n\t\t\t\tconst credentials = credential.data as IDataObject;\n\n\t\t\t\ttry {\n\t\t\t\t\tconst database = ((credentials.database as string) || '').trim();\n\t\t\t\t\tlet connectionString = '';\n\n\t\t\t\t\tif (credentials.configurationType === 'connectionString') {\n\t\t\t\t\t\tconnectionString = ((credentials.connectionString as string) || '').trim();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconnectionString = buildParameterizedConnString(\n\t\t\t\t\t\t\tcredentials as unknown as IMongoParametricCredentials,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst client = await connectMongoClient(connectionString, credentials);\n\n\t\t\t\t\tconst { databases } = await client.db().admin().listDatabases();\n\n\t\t\t\t\tif (!(databases as IDataObject[]).map((db) => db.name).includes(database)) {\n\t\t\t\t\t\tthrow new ApplicationError(`Database \"${database}\" does not exist`, {\n\t\t\t\t\t\t\tlevel: 'warning',\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\tawait client.close();\n\t\t\t\t} catch (error) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tstatus: 'Error',\n\t\t\t\t\t\tmessage: (error as Error).message,\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\treturn {\n\t\t\t\t\tstatus: 'OK',\n\t\t\t\t\tmessage: 'Connection successful!',\n\t\t\t\t};\n\t\t\t},\n\t\t},\n\t};\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t\tconst credentials = await this.getCredentials('mongoDb');\n\t\tconst { database, connectionString } = validateAndResolveMongoCredentials(this, credentials);\n\n\t\tconst client = await connectMongoClient(connectionString, credentials);\n\n\t\tconst mdb = client.db(database);\n\n\t\tlet returnData: INodeExecutionData[] = [];\n\n\t\tconst items = this.getInputData();\n\t\tconst operation = this.getNodeParameter('operation', 0);\n\t\tconst nodeVersion = this.getNode().typeVersion;\n\n\t\tlet itemsLength = items.length ? 1 : 0;\n\t\tlet fallbackPairedItems;\n\n\t\tif (nodeVersion >= 1.1) {\n\t\t\titemsLength = items.length;\n\t\t} else {\n\t\t\tfallbackPairedItems = generatePairedItemData(items.length);\n\t\t}\n\n\t\tif (operation === 'aggregate') {\n\t\t\tfor (let i = 0; i < itemsLength; i++) {\n\t\t\t\ttry {\n\t\t\t\t\tconst queryParameter = JSON.parse(\n\t\t\t\t\t\tthis.getNodeParameter('query', i) as string,\n\t\t\t\t\t) as IDataObject;\n\n\t\t\t\t\tif (queryParameter._id && typeof queryParameter._id === 'string') {\n\t\t\t\t\t\tqueryParameter._id = new ObjectId(queryParameter._id);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst query = mdb\n\t\t\t\t\t\t.collection(this.getNodeParameter('collection', i) as string)\n\t\t\t\t\t\t.aggregate(queryParameter as unknown as Document[]);\n\n\t\t\t\t\tfor (const entry of await query.toArray()) {\n\t\t\t\t\t\treturnData.push({ json: entry, pairedItem: fallbackPairedItems ?? [{ item: i }] });\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\t\treturnData.push({\n\t\t\t\t\t\t\tjson: { error: (error as JsonObject).message },\n\t\t\t\t\t\t\tpairedItem: fallbackPairedItems ?? [{ item: i }],\n\t\t\t\t\t\t});\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (operation === 'delete') {\n\t\t\tfor (let i = 0; i < itemsLength; i++) {\n\t\t\t\ttry {\n\t\t\t\t\tconst { deletedCount } = await mdb\n\t\t\t\t\t\t.collection(this.getNodeParameter('collection', i) as string)\n\t\t\t\t\t\t.deleteMany(JSON.parse(this.getNodeParameter('query', i) as string) as Document);\n\n\t\t\t\t\treturnData.push({\n\t\t\t\t\t\tjson: { deletedCount },\n\t\t\t\t\t\tpairedItem: fallbackPairedItems ?? [{ item: i }],\n\t\t\t\t\t});\n\t\t\t\t} catch (error) {\n\t\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\t\treturnData.push({\n\t\t\t\t\t\t\tjson: { error: (error as JsonObject).message },\n\t\t\t\t\t\t\tpairedItem: fallbackPairedItems ?? [{ item: i }],\n\t\t\t\t\t\t});\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (operation === 'find') {\n\t\t\tfor (let i = 0; i < itemsLength; i++) {\n\t\t\t\ttry {\n\t\t\t\t\tconst queryParameter = JSON.parse(\n\t\t\t\t\t\tthis.getNodeParameter('query', i) as string,\n\t\t\t\t\t) as IDataObject;\n\n\t\t\t\t\tif (queryParameter._id && typeof queryParameter._id === 'string') {\n\t\t\t\t\t\tqueryParameter._id = new ObjectId(queryParameter._id);\n\t\t\t\t\t}\n\n\t\t\t\t\tlet query = mdb\n\t\t\t\t\t\t.collection(this.getNodeParameter('collection', i) as string)\n\t\t\t\t\t\t.find(queryParameter as unknown as Document);\n\n\t\t\t\t\tconst options = this.getNodeParameter('options', i);\n\t\t\t\t\tconst limit = options.limit as number;\n\t\t\t\t\tconst skip = options.skip as number;\n\t\t\t\t\tconst projection =\n\t\t\t\t\t\toptions.projection && (JSON.parse(options.projection as string) as Document);\n\t\t\t\t\tconst sort = options.sort && (JSON.parse(options.sort as string) as Sort);\n\n\t\t\t\t\tif (skip > 0) {\n\t\t\t\t\t\tquery = query.skip(skip);\n\t\t\t\t\t}\n\t\t\t\t\tif (limit > 0) {\n\t\t\t\t\t\tquery = query.limit(limit);\n\t\t\t\t\t}\n\t\t\t\t\tif (sort && Object.keys(sort).length !== 0 && sort.constructor === Object) {\n\t\t\t\t\t\tquery = query.sort(sort);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (\n\t\t\t\t\t\tprojection &&\n\t\t\t\t\t\tObject.keys(projection).length !== 0 &&\n\t\t\t\t\t\tprojection.constructor === Object\n\t\t\t\t\t) {\n\t\t\t\t\t\tquery = query.project(projection);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst queryResult = await query.toArray();\n\n\t\t\t\t\tfor (const entry of queryResult) {\n\t\t\t\t\t\treturnData.push({ json: entry, pairedItem: fallbackPairedItems ?? [{ item: i }] });\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\t\treturnData.push({\n\t\t\t\t\t\t\tjson: { error: (error as JsonObject).message },\n\t\t\t\t\t\t\tpairedItem: fallbackPairedItems ?? [{ item: i }],\n\t\t\t\t\t\t});\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (operation === 'findOneAndReplace') {\n\t\t\tfallbackPairedItems = fallbackPairedItems ?? generatePairedItemData(items.length);\n\t\t\tconst fields = prepareFields(this.getNodeParameter('fields', 0) as string);\n\t\t\tconst useDotNotation = this.getNodeParameter('options.useDotNotation', 0, false) as boolean;\n\t\t\tconst dateFields = prepareFields(\n\t\t\t\tthis.getNodeParameter('options.dateFields', 0, '') as string,\n\t\t\t);\n\n\t\t\tconst updateKey = ((this.getNodeParameter('updateKey', 0) as string) || '').trim();\n\n\t\t\tconst updateOptions = (this.getNodeParameter('upsert', 0) as boolean)\n\t\t\t\t? { upsert: true }\n\t\t\t\t: undefined;\n\n\t\t\tconst updateItems = prepareItems(items, fields, updateKey, useDotNotation, dateFields);\n\n\t\t\tfor (const item of updateItems) {\n\t\t\t\ttry {\n\t\t\t\t\tconst filter = { [updateKey]: item[updateKey] };\n\t\t\t\t\tif (updateKey === '_id') {\n\t\t\t\t\t\tfilter[updateKey] = new ObjectId(item[updateKey] as string);\n\t\t\t\t\t\tdelete item._id;\n\t\t\t\t\t}\n\n\t\t\t\t\tawait mdb\n\t\t\t\t\t\t.collection(this.getNodeParameter('collection', 0) as string)\n\t\t\t\t\t\t.findOneAndReplace(filter, item, updateOptions as FindOneAndReplaceOptions);\n\t\t\t\t} catch (error) {\n\t\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\t\titem.json = { error: (error as JsonObject).message };\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturnData = this.helpers.constructExecutionMetaData(\n\t\t\t\tthis.helpers.returnJsonArray(updateItems),\n\t\t\t\t{ itemData: fallbackPairedItems },\n\t\t\t);\n\t\t}\n\n\t\tif (operation === 'findOneAndUpdate') {\n\t\t\tfallbackPairedItems = fallbackPairedItems ?? generatePairedItemData(items.length);\n\t\t\tconst fields = prepareFields(this.getNodeParameter('fields', 0) as string);\n\t\t\tconst useDotNotation = this.getNodeParameter('options.useDotNotation', 0, false) as boolean;\n\t\t\tconst dateFields = prepareFields(\n\t\t\t\tthis.getNodeParameter('options.dateFields', 0, '') as string,\n\t\t\t);\n\n\t\t\tconst updateKey = ((this.getNodeParameter('updateKey', 0) as string) || '').trim();\n\n\t\t\tconst updateOptions = (this.getNodeParameter('upsert', 0) as boolean)\n\t\t\t\t? { upsert: true }\n\t\t\t\t: undefined;\n\n\t\t\tconst updateItems = prepareItems(items, fields, updateKey, useDotNotation, dateFields);\n\n\t\t\tfor (const item of updateItems) {\n\t\t\t\ttry {\n\t\t\t\t\tconst filter = { [updateKey]: item[updateKey] };\n\t\t\t\t\tif (updateKey === '_id') {\n\t\t\t\t\t\tfilter[updateKey] = new ObjectId(item[updateKey] as string);\n\t\t\t\t\t\tdelete item._id;\n\t\t\t\t\t}\n\n\t\t\t\t\tawait mdb\n\t\t\t\t\t\t.collection(this.getNodeParameter('collection', 0) as string)\n\t\t\t\t\t\t.findOneAndUpdate(filter, { $set: item }, updateOptions as FindOneAndUpdateOptions);\n\t\t\t\t} catch (error) {\n\t\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\t\titem.json = { error: (error as JsonObject).message };\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturnData = this.helpers.constructExecutionMetaData(\n\t\t\t\tthis.helpers.returnJsonArray(updateItems),\n\t\t\t\t{ itemData: fallbackPairedItems },\n\t\t\t);\n\t\t}\n\n\t\tif (operation === 'insert') {\n\t\t\tfallbackPairedItems = fallbackPairedItems ?? generatePairedItemData(items.length);\n\t\t\tlet responseData: IDataObject[] = [];\n\t\t\ttry {\n\t\t\t\t// Prepare the data to insert and copy it to be returned\n\t\t\t\tconst fields = prepareFields(this.getNodeParameter('fields', 0) as string);\n\t\t\t\tconst useDotNotation = this.getNodeParameter('options.useDotNotation', 0, false) as boolean;\n\t\t\t\tconst dateFields = prepareFields(\n\t\t\t\t\tthis.getNodeParameter('options.dateFields', 0, '') as string,\n\t\t\t\t);\n\n\t\t\t\tconst insertItems = prepareItems(items, fields, '', useDotNotation, dateFields);\n\n\t\t\t\tconst { insertedIds } = await mdb\n\t\t\t\t\t.collection(this.getNodeParameter('collection', 0) as string)\n\t\t\t\t\t.insertMany(insertItems);\n\n\t\t\t\t// Add the id to the data\n\t\t\t\tfor (const i of Object.keys(insertedIds)) {\n\t\t\t\t\tresponseData.push({\n\t\t\t\t\t\t...insertItems[parseInt(i, 10)],\n\t\t\t\t\t\tid: insertedIds[parseInt(i, 10)] as unknown as string,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\tresponseData = [{ error: (error as JsonObject).message }];\n\t\t\t\t} else {\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturnData = this.helpers.constructExecutionMetaData(\n\t\t\t\tthis.helpers.returnJsonArray(responseData),\n\t\t\t\t{ itemData: fallbackPairedItems },\n\t\t\t);\n\t\t}\n\n\t\tif (operation === 'update') {\n\t\t\tfallbackPairedItems = fallbackPairedItems ?? generatePairedItemData(items.length);\n\t\t\tconst fields = prepareFields(this.getNodeParameter('fields', 0) as string);\n\t\t\tconst useDotNotation = this.getNodeParameter('options.useDotNotation', 0, false) as boolean;\n\t\t\tconst dateFields = prepareFields(\n\t\t\t\tthis.getNodeParameter('options.dateFields', 0, '') as string,\n\t\t\t);\n\n\t\t\tconst updateKey = ((this.getNodeParameter('updateKey', 0) as string) || '').trim();\n\n\t\t\tconst updateOptions = (this.getNodeParameter('upsert', 0) as boolean)\n\t\t\t\t? { upsert: true }\n\t\t\t\t: undefined;\n\n\t\t\tconst updateItems = prepareItems(items, fields, updateKey, useDotNotation, dateFields);\n\n\t\t\tfor (const item of updateItems) {\n\t\t\t\ttry {\n\t\t\t\t\tconst filter = { [updateKey]: item[updateKey] };\n\t\t\t\t\tif (updateKey === '_id') {\n\t\t\t\t\t\tfilter[updateKey] = new ObjectId(item[updateKey] as string);\n\t\t\t\t\t\tdelete item._id;\n\t\t\t\t\t}\n\n\t\t\t\t\tawait mdb\n\t\t\t\t\t\t.collection(this.getNodeParameter('collection', 0) as string)\n\t\t\t\t\t\t.updateOne(filter, { $set: item }, updateOptions as UpdateOptions);\n\t\t\t\t} catch (error) {\n\t\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\t\titem.json = { error: (error as JsonObject).message };\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturnData = this.helpers.constructExecutionMetaData(\n\t\t\t\tthis.helpers.returnJsonArray(updateItems),\n\t\t\t\t{ itemData: fallbackPairedItems },\n\t\t\t);\n\t\t}\n\n\t\tawait client.close();\n\n\t\treturn [stringifyObjectIDs(returnData)];\n\t}\n}\n"],"mappings":"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","names":[]}