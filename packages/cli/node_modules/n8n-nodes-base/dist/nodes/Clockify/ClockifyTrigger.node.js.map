{"version":3,"sources":["../../../nodes/Clockify/ClockifyTrigger.node.ts"],"sourcesContent":["import moment from 'moment-timezone';\nimport type {\n\tIPollFunctions,\n\tIDataObject,\n\tILoadOptionsFunctions,\n\tINodeExecutionData,\n\tINodePropertyOptions,\n\tINodeType,\n\tINodeTypeDescription,\n} from 'n8n-workflow';\nimport { NodeConnectionTypes } from 'n8n-workflow';\n\nimport type { EntryType } from './EntryType';\nimport { EntryTypes } from './EntryType';\nimport { clockifyApiRequest } from './GenericFunctions';\nimport type { IUserDto } from './UserDtos';\nimport type { IWorkspaceDto } from './WorkpaceInterfaces';\n\nexport class ClockifyTrigger implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'Clockify Trigger',\n\t\ticon: { light: 'file:clockify.svg', dark: 'file:clockify.dark.svg' },\n\t\tname: 'clockifyTrigger',\n\t\tgroup: ['trigger'],\n\t\tversion: 1,\n\t\tdescription: 'Listens to Clockify events',\n\t\tdefaults: {\n\t\t\tname: 'Clockify Trigger',\n\t\t},\n\t\tinputs: [],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tcredentials: [\n\t\t\t{\n\t\t\t\tname: 'clockifyApi',\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t],\n\t\tpolling: true,\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Workspace Name or ID',\n\t\t\t\tname: 'workspaceId',\n\t\t\t\ttype: 'options',\n\t\t\t\tdescription:\n\t\t\t\t\t'Choose from the list, or specify an ID using an <a href=\"https://docs.n8n.io/code/expressions/\">expression</a>',\n\t\t\t\ttypeOptions: {\n\t\t\t\t\tloadOptionsMethod: 'listWorkspaces',\n\t\t\t\t},\n\t\t\t\trequired: true,\n\t\t\t\tdefault: '',\n\t\t\t},\n\t\t\t// eslint-disable-next-line n8n-nodes-base/node-param-default-missing\n\t\t\t{\n\t\t\t\tdisplayName: 'Trigger',\n\t\t\t\tname: 'watchField',\n\t\t\t\ttype: 'options',\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'New Time Entry',\n\t\t\t\t\t\tvalue: EntryTypes.NEW_TIME_ENTRY,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\trequired: true,\n\t\t\t\tdefault: EntryTypes.NEW_TIME_ENTRY,\n\t\t\t},\n\t\t],\n\t};\n\n\tmethods = {\n\t\tloadOptions: {\n\t\t\tasync listWorkspaces(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst rtv: INodePropertyOptions[] = [];\n\t\t\t\tconst workspaces: IWorkspaceDto[] = await clockifyApiRequest.call(\n\t\t\t\t\tthis,\n\t\t\t\t\t'GET',\n\t\t\t\t\t'workspaces',\n\t\t\t\t);\n\t\t\t\tif (undefined !== workspaces) {\n\t\t\t\t\tworkspaces.forEach((value) => {\n\t\t\t\t\t\trtv.push({\n\t\t\t\t\t\t\tname: value.name,\n\t\t\t\t\t\t\tvalue: value.id,\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn rtv;\n\t\t\t},\n\t\t},\n\t};\n\n\tasync poll(this: IPollFunctions): Promise<INodeExecutionData[][] | null> {\n\t\tconst webhookData = this.getWorkflowStaticData('node');\n\t\tconst triggerField = this.getNodeParameter('watchField') as EntryType;\n\t\tconst workspaceId = this.getNodeParameter('workspaceId');\n\n\t\tif (!webhookData.userId) {\n\t\t\t// Cache the user-id that we do not have to request it every time\n\t\t\tconst userInfo: IUserDto = await clockifyApiRequest.call(this, 'GET', 'user');\n\t\t\twebhookData.userId = userInfo.id;\n\t\t}\n\n\t\tconst qs: IDataObject = {};\n\t\tlet resource: string;\n\t\tlet result = null;\n\n\t\tswitch (triggerField) {\n\t\t\tcase EntryTypes.NEW_TIME_ENTRY:\n\t\t\tdefault:\n\t\t\t\tconst workflowTimezone = this.getTimezone();\n\t\t\t\tresource = `workspaces/${workspaceId}/user/${webhookData.userId}/time-entries`;\n\t\t\t\tqs.start = webhookData.lastTimeChecked;\n\t\t\t\tqs.end = moment().tz(workflowTimezone).format('YYYY-MM-DDTHH:mm:ss') + 'Z';\n\t\t\t\tqs.hydrated = true;\n\t\t\t\tqs['in-progress'] = false;\n\t\t\t\tbreak;\n\t\t}\n\n\t\tresult = await clockifyApiRequest.call(this, 'GET', resource, {}, qs);\n\t\twebhookData.lastTimeChecked = qs.end;\n\n\t\tif (Array.isArray(result) && result.length !== 0) {\n\t\t\treturn [this.helpers.returnJsonArray(result)];\n\t\t}\n\t\treturn null;\n\t}\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAAmB;AAUnB,0BAAoC;AAGpC,uBAA2B;AAC3B,8BAAmC;AAI5B,MAAM,gBAAqC;AAAA,EAA3C;AACN,uBAAoC;AAAA,MACnC,aAAa;AAAA,MACb,MAAM,EAAE,OAAO,qBAAqB,MAAM,yBAAyB;AAAA,MACnE,MAAM;AAAA,MACN,OAAO,CAAC,SAAS;AAAA,MACjB,SAAS;AAAA,MACT,aAAa;AAAA,MACb,UAAU;AAAA,QACT,MAAM;AAAA,MACP;AAAA,MACA,QAAQ,CAAC;AAAA,MACT,SAAS,CAAC,wCAAoB,IAAI;AAAA,MAClC,aAAa;AAAA,QACZ;AAAA,UACC,MAAM;AAAA,UACN,UAAU;AAAA,QACX;AAAA,MACD;AAAA,MACA,SAAS;AAAA,MACT,YAAY;AAAA,QACX;AAAA,UACC,aAAa;AAAA,UACb,MAAM;AAAA,UACN,MAAM;AAAA,UACN,aACC;AAAA,UACD,aAAa;AAAA,YACZ,mBAAmB;AAAA,UACpB;AAAA,UACA,UAAU;AAAA,UACV,SAAS;AAAA,QACV;AAAA;AAAA,QAEA;AAAA,UACC,aAAa;AAAA,UACb,MAAM;AAAA,UACN,MAAM;AAAA,UACN,SAAS;AAAA,YACR;AAAA,cACC,MAAM;AAAA,cACN,OAAO,4BAAW;AAAA,YACnB;AAAA,UACD;AAAA,UACA,UAAU;AAAA,UACV,SAAS,4BAAW;AAAA,QACrB;AAAA,MACD;AAAA,IACD;AAEA,mBAAU;AAAA,MACT,aAAa;AAAA,QACZ,MAAM,iBAA6E;AAClF,gBAAM,MAA8B,CAAC;AACrC,gBAAM,aAA8B,MAAM,2CAAmB;AAAA,YAC5D;AAAA,YACA;AAAA,YACA;AAAA,UACD;AACA,cAAI,WAAc,YAAY;AAC7B,uBAAW,QAAQ,CAAC,UAAU;AAC7B,kBAAI,KAAK;AAAA,gBACR,MAAM,MAAM;AAAA,gBACZ,OAAO,MAAM;AAAA,cACd,CAAC;AAAA,YACF,CAAC;AAAA,UACF;AACA,iBAAO;AAAA,QACR;AAAA,MACD;AAAA,IACD;AAAA;AAAA,EAEA,MAAM,OAAmE;AACxE,UAAM,cAAc,KAAK,sBAAsB,MAAM;AACrD,UAAM,eAAe,KAAK,iBAAiB,YAAY;AACvD,UAAM,cAAc,KAAK,iBAAiB,aAAa;AAEvD,QAAI,CAAC,YAAY,QAAQ;AAExB,YAAM,WAAqB,MAAM,2CAAmB,KAAK,MAAM,OAAO,MAAM;AAC5E,kBAAY,SAAS,SAAS;AAAA,IAC/B;AAEA,UAAM,KAAkB,CAAC;AACzB,QAAI;AACJ,QAAI,SAAS;AAEb,YAAQ,cAAc;AAAA,MACrB,KAAK,4BAAW;AAAA,MAChB;AACC,cAAM,mBAAmB,KAAK,YAAY;AAC1C,mBAAW,cAAc,WAAW,SAAS,YAAY,MAAM;AAC/D,WAAG,QAAQ,YAAY;AACvB,WAAG,UAAM,uBAAAA,SAAO,EAAE,GAAG,gBAAgB,EAAE,OAAO,qBAAqB,IAAI;AACvE,WAAG,WAAW;AACd,WAAG,aAAa,IAAI;AACpB;AAAA,IACF;AAEA,aAAS,MAAM,2CAAmB,KAAK,MAAM,OAAO,UAAU,CAAC,GAAG,EAAE;AACpE,gBAAY,kBAAkB,GAAG;AAEjC,QAAI,MAAM,QAAQ,MAAM,KAAK,OAAO,WAAW,GAAG;AACjD,aAAO,CAAC,KAAK,QAAQ,gBAAgB,MAAM,CAAC;AAAA,IAC7C;AACA,WAAO;AAAA,EACR;AACD;","names":["moment"]}