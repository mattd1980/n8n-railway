{"version":3,"sources":["../../../nodes/ERPNext/ERPNext.node.ts"],"sourcesContent":["/* eslint-disable n8n-nodes-base/node-filename-against-convention */\nimport type {\n\tIExecuteFunctions,\n\tIDataObject,\n\tILoadOptionsFunctions,\n\tINodeExecutionData,\n\tINodePropertyOptions,\n\tINodeType,\n\tINodeTypeDescription,\n} from 'n8n-workflow';\nimport { NodeConnectionTypes, NodeOperationError } from 'n8n-workflow';\n\nimport { documentFields, documentOperations } from './DocumentDescription';\nimport { erpNextApiRequest, erpNextApiRequestAllItems } from './GenericFunctions';\nimport type { DocumentProperties } from './utils';\nimport { processNames, toSQL } from './utils';\n\nexport class ERPNext implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'ERPNext',\n\t\tname: 'erpNext',\n\t\ticon: 'file:erpnext.svg',\n\t\tgroup: ['output'],\n\t\tversion: 1,\n\t\tsubtitle: '={{$parameter[\"resource\"] + \": \" + $parameter[\"operation\"]}}',\n\t\tdescription: 'Consume ERPNext API',\n\t\tdefaults: {\n\t\t\tname: 'ERPNext',\n\t\t},\n\t\tusableAsTool: true,\n\t\tinputs: [NodeConnectionTypes.Main],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tcredentials: [\n\t\t\t{\n\t\t\t\tname: 'erpNextApi',\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Resource',\n\t\t\t\tname: 'resource',\n\t\t\t\ttype: 'options',\n\t\t\t\tnoDataExpression: true,\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Document',\n\t\t\t\t\t\tvalue: 'document',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'document',\n\t\t\t},\n\t\t\t...documentOperations,\n\t\t\t...documentFields,\n\t\t],\n\t};\n\n\tmethods = {\n\t\tloadOptions: {\n\t\t\tasync getDocTypes(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst data = await erpNextApiRequestAllItems.call(\n\t\t\t\t\tthis,\n\t\t\t\t\t'data',\n\t\t\t\t\t'GET',\n\t\t\t\t\t'/api/resource/DocType',\n\t\t\t\t\t{},\n\t\t\t\t);\n\t\t\t\tconst docTypes = data.map(({ name }: { name: string }) => {\n\t\t\t\t\treturn { name, value: encodeURI(name) };\n\t\t\t\t});\n\n\t\t\t\treturn processNames(docTypes);\n\t\t\t},\n\t\t\tasync getDocFilters(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst docType = this.getCurrentNodeParameter('docType') as string;\n\t\t\t\tconst { data } = await erpNextApiRequest.call(\n\t\t\t\t\tthis,\n\t\t\t\t\t'GET',\n\t\t\t\t\t`/api/resource/DocType/${docType}`,\n\t\t\t\t\t{},\n\t\t\t\t);\n\n\t\t\t\tconst docFields = data.fields.map(\n\t\t\t\t\t({ label, fieldname }: { label: string; fieldname: string }) => {\n\t\t\t\t\t\treturn { name: label, value: fieldname };\n\t\t\t\t\t},\n\t\t\t\t);\n\n\t\t\t\tdocFields.unshift({ name: '*', value: '*' });\n\n\t\t\t\treturn processNames(docFields);\n\t\t\t},\n\t\t\tasync getDocFields(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst docType = this.getCurrentNodeParameter('docType') as string;\n\t\t\t\tconst { data } = await erpNextApiRequest.call(\n\t\t\t\t\tthis,\n\t\t\t\t\t'GET',\n\t\t\t\t\t`/api/resource/DocType/${docType}`,\n\t\t\t\t\t{},\n\t\t\t\t);\n\n\t\t\t\tconst docFields = data.fields.map(\n\t\t\t\t\t({ label, fieldname }: { label: string; fieldname: string }) => {\n\t\t\t\t\t\treturn { name: label, value: fieldname };\n\t\t\t\t\t},\n\t\t\t\t);\n\n\t\t\t\treturn processNames(docFields);\n\t\t\t},\n\t\t},\n\t};\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t\tconst items = this.getInputData();\n\n\t\tconst returnData: INodeExecutionData[] = [];\n\t\tlet responseData;\n\n\t\tconst body: IDataObject = {};\n\t\tconst qs: IDataObject = {};\n\n\t\tconst resource = this.getNodeParameter('resource', 0);\n\t\tconst operation = this.getNodeParameter('operation', 0);\n\n\t\tfor (let i = 0; i < items.length; i++) {\n\t\t\t// https://app.swaggerhub.com/apis-docs/alyf.de/ERPNext/11#/Resources/post_api_resource_Webhook\n\t\t\t// https://frappeframework.com/docs/user/en/guides/integration/rest_api/manipulating_documents\n\n\t\t\tif (resource === 'document') {\n\t\t\t\t// *********************************************************************\n\t\t\t\t//                             document\n\t\t\t\t// *********************************************************************\n\n\t\t\t\tif (operation === 'get') {\n\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t//          document: get\n\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t// https://app.swaggerhub.com/apis-docs/alyf.de/ERPNext/11#/General/get_api_resource__DocType___DocumentName_\n\n\t\t\t\t\tconst docType = this.getNodeParameter('docType', i) as string;\n\t\t\t\t\tconst documentName = this.getNodeParameter('documentName', i) as string;\n\n\t\t\t\t\tresponseData = await erpNextApiRequest.call(\n\t\t\t\t\t\tthis,\n\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t`/api/resource/${docType}/${documentName}`,\n\t\t\t\t\t);\n\t\t\t\t\tresponseData = responseData.data;\n\t\t\t\t}\n\n\t\t\t\tif (operation === 'getAll') {\n\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t//         document: getAll\n\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t// https://app.swaggerhub.com/apis-docs/alyf.de/ERPNext/11#/General/get_api_resource__DocType_\n\n\t\t\t\t\tconst docType = this.getNodeParameter('docType', i) as string;\n\t\t\t\t\tconst endpoint = `/api/resource/${docType}`;\n\n\t\t\t\t\tconst { fields, filters } = this.getNodeParameter('options', i) as {\n\t\t\t\t\t\tfields: string[];\n\t\t\t\t\t\tfilters: {\n\t\t\t\t\t\t\tcustomProperty: Array<{ field: string; operator: string; value: string }>;\n\t\t\t\t\t\t};\n\t\t\t\t\t};\n\n\t\t\t\t\t// fields=[\"test\", \"example\", \"hi\"]\n\t\t\t\t\tif (fields) {\n\t\t\t\t\t\tif (fields.includes('*')) {\n\t\t\t\t\t\t\tqs.fields = JSON.stringify(['*']);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tqs.fields = JSON.stringify(fields);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// filters=[[\"Person\",\"first_name\",\"=\",\"Jane\"]]\n\t\t\t\t\t// TODO: filters not working\n\t\t\t\t\tif (filters) {\n\t\t\t\t\t\tqs.filters = JSON.stringify(\n\t\t\t\t\t\t\tfilters.customProperty.map((filter) => {\n\t\t\t\t\t\t\t\treturn [docType, filter.field, toSQL(filter.operator), filter.value];\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', i);\n\n\t\t\t\t\tif (!returnAll) {\n\t\t\t\t\t\tconst limit = this.getNodeParameter('limit', i);\n\t\t\t\t\t\tqs.limit_page_length = limit;\n\t\t\t\t\t\tqs.limit_start = 0;\n\t\t\t\t\t\tresponseData = await erpNextApiRequest.call(this, 'GET', endpoint, {}, qs);\n\t\t\t\t\t\tresponseData = responseData.data;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresponseData = await erpNextApiRequestAllItems.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'data',\n\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\tendpoint,\n\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t} else if (operation === 'create') {\n\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t//         document: create\n\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t// https://app.swaggerhub.com/apis-docs/alyf.de/ERPNext/11#/General/post_api_resource__DocType_\n\n\t\t\t\t\tconst properties = this.getNodeParameter('properties', i) as DocumentProperties;\n\n\t\t\t\t\tif (!properties.customProperty.length) {\n\t\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t\t'Please enter at least one property for the document to create.',\n\t\t\t\t\t\t\t{ itemIndex: i },\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tproperties.customProperty.forEach((property) => {\n\t\t\t\t\t\tbody[property.field] = property.value;\n\t\t\t\t\t});\n\n\t\t\t\t\tconst docType = this.getNodeParameter('docType', i) as string;\n\n\t\t\t\t\tresponseData = await erpNextApiRequest.call(\n\t\t\t\t\t\tthis,\n\t\t\t\t\t\t'POST',\n\t\t\t\t\t\t`/api/resource/${docType}`,\n\t\t\t\t\t\tbody,\n\t\t\t\t\t);\n\t\t\t\t\tresponseData = responseData.data;\n\t\t\t\t} else if (operation === 'delete') {\n\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t//         document: delete\n\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t// https://app.swaggerhub.com/apis-docs/alyf.de/ERPNext/11#/General/delete_api_resource__DocType___DocumentName_\n\n\t\t\t\t\tconst docType = this.getNodeParameter('docType', i) as string;\n\t\t\t\t\tconst documentName = this.getNodeParameter('documentName', i) as string;\n\n\t\t\t\t\tresponseData = await erpNextApiRequest.call(\n\t\t\t\t\t\tthis,\n\t\t\t\t\t\t'DELETE',\n\t\t\t\t\t\t`/api/resource/${docType}/${documentName}`,\n\t\t\t\t\t);\n\t\t\t\t} else if (operation === 'update') {\n\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t//         document: update\n\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t// https://app.swaggerhub.com/apis-docs/alyf.de/ERPNext/11#/General/put_api_resource__DocType___DocumentName_\n\n\t\t\t\t\tconst properties = this.getNodeParameter('properties', i) as DocumentProperties;\n\n\t\t\t\t\tif (!properties.customProperty.length) {\n\t\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t\t'Please enter at least one property for the document to update.',\n\t\t\t\t\t\t\t{ itemIndex: i },\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tproperties.customProperty.forEach((property) => {\n\t\t\t\t\t\tbody[property.field] = property.value;\n\t\t\t\t\t});\n\n\t\t\t\t\tconst docType = this.getNodeParameter('docType', i) as string;\n\t\t\t\t\tconst documentName = this.getNodeParameter('documentName', i) as string;\n\n\t\t\t\t\tresponseData = await erpNextApiRequest.call(\n\t\t\t\t\t\tthis,\n\t\t\t\t\t\t'PUT',\n\t\t\t\t\t\t`/api/resource/${docType}/${documentName}`,\n\t\t\t\t\t\tbody,\n\t\t\t\t\t);\n\t\t\t\t\tresponseData = responseData.data;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t{ itemData: { item: i } },\n\t\t\t);\n\t\t\treturnData.push(...executionData);\n\t\t}\n\t\treturn [returnData];\n\t}\n}\n"],"mappings":"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","names":[]}