{"version":3,"sources":["../../../nodes/Npm/PackageDescription.ts"],"sourcesContent":["import type { INodeExecutionData, INodeProperties } from 'n8n-workflow';\nimport { valid as isValidSemver } from 'semver';\n\ninterface PackageJson {\n\tname: string;\n\tversion: string;\n\tdescription: string;\n}\n\nexport const packageOperations: INodeProperties[] = [\n\t{\n\t\tdisplayName: 'Operation',\n\t\tname: 'operation',\n\t\ttype: 'options',\n\t\tnoDataExpression: true,\n\t\tdefault: 'getMetadata',\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tresource: ['package'],\n\t\t\t},\n\t\t},\n\t\toptions: [\n\t\t\t{\n\t\t\t\tname: 'Get Metadata',\n\t\t\t\tvalue: 'getMetadata',\n\t\t\t\taction: 'Returns all the metadata for a package at a specific version',\n\t\t\t\tdescription: 'Returns all the metadata for a package at a specific version',\n\t\t\t\trouting: {\n\t\t\t\t\trequest: {\n\t\t\t\t\t\tmethod: 'GET',\n\t\t\t\t\t\turl: '=/{{ encodeURIComponent($parameter.packageName) }}/{{ $parameter.packageVersion }}',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Get Versions',\n\t\t\t\tvalue: 'getVersions',\n\t\t\t\taction: 'Returns all the versions for a package',\n\t\t\t\tdescription: 'Returns all the versions for a package',\n\t\t\t\trouting: {\n\t\t\t\t\trequest: {\n\t\t\t\t\t\tmethod: 'GET',\n\t\t\t\t\t\turl: '=/{{ encodeURIComponent($parameter.packageName) }}',\n\t\t\t\t\t},\n\t\t\t\t\toutput: {\n\t\t\t\t\t\tpostReceive: [\n\t\t\t\t\t\t\tasync function (items) {\n\t\t\t\t\t\t\t\tconst allVersions: INodeExecutionData[] = [];\n\t\t\t\t\t\t\t\tfor (const { json } of items) {\n\t\t\t\t\t\t\t\t\tconst itemVersions = json.time as Record<string, string>;\n\t\t\t\t\t\t\t\t\tObject.keys(itemVersions).forEach((version) => {\n\t\t\t\t\t\t\t\t\t\tif (isValidSemver(version)) {\n\t\t\t\t\t\t\t\t\t\t\tallVersions.push({\n\t\t\t\t\t\t\t\t\t\t\t\tjson: {\n\t\t\t\t\t\t\t\t\t\t\t\t\tversion,\n\t\t\t\t\t\t\t\t\t\t\t\t\tpublished_at: itemVersions[version],\n\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tallVersions.sort(\n\t\t\t\t\t\t\t\t\t(a, b) =>\n\t\t\t\t\t\t\t\t\t\tnew Date(b.json.published_at as string).getTime() -\n\t\t\t\t\t\t\t\t\t\tnew Date(a.json.published_at as string).getTime(),\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\treturn allVersions;\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Search',\n\t\t\t\tvalue: 'search',\n\t\t\t\taction: 'Search for packages',\n\t\t\t\tdescription: 'Search for packages',\n\t\t\t\trouting: {\n\t\t\t\t\trequest: {\n\t\t\t\t\t\tmethod: 'GET',\n\t\t\t\t\t\turl: '/-/v1/search',\n\t\t\t\t\t\tqs: {\n\t\t\t\t\t\t\ttext: '={{$parameter.query}}',\n\t\t\t\t\t\t\tsize: '={{$parameter.limit}}',\n\t\t\t\t\t\t\tfrom: '={{$parameter.offset}}',\n\t\t\t\t\t\t\tpopularity: 0.99,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\toutput: {\n\t\t\t\t\t\tpostReceive: [\n\t\t\t\t\t\t\tasync function (items) {\n\t\t\t\t\t\t\t\treturn items.flatMap(({ json }) =>\n\t\t\t\t\t\t\t\t\t(json.objects as Array<{ package: PackageJson }>).map(\n\t\t\t\t\t\t\t\t\t\t({ package: { name, version, description } }) =>\n\t\t\t\t\t\t\t\t\t\t\t({ json: { name, version, description } }) as INodeExecutionData,\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t},\n];\n\nexport const packageFields: INodeProperties[] = [\n\t{\n\t\tdisplayName: 'Package Name',\n\t\tname: 'packageName',\n\t\ttype: 'string',\n\t\trequired: true,\n\t\tdefault: '',\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tresource: ['package'],\n\t\t\t\toperation: ['getMetadata', 'getVersions'],\n\t\t\t},\n\t\t},\n\t},\n\t{\n\t\tdisplayName: 'Package Version',\n\t\tname: 'packageVersion',\n\t\ttype: 'string',\n\t\trequired: true,\n\t\tdefault: 'latest',\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tresource: ['package'],\n\t\t\t\toperation: ['getMetadata'],\n\t\t\t},\n\t\t},\n\t},\n\t{\n\t\tdisplayName: 'Query',\n\t\tname: 'query',\n\t\ttype: 'string',\n\t\trequired: true,\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tresource: ['package'],\n\t\t\t\toperation: ['search'],\n\t\t\t},\n\t\t},\n\t\tdefault: '',\n\t\tdescription: 'The query text used to search for packages',\n\t},\n\t{\n\t\tdisplayName: 'Limit',\n\t\tname: 'limit',\n\t\ttype: 'number',\n\t\tdefault: 10,\n\t\ttypeOptions: {\n\t\t\tminValue: 1,\n\t\t\tmaxValue: 100,\n\t\t},\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tresource: ['package'],\n\t\t\t\toperation: ['search'],\n\t\t\t},\n\t\t},\n\t\tdescription: 'Max number of results to return',\n\t},\n\t{\n\t\tdisplayName: 'Offset',\n\t\tname: 'offset',\n\t\ttype: 'number',\n\t\tdefault: 0,\n\t\ttypeOptions: {\n\t\t\tminValue: 0,\n\t\t},\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tresource: ['package'],\n\t\t\t\toperation: ['search'],\n\t\t\t},\n\t\t},\n\t\tdescription: 'Offset to return results from',\n\t},\n];\n"],"mappings":"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","names":["isValidSemver"]}