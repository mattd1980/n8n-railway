{"version":3,"sources":["../../../nodes/SseTrigger/SseTrigger.node.ts"],"sourcesContent":["import EventSource from 'eventsource';\nimport type {\n\tIDataObject,\n\tITriggerFunctions,\n\tINodeType,\n\tINodeTypeDescription,\n\tITriggerResponse,\n} from 'n8n-workflow';\nimport { NodeConnectionTypes, jsonParse } from 'n8n-workflow';\n\nexport class SseTrigger implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'SSE Trigger',\n\t\tname: 'sseTrigger',\n\t\ticon: 'fa:cloud-download-alt',\n\t\ticonColor: 'dark-blue',\n\t\tgroup: ['trigger'],\n\t\tversion: 1,\n\t\tdescription: 'Triggers the workflow when Server-Sent Events occur',\n\t\teventTriggerDescription: '',\n\t\tactivationMessage: 'You can now make calls to your SSE URL to trigger executions.',\n\t\tdefaults: {\n\t\t\tname: 'SSE Trigger',\n\t\t\tcolor: '#225577',\n\t\t},\n\t\ttriggerPanel: {\n\t\t\theader: '',\n\t\t\texecutionsHelp: {\n\t\t\t\tinactive:\n\t\t\t\t\t\"<b>While building your workflow</b>, click the 'execute step' button, then trigger an SSE event. This will trigger an execution, which will show up in this editor.<br /> <br /><b>Once you're happy with your workflow</b>, <a data-key='activate'>activate</a> it. Then every time a change is detected, the workflow will execute. These executions will show up in the <a data-key='executions'>executions list</a>, but not in the editor.\",\n\t\t\t\tactive:\n\t\t\t\t\t\"<b>While building your workflow</b>, click the 'execute step' button, then trigger an SSE event. This will trigger an execution, which will show up in this editor.<br /> <br /><b>Your workflow will also execute automatically</b>, since it's activated. Every time a change is detected, this node will trigger an execution. These executions will show up in the <a data-key='executions'>executions list</a>, but not in the editor.\",\n\t\t\t},\n\t\t\tactivationHint:\n\t\t\t\t\"Once you’ve finished building your workflow, <a data-key='activate'>activate</a> it to have it also listen continuously (you just won’t see those executions here).\",\n\t\t},\n\t\tinputs: [],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'URL',\n\t\t\t\tname: 'url',\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: '',\n\t\t\t\tplaceholder: 'http://example.com',\n\t\t\t\tdescription: 'The URL to receive the SSE from',\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t],\n\t};\n\n\tasync trigger(this: ITriggerFunctions): Promise<ITriggerResponse> {\n\t\tconst url = this.getNodeParameter('url') as string;\n\n\t\tconst eventSource = new EventSource(url);\n\n\t\teventSource.onmessage = (event) => {\n\t\t\tconst eventData = jsonParse<IDataObject>(event.data as string, {\n\t\t\t\terrorMessage: 'Invalid JSON for event data',\n\t\t\t});\n\t\t\tthis.emit([this.helpers.returnJsonArray([eventData])]);\n\t\t};\n\n\t\tasync function closeFunction() {\n\t\t\teventSource.close();\n\t\t}\n\n\t\treturn {\n\t\t\tcloseFunction,\n\t\t};\n\t}\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAAwB;AAQxB,0BAA+C;AAExC,MAAM,WAAgC;AAAA,EAAtC;AACN,uBAAoC;AAAA,MACnC,aAAa;AAAA,MACb,MAAM;AAAA,MACN,MAAM;AAAA,MACN,WAAW;AAAA,MACX,OAAO,CAAC,SAAS;AAAA,MACjB,SAAS;AAAA,MACT,aAAa;AAAA,MACb,yBAAyB;AAAA,MACzB,mBAAmB;AAAA,MACnB,UAAU;AAAA,QACT,MAAM;AAAA,QACN,OAAO;AAAA,MACR;AAAA,MACA,cAAc;AAAA,QACb,QAAQ;AAAA,QACR,gBAAgB;AAAA,UACf,UACC;AAAA,UACD,QACC;AAAA,QACF;AAAA,QACA,gBACC;AAAA,MACF;AAAA,MACA,QAAQ,CAAC;AAAA,MACT,SAAS,CAAC,wCAAoB,IAAI;AAAA,MAClC,YAAY;AAAA,QACX;AAAA,UACC,aAAa;AAAA,UACb,MAAM;AAAA,UACN,MAAM;AAAA,UACN,SAAS;AAAA,UACT,aAAa;AAAA,UACb,aAAa;AAAA,UACb,UAAU;AAAA,QACX;AAAA,MACD;AAAA,IACD;AAAA;AAAA,EAEA,MAAM,UAA4D;AACjE,UAAM,MAAM,KAAK,iBAAiB,KAAK;AAEvC,UAAM,cAAc,IAAI,mBAAAA,QAAY,GAAG;AAEvC,gBAAY,YAAY,CAAC,UAAU;AAClC,YAAM,gBAAY,+BAAuB,MAAM,MAAgB;AAAA,QAC9D,cAAc;AAAA,MACf,CAAC;AACD,WAAK,KAAK,CAAC,KAAK,QAAQ,gBAAgB,CAAC,SAAS,CAAC,CAAC,CAAC;AAAA,IACtD;AAEA,mBAAe,gBAAgB;AAC9B,kBAAY,MAAM;AAAA,IACnB;AAEA,WAAO;AAAA,MACN;AAAA,IACD;AAAA,EACD;AACD;","names":["EventSource"]}