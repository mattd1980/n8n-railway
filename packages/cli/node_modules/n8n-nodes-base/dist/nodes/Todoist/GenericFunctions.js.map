{"version":3,"sources":["../../../nodes/Todoist/GenericFunctions.ts"],"sourcesContent":["import type {\n\tIExecuteFunctions,\n\tIHookFunctions,\n\tILoadOptionsFunctions,\n\tIDataObject,\n\tJsonObject,\n\tIHttpRequestMethods,\n\tIRequestOptions,\n} from 'n8n-workflow';\nimport { NodeApiError } from 'n8n-workflow';\n\nexport type Context = IHookFunctions | IExecuteFunctions | ILoadOptionsFunctions;\n\nexport function FormatDueDatetime(isoString: string): string {\n\t// Assuming that the problem with incorrect date format was caused by milliseconds\n\t// Replacing the last 5 characters of ISO-formatted string with just Z char\n\treturn isoString.replace(new RegExp('.000Z$'), 'Z');\n}\n\nexport async function todoistApiRequest(\n\tthis: Context,\n\tmethod: IHttpRequestMethods,\n\tresource: string,\n\tbody: IDataObject = {},\n\tqs: IDataObject = {},\n): Promise<any> {\n\tconst authentication = this.getNodeParameter('authentication', 0) as string;\n\n\tconst endpoint = 'api.todoist.com/rest/v2';\n\n\tconst options: IRequestOptions = {\n\t\tmethod,\n\t\tqs,\n\t\turi: `https://${endpoint}${resource}`,\n\t\tjson: true,\n\t};\n\n\tif (Object.keys(body).length !== 0) {\n\t\toptions.body = body;\n\t}\n\n\ttry {\n\t\tconst credentialType = authentication === 'apiKey' ? 'todoistApi' : 'todoistOAuth2Api';\n\t\treturn await this.helpers.requestWithAuthentication.call(this, credentialType, options);\n\t} catch (error) {\n\t\tthrow new NodeApiError(this.getNode(), error as JsonObject);\n\t}\n}\n\nexport async function todoistSyncRequest(\n\tthis: Context,\n\tbody: any = {},\n\tqs: IDataObject = {},\n): Promise<any> {\n\tconst authentication = this.getNodeParameter('authentication', 0, 'oAuth2');\n\n\tconst options: IRequestOptions = {\n\t\theaders: {},\n\t\tmethod: 'POST',\n\t\tqs,\n\t\turi: 'https://api.todoist.com/sync/v9/sync',\n\t\tjson: true,\n\t};\n\n\tif (Object.keys(body as IDataObject).length !== 0) {\n\t\toptions.body = body;\n\t}\n\n\ttry {\n\t\tconst credentialType = authentication === 'oAuth2' ? 'todoistOAuth2Api' : 'todoistApi';\n\t\treturn await this.helpers.requestWithAuthentication.call(this, credentialType, options);\n\t} catch (error) {\n\t\tthrow new NodeApiError(this.getNode(), error as JsonObject);\n\t}\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA,0BAA6B;AAItB,SAAS,kBAAkB,WAA2B;AAG5D,SAAO,UAAU,QAAQ,IAAI,OAAO,QAAQ,GAAG,GAAG;AACnD;AAEA,eAAsB,kBAErB,QACA,UACA,OAAoB,CAAC,GACrB,KAAkB,CAAC,GACJ;AACf,QAAM,iBAAiB,KAAK,iBAAiB,kBAAkB,CAAC;AAEhE,QAAM,WAAW;AAEjB,QAAM,UAA2B;AAAA,IAChC;AAAA,IACA;AAAA,IACA,KAAK,WAAW,QAAQ,GAAG,QAAQ;AAAA,IACnC,MAAM;AAAA,EACP;AAEA,MAAI,OAAO,KAAK,IAAI,EAAE,WAAW,GAAG;AACnC,YAAQ,OAAO;AAAA,EAChB;AAEA,MAAI;AACH,UAAM,iBAAiB,mBAAmB,WAAW,eAAe;AACpE,WAAO,MAAM,KAAK,QAAQ,0BAA0B,KAAK,MAAM,gBAAgB,OAAO;AAAA,EACvF,SAAS,OAAO;AACf,UAAM,IAAI,iCAAa,KAAK,QAAQ,GAAG,KAAmB;AAAA,EAC3D;AACD;AAEA,eAAsB,mBAErB,OAAY,CAAC,GACb,KAAkB,CAAC,GACJ;AACf,QAAM,iBAAiB,KAAK,iBAAiB,kBAAkB,GAAG,QAAQ;AAE1E,QAAM,UAA2B;AAAA,IAChC,SAAS,CAAC;AAAA,IACV,QAAQ;AAAA,IACR;AAAA,IACA,KAAK;AAAA,IACL,MAAM;AAAA,EACP;AAEA,MAAI,OAAO,KAAK,IAAmB,EAAE,WAAW,GAAG;AAClD,YAAQ,OAAO;AAAA,EAChB;AAEA,MAAI;AACH,UAAM,iBAAiB,mBAAmB,WAAW,qBAAqB;AAC1E,WAAO,MAAM,KAAK,QAAQ,0BAA0B,KAAK,MAAM,gBAAgB,OAAO;AAAA,EACvF,SAAS,OAAO;AACf,UAAM,IAAI,iCAAa,KAAK,QAAQ,GAAG,KAAmB;AAAA,EAC3D;AACD;","names":[]}