{"version":3,"sources":["../../../../nodes/Todoist/v1/OperationHandler.ts"],"sourcesContent":["import type { IDataObject } from 'n8n-workflow';\nimport { ApplicationError, jsonParse } from 'n8n-workflow';\nimport { v4 as uuid } from 'uuid';\n\nimport type { Section, TodoistResponse } from './Service';\nimport type { Context } from '../GenericFunctions';\nimport { FormatDueDatetime, todoistApiRequest, todoistSyncRequest } from '../GenericFunctions';\n\nexport interface OperationHandler {\n\thandleOperation(ctx: Context, itemIndex: number): Promise<TodoistResponse>;\n}\n\nexport interface CreateTaskRequest {\n\tcontent?: string;\n\tdescription?: string;\n\tproject_id?: number;\n\tsection_id?: number;\n\tparent_id?: string;\n\torder?: number;\n\tlabels?: string[];\n\tpriority?: number;\n\tdue_string?: string;\n\tdue_datetime?: string;\n\tdue_date?: string;\n\tdue_lang?: string;\n}\n\nexport interface SyncRequest {\n\tcommands: Command[];\n\ttemp_id_mapping?: IDataObject;\n}\n\nexport interface Command {\n\ttype: CommandType;\n\tuuid: string;\n\ttemp_id?: string;\n\targs: {\n\t\tid?: number;\n\t\tsection_id?: number;\n\t\tproject_id?: number | string;\n\t\tsection?: string;\n\t\tcontent?: string;\n\t};\n}\n\nexport const CommandTypes = {\n\tITEM_MOVE: 'item_move',\n\tITEM_ADD: 'item_add',\n\tITEM_UPDATE: 'item_update',\n\tITEM_REORDER: 'item_reorder',\n\tITEM_DELETE: 'item_delete',\n\tITEM_COMPLETE: 'item_complete',\n} as const;\n\nexport type CommandType = (typeof CommandTypes)[keyof typeof CommandTypes];\n\nasync function getLabelNameFromId(ctx: Context, labelIds: number[]): Promise<string[]> {\n\tconst labelList = [];\n\tfor (const label of labelIds) {\n\t\tconst thisLabel = await todoistApiRequest.call(ctx, 'GET', `/labels/${label}`);\n\t\tlabelList.push(thisLabel.name);\n\t}\n\treturn labelList;\n}\n\nexport class CreateHandler implements OperationHandler {\n\tasync handleOperation(ctx: Context, itemIndex: number): Promise<TodoistResponse> {\n\t\t//https://developer.todoist.com/rest/v2/#create-a-new-task\n\t\tconst content = ctx.getNodeParameter('content', itemIndex) as string;\n\t\tconst projectId = ctx.getNodeParameter('project', itemIndex, undefined, {\n\t\t\textractValue: true,\n\t\t}) as number;\n\t\tconst labels = ctx.getNodeParameter('labels', itemIndex) as number[];\n\t\tconst options = ctx.getNodeParameter('options', itemIndex) as IDataObject;\n\n\t\tconst body: CreateTaskRequest = {\n\t\t\tcontent,\n\t\t\tproject_id: projectId,\n\t\t\tpriority: options.priority! ? parseInt(options.priority as string, 10) : 1,\n\t\t};\n\n\t\tif (options.description) {\n\t\t\tbody.description = options.description as string;\n\t\t}\n\n\t\tif (options.dueDateTime) {\n\t\t\tbody.due_datetime = FormatDueDatetime(options.dueDateTime as string);\n\t\t}\n\n\t\tif (options.dueString) {\n\t\t\tbody.due_string = options.dueString as string;\n\t\t}\n\n\t\tif (labels !== undefined && labels.length !== 0) {\n\t\t\tbody.labels = await getLabelNameFromId(ctx, labels);\n\t\t}\n\n\t\tif (options.section) {\n\t\t\tbody.section_id = options.section as number;\n\t\t}\n\n\t\tif (options.dueLang) {\n\t\t\tbody.due_lang = options.dueLang as string;\n\t\t}\n\n\t\tif (options.parentId) {\n\t\t\tbody.parent_id = options.parentId as string;\n\t\t}\n\n\t\tconst data = await todoistApiRequest.call(ctx, 'POST', '/tasks', body as IDataObject);\n\n\t\treturn {\n\t\t\tdata,\n\t\t};\n\t}\n}\n\nexport class CloseHandler implements OperationHandler {\n\tasync handleOperation(ctx: Context, itemIndex: number): Promise<TodoistResponse> {\n\t\tconst id = ctx.getNodeParameter('taskId', itemIndex) as string;\n\n\t\tawait todoistApiRequest.call(ctx, 'POST', `/tasks/${id}/close`);\n\n\t\treturn {\n\t\t\tsuccess: true,\n\t\t};\n\t}\n}\n\nexport class DeleteHandler implements OperationHandler {\n\tasync handleOperation(ctx: Context, itemIndex: number): Promise<TodoistResponse> {\n\t\tconst id = ctx.getNodeParameter('taskId', itemIndex) as string;\n\n\t\tawait todoistApiRequest.call(ctx, 'DELETE', `/tasks/${id}`);\n\n\t\treturn {\n\t\t\tsuccess: true,\n\t\t};\n\t}\n}\n\nexport class GetHandler implements OperationHandler {\n\tasync handleOperation(ctx: Context, itemIndex: number): Promise<TodoistResponse> {\n\t\tconst id = ctx.getNodeParameter('taskId', itemIndex) as string;\n\n\t\tconst responseData = await todoistApiRequest.call(ctx, 'GET', `/tasks/${id}`);\n\t\treturn {\n\t\t\tdata: responseData,\n\t\t};\n\t}\n}\n\nexport class GetAllHandler implements OperationHandler {\n\tasync handleOperation(ctx: Context, itemIndex: number): Promise<TodoistResponse> {\n\t\t//https://developer.todoist.com/rest/v2/#get-active-tasks\n\t\tconst returnAll = ctx.getNodeParameter('returnAll', itemIndex) as boolean;\n\t\tconst filters = ctx.getNodeParameter('filters', itemIndex) as IDataObject;\n\t\tconst qs: IDataObject = {};\n\n\t\tif (filters.projectId) {\n\t\t\tqs.project_id = filters.projectId as string;\n\t\t}\n\t\tif (filters.labelId) {\n\t\t\tqs.label = filters.labelId as string;\n\t\t}\n\t\tif (filters.filter) {\n\t\t\tqs.filter = filters.filter as string;\n\t\t}\n\t\tif (filters.lang) {\n\t\t\tqs.lang = filters.lang as string;\n\t\t}\n\t\tif (filters.ids) {\n\t\t\tqs.ids = filters.ids as string;\n\t\t}\n\n\t\tlet responseData = await todoistApiRequest.call(ctx, 'GET', '/tasks', {}, qs);\n\n\t\tif (!returnAll) {\n\t\t\tconst limit = ctx.getNodeParameter('limit', itemIndex) as number;\n\t\t\tresponseData = responseData.splice(0, limit);\n\t\t}\n\n\t\treturn {\n\t\t\tdata: responseData,\n\t\t};\n\t}\n}\n\nasync function getSectionIds(ctx: Context, projectId: number): Promise<Map<string, number>> {\n\tconst sections: Section[] = await todoistApiRequest.call(\n\t\tctx,\n\t\t'GET',\n\t\t'/sections',\n\t\t{},\n\t\t{ project_id: projectId },\n\t);\n\treturn new Map(sections.map((s) => [s.name, s.id as unknown as number]));\n}\n\nexport class ReopenHandler implements OperationHandler {\n\tasync handleOperation(ctx: Context, itemIndex: number): Promise<TodoistResponse> {\n\t\t//https://developer.todoist.com/rest/v2/#get-an-active-task\n\t\tconst id = ctx.getNodeParameter('taskId', itemIndex) as string;\n\n\t\tawait todoistApiRequest.call(ctx, 'POST', `/tasks/${id}/reopen`);\n\n\t\treturn {\n\t\t\tsuccess: true,\n\t\t};\n\t}\n}\n\nexport class UpdateHandler implements OperationHandler {\n\tasync handleOperation(ctx: Context, itemIndex: number): Promise<TodoistResponse> {\n\t\t//https://developer.todoist.com/rest/v2/#update-a-task\n\t\tconst id = ctx.getNodeParameter('taskId', itemIndex) as string;\n\t\tconst updateFields = ctx.getNodeParameter('updateFields', itemIndex) as IDataObject;\n\n\t\tconst body: CreateTaskRequest = {};\n\n\t\tif (updateFields.content) {\n\t\t\tbody.content = updateFields.content as string;\n\t\t}\n\n\t\tif (updateFields.priority) {\n\t\t\tbody.priority = parseInt(updateFields.priority as string, 10);\n\t\t}\n\n\t\tif (updateFields.description) {\n\t\t\tbody.description = updateFields.description as string;\n\t\t}\n\n\t\tif (updateFields.dueDateTime) {\n\t\t\tbody.due_datetime = FormatDueDatetime(updateFields.dueDateTime as string);\n\t\t}\n\n\t\tif (updateFields.dueString) {\n\t\t\tbody.due_string = updateFields.dueString as string;\n\t\t}\n\n\t\tif (\n\t\t\tupdateFields.labels !== undefined &&\n\t\t\tArray.isArray(updateFields.labels) &&\n\t\t\tupdateFields.labels.length !== 0\n\t\t) {\n\t\t\tbody.labels = await getLabelNameFromId(ctx, updateFields.labels as number[]);\n\t\t}\n\n\t\tif (updateFields.dueLang) {\n\t\t\tbody.due_lang = updateFields.dueLang as string;\n\t\t}\n\n\t\tawait todoistApiRequest.call(ctx, 'POST', `/tasks/${id}`, body as IDataObject);\n\n\t\treturn { success: true };\n\t}\n}\n\nexport class MoveHandler implements OperationHandler {\n\tasync handleOperation(ctx: Context, itemIndex: number): Promise<TodoistResponse> {\n\t\t//https://api.todoist.com/sync/v9/sync\n\t\tconst taskId = ctx.getNodeParameter('taskId', itemIndex) as number;\n\t\tconst section = ctx.getNodeParameter('section', itemIndex) as number;\n\n\t\tconst body: SyncRequest = {\n\t\t\tcommands: [\n\t\t\t\t{\n\t\t\t\t\ttype: CommandTypes.ITEM_MOVE,\n\t\t\t\t\tuuid: uuid(),\n\t\t\t\t\targs: {\n\t\t\t\t\t\tid: taskId,\n\t\t\t\t\t\tsection_id: section,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t],\n\t\t};\n\n\t\tawait todoistSyncRequest.call(ctx, body);\n\n\t\treturn { success: true };\n\t}\n}\n\nexport class SyncHandler implements OperationHandler {\n\tasync handleOperation(ctx: Context, itemIndex: number): Promise<TodoistResponse> {\n\t\tconst commandsJson = ctx.getNodeParameter('commands', itemIndex) as string;\n\t\tconst projectId = ctx.getNodeParameter('project', itemIndex, undefined, {\n\t\t\textractValue: true,\n\t\t}) as number;\n\t\tconst sections = await getSectionIds(ctx, projectId);\n\t\tconst commands: Command[] = jsonParse(commandsJson);\n\t\tconst tempIdMapping = new Map<string, string>();\n\n\t\tfor (let i = 0; i < commands.length; i++) {\n\t\t\tconst command = commands[i];\n\t\t\tthis.enrichUUID(command);\n\t\t\tthis.enrichSection(command, sections);\n\t\t\tthis.enrichProjectId(command, projectId);\n\t\t\tthis.enrichTempId(command, tempIdMapping, projectId);\n\t\t}\n\n\t\tconst body: SyncRequest = {\n\t\t\tcommands,\n\t\t\ttemp_id_mapping: this.convertToObject(tempIdMapping),\n\t\t};\n\n\t\tawait todoistSyncRequest.call(ctx, body);\n\n\t\treturn { success: true };\n\t}\n\n\tprivate convertToObject(map: Map<string, string>) {\n\t\treturn Array.from(map.entries()).reduce((o, [key, value]) => {\n\t\t\to[key] = value;\n\t\t\treturn o;\n\t\t}, {} as IDataObject);\n\t}\n\n\tprivate enrichUUID(command: Command) {\n\t\tcommand.uuid = uuid();\n\t}\n\n\tprivate enrichSection(command: Command, sections: Map<string, number>) {\n\t\tif (command.args?.section !== undefined) {\n\t\t\tconst sectionId = sections.get(command.args.section);\n\t\t\tif (sectionId) {\n\t\t\t\tcommand.args.section_id = sectionId;\n\t\t\t} else {\n\t\t\t\tthrow new ApplicationError(\n\t\t\t\t\t'Section ' + command.args.section + \" doesn't exist on Todoist\",\n\t\t\t\t\t{ level: 'warning' },\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate enrichProjectId(command: Command, projectId: number) {\n\t\tif (this.requiresProjectId(command)) {\n\t\t\tcommand.args.project_id = projectId;\n\t\t}\n\t}\n\n\tprivate requiresProjectId(command: Command) {\n\t\treturn command.type === CommandTypes.ITEM_ADD;\n\t}\n\n\tprivate enrichTempId(command: Command, tempIdMapping: Map<string, string>, projectId: number) {\n\t\tif (this.requiresTempId(command)) {\n\t\t\tcommand.temp_id = uuid();\n\t\t\ttempIdMapping.set(command.temp_id, projectId as unknown as string);\n\t\t}\n\t}\n\n\tprivate requiresTempId(command: Command) {\n\t\treturn command.type === CommandTypes.ITEM_ADD;\n\t}\n}\n"],"mappings":"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","names":["uuid"]}