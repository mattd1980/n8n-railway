{"version":3,"sources":["../../../nodes/Freshservice/Freshservice.node.ts"],"sourcesContent":["import { tz } from 'moment-timezone';\nimport type {\n\tIExecuteFunctions,\n\tIDataObject,\n\tILoadOptionsFunctions,\n\tINodeExecutionData,\n\tINodePropertyOptions,\n\tINodeType,\n\tINodeTypeDescription,\n} from 'n8n-workflow';\nimport { NodeConnectionTypes } from 'n8n-workflow';\n\nimport {\n\tagentFields,\n\tagentGroupFields,\n\tagentGroupOperations,\n\tagentOperations,\n\tagentRoleFields,\n\tagentRoleOperations,\n\tannouncementFields,\n\tannouncementOperations,\n\tassetTypeFields,\n\tassetTypeOperations,\n\tchangeFields,\n\tchangeOperations,\n\tdepartmentFields,\n\tdepartmentOperations,\n\tlocationFields,\n\tlocationOperations,\n\tproblemFields,\n\tproblemOperations,\n\tproductFields,\n\tproductOperations,\n\treleaseFields,\n\treleaseOperations,\n\trequesterFields,\n\trequesterGroupFields,\n\trequesterGroupOperations,\n\trequesterOperations,\n\tsoftwareFields,\n\tsoftwareOperations,\n\tticketFields,\n\tticketOperations,\n} from './descriptions';\nimport {\n\tadjustAddress,\n\tadjustAgentRoles,\n\tformatFilters,\n\tfreshserviceApiRequest,\n\thandleListing,\n\tsanitizeAssignmentScopeGroup,\n\ttoArray,\n\ttoOptions,\n\ttoUserOptions,\n\tvalidateAssignmentScopeGroup,\n\tvalidateUpdateFields,\n} from './GenericFunctions';\nimport type { AddressFixedCollection, LoadedResource, LoadedUser, RolesParameter } from './types';\n\nexport class Freshservice implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'Freshservice',\n\t\tname: 'freshservice',\n\t\ticon: 'file:freshservice.svg',\n\t\tgroup: ['transform'],\n\t\tversion: 1,\n\t\tsubtitle: '={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}',\n\t\tdescription: 'Consume the Freshservice API',\n\t\tdefaults: {\n\t\t\tname: 'Freshservice',\n\t\t},\n\t\tusableAsTool: true,\n\t\tinputs: [NodeConnectionTypes.Main],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tcredentials: [\n\t\t\t{\n\t\t\t\tname: 'freshserviceApi',\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Resource',\n\t\t\t\tname: 'resource',\n\t\t\t\ttype: 'options',\n\t\t\t\tnoDataExpression: true,\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Agent',\n\t\t\t\t\t\tvalue: 'agent',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Agent Group',\n\t\t\t\t\t\tvalue: 'agentGroup',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Agent Role',\n\t\t\t\t\t\tvalue: 'agentRole',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Announcement',\n\t\t\t\t\t\tvalue: 'announcement',\n\t\t\t\t\t},\n\t\t\t\t\t// {\n\t\t\t\t\t// \tname: 'Asset',\n\t\t\t\t\t// \tvalue: 'asset',\n\t\t\t\t\t// },\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Asset Type',\n\t\t\t\t\t\tvalue: 'assetType',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Change',\n\t\t\t\t\t\tvalue: 'change',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Department',\n\t\t\t\t\t\tvalue: 'department',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Location',\n\t\t\t\t\t\tvalue: 'location',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Problem',\n\t\t\t\t\t\tvalue: 'problem',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Product',\n\t\t\t\t\t\tvalue: 'product',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Release',\n\t\t\t\t\t\tvalue: 'release',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Requester',\n\t\t\t\t\t\tvalue: 'requester',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Requester Group',\n\t\t\t\t\t\tvalue: 'requesterGroup',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Software',\n\t\t\t\t\t\tvalue: 'software',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Ticket',\n\t\t\t\t\t\tvalue: 'ticket',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'agent',\n\t\t\t},\n\t\t\t...agentOperations,\n\t\t\t...agentFields,\n\t\t\t...agentGroupOperations,\n\t\t\t...agentGroupFields,\n\t\t\t...agentRoleOperations,\n\t\t\t...agentRoleFields,\n\t\t\t...announcementOperations,\n\t\t\t...announcementFields,\n\t\t\t// ...assetOperations,\n\t\t\t// ...assetFields,\n\t\t\t...assetTypeOperations,\n\t\t\t...assetTypeFields,\n\t\t\t...changeOperations,\n\t\t\t...changeFields,\n\t\t\t...departmentOperations,\n\t\t\t...departmentFields,\n\t\t\t...locationOperations,\n\t\t\t...locationFields,\n\t\t\t...problemOperations,\n\t\t\t...problemFields,\n\t\t\t...productOperations,\n\t\t\t...productFields,\n\t\t\t...releaseOperations,\n\t\t\t...releaseFields,\n\t\t\t...requesterOperations,\n\t\t\t...requesterFields,\n\t\t\t...requesterGroupOperations,\n\t\t\t...requesterGroupFields,\n\t\t\t...softwareOperations,\n\t\t\t...softwareFields,\n\t\t\t...ticketOperations,\n\t\t\t...ticketFields,\n\t\t],\n\t};\n\n\tmethods = {\n\t\tloadOptions: {\n\t\t\tasync getAgents(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst { agents } = (await freshserviceApiRequest.call(this, 'GET', '/agents')) as {\n\t\t\t\t\tagents: LoadedUser[];\n\t\t\t\t};\n\t\t\t\treturn toUserOptions(agents.filter((agent) => agent.active));\n\t\t\t},\n\n\t\t\tasync getAgentGroups(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst { groups } = (await freshserviceApiRequest.call(this, 'GET', '/groups')) as {\n\t\t\t\t\tgroups: LoadedResource[];\n\t\t\t\t};\n\t\t\t\treturn toOptions(groups);\n\t\t\t},\n\n\t\t\tasync getAgentRoles(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst { roles } = (await freshserviceApiRequest.call(this, 'GET', '/roles')) as {\n\t\t\t\t\troles: LoadedResource[];\n\t\t\t\t};\n\t\t\t\treturn toOptions(roles);\n\t\t\t},\n\n\t\t\tasync getAssetTypes(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst { asset_types } = (await freshserviceApiRequest.call(\n\t\t\t\t\tthis,\n\t\t\t\t\t'GET',\n\t\t\t\t\t'/asset_types',\n\t\t\t\t)) as {\n\t\t\t\t\tasset_types: LoadedResource[];\n\t\t\t\t};\n\t\t\t\treturn toOptions(asset_types);\n\t\t\t},\n\n\t\t\tasync getAssetTypeFields(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst assetType = this.getCurrentNodeParameter('assetTypeId');\n\t\t\t\tconst { asset_type_fields } = (await freshserviceApiRequest.call(\n\t\t\t\t\tthis,\n\t\t\t\t\t'GET',\n\t\t\t\t\t`/asset_types/${assetType}/fields`,\n\t\t\t\t)) as {\n\t\t\t\t\tasset_type_fields: [{ fields: LoadedResource[] }];\n\t\t\t\t};\n\n\t\t\t\tlet fields: any[] = [];\n\t\t\t\tfields = fields\n\t\t\t\t\t.concat(...asset_type_fields.map((data) => data.fields))\n\t\t\t\t\t.map((data) => ({ name: data.label, id: data.name }));\n\n\t\t\t\treturn toOptions(fields);\n\t\t\t},\n\n\t\t\tasync getDepartments(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst { departments } = (await freshserviceApiRequest.call(\n\t\t\t\t\tthis,\n\t\t\t\t\t'GET',\n\t\t\t\t\t'/departments',\n\t\t\t\t)) as {\n\t\t\t\t\tdepartments: LoadedResource[];\n\t\t\t\t};\n\t\t\t\treturn toOptions(departments);\n\t\t\t},\n\n\t\t\tasync getLocations(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst { locations } = (await freshserviceApiRequest.call(this, 'GET', '/locations')) as {\n\t\t\t\t\tlocations: LoadedResource[];\n\t\t\t\t};\n\t\t\t\treturn toOptions(locations);\n\t\t\t},\n\n\t\t\tasync getRequesters(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst { requesters } = (await freshserviceApiRequest.call(this, 'GET', '/requesters')) as {\n\t\t\t\t\trequesters: LoadedUser[];\n\t\t\t\t};\n\t\t\t\treturn toUserOptions(requesters);\n\t\t\t},\n\t\t},\n\t};\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t\tconst items = this.getInputData();\n\t\tconst returnData: INodeExecutionData[] = [];\n\n\t\tconst resource = this.getNodeParameter('resource', 0);\n\t\tconst operation = this.getNodeParameter('operation', 0);\n\n\t\tconst defaultTimezone = this.getTimezone();\n\n\t\tlet responseData;\n\n\t\tfor (let i = 0; i < items.length; i++) {\n\t\t\ttry {\n\t\t\t\tif (resource === 'agent') {\n\t\t\t\t\t// **********************************************************************\n\t\t\t\t\t//                                 agent\n\t\t\t\t\t// **********************************************************************\n\n\t\t\t\t\tif (operation === 'create') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//              agent: create\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst body = {\n\t\t\t\t\t\t\temail: this.getNodeParameter('email', i),\n\t\t\t\t\t\t\tfirst_name: this.getNodeParameter('firstName', i),\n\t\t\t\t\t\t} as IDataObject;\n\n\t\t\t\t\t\tconst roles = this.getNodeParameter('roles', i) as RolesParameter;\n\n\t\t\t\t\t\tvalidateAssignmentScopeGroup.call(this, roles);\n\t\t\t\t\t\tsanitizeAssignmentScopeGroup.call(this, roles);\n\n\t\t\t\t\t\tObject.assign(body, adjustAgentRoles(roles));\n\n\t\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i);\n\n\t\t\t\t\t\tif (Object.keys(additionalFields).length) {\n\t\t\t\t\t\t\tObject.assign(body, additionalFields);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await freshserviceApiRequest.call(this, 'POST', '/agents', body);\n\t\t\t\t\t} else if (operation === 'delete') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//              agent: delete\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst agentId = this.getNodeParameter('agentId', i);\n\t\t\t\t\t\tresponseData = await freshserviceApiRequest.call(this, 'DELETE', `/agents/${agentId}`);\n\t\t\t\t\t} else if (operation === 'get') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//                agent: get\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst agentId = this.getNodeParameter('agentId', i);\n\t\t\t\t\t\tresponseData = await freshserviceApiRequest.call(this, 'GET', `/agents/${agentId}`);\n\t\t\t\t\t} else if (operation === 'getAll') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//              agent: getAll\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst qs = {} as IDataObject;\n\t\t\t\t\t\tconst filters = this.getNodeParameter('filters', i);\n\n\t\t\t\t\t\tif (Object.keys(filters).length) {\n\t\t\t\t\t\t\tObject.assign(qs, formatFilters(filters));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await handleListing.call(this, 'GET', '/agents', {}, qs);\n\t\t\t\t\t} else if (operation === 'update') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//              agent: update\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst body = {} as IDataObject;\n\t\t\t\t\t\tconst updateFields = this.getNodeParameter('updateFields', i);\n\n\t\t\t\t\t\tvalidateUpdateFields.call(this, updateFields, resource);\n\n\t\t\t\t\t\tObject.assign(body, updateFields);\n\n\t\t\t\t\t\tconst agentId = this.getNodeParameter('agentId', i);\n\t\t\t\t\t\tresponseData = await freshserviceApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'PUT',\n\t\t\t\t\t\t\t`/agents/${agentId}`,\n\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t} else if (resource === 'agentGroup') {\n\t\t\t\t\t// **********************************************************************\n\t\t\t\t\t//                               agentGroup\n\t\t\t\t\t// **********************************************************************\n\n\t\t\t\t\tif (operation === 'create') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//            agentGroup: create\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst body = {\n\t\t\t\t\t\t\tname: this.getNodeParameter('name', i),\n\t\t\t\t\t\t} as IDataObject;\n\n\t\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i);\n\n\t\t\t\t\t\tif (Object.keys(additionalFields).length) {\n\t\t\t\t\t\t\tObject.assign(body, additionalFields);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await freshserviceApiRequest.call(this, 'POST', '/groups', body);\n\t\t\t\t\t} else if (operation === 'delete') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//            agentGroup: delete\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst agentGroupId = this.getNodeParameter('agentGroupId', i);\n\t\t\t\t\t\tconst endpoint = `/groups/${agentGroupId}`;\n\t\t\t\t\t\tresponseData = await freshserviceApiRequest.call(this, 'DELETE', endpoint);\n\t\t\t\t\t} else if (operation === 'get') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//             agentGroup: get\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst agentGroupId = this.getNodeParameter('agentGroupId', i);\n\t\t\t\t\t\tconst endpoint = `/groups/${agentGroupId}`;\n\t\t\t\t\t\tresponseData = await freshserviceApiRequest.call(this, 'GET', endpoint);\n\t\t\t\t\t} else if (operation === 'getAll') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//            agentGroup: getAll\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tresponseData = await handleListing.call(this, 'GET', '/groups');\n\t\t\t\t\t} else if (operation === 'update') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//            agentGroup: update\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst body = {} as IDataObject;\n\t\t\t\t\t\tconst updateFields = this.getNodeParameter('updateFields', i);\n\n\t\t\t\t\t\tvalidateUpdateFields.call(this, updateFields, resource);\n\n\t\t\t\t\t\tObject.assign(body, updateFields);\n\n\t\t\t\t\t\tconst agentGroupId = this.getNodeParameter('agentGroupId', i);\n\t\t\t\t\t\tconst endpoint = `/groups/${agentGroupId}`;\n\t\t\t\t\t\tresponseData = await freshserviceApiRequest.call(this, 'PUT', endpoint, body);\n\t\t\t\t\t}\n\t\t\t\t} else if (resource === 'agentRole') {\n\t\t\t\t\t// **********************************************************************\n\t\t\t\t\t//                               agentRole\n\t\t\t\t\t// **********************************************************************\n\n\t\t\t\t\tif (operation === 'get') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//              agentRole: get\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst agentRoleId = this.getNodeParameter('agentRoleId', i);\n\t\t\t\t\t\tresponseData = await freshserviceApiRequest.call(this, 'GET', `/roles/${agentRoleId}`);\n\t\t\t\t\t} else if (operation === 'getAll') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//            agentRole: getAll\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tresponseData = await handleListing.call(this, 'GET', '/roles');\n\t\t\t\t\t}\n\t\t\t\t} else if (resource === 'announcement') {\n\t\t\t\t\t// **********************************************************************\n\t\t\t\t\t//                              announcement\n\t\t\t\t\t// **********************************************************************\n\n\t\t\t\t\tif (operation === 'create') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//           announcement: create\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst visibleFrom = this.getNodeParameter('visibleFrom', i) as string;\n\n\t\t\t\t\t\tconst body = {\n\t\t\t\t\t\t\ttitle: this.getNodeParameter('title', i),\n\t\t\t\t\t\t\tbody_html: this.getNodeParameter('bodyHtml', i),\n\t\t\t\t\t\t\tvisibility: this.getNodeParameter('visibility', i),\n\t\t\t\t\t\t\tvisible_from: tz(visibleFrom, defaultTimezone),\n\t\t\t\t\t\t} as IDataObject;\n\n\t\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i) as IDataObject & {\n\t\t\t\t\t\t\tadditional_emails?: string;\n\t\t\t\t\t\t\tvisible_till?: string;\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tif (Object.keys(additionalFields).length) {\n\t\t\t\t\t\t\tconst { visible_till, additional_emails, ...rest } = additionalFields;\n\n\t\t\t\t\t\t\tObject.assign(body, {\n\t\t\t\t\t\t\t\t...(additional_emails && { additional_emails: toArray(additional_emails) }),\n\t\t\t\t\t\t\t\t...(visible_till && { visible_till: tz(visible_till, defaultTimezone) }),\n\t\t\t\t\t\t\t\t...rest,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await freshserviceApiRequest.call(this, 'POST', '/announcements', body);\n\t\t\t\t\t} else if (operation === 'delete') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//           announcement: delete\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst announcementId = this.getNodeParameter('announcementId', i);\n\t\t\t\t\t\tconst endpoint = `/announcements/${announcementId}`;\n\t\t\t\t\t\tresponseData = await freshserviceApiRequest.call(this, 'DELETE', endpoint);\n\t\t\t\t\t} else if (operation === 'get') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//            announcement: get\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst announcementId = this.getNodeParameter('announcementId', i);\n\n\t\t\t\t\t\tconst endpoint = `/announcements/${announcementId}`;\n\t\t\t\t\t\tresponseData = await freshserviceApiRequest.call(this, 'GET', endpoint);\n\t\t\t\t\t} else if (operation === 'getAll') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//           announcement: getAll\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tresponseData = await handleListing.call(this, 'GET', '/announcements');\n\t\t\t\t\t} else if (operation === 'update') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//           announcement: update\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst body = {} as IDataObject;\n\t\t\t\t\t\tconst updateFields = this.getNodeParameter('updateFields', i) as IDataObject & {\n\t\t\t\t\t\t\tadditional_emails?: string;\n\t\t\t\t\t\t\tvisible_till?: string;\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tvalidateUpdateFields.call(this, updateFields, resource);\n\n\t\t\t\t\t\tconst { visible_till, additional_emails, ...rest } = updateFields;\n\n\t\t\t\t\t\tObject.assign(body, {\n\t\t\t\t\t\t\t...(additional_emails && { additional_emails: toArray(additional_emails) }),\n\t\t\t\t\t\t\t...(visible_till && { visible_till: tz(visible_till, defaultTimezone) }),\n\t\t\t\t\t\t\t...rest,\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tconst announcementId = this.getNodeParameter('announcementId', i);\n\t\t\t\t\t\tconst endpoint = `/announcements/${announcementId}`;\n\t\t\t\t\t\tresponseData = await freshserviceApiRequest.call(this, 'PUT', endpoint, body);\n\t\t\t\t\t}\n\t\t\t\t} else if (resource === 'asset') {\n\t\t\t\t\t// **********************************************************************\n\t\t\t\t\t//                                 asset\n\t\t\t\t\t// **********************************************************************\n\n\t\t\t\t\tif (operation === 'create') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//              asset: create\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst body = {\n\t\t\t\t\t\t\tasset_type_id: this.getNodeParameter('assetTypeId', i),\n\t\t\t\t\t\t\tname: this.getNodeParameter('name', i),\n\t\t\t\t\t\t} as IDataObject;\n\n\t\t\t\t\t\tconst assetFields = this.getNodeParameter(\n\t\t\t\t\t\t\t'assetFieldsUi.assetFieldValue',\n\t\t\t\t\t\t\ti,\n\t\t\t\t\t\t\t[],\n\t\t\t\t\t\t) as IDataObject[];\n\n\t\t\t\t\t\tObject.assign(body, {\n\t\t\t\t\t\t\ttype_fields: assetFields.reduce(\n\t\t\t\t\t\t\t\t(obj, value) => Object.assign(obj, { [`${value.name}`]: value.value }),\n\t\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t});\n\t\t\t\t\t\tresponseData = await freshserviceApiRequest.call(this, 'POST', '/assets', body);\n\t\t\t\t\t} else if (operation === 'delete') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//              asset: delete\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst assetDisplayId = this.getNodeParameter('assetDisplayId', i);\n\t\t\t\t\t\tresponseData = await freshserviceApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'DELETE',\n\t\t\t\t\t\t\t`/assets/${assetDisplayId}`,\n\t\t\t\t\t\t);\n\t\t\t\t\t} else if (operation === 'get') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//                asset: get\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst assetDisplayId = this.getNodeParameter('assetDisplayId', i);\n\t\t\t\t\t\tresponseData = await freshserviceApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t`/assets/${assetDisplayId}`,\n\t\t\t\t\t\t);\n\t\t\t\t\t} else if (operation === 'getAll') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//              asset: getAll\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst qs = {} as IDataObject;\n\t\t\t\t\t\tconst filters = this.getNodeParameter('filters', i);\n\n\t\t\t\t\t\tif (Object.keys(filters).length) {\n\t\t\t\t\t\t\tObject.assign(qs, formatFilters(filters));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await handleListing.call(this, 'GET', '/assets', {}, qs);\n\t\t\t\t\t} else if (operation === 'update') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//              asset: update\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst body = {} as IDataObject;\n\t\t\t\t\t\tconst updateFields = this.getNodeParameter('updateFields', i);\n\n\t\t\t\t\t\tvalidateUpdateFields.call(this, updateFields, resource);\n\n\t\t\t\t\t\tObject.assign(body, updateFields);\n\n\t\t\t\t\t\tconst assetDisplayId = this.getNodeParameter('assetDisplayId', i);\n\t\t\t\t\t\tresponseData = await freshserviceApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'PUT',\n\t\t\t\t\t\t\t`/assets/${assetDisplayId}`,\n\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t} else if (resource === 'assetType') {\n\t\t\t\t\t// **********************************************************************\n\t\t\t\t\t//                               assetType\n\t\t\t\t\t// **********************************************************************\n\n\t\t\t\t\tif (operation === 'create') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//            assetType: create\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst body = {\n\t\t\t\t\t\t\tname: this.getNodeParameter('name', i),\n\t\t\t\t\t\t} as IDataObject;\n\n\t\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i);\n\n\t\t\t\t\t\tif (Object.keys(additionalFields).length) {\n\t\t\t\t\t\t\tObject.assign(body, additionalFields);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await freshserviceApiRequest.call(this, 'POST', '/asset_types', body);\n\t\t\t\t\t} else if (operation === 'delete') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//            assetType: delete\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst assetTypeId = this.getNodeParameter('assetTypeId', i);\n\n\t\t\t\t\t\tconst endpoint = `/asset_types/${assetTypeId}`;\n\t\t\t\t\t\tresponseData = await freshserviceApiRequest.call(this, 'DELETE', endpoint);\n\t\t\t\t\t} else if (operation === 'get') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//              assetType: get\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst assetTypeId = this.getNodeParameter('assetTypeId', i);\n\t\t\t\t\t\tconst endpoint = `/asset_types/${assetTypeId}`;\n\t\t\t\t\t\tresponseData = await freshserviceApiRequest.call(this, 'GET', endpoint);\n\t\t\t\t\t} else if (operation === 'getAll') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//            assetType: getAll\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tresponseData = await handleListing.call(this, 'GET', '/asset_types');\n\t\t\t\t\t} else if (operation === 'update') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//            assetType: update\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst body = {} as IDataObject;\n\t\t\t\t\t\tconst updateFields = this.getNodeParameter('updateFields', i);\n\n\t\t\t\t\t\tvalidateUpdateFields.call(this, updateFields, resource);\n\n\t\t\t\t\t\tObject.assign(body, updateFields);\n\n\t\t\t\t\t\tconst assetTypeId = this.getNodeParameter('assetTypeId', i);\n\t\t\t\t\t\tconst endpoint = `/asset_types/${assetTypeId}`;\n\t\t\t\t\t\tresponseData = await freshserviceApiRequest.call(this, 'PUT', endpoint, body);\n\t\t\t\t\t}\n\t\t\t\t} else if (resource === 'change') {\n\t\t\t\t\t// **********************************************************************\n\t\t\t\t\t//                                 change\n\t\t\t\t\t// **********************************************************************\n\n\t\t\t\t\tif (operation === 'create') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//              change: create\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst body = {\n\t\t\t\t\t\t\trequester_id: this.getNodeParameter('requesterId', i),\n\t\t\t\t\t\t\tsubject: this.getNodeParameter('subject', i),\n\t\t\t\t\t\t\tplanned_start_date: this.getNodeParameter('plannedStartDate', i),\n\t\t\t\t\t\t\tplanned_end_date: this.getNodeParameter('plannedEndDate', i),\n\t\t\t\t\t\t\tstatus: 1,\n\t\t\t\t\t\t\tpriority: 1,\n\t\t\t\t\t\t\timpact: 1,\n\t\t\t\t\t\t\trisk: 1,\n\t\t\t\t\t\t\tchange_type: 1,\n\t\t\t\t\t\t} as IDataObject;\n\n\t\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i);\n\n\t\t\t\t\t\tif (Object.keys(additionalFields).length) {\n\t\t\t\t\t\t\tObject.assign(body, additionalFields);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await freshserviceApiRequest.call(this, 'POST', '/changes', body);\n\t\t\t\t\t} else if (operation === 'delete') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//              change: delete\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst changeId = this.getNodeParameter('changeId', i);\n\t\t\t\t\t\tresponseData = await freshserviceApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'DELETE',\n\t\t\t\t\t\t\t`/changes/${changeId}`,\n\t\t\t\t\t\t);\n\t\t\t\t\t} else if (operation === 'get') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//               change: get\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst changeId = this.getNodeParameter('changeId', i);\n\t\t\t\t\t\tresponseData = await freshserviceApiRequest.call(this, 'GET', `/changes/${changeId}`);\n\t\t\t\t\t} else if (operation === 'getAll') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//              change: getAll\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst qs = {} as IDataObject;\n\t\t\t\t\t\tconst filters = this.getNodeParameter('filters', i);\n\n\t\t\t\t\t\tif (Object.keys(filters).length) {\n\t\t\t\t\t\t\tObject.assign(qs, formatFilters(filters));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await handleListing.call(this, 'GET', '/changes', {}, qs);\n\t\t\t\t\t} else if (operation === 'update') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//              change: update\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst body = {} as IDataObject;\n\t\t\t\t\t\tconst updateFields = this.getNodeParameter('updateFields', i);\n\n\t\t\t\t\t\tvalidateUpdateFields.call(this, updateFields, resource);\n\n\t\t\t\t\t\tObject.assign(body, updateFields);\n\n\t\t\t\t\t\tconst changeId = this.getNodeParameter('changeId', i);\n\t\t\t\t\t\tresponseData = await freshserviceApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'PUT',\n\t\t\t\t\t\t\t`/changes/${changeId}`,\n\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t} else if (resource === 'department') {\n\t\t\t\t\t// **********************************************************************\n\t\t\t\t\t//                               department\n\t\t\t\t\t// **********************************************************************\n\n\t\t\t\t\tif (operation === 'create') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//            department: create\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst body = {\n\t\t\t\t\t\t\tname: this.getNodeParameter('name', i),\n\t\t\t\t\t\t} as IDataObject;\n\n\t\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i) as IDataObject & {\n\t\t\t\t\t\t\tdomains?: string;\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tif (Object.keys(additionalFields).length) {\n\t\t\t\t\t\t\tconst { domains, ...rest } = additionalFields;\n\t\t\t\t\t\t\tObject.assign(body, {\n\t\t\t\t\t\t\t\t...(domains && { domains: toArray(domains) }),\n\t\t\t\t\t\t\t\t...rest,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await freshserviceApiRequest.call(this, 'POST', '/departments', body);\n\t\t\t\t\t} else if (operation === 'delete') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//            department: delete\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst departmentId = this.getNodeParameter('departmentId', i);\n\t\t\t\t\t\tconst endpoint = `/departments/${departmentId}`;\n\t\t\t\t\t\tresponseData = await freshserviceApiRequest.call(this, 'DELETE', endpoint);\n\t\t\t\t\t} else if (operation === 'get') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//             department: get\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst departmentId = this.getNodeParameter('departmentId', i);\n\t\t\t\t\t\tconst endpoint = `/departments/${departmentId}`;\n\t\t\t\t\t\tresponseData = await freshserviceApiRequest.call(this, 'GET', endpoint);\n\t\t\t\t\t} else if (operation === 'getAll') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//            department: getAll\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst qs = {} as IDataObject;\n\t\t\t\t\t\tconst filters = this.getNodeParameter('filters', i);\n\n\t\t\t\t\t\tif (Object.keys(filters).length) {\n\t\t\t\t\t\t\tObject.assign(qs, formatFilters(filters));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await handleListing.call(this, 'GET', '/departments', {}, qs);\n\t\t\t\t\t} else if (operation === 'update') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//            department: update\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst body = {} as IDataObject;\n\t\t\t\t\t\tconst updateFields = this.getNodeParameter('updateFields', i) as IDataObject & {\n\t\t\t\t\t\t\tdomains?: string;\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tvalidateUpdateFields.call(this, updateFields, resource);\n\n\t\t\t\t\t\tconst { domains, ...rest } = updateFields;\n\t\t\t\t\t\tObject.assign(body, {\n\t\t\t\t\t\t\t...(domains && { domains: toArray(domains) }),\n\t\t\t\t\t\t\t...rest,\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tconst departmentId = this.getNodeParameter('departmentId', i);\n\t\t\t\t\t\tconst endpoint = `/departments/${departmentId}`;\n\t\t\t\t\t\tresponseData = await freshserviceApiRequest.call(this, 'PUT', endpoint, body);\n\t\t\t\t\t}\n\t\t\t\t} else if (resource === 'location') {\n\t\t\t\t\t// **********************************************************************\n\t\t\t\t\t//                                location\n\t\t\t\t\t// **********************************************************************\n\n\t\t\t\t\tif (operation === 'create') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//             location: create\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst body = {\n\t\t\t\t\t\t\tname: this.getNodeParameter('name', i),\n\t\t\t\t\t\t} as IDataObject;\n\n\t\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i) as IDataObject &\n\t\t\t\t\t\t\tAddressFixedCollection;\n\n\t\t\t\t\t\tif (Object.keys(additionalFields).length) {\n\t\t\t\t\t\t\tObject.assign(body, adjustAddress(additionalFields));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await freshserviceApiRequest.call(this, 'POST', '/locations', body);\n\t\t\t\t\t} else if (operation === 'delete') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//             location: delete\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst locationId = this.getNodeParameter('locationId', i);\n\t\t\t\t\t\tconst endpoint = `/locations/${locationId}`;\n\t\t\t\t\t\tresponseData = await freshserviceApiRequest.call(this, 'DELETE', endpoint);\n\t\t\t\t\t} else if (operation === 'get') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//              location: get\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst locationId = this.getNodeParameter('locationId', i);\n\t\t\t\t\t\tconst endpoint = `/locations/${locationId}`;\n\t\t\t\t\t\tresponseData = await freshserviceApiRequest.call(this, 'GET', endpoint);\n\t\t\t\t\t} else if (operation === 'getAll') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//             location: getAll\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tresponseData = await handleListing.call(this, 'GET', '/locations');\n\t\t\t\t\t} else if (operation === 'update') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//             location: update\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst body = {} as IDataObject;\n\t\t\t\t\t\tconst updateFields = this.getNodeParameter('updateFields', i);\n\n\t\t\t\t\t\tvalidateUpdateFields.call(this, updateFields, resource);\n\n\t\t\t\t\t\tObject.assign(body, adjustAddress(updateFields));\n\n\t\t\t\t\t\tconst locationId = this.getNodeParameter('locationId', i);\n\t\t\t\t\t\tconst endpoint = `/locations/${locationId}`;\n\t\t\t\t\t\tresponseData = await freshserviceApiRequest.call(this, 'PUT', endpoint, body);\n\t\t\t\t\t}\n\t\t\t\t} else if (resource === 'problem') {\n\t\t\t\t\t// **********************************************************************\n\t\t\t\t\t//                                problem\n\t\t\t\t\t// **********************************************************************\n\n\t\t\t\t\tif (operation === 'create') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//             problem: create\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst body = {\n\t\t\t\t\t\t\tsubject: this.getNodeParameter('subject', i),\n\t\t\t\t\t\t\trequester_id: this.getNodeParameter('requesterId', i),\n\t\t\t\t\t\t\tdue_by: this.getNodeParameter('dueBy', i),\n\t\t\t\t\t\t\tstatus: 1,\n\t\t\t\t\t\t\tpriority: 1,\n\t\t\t\t\t\t\timpact: 1,\n\t\t\t\t\t\t} as IDataObject;\n\n\t\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i);\n\n\t\t\t\t\t\tif (Object.keys(additionalFields).length) {\n\t\t\t\t\t\t\tObject.assign(body, additionalFields);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await freshserviceApiRequest.call(this, 'POST', '/problems', body);\n\t\t\t\t\t} else if (operation === 'delete') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//             problem: delete\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst problemId = this.getNodeParameter('problemId', i);\n\t\t\t\t\t\tconst endpoint = `/problems/${problemId}`;\n\t\t\t\t\t\tresponseData = await freshserviceApiRequest.call(this, 'DELETE', endpoint);\n\t\t\t\t\t} else if (operation === 'get') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//               problem: get\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst problemId = this.getNodeParameter('problemId', i);\n\t\t\t\t\t\tconst endpoint = `/problems/${problemId}`;\n\t\t\t\t\t\tresponseData = await freshserviceApiRequest.call(this, 'GET', endpoint);\n\t\t\t\t\t} else if (operation === 'getAll') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//             problem: getAll\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tresponseData = await handleListing.call(this, 'GET', '/problems');\n\t\t\t\t\t} else if (operation === 'update') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//             problem: update\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst body = {} as IDataObject;\n\t\t\t\t\t\tconst updateFields = this.getNodeParameter('updateFields', i);\n\n\t\t\t\t\t\tvalidateUpdateFields.call(this, updateFields, resource);\n\n\t\t\t\t\t\tObject.assign(body, updateFields);\n\n\t\t\t\t\t\tconst problemId = this.getNodeParameter('problemId', i);\n\t\t\t\t\t\tconst endpoint = `/problems/${problemId}`;\n\t\t\t\t\t\tresponseData = await freshserviceApiRequest.call(this, 'PUT', endpoint, body);\n\t\t\t\t\t}\n\t\t\t\t} else if (resource === 'product') {\n\t\t\t\t\t// **********************************************************************\n\t\t\t\t\t//                                product\n\t\t\t\t\t// **********************************************************************\n\n\t\t\t\t\tif (operation === 'create') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//             product: create\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst body = {\n\t\t\t\t\t\t\tasset_type_id: this.getNodeParameter('assetTypeId', i),\n\t\t\t\t\t\t\tname: this.getNodeParameter('name', i),\n\t\t\t\t\t\t} as IDataObject;\n\n\t\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i);\n\n\t\t\t\t\t\tif (Object.keys(additionalFields).length) {\n\t\t\t\t\t\t\tObject.assign(body, additionalFields);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await freshserviceApiRequest.call(this, 'POST', '/products', body);\n\t\t\t\t\t} else if (operation === 'delete') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//             product: delete\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst productId = this.getNodeParameter('productId', i);\n\n\t\t\t\t\t\tconst endpoint = `/products/${productId}`;\n\t\t\t\t\t\tresponseData = await freshserviceApiRequest.call(this, 'DELETE', endpoint);\n\t\t\t\t\t} else if (operation === 'get') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//               product: get\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst productId = this.getNodeParameter('productId', i);\n\t\t\t\t\t\tconst endpoint = `/products/${productId}`;\n\t\t\t\t\t\tresponseData = await freshserviceApiRequest.call(this, 'GET', endpoint);\n\t\t\t\t\t} else if (operation === 'getAll') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//             product: getAll\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tresponseData = await handleListing.call(this, 'GET', '/products');\n\t\t\t\t\t} else if (operation === 'update') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//             product: update\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst body = {} as IDataObject;\n\t\t\t\t\t\tconst updateFields = this.getNodeParameter('updateFields', i);\n\n\t\t\t\t\t\tObject.assign(body, updateFields);\n\n\t\t\t\t\t\tconst productId = this.getNodeParameter('productId', i);\n\t\t\t\t\t\tconst endpoint = `/products/${productId}`;\n\t\t\t\t\t\tresponseData = await freshserviceApiRequest.call(this, 'PUT', endpoint, body);\n\t\t\t\t\t}\n\t\t\t\t} else if (resource === 'release') {\n\t\t\t\t\t// **********************************************************************\n\t\t\t\t\t//                                release\n\t\t\t\t\t// **********************************************************************\n\n\t\t\t\t\tif (operation === 'create') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//             release: create\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst body = {\n\t\t\t\t\t\t\tsubject: this.getNodeParameter('subject', i),\n\t\t\t\t\t\t\trelease_type: this.getNodeParameter('releaseType', i),\n\t\t\t\t\t\t\tstatus: this.getNodeParameter('status', i),\n\t\t\t\t\t\t\tpriority: this.getNodeParameter('priority', i),\n\t\t\t\t\t\t\tplanned_start_date: this.getNodeParameter('plannedStartDate', i),\n\t\t\t\t\t\t\tplanned_end_date: this.getNodeParameter('plannedEndDate', i),\n\t\t\t\t\t\t} as IDataObject;\n\n\t\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i);\n\n\t\t\t\t\t\tif (Object.keys(additionalFields).length) {\n\t\t\t\t\t\t\tObject.assign(body, additionalFields);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await freshserviceApiRequest.call(this, 'POST', '/releases', body);\n\t\t\t\t\t} else if (operation === 'delete') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//             release: delete\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst releaseId = this.getNodeParameter('releaseId', i);\n\t\t\t\t\t\tconst endpoint = `/releases/${releaseId}`;\n\t\t\t\t\t\tresponseData = await freshserviceApiRequest.call(this, 'DELETE', endpoint);\n\t\t\t\t\t} else if (operation === 'get') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//               release: get\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst releaseId = this.getNodeParameter('releaseId', i);\n\t\t\t\t\t\tconst endpoint = `/releases/${releaseId}`;\n\t\t\t\t\t\tresponseData = await freshserviceApiRequest.call(this, 'GET', endpoint);\n\t\t\t\t\t} else if (operation === 'getAll') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//             release: getAll\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tresponseData = await handleListing.call(this, 'GET', '/releases');\n\t\t\t\t\t} else if (operation === 'update') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//             release: update\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst body = {} as IDataObject;\n\t\t\t\t\t\tconst updateFields = this.getNodeParameter('updateFields', i);\n\n\t\t\t\t\t\tObject.assign(body, updateFields);\n\n\t\t\t\t\t\tconst releaseId = this.getNodeParameter('releaseId', i);\n\t\t\t\t\t\tconst endpoint = `/releases/${releaseId}`;\n\t\t\t\t\t\tresponseData = await freshserviceApiRequest.call(this, 'PUT', endpoint, body);\n\t\t\t\t\t}\n\t\t\t\t} else if (resource === 'requester') {\n\t\t\t\t\t// **********************************************************************\n\t\t\t\t\t//                               requester\n\t\t\t\t\t// **********************************************************************\n\n\t\t\t\t\tif (operation === 'create') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//            requester: create\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst body = {\n\t\t\t\t\t\t\tfirst_name: this.getNodeParameter('firstName', i),\n\t\t\t\t\t\t\tprimary_email: this.getNodeParameter('primaryEmail', i),\n\t\t\t\t\t\t} as IDataObject;\n\n\t\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i) as IDataObject & {\n\t\t\t\t\t\t\tsecondary_emails?: string;\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tif (Object.keys(additionalFields).length) {\n\t\t\t\t\t\t\tconst { secondary_emails, ...rest } = additionalFields;\n\n\t\t\t\t\t\t\tObject.assign(body, {\n\t\t\t\t\t\t\t\t...(secondary_emails && { secondary_emails: toArray(secondary_emails) }),\n\t\t\t\t\t\t\t\t...rest,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await freshserviceApiRequest.call(this, 'POST', '/requesters', body);\n\t\t\t\t\t} else if (operation === 'delete') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//            requester: delete\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst requesterId = this.getNodeParameter('requesterId', i);\n\t\t\t\t\t\tconst endpoint = `/requesters/${requesterId}`;\n\t\t\t\t\t\tresponseData = await freshserviceApiRequest.call(this, 'DELETE', endpoint);\n\t\t\t\t\t} else if (operation === 'get') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//              requester: get\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst requesterId = this.getNodeParameter('requesterId', i);\n\t\t\t\t\t\tconst endpoint = `/requesters/${requesterId}`;\n\t\t\t\t\t\tresponseData = await freshserviceApiRequest.call(this, 'GET', endpoint);\n\t\t\t\t\t} else if (operation === 'getAll') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//            requester: getAll\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst qs = {} as IDataObject;\n\t\t\t\t\t\tconst filters = this.getNodeParameter('filters', i);\n\n\t\t\t\t\t\tif (Object.keys(filters).length) {\n\t\t\t\t\t\t\tObject.assign(qs, formatFilters(filters));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await handleListing.call(this, 'GET', '/requesters', {}, qs);\n\t\t\t\t\t} else if (operation === 'update') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//            requester: update\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst body = {} as IDataObject;\n\t\t\t\t\t\tconst updateFields = this.getNodeParameter('updateFields', i) as IDataObject & {\n\t\t\t\t\t\t\tsecondary_emails?: string;\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tvalidateUpdateFields.call(this, updateFields, resource);\n\n\t\t\t\t\t\tconst { secondary_emails, ...rest } = updateFields;\n\n\t\t\t\t\t\tObject.assign(body, {\n\t\t\t\t\t\t\t...(secondary_emails && { secondary_emails: toArray(secondary_emails) }),\n\t\t\t\t\t\t\t...rest,\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tconst requesterId = this.getNodeParameter('requesterId', i);\n\t\t\t\t\t\tconst endpoint = `/requesters/${requesterId}`;\n\t\t\t\t\t\tresponseData = await freshserviceApiRequest.call(this, 'PUT', endpoint, body);\n\t\t\t\t\t}\n\t\t\t\t} else if (resource === 'requesterGroup') {\n\t\t\t\t\t// **********************************************************************\n\t\t\t\t\t//                             requesterGroup\n\t\t\t\t\t// **********************************************************************\n\n\t\t\t\t\tif (operation === 'create') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//          requesterGroup: create\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst body = {\n\t\t\t\t\t\t\tname: this.getNodeParameter('name', i),\n\t\t\t\t\t\t} as IDataObject;\n\n\t\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i);\n\n\t\t\t\t\t\tif (Object.keys(additionalFields).length) {\n\t\t\t\t\t\t\tObject.assign(body, additionalFields);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await freshserviceApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'POST',\n\t\t\t\t\t\t\t'/requester_groups',\n\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t);\n\t\t\t\t\t} else if (operation === 'delete') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//          requesterGroup: delete\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst requesterGroupId = this.getNodeParameter('requesterGroupId', i);\n\t\t\t\t\t\tconst endpoint = `/requester_groups/${requesterGroupId}`;\n\t\t\t\t\t\tresponseData = await freshserviceApiRequest.call(this, 'DELETE', endpoint);\n\t\t\t\t\t} else if (operation === 'get') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//           requesterGroup: get\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst requesterGroupId = this.getNodeParameter('requesterGroupId', i);\n\t\t\t\t\t\tconst endpoint = `/requester_groups/${requesterGroupId}`;\n\t\t\t\t\t\tresponseData = await freshserviceApiRequest.call(this, 'GET', endpoint);\n\t\t\t\t\t} else if (operation === 'getAll') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//          requesterGroup: getAll\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tresponseData = await handleListing.call(this, 'GET', '/requester_groups');\n\t\t\t\t\t} else if (operation === 'update') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//          requesterGroup: update\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst body = {} as IDataObject;\n\t\t\t\t\t\tconst updateFields = this.getNodeParameter('updateFields', i);\n\n\t\t\t\t\t\tvalidateUpdateFields.call(this, updateFields, resource);\n\n\t\t\t\t\t\tObject.assign(body, updateFields);\n\n\t\t\t\t\t\tconst requesterGroupId = this.getNodeParameter('requesterGroupId', i);\n\t\t\t\t\t\tconst endpoint = `/requester_groups/${requesterGroupId}`;\n\t\t\t\t\t\tresponseData = await freshserviceApiRequest.call(this, 'PUT', endpoint, body);\n\t\t\t\t\t}\n\t\t\t\t} else if (resource === 'software') {\n\t\t\t\t\t// **********************************************************************\n\t\t\t\t\t//                                software\n\t\t\t\t\t// **********************************************************************\n\n\t\t\t\t\tif (operation === 'create') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//             software: create\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst body = {\n\t\t\t\t\t\t\tapplication: {\n\t\t\t\t\t\t\t\tapplication_type: this.getNodeParameter('applicationType', i),\n\t\t\t\t\t\t\t\tname: this.getNodeParameter('name', i),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t} as IDataObject;\n\n\t\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i);\n\n\t\t\t\t\t\tif (Object.keys(additionalFields).length) {\n\t\t\t\t\t\t\tObject.assign(body.application!, additionalFields);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await freshserviceApiRequest.call(this, 'POST', '/applications', body);\n\t\t\t\t\t} else if (operation === 'delete') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//             software: delete\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst softwareId = this.getNodeParameter('softwareId', i);\n\t\t\t\t\t\tconst endpoint = `/applications/${softwareId}`;\n\t\t\t\t\t\tresponseData = await freshserviceApiRequest.call(this, 'DELETE', endpoint);\n\t\t\t\t\t} else if (operation === 'get') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//              software: get\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst softwareId = this.getNodeParameter('softwareId', i);\n\t\t\t\t\t\tconst endpoint = `/applications/${softwareId}`;\n\t\t\t\t\t\tresponseData = await freshserviceApiRequest.call(this, 'GET', endpoint);\n\t\t\t\t\t} else if (operation === 'getAll') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//             software: getAll\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tresponseData = await handleListing.call(this, 'GET', '/applications');\n\t\t\t\t\t} else if (operation === 'update') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//             software: update\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst body = { application: {} } as IDataObject;\n\t\t\t\t\t\tconst updateFields = this.getNodeParameter('updateFields', i);\n\n\t\t\t\t\t\tvalidateUpdateFields.call(this, updateFields, resource);\n\n\t\t\t\t\t\tObject.assign(body.application!, updateFields);\n\n\t\t\t\t\t\tconst softwareId = this.getNodeParameter('softwareId', i);\n\t\t\t\t\t\tconst endpoint = `/applications/${softwareId}`;\n\t\t\t\t\t\tresponseData = await freshserviceApiRequest.call(this, 'PUT', endpoint, body);\n\t\t\t\t\t}\n\t\t\t\t} else if (resource === 'ticket') {\n\t\t\t\t\t// **********************************************************************\n\t\t\t\t\t//                                 ticket\n\t\t\t\t\t// **********************************************************************\n\n\t\t\t\t\tif (operation === 'create') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//              ticket: create\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst body = {\n\t\t\t\t\t\t\temail: this.getNodeParameter('email', i),\n\t\t\t\t\t\t\tsubject: this.getNodeParameter('subject', i),\n\t\t\t\t\t\t\tdescription: this.getNodeParameter('description', i),\n\t\t\t\t\t\t\tpriority: this.getNodeParameter('priority', i),\n\t\t\t\t\t\t\tstatus: this.getNodeParameter('status', i),\n\t\t\t\t\t\t} as IDataObject;\n\n\t\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i) as IDataObject & {\n\t\t\t\t\t\t\tcc_emails?: string;\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tif (Object.keys(additionalFields).length) {\n\t\t\t\t\t\t\tconst { cc_emails, ...rest } = additionalFields;\n\n\t\t\t\t\t\t\tObject.assign(body, {\n\t\t\t\t\t\t\t\t...(cc_emails && { cc_emails: toArray(cc_emails) }),\n\t\t\t\t\t\t\t\t...rest,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await freshserviceApiRequest.call(this, 'POST', '/tickets', body);\n\t\t\t\t\t} else if (operation === 'delete') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//              ticket: delete\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst ticketId = this.getNodeParameter('ticketId', i);\n\t\t\t\t\t\tresponseData = await freshserviceApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'DELETE',\n\t\t\t\t\t\t\t`/tickets/${ticketId}`,\n\t\t\t\t\t\t);\n\t\t\t\t\t} else if (operation === 'get') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//               ticket: get\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst ticketId = this.getNodeParameter('ticketId', i);\n\t\t\t\t\t\tresponseData = await freshserviceApiRequest.call(this, 'GET', `/tickets/${ticketId}`);\n\t\t\t\t\t} else if (operation === 'getAll') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//              ticket: getAll\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst qs = {} as IDataObject;\n\t\t\t\t\t\tconst filters = this.getNodeParameter('filters', i);\n\t\t\t\t\t\tlet endpoint = '';\n\n\t\t\t\t\t\tif (Object.keys(filters).length) {\n\t\t\t\t\t\t\tObject.assign(qs, formatFilters(filters));\n\t\t\t\t\t\t\tendpoint = '/tickets/filter';\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tendpoint = '/tickets';\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await handleListing.call(this, 'GET', endpoint, {}, qs);\n\t\t\t\t\t} else if (operation === 'update') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//              ticket: update\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst body = {} as IDataObject;\n\t\t\t\t\t\tconst updateFields = this.getNodeParameter('updateFields', i);\n\n\t\t\t\t\t\tvalidateUpdateFields.call(this, updateFields, resource);\n\n\t\t\t\t\t\tObject.assign(body, updateFields);\n\n\t\t\t\t\t\tconst ticketId = this.getNodeParameter('ticketId', i);\n\t\t\t\t\t\tresponseData = await freshserviceApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'PUT',\n\t\t\t\t\t\t\t`/tickets/${ticketId}`,\n\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (operation === 'delete' && !responseData) {\n\t\t\t\t\tresponseData = { success: true };\n\t\t\t\t} else if (operation !== 'getAll') {\n\t\t\t\t\tconst special: { [key: string]: string } = {\n\t\t\t\t\t\tagentGroup: 'group',\n\t\t\t\t\t\tagentRole: 'role',\n\t\t\t\t\t\tassetType: 'asset_type',\n\t\t\t\t\t\trequesterGroup: 'requester_group',\n\t\t\t\t\t\tsoftware: 'application',\n\t\t\t\t\t};\n\t\t\t\t\tresponseData = responseData[special[resource]] ?? responseData[resource];\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\tconst executionErrorData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\tthis.helpers.returnJsonArray({ error: error.message }),\n\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t);\n\t\t\t\t\treturnData.push(...executionErrorData);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tthrow error;\n\t\t\t}\n\n\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t{ itemData: { item: i } },\n\t\t\t);\n\t\t\treturnData.push(...executionData);\n\t\t}\n\n\t\treturn [returnData];\n\t}\n}\n"],"mappings":"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","names":[]}