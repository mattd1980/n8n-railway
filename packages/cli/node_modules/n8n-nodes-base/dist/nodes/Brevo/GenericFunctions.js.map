{"version":3,"sources":["../../../nodes/Brevo/GenericFunctions.ts"],"sourcesContent":["import type {\n\tIExecuteSingleFunctions,\n\tIHookFunctions,\n\tIHttpRequestOptions,\n\tIRequestOptions,\n\tIWebhookFunctions,\n\tJsonObject,\n} from 'n8n-workflow';\nimport { jsonParse, NodeOperationError } from 'n8n-workflow';\nimport MailComposer from 'nodemailer/lib/mail-composer';\nexport namespace BrevoNode {\n\ttype ValidEmailFields = { to: string } | { sender: string } | { cc: string } | { bcc: string };\n\ttype Address = { address: string; name?: string };\n\ttype Email = { email: string; name?: string };\n\ttype ToEmail = { to: Email[] };\n\ttype SenderEmail = { sender: Email };\n\ttype CCEmail = { cc: Email[] };\n\ttype BBCEmail = { bbc: Email[] };\n\ttype ValidatedEmail = ToEmail | SenderEmail | CCEmail | BBCEmail;\n\n\tconst OVERRIDE_MAP_VALUES = {\n\t\tCATEGORY: 'category',\n\t\tNORMAL: 'boolean',\n\t\tTRANSACTIONAL: 'id',\n\t} as const;\n\n\tconst OVERRIDE_MAP_TYPE = {\n\t\tCATEGORY: 'category',\n\t\tNORMAL: 'normal',\n\t\tTRANSACTIONAL: 'transactional',\n\t} as const;\n\n\texport const INTERCEPTORS = new Map<string, (body: JsonObject) => void>([\n\t\t[\n\t\t\tOVERRIDE_MAP_TYPE.CATEGORY,\n\t\t\t(body: JsonObject) => {\n\t\t\t\tbody.type = OVERRIDE_MAP_VALUES.CATEGORY;\n\t\t\t},\n\t\t],\n\t\t[\n\t\t\tOVERRIDE_MAP_TYPE.NORMAL,\n\t\t\t(body: JsonObject) => {\n\t\t\t\tbody.type = OVERRIDE_MAP_VALUES.NORMAL;\n\t\t\t},\n\t\t],\n\t\t[\n\t\t\tOVERRIDE_MAP_TYPE.TRANSACTIONAL,\n\t\t\t(body: JsonObject) => {\n\t\t\t\tbody.type = OVERRIDE_MAP_VALUES.TRANSACTIONAL;\n\t\t\t},\n\t\t],\n\t]);\n\texport namespace Validators {\n\t\tfunction getFileName(\n\t\t\titemIndex: number,\n\t\t\tmimeType: string,\n\t\t\tfileExt: string,\n\t\t\tfileName: string,\n\t\t): string {\n\t\t\tlet ext = fileExt;\n\t\t\tif (fileExt === undefined) {\n\t\t\t\text = mimeType.split('/')[1];\n\t\t\t}\n\n\t\t\tlet name = `${fileName}.${ext}`;\n\t\t\tif (fileName === undefined) {\n\t\t\t\tname = `file-${itemIndex}.${ext}`;\n\t\t\t}\n\t\t\treturn name;\n\t\t}\n\n\t\texport async function validateAndCompileAttachmentsData(\n\t\t\tthis: IExecuteSingleFunctions,\n\t\t\trequestOptions: IHttpRequestOptions,\n\t\t): Promise<IHttpRequestOptions> {\n\t\t\tconst dataPropertyList = this.getNodeParameter(\n\t\t\t\t'additionalFields.emailAttachments.attachment',\n\t\t\t) as JsonObject;\n\t\t\tconst { body } = requestOptions;\n\n\t\t\tconst { attachment = [] } = body as { attachment: Array<{ content: string; name: string }> };\n\n\t\t\ttry {\n\t\t\t\tconst { binaryPropertyName } = dataPropertyList;\n\t\t\t\tconst dataMappingList = (binaryPropertyName as string).split(',');\n\t\t\t\tfor (const attachmentDataName of dataMappingList) {\n\t\t\t\t\tconst binaryData = this.helpers.assertBinaryData(attachmentDataName);\n\t\t\t\t\tconst bufferFromIncomingData = await this.helpers.getBinaryDataBuffer(attachmentDataName);\n\n\t\t\t\t\tconst {\n\t\t\t\t\t\tdata: content,\n\t\t\t\t\t\tmimeType,\n\t\t\t\t\t\tfileName,\n\t\t\t\t\t\tfileExtension,\n\t\t\t\t\t} = await this.helpers.prepareBinaryData(bufferFromIncomingData);\n\n\t\t\t\t\tconst itemIndex = this.getItemIndex();\n\t\t\t\t\tconst name = getFileName(\n\t\t\t\t\t\titemIndex,\n\t\t\t\t\t\tmimeType,\n\t\t\t\t\t\tfileExtension!,\n\t\t\t\t\t\tfileName ?? binaryData.fileName!,\n\t\t\t\t\t);\n\n\t\t\t\t\tattachment.push({ content, name });\n\t\t\t\t}\n\n\t\t\t\tObject.assign(body!, { attachment });\n\n\t\t\t\treturn requestOptions;\n\t\t\t} catch (err) {\n\t\t\t\tthrow new NodeOperationError(this.getNode(), err as Error);\n\t\t\t}\n\t\t}\n\n\t\texport async function validateAndCompileTags(\n\t\t\tthis: IExecuteSingleFunctions,\n\t\t\trequestOptions: IHttpRequestOptions,\n\t\t): Promise<IHttpRequestOptions> {\n\t\t\tconst { tag } = this.getNodeParameter('additionalFields.emailTags.tags') as JsonObject;\n\t\t\tconst tags = (tag as string)\n\t\t\t\t.split(',')\n\t\t\t\t.map((entry) => entry.trim())\n\t\t\t\t.filter((entry) => {\n\t\t\t\t\treturn entry !== '';\n\t\t\t\t});\n\t\t\tconst { body } = requestOptions;\n\t\t\tObject.assign(body!, { tags });\n\t\t\treturn requestOptions;\n\t\t}\n\n\t\tfunction formatToEmailName(data: Address): Email {\n\t\t\tconst { address: email, name } = data;\n\t\t\tconst result = { email };\n\t\t\tif (name !== undefined && name !== '') {\n\t\t\t\tObject.assign(result, { name });\n\t\t\t}\n\t\t\treturn { ...result };\n\t\t}\n\n\t\tfunction validateEmailStrings(input: ValidEmailFields): ValidatedEmail {\n\t\t\tconst composer = new MailComposer({ ...input });\n\t\t\tconst addressFields = composer.compile().getAddresses();\n\n\t\t\tconst fieldFetcher = new Map<string, () => Email[] | Email>([\n\t\t\t\t[\n\t\t\t\t\t'bcc',\n\t\t\t\t\t() => {\n\t\t\t\t\t\treturn (addressFields.bcc as unknown as Address[])?.map(formatToEmailName);\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t'cc',\n\t\t\t\t\t() => {\n\t\t\t\t\t\treturn (addressFields.cc as unknown as Address[])?.map(formatToEmailName);\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t'from',\n\t\t\t\t\t() => {\n\t\t\t\t\t\treturn (addressFields.from as unknown as Address[])?.map(formatToEmailName);\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t'reply-to',\n\t\t\t\t\t() => {\n\t\t\t\t\t\treturn (addressFields['reply-to'] as unknown as Address[])?.map(formatToEmailName);\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t'sender',\n\t\t\t\t\t() => {\n\t\t\t\t\t\treturn (addressFields.sender as unknown as Address[])?.map(formatToEmailName)[0];\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t'to',\n\t\t\t\t\t() => {\n\t\t\t\t\t\treturn (addressFields.to as unknown as Address[])?.map(formatToEmailName);\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t]);\n\n\t\t\tconst result: { [key in keyof ValidatedEmail]: Email[] | Email } = {} as ValidatedEmail;\n\t\t\tObject.keys(input).reduce((obj: { [key: string]: Email[] | Email }, key: string) => {\n\t\t\t\tconst getter = fieldFetcher.get(key);\n\t\t\t\tconst value = getter!();\n\t\t\t\tobj[key] = value;\n\t\t\t\treturn obj;\n\t\t\t}, result);\n\n\t\t\treturn result as ValidatedEmail;\n\t\t}\n\n\t\texport async function validateAndCompileCCEmails(\n\t\t\tthis: IExecuteSingleFunctions,\n\t\t\trequestOptions: IHttpRequestOptions,\n\t\t): Promise<IHttpRequestOptions> {\n\t\t\tconst ccData = this.getNodeParameter(\n\t\t\t\t'additionalFields.receipientsCC.receipientCc',\n\t\t\t) as JsonObject;\n\t\t\tconst { cc } = ccData;\n\t\t\tconst { body } = requestOptions;\n\t\t\tconst data = validateEmailStrings({ cc: cc as string });\n\t\t\tObject.assign(body!, data);\n\n\t\t\treturn requestOptions;\n\t\t}\n\n\t\texport async function validateAndCompileBCCEmails(\n\t\t\tthis: IExecuteSingleFunctions,\n\t\t\trequestOptions: IHttpRequestOptions,\n\t\t): Promise<IHttpRequestOptions> {\n\t\t\tconst bccData = this.getNodeParameter(\n\t\t\t\t'additionalFields.receipientsBCC.receipientBcc',\n\t\t\t) as JsonObject;\n\t\t\tconst { bcc } = bccData;\n\t\t\tconst { body } = requestOptions;\n\t\t\tconst data = validateEmailStrings({ bcc: bcc as string });\n\t\t\tObject.assign(body!, data);\n\n\t\t\treturn requestOptions;\n\t\t}\n\n\t\texport async function validateAndCompileReceipientEmails(\n\t\t\tthis: IExecuteSingleFunctions,\n\t\t\trequestOptions: IHttpRequestOptions,\n\t\t): Promise<IHttpRequestOptions> {\n\t\t\tconst to = this.getNodeParameter('receipients') as string;\n\t\t\tconst { body } = requestOptions;\n\t\t\tconst data = validateEmailStrings({ to });\n\t\t\tObject.assign(body!, data);\n\n\t\t\treturn requestOptions;\n\t\t}\n\n\t\texport async function validateAndCompileSenderEmail(\n\t\t\tthis: IExecuteSingleFunctions,\n\t\t\trequestOptions: IHttpRequestOptions,\n\t\t): Promise<IHttpRequestOptions> {\n\t\t\tconst sender = this.getNodeParameter('sender') as string;\n\t\t\tconst { body } = requestOptions;\n\t\t\tconst data = validateEmailStrings({ sender });\n\t\t\tObject.assign(body!, data);\n\n\t\t\treturn requestOptions;\n\t\t}\n\n\t\texport async function validateAndCompileTemplateParameters(\n\t\t\tthis: IExecuteSingleFunctions,\n\t\t\trequestOptions: IHttpRequestOptions,\n\t\t): Promise<IHttpRequestOptions> {\n\t\t\tconst parameterData = this.getNodeParameter(\n\t\t\t\t'additionalFields.templateParameters.parameterValues',\n\t\t\t);\n\t\t\tconst { body } = requestOptions;\n\t\t\tconst { parameters } = parameterData as JsonObject;\n\t\t\tconst params = (parameters as string)\n\t\t\t\t.split(',')\n\t\t\t\t.filter((parameter) => {\n\t\t\t\t\treturn parameter.split('=').length === 2;\n\t\t\t\t})\n\t\t\t\t.map((parameter) => {\n\t\t\t\t\tconst [key, value] = parameter.split('=');\n\t\t\t\t\treturn {\n\t\t\t\t\t\t[key]: value,\n\t\t\t\t\t};\n\t\t\t\t})\n\t\t\t\t.reduce((obj, cObj) => {\n\t\t\t\t\tObject.assign(obj, cObj);\n\t\t\t\t\treturn obj;\n\t\t\t\t}, {});\n\n\t\t\tObject.assign(body!, { params });\n\t\t\treturn requestOptions;\n\t\t}\n\t}\n}\n\nexport namespace BrevoWebhookApi {\n\tinterface WebhookDetails {\n\t\turl: string;\n\t\tid: number;\n\t\tdescription: string;\n\t\tevents: string[];\n\t\ttype: string;\n\t\tcreatedAt: string;\n\t\tmodifiedAt: string;\n\t}\n\n\tinterface WebhookId {\n\t\tid: string;\n\t}\n\n\tinterface Webhooks {\n\t\twebhooks: WebhookDetails[];\n\t}\n\n\tconst credentialsName = 'sendInBlueApi';\n\tconst baseURL = 'https://api.brevo.com/v3';\n\texport const supportedAuthMap = new Map<string, (ref: IWebhookFunctions) => Promise<string>>([\n\t\t[\n\t\t\t'apiKey',\n\t\t\tasync (ref: IWebhookFunctions): Promise<string> => {\n\t\t\t\tconst credentials = await ref.getCredentials(credentialsName);\n\t\t\t\treturn credentials.sharedSecret as string;\n\t\t\t},\n\t\t],\n\t]);\n\n\texport const fetchWebhooks = async (ref: IHookFunctions, type: string): Promise<Webhooks> => {\n\t\tconst endpoint = `${baseURL}/webhooks?type=${type}`;\n\n\t\tconst options: IRequestOptions = {\n\t\t\tmethod: 'GET',\n\t\t\theaders: {\n\t\t\t\tAccept: 'application/json',\n\t\t\t},\n\t\t\turi: endpoint,\n\t\t};\n\n\t\tconst webhooks = (await ref.helpers.requestWithAuthentication.call(\n\t\t\tref,\n\t\t\tcredentialsName,\n\t\t\toptions,\n\t\t)) as string;\n\n\t\treturn await jsonParse(webhooks);\n\t};\n\n\texport const createWebHook = async (\n\t\tref: IHookFunctions,\n\t\ttype: string,\n\t\tevents: string[],\n\t\turl: string,\n\t): Promise<WebhookId> => {\n\t\tconst endpoint = `${baseURL}/webhooks`;\n\n\t\tconst options: IRequestOptions = {\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\tAccept: 'application/json',\n\t\t\t},\n\t\t\turi: endpoint,\n\t\t\tbody: {\n\t\t\t\tevents,\n\t\t\t\ttype,\n\t\t\t\turl,\n\t\t\t},\n\t\t};\n\n\t\tconst webhookId = await ref.helpers.requestWithAuthentication.call(\n\t\t\tref,\n\t\t\tcredentialsName,\n\t\t\toptions,\n\t\t);\n\n\t\treturn await jsonParse(webhookId as string);\n\t};\n\n\texport const deleteWebhook = async (ref: IHookFunctions, webhookId: string) => {\n\t\tconst endpoint = `${baseURL}/webhooks/${webhookId}`;\n\t\tconst body = {};\n\n\t\tconst options: IRequestOptions = {\n\t\t\tmethod: 'DELETE',\n\t\t\theaders: {\n\t\t\t\tAccept: 'application/json',\n\t\t\t},\n\t\t\turi: endpoint,\n\t\t\tbody,\n\t\t};\n\n\t\treturn await ref.helpers.requestWithAuthentication.call(ref, credentialsName, options);\n\t};\n}\n"],"mappings":"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","names":["BrevoNode","Validators","MailComposer","BrevoWebhookApi"]}