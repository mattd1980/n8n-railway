{"version":3,"sources":["../../../nodes/Marketstack/GenericFunctions.ts"],"sourcesContent":["import type {\n\tIExecuteFunctions,\n\tIDataObject,\n\tJsonObject,\n\tIHttpRequestMethods,\n\tIRequestOptions,\n} from 'n8n-workflow';\nimport { NodeApiError, NodeOperationError } from 'n8n-workflow';\n\nexport async function marketstackApiRequest(\n\tthis: IExecuteFunctions,\n\tmethod: IHttpRequestMethods,\n\tendpoint: string,\n\tbody: IDataObject = {},\n\tqs: IDataObject = {},\n) {\n\tconst credentials = await this.getCredentials('marketstackApi');\n\tconst protocol = credentials.useHttps ? 'https' : 'http'; // Free API does not support HTTPS\n\n\tconst options: IRequestOptions = {\n\t\tmethod,\n\t\turi: `${protocol}://api.marketstack.com/v1${endpoint}`,\n\t\tqs: {\n\t\t\taccess_key: credentials.apiKey,\n\t\t\t...qs,\n\t\t},\n\t\tjson: true,\n\t};\n\n\tif (!Object.keys(body).length) {\n\t\tdelete options.body;\n\t}\n\n\ttry {\n\t\treturn await this.helpers.request(options);\n\t} catch (error) {\n\t\tthrow new NodeApiError(this.getNode(), error as JsonObject);\n\t}\n}\n\nexport async function marketstackApiRequestAllItems(\n\tthis: IExecuteFunctions,\n\tmethod: IHttpRequestMethods,\n\tendpoint: string,\n\tbody: IDataObject = {},\n\tqs: IDataObject = {},\n) {\n\tconst returnAll = this.getNodeParameter('returnAll', 0, false);\n\tconst limit = this.getNodeParameter('limit', 0, 0);\n\n\tlet responseData;\n\tconst returnData: IDataObject[] = [];\n\n\tqs.offset = 0;\n\n\tdo {\n\t\tresponseData = await marketstackApiRequest.call(this, method, endpoint, body, qs);\n\t\treturnData.push(...(responseData.data as IDataObject[]));\n\n\t\tif (!returnAll && returnData.length > limit) {\n\t\t\treturn returnData.slice(0, limit);\n\t\t}\n\n\t\tqs.offset += responseData.count;\n\t} while (responseData.total > returnData.length);\n\n\treturn returnData;\n}\n\nexport const format = (datetime?: string) => datetime?.split('T')[0];\n\nexport function validateTimeOptions(this: IExecuteFunctions, timeOptions: boolean[]) {\n\tif (timeOptions.every((o) => !o)) {\n\t\tthrow new NodeOperationError(\n\t\t\tthis.getNode(),\n\t\t\t'Please filter by latest, specific date or timeframe (start and end dates).',\n\t\t);\n\t}\n\n\tif (timeOptions.filter(Boolean).length > 1) {\n\t\tthrow new NodeOperationError(\n\t\t\tthis.getNode(),\n\t\t\t'Please filter by one of latest, specific date, or timeframe (start and end dates).',\n\t\t);\n\t}\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA,0BAAiD;AAEjD,eAAsB,sBAErB,QACA,UACA,OAAoB,CAAC,GACrB,KAAkB,CAAC,GAClB;AACD,QAAM,cAAc,MAAM,KAAK,eAAe,gBAAgB;AAC9D,QAAM,WAAW,YAAY,WAAW,UAAU;AAElD,QAAM,UAA2B;AAAA,IAChC;AAAA,IACA,KAAK,GAAG,QAAQ,4BAA4B,QAAQ;AAAA,IACpD,IAAI;AAAA,MACH,YAAY,YAAY;AAAA,MACxB,GAAG;AAAA,IACJ;AAAA,IACA,MAAM;AAAA,EACP;AAEA,MAAI,CAAC,OAAO,KAAK,IAAI,EAAE,QAAQ;AAC9B,WAAO,QAAQ;AAAA,EAChB;AAEA,MAAI;AACH,WAAO,MAAM,KAAK,QAAQ,QAAQ,OAAO;AAAA,EAC1C,SAAS,OAAO;AACf,UAAM,IAAI,iCAAa,KAAK,QAAQ,GAAG,KAAmB;AAAA,EAC3D;AACD;AAEA,eAAsB,8BAErB,QACA,UACA,OAAoB,CAAC,GACrB,KAAkB,CAAC,GAClB;AACD,QAAM,YAAY,KAAK,iBAAiB,aAAa,GAAG,KAAK;AAC7D,QAAM,QAAQ,KAAK,iBAAiB,SAAS,GAAG,CAAC;AAEjD,MAAI;AACJ,QAAM,aAA4B,CAAC;AAEnC,KAAG,SAAS;AAEZ,KAAG;AACF,mBAAe,MAAM,sBAAsB,KAAK,MAAM,QAAQ,UAAU,MAAM,EAAE;AAChF,eAAW,KAAK,GAAI,aAAa,IAAsB;AAEvD,QAAI,CAAC,aAAa,WAAW,SAAS,OAAO;AAC5C,aAAO,WAAW,MAAM,GAAG,KAAK;AAAA,IACjC;AAEA,OAAG,UAAU,aAAa;AAAA,EAC3B,SAAS,aAAa,QAAQ,WAAW;AAEzC,SAAO;AACR;AAEO,MAAM,SAAS,CAAC,aAAsB,UAAU,MAAM,GAAG,EAAE,CAAC;AAE5D,SAAS,oBAA6C,aAAwB;AACpF,MAAI,YAAY,MAAM,CAAC,MAAM,CAAC,CAAC,GAAG;AACjC,UAAM,IAAI;AAAA,MACT,KAAK,QAAQ;AAAA,MACb;AAAA,IACD;AAAA,EACD;AAEA,MAAI,YAAY,OAAO,OAAO,EAAE,SAAS,GAAG;AAC3C,UAAM,IAAI;AAAA,MACT,KAAK,QAAQ;AAAA,MACb;AAAA,IACD;AAAA,EACD;AACD;","names":[]}