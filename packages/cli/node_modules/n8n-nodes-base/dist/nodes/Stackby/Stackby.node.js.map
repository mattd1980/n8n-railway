{"version":3,"sources":["../../../nodes/Stackby/Stackby.node.ts"],"sourcesContent":["import type {\n\tIExecuteFunctions,\n\tIDataObject,\n\tINodeExecutionData,\n\tINodeType,\n\tINodeTypeDescription,\n} from 'n8n-workflow';\nimport { NodeConnectionTypes, NodeOperationError } from 'n8n-workflow';\n\nimport type { IRecord } from './GenericFunction';\nimport { apiRequest, apiRequestAllItems } from './GenericFunction';\nimport { generatePairedItemData } from '../../utils/utilities';\n\nexport class Stackby implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'Stackby',\n\t\tname: 'stackby',\n\t\t// eslint-disable-next-line n8n-nodes-base/node-class-description-icon-not-svg\n\t\ticon: 'file:stackby.png',\n\t\tgroup: ['transform'],\n\t\tversion: 1,\n\t\tdescription: 'Read, write, and delete data in Stackby',\n\t\tdefaults: {\n\t\t\tname: 'Stackby',\n\t\t},\n\t\tusableAsTool: true,\n\t\tinputs: [NodeConnectionTypes.Main],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tcredentials: [\n\t\t\t{\n\t\t\t\tname: 'stackbyApi',\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Operation',\n\t\t\t\tname: 'operation',\n\t\t\t\ttype: 'options',\n\t\t\t\tnoDataExpression: true,\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Append',\n\t\t\t\t\t\tvalue: 'append',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Delete',\n\t\t\t\t\t\tvalue: 'delete',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'List',\n\t\t\t\t\t\tvalue: 'list',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Read',\n\t\t\t\t\t\tvalue: 'read',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'append',\n\t\t\t\tplaceholder: 'Action to perform',\n\t\t\t},\n\t\t\t// ----------------------------------\n\t\t\t//         All\n\t\t\t// ----------------------------------\n\t\t\t{\n\t\t\t\tdisplayName: 'Stack ID',\n\t\t\t\tname: 'stackId',\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: '',\n\t\t\t\trequired: true,\n\t\t\t\tdescription: 'The ID of the stack to access',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Table',\n\t\t\t\tname: 'table',\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: '',\n\t\t\t\tplaceholder: 'Stories',\n\t\t\t\trequired: true,\n\t\t\t\tdescription: 'Enter Table Name',\n\t\t\t},\n\n\t\t\t// ----------------------------------\n\t\t\t//         read\n\t\t\t// ----------------------------------\n\t\t\t{\n\t\t\t\tdisplayName: 'ID',\n\t\t\t\tname: 'id',\n\t\t\t\ttype: 'string',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['read', 'delete'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdefault: '',\n\t\t\t\trequired: true,\n\t\t\t\tdescription: 'ID of the record to return',\n\t\t\t},\n\n\t\t\t// ----------------------------------\n\t\t\t//         list\n\t\t\t// ----------------------------------\n\t\t\t{\n\t\t\t\tdisplayName: 'Return All',\n\t\t\t\tname: 'returnAll',\n\t\t\t\ttype: 'boolean',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['list'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdefault: true,\n\t\t\t\tdescription: 'Whether to return all results or only up to a given limit',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Limit',\n\t\t\t\tname: 'limit',\n\t\t\t\ttype: 'number',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['list'],\n\t\t\t\t\t\treturnAll: [false],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\ttypeOptions: {\n\t\t\t\t\tminValue: 1,\n\t\t\t\t\tmaxValue: 1000,\n\t\t\t\t},\n\t\t\t\tdefault: 1000,\n\t\t\t\tdescription: 'Max number of results to return',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Additional Fields',\n\t\t\t\tname: 'additionalFields',\n\t\t\t\ttype: 'collection',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['list'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdefault: {},\n\t\t\t\tplaceholder: 'Add Field',\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'View',\n\t\t\t\t\t\tname: 'view',\n\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\tplaceholder: 'All Stories',\n\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t'The name or ID of a view in the Stories table. If set, only the records in that view will be returned. The records will be sorted according to the order of the view.',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t// ----------------------------------\n\t\t\t//         append\n\t\t\t// ----------------------------------\n\t\t\t{\n\t\t\t\tdisplayName: 'Columns',\n\t\t\t\tname: 'columns',\n\t\t\t\ttype: 'string',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['append'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdefault: '',\n\t\t\t\trequired: true,\n\t\t\t\tplaceholder: 'id,name,description',\n\t\t\t\tdescription:\n\t\t\t\t\t'Comma-separated list of the properties which should used as columns for the new rows',\n\t\t\t},\n\t\t],\n\t};\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t\tconst items = this.getInputData();\n\t\tconst returnData: INodeExecutionData[] = [];\n\t\tconst length = items.length;\n\t\tlet responseData;\n\t\tconst qs: IDataObject = {};\n\t\tconst operation = this.getNodeParameter('operation', 0);\n\t\tif (operation === 'read') {\n\t\t\tfor (let i = 0; i < length; i++) {\n\t\t\t\ttry {\n\t\t\t\t\tconst stackId = this.getNodeParameter('stackId', i) as string;\n\t\t\t\t\tconst table = encodeURI(this.getNodeParameter('table', i) as string);\n\t\t\t\t\tconst rowIds = this.getNodeParameter('id', i) as string;\n\t\t\t\t\tqs.rowIds = [rowIds];\n\t\t\t\t\tresponseData = await apiRequest.call(this, 'GET', `/rowlist/${stackId}/${table}`, {}, qs);\n\t\t\t\t\treturnData.push.apply(\n\t\t\t\t\t\treturnData,\n\t\t\t\t\t\tresponseData.map((data: any) => data.field) as INodeExecutionData[],\n\t\t\t\t\t);\n\t\t\t\t} catch (error) {\n\t\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\t\tconst executionErrorData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray({ error: error.message }),\n\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturnData.push(...executionErrorData);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (operation === 'delete') {\n\t\t\tfor (let i = 0; i < length; i++) {\n\t\t\t\ttry {\n\t\t\t\t\tconst stackId = this.getNodeParameter('stackId', i) as string;\n\t\t\t\t\tconst table = encodeURI(this.getNodeParameter('table', i) as string);\n\t\t\t\t\tconst rowIds = this.getNodeParameter('id', i) as string;\n\t\t\t\t\tqs.rowIds = [rowIds];\n\n\t\t\t\t\tresponseData = await apiRequest.call(\n\t\t\t\t\t\tthis,\n\t\t\t\t\t\t'DELETE',\n\t\t\t\t\t\t`/rowdelete/${stackId}/${table}`,\n\t\t\t\t\t\t{},\n\t\t\t\t\t\tqs,\n\t\t\t\t\t);\n\t\t\t\t\tresponseData = responseData.records;\n\n\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject),\n\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t);\n\n\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t} catch (error) {\n\t\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\t\tconst executionErrorData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray({ error: error.message }),\n\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturnData.push(...executionErrorData);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (operation === 'append') {\n\t\t\ttry {\n\t\t\t\tconst records: { [key: string]: IRecord[] } = {};\n\t\t\t\tlet key = '';\n\t\t\t\tfor (let i = 0; i < length; i++) {\n\t\t\t\t\tconst stackId = this.getNodeParameter('stackId', i) as string;\n\t\t\t\t\tconst table = encodeURI(this.getNodeParameter('table', i) as string);\n\t\t\t\t\tconst columns = this.getNodeParameter('columns', i) as string;\n\t\t\t\t\tconst columnList = columns.split(',').map((column) => column.trim());\n\n\t\t\t\t\tconst record: { [key: string]: any } = {};\n\t\t\t\t\tfor (const column of columnList) {\n\t\t\t\t\t\tif (items[i].json[column] === undefined) {\n\t\t\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t\t\t`Column ${column} does not exist on input`,\n\t\t\t\t\t\t\t\t{ itemIndex: i },\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\trecord[column] = items[i].json[column];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tkey = `${stackId}/${table}`;\n\n\t\t\t\t\tif (records[key] === undefined) {\n\t\t\t\t\t\trecords[key] = [];\n\t\t\t\t\t}\n\t\t\t\t\trecords[key].push({ field: record });\n\t\t\t\t}\n\n\t\t\t\tfor (const recordKey of Object.keys(records)) {\n\t\t\t\t\tresponseData = await apiRequest.call(this, 'POST', `/rowcreate/${recordKey}`, {\n\t\t\t\t\t\trecords: records[recordKey],\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\treturnData.push.apply(\n\t\t\t\t\treturnData,\n\t\t\t\t\tresponseData.map((data: any) => data.field) as INodeExecutionData[],\n\t\t\t\t);\n\t\t\t} catch (error) {\n\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\tconst itemData = generatePairedItemData(items.length);\n\t\t\t\t\tconst executionErrorData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\tthis.helpers.returnJsonArray({ error: error.message }),\n\t\t\t\t\t\t{ itemData },\n\t\t\t\t\t);\n\t\t\t\t\treturnData.push(...executionErrorData);\n\t\t\t\t} else {\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (operation === 'list') {\n\t\t\tfor (let i = 0; i < length; i++) {\n\t\t\t\ttry {\n\t\t\t\t\tconst stackId = this.getNodeParameter('stackId', i) as string;\n\t\t\t\t\tconst table = encodeURI(this.getNodeParameter('table', i) as string);\n\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', 0);\n\n\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i, {});\n\n\t\t\t\t\tif (additionalFields.view) {\n\t\t\t\t\t\tqs.view = additionalFields.view;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (returnAll) {\n\t\t\t\t\t\tresponseData = await apiRequestAllItems.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t`/rowlist/${stackId}/${table}`,\n\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tqs.maxrecord = this.getNodeParameter('limit', 0);\n\t\t\t\t\t\tresponseData = await apiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t`/rowlist/${stackId}/${table}`,\n\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\treturnData.push.apply(\n\t\t\t\t\t\treturnData,\n\t\t\t\t\t\tresponseData.map((data: any) => data.field) as INodeExecutionData[],\n\t\t\t\t\t);\n\t\t\t\t} catch (error) {\n\t\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\t\tconst executionErrorData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray({ error: error.message }),\n\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturnData.push(...executionErrorData);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn [returnData];\n\t}\n}\n"],"mappings":"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","names":[]}