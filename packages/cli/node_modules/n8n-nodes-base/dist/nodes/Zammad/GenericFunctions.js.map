{"version":3,"sources":["../../../nodes/Zammad/GenericFunctions.ts"],"sourcesContent":["import flow from 'lodash/flow';\nimport type {\n\tIExecuteFunctions,\n\tIDataObject,\n\tILoadOptionsFunctions,\n\tJsonObject,\n\tIRequestOptions,\n\tIHttpRequestMethods,\n} from 'n8n-workflow';\nimport { NodeApiError, NodeOperationError } from 'n8n-workflow';\n\nimport type { Zammad } from './types';\n\nexport function tolerateTrailingSlash(url: string) {\n\treturn url.endsWith('/') ? url.substr(0, url.length - 1) : url;\n}\n\nexport async function zammadApiRequest(\n\tthis: IExecuteFunctions | ILoadOptionsFunctions,\n\tmethod: IHttpRequestMethods,\n\tendpoint: string,\n\tbody: IDataObject = {},\n\tqs: IDataObject = {},\n) {\n\tconst options: IRequestOptions = {\n\t\tmethod,\n\t\tbody,\n\t\tqs,\n\t\turi: '',\n\t\tjson: true,\n\t};\n\n\tconst authentication = this.getNodeParameter('authentication', 0) as 'basicAuth' | 'tokenAuth';\n\n\tif (authentication === 'basicAuth') {\n\t\tconst credentials =\n\t\t\tawait this.getCredentials<Zammad.BasicAuthCredentials>('zammadBasicAuthApi');\n\n\t\tconst baseUrl = tolerateTrailingSlash(credentials.baseUrl);\n\n\t\toptions.uri = `${baseUrl}/api/v1${endpoint}`;\n\n\t\toptions.auth = {\n\t\t\tuser: credentials.username,\n\t\t\tpass: credentials.password,\n\t\t};\n\n\t\toptions.rejectUnauthorized = !credentials.allowUnauthorizedCerts;\n\t} else {\n\t\tconst credentials =\n\t\t\tawait this.getCredentials<Zammad.TokenAuthCredentials>('zammadTokenAuthApi');\n\n\t\tconst baseUrl = tolerateTrailingSlash(credentials.baseUrl);\n\n\t\toptions.uri = `${baseUrl}/api/v1${endpoint}`;\n\n\t\toptions.headers = {\n\t\t\tAuthorization: `Token token=${credentials.accessToken}`,\n\t\t};\n\n\t\toptions.rejectUnauthorized = !credentials.allowUnauthorizedCerts;\n\t}\n\n\tif (!Object.keys(body).length) {\n\t\tdelete options.body;\n\t}\n\n\tif (!Object.keys(qs).length) {\n\t\tdelete options.qs;\n\t}\n\n\ttry {\n\t\treturn await this.helpers.request(options);\n\t} catch (error) {\n\t\tif (error.error.error === 'Object already exists!') {\n\t\t\terror.error.error = 'An entity with this name already exists.';\n\t\t}\n\n\t\tthrow new NodeApiError(this.getNode(), error as JsonObject);\n\t}\n}\n\nexport async function zammadApiRequestAllItems(\n\tthis: IExecuteFunctions | ILoadOptionsFunctions,\n\tmethod: IHttpRequestMethods,\n\tendpoint: string,\n\tbody: IDataObject = {},\n\tqs: IDataObject = {},\n\tlimit = 0,\n) {\n\t// https://docs.zammad.org/en/latest/api/intro.html#pagination\n\n\tconst returnData: IDataObject[] = [];\n\n\tlet responseData;\n\tqs.per_page = 20;\n\tqs.page = 1;\n\n\tdo {\n\t\tresponseData = await zammadApiRequest.call(this, method, endpoint, body, qs);\n\t\treturnData.push(...(responseData as IDataObject[]));\n\n\t\tif (limit && returnData.length > limit) {\n\t\t\treturn returnData.slice(0, limit);\n\t\t}\n\n\t\tqs.page++;\n\t} while (responseData.length);\n\n\treturn returnData;\n}\n\nexport function throwOnEmptyUpdate(this: IExecuteFunctions, resource: string) {\n\tthrow new NodeOperationError(\n\t\tthis.getNode(),\n\t\t`Please enter at least one field to update for the ${resource}`,\n\t);\n}\n\n// ----------------------------------\n//        loadOptions utils\n// ----------------------------------\n\nexport const prettifyDisplayName = (fieldName: string) => fieldName.replace('name', ' Name');\n\nexport const fieldToLoadOption = (i: Zammad.Field) => {\n\treturn { name: i.display ? prettifyDisplayName(i.display) : i.name, value: i.name };\n};\n\nexport const isCustomer = (user: Zammad.User) =>\n\tuser.role_ids.includes(3) && !user.email.endsWith('@zammad.org');\n\nexport async function getAllFields(this: ILoadOptionsFunctions) {\n\treturn (await zammadApiRequest.call(this, 'GET', '/object_manager_attributes')) as Zammad.Field[];\n}\n\nconst isTypeField =\n\t(resource: 'Group' | 'Organization' | 'Ticket' | 'User') => (arr: Zammad.Field[]) =>\n\t\tarr.filter((i) => i.object === resource);\n\nexport const getGroupFields = isTypeField('Group');\nexport const getOrganizationFields = isTypeField('Organization');\nexport const getUserFields = isTypeField('User');\nexport const getTicketFields = isTypeField('Ticket');\n\nconst getCustomFields = (arr: Zammad.Field[]) => arr.filter((i) => i.created_by_id !== 1);\n\nexport const getGroupCustomFields = flow(getGroupFields, getCustomFields);\nexport const getOrganizationCustomFields = flow(getOrganizationFields, getCustomFields);\nexport const getUserCustomFields = flow(getUserFields, getCustomFields);\nexport const getTicketCustomFields = flow(getTicketFields, getCustomFields);\n\nexport const isNotZammadFoundation = (i: Zammad.Organization) => i.name !== 'Zammad Foundation';\n\nexport const doesNotBelongToZammad = (i: Zammad.User) =>\n\t!i.email.endsWith('@zammad.org') && i.login !== '-';\n"],"mappings":"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","names":["flow"]}