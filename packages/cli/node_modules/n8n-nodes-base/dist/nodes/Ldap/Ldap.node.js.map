{"version":3,"sources":["../../../nodes/Ldap/Ldap.node.ts"],"sourcesContent":["import { Attribute, Change } from 'ldapts';\nimport type {\n\tICredentialDataDecryptedObject,\n\tICredentialsDecrypted,\n\tICredentialTestFunctions,\n\tIDataObject,\n\tIExecuteFunctions,\n\tILoadOptionsFunctions,\n\tINodeCredentialTestResult,\n\tINodeExecutionData,\n\tINodeType,\n\tINodeTypeDescription,\n} from 'n8n-workflow';\nimport { NodeConnectionTypes, NodeOperationError } from 'n8n-workflow';\n\nimport { BINARY_AD_ATTRIBUTES, createLdapClient, resolveBinaryAttributes } from './Helpers';\nimport { ldapFields } from './LdapDescription';\n\nexport class Ldap implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'Ldap',\n\t\tname: 'ldap',\n\t\ticon: { light: 'file:ldap.svg', dark: 'file:ldap.dark.svg' },\n\t\tgroup: ['transform'],\n\t\tversion: 1,\n\t\tsubtitle: '={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}',\n\t\tdescription: 'Interact with LDAP servers',\n\t\tdefaults: {\n\t\t\tname: 'LDAP',\n\t\t},\n\t\tusableAsTool: true,\n\t\tinputs: [NodeConnectionTypes.Main],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tcredentials: [\n\t\t\t{\n\t\t\t\t// eslint-disable-next-line n8n-nodes-base/node-class-description-credentials-name-unsuffixed\n\t\t\t\tname: 'ldap',\n\t\t\t\trequired: true,\n\t\t\t\ttestedBy: 'ldapConnectionTest',\n\t\t\t},\n\t\t],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Operation',\n\t\t\t\tname: 'operation',\n\t\t\t\ttype: 'options',\n\t\t\t\tnoDataExpression: true,\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Compare',\n\t\t\t\t\t\tvalue: 'compare',\n\t\t\t\t\t\tdescription: 'Compare an attribute',\n\t\t\t\t\t\taction: 'Compare an attribute',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Create',\n\t\t\t\t\t\tvalue: 'create',\n\t\t\t\t\t\tdescription: 'Create a new entry',\n\t\t\t\t\t\taction: 'Create a new entry',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Delete',\n\t\t\t\t\t\tvalue: 'delete',\n\t\t\t\t\t\tdescription: 'Delete an entry',\n\t\t\t\t\t\taction: 'Delete an entry',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Rename',\n\t\t\t\t\t\tvalue: 'rename',\n\t\t\t\t\t\tdescription: 'Rename the DN of an existing entry',\n\t\t\t\t\t\taction: 'Rename the DN of an existing entry',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Search',\n\t\t\t\t\t\tvalue: 'search',\n\t\t\t\t\t\tdescription: 'Search LDAP',\n\t\t\t\t\t\taction: 'Search LDAP',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Update',\n\t\t\t\t\t\tvalue: 'update',\n\t\t\t\t\t\tdescription: 'Update attributes',\n\t\t\t\t\t\taction: 'Update attributes',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'search',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Debug',\n\t\t\t\tname: 'nodeDebug',\n\t\t\t\ttype: 'boolean',\n\t\t\t\tisNodeSetting: true,\n\t\t\t\tdefault: false,\n\t\t\t\tnoDataExpression: true,\n\t\t\t},\n\t\t\t...ldapFields,\n\t\t],\n\t};\n\n\tmethods = {\n\t\tcredentialTest: {\n\t\t\tasync ldapConnectionTest(\n\t\t\t\tthis: ICredentialTestFunctions,\n\t\t\t\tcredential: ICredentialsDecrypted,\n\t\t\t): Promise<INodeCredentialTestResult> {\n\t\t\t\tconst credentials = credential.data as ICredentialDataDecryptedObject;\n\t\t\t\tconst client = await createLdapClient(this, credentials);\n\t\t\t\ttry {\n\t\t\t\t\tawait client.bind(credentials.bindDN as string, credentials.bindPassword as string);\n\t\t\t\t} catch (error) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tstatus: 'Error',\n\t\t\t\t\t\tmessage: error.message,\n\t\t\t\t\t};\n\t\t\t\t} finally {\n\t\t\t\t\tawait client.unbind();\n\t\t\t\t}\n\t\t\t\treturn {\n\t\t\t\t\tstatus: 'OK',\n\t\t\t\t\tmessage: 'Connection successful!',\n\t\t\t\t};\n\t\t\t},\n\t\t},\n\t\tloadOptions: {\n\t\t\tasync getAttributes(this: ILoadOptionsFunctions) {\n\t\t\t\tconst credentials = await this.getCredentials('ldap');\n\t\t\t\tconst client = await createLdapClient(this, credentials);\n\n\t\t\t\ttry {\n\t\t\t\t\tawait client.bind(credentials.bindDN as string, credentials.bindPassword as string);\n\t\t\t\t} catch (error) {\n\t\t\t\t\tawait client.unbind();\n\t\t\t\t\tthis.logger.error(error);\n\t\t\t\t\treturn [];\n\t\t\t\t}\n\n\t\t\t\tlet results;\n\t\t\t\tconst baseDN = this.getNodeParameter('baseDN', 0) as string;\n\t\t\t\ttry {\n\t\t\t\t\tresults = await client.search(baseDN, { sizeLimit: 200, paged: false }); // should this size limit be set in credentials?\n\t\t\t\t} catch (error) {\n\t\t\t\t\tthis.logger.error(error);\n\t\t\t\t\treturn [];\n\t\t\t\t} finally {\n\t\t\t\t\tawait client.unbind();\n\t\t\t\t}\n\n\t\t\t\tconst unique = Object.keys(Object.assign({}, ...results.searchEntries));\n\t\t\t\treturn unique.map((x) => ({\n\t\t\t\t\tname: x,\n\t\t\t\t\tvalue: x,\n\t\t\t\t}));\n\t\t\t},\n\n\t\t\tasync getObjectClasses(this: ILoadOptionsFunctions) {\n\t\t\t\tconst credentials = await this.getCredentials('ldap');\n\t\t\t\tconst client = await createLdapClient(this, credentials);\n\t\t\t\ttry {\n\t\t\t\t\tawait client.bind(credentials.bindDN as string, credentials.bindPassword as string);\n\t\t\t\t} catch (error) {\n\t\t\t\t\tawait client.unbind();\n\t\t\t\t\tthis.logger.error(error);\n\t\t\t\t\treturn [];\n\t\t\t\t}\n\n\t\t\t\tconst baseDN = this.getNodeParameter('baseDN', 0) as string;\n\n\t\t\t\tlet results;\n\t\t\t\ttry {\n\t\t\t\t\tresults = await client.search(baseDN, { sizeLimit: 10, paged: false }); // should this size limit be set in credentials?\n\t\t\t\t} catch (error) {\n\t\t\t\t\tthis.logger.error(error);\n\t\t\t\t\treturn [];\n\t\t\t\t} finally {\n\t\t\t\t\tawait client.unbind();\n\t\t\t\t}\n\n\t\t\t\tconst objects = [];\n\t\t\t\tfor (const entry of results.searchEntries) {\n\t\t\t\t\tif (typeof entry.objectClass === 'string') {\n\t\t\t\t\t\tobjects.push(entry.objectClass);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tobjects.push(...entry.objectClass);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst unique = [...new Set(objects)];\n\t\t\t\tunique.push('custom');\n\t\t\t\tconst result = [];\n\t\t\t\tfor (const value of unique) {\n\t\t\t\t\tif (value === 'custom') {\n\t\t\t\t\t\tresult.push({ name: 'custom', value: 'custom' });\n\t\t\t\t\t} else result.push({ name: value as string, value: `(objectclass=${value})` });\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t},\n\n\t\t\tasync getAttributesForDn(this: ILoadOptionsFunctions) {\n\t\t\t\tconst credentials = await this.getCredentials('ldap');\n\t\t\t\tconst client = await createLdapClient(this, credentials);\n\n\t\t\t\ttry {\n\t\t\t\t\tawait client.bind(credentials.bindDN as string, credentials.bindPassword as string);\n\t\t\t\t} catch (error) {\n\t\t\t\t\tawait client.unbind();\n\t\t\t\t\tthis.logger.error(error);\n\t\t\t\t\treturn [];\n\t\t\t\t}\n\n\t\t\t\tlet results;\n\t\t\t\tconst baseDN = this.getNodeParameter('dn', 0) as string;\n\t\t\t\ttry {\n\t\t\t\t\tresults = await client.search(baseDN, { sizeLimit: 1, paged: false });\n\t\t\t\t} catch (error) {\n\t\t\t\t\tthis.logger.error(error);\n\t\t\t\t\treturn [];\n\t\t\t\t} finally {\n\t\t\t\t\tawait client.unbind();\n\t\t\t\t}\n\n\t\t\t\tconst unique = Object.keys(Object.assign({}, ...results.searchEntries));\n\t\t\t\treturn unique.map((x) => ({\n\t\t\t\t\tname: x,\n\t\t\t\t\tvalue: x,\n\t\t\t\t}));\n\t\t\t},\n\t\t},\n\t};\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t\tconst nodeDebug = this.getNodeParameter('nodeDebug', 0) as boolean;\n\n\t\tconst items = this.getInputData();\n\t\tconst returnItems: INodeExecutionData[] = [];\n\n\t\tif (nodeDebug) {\n\t\t\tthis.logger.info(\n\t\t\t\t`[${this.getNode().type} | ${this.getNode().name}] - Starting with ${\n\t\t\t\t\titems.length\n\t\t\t\t} input items`,\n\t\t\t);\n\t\t}\n\n\t\tconst credentials = await this.getCredentials('ldap');\n\t\tconst client = await createLdapClient(\n\t\t\tthis,\n\t\t\tcredentials,\n\t\t\tnodeDebug,\n\t\t\tthis.getNode().type,\n\t\t\tthis.getNode().name,\n\t\t);\n\n\t\ttry {\n\t\t\tawait client.bind(credentials.bindDN as string, credentials.bindPassword as string);\n\t\t} catch (error) {\n\t\t\tdelete error.cert;\n\t\t\tawait client.unbind();\n\t\t\tif (this.continueOnFail()) {\n\t\t\t\treturn [\n\t\t\t\t\titems.map((x) => {\n\t\t\t\t\t\tx.json.error = error.reason || 'LDAP connection error occurred';\n\t\t\t\t\t\treturn x;\n\t\t\t\t\t}),\n\t\t\t\t];\n\t\t\t} else {\n\t\t\t\tthrow new NodeOperationError(this.getNode(), error as Error, {});\n\t\t\t}\n\t\t}\n\n\t\tconst operation = this.getNodeParameter('operation', 0);\n\n\t\tfor (let itemIndex = 0; itemIndex < items.length; itemIndex++) {\n\t\t\ttry {\n\t\t\t\tif (operation === 'compare') {\n\t\t\t\t\tconst dn = this.getNodeParameter('dn', itemIndex) as string;\n\t\t\t\t\tconst attributeId = this.getNodeParameter('id', itemIndex) as string;\n\t\t\t\t\tconst value = this.getNodeParameter('value', itemIndex, '') as string;\n\n\t\t\t\t\tconst res = await client.compare(dn, attributeId, value);\n\n\t\t\t\t\treturnItems.push({\n\t\t\t\t\t\tjson: { dn, attribute: attributeId, result: res },\n\t\t\t\t\t\tpairedItem: { item: itemIndex },\n\t\t\t\t\t});\n\t\t\t\t} else if (operation === 'create') {\n\t\t\t\t\tconst dn = this.getNodeParameter('dn', itemIndex) as string;\n\t\t\t\t\tconst attributeFields = this.getNodeParameter('attributes', itemIndex) as IDataObject;\n\n\t\t\t\t\tconst attributes: IDataObject = {};\n\n\t\t\t\t\tif (Object.keys(attributeFields).length) {\n\t\t\t\t\t\t//@ts-ignore\n\t\t\t\t\t\tattributeFields.attribute.map((attr) => {\n\t\t\t\t\t\t\tattributes[attr.id as string] = attr.value;\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\tawait client.add(dn, attributes as unknown as Attribute[]);\n\n\t\t\t\t\treturnItems.push({\n\t\t\t\t\t\tjson: { dn, result: 'success' },\n\t\t\t\t\t\tpairedItem: { item: itemIndex },\n\t\t\t\t\t});\n\t\t\t\t} else if (operation === 'delete') {\n\t\t\t\t\tconst dn = this.getNodeParameter('dn', itemIndex) as string;\n\n\t\t\t\t\tawait client.del(dn);\n\n\t\t\t\t\treturnItems.push({\n\t\t\t\t\t\tjson: { dn, result: 'success' },\n\t\t\t\t\t\tpairedItem: { item: itemIndex },\n\t\t\t\t\t});\n\t\t\t\t} else if (operation === 'rename') {\n\t\t\t\t\tconst dn = this.getNodeParameter('dn', itemIndex) as string;\n\t\t\t\t\tconst targetDn = this.getNodeParameter('targetDn', itemIndex) as string;\n\n\t\t\t\t\tawait client.modifyDN(dn, targetDn);\n\n\t\t\t\t\treturnItems.push({\n\t\t\t\t\t\tjson: { dn: targetDn, result: 'success' },\n\t\t\t\t\t\tpairedItem: { item: itemIndex },\n\t\t\t\t\t});\n\t\t\t\t} else if (operation === 'update') {\n\t\t\t\t\tconst dn = this.getNodeParameter('dn', itemIndex) as string;\n\t\t\t\t\tconst attributes = this.getNodeParameter('attributes', itemIndex, {}) as IDataObject;\n\t\t\t\t\tconst changes: Change[] = [];\n\n\t\t\t\t\tfor (const [action, attrs] of Object.entries(attributes)) {\n\t\t\t\t\t\t//@ts-ignore\n\t\t\t\t\t\tattrs.map((attr) =>\n\t\t\t\t\t\t\tchanges.push(\n\t\t\t\t\t\t\t\tnew Change({\n\t\t\t\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\t\t\t\toperation: action,\n\t\t\t\t\t\t\t\t\tmodification: new Attribute({\n\t\t\t\t\t\t\t\t\t\ttype: attr.id as string,\n\t\t\t\t\t\t\t\t\t\tvalues: [attr.value],\n\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tawait client.modify(dn, changes);\n\n\t\t\t\t\treturnItems.push({\n\t\t\t\t\t\tjson: { dn, result: 'success', changes },\n\t\t\t\t\t\tpairedItem: { item: itemIndex },\n\t\t\t\t\t});\n\t\t\t\t} else if (operation === 'search') {\n\t\t\t\t\tconst baseDN = this.getNodeParameter('baseDN', itemIndex) as string;\n\t\t\t\t\tlet searchFor = this.getNodeParameter('searchFor', itemIndex) as string;\n\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', itemIndex);\n\t\t\t\t\tconst limit = this.getNodeParameter('limit', itemIndex, 0);\n\t\t\t\t\tconst options = this.getNodeParameter('options', itemIndex);\n\t\t\t\t\tconst pageSize = this.getNodeParameter(\n\t\t\t\t\t\t'options.pageSize',\n\t\t\t\t\t\titemIndex,\n\t\t\t\t\t\t1000,\n\t\t\t\t\t) as IDataObject;\n\n\t\t\t\t\t// Set paging settings\n\t\t\t\t\tdelete options.pageSize;\n\t\t\t\t\toptions.sizeLimit = returnAll ? 0 : limit;\n\t\t\t\t\tif (pageSize) {\n\t\t\t\t\t\toptions.paged = { pageSize };\n\t\t\t\t\t}\n\n\t\t\t\t\t// Set attributes to retrieve\n\t\t\t\t\tif (typeof options.attributes === 'string') {\n\t\t\t\t\t\toptions.attributes = options.attributes.split(',').map((attribute) => attribute.trim());\n\t\t\t\t\t}\n\t\t\t\t\toptions.explicitBufferAttributes = BINARY_AD_ATTRIBUTES;\n\n\t\t\t\t\tif (searchFor === 'custom') {\n\t\t\t\t\t\tsearchFor = this.getNodeParameter('customFilter', itemIndex) as string;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst searchText = this.getNodeParameter('searchText', itemIndex) as string;\n\t\t\t\t\t\tconst attribute = this.getNodeParameter('attribute', itemIndex) as string;\n\t\t\t\t\t\tsearchFor = `(&${searchFor}(${attribute}=${searchText}))`;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Replace escaped filter special chars for ease of use\n\t\t\t\t\t// Character       ASCII value\n\t\t\t\t\t// ---------------------------\n\t\t\t\t\t// *               0x2a\n\t\t\t\t\t// (               0x28\n\t\t\t\t\t// )               0x29\n\t\t\t\t\t// \\               0x5c\n\t\t\t\t\tsearchFor = searchFor.replace(/\\\\\\\\/g, '\\\\5c');\n\t\t\t\t\tsearchFor = searchFor.replace(/\\\\\\*/g, '\\\\2a');\n\t\t\t\t\tsearchFor = searchFor.replace(/\\\\\\(/g, '\\\\28');\n\t\t\t\t\tsearchFor = searchFor.replace(/\\\\\\)/g, '\\\\29');\n\t\t\t\t\toptions.filter = searchFor;\n\n\t\t\t\t\tif (nodeDebug) {\n\t\t\t\t\t\tthis.logger.info(\n\t\t\t\t\t\t\t`[${this.getNode().type} | ${this.getNode().name}] - Search Options ${JSON.stringify(\n\t\t\t\t\t\t\t\toptions,\n\t\t\t\t\t\t\t\tnull,\n\t\t\t\t\t\t\t\t2,\n\t\t\t\t\t\t\t)}`,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst results = await client.search(baseDN, options);\n\n\t\t\t\t\t// Not all LDAP servers respect the sizeLimit\n\t\t\t\t\tif (!returnAll) {\n\t\t\t\t\t\tresults.searchEntries = results.searchEntries.slice(0, limit);\n\t\t\t\t\t}\n\t\t\t\t\tresolveBinaryAttributes(results.searchEntries);\n\n\t\t\t\t\treturnItems.push.apply(\n\t\t\t\t\t\treturnItems,\n\t\t\t\t\t\tresults.searchEntries.map((result) => ({\n\t\t\t\t\t\t\tjson: result,\n\t\t\t\t\t\t\tpairedItem: { item: itemIndex },\n\t\t\t\t\t\t})),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\treturnItems.push({ json: items[itemIndex].json, error, pairedItem: itemIndex });\n\t\t\t\t} else {\n\t\t\t\t\tawait client.unbind();\n\t\t\t\t\tif (error.context) {\n\t\t\t\t\t\terror.context.itemIndex = itemIndex;\n\t\t\t\t\t\tthrow error;\n\t\t\t\t\t}\n\t\t\t\t\tthrow new NodeOperationError(this.getNode(), error as Error, {\n\t\t\t\t\t\titemIndex,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (nodeDebug) {\n\t\t\tthis.logger.info(`[${this.getNode().type} | ${this.getNode().name}] - Finished`);\n\t\t}\n\n\t\tawait client.unbind();\n\n\t\treturn [returnItems];\n\t}\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAkC;AAalC,0BAAwD;AAExD,qBAAgF;AAChF,6BAA2B;AAEpB,MAAM,KAA0B;AAAA,EAAhC;AACN,uBAAoC;AAAA,MACnC,aAAa;AAAA,MACb,MAAM;AAAA,MACN,MAAM,EAAE,OAAO,iBAAiB,MAAM,qBAAqB;AAAA,MAC3D,OAAO,CAAC,WAAW;AAAA,MACnB,SAAS;AAAA,MACT,UAAU;AAAA,MACV,aAAa;AAAA,MACb,UAAU;AAAA,QACT,MAAM;AAAA,MACP;AAAA,MACA,cAAc;AAAA,MACd,QAAQ,CAAC,wCAAoB,IAAI;AAAA,MACjC,SAAS,CAAC,wCAAoB,IAAI;AAAA,MAClC,aAAa;AAAA,QACZ;AAAA;AAAA,UAEC,MAAM;AAAA,UACN,UAAU;AAAA,UACV,UAAU;AAAA,QACX;AAAA,MACD;AAAA,MACA,YAAY;AAAA,QACX;AAAA,UACC,aAAa;AAAA,UACb,MAAM;AAAA,UACN,MAAM;AAAA,UACN,kBAAkB;AAAA,UAClB,SAAS;AAAA,YACR;AAAA,cACC,MAAM;AAAA,cACN,OAAO;AAAA,cACP,aAAa;AAAA,cACb,QAAQ;AAAA,YACT;AAAA,YACA;AAAA,cACC,MAAM;AAAA,cACN,OAAO;AAAA,cACP,aAAa;AAAA,cACb,QAAQ;AAAA,YACT;AAAA,YACA;AAAA,cACC,MAAM;AAAA,cACN,OAAO;AAAA,cACP,aAAa;AAAA,cACb,QAAQ;AAAA,YACT;AAAA,YACA;AAAA,cACC,MAAM;AAAA,cACN,OAAO;AAAA,cACP,aAAa;AAAA,cACb,QAAQ;AAAA,YACT;AAAA,YACA;AAAA,cACC,MAAM;AAAA,cACN,OAAO;AAAA,cACP,aAAa;AAAA,cACb,QAAQ;AAAA,YACT;AAAA,YACA;AAAA,cACC,MAAM;AAAA,cACN,OAAO;AAAA,cACP,aAAa;AAAA,cACb,QAAQ;AAAA,YACT;AAAA,UACD;AAAA,UACA,SAAS;AAAA,QACV;AAAA,QACA;AAAA,UACC,aAAa;AAAA,UACb,MAAM;AAAA,UACN,MAAM;AAAA,UACN,eAAe;AAAA,UACf,SAAS;AAAA,UACT,kBAAkB;AAAA,QACnB;AAAA,QACA,GAAG;AAAA,MACJ;AAAA,IACD;AAEA,mBAAU;AAAA,MACT,gBAAgB;AAAA,QACf,MAAM,mBAEL,YACqC;AACrC,gBAAM,cAAc,WAAW;AAC/B,gBAAM,SAAS,UAAM,iCAAiB,MAAM,WAAW;AACvD,cAAI;AACH,kBAAM,OAAO,KAAK,YAAY,QAAkB,YAAY,YAAsB;AAAA,UACnF,SAAS,OAAO;AACf,mBAAO;AAAA,cACN,QAAQ;AAAA,cACR,SAAS,MAAM;AAAA,YAChB;AAAA,UACD,UAAE;AACD,kBAAM,OAAO,OAAO;AAAA,UACrB;AACA,iBAAO;AAAA,YACN,QAAQ;AAAA,YACR,SAAS;AAAA,UACV;AAAA,QACD;AAAA,MACD;AAAA,MACA,aAAa;AAAA,QACZ,MAAM,gBAA2C;AAChD,gBAAM,cAAc,MAAM,KAAK,eAAe,MAAM;AACpD,gBAAM,SAAS,UAAM,iCAAiB,MAAM,WAAW;AAEvD,cAAI;AACH,kBAAM,OAAO,KAAK,YAAY,QAAkB,YAAY,YAAsB;AAAA,UACnF,SAAS,OAAO;AACf,kBAAM,OAAO,OAAO;AACpB,iBAAK,OAAO,MAAM,KAAK;AACvB,mBAAO,CAAC;AAAA,UACT;AAEA,cAAI;AACJ,gBAAM,SAAS,KAAK,iBAAiB,UAAU,CAAC;AAChD,cAAI;AACH,sBAAU,MAAM,OAAO,OAAO,QAAQ,EAAE,WAAW,KAAK,OAAO,MAAM,CAAC;AAAA,UACvE,SAAS,OAAO;AACf,iBAAK,OAAO,MAAM,KAAK;AACvB,mBAAO,CAAC;AAAA,UACT,UAAE;AACD,kBAAM,OAAO,OAAO;AAAA,UACrB;AAEA,gBAAM,SAAS,OAAO,KAAK,OAAO,OAAO,CAAC,GAAG,GAAG,QAAQ,aAAa,CAAC;AACtE,iBAAO,OAAO,IAAI,CAAC,OAAO;AAAA,YACzB,MAAM;AAAA,YACN,OAAO;AAAA,UACR,EAAE;AAAA,QACH;AAAA,QAEA,MAAM,mBAA8C;AACnD,gBAAM,cAAc,MAAM,KAAK,eAAe,MAAM;AACpD,gBAAM,SAAS,UAAM,iCAAiB,MAAM,WAAW;AACvD,cAAI;AACH,kBAAM,OAAO,KAAK,YAAY,QAAkB,YAAY,YAAsB;AAAA,UACnF,SAAS,OAAO;AACf,kBAAM,OAAO,OAAO;AACpB,iBAAK,OAAO,MAAM,KAAK;AACvB,mBAAO,CAAC;AAAA,UACT;AAEA,gBAAM,SAAS,KAAK,iBAAiB,UAAU,CAAC;AAEhD,cAAI;AACJ,cAAI;AACH,sBAAU,MAAM,OAAO,OAAO,QAAQ,EAAE,WAAW,IAAI,OAAO,MAAM,CAAC;AAAA,UACtE,SAAS,OAAO;AACf,iBAAK,OAAO,MAAM,KAAK;AACvB,mBAAO,CAAC;AAAA,UACT,UAAE;AACD,kBAAM,OAAO,OAAO;AAAA,UACrB;AAEA,gBAAM,UAAU,CAAC;AACjB,qBAAW,SAAS,QAAQ,eAAe;AAC1C,gBAAI,OAAO,MAAM,gBAAgB,UAAU;AAC1C,sBAAQ,KAAK,MAAM,WAAW;AAAA,YAC/B,OAAO;AACN,sBAAQ,KAAK,GAAG,MAAM,WAAW;AAAA,YAClC;AAAA,UACD;AAEA,gBAAM,SAAS,CAAC,GAAG,IAAI,IAAI,OAAO,CAAC;AACnC,iBAAO,KAAK,QAAQ;AACpB,gBAAM,SAAS,CAAC;AAChB,qBAAW,SAAS,QAAQ;AAC3B,gBAAI,UAAU,UAAU;AACvB,qBAAO,KAAK,EAAE,MAAM,UAAU,OAAO,SAAS,CAAC;AAAA,YAChD,MAAO,QAAO,KAAK,EAAE,MAAM,OAAiB,OAAO,gBAAgB,KAAK,IAAI,CAAC;AAAA,UAC9E;AACA,iBAAO;AAAA,QACR;AAAA,QAEA,MAAM,qBAAgD;AACrD,gBAAM,cAAc,MAAM,KAAK,eAAe,MAAM;AACpD,gBAAM,SAAS,UAAM,iCAAiB,MAAM,WAAW;AAEvD,cAAI;AACH,kBAAM,OAAO,KAAK,YAAY,QAAkB,YAAY,YAAsB;AAAA,UACnF,SAAS,OAAO;AACf,kBAAM,OAAO,OAAO;AACpB,iBAAK,OAAO,MAAM,KAAK;AACvB,mBAAO,CAAC;AAAA,UACT;AAEA,cAAI;AACJ,gBAAM,SAAS,KAAK,iBAAiB,MAAM,CAAC;AAC5C,cAAI;AACH,sBAAU,MAAM,OAAO,OAAO,QAAQ,EAAE,WAAW,GAAG,OAAO,MAAM,CAAC;AAAA,UACrE,SAAS,OAAO;AACf,iBAAK,OAAO,MAAM,KAAK;AACvB,mBAAO,CAAC;AAAA,UACT,UAAE;AACD,kBAAM,OAAO,OAAO;AAAA,UACrB;AAEA,gBAAM,SAAS,OAAO,KAAK,OAAO,OAAO,CAAC,GAAG,GAAG,QAAQ,aAAa,CAAC;AACtE,iBAAO,OAAO,IAAI,CAAC,OAAO;AAAA,YACzB,MAAM;AAAA,YACN,OAAO;AAAA,UACR,EAAE;AAAA,QACH;AAAA,MACD;AAAA,IACD;AAAA;AAAA,EAEA,MAAM,UAAkE;AACvE,UAAM,YAAY,KAAK,iBAAiB,aAAa,CAAC;AAEtD,UAAM,QAAQ,KAAK,aAAa;AAChC,UAAM,cAAoC,CAAC;AAE3C,QAAI,WAAW;AACd,WAAK,OAAO;AAAA,QACX,IAAI,KAAK,QAAQ,EAAE,IAAI,MAAM,KAAK,QAAQ,EAAE,IAAI,qBAC/C,MAAM,MACP;AAAA,MACD;AAAA,IACD;AAEA,UAAM,cAAc,MAAM,KAAK,eAAe,MAAM;AACpD,UAAM,SAAS,UAAM;AAAA,MACpB;AAAA,MACA;AAAA,MACA;AAAA,MACA,KAAK,QAAQ,EAAE;AAAA,MACf,KAAK,QAAQ,EAAE;AAAA,IAChB;AAEA,QAAI;AACH,YAAM,OAAO,KAAK,YAAY,QAAkB,YAAY,YAAsB;AAAA,IACnF,SAAS,OAAO;AACf,aAAO,MAAM;AACb,YAAM,OAAO,OAAO;AACpB,UAAI,KAAK,eAAe,GAAG;AAC1B,eAAO;AAAA,UACN,MAAM,IAAI,CAAC,MAAM;AAChB,cAAE,KAAK,QAAQ,MAAM,UAAU;AAC/B,mBAAO;AAAA,UACR,CAAC;AAAA,QACF;AAAA,MACD,OAAO;AACN,cAAM,IAAI,uCAAmB,KAAK,QAAQ,GAAG,OAAgB,CAAC,CAAC;AAAA,MAChE;AAAA,IACD;AAEA,UAAM,YAAY,KAAK,iBAAiB,aAAa,CAAC;AAEtD,aAAS,YAAY,GAAG,YAAY,MAAM,QAAQ,aAAa;AAC9D,UAAI;AACH,YAAI,cAAc,WAAW;AAC5B,gBAAM,KAAK,KAAK,iBAAiB,MAAM,SAAS;AAChD,gBAAM,cAAc,KAAK,iBAAiB,MAAM,SAAS;AACzD,gBAAM,QAAQ,KAAK,iBAAiB,SAAS,WAAW,EAAE;AAE1D,gBAAM,MAAM,MAAM,OAAO,QAAQ,IAAI,aAAa,KAAK;AAEvD,sBAAY,KAAK;AAAA,YAChB,MAAM,EAAE,IAAI,WAAW,aAAa,QAAQ,IAAI;AAAA,YAChD,YAAY,EAAE,MAAM,UAAU;AAAA,UAC/B,CAAC;AAAA,QACF,WAAW,cAAc,UAAU;AAClC,gBAAM,KAAK,KAAK,iBAAiB,MAAM,SAAS;AAChD,gBAAM,kBAAkB,KAAK,iBAAiB,cAAc,SAAS;AAErE,gBAAM,aAA0B,CAAC;AAEjC,cAAI,OAAO,KAAK,eAAe,EAAE,QAAQ;AAExC,4BAAgB,UAAU,IAAI,CAAC,SAAS;AACvC,yBAAW,KAAK,EAAY,IAAI,KAAK;AAAA,YACtC,CAAC;AAAA,UACF;AAEA,gBAAM,OAAO,IAAI,IAAI,UAAoC;AAEzD,sBAAY,KAAK;AAAA,YAChB,MAAM,EAAE,IAAI,QAAQ,UAAU;AAAA,YAC9B,YAAY,EAAE,MAAM,UAAU;AAAA,UAC/B,CAAC;AAAA,QACF,WAAW,cAAc,UAAU;AAClC,gBAAM,KAAK,KAAK,iBAAiB,MAAM,SAAS;AAEhD,gBAAM,OAAO,IAAI,EAAE;AAEnB,sBAAY,KAAK;AAAA,YAChB,MAAM,EAAE,IAAI,QAAQ,UAAU;AAAA,YAC9B,YAAY,EAAE,MAAM,UAAU;AAAA,UAC/B,CAAC;AAAA,QACF,WAAW,cAAc,UAAU;AAClC,gBAAM,KAAK,KAAK,iBAAiB,MAAM,SAAS;AAChD,gBAAM,WAAW,KAAK,iBAAiB,YAAY,SAAS;AAE5D,gBAAM,OAAO,SAAS,IAAI,QAAQ;AAElC,sBAAY,KAAK;AAAA,YAChB,MAAM,EAAE,IAAI,UAAU,QAAQ,UAAU;AAAA,YACxC,YAAY,EAAE,MAAM,UAAU;AAAA,UAC/B,CAAC;AAAA,QACF,WAAW,cAAc,UAAU;AAClC,gBAAM,KAAK,KAAK,iBAAiB,MAAM,SAAS;AAChD,gBAAM,aAAa,KAAK,iBAAiB,cAAc,WAAW,CAAC,CAAC;AACpE,gBAAM,UAAoB,CAAC;AAE3B,qBAAW,CAAC,QAAQ,KAAK,KAAK,OAAO,QAAQ,UAAU,GAAG;AAEzD,kBAAM;AAAA,cAAI,CAAC,SACV,QAAQ;AAAA,gBACP,IAAI,qBAAO;AAAA;AAAA,kBAEV,WAAW;AAAA,kBACX,cAAc,IAAI,wBAAU;AAAA,oBAC3B,MAAM,KAAK;AAAA,oBACX,QAAQ,CAAC,KAAK,KAAK;AAAA,kBACpB,CAAC;AAAA,gBACF,CAAC;AAAA,cACF;AAAA,YACD;AAAA,UACD;AAEA,gBAAM,OAAO,OAAO,IAAI,OAAO;AAE/B,sBAAY,KAAK;AAAA,YAChB,MAAM,EAAE,IAAI,QAAQ,WAAW,QAAQ;AAAA,YACvC,YAAY,EAAE,MAAM,UAAU;AAAA,UAC/B,CAAC;AAAA,QACF,WAAW,cAAc,UAAU;AAClC,gBAAM,SAAS,KAAK,iBAAiB,UAAU,SAAS;AACxD,cAAI,YAAY,KAAK,iBAAiB,aAAa,SAAS;AAC5D,gBAAM,YAAY,KAAK,iBAAiB,aAAa,SAAS;AAC9D,gBAAM,QAAQ,KAAK,iBAAiB,SAAS,WAAW,CAAC;AACzD,gBAAM,UAAU,KAAK,iBAAiB,WAAW,SAAS;AAC1D,gBAAM,WAAW,KAAK;AAAA,YACrB;AAAA,YACA;AAAA,YACA;AAAA,UACD;AAGA,iBAAO,QAAQ;AACf,kBAAQ,YAAY,YAAY,IAAI;AACpC,cAAI,UAAU;AACb,oBAAQ,QAAQ,EAAE,SAAS;AAAA,UAC5B;AAGA,cAAI,OAAO,QAAQ,eAAe,UAAU;AAC3C,oBAAQ,aAAa,QAAQ,WAAW,MAAM,GAAG,EAAE,IAAI,CAAC,cAAc,UAAU,KAAK,CAAC;AAAA,UACvF;AACA,kBAAQ,2BAA2B;AAEnC,cAAI,cAAc,UAAU;AAC3B,wBAAY,KAAK,iBAAiB,gBAAgB,SAAS;AAAA,UAC5D,OAAO;AACN,kBAAM,aAAa,KAAK,iBAAiB,cAAc,SAAS;AAChE,kBAAM,YAAY,KAAK,iBAAiB,aAAa,SAAS;AAC9D,wBAAY,KAAK,SAAS,IAAI,SAAS,IAAI,UAAU;AAAA,UACtD;AASA,sBAAY,UAAU,QAAQ,SAAS,MAAM;AAC7C,sBAAY,UAAU,QAAQ,SAAS,MAAM;AAC7C,sBAAY,UAAU,QAAQ,SAAS,MAAM;AAC7C,sBAAY,UAAU,QAAQ,SAAS,MAAM;AAC7C,kBAAQ,SAAS;AAEjB,cAAI,WAAW;AACd,iBAAK,OAAO;AAAA,cACX,IAAI,KAAK,QAAQ,EAAE,IAAI,MAAM,KAAK,QAAQ,EAAE,IAAI,sBAAsB,KAAK;AAAA,gBAC1E;AAAA,gBACA;AAAA,gBACA;AAAA,cACD,CAAC;AAAA,YACF;AAAA,UACD;AAEA,gBAAM,UAAU,MAAM,OAAO,OAAO,QAAQ,OAAO;AAGnD,cAAI,CAAC,WAAW;AACf,oBAAQ,gBAAgB,QAAQ,cAAc,MAAM,GAAG,KAAK;AAAA,UAC7D;AACA,sDAAwB,QAAQ,aAAa;AAE7C,sBAAY,KAAK;AAAA,YAChB;AAAA,YACA,QAAQ,cAAc,IAAI,CAAC,YAAY;AAAA,cACtC,MAAM;AAAA,cACN,YAAY,EAAE,MAAM,UAAU;AAAA,YAC/B,EAAE;AAAA,UACH;AAAA,QACD;AAAA,MACD,SAAS,OAAO;AACf,YAAI,KAAK,eAAe,GAAG;AAC1B,sBAAY,KAAK,EAAE,MAAM,MAAM,SAAS,EAAE,MAAM,OAAO,YAAY,UAAU,CAAC;AAAA,QAC/E,OAAO;AACN,gBAAM,OAAO,OAAO;AACpB,cAAI,MAAM,SAAS;AAClB,kBAAM,QAAQ,YAAY;AAC1B,kBAAM;AAAA,UACP;AACA,gBAAM,IAAI,uCAAmB,KAAK,QAAQ,GAAG,OAAgB;AAAA,YAC5D;AAAA,UACD,CAAC;AAAA,QACF;AAAA,MACD;AAAA,IACD;AACA,QAAI,WAAW;AACd,WAAK,OAAO,KAAK,IAAI,KAAK,QAAQ,EAAE,IAAI,MAAM,KAAK,QAAQ,EAAE,IAAI,cAAc;AAAA,IAChF;AAEA,UAAM,OAAO,OAAO;AAEpB,WAAO,CAAC,WAAW;AAAA,EACpB;AACD;","names":[]}