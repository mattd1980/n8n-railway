{"version":3,"sources":["../../../../nodes/Filter/V1/GenericFunctions.ts"],"sourcesContent":["import moment from 'moment-timezone';\nimport type { INode, NodeParameterValue } from 'n8n-workflow';\nimport { NodeOperationError } from 'n8n-workflow';\n\nconst isDateObject = (value: NodeParameterValue) =>\n\tObject.prototype.toString.call(value) === '[object Date]';\n\nconst isDateInvalid = (value: NodeParameterValue) => value?.toString() === 'Invalid Date';\n\nexport const compareOperationFunctions: {\n\t[key: string]: (value1: NodeParameterValue, value2: NodeParameterValue) => boolean;\n} = {\n\tafter: (value1: NodeParameterValue, value2: NodeParameterValue) => (value1 || 0) > (value2 || 0),\n\tbefore: (value1: NodeParameterValue, value2: NodeParameterValue) => (value1 || 0) < (value2 || 0),\n\tcontains: (value1: NodeParameterValue, value2: NodeParameterValue) =>\n\t\t(value1 || '').toString().includes((value2 || '').toString()),\n\tnotContains: (value1: NodeParameterValue, value2: NodeParameterValue) =>\n\t\t!(value1 || '').toString().includes((value2 || '').toString()),\n\tendsWith: (value1: NodeParameterValue, value2: NodeParameterValue) =>\n\t\t(value1 as string).endsWith(value2 as string),\n\tnotEndsWith: (value1: NodeParameterValue, value2: NodeParameterValue) =>\n\t\t!(value1 as string).endsWith(value2 as string),\n\tequal: (value1: NodeParameterValue, value2: NodeParameterValue) => value1 === value2,\n\tnotEqual: (value1: NodeParameterValue, value2: NodeParameterValue) => value1 !== value2,\n\tlarger: (value1: NodeParameterValue, value2: NodeParameterValue) => (value1 || 0) > (value2 || 0),\n\tlargerEqual: (value1: NodeParameterValue, value2: NodeParameterValue) =>\n\t\t(value1 || 0) >= (value2 || 0),\n\tsmaller: (value1: NodeParameterValue, value2: NodeParameterValue) =>\n\t\t(value1 || 0) < (value2 || 0),\n\tsmallerEqual: (value1: NodeParameterValue, value2: NodeParameterValue) =>\n\t\t(value1 || 0) <= (value2 || 0),\n\tstartsWith: (value1: NodeParameterValue, value2: NodeParameterValue) =>\n\t\t(value1 as string).startsWith(value2 as string),\n\tnotStartsWith: (value1: NodeParameterValue, value2: NodeParameterValue) =>\n\t\t!(value1 as string).startsWith(value2 as string),\n\tisEmpty: (value1: NodeParameterValue) =>\n\t\t[undefined, null, '', NaN].includes(value1 as string) ||\n\t\t(typeof value1 === 'object' && value1 !== null && !isDateObject(value1)\n\t\t\t? Object.entries(value1 as string).length === 0\n\t\t\t: false) ||\n\t\t(isDateObject(value1) && isDateInvalid(value1)),\n\tisNotEmpty: (value1: NodeParameterValue) =>\n\t\t!(\n\t\t\t[undefined, null, '', NaN].includes(value1 as string) ||\n\t\t\t(typeof value1 === 'object' && value1 !== null && !isDateObject(value1)\n\t\t\t\t? Object.entries(value1 as string).length === 0\n\t\t\t\t: false) ||\n\t\t\t(isDateObject(value1) && isDateInvalid(value1))\n\t\t),\n\tregex: (value1: NodeParameterValue, value2: NodeParameterValue) => {\n\t\tconst regexMatch = (value2 || '').toString().match(new RegExp('^/(.*?)/([gimusy]*)$'));\n\n\t\tlet regex: RegExp;\n\t\tif (!regexMatch) {\n\t\t\tregex = new RegExp((value2 || '').toString());\n\t\t} else if (regexMatch.length === 1) {\n\t\t\tregex = new RegExp(regexMatch[1]);\n\t\t} else {\n\t\t\tregex = new RegExp(regexMatch[1], regexMatch[2]);\n\t\t}\n\n\t\treturn !!(value1 || '').toString().match(regex);\n\t},\n\tnotRegex: (value1: NodeParameterValue, value2: NodeParameterValue) => {\n\t\tconst regexMatch = (value2 || '').toString().match(new RegExp('^/(.*?)/([gimusy]*)$'));\n\n\t\tlet regex: RegExp;\n\t\tif (!regexMatch) {\n\t\t\tregex = new RegExp((value2 || '').toString());\n\t\t} else if (regexMatch.length === 1) {\n\t\t\tregex = new RegExp(regexMatch[1]);\n\t\t} else {\n\t\t\tregex = new RegExp(regexMatch[1], regexMatch[2]);\n\t\t}\n\n\t\treturn !(value1 || '').toString().match(regex);\n\t},\n};\n\n// Converts the input data of a dateTime into a number for easy compare\nexport const convertDateTime = (node: INode, value: NodeParameterValue): number => {\n\tlet returnValue: number | undefined = undefined;\n\tif (typeof value === 'string') {\n\t\treturnValue = new Date(value).getTime();\n\t} else if (typeof value === 'number') {\n\t\treturnValue = value;\n\t}\n\tif (moment.isMoment(value)) {\n\t\treturnValue = value.unix();\n\t}\n\tif ((value as unknown as object) instanceof Date) {\n\t\treturnValue = (value as unknown as Date).getTime();\n\t}\n\n\tif (returnValue === undefined || isNaN(returnValue)) {\n\t\tthrow new NodeOperationError(node, `The value \"${value}\" is not a valid DateTime.`);\n\t}\n\n\treturn returnValue;\n};\n"],"mappings":"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","names":["moment"]}