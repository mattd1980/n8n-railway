{"version":3,"sources":["../../../nodes/QuestDb/QuestDb.node.ts"],"sourcesContent":["import type {\n\tIExecuteFunctions,\n\tINodeExecutionData,\n\tINodeType,\n\tINodeTypeDescription,\n} from 'n8n-workflow';\nimport { NodeConnectionTypes, NodeOperationError } from 'n8n-workflow';\nimport pgPromise from 'pg-promise';\n\nimport { pgInsert, pgQueryV2 } from '../Postgres/v1/genericFunctions';\n\nexport class QuestDb implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'QuestDB',\n\t\tname: 'questDb',\n\t\t// eslint-disable-next-line n8n-nodes-base/node-class-description-icon-not-svg\n\t\ticon: 'file:questdb.png',\n\t\tgroup: ['input'],\n\t\tversion: 1,\n\t\tdescription: 'Get, add and update data in QuestDB',\n\t\tdefaults: {\n\t\t\tname: 'QuestDB',\n\t\t},\n\t\tusableAsTool: true,\n\t\tinputs: [NodeConnectionTypes.Main],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tparameterPane: 'wide',\n\t\tcredentials: [\n\t\t\t{\n\t\t\t\tname: 'questDb',\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Operation',\n\t\t\t\tname: 'operation',\n\t\t\t\ttype: 'options',\n\t\t\t\tnoDataExpression: true,\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Execute Query',\n\t\t\t\t\t\tvalue: 'executeQuery',\n\t\t\t\t\t\tdescription: 'Executes a SQL query',\n\t\t\t\t\t\taction: 'Execute a SQL query',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Insert',\n\t\t\t\t\t\tvalue: 'insert',\n\t\t\t\t\t\tdescription: 'Insert rows in database',\n\t\t\t\t\t\taction: 'Insert rows in database',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'insert',\n\t\t\t},\n\n\t\t\t// ----------------------------------\n\t\t\t//         executeQuery\n\t\t\t// ----------------------------------\n\t\t\t{\n\t\t\t\tdisplayName: 'Query',\n\t\t\t\tname: 'query',\n\t\t\t\ttype: 'string',\n\t\t\t\tnoDataExpression: true,\n\t\t\t\ttypeOptions: {\n\t\t\t\t\teditor: 'sqlEditor',\n\t\t\t\t\tsqlDialect: 'PostgreSQL',\n\t\t\t\t},\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['executeQuery'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdefault: '',\n\t\t\t\tplaceholder: 'SELECT id, name FROM product WHERE quantity > $1 AND price <= $2',\n\t\t\t\trequired: true,\n\t\t\t\tdescription:\n\t\t\t\t\t'The SQL query to execute. You can use n8n expressions or $1 and $2 in conjunction with query parameters.',\n\t\t\t},\n\n\t\t\t// ----------------------------------\n\t\t\t//         insert\n\t\t\t// ----------------------------------\n\t\t\t{\n\t\t\t\tdisplayName: 'Schema',\n\t\t\t\tname: 'schema',\n\t\t\t\ttype: 'hidden', // Schema is used by pgInsert\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['insert'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdefault: '',\n\t\t\t\tdescription: 'Name of the schema the table belongs to',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Table',\n\t\t\t\tname: 'table',\n\t\t\t\ttype: 'string',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['insert'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdefault: '',\n\t\t\t\trequired: true,\n\t\t\t\tdescription: 'Name of the table in which to insert data to',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Columns',\n\t\t\t\tname: 'columns',\n\t\t\t\ttype: 'string',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['insert'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdefault: '',\n\t\t\t\tplaceholder: 'id,name,description',\n\t\t\t\tdescription:\n\t\t\t\t\t'Comma-separated list of the properties which should used as columns for the new rows',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Return Fields',\n\t\t\t\tname: 'returnFields',\n\t\t\t\ttype: 'string',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['insert'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdefault: '*',\n\t\t\t\tdescription: 'Comma-separated list of the fields that the operation will return',\n\t\t\t},\n\t\t\t// ----------------------------------\n\t\t\t//         additional fields\n\t\t\t// ----------------------------------\n\t\t\t{\n\t\t\t\tdisplayName: 'Additional Fields',\n\t\t\t\tname: 'additionalFields',\n\t\t\t\ttype: 'collection',\n\t\t\t\tplaceholder: 'Add Field',\n\t\t\t\tdefault: {},\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['executeQuery'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Mode',\n\t\t\t\t\t\tname: 'mode',\n\t\t\t\t\t\ttype: 'options',\n\t\t\t\t\t\toptions: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: 'Independently',\n\t\t\t\t\t\t\t\tvalue: 'independently',\n\t\t\t\t\t\t\t\tdescription: 'Execute each query independently',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: 'Transaction',\n\t\t\t\t\t\t\t\tvalue: 'transaction',\n\t\t\t\t\t\t\t\tdescription: 'Executes all queries in a single transaction',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t\tdefault: 'independently',\n\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t'The way queries should be sent to database. Can be used in conjunction with <b>Continue on Fail</b>. See <a href=\"https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.questdb/\">the docs</a> for more examples.',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Query Parameters',\n\t\t\t\t\t\tname: 'queryParams',\n\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\t\t'/operation': ['executeQuery'],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\tplaceholder: 'quantity,price',\n\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t'Comma-separated list of properties which should be used as query parameters',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Additional Fields',\n\t\t\t\tname: 'additionalFields',\n\t\t\t\ttype: 'hidden',\n\t\t\t\tdefault: {},\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['insert'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t};\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t\tconst credentials = await this.getCredentials('questDb');\n\n\t\tconst pgp = pgPromise();\n\n\t\tconst config = {\n\t\t\thost: credentials.host as string,\n\t\t\tport: credentials.port as number,\n\t\t\tdatabase: credentials.database as string,\n\t\t\tuser: credentials.user as string,\n\t\t\tpassword: credentials.password as string,\n\t\t\tssl: !['disable', undefined].includes(credentials.ssl as string | undefined),\n\t\t\tsslmode: (credentials.ssl as string) || 'disable',\n\t\t};\n\n\t\tconst db = pgp(config);\n\n\t\tlet returnItems: INodeExecutionData[] = [];\n\n\t\tconst items = this.getInputData();\n\t\tconst operation = this.getNodeParameter('operation', 0);\n\n\t\tif (operation === 'executeQuery') {\n\t\t\t// ----------------------------------\n\t\t\t//         executeQuery\n\t\t\t// ----------------------------------\n\n\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', 0);\n\t\t\tconst mode = (additionalFields.mode || 'independently') as string;\n\n\t\t\tconst queryResult = await pgQueryV2.call(this, pgp, db, items, this.continueOnFail(), {\n\t\t\t\toverrideMode: mode,\n\t\t\t\tresolveExpression: true,\n\t\t\t});\n\n\t\t\treturnItems = this.helpers.returnJsonArray(queryResult);\n\t\t} else if (operation === 'insert') {\n\t\t\t// ----------------------------------\n\t\t\t//         insert\n\t\t\t// ----------------------------------\n\n\t\t\t// Transaction and multiple won't work properly with QuestDB.\n\t\t\t// So we send queries independently.\n\t\t\tawait pgInsert(this.getNodeParameter, pgp, db, items, this.continueOnFail(), 'independently');\n\n\t\t\tconst returnFields = this.getNodeParameter('returnFields', 0) as string;\n\t\t\tconst table = this.getNodeParameter('table', 0) as string;\n\n\t\t\t// eslint-disable-next-line n8n-local-rules/no-interpolation-in-regular-string\n\t\t\tconst insertData = await db.any('SELECT ${columns:name} from ${table:name}', {\n\t\t\t\tcolumns: returnFields\n\t\t\t\t\t.split(',')\n\t\t\t\t\t.map((value) => value.trim())\n\t\t\t\t\t.filter((value) => !!value),\n\t\t\t\ttable,\n\t\t\t});\n\n\t\t\treturnItems = this.helpers.returnJsonArray(insertData);\n\t\t} else {\n\t\t\tawait db.$pool.end();\n\t\t\tthrow new NodeOperationError(\n\t\t\t\tthis.getNode(),\n\t\t\t\t`The operation \"${operation}\" is not supported!`,\n\t\t\t);\n\t\t}\n\n\t\t// shuts down the connection pool associated with the db object to allow the process to finish\n\t\tawait db.$pool.end();\n\n\t\treturn [returnItems];\n\t}\n}\n"],"mappings":"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","names":["pgPromise"]}