{"version":3,"sources":["../../../../nodes/Netscaler/ADC/CertificateDescription.ts"],"sourcesContent":["import type { INodeProperties } from 'n8n-workflow';\n\nexport const certificateDescription: INodeProperties[] = [\n\t{\n\t\tdisplayName: 'Operation',\n\t\tname: 'operation',\n\t\ttype: 'options',\n\t\tnoDataExpression: true,\n\t\toptions: [\n\t\t\t{\n\t\t\t\tname: 'Create',\n\t\t\t\tvalue: 'create',\n\t\t\t\taction: 'Create a certificate',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Install',\n\t\t\t\tvalue: 'install',\n\t\t\t\taction: 'Install a certificate',\n\t\t\t},\n\t\t],\n\t\tdefault: 'create',\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tresource: ['certificate'],\n\t\t\t},\n\t\t},\n\t},\n\t/* -------------------------------------------------------------------------- */\n\t/*                                certificate:create                          */\n\t/* -------------------------------------------------------------------------- */\n\t{\n\t\tdisplayName: 'Certificate File Name',\n\t\tname: 'certificateFileName',\n\t\ttype: 'string',\n\t\trequired: true,\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tresource: ['certificate'],\n\t\t\t\toperation: ['create'],\n\t\t\t},\n\t\t},\n\t\tdefault: '',\n\t\tdescription:\n\t\t\t'Name for and, optionally, path to the generated certificate file. /nsconfig/ssl/ is the default path.',\n\t},\n\t{\n\t\tdisplayName: 'Certificate Format',\n\t\tname: 'certificateFormat',\n\t\ttype: 'options',\n\t\toptions: [\n\t\t\t{\n\t\t\t\tname: 'PEM',\n\t\t\t\tvalue: 'PEM',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'DER',\n\t\t\t\tvalue: 'DER',\n\t\t\t},\n\t\t],\n\t\trequired: true,\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tresource: ['certificate'],\n\t\t\t\toperation: ['create'],\n\t\t\t},\n\t\t},\n\t\tdefault: 'PEM',\n\t\tdescription: 'Format in which the certificate is stored on the appliance',\n\t},\n\t{\n\t\tdisplayName: 'Certificate Type',\n\t\tname: 'certificateType',\n\t\ttype: 'options',\n\t\toptions: [\n\t\t\t{\n\t\t\t\tname: 'Root-CA',\n\t\t\t\tvalue: 'ROOT_CERT',\n\t\t\t\tdescription:\n\t\t\t\t\t'You must specify the key file name. The generated Root-CA certificate can be used for signing end-user client or server certificates or to create Intermediate-CA certificates.',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Intermediate-CA',\n\t\t\t\tvalue: 'INTM_CERT',\n\t\t\t\tdescription: 'Intermediate-CA certificate',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Server',\n\t\t\t\tvalue: 'SRVR_CERT',\n\t\t\t\tdescription: 'SSL server certificate used on SSL servers for end-to-end encryption',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Client',\n\t\t\t\tvalue: 'CLNT_CERT',\n\t\t\t\tdescription: 'End-user client certificate used for client authentication',\n\t\t\t},\n\t\t],\n\t\trequired: true,\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tresource: ['certificate'],\n\t\t\t\toperation: ['create'],\n\t\t\t},\n\t\t},\n\t\tdefault: 'ROOT_CERT',\n\t},\n\t{\n\t\tdisplayName: 'Certificate Request File Name',\n\t\tname: 'certificateRequestFileName',\n\t\ttype: 'string',\n\t\tdefault: '',\n\t\trequired: true,\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\toperation: ['create'],\n\t\t\t\tresource: ['certificate'],\n\t\t\t},\n\t\t},\n\t\tdescription:\n\t\t\t'Name for and, optionally, path to the certificate-signing request (CSR). /nsconfig/ssl/ is the default path.',\n\t},\n\t{\n\t\tdisplayName: 'CA Certificate File Name',\n\t\tname: 'caCertificateFileName',\n\t\ttype: 'string',\n\t\trequired: true,\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tresource: ['certificate'],\n\t\t\t\toperation: ['create'],\n\t\t\t\tcertificateType: ['INTM_CERT', 'SRVR_CERT', 'CLNT_CERT'],\n\t\t\t},\n\t\t},\n\t\tdefault: '',\n\t\tdescription:\n\t\t\t'Name of the CA certificate file that issues and signs the Intermediate-CA certificate or the end-user client and server certificates',\n\t},\n\t{\n\t\tdisplayName: 'CA Certificate File Format',\n\t\tname: 'caCertificateFileFormat',\n\t\ttype: 'options',\n\t\toptions: [\n\t\t\t{\n\t\t\t\tname: 'PEM',\n\t\t\t\tvalue: 'PEM',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'DER',\n\t\t\t\tvalue: 'DER',\n\t\t\t},\n\t\t],\n\t\trequired: true,\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tresource: ['certificate'],\n\t\t\t\toperation: ['create'],\n\t\t\t\tcertificateType: ['INTM_CERT', 'SRVR_CERT', 'CLNT_CERT'],\n\t\t\t},\n\t\t},\n\t\tdefault: 'PEM',\n\t\tdescription: 'Format of the CA certificate',\n\t},\n\t{\n\t\tdisplayName: 'CA Private Key File Name',\n\t\tname: 'caPrivateKeyFileName',\n\t\ttype: 'string',\n\t\trequired: true,\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tresource: ['certificate'],\n\t\t\t\toperation: ['create'],\n\t\t\t\tcertificateType: ['INTM_CERT', 'SRVR_CERT', 'CLNT_CERT'],\n\t\t\t},\n\t\t},\n\t\tdefault: '',\n\t\tdescription:\n\t\t\t'Private key, associated with the CA certificate that is used to sign the Intermediate-CA certificate or the end-user client and server certificate. If the CA key file is password protected, the user is prompted to enter the pass phrase that was used to encrypt the key.',\n\t},\n\t{\n\t\tdisplayName: 'CA Private Key File Format',\n\t\tname: 'caPrivateKeyFileFormat',\n\t\ttype: 'options',\n\t\toptions: [\n\t\t\t{\n\t\t\t\tname: 'PEM',\n\t\t\t\tvalue: 'PEM',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'DER',\n\t\t\t\tvalue: 'DER',\n\t\t\t},\n\t\t],\n\t\trequired: true,\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tresource: ['certificate'],\n\t\t\t\toperation: ['create'],\n\t\t\t\tcertificateType: ['INTM_CERT', 'SRVR_CERT', 'CLNT_CERT'],\n\t\t\t},\n\t\t},\n\t\tdefault: 'PEM',\n\t\tdescription: 'Format of the CA certificate',\n\t},\n\t{\n\t\tdisplayName: 'Private Key File Name',\n\t\tname: 'privateKeyFileName',\n\t\ttype: 'string',\n\t\tdefault: '',\n\t\trequired: true,\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\toperation: ['create'],\n\t\t\t\tresource: ['certificate'],\n\t\t\t\tcertificateType: ['ROOT_CERT'],\n\t\t\t},\n\t\t},\n\t\tdescription:\n\t\t\t'Name for and, optionally, path to the private key. You can either use an existing RSA or DSA key that you own or create a new private key on the Netscaler ADC. This file is required only when creating a self-signed Root-CA certificate. The key file is stored in the /nsconfig/ssl directory by default.',\n\t},\n\t{\n\t\tdisplayName: 'CA Serial File Number',\n\t\tname: 'caSerialFileNumber',\n\t\ttype: 'string',\n\t\trequired: true,\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tresource: ['certificate'],\n\t\t\t\toperation: ['create'],\n\t\t\t\tcertificateType: ['INTM_CERT', 'SRVR_CERT', 'CLNT_CERT'],\n\t\t\t},\n\t\t},\n\t\tdefault: '',\n\t\tdescription:\n\t\t\t'Serial number file maintained for the CA certificate. This file contains the serial number of the next certificate to be issued or signed by the CA.',\n\t},\n\t{\n\t\tdisplayName: 'Private Key Format',\n\t\tname: 'privateKeyFormat',\n\t\ttype: 'options',\n\t\toptions: [\n\t\t\t{\n\t\t\t\tname: 'PEM',\n\t\t\t\tvalue: 'PEM',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'DER',\n\t\t\t\tvalue: 'DER',\n\t\t\t},\n\t\t],\n\t\trequired: true,\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tresource: ['certificate'],\n\t\t\t\toperation: ['create'],\n\t\t\t\tcertificateType: ['ROOT_CERT'],\n\t\t\t},\n\t\t},\n\t\tdefault: 'PEM',\n\t\tdescription: 'Format in which the key is stored on the appliance',\n\t},\n\t{\n\t\tdisplayName: 'Additional Fields',\n\t\tname: 'additionalFields',\n\t\ttype: 'collection',\n\t\tplaceholder: 'Add Field',\n\t\tdefault: {},\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tresource: ['certificate'],\n\t\t\t\toperation: ['create'],\n\t\t\t},\n\t\t},\n\t\toptions: [\n\t\t\t{\n\t\t\t\tdisplayName: 'PEM Passphrase (For Encrypted Key)',\n\t\t\t\tname: 'pempassphrase',\n\t\t\t\ttype: 'string',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\t'/certificateType': ['ROOT_CERT'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdefault: '',\n\t\t\t\tdescription:\n\t\t\t\t\t'Name for and, optionally, path to the private key. You can either use an existing RSA or DSA key that you own or create a new private key on the Netscaler ADC. This file is required only when creating a self-signed Root-CA certificate. The key file is stored in the /nsconfig/ssl directory by default.',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'PEM Passphrase (For Encrypted CA Key)',\n\t\t\t\tname: 'pempassphrase',\n\t\t\t\ttype: 'string',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\thide: {\n\t\t\t\t\t\t'/certificateType': ['ROOT_CERT'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdefault: '',\n\t\t\t\tdescription:\n\t\t\t\t\t'Name for and, optionally, path to the private key. You can either use an existing RSA or DSA key that you own or create a new private key on the Netscaler ADC. This file is required only when creating a self-signed Root-CA certificate. The key file is stored in the /nsconfig/ssl directory by default.',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Subject Alternative Name',\n\t\t\t\tname: 'subjectaltname',\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: '',\n\t\t\t\tdescription:\n\t\t\t\t\t'Subject Alternative Name (SAN) is an extension to X.509 that allows various values to be associated with a security certificate using a subjectAltName field',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Validity Period (Number of Days)',\n\t\t\t\tname: 'days',\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: '',\n\t\t\t\tdescription:\n\t\t\t\t\t'Number of days for which the certificate will be valid, beginning with the time and day (system time) of creation',\n\t\t\t},\n\t\t],\n\t},\n\t/* -------------------------------------------------------------------------- */\n\t/*                                certificate:install                          */\n\t/* -------------------------------------------------------------------------- */\n\t{\n\t\tdisplayName: 'Certificate-Key Pair Name',\n\t\tname: 'certificateKeyPairName',\n\t\ttype: 'string',\n\t\trequired: true,\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tresource: ['certificate'],\n\t\t\t\toperation: ['install'],\n\t\t\t},\n\t\t},\n\t\tdefault: '',\n\t\tdescription: 'Name for the certificate and private-key pair',\n\t},\n\t{\n\t\tdisplayName: 'Certificate File Name',\n\t\tname: 'certificateFileName',\n\t\ttype: 'string',\n\t\trequired: true,\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tresource: ['certificate'],\n\t\t\t\toperation: ['install'],\n\t\t\t},\n\t\t},\n\t\tdefault: '',\n\t\tdescription:\n\t\t\t'Name of and, optionally, path to the X509 certificate file that is used to form the certificate-key pair. /nsconfig/ssl/ is the default path.',\n\t},\n\t{\n\t\tdisplayName: 'Private Key File Name',\n\t\tname: 'privateKeyFileName',\n\t\ttype: 'string',\n\t\tdefault: '',\n\t\trequired: true,\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tresource: ['certificate'],\n\t\t\t\toperation: ['install'],\n\t\t\t},\n\t\t},\n\t\tdescription:\n\t\t\t'Name of and, optionally, path to the X509 certificate file that is used to form the certificate-key pair. /nsconfig/ssl/ is the default path.',\n\t},\n\t{\n\t\tdisplayName: 'Certificate Format',\n\t\tname: 'certificateFormat',\n\t\ttype: 'options',\n\t\toptions: [\n\t\t\t{\n\t\t\t\tname: 'PEM',\n\t\t\t\tvalue: 'PEM',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'DER',\n\t\t\t\tvalue: 'DER',\n\t\t\t},\n\t\t],\n\t\trequired: true,\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tresource: ['certificate'],\n\t\t\t\toperation: ['install'],\n\t\t\t},\n\t\t},\n\t\tdefault: 'PEM',\n\t\tdescription:\n\t\t\t'Input format of the certificate and the private-key files. The three formats supported by the appliance are: PEM - Privacy Enhanced Mail DER - Distinguished Encoding Rule PFX - Personal Information Exchange.',\n\t},\n\t{\n\t\tdisplayName: 'Password',\n\t\tname: 'password',\n\t\ttype: 'string',\n\t\ttypeOptions: {\n\t\t\tpassword: true,\n\t\t},\n\t\trequired: true,\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tresource: ['certificate'],\n\t\t\t\toperation: ['install'],\n\t\t\t\tcertificateFormat: ['PEM'],\n\t\t\t},\n\t\t},\n\t\tdefault: '',\n\t\tdescription:\n\t\t\t'Input format of the certificate and the private-key files. The three formats supported by the appliance are: PEM - Privacy Enhanced Mail DER - Distinguished Encoding Rule PFX - Personal Information Exchange.',\n\t},\n\t{\n\t\tdisplayName: 'Notify When Expires',\n\t\tname: 'notifyExpiration',\n\t\ttype: 'boolean',\n\t\trequired: true,\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tresource: ['certificate'],\n\t\t\t\toperation: ['install'],\n\t\t\t},\n\t\t},\n\t\tdefault: false,\n\t\tdescription: 'Whether to alert when the certificate is about to expire',\n\t},\n\t{\n\t\tdisplayName: 'Notification Period (Days)',\n\t\tname: 'notificationPeriod',\n\t\ttype: 'number',\n\t\tdefault: 10,\n\t\trequired: true,\n\t\ttypeOptions: {\n\t\t\tminValue: 10,\n\t\t\tmaxValue: 100,\n\t\t},\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tresource: ['certificate'],\n\t\t\t\toperation: ['install'],\n\t\t\t\tnotifyExpiration: [true],\n\t\t\t},\n\t\t},\n\t\tdescription:\n\t\t\t'Time, in number of days, before certificate expiration, at which to generate an alert that the certificate is about to expire',\n\t},\n\t{\n\t\tdisplayName: 'Certificate Bundle',\n\t\tname: 'certificateBundle',\n\t\ttype: 'boolean',\n\t\tdefault: false,\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tresource: ['certificate'],\n\t\t\t\toperation: ['install'],\n\t\t\t\tcertificateFormat: ['PEM'],\n\t\t\t},\n\t\t},\n\t\tdescription:\n\t\t\t\"Whether to parse the certificate chain as a single file after linking the server certificate to its issuer's certificate within the file\",\n\t},\n];\n"],"mappings":"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","names":[]}