{"version":3,"sources":["../../../../nodes/Slack/V2/SlackV2.node.ts"],"sourcesContent":["import moment from 'moment-timezone';\nimport type {\n\tIDataObject,\n\tIExecuteFunctions,\n\tILoadOptionsFunctions,\n\tINodeExecutionData,\n\tINodeListSearchItems,\n\tINodeListSearchResult,\n\tINodeParameterResourceLocator,\n\tINodePropertyOptions,\n\tINodeType,\n\tINodeTypeBaseDescription,\n\tINodeTypeDescription,\n\tJsonObject,\n} from 'n8n-workflow';\nimport {\n\tBINARY_ENCODING,\n\tNodeConnectionTypes,\n\tNodeOperationError,\n\tSEND_AND_WAIT_OPERATION,\n} from 'n8n-workflow';\nimport type { Readable } from 'stream';\n\nimport { channelFields, channelOperations } from './ChannelDescription';\nimport { fileFields, fileOperations } from './FileDescription';\nimport {\n\tslackApiRequest,\n\tslackApiRequestAllItems,\n\tgetMessageContent,\n\tgetTarget,\n\tcreateSendAndWaitMessageBody,\n} from './GenericFunctions';\nimport {\n\tchannelRLC,\n\tmessageFields,\n\tmessageOperations,\n\tsendToSelector,\n\tuserRLC,\n} from './MessageDescription';\nimport { reactionFields, reactionOperations } from './ReactionDescription';\nimport { starFields, starOperations } from './StarDescription';\nimport { userFields, userOperations } from './UserDescription';\nimport { userGroupFields, userGroupOperations } from './UserGroupDescription';\nimport { configureWaitTillDate } from '../../../utils/sendAndWait/configureWaitTillDate.util';\nimport { sendAndWaitWebhooksDescription } from '../../../utils/sendAndWait/descriptions';\nimport { getSendAndWaitProperties, sendAndWaitWebhook } from '../../../utils/sendAndWait/utils';\n\nexport class SlackV2 implements INodeType {\n\tdescription: INodeTypeDescription;\n\n\tconstructor(baseDescription: INodeTypeBaseDescription) {\n\t\tthis.description = {\n\t\t\t...baseDescription,\n\t\t\tversion: [2, 2.1, 2.2, 2.3],\n\t\t\tdefaults: {\n\t\t\t\tname: 'Slack',\n\t\t\t},\n\t\t\tinputs: [NodeConnectionTypes.Main],\n\t\t\toutputs: [NodeConnectionTypes.Main],\n\t\t\tusableAsTool: true,\n\t\t\tcredentials: [\n\t\t\t\t{\n\t\t\t\t\tname: 'slackApi',\n\t\t\t\t\trequired: true,\n\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\tauthentication: ['accessToken'],\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'slackOAuth2Api',\n\t\t\t\t\trequired: true,\n\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\tauthentication: ['oAuth2'],\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t],\n\t\t\twebhooks: sendAndWaitWebhooksDescription,\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'Authentication',\n\t\t\t\t\tname: 'authentication',\n\t\t\t\t\ttype: 'options',\n\t\t\t\t\toptions: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'Access Token',\n\t\t\t\t\t\t\tvalue: 'accessToken',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'OAuth2',\n\t\t\t\t\t\t\tvalue: 'oAuth2',\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t\tdefault: 'accessToken',\n\t\t\t\t},\n\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'Resource',\n\t\t\t\t\tname: 'resource',\n\t\t\t\t\ttype: 'options',\n\t\t\t\t\tnoDataExpression: true,\n\t\t\t\t\toptions: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'Channel',\n\t\t\t\t\t\t\tvalue: 'channel',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'File',\n\t\t\t\t\t\t\tvalue: 'file',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'Message',\n\t\t\t\t\t\t\tvalue: 'message',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'Reaction',\n\t\t\t\t\t\t\tvalue: 'reaction',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'Star',\n\t\t\t\t\t\t\tvalue: 'star',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'User',\n\t\t\t\t\t\t\tvalue: 'user',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'User Group',\n\t\t\t\t\t\t\tvalue: 'userGroup',\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t\tdefault: 'message',\n\t\t\t\t},\n\n\t\t\t\t...channelOperations,\n\t\t\t\t...channelFields,\n\t\t\t\t...messageOperations,\n\t\t\t\t...messageFields,\n\t\t\t\t...getSendAndWaitProperties([\n\t\t\t\t\t{ ...sendToSelector, default: 'user' },\n\t\t\t\t\t{\n\t\t\t\t\t\t...channelRLC,\n\t\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\t\tselect: ['channel'],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t...userRLC,\n\t\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\t\tselect: ['user'],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t]).filter((p) => p.name !== 'subject'),\n\t\t\t\t...starOperations,\n\t\t\t\t...starFields,\n\t\t\t\t...fileOperations,\n\t\t\t\t...fileFields,\n\t\t\t\t...reactionOperations,\n\t\t\t\t...reactionFields,\n\t\t\t\t...userOperations,\n\t\t\t\t...userFields,\n\t\t\t\t...userGroupOperations,\n\t\t\t\t...userGroupFields,\n\t\t\t],\n\t\t};\n\t}\n\n\tmethods = {\n\t\tlistSearch: {\n\t\t\tasync getChannels(\n\t\t\t\tthis: ILoadOptionsFunctions,\n\t\t\t\tfilter?: string,\n\t\t\t): Promise<INodeListSearchResult> {\n\t\t\t\tconst qs = { types: 'public_channel,private_channel', limit: 1000 };\n\t\t\t\tconst channels = (await slackApiRequestAllItems.call(\n\t\t\t\t\tthis,\n\t\t\t\t\t'channels',\n\t\t\t\t\t'GET',\n\t\t\t\t\t'/conversations.list',\n\t\t\t\t\t{},\n\t\t\t\t\tqs,\n\t\t\t\t)) as Array<{ id: string; name: string }>;\n\t\t\t\tconst results: INodeListSearchItems[] = channels\n\t\t\t\t\t.map((c) => ({\n\t\t\t\t\t\tname: c.name,\n\t\t\t\t\t\tvalue: c.id,\n\t\t\t\t\t}))\n\t\t\t\t\t.filter(\n\t\t\t\t\t\t(c) =>\n\t\t\t\t\t\t\t!filter ||\n\t\t\t\t\t\t\tc.name.toLowerCase().includes(filter.toLowerCase()) ||\n\t\t\t\t\t\t\tc.value?.toString() === filter,\n\t\t\t\t\t)\n\t\t\t\t\t.sort((a, b) => {\n\t\t\t\t\t\tif (a.name.toLowerCase() < b.name.toLowerCase()) return -1;\n\t\t\t\t\t\tif (a.name.toLowerCase() > b.name.toLowerCase()) return 1;\n\t\t\t\t\t\treturn 0;\n\t\t\t\t\t});\n\t\t\t\treturn { results };\n\t\t\t},\n\t\t\tasync getUsers(this: ILoadOptionsFunctions, filter?: string): Promise<INodeListSearchResult> {\n\t\t\t\tconst users = (await slackApiRequestAllItems.call(\n\t\t\t\t\tthis,\n\t\t\t\t\t'members',\n\t\t\t\t\t'GET',\n\t\t\t\t\t'/users.list',\n\t\t\t\t)) as Array<{ id: string; name: string }>;\n\t\t\t\tconst results: INodeListSearchItems[] = users\n\t\t\t\t\t.map((c) => ({\n\t\t\t\t\t\tname: c.name,\n\t\t\t\t\t\tvalue: c.id,\n\t\t\t\t\t}))\n\t\t\t\t\t.filter(\n\t\t\t\t\t\t(c) =>\n\t\t\t\t\t\t\t!filter ||\n\t\t\t\t\t\t\tc.name.toLowerCase().includes(filter.toLowerCase()) ||\n\t\t\t\t\t\t\tc.value?.toString() === filter,\n\t\t\t\t\t)\n\t\t\t\t\t.sort((a, b) => {\n\t\t\t\t\t\tif (a.name.toLowerCase() < b.name.toLowerCase()) return -1;\n\t\t\t\t\t\tif (a.name.toLowerCase() > b.name.toLowerCase()) return 1;\n\t\t\t\t\t\treturn 0;\n\t\t\t\t\t});\n\t\t\t\treturn { results };\n\t\t\t},\n\t\t},\n\t\tloadOptions: {\n\t\t\t// Get all the users to display them to user so that they can\n\t\t\t// select them easily\n\t\t\tasync getUsers(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst returnData: INodePropertyOptions[] = [];\n\t\t\t\tconst users = await slackApiRequestAllItems.call(this, 'members', 'GET', '/users.list');\n\t\t\t\tfor (const user of users) {\n\t\t\t\t\tconst userName = user.name;\n\t\t\t\t\tconst userId = user.id;\n\t\t\t\t\treturnData.push({\n\t\t\t\t\t\tname: userName,\n\t\t\t\t\t\tvalue: userId,\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\treturnData.sort((a, b) => {\n\t\t\t\t\tif (a.name < b.name) {\n\t\t\t\t\t\treturn -1;\n\t\t\t\t\t}\n\t\t\t\t\tif (a.name > b.name) {\n\t\t\t\t\t\treturn 1;\n\t\t\t\t\t}\n\t\t\t\t\treturn 0;\n\t\t\t\t});\n\n\t\t\t\treturn returnData;\n\t\t\t},\n\t\t\t// Get all the users to display them to user so that they can\n\t\t\t// select them easily\n\t\t\tasync getChannels(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst returnData: INodePropertyOptions[] = [];\n\t\t\t\tconst qs = { types: 'public_channel,private_channel', limit: 1000 };\n\t\t\t\tconst channels = await slackApiRequestAllItems.call(\n\t\t\t\t\tthis,\n\t\t\t\t\t'channels',\n\t\t\t\t\t'GET',\n\t\t\t\t\t'/conversations.list',\n\t\t\t\t\t{},\n\t\t\t\t\tqs,\n\t\t\t\t);\n\t\t\t\tfor (const channel of channels) {\n\t\t\t\t\tconst channelName = channel.name;\n\t\t\t\t\tconst channelId = channel.id;\n\t\t\t\t\treturnData.push({\n\t\t\t\t\t\tname: channelName,\n\t\t\t\t\t\tvalue: channelId,\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\treturnData.sort((a, b) => {\n\t\t\t\t\tif (a.name < b.name) {\n\t\t\t\t\t\treturn -1;\n\t\t\t\t\t}\n\t\t\t\t\tif (a.name > b.name) {\n\t\t\t\t\t\treturn 1;\n\t\t\t\t\t}\n\t\t\t\t\treturn 0;\n\t\t\t\t});\n\n\t\t\t\treturn returnData;\n\t\t\t},\n\t\t\t// Get all the users to display them to user so that they can\n\t\t\t// select them easily\n\t\t\tasync getChannelsName(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst returnData: INodePropertyOptions[] = [];\n\t\t\t\tconst qs = { types: 'public_channel,private_channel', limit: 1000 };\n\t\t\t\tconst channels = await slackApiRequestAllItems.call(\n\t\t\t\t\tthis,\n\t\t\t\t\t'channels',\n\t\t\t\t\t'GET',\n\t\t\t\t\t'/conversations.list',\n\t\t\t\t\t{},\n\t\t\t\t\tqs,\n\t\t\t\t);\n\t\t\t\tfor (const channel of channels) {\n\t\t\t\t\tconst channelName = channel.name;\n\t\t\t\t\treturnData.push({\n\t\t\t\t\t\tname: channelName,\n\t\t\t\t\t\tvalue: channelName,\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\treturnData.sort((a, b) => {\n\t\t\t\t\tif (a.name < b.name) {\n\t\t\t\t\t\treturn -1;\n\t\t\t\t\t}\n\t\t\t\t\tif (a.name > b.name) {\n\t\t\t\t\t\treturn 1;\n\t\t\t\t\t}\n\t\t\t\t\treturn 0;\n\t\t\t\t});\n\n\t\t\t\treturn returnData;\n\t\t\t},\n\t\t\t// Get all the team fields to display them to user so that they can\n\t\t\t// select them easily\n\t\t\tasync getTeamFields(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst returnData: INodePropertyOptions[] = [];\n\t\t\t\tconst {\n\t\t\t\t\tprofile: { fields },\n\t\t\t\t} = await slackApiRequest.call(this, 'GET', '/team.profile.get');\n\t\t\t\tfor (const field of fields) {\n\t\t\t\t\tconst fieldName = field.label;\n\t\t\t\t\tconst fieldId = field.id;\n\t\t\t\t\treturnData.push({\n\t\t\t\t\t\tname: fieldName,\n\t\t\t\t\t\tvalue: fieldId,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn returnData;\n\t\t\t},\n\t\t},\n\t};\n\n\twebhook = sendAndWaitWebhook;\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t\tconst items = this.getInputData();\n\t\tconst returnData: INodeExecutionData[] = [];\n\t\tconst length = items.length;\n\t\tlet qs: IDataObject;\n\t\tlet responseData;\n\t\tconst authentication = this.getNodeParameter('authentication', 0) as string;\n\t\tconst resource = this.getNodeParameter('resource', 0);\n\t\tconst operation = this.getNodeParameter('operation', 0);\n\n\t\tconst nodeVersion = this.getNode().typeVersion;\n\t\tconst instanceId = this.getInstanceId();\n\n\t\tif (resource === 'message' && operation === SEND_AND_WAIT_OPERATION) {\n\t\t\tawait slackApiRequest.call(\n\t\t\t\tthis,\n\t\t\t\t'POST',\n\t\t\t\t'/chat.postMessage',\n\t\t\t\tcreateSendAndWaitMessageBody(this),\n\t\t\t);\n\n\t\t\tconst waitTill = configureWaitTillDate(this);\n\n\t\t\tawait this.putExecutionToWait(waitTill);\n\t\t\treturn [this.getInputData()];\n\t\t}\n\n\t\tfor (let i = 0; i < length; i++) {\n\t\t\ttry {\n\t\t\t\tresponseData = {\n\t\t\t\t\terror: 'Resource ' + resource + ' / operation ' + operation + ' not found!',\n\t\t\t\t};\n\t\t\t\tqs = {};\n\t\t\t\tif (resource === 'channel') {\n\t\t\t\t\t//https://api.slack.com/methods/conversations.archive\n\t\t\t\t\tif (operation === 'archive') {\n\t\t\t\t\t\tconst channel = this.getNodeParameter(\n\t\t\t\t\t\t\t'channelId',\n\t\t\t\t\t\t\ti,\n\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t{ extractValue: true },\n\t\t\t\t\t\t) as string;\n\t\t\t\t\t\tconst body: IDataObject = {\n\t\t\t\t\t\t\tchannel,\n\t\t\t\t\t\t};\n\t\t\t\t\t\tresponseData = await slackApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'POST',\n\t\t\t\t\t\t\t'/conversations.archive',\n\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\t//https://api.slack.com/methods/conversations.close\n\t\t\t\t\tif (operation === 'close') {\n\t\t\t\t\t\tconst channel = this.getNodeParameter(\n\t\t\t\t\t\t\t'channelId',\n\t\t\t\t\t\t\ti,\n\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t{ extractValue: true },\n\t\t\t\t\t\t) as string;\n\t\t\t\t\t\tconst body: IDataObject = {\n\t\t\t\t\t\t\tchannel,\n\t\t\t\t\t\t};\n\t\t\t\t\t\tresponseData = await slackApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'POST',\n\t\t\t\t\t\t\t'/conversations.close',\n\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\t//https://api.slack.com/methods/conversations.create\n\t\t\t\t\tif (operation === 'create') {\n\t\t\t\t\t\tlet channel = this.getNodeParameter(\n\t\t\t\t\t\t\t'channelId',\n\t\t\t\t\t\t\ti,\n\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t{ extractValue: true },\n\t\t\t\t\t\t) as string;\n\t\t\t\t\t\tchannel = channel[0] === '#' ? channel.slice(1) : channel;\n\t\t\t\t\t\tconst channelVisibility = this.getNodeParameter('channelVisibility', i) as string;\n\t\t\t\t\t\tconst body: IDataObject = {\n\t\t\t\t\t\t\tname: channel,\n\t\t\t\t\t\t\tis_private: channelVisibility === 'private' ? true : false,\n\t\t\t\t\t\t};\n\t\t\t\t\t\tresponseData = await slackApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'POST',\n\t\t\t\t\t\t\t'/conversations.create',\n\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tresponseData = responseData.channel;\n\t\t\t\t\t}\n\t\t\t\t\t//https://api.slack.com/methods/conversations.kick\n\t\t\t\t\tif (operation === 'kick') {\n\t\t\t\t\t\tconst channel = this.getNodeParameter(\n\t\t\t\t\t\t\t'channelId',\n\t\t\t\t\t\t\ti,\n\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t{ extractValue: true },\n\t\t\t\t\t\t) as string;\n\t\t\t\t\t\tconst userId = this.getNodeParameter('userId', i) as string;\n\t\t\t\t\t\tconst body: IDataObject = {\n\t\t\t\t\t\t\tchannel,\n\t\t\t\t\t\t\tuser: userId,\n\t\t\t\t\t\t};\n\t\t\t\t\t\tresponseData = await slackApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'POST',\n\t\t\t\t\t\t\t'/conversations.kick',\n\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\t//https://api.slack.com/methods/conversations.join\n\t\t\t\t\tif (operation === 'join') {\n\t\t\t\t\t\tconst channel = this.getNodeParameter(\n\t\t\t\t\t\t\t'channelId',\n\t\t\t\t\t\t\ti,\n\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t{ extractValue: true },\n\t\t\t\t\t\t) as string;\n\t\t\t\t\t\tconst body: IDataObject = {\n\t\t\t\t\t\t\tchannel,\n\t\t\t\t\t\t};\n\t\t\t\t\t\tresponseData = await slackApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'POST',\n\t\t\t\t\t\t\t'/conversations.join',\n\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tresponseData = responseData.channel;\n\t\t\t\t\t}\n\t\t\t\t\t//https://api.slack.com/methods/conversations.info\n\t\t\t\t\tif (operation === 'get') {\n\t\t\t\t\t\tconst channel = this.getNodeParameter(\n\t\t\t\t\t\t\t'channelId',\n\t\t\t\t\t\t\ti,\n\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t{ extractValue: true },\n\t\t\t\t\t\t) as string;\n\t\t\t\t\t\tqs.channel = channel;\n\t\t\t\t\t\tresponseData = await slackApiRequest.call(this, 'POST', '/conversations.info', {}, qs);\n\t\t\t\t\t\tresponseData = responseData.channel;\n\t\t\t\t\t}\n\t\t\t\t\t//https://api.slack.com/methods/conversations.list\n\t\t\t\t\tif (operation === 'getAll') {\n\t\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', i);\n\t\t\t\t\t\tconst filters = this.getNodeParameter('filters', i);\n\t\t\t\t\t\tif (filters.types) {\n\t\t\t\t\t\t\tqs.types = (filters.types as string[]).join(',');\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (filters.excludeArchived) {\n\t\t\t\t\t\t\tqs.exclude_archived = filters.excludeArchived as boolean;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (returnAll) {\n\t\t\t\t\t\t\tresponseData = await slackApiRequestAllItems.call(\n\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t'channels',\n\t\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t\t'/conversations.list',\n\t\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tqs.limit = this.getNodeParameter('limit', i);\n\t\t\t\t\t\t\tresponseData = await slackApiRequest.call(this, 'GET', '/conversations.list', {}, qs);\n\t\t\t\t\t\t\tresponseData = responseData.channels;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t//https://api.slack.com/methods/conversations.history\n\t\t\t\t\tif (operation === 'history') {\n\t\t\t\t\t\tconst channel = this.getNodeParameter(\n\t\t\t\t\t\t\t'channelId',\n\t\t\t\t\t\t\ti,\n\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t{ extractValue: true },\n\t\t\t\t\t\t) as string;\n\t\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', i);\n\t\t\t\t\t\tconst filters = this.getNodeParameter('filters', i);\n\t\t\t\t\t\tqs.channel = channel;\n\t\t\t\t\t\tif (filters.inclusive) {\n\t\t\t\t\t\t\tqs.inclusive = filters.inclusive as boolean;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (filters.latest) {\n\t\t\t\t\t\t\tqs.latest = new Date(filters.latest as string).getTime() / 1000;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (filters.oldest) {\n\t\t\t\t\t\t\tqs.oldest = new Date(filters.oldest as string).getTime() / 1000;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (returnAll) {\n\t\t\t\t\t\t\tresponseData = await slackApiRequestAllItems.call(\n\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t'messages',\n\t\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t\t'/conversations.history',\n\t\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tqs.limit = this.getNodeParameter('limit', i);\n\t\t\t\t\t\t\tresponseData = await slackApiRequest.call(\n\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t\t'/conversations.history',\n\t\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tresponseData = responseData.messages;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t//https://api.slack.com/methods/conversations.invite\n\t\t\t\t\tif (operation === 'invite') {\n\t\t\t\t\t\tconst channel = this.getNodeParameter(\n\t\t\t\t\t\t\t'channelId',\n\t\t\t\t\t\t\ti,\n\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t{ extractValue: true },\n\t\t\t\t\t\t) as string;\n\t\t\t\t\t\tconst userIds = (this.getNodeParameter('userIds', i) as string[]).join(',');\n\t\t\t\t\t\tconst body: IDataObject = {\n\t\t\t\t\t\t\tchannel,\n\t\t\t\t\t\t\tusers: userIds,\n\t\t\t\t\t\t};\n\t\t\t\t\t\tresponseData = await slackApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'POST',\n\t\t\t\t\t\t\t'/conversations.invite',\n\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tresponseData = responseData.channel;\n\t\t\t\t\t}\n\t\t\t\t\t//https://api.slack.com/methods/conversations.leave\n\t\t\t\t\tif (operation === 'leave') {\n\t\t\t\t\t\tconst channel = this.getNodeParameter(\n\t\t\t\t\t\t\t'channelId',\n\t\t\t\t\t\t\ti,\n\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t{ extractValue: true },\n\t\t\t\t\t\t) as string;\n\t\t\t\t\t\tconst body: IDataObject = {\n\t\t\t\t\t\t\tchannel,\n\t\t\t\t\t\t};\n\t\t\t\t\t\tresponseData = await slackApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'POST',\n\t\t\t\t\t\t\t'/conversations.leave',\n\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\t//https://api.slack.com/methods/conversations.members\n\t\t\t\t\tif (operation === 'member') {\n\t\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', 0);\n\t\t\t\t\t\tconst resolveData = this.getNodeParameter('resolveData', 0);\n\t\t\t\t\t\tqs.channel = this.getNodeParameter(\n\t\t\t\t\t\t\t'channelId',\n\t\t\t\t\t\t\ti,\n\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t{ extractValue: true },\n\t\t\t\t\t\t) as string;\n\t\t\t\t\t\tif (returnAll) {\n\t\t\t\t\t\t\tresponseData = await slackApiRequestAllItems.call(\n\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t'members',\n\t\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t\t'/conversations.members',\n\t\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tresponseData = responseData.map((member: string) => ({ member }));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tqs.limit = this.getNodeParameter('limit', i);\n\t\t\t\t\t\t\tresponseData = await slackApiRequest.call(\n\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t\t'/conversations.members',\n\t\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tresponseData = responseData.members.map((member: string) => ({ member }));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (resolveData) {\n\t\t\t\t\t\t\tconst data: IDataObject[] = [];\n\t\t\t\t\t\t\tfor (const { member } of responseData) {\n\t\t\t\t\t\t\t\tconst { user } = await slackApiRequest.call(\n\t\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t\t\t'/users.info',\n\t\t\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t\t\t{ user: member },\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tdata.push(user as IDataObject);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tresponseData = data;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t//https://api.slack.com/methods/conversations.open\n\t\t\t\t\tif (operation === 'open') {\n\t\t\t\t\t\tconst options = this.getNodeParameter('options', i);\n\t\t\t\t\t\tconst body: IDataObject = {};\n\t\t\t\t\t\tif (options.channelId) {\n\t\t\t\t\t\t\tbody.channel = options.channelId as string;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (options.returnIm) {\n\t\t\t\t\t\t\tbody.return_im = options.returnIm as boolean;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (options.users) {\n\t\t\t\t\t\t\tbody.users = (options.users as string[]).join(',');\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresponseData = await slackApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'POST',\n\t\t\t\t\t\t\t'/conversations.open',\n\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tresponseData = responseData.channel;\n\t\t\t\t\t}\n\t\t\t\t\t//https://api.slack.com/methods/conversations.rename\n\t\t\t\t\tif (operation === 'rename') {\n\t\t\t\t\t\tconst channel = this.getNodeParameter(\n\t\t\t\t\t\t\t'channelId',\n\t\t\t\t\t\t\ti,\n\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t{ extractValue: true },\n\t\t\t\t\t\t) as IDataObject;\n\t\t\t\t\t\tconst name = this.getNodeParameter('name', i) as IDataObject;\n\t\t\t\t\t\tconst body: IDataObject = {\n\t\t\t\t\t\t\tchannel,\n\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t};\n\t\t\t\t\t\tresponseData = await slackApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'POST',\n\t\t\t\t\t\t\t'/conversations.rename',\n\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tresponseData = responseData.channel;\n\t\t\t\t\t}\n\t\t\t\t\t//https://api.slack.com/methods/conversations.replies\n\t\t\t\t\tif (operation === 'replies') {\n\t\t\t\t\t\tconst channel = this.getNodeParameter(\n\t\t\t\t\t\t\t'channelId',\n\t\t\t\t\t\t\ti,\n\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t{ extractValue: true },\n\t\t\t\t\t\t) as string;\n\t\t\t\t\t\tconst ts = this.getNodeParameter('ts', i)?.toString() as string;\n\t\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', i);\n\t\t\t\t\t\tconst filters = this.getNodeParameter('filters', i);\n\t\t\t\t\t\tqs.channel = channel;\n\t\t\t\t\t\tqs.ts = ts;\n\t\t\t\t\t\tif (filters.inclusive) {\n\t\t\t\t\t\t\tqs.inclusive = filters.inclusive as boolean;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (filters.latest) {\n\t\t\t\t\t\t\tqs.latest = new Date(filters.latest as string).getTime() / 1000;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (filters.oldest) {\n\t\t\t\t\t\t\tqs.oldest = new Date(filters.oldest as string).getTime() / 1000;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (returnAll) {\n\t\t\t\t\t\t\tresponseData = await slackApiRequestAllItems.call(\n\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t'messages',\n\t\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t\t'/conversations.replies',\n\t\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tqs.limit = this.getNodeParameter('limit', i);\n\t\t\t\t\t\t\tresponseData = await slackApiRequest.call(\n\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t\t'/conversations.replies',\n\t\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tresponseData = responseData.messages;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t//https://api.slack.com/methods/conversations.setPurpose\n\t\t\t\t\tif (operation === 'setPurpose') {\n\t\t\t\t\t\tconst channel = this.getNodeParameter(\n\t\t\t\t\t\t\t'channelId',\n\t\t\t\t\t\t\ti,\n\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t{ extractValue: true },\n\t\t\t\t\t\t) as IDataObject;\n\t\t\t\t\t\tconst purpose = this.getNodeParameter('purpose', i) as IDataObject;\n\t\t\t\t\t\tconst body: IDataObject = {\n\t\t\t\t\t\t\tchannel,\n\t\t\t\t\t\t\tpurpose,\n\t\t\t\t\t\t};\n\t\t\t\t\t\tresponseData = await slackApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'POST',\n\t\t\t\t\t\t\t'/conversations.setPurpose',\n\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tresponseData = responseData.channel;\n\t\t\t\t\t}\n\t\t\t\t\t//https://api.slack.com/methods/conversations.setTopic\n\t\t\t\t\tif (operation === 'setTopic') {\n\t\t\t\t\t\tconst channel = this.getNodeParameter(\n\t\t\t\t\t\t\t'channelId',\n\t\t\t\t\t\t\ti,\n\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t{ extractValue: true },\n\t\t\t\t\t\t) as IDataObject;\n\t\t\t\t\t\tconst topic = this.getNodeParameter('topic', i) as IDataObject;\n\t\t\t\t\t\tconst body: IDataObject = {\n\t\t\t\t\t\t\tchannel,\n\t\t\t\t\t\t\ttopic,\n\t\t\t\t\t\t};\n\t\t\t\t\t\tresponseData = await slackApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'POST',\n\t\t\t\t\t\t\t'/conversations.setTopic',\n\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tresponseData = responseData.channel;\n\t\t\t\t\t}\n\t\t\t\t\t//https://api.slack.com/methods/conversations.unarchive\n\t\t\t\t\tif (operation === 'unarchive') {\n\t\t\t\t\t\tconst channel = this.getNodeParameter(\n\t\t\t\t\t\t\t'channelId',\n\t\t\t\t\t\t\ti,\n\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t{ extractValue: true },\n\t\t\t\t\t\t) as string;\n\t\t\t\t\t\tconst body: IDataObject = {\n\t\t\t\t\t\t\tchannel,\n\t\t\t\t\t\t};\n\t\t\t\t\t\tresponseData = await slackApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'POST',\n\t\t\t\t\t\t\t'/conversations.unarchive',\n\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (resource === 'message') {\n\t\t\t\t\t//https://api.slack.com/methods/chat.postMessage\n\t\t\t\t\tif (operation === 'post') {\n\t\t\t\t\t\tconst select = this.getNodeParameter('select', i) as 'user' | 'channel';\n\t\t\t\t\t\tconst target = getTarget(this, i, select);\n\t\t\t\t\t\tconst { sendAsUser } = this.getNodeParameter('otherOptions', i) as IDataObject;\n\t\t\t\t\t\tconst content = getMessageContent.call(this, i, nodeVersion, instanceId);\n\n\t\t\t\t\t\tconst body: IDataObject = {\n\t\t\t\t\t\t\tchannel: target,\n\t\t\t\t\t\t\t...content,\n\t\t\t\t\t\t};\n\t\t\t\t\t\tif (authentication === 'accessToken' && sendAsUser !== '' && sendAsUser !== undefined) {\n\t\t\t\t\t\t\tbody.username = sendAsUser;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Add all the other options to the request\n\t\t\t\t\t\tconst otherOptions = this.getNodeParameter('otherOptions', i) as IDataObject;\n\t\t\t\t\t\tlet action = 'postMessage';\n\t\t\t\t\t\tif (otherOptions.ephemeral) {\n\t\t\t\t\t\t\tconst ephemeral = otherOptions.ephemeral as IDataObject;\n\t\t\t\t\t\t\tif (select === 'channel') {\n\t\t\t\t\t\t\t\tconst ephemeralValues = ephemeral.ephemeralValues as IDataObject;\n\t\t\t\t\t\t\t\tconst userRlc = ephemeralValues.user as INodeParameterResourceLocator;\n\t\t\t\t\t\t\t\tbody.user =\n\t\t\t\t\t\t\t\t\tuserRlc.value?.toString().slice(0, 1) !== '@' && userRlc.mode === 'username'\n\t\t\t\t\t\t\t\t\t\t? `@${userRlc.value}`\n\t\t\t\t\t\t\t\t\t\t: userRlc.value;\n\t\t\t\t\t\t\t\taction = 'postEphemeral';\n\t\t\t\t\t\t\t} else if (select === 'user') {\n\t\t\t\t\t\t\t\tbody.user = target;\n\t\t\t\t\t\t\t\taction = 'postEphemeral';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst replyValues = (otherOptions.thread_ts as IDataObject)?.replyValues as IDataObject;\n\t\t\t\t\t\tObject.assign(body, replyValues);\n\t\t\t\t\t\tdelete otherOptions.thread_ts;\n\t\t\t\t\t\tdelete otherOptions.ephemeral;\n\t\t\t\t\t\tif (otherOptions.botProfile) {\n\t\t\t\t\t\t\tconst botProfile = otherOptions.botProfile as IDataObject;\n\t\t\t\t\t\t\tconst botProfileValues = botProfile.imageValues as IDataObject;\n\t\t\t\t\t\t\tObject.assign(\n\t\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t\t\tbotProfileValues.profilePhotoType === 'image'\n\t\t\t\t\t\t\t\t\t? { icon_url: botProfileValues.icon_url }\n\t\t\t\t\t\t\t\t\t: { icon_emoji: botProfileValues.icon_emoji },\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdelete otherOptions.botProfile;\n\t\t\t\t\t\tObject.assign(body, otherOptions);\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tselect === 'user' &&\n\t\t\t\t\t\t\taction === 'postEphemeral' &&\n\t\t\t\t\t\t\t(this.getNodeParameter('user', i) as INodeParameterResourceLocator)?.mode ===\n\t\t\t\t\t\t\t\t'username'\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t\t\t'You cannot send ephemeral messages using User type \"By username\". Please use \"From List\" or \"By ID\".',\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresponseData = await slackApiRequest.call(this, 'POST', `/chat.${action}`, body, qs);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t//https://api.slack.com/methods/chat.update\n\t\t\t\t\tif (operation === 'update') {\n\t\t\t\t\t\tconst channel = this.getNodeParameter(\n\t\t\t\t\t\t\t'channelId',\n\t\t\t\t\t\t\ti,\n\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t{ extractValue: true },\n\t\t\t\t\t\t) as string;\n\t\t\t\t\t\tconst ts = this.getNodeParameter('ts', i)?.toString() as string;\n\t\t\t\t\t\tconst content = getMessageContent.call(this, i, nodeVersion, instanceId);\n\n\t\t\t\t\t\tconst body: IDataObject = {\n\t\t\t\t\t\t\tchannel,\n\t\t\t\t\t\t\tts,\n\t\t\t\t\t\t\t...content,\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\t// Add all the other options to the request\n\t\t\t\t\t\tconst updateFields = this.getNodeParameter('updateFields', i);\n\t\t\t\t\t\tObject.assign(body, updateFields);\n\t\t\t\t\t\tresponseData = await slackApiRequest.call(this, 'POST', '/chat.update', body, qs);\n\t\t\t\t\t}\n\t\t\t\t\t//https://api.slack.com/methods/chat.delete\n\t\t\t\t\tif (operation === 'delete') {\n\t\t\t\t\t\tconst select = this.getNodeParameter('select', i) as string;\n\t\t\t\t\t\tlet target =\n\t\t\t\t\t\t\tselect === 'channel'\n\t\t\t\t\t\t\t\t? (this.getNodeParameter('channelId', i, undefined, {\n\t\t\t\t\t\t\t\t\t\textractValue: true,\n\t\t\t\t\t\t\t\t\t}) as string)\n\t\t\t\t\t\t\t\t: (this.getNodeParameter('user', i, undefined, {\n\t\t\t\t\t\t\t\t\t\textractValue: true,\n\t\t\t\t\t\t\t\t\t}) as string);\n\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tselect === 'user' &&\n\t\t\t\t\t\t\t(this.getNodeParameter('user', i) as IDataObject).mode === 'username'\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\ttarget = target.slice(0, 1) === '@' ? target : `@${target}`;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst timestamp = this.getNodeParameter('timestamp', i)?.toString() as string;\n\t\t\t\t\t\tconst body: IDataObject = {\n\t\t\t\t\t\t\tchannel: target,\n\t\t\t\t\t\t\tts: timestamp,\n\t\t\t\t\t\t};\n\t\t\t\t\t\t// Add all the other options to the request\n\t\t\t\t\t\tresponseData = await slackApiRequest.call(this, 'POST', '/chat.delete', body, qs);\n\t\t\t\t\t}\n\t\t\t\t\t//https://api.slack.com/methods/chat.getPermalink\n\t\t\t\t\tif (operation === 'getPermalink') {\n\t\t\t\t\t\tconst channel = this.getNodeParameter(\n\t\t\t\t\t\t\t'channelId',\n\t\t\t\t\t\t\ti,\n\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t{ extractValue: true },\n\t\t\t\t\t\t) as string;\n\t\t\t\t\t\tconst timestamp = this.getNodeParameter('timestamp', i)?.toString() as string;\n\t\t\t\t\t\tqs = {\n\t\t\t\t\t\t\tchannel,\n\t\t\t\t\t\t\tmessage_ts: timestamp,\n\t\t\t\t\t\t};\n\t\t\t\t\t\tresponseData = await slackApiRequest.call(this, 'GET', '/chat.getPermalink', {}, qs);\n\t\t\t\t\t}\n\t\t\t\t\t//https://api.slack.com/methods/search.messages\n\t\t\t\t\tif (operation === 'search') {\n\t\t\t\t\t\tlet query = this.getNodeParameter('query', i) as string;\n\t\t\t\t\t\tconst sort = this.getNodeParameter('sort', i) as string;\n\t\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', i);\n\t\t\t\t\t\tconst options = this.getNodeParameter('options', i);\n\t\t\t\t\t\tif (options.searchChannel) {\n\t\t\t\t\t\t\tconst channel = options.searchChannel as IDataObject[];\n\t\t\t\t\t\t\tfor (const channelItem of channel) {\n\t\t\t\t\t\t\t\tquery += ` in:${channelItem}`;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tqs = {\n\t\t\t\t\t\t\tquery,\n\t\t\t\t\t\t\tsort: sort === 'relevance' ? 'score' : 'timestamp',\n\t\t\t\t\t\t\tsort_dir: sort === 'asc' ? 'asc' : 'desc',\n\t\t\t\t\t\t};\n\t\t\t\t\t\tif (returnAll) {\n\t\t\t\t\t\t\tresponseData = await slackApiRequestAllItems.call(\n\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t'messages',\n\t\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t\t'/search.messages',\n\t\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tqs.count = this.getNodeParameter('limit', i);\n\t\t\t\t\t\t\tresponseData = await slackApiRequest.call(this, 'POST', '/search.messages', {}, qs);\n\t\t\t\t\t\t\tresponseData = responseData.messages.matches;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (resource === 'reaction') {\n\t\t\t\t\tconst channel = this.getNodeParameter(\n\t\t\t\t\t\t'channelId',\n\t\t\t\t\t\ti,\n\t\t\t\t\t\t{},\n\t\t\t\t\t\t{ extractValue: true },\n\t\t\t\t\t) as string;\n\t\t\t\t\tconst timestamp = this.getNodeParameter('timestamp', i)?.toString() as string;\n\t\t\t\t\t//https://api.slack.com/methods/reactions.add\n\t\t\t\t\tif (operation === 'add') {\n\t\t\t\t\t\tconst name = this.getNodeParameter('name', i) as string;\n\t\t\t\t\t\tconst body: IDataObject = {\n\t\t\t\t\t\t\tchannel,\n\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\ttimestamp,\n\t\t\t\t\t\t};\n\t\t\t\t\t\tresponseData = await slackApiRequest.call(this, 'POST', '/reactions.add', body, qs);\n\t\t\t\t\t}\n\t\t\t\t\t//https://api.slack.com/methods/reactions.remove\n\t\t\t\t\tif (operation === 'remove') {\n\t\t\t\t\t\tconst name = this.getNodeParameter('name', i) as string;\n\t\t\t\t\t\tconst body: IDataObject = {\n\t\t\t\t\t\t\tchannel,\n\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\ttimestamp,\n\t\t\t\t\t\t};\n\t\t\t\t\t\tresponseData = await slackApiRequest.call(this, 'POST', '/reactions.remove', body, qs);\n\t\t\t\t\t}\n\t\t\t\t\t//https://api.slack.com/methods/reactions.get\n\t\t\t\t\tif (operation === 'get') {\n\t\t\t\t\t\tqs.channel = channel;\n\t\t\t\t\t\tqs.timestamp = timestamp;\n\t\t\t\t\t\tresponseData = await slackApiRequest.call(this, 'GET', '/reactions.get', {}, qs);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (resource === 'star') {\n\t\t\t\t\t//https://api.slack.com/methods/stars.add\n\t\t\t\t\tif (operation === 'add') {\n\t\t\t\t\t\tconst options = this.getNodeParameter('options', i);\n\t\t\t\t\t\tconst target = this.getNodeParameter('target', i) as string;\n\t\t\t\t\t\tconst channel = this.getNodeParameter(\n\t\t\t\t\t\t\t'channelId',\n\t\t\t\t\t\t\ti,\n\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t{ extractValue: true },\n\t\t\t\t\t\t) as string;\n\t\t\t\t\t\tconst body: IDataObject = {};\n\t\t\t\t\t\tbody.channel = channel;\n\n\t\t\t\t\t\tif (target === 'message') {\n\t\t\t\t\t\t\tconst timestamp = this.getNodeParameter('timestamp', i)?.toString() as string;\n\t\t\t\t\t\t\tbody.timestamp = timestamp;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (target === 'file') {\n\t\t\t\t\t\t\tconst file = this.getNodeParameter('fileId', i) as string;\n\t\t\t\t\t\t\tbody.file = file;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (options.fileComment) {\n\t\t\t\t\t\t\tbody.file_comment = options.fileComment as string;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresponseData = await slackApiRequest.call(this, 'POST', '/stars.add', body, qs);\n\t\t\t\t\t}\n\t\t\t\t\t//https://api.slack.com/methods/stars.remove\n\t\t\t\t\tif (operation === 'delete') {\n\t\t\t\t\t\tconst options = this.getNodeParameter('options', i);\n\t\t\t\t\t\tconst body: IDataObject = {};\n\t\t\t\t\t\tif (options.channelId) {\n\t\t\t\t\t\t\tbody.channel = options.channelId as string;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (options.fileId) {\n\t\t\t\t\t\t\tbody.file = options.fileId as string;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (options.fileComment) {\n\t\t\t\t\t\t\tbody.file_comment = options.fileComment as string;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (options.timestamp) {\n\t\t\t\t\t\t\tbody.timestamp = options.timestamp as string;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresponseData = await slackApiRequest.call(this, 'POST', '/stars.remove', body, qs);\n\t\t\t\t\t}\n\t\t\t\t\t//https://api.slack.com/methods/stars.list\n\t\t\t\t\tif (operation === 'getAll') {\n\t\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', i);\n\t\t\t\t\t\tif (returnAll) {\n\t\t\t\t\t\t\tresponseData = await slackApiRequestAllItems.call(\n\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t'items',\n\t\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t\t'/stars.list',\n\t\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tqs.limit = this.getNodeParameter('limit', i);\n\t\t\t\t\t\t\tresponseData = await slackApiRequest.call(this, 'GET', '/stars.list', {}, qs);\n\t\t\t\t\t\t\tresponseData = responseData.items;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (resource === 'file') {\n\t\t\t\t\t//https://api.slack.com/methods/files.upload\n\t\t\t\t\tif (operation === 'upload') {\n\t\t\t\t\t\tconst options = this.getNodeParameter('options', i);\n\t\t\t\t\t\tconst body: IDataObject = {};\n\t\t\t\t\t\tconst fileBody: IDataObject = {};\n\n\t\t\t\t\t\tif (options.channelIds) {\n\t\t\t\t\t\t\tbody.channels = (options.channelIds as string[]).join(',');\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (options.channelId) {\n\t\t\t\t\t\t\tbody.channel_id = options.channelId as string;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (options.initialComment) {\n\t\t\t\t\t\t\tbody.initial_comment = options.initialComment as string;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (options.threadTs) {\n\t\t\t\t\t\t\tbody.thread_ts = options.threadTs as string;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (options.title) {\n\t\t\t\t\t\t\tif (nodeVersion <= 2.1) {\n\t\t\t\t\t\t\t\tbody.title = options.title as string;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (this.getNodeParameter('binaryData', i, false) || nodeVersion > 2.1) {\n\t\t\t\t\t\t\tconst binaryPropertyName = this.getNodeParameter('binaryPropertyName', i);\n\t\t\t\t\t\t\tconst binaryData = this.helpers.assertBinaryData(i, binaryPropertyName);\n\n\t\t\t\t\t\t\tlet fileSize: number;\n\t\t\t\t\t\t\tlet uploadData: Buffer | Readable;\n\t\t\t\t\t\t\tif (binaryData.id) {\n\t\t\t\t\t\t\t\tuploadData = await this.helpers.getBinaryStream(binaryData.id);\n\t\t\t\t\t\t\t\tconst metadata = await this.helpers.getBinaryMetadata(binaryData.id);\n\t\t\t\t\t\t\t\tfileSize = metadata.fileSize;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tuploadData = Buffer.from(binaryData.data, BINARY_ENCODING);\n\t\t\t\t\t\t\t\tfileSize = uploadData.length;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (nodeVersion <= 2.1) {\n\t\t\t\t\t\t\t\tbody.file = {\n\t\t\t\t\t\t\t\t\tvalue: uploadData,\n\t\t\t\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\t\t\t\tfilename: binaryData.fileName,\n\t\t\t\t\t\t\t\t\t\tcontentType: binaryData.mimeType,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\tresponseData = await slackApiRequest.call(\n\t\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t\t'POST',\n\t\t\t\t\t\t\t\t\t'/files.upload',\n\t\t\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t\t\t\t{ 'Content-Type': 'multipart/form-data' },\n\t\t\t\t\t\t\t\t\t{ formData: body },\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tresponseData = responseData.file;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tfileBody.file = {\n\t\t\t\t\t\t\t\t\tvalue: uploadData,\n\t\t\t\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\t\t\t\tfilename: binaryData.fileName,\n\t\t\t\t\t\t\t\t\t\tcontentType: binaryData.mimeType,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\tconst uploadUrl = await slackApiRequest.call(\n\t\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t\t\t'/files.getUploadURLExternal',\n\t\t\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tfilename: options.fileName ? options.fileName : binaryData.fileName,\n\t\t\t\t\t\t\t\t\t\tlength: fileSize,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tawait slackApiRequest.call(\n\t\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t\t'POST',\n\t\t\t\t\t\t\t\t\tuploadUrl.upload_url,\n\t\t\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t\t\t\t{ 'Content-Type': 'multipart/form-data' },\n\t\t\t\t\t\t\t\t\t{ formData: fileBody },\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tbody.files = [\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tid: uploadUrl.file_id,\n\t\t\t\t\t\t\t\t\t\ttitle: options.title ? options.title : binaryData.fileName,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t];\n\t\t\t\t\t\t\t\tresponseData = await slackApiRequest.call(\n\t\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t\t'POST',\n\t\t\t\t\t\t\t\t\t'/files.completeUploadExternal',\n\t\t\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tresponseData = responseData.files;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst fileContent = this.getNodeParameter('fileContent', i) as string;\n\t\t\t\t\t\t\tbody.content = fileContent;\n\t\t\t\t\t\t\tresponseData = await slackApiRequest.call(\n\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t'POST',\n\t\t\t\t\t\t\t\t'/files.upload',\n\t\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t\t\t{ 'Content-Type': 'application/x-www-form-urlencoded' },\n\t\t\t\t\t\t\t\t{ form: body },\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tresponseData = responseData.file;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t//https://api.slack.com/methods/files.list\n\t\t\t\t\tif (operation === 'getAll') {\n\t\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', i);\n\t\t\t\t\t\tconst filters = this.getNodeParameter('filters', i);\n\t\t\t\t\t\tif (filters.channelId) {\n\t\t\t\t\t\t\tqs.channel = filters.channelId as string;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (filters.showFilesHidden) {\n\t\t\t\t\t\t\tqs.show_files_hidden_by_limit = filters.showFilesHidden as boolean;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (filters.tsFrom) {\n\t\t\t\t\t\t\tqs.ts_from = filters.tsFrom as string;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (filters.tsTo) {\n\t\t\t\t\t\t\tqs.ts_to = filters.tsTo as string;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (filters.types) {\n\t\t\t\t\t\t\tqs.types = (filters.types as string[]).join(',');\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (filters.userId) {\n\t\t\t\t\t\t\tqs.user = filters.userId as string;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (returnAll) {\n\t\t\t\t\t\t\tresponseData = await slackApiRequestAllItems.call(\n\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t'files',\n\t\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t\t'/files.list',\n\t\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tqs.count = this.getNodeParameter('limit', i);\n\t\t\t\t\t\t\tresponseData = await slackApiRequest.call(this, 'GET', '/files.list', {}, qs);\n\t\t\t\t\t\t\tresponseData = responseData.files;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t//https://api.slack.com/methods/files.info\n\t\t\t\t\tif (operation === 'get') {\n\t\t\t\t\t\tconst fileId = this.getNodeParameter('fileId', i) as string;\n\t\t\t\t\t\tqs.file = fileId;\n\t\t\t\t\t\tresponseData = await slackApiRequest.call(this, 'GET', '/files.info', {}, qs);\n\t\t\t\t\t\tresponseData = responseData.file;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (resource === 'user') {\n\t\t\t\t\t//https://api.slack.com/methods/users.info\n\t\t\t\t\tif (operation === 'info') {\n\t\t\t\t\t\tqs.user = this.getNodeParameter('user', i, undefined, { extractValue: true }) as string;\n\t\t\t\t\t\tresponseData = await slackApiRequest.call(this, 'GET', '/users.info', {}, qs);\n\t\t\t\t\t\tresponseData = responseData.user;\n\t\t\t\t\t}\n\t\t\t\t\t//https://api.slack.com/methods/users.list\n\t\t\t\t\tif (operation === 'getAll') {\n\t\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', i);\n\t\t\t\t\t\tif (returnAll) {\n\t\t\t\t\t\t\tresponseData = await slackApiRequestAllItems.call(\n\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t'members',\n\t\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t\t'/users.list',\n\t\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tqs.limit = this.getNodeParameter('limit', i);\n\t\t\t\t\t\t\tresponseData = await slackApiRequest.call(this, 'GET', '/users.list', {}, qs);\n\t\t\t\t\t\t\tresponseData = responseData.members;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t//https://api.slack.com/methods/users.getPresence\n\t\t\t\t\tif (operation === 'getPresence') {\n\t\t\t\t\t\tqs.user = this.getNodeParameter('user', i, undefined, { extractValue: true }) as string;\n\t\t\t\t\t\tresponseData = await slackApiRequest.call(this, 'GET', '/users.getPresence', {}, qs);\n\t\t\t\t\t}\n\t\t\t\t\tif (operation === 'getProfile') {\n\t\t\t\t\t\tqs.user = this.getNodeParameter('user', i, undefined, { extractValue: true }) as string;\n\t\t\t\t\t\tresponseData = await slackApiRequest.call(this, 'GET', '/users.profile.get', {}, qs);\n\t\t\t\t\t\tresponseData = responseData.profile;\n\t\t\t\t\t}\n\t\t\t\t\tif (operation === 'updateProfile') {\n\t\t\t\t\t\tconst options = this.getNodeParameter('options', i);\n\t\t\t\t\t\tconst timezone = this.getTimezone();\n\n\t\t\t\t\t\tconst body: IDataObject = {};\n\t\t\t\t\t\tlet status;\n\t\t\t\t\t\tif (options.status) {\n\t\t\t\t\t\t\tstatus = ((options.status as IDataObject)?.set_status as IDataObject[])[0];\n\t\t\t\t\t\t\tif (status.status_expiration === undefined) {\n\t\t\t\t\t\t\t\tstatus.status_expiration = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tstatus.status_expiration = moment\n\t\t\t\t\t\t\t\t\t.tz(status.status_expiration as string, timezone)\n\t\t\t\t\t\t\t\t\t.unix();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tObject.assign(body, status);\n\t\t\t\t\t\t\tdelete options.status;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (options.customFieldUi) {\n\t\t\t\t\t\t\tconst customFields = (options.customFieldUi as IDataObject)\n\t\t\t\t\t\t\t\t.customFieldValues as IDataObject[];\n\n\t\t\t\t\t\t\tconst fields: IDataObject = {};\n\n\t\t\t\t\t\t\tfor (const customField of customFields) {\n\t\t\t\t\t\t\t\tfields[customField.id as string] = {\n\t\t\t\t\t\t\t\t\tvalue: customField.value,\n\t\t\t\t\t\t\t\t\talt: customField.alt,\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\toptions.fields = fields;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tObject.assign(body, options);\n\t\t\t\t\t\tlet requestBody: IDataObject = { profile: body };\n\n\t\t\t\t\t\tlet userId;\n\t\t\t\t\t\tif (options.user) {\n\t\t\t\t\t\t\tuserId = options.user;\n\t\t\t\t\t\t\tdelete body.user;\n\t\t\t\t\t\t\trequestBody = { profile: body, user: userId };\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await slackApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'POST',\n\t\t\t\t\t\t\t'/users.profile.set',\n\t\t\t\t\t\t\trequestBody,\n\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tresponseData = responseData.profile;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (resource === 'userGroup') {\n\t\t\t\t\t//https://api.slack.com/methods/usergroups.create\n\t\t\t\t\tif (operation === 'create') {\n\t\t\t\t\t\tconst name = this.getNodeParameter('name', i) as string;\n\n\t\t\t\t\t\tconst options = this.getNodeParameter('options', i);\n\n\t\t\t\t\t\tconst body: IDataObject = {\n\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tObject.assign(body, options);\n\n\t\t\t\t\t\tresponseData = await slackApiRequest.call(this, 'POST', '/usergroups.create', body, qs);\n\n\t\t\t\t\t\tresponseData = responseData.usergroup;\n\t\t\t\t\t}\n\t\t\t\t\t//https://api.slack.com/methods/usergroups.enable\n\t\t\t\t\tif (operation === 'enable') {\n\t\t\t\t\t\tconst userGroupId = this.getNodeParameter('userGroupId', i) as string;\n\n\t\t\t\t\t\tconst options = this.getNodeParameter('options', i);\n\n\t\t\t\t\t\tconst body: IDataObject = {\n\t\t\t\t\t\t\tusergroup: userGroupId,\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tObject.assign(body, options);\n\n\t\t\t\t\t\tresponseData = await slackApiRequest.call(this, 'POST', '/usergroups.enable', body, qs);\n\n\t\t\t\t\t\tresponseData = responseData.usergroup;\n\t\t\t\t\t}\n\t\t\t\t\t//https://api.slack.com/methods/usergroups.disable\n\t\t\t\t\tif (operation === 'disable') {\n\t\t\t\t\t\tconst userGroupId = this.getNodeParameter('userGroupId', i) as string;\n\n\t\t\t\t\t\tconst options = this.getNodeParameter('options', i);\n\n\t\t\t\t\t\tconst body: IDataObject = {\n\t\t\t\t\t\t\tusergroup: userGroupId,\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tObject.assign(body, options);\n\n\t\t\t\t\t\tresponseData = await slackApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'POST',\n\t\t\t\t\t\t\t'/usergroups.disable',\n\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tresponseData = responseData.usergroup;\n\t\t\t\t\t}\n\n\t\t\t\t\t//https://api.slack.com/methods/usergroups.list\n\t\t\t\t\tif (operation === 'getAll') {\n\t\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', i);\n\n\t\t\t\t\t\tconst options = this.getNodeParameter('options', i);\n\n\t\t\t\t\t\tObject.assign(qs, options);\n\n\t\t\t\t\t\tresponseData = await slackApiRequest.call(this, 'GET', '/usergroups.list', {}, qs);\n\n\t\t\t\t\t\tresponseData = responseData.usergroups;\n\n\t\t\t\t\t\tif (!returnAll) {\n\t\t\t\t\t\t\tconst limit = this.getNodeParameter('limit', i);\n\n\t\t\t\t\t\t\tresponseData = responseData.slice(0, limit);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t//https://api.slack.com/methods/usergroups.update\n\t\t\t\t\tif (operation === 'update') {\n\t\t\t\t\t\tconst userGroupId = this.getNodeParameter('userGroupId', i) as string;\n\n\t\t\t\t\t\tconst updateFields = this.getNodeParameter('updateFields', i);\n\n\t\t\t\t\t\tconst body: IDataObject = {\n\t\t\t\t\t\t\tusergroup: userGroupId,\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tObject.assign(body, updateFields);\n\n\t\t\t\t\t\tresponseData = await slackApiRequest.call(this, 'POST', '/usergroups.update', body, qs);\n\n\t\t\t\t\t\tresponseData = responseData.usergroup;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t);\n\t\t\t\treturnData.push(...executionData);\n\t\t\t} catch (error) {\n\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\treturnData.push({ json: { error: (error as JsonObject).message } });\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\t\treturn [returnData];\n\t}\n}\n"],"mappings":"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","names":["moment"]}