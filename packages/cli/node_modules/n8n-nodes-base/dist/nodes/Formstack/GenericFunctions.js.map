{"version":3,"sources":["../../../nodes/Formstack/GenericFunctions.ts"],"sourcesContent":["import type {\n\tIDataObject,\n\tIExecuteFunctions,\n\tIHookFunctions,\n\tILoadOptionsFunctions,\n\tIWebhookFunctions,\n\tINodePropertyOptions,\n\tJsonObject,\n\tIHttpRequestMethods,\n\tIRequestOptions,\n} from 'n8n-workflow';\nimport { ApplicationError, NodeApiError } from 'n8n-workflow';\n\nexport interface IFormstackFieldDefinitionType {\n\tid: string;\n\tlabel: string;\n\tdescription: string;\n\tname: string;\n\ttype: string;\n\toptions: unknown;\n\trequired: string;\n\tuniq: string;\n\thidden: string;\n\treadonly: string;\n\tcolspan: string;\n\tlabel_position: string;\n\tnum_columns: string;\n\tdate_format: string;\n\ttime_format: string;\n}\n\nexport interface IFormstackWebhookResponseBody {\n\tFormID: string;\n\tUniqueID: string;\n}\n\nexport interface IFormstackSubmissionFieldContainer {\n\tfield: string;\n\tvalue: string;\n}\n\nexport const FormstackFieldFormats = {\n\tID: 'id',\n\tLabel: 'label',\n\tName: 'name',\n} as const;\n\nexport type FormstackFieldFormat =\n\t(typeof FormstackFieldFormats)[keyof typeof FormstackFieldFormats];\n\n/**\n * Make an API request to Formstack\n *\n */\nexport async function apiRequest(\n\tthis: IHookFunctions | IExecuteFunctions | ILoadOptionsFunctions | IWebhookFunctions,\n\tmethod: IHttpRequestMethods,\n\tendpoint: string,\n\tbody: IDataObject = {},\n\tquery: IDataObject = {},\n): Promise<any> {\n\tconst authenticationMethod = this.getNodeParameter('authentication', 0);\n\n\tconst options: IRequestOptions = {\n\t\theaders: {},\n\t\tmethod,\n\t\tbody,\n\t\tqs: query || {},\n\t\turi: `https://www.formstack.com/api/v2/${endpoint}`,\n\t\tjson: true,\n\t};\n\n\tif (!Object.keys(body).length) {\n\t\tdelete options.body;\n\t}\n\n\ttry {\n\t\tif (authenticationMethod === 'accessToken') {\n\t\t\tconst credentials = await this.getCredentials<{ accessToken: string }>('formstackApi');\n\n\t\t\toptions.headers!.Authorization = `Bearer ${credentials.accessToken}`;\n\t\t\treturn await this.helpers.request(options);\n\t\t} else {\n\t\t\treturn await this.helpers.requestOAuth2.call(this, 'formstackOAuth2Api', options);\n\t\t}\n\t} catch (error) {\n\t\tthrow new NodeApiError(this.getNode(), error as JsonObject);\n\t}\n}\n\n/**\n * Make an API request to paginated Formstack endpoint\n * and return all results\n *\n * @param {(IHookFunctions | IExecuteFunctions)} this\n */\nexport async function apiRequestAllItems(\n\tthis: IHookFunctions | IExecuteFunctions | ILoadOptionsFunctions | IWebhookFunctions,\n\tmethod: IHttpRequestMethods,\n\tendpoint: string,\n\tbody: IDataObject,\n\tdataKey: string,\n\tquery?: IDataObject,\n): Promise<any> {\n\tif (query === undefined) {\n\t\tquery = {};\n\t}\n\n\tquery.per_page = 200;\n\tquery.page = 0;\n\n\tconst returnData = {\n\t\titems: [] as IDataObject[],\n\t};\n\n\tlet responseData;\n\n\tdo {\n\t\tquery.page += 1;\n\n\t\tresponseData = await apiRequest.call(this, method, endpoint, body, query);\n\t\treturnData.items.push.apply(returnData.items, responseData[dataKey] as IDataObject[]);\n\t} while (\n\t\tresponseData.total !== undefined &&\n\t\tMath.ceil(responseData.total / query.per_page) > query.page\n\t);\n\n\treturn returnData;\n}\n\n/**\n * Returns all the available forms\n *\n */\nexport async function getForms(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\tconst endpoint = 'form.json';\n\tconst responseData = await apiRequestAllItems.call(this, 'GET', endpoint, {}, 'forms', {\n\t\tfolders: false,\n\t});\n\n\tif (responseData.items === undefined) {\n\t\tthrow new ApplicationError('No data got returned', { level: 'warning' });\n\t}\n\tconst returnData: INodePropertyOptions[] = [];\n\tfor (const baseData of responseData.items) {\n\t\treturnData.push({\n\t\t\tname: baseData.name,\n\t\t\tvalue: baseData.id,\n\t\t});\n\t}\n\treturn returnData;\n}\n\n/**\n * Returns all the fields of a form\n *\n */\nexport async function getFields(\n\tthis: IWebhookFunctions,\n\tformID: string,\n): Promise<Record<string, IFormstackFieldDefinitionType>> {\n\tconst endpoint = `form/${formID}.json`;\n\tconst responseData = await apiRequestAllItems.call(this, 'GET', endpoint, {}, 'fields');\n\n\tif (responseData.items === undefined) {\n\t\tthrow new ApplicationError('No form fields meta data got returned', { level: 'warning' });\n\t}\n\n\tconst fields = responseData.items as IFormstackFieldDefinitionType[];\n\tconst fieldMap: Record<string, IFormstackFieldDefinitionType> = {};\n\n\tfields.forEach((field) => {\n\t\tfieldMap[field.id] = field;\n\t});\n\n\treturn fieldMap;\n}\n\n/**\n * Returns all the fields of a form\n *\n */\nexport async function getSubmission(\n\tthis: ILoadOptionsFunctions | IWebhookFunctions,\n\tuniqueId: string,\n): Promise<IFormstackSubmissionFieldContainer[]> {\n\tconst endpoint = `submission/${uniqueId}.json`;\n\tconst responseData = await apiRequestAllItems.call(this, 'GET', endpoint, {}, 'data');\n\n\tif (responseData.items === undefined) {\n\t\tthrow new ApplicationError('No form fields meta data got returned', { level: 'warning' });\n\t}\n\n\treturn responseData.items as IFormstackSubmissionFieldContainer[];\n}\n"],"mappings":"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","names":[]}