{"version":3,"sources":["../../../../../../nodes/ItemLists/V3/actions/itemList/sort.operation.ts"],"sourcesContent":["import get from 'lodash/get';\nimport isEqual from 'lodash/isEqual';\nimport lt from 'lodash/lt';\nimport type {\n\tIExecuteFunctions,\n\tIDataObject,\n\tINodeExecutionData,\n\tINodeProperties,\n} from 'n8n-workflow';\nimport { NodeOperationError } from 'n8n-workflow';\n\nimport { shuffleArray, updateDisplayOptions } from '@utils/utilities';\n\nimport { sortByCode } from '../../helpers/utils';\nimport { disableDotNotationBoolean } from '../common.descriptions';\n\nconst properties: INodeProperties[] = [\n\t{\n\t\tdisplayName: 'Type',\n\t\tname: 'type',\n\t\ttype: 'options',\n\t\toptions: [\n\t\t\t{\n\t\t\t\tname: 'Simple',\n\t\t\t\tvalue: 'simple',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Random',\n\t\t\t\tvalue: 'random',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Code',\n\t\t\t\tvalue: 'code',\n\t\t\t},\n\t\t],\n\t\tdefault: 'simple',\n\t\tdescription: 'The fields of the input items to compare to see if they are the same',\n\t},\n\t{\n\t\tdisplayName: 'Fields To Sort By',\n\t\tname: 'sortFieldsUi',\n\t\ttype: 'fixedCollection',\n\t\ttypeOptions: {\n\t\t\tmultipleValues: true,\n\t\t},\n\t\tplaceholder: 'Add Field To Sort By',\n\t\toptions: [\n\t\t\t{\n\t\t\t\tdisplayName: '',\n\t\t\t\tname: 'sortField',\n\t\t\t\tvalues: [\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Field Name',\n\t\t\t\t\t\tname: 'fieldName',\n\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\trequired: true,\n\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\tdescription: 'The field to sort by',\n\t\t\t\t\t\t// eslint-disable-next-line n8n-nodes-base/node-param-placeholder-miscased-id\n\t\t\t\t\t\tplaceholder: 'e.g. id',\n\t\t\t\t\t\thint: ' Enter the field name as text',\n\t\t\t\t\t\trequiresDataPath: 'single',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Order',\n\t\t\t\t\t\tname: 'order',\n\t\t\t\t\t\ttype: 'options',\n\t\t\t\t\t\toptions: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: 'Ascending',\n\t\t\t\t\t\t\t\tvalue: 'ascending',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: 'Descending',\n\t\t\t\t\t\t\t\tvalue: 'descending',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t\tdefault: 'ascending',\n\t\t\t\t\t\tdescription: 'The order to sort by',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t],\n\t\tdefault: {},\n\t\tdescription: 'The fields of the input items to compare to see if they are the same',\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\ttype: ['simple'],\n\t\t\t},\n\t\t},\n\t},\n\t{\n\t\tdisplayName: 'Code',\n\t\tname: 'code',\n\t\ttype: 'string',\n\t\ttypeOptions: {\n\t\t\talwaysOpenEditWindow: true,\n\t\t\teditor: 'jsEditor',\n\t\t\trows: 10,\n\t\t},\n\t\tdefault: `// The two items to compare are in the variables a and b\n// Access the fields in a.json and b.json\n// Return -1 if a should go before b\n// Return 1 if b should go before a\n// Return 0 if there's no difference\n\nfieldName = 'myField';\n\nif (a.json[fieldName] < b.json[fieldName]) {\nreturn -1;\n}\nif (a.json[fieldName] > b.json[fieldName]) {\nreturn 1;\n}\nreturn 0;`,\n\t\tdescription: 'Javascript code to determine the order of any two items',\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\ttype: ['code'],\n\t\t\t},\n\t\t},\n\t},\n\t{\n\t\tdisplayName: 'Options',\n\t\tname: 'options',\n\t\ttype: 'collection',\n\t\tplaceholder: 'Add Field',\n\t\tdefault: {},\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\ttype: ['simple'],\n\t\t\t},\n\t\t},\n\t\toptions: [disableDotNotationBoolean],\n\t},\n];\n\nconst displayOptions = {\n\tshow: {\n\t\tresource: ['itemList'],\n\t\toperation: ['sort'],\n\t},\n};\n\nexport const description = updateDisplayOptions(displayOptions, properties);\n\nexport async function execute(\n\tthis: IExecuteFunctions,\n\titems: INodeExecutionData[],\n): Promise<INodeExecutionData[]> {\n\tlet returnData = [...items];\n\tconst type = this.getNodeParameter('type', 0) as string;\n\tconst disableDotNotation = this.getNodeParameter(\n\t\t'options.disableDotNotation',\n\t\t0,\n\t\tfalse,\n\t) as boolean;\n\n\tif (type === 'random') {\n\t\tshuffleArray(returnData);\n\t\treturn returnData;\n\t}\n\n\tif (type === 'simple') {\n\t\tconst sortFieldsUi = this.getNodeParameter('sortFieldsUi', 0) as IDataObject;\n\t\tconst sortFields = sortFieldsUi.sortField as Array<{\n\t\t\tfieldName: string;\n\t\t\torder: 'ascending' | 'descending';\n\t\t}>;\n\n\t\tif (!sortFields?.length) {\n\t\t\tthrow new NodeOperationError(\n\t\t\t\tthis.getNode(),\n\t\t\t\t'No sorting specified. Please add a field to sort by',\n\t\t\t);\n\t\t}\n\n\t\tfor (const { fieldName } of sortFields) {\n\t\t\tlet found = false;\n\t\t\tfor (const item of items) {\n\t\t\t\tif (!disableDotNotation) {\n\t\t\t\t\tif (get(item.json, fieldName) !== undefined) {\n\t\t\t\t\t\tfound = true;\n\t\t\t\t\t}\n\t\t\t\t} else if (item.json.hasOwnProperty(fieldName)) {\n\t\t\t\t\tfound = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!found && disableDotNotation && fieldName.includes('.')) {\n\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t`Couldn't find the field '${fieldName}' in the input data`,\n\t\t\t\t\t{\n\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t\"If you're trying to use a nested field, make sure you turn off 'disable dot notation' in the node options\",\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t} else if (!found) {\n\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t`Couldn't find the field '${fieldName}' in the input data`,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tconst sortFieldsWithDirection = sortFields.map((field) => ({\n\t\t\tname: field.fieldName,\n\t\t\tdir: field.order === 'ascending' ? 1 : -1,\n\t\t}));\n\n\t\treturnData.sort((a, b) => {\n\t\t\tlet result = 0;\n\t\t\tfor (const field of sortFieldsWithDirection) {\n\t\t\t\tlet equal;\n\t\t\t\tif (!disableDotNotation) {\n\t\t\t\t\tconst _a =\n\t\t\t\t\t\ttypeof get(a.json, field.name) === 'string'\n\t\t\t\t\t\t\t? (get(a.json, field.name) as string).toLowerCase()\n\t\t\t\t\t\t\t: get(a.json, field.name);\n\t\t\t\t\tconst _b =\n\t\t\t\t\t\ttypeof get(b.json, field.name) === 'string'\n\t\t\t\t\t\t\t? (get(b.json, field.name) as string).toLowerCase()\n\t\t\t\t\t\t\t: get(b.json, field.name);\n\t\t\t\t\tequal = isEqual(_a, _b);\n\t\t\t\t} else {\n\t\t\t\t\tconst _a =\n\t\t\t\t\t\ttypeof a.json[field.name] === 'string'\n\t\t\t\t\t\t\t? (a.json[field.name] as string).toLowerCase()\n\t\t\t\t\t\t\t: a.json[field.name];\n\t\t\t\t\tconst _b =\n\t\t\t\t\t\ttypeof b.json[field.name] === 'string'\n\t\t\t\t\t\t\t? (b.json[field.name] as string).toLowerCase()\n\t\t\t\t\t\t\t: b.json[field.name];\n\t\t\t\t\tequal = isEqual(_a, _b);\n\t\t\t\t}\n\n\t\t\t\tif (!equal) {\n\t\t\t\t\tlet lessThan;\n\t\t\t\t\tif (!disableDotNotation) {\n\t\t\t\t\t\tconst _a =\n\t\t\t\t\t\t\ttypeof get(a.json, field.name) === 'string'\n\t\t\t\t\t\t\t\t? (get(a.json, field.name) as string).toLowerCase()\n\t\t\t\t\t\t\t\t: get(a.json, field.name);\n\t\t\t\t\t\tconst _b =\n\t\t\t\t\t\t\ttypeof get(b.json, field.name) === 'string'\n\t\t\t\t\t\t\t\t? (get(b.json, field.name) as string).toLowerCase()\n\t\t\t\t\t\t\t\t: get(b.json, field.name);\n\t\t\t\t\t\tlessThan = lt(_a, _b);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst _a =\n\t\t\t\t\t\t\ttypeof a.json[field.name] === 'string'\n\t\t\t\t\t\t\t\t? (a.json[field.name] as string).toLowerCase()\n\t\t\t\t\t\t\t\t: a.json[field.name];\n\t\t\t\t\t\tconst _b =\n\t\t\t\t\t\t\ttypeof b.json[field.name] === 'string'\n\t\t\t\t\t\t\t\t? (b.json[field.name] as string).toLowerCase()\n\t\t\t\t\t\t\t\t: b.json[field.name];\n\t\t\t\t\t\tlessThan = lt(_a, _b);\n\t\t\t\t\t}\n\t\t\t\t\tif (lessThan) {\n\t\t\t\t\t\tresult = -1 * field.dir;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult = 1 * field.dir;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn result;\n\t\t});\n\t} else {\n\t\treturnData = sortByCode.call(this, returnData);\n\t}\n\treturn returnData;\n}\n"],"mappings":"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","names":["get","isEqual","lt"]}