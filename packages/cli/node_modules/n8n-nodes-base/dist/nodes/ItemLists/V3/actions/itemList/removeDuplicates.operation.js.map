{"version":3,"sources":["../../../../../../nodes/ItemLists/V3/actions/itemList/removeDuplicates.operation.ts"],"sourcesContent":["import get from 'lodash/get';\nimport isEqual from 'lodash/isEqual';\nimport lt from 'lodash/lt';\nimport pick from 'lodash/pick';\nimport { NodeOperationError } from 'n8n-workflow';\nimport type { IExecuteFunctions, INodeExecutionData, INodeProperties } from 'n8n-workflow';\n\nimport { compareItems, flattenKeys, updateDisplayOptions } from '@utils/utilities';\n\nimport { prepareFieldsArray, typeToNumber } from '../../helpers/utils';\nimport { disableDotNotationBoolean } from '../common.descriptions';\n\nconst properties: INodeProperties[] = [\n\t{\n\t\tdisplayName: 'Compare',\n\t\tname: 'compare',\n\t\ttype: 'options',\n\t\toptions: [\n\t\t\t{\n\t\t\t\tname: 'All Fields',\n\t\t\t\tvalue: 'allFields',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'All Fields Except',\n\t\t\t\tvalue: 'allFieldsExcept',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Selected Fields',\n\t\t\t\tvalue: 'selectedFields',\n\t\t\t},\n\t\t],\n\t\tdefault: 'allFields',\n\t\tdescription: 'The fields of the input items to compare to see if they are the same',\n\t},\n\t{\n\t\tdisplayName: 'Fields To Exclude',\n\t\tname: 'fieldsToExclude',\n\t\ttype: 'string',\n\t\tplaceholder: 'e.g. email, name',\n\t\trequiresDataPath: 'multiple',\n\t\tdescription: 'Fields in the input to exclude from the comparison',\n\t\tdefault: '',\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tcompare: ['allFieldsExcept'],\n\t\t\t},\n\t\t},\n\t},\n\t{\n\t\tdisplayName: 'Fields To Compare',\n\t\tname: 'fieldsToCompare',\n\t\ttype: 'string',\n\t\tplaceholder: 'e.g. email, name',\n\t\trequiresDataPath: 'multiple',\n\t\tdescription: 'Fields in the input to add to the comparison',\n\t\tdefault: '',\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tcompare: ['selectedFields'],\n\t\t\t},\n\t\t},\n\t},\n\t{\n\t\tdisplayName: 'Options',\n\t\tname: 'options',\n\t\ttype: 'collection',\n\t\tplaceholder: 'Add Field',\n\t\tdefault: {},\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tcompare: ['allFieldsExcept', 'selectedFields'],\n\t\t\t},\n\t\t},\n\t\toptions: [\n\t\t\tdisableDotNotationBoolean,\n\t\t\t{\n\t\t\t\tdisplayName: 'Remove Other Fields',\n\t\t\t\tname: 'removeOtherFields',\n\t\t\t\ttype: 'boolean',\n\t\t\t\tdefault: false,\n\t\t\t\tdescription:\n\t\t\t\t\t'Whether to remove any fields that are not being compared. If disabled, will keep the values from the first of the duplicates.',\n\t\t\t},\n\t\t],\n\t},\n];\n\nconst displayOptions = {\n\tshow: {\n\t\tresource: ['itemList'],\n\t\toperation: ['removeDuplicates'],\n\t},\n};\n\nexport const description = updateDisplayOptions(displayOptions, properties);\n\nexport async function execute(\n\tthis: IExecuteFunctions,\n\titems: INodeExecutionData[],\n): Promise<INodeExecutionData[]> {\n\tconst compare = this.getNodeParameter('compare', 0) as string;\n\tconst disableDotNotation = this.getNodeParameter(\n\t\t'options.disableDotNotation',\n\t\t0,\n\t\tfalse,\n\t) as boolean;\n\tconst removeOtherFields = this.getNodeParameter('options.removeOtherFields', 0, false) as boolean;\n\tconst nodeVersion = this.getNode().typeVersion;\n\n\tlet keys = disableDotNotation\n\t\t? Object.keys(items[0].json)\n\t\t: Object.keys(flattenKeys(items[0].json));\n\n\tfor (const item of items) {\n\t\tfor (const key of disableDotNotation\n\t\t\t? Object.keys(item.json)\n\t\t\t: Object.keys(flattenKeys(item.json))) {\n\t\t\tif (!keys.includes(key)) {\n\t\t\t\tkeys.push(key);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (compare === 'allFieldsExcept') {\n\t\tconst fieldsToExclude = prepareFieldsArray(\n\t\t\tthis.getNodeParameter('fieldsToExclude', 0, '') as string,\n\t\t\t'Fields To Exclude',\n\t\t);\n\n\t\tif (!fieldsToExclude.length) {\n\t\t\tthrow new NodeOperationError(\n\t\t\t\tthis.getNode(),\n\t\t\t\t'No fields specified. Please add a field to exclude from comparison',\n\t\t\t);\n\t\t}\n\t\tif (!disableDotNotation) {\n\t\t\tkeys = Object.keys(flattenKeys(items[0].json));\n\t\t}\n\t\tkeys = keys.filter((key) => !fieldsToExclude.includes(key));\n\t}\n\tif (compare === 'selectedFields') {\n\t\tconst fieldsToCompare = prepareFieldsArray(\n\t\t\tthis.getNodeParameter('fieldsToCompare', 0, '') as string,\n\t\t\t'Fields To Compare',\n\t\t);\n\t\tif (!fieldsToCompare.length) {\n\t\t\tthrow new NodeOperationError(\n\t\t\t\tthis.getNode(),\n\t\t\t\t'No fields specified. Please add a field to compare on',\n\t\t\t);\n\t\t}\n\t\tif (!disableDotNotation) {\n\t\t\tkeys = Object.keys(flattenKeys(items[0].json));\n\t\t}\n\t\tkeys = fieldsToCompare.map((key) => key.trim());\n\t}\n\n\t// This solution is O(nlogn)\n\t// add original index to the items\n\tconst newItems = items.map(\n\t\t(item, index) =>\n\t\t\t({\n\t\t\t\tjson: { ...item.json, __INDEX: index },\n\t\t\t\tpairedItem: { item: index },\n\t\t\t}) as INodeExecutionData,\n\t);\n\n\t//sort items using the compare keys\n\tnewItems.sort((a, b) => {\n\t\tlet result = 0;\n\n\t\tfor (const key of keys) {\n\t\t\tconst a_value = disableDotNotation ? a.json[key] : get(a.json, key);\n\t\t\tconst b_value = disableDotNotation ? b.json[key] : get(b.json, key);\n\n\t\t\tif (nodeVersion >= 3.1) {\n\t\t\t\tconst a_value_tnum = typeToNumber(a_value);\n\t\t\t\tconst b_value_tnum = typeToNumber(b_value);\n\t\t\t\tif (a_value_tnum !== b_value_tnum) {\n\t\t\t\t\tresult = a_value_tnum - b_value_tnum;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst equal = isEqual(a_value, b_value);\n\n\t\t\tif (!equal) {\n\t\t\t\tconst lessThan = lt(a_value, b_value);\n\t\t\t\tresult = lessThan ? -1 : 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t});\n\n\tfor (const key of keys) {\n\t\tlet type: any = undefined;\n\t\tfor (const item of newItems) {\n\t\t\tif (key === '') {\n\t\t\t\tthrow new NodeOperationError(this.getNode(), 'Name of field to compare is blank');\n\t\t\t}\n\t\t\tconst value = !disableDotNotation ? get(item.json, key) : item.json[key];\n\t\t\tif (value === undefined && disableDotNotation && key.includes('.')) {\n\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t`'${key}' field is missing from some input items`,\n\t\t\t\t\t{\n\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t\"If you're trying to use a nested field, make sure you turn off 'disable dot notation' in the node options\",\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t} else if (value === undefined) {\n\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t`'${key}' field is missing from some input items`,\n\t\t\t\t);\n\t\t\t}\n\t\t\tif (nodeVersion < 3.1 && type !== undefined && value !== undefined && type !== typeof value) {\n\t\t\t\tthrow new NodeOperationError(this.getNode(), `'${key}' isn't always the same type`, {\n\t\t\t\t\tdescription: 'The type of this field varies between items',\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\ttype = typeof value;\n\t\t\t}\n\t\t}\n\t}\n\n\t// collect the original indexes of items to be removed\n\tconst removedIndexes: number[] = [];\n\tlet temp = newItems[0];\n\tfor (let index = 1; index < newItems.length; index++) {\n\t\tif (compareItems(newItems[index], temp, keys, disableDotNotation)) {\n\t\t\tremovedIndexes.push(newItems[index].json.__INDEX as unknown as number);\n\t\t} else {\n\t\t\ttemp = newItems[index];\n\t\t}\n\t}\n\n\tlet returnData = items.filter((_, index) => !removedIndexes.includes(index));\n\n\tif (removeOtherFields) {\n\t\treturnData = returnData.map((item, index) => ({\n\t\t\tjson: pick(item.json, ...keys),\n\t\t\tpairedItem: { item: index },\n\t\t}));\n\t}\n\n\treturn returnData;\n}\n"],"mappings":"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","names":["get","isEqual","lt","pick"]}