{"version":3,"sources":["../../../../nodes/ItemLists/V2/ItemListsV2.node.ts"],"sourcesContent":["import get from 'lodash/get';\nimport isEmpty from 'lodash/isEmpty';\nimport isEqual from 'lodash/isEqual';\nimport lt from 'lodash/lt';\nimport pick from 'lodash/pick';\nimport set from 'lodash/set';\nimport unset from 'lodash/unset';\nimport { NodeConnectionTypes, NodeOperationError, deepCopy } from 'n8n-workflow';\nimport type {\n\tIDataObject,\n\tIExecuteFunctions,\n\tINodeExecutionData,\n\tINodeType,\n\tINodeTypeBaseDescription,\n\tINodeTypeDescription,\n\tIPairedItemData,\n} from 'n8n-workflow';\n\nimport { flattenKeys, shuffleArray, compareItems } from '@utils/utilities';\n\nimport * as summarize from './summarize.operation';\nimport { sortByCode } from '../V3/helpers/utils';\n\nexport class ItemListsV2 implements INodeType {\n\tdescription: INodeTypeDescription;\n\n\tconstructor(baseDescription: INodeTypeBaseDescription) {\n\t\tthis.description = {\n\t\t\t...baseDescription,\n\t\t\tversion: [2, 2.1, 2.2],\n\t\t\tdefaults: {\n\t\t\t\tname: 'Item Lists',\n\t\t\t},\n\t\t\tinputs: [NodeConnectionTypes.Main],\n\t\t\toutputs: [NodeConnectionTypes.Main],\n\t\t\tcredentials: [],\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'Resource',\n\t\t\t\t\tname: 'resource',\n\t\t\t\t\ttype: 'hidden',\n\t\t\t\t\toptions: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'Item List',\n\t\t\t\t\t\t\tvalue: 'itemList',\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t\tdefault: 'itemList',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'Operation',\n\t\t\t\t\tname: 'operation',\n\t\t\t\t\ttype: 'options',\n\t\t\t\t\tnoDataExpression: true,\n\t\t\t\t\toptions: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'Concatenate Items',\n\t\t\t\t\t\t\tvalue: 'aggregateItems',\n\t\t\t\t\t\t\tdescription: 'Combine fields into a list in a single new item',\n\t\t\t\t\t\t\taction: 'Concatenate Items',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'Limit',\n\t\t\t\t\t\t\tvalue: 'limit',\n\t\t\t\t\t\t\tdescription: 'Remove items if there are too many',\n\t\t\t\t\t\t\taction: 'Limit',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'Remove Duplicates',\n\t\t\t\t\t\t\tvalue: 'removeDuplicates',\n\t\t\t\t\t\t\tdescription: 'Remove extra items that are similar',\n\t\t\t\t\t\t\taction: 'Remove Duplicates',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'Sort',\n\t\t\t\t\t\t\tvalue: 'sort',\n\t\t\t\t\t\t\tdescription: 'Change the item order',\n\t\t\t\t\t\t\taction: 'Sort',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'Split Out Items',\n\t\t\t\t\t\t\tvalue: 'splitOutItems',\n\t\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t\t\"Turn a list or values of object's properties inside item(s) into separate items\",\n\t\t\t\t\t\t\taction: 'Split Out Items',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'Summarize',\n\t\t\t\t\t\t\tvalue: 'summarize',\n\t\t\t\t\t\t\tdescription: 'Aggregate items together (pivot table)',\n\t\t\t\t\t\t\taction: 'Summarize',\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t\tdefault: 'splitOutItems',\n\t\t\t\t},\n\t\t\t\t// Split out items - Fields\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'Fields To Split Out',\n\t\t\t\t\tname: 'fieldToSplitOut',\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tdefault: '',\n\t\t\t\t\trequired: true,\n\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\tresource: ['itemList'],\n\t\t\t\t\t\t\toperation: ['splitOutItems'],\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tdescription: 'The name of the input fields to break out into separate items',\n\t\t\t\t\trequiresDataPath: 'multiple',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'Include',\n\t\t\t\t\tname: 'include',\n\t\t\t\t\ttype: 'options',\n\t\t\t\t\toptions: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'No Other Fields',\n\t\t\t\t\t\t\tvalue: 'noOtherFields',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'All Other Fields',\n\t\t\t\t\t\t\tvalue: 'allOtherFields',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'Selected Other Fields',\n\t\t\t\t\t\t\tvalue: 'selectedOtherFields',\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t\tdefault: 'noOtherFields',\n\t\t\t\t\tdescription: 'Whether to copy any other fields into the new items',\n\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\tresource: ['itemList'],\n\t\t\t\t\t\t\toperation: ['splitOutItems'],\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'Fields To Include',\n\t\t\t\t\tname: 'fieldsToInclude',\n\t\t\t\t\ttype: 'fixedCollection',\n\t\t\t\t\ttypeOptions: {\n\t\t\t\t\t\tmultipleValues: true,\n\t\t\t\t\t},\n\t\t\t\t\tplaceholder: 'Add Field To Include',\n\t\t\t\t\tdefault: {},\n\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\tresource: ['itemList'],\n\t\t\t\t\t\t\toperation: ['splitOutItems'],\n\t\t\t\t\t\t\tinclude: ['selectedOtherFields'],\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\toptions: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tdisplayName: '',\n\t\t\t\t\t\t\tname: 'fields',\n\t\t\t\t\t\t\tvalues: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tdisplayName: 'Field Name',\n\t\t\t\t\t\t\t\t\tname: 'fieldName',\n\t\t\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\t\t\t\tdescription: 'A field in the input items to aggregate together',\n\t\t\t\t\t\t\t\t\t// eslint-disable-next-line n8n-nodes-base/node-param-placeholder-miscased-id\n\t\t\t\t\t\t\t\t\tplaceholder: 'e.g. id',\n\t\t\t\t\t\t\t\t\thint: ' Enter the field name as text',\n\t\t\t\t\t\t\t\t\trequiresDataPath: 'single',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t// Aggregate Items\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'Aggregate',\n\t\t\t\t\tname: 'aggregate',\n\t\t\t\t\ttype: 'options',\n\t\t\t\t\tdefault: 'aggregateIndividualFields',\n\t\t\t\t\toptions: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'Individual Fields',\n\t\t\t\t\t\t\tvalue: 'aggregateIndividualFields',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'All Item Data (Into a Single List)',\n\t\t\t\t\t\t\tvalue: 'aggregateAllItemData',\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\tresource: ['itemList'],\n\t\t\t\t\t\t\toperation: ['aggregateItems'],\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t// Aggregate Individual Fields\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'Fields To Aggregate',\n\t\t\t\t\tname: 'fieldsToAggregate',\n\t\t\t\t\ttype: 'fixedCollection',\n\t\t\t\t\ttypeOptions: {\n\t\t\t\t\t\tmultipleValues: true,\n\t\t\t\t\t},\n\t\t\t\t\tplaceholder: 'Add Field To Aggregate',\n\t\t\t\t\tdefault: { fieldToAggregate: [{ fieldToAggregate: '', renameField: false }] },\n\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\tresource: ['itemList'],\n\t\t\t\t\t\t\toperation: ['aggregateItems'],\n\t\t\t\t\t\t\taggregate: ['aggregateIndividualFields'],\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\toptions: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tdisplayName: '',\n\t\t\t\t\t\t\tname: 'fieldToAggregate',\n\t\t\t\t\t\t\tvalues: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tdisplayName: 'Input Field Name',\n\t\t\t\t\t\t\t\t\tname: 'fieldToAggregate',\n\t\t\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\t\t\t\tdescription: 'The name of a field in the input items to aggregate together',\n\t\t\t\t\t\t\t\t\t// eslint-disable-next-line n8n-nodes-base/node-param-placeholder-miscased-id\n\t\t\t\t\t\t\t\t\tplaceholder: 'e.g. id',\n\t\t\t\t\t\t\t\t\thint: ' Enter the field name as text',\n\t\t\t\t\t\t\t\t\trequiresDataPath: 'single',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tdisplayName: 'Rename Field',\n\t\t\t\t\t\t\t\t\tname: 'renameField',\n\t\t\t\t\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\t\t\t\t\tdefault: false,\n\t\t\t\t\t\t\t\t\tdescription: 'Whether to give the field a different name in the output',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tdisplayName: 'Output Field Name',\n\t\t\t\t\t\t\t\t\tname: 'outputFieldName',\n\t\t\t\t\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\t\t\t\t\trenameField: [true],\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t\t\t\t'The name of the field to put the aggregated data in. Leave blank to use the input field name.',\n\t\t\t\t\t\t\t\t\trequiresDataPath: 'single',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t// Aggregate All Item Data\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'Put Output in Field',\n\t\t\t\t\tname: 'destinationFieldName',\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\tresource: ['itemList'],\n\t\t\t\t\t\t\toperation: ['aggregateItems'],\n\t\t\t\t\t\t\taggregate: ['aggregateAllItemData'],\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tdefault: 'data',\n\t\t\t\t\tdescription: 'The name of the output field to put the data in',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'Include',\n\t\t\t\t\tname: 'include',\n\t\t\t\t\ttype: 'options',\n\t\t\t\t\tdefault: 'allFields',\n\t\t\t\t\toptions: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'All Fields',\n\t\t\t\t\t\t\tvalue: 'allFields',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'Specified Fields',\n\t\t\t\t\t\t\tvalue: 'specifiedFields',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'All Fields Except',\n\t\t\t\t\t\t\tvalue: 'allFieldsExcept',\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\tresource: ['itemList'],\n\t\t\t\t\t\t\toperation: ['aggregateItems'],\n\t\t\t\t\t\t\taggregate: ['aggregateAllItemData'],\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'Fields To Exclude',\n\t\t\t\t\tname: 'fieldsToExclude',\n\t\t\t\t\ttype: 'fixedCollection',\n\t\t\t\t\ttypeOptions: {\n\t\t\t\t\t\tmultipleValues: true,\n\t\t\t\t\t},\n\t\t\t\t\tplaceholder: 'Add Field To Exclude',\n\t\t\t\t\tdefault: {},\n\t\t\t\t\toptions: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tdisplayName: '',\n\t\t\t\t\t\t\tname: 'fields',\n\t\t\t\t\t\t\tvalues: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tdisplayName: 'Field Name',\n\t\t\t\t\t\t\t\t\tname: 'fieldName',\n\t\t\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\t\t\t\tdescription: 'A field in the input to exclude from the object in output array',\n\t\t\t\t\t\t\t\t\t// eslint-disable-next-line n8n-nodes-base/node-param-placeholder-miscased-id\n\t\t\t\t\t\t\t\t\tplaceholder: 'e.g. id',\n\t\t\t\t\t\t\t\t\thint: ' Enter the field name as text',\n\t\t\t\t\t\t\t\t\trequiresDataPath: 'single',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\tresource: ['itemList'],\n\t\t\t\t\t\t\toperation: ['aggregateItems'],\n\t\t\t\t\t\t\taggregate: ['aggregateAllItemData'],\n\t\t\t\t\t\t\tinclude: ['allFieldsExcept'],\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'Fields To Include',\n\t\t\t\t\tname: 'fieldsToInclude',\n\t\t\t\t\ttype: 'fixedCollection',\n\t\t\t\t\ttypeOptions: {\n\t\t\t\t\t\tmultipleValues: true,\n\t\t\t\t\t},\n\t\t\t\t\tplaceholder: 'Add Field To Include',\n\t\t\t\t\tdefault: {},\n\t\t\t\t\toptions: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tdisplayName: '',\n\t\t\t\t\t\t\tname: 'fields',\n\t\t\t\t\t\t\tvalues: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tdisplayName: 'Field Name',\n\t\t\t\t\t\t\t\t\tname: 'fieldName',\n\t\t\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\t\t\t\tdescription: 'Specify fields that will be included in output array',\n\t\t\t\t\t\t\t\t\t// eslint-disable-next-line n8n-nodes-base/node-param-placeholder-miscased-id\n\t\t\t\t\t\t\t\t\tplaceholder: 'e.g. id',\n\t\t\t\t\t\t\t\t\thint: ' Enter the field name as text',\n\t\t\t\t\t\t\t\t\trequiresDataPath: 'single',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\tresource: ['itemList'],\n\t\t\t\t\t\t\toperation: ['aggregateItems'],\n\t\t\t\t\t\t\taggregate: ['aggregateAllItemData'],\n\t\t\t\t\t\t\tinclude: ['specifiedFields'],\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t// Remove duplicates - Fields\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'Compare',\n\t\t\t\t\tname: 'compare',\n\t\t\t\t\ttype: 'options',\n\t\t\t\t\toptions: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'All Fields',\n\t\t\t\t\t\t\tvalue: 'allFields',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'All Fields Except',\n\t\t\t\t\t\t\tvalue: 'allFieldsExcept',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'Selected Fields',\n\t\t\t\t\t\t\tvalue: 'selectedFields',\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t\tdefault: 'allFields',\n\t\t\t\t\tdescription: 'The fields of the input items to compare to see if they are the same',\n\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\tresource: ['itemList'],\n\t\t\t\t\t\t\toperation: ['removeDuplicates'],\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'Fields To Exclude',\n\t\t\t\t\tname: 'fieldsToExclude',\n\t\t\t\t\ttype: 'fixedCollection',\n\t\t\t\t\ttypeOptions: {\n\t\t\t\t\t\tmultipleValues: true,\n\t\t\t\t\t},\n\t\t\t\t\tplaceholder: 'Add Field To Exclude',\n\t\t\t\t\tdefault: {},\n\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\tresource: ['itemList'],\n\t\t\t\t\t\t\toperation: ['removeDuplicates'],\n\t\t\t\t\t\t\tcompare: ['allFieldsExcept'],\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\toptions: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tdisplayName: '',\n\t\t\t\t\t\t\tname: 'fields',\n\t\t\t\t\t\t\tvalues: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tdisplayName: 'Field Name',\n\t\t\t\t\t\t\t\t\tname: 'fieldName',\n\t\t\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\t\t\t\tdescription: 'A field in the input to exclude from the comparison',\n\t\t\t\t\t\t\t\t\t// eslint-disable-next-line n8n-nodes-base/node-param-placeholder-miscased-id\n\t\t\t\t\t\t\t\t\tplaceholder: 'e.g. id',\n\t\t\t\t\t\t\t\t\thint: ' Enter the field name as text',\n\t\t\t\t\t\t\t\t\trequiresDataPath: 'single',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'Fields To Compare',\n\t\t\t\t\tname: 'fieldsToCompare',\n\t\t\t\t\ttype: 'fixedCollection',\n\t\t\t\t\ttypeOptions: {\n\t\t\t\t\t\tmultipleValues: true,\n\t\t\t\t\t},\n\t\t\t\t\tplaceholder: 'Add Field To Compare',\n\t\t\t\t\tdefault: {},\n\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\tresource: ['itemList'],\n\t\t\t\t\t\t\toperation: ['removeDuplicates'],\n\t\t\t\t\t\t\tcompare: ['selectedFields'],\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\toptions: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tdisplayName: '',\n\t\t\t\t\t\t\tname: 'fields',\n\t\t\t\t\t\t\tvalues: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tdisplayName: 'Field Name',\n\t\t\t\t\t\t\t\t\tname: 'fieldName',\n\t\t\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\t\t\t\tdescription: 'A field in the input to add to the comparison',\n\t\t\t\t\t\t\t\t\t// eslint-disable-next-line n8n-nodes-base/node-param-placeholder-miscased-id\n\t\t\t\t\t\t\t\t\tplaceholder: 'e.g. id',\n\t\t\t\t\t\t\t\t\thint: ' Enter the field name as text',\n\t\t\t\t\t\t\t\t\trequiresDataPath: 'single',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t// Sort - Fields\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'Type',\n\t\t\t\t\tname: 'type',\n\t\t\t\t\ttype: 'options',\n\t\t\t\t\toptions: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'Simple',\n\t\t\t\t\t\t\tvalue: 'simple',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'Random',\n\t\t\t\t\t\t\tvalue: 'random',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'Code',\n\t\t\t\t\t\t\tvalue: 'code',\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t\tdefault: 'simple',\n\t\t\t\t\tdescription: 'The fields of the input items to compare to see if they are the same',\n\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\tresource: ['itemList'],\n\t\t\t\t\t\t\toperation: ['sort'],\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'Fields To Sort By',\n\t\t\t\t\tname: 'sortFieldsUi',\n\t\t\t\t\ttype: 'fixedCollection',\n\t\t\t\t\ttypeOptions: {\n\t\t\t\t\t\tmultipleValues: true,\n\t\t\t\t\t},\n\t\t\t\t\tplaceholder: 'Add Field To Sort By',\n\t\t\t\t\toptions: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tdisplayName: '',\n\t\t\t\t\t\t\tname: 'sortField',\n\t\t\t\t\t\t\tvalues: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tdisplayName: 'Field Name',\n\t\t\t\t\t\t\t\t\tname: 'fieldName',\n\t\t\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\t\t\trequired: true,\n\t\t\t\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\t\t\t\tdescription: 'The field to sort by',\n\t\t\t\t\t\t\t\t\t// eslint-disable-next-line n8n-nodes-base/node-param-placeholder-miscased-id\n\t\t\t\t\t\t\t\t\tplaceholder: 'e.g. id',\n\t\t\t\t\t\t\t\t\thint: ' Enter the field name as text',\n\t\t\t\t\t\t\t\t\trequiresDataPath: 'single',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tdisplayName: 'Order',\n\t\t\t\t\t\t\t\t\tname: 'order',\n\t\t\t\t\t\t\t\t\ttype: 'options',\n\t\t\t\t\t\t\t\t\toptions: [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tname: 'Ascending',\n\t\t\t\t\t\t\t\t\t\t\tvalue: 'ascending',\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tname: 'Descending',\n\t\t\t\t\t\t\t\t\t\t\tvalue: 'descending',\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\tdefault: 'ascending',\n\t\t\t\t\t\t\t\t\tdescription: 'The order to sort by',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t\tdefault: {},\n\t\t\t\t\tdescription: 'The fields of the input items to compare to see if they are the same',\n\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\tresource: ['itemList'],\n\t\t\t\t\t\t\toperation: ['sort'],\n\t\t\t\t\t\t\ttype: ['simple'],\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'Code',\n\t\t\t\t\tname: 'code',\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\ttypeOptions: {\n\t\t\t\t\t\talwaysOpenEditWindow: true,\n\t\t\t\t\t\teditor: 'jsEditor',\n\t\t\t\t\t\trows: 10,\n\t\t\t\t\t},\n\t\t\t\t\tdefault: `// The two items to compare are in the variables a and b\n// Access the fields in a.json and b.json\n// Return -1 if a should go before b\n// Return 1 if b should go before a\n// Return 0 if there's no difference\n\nfieldName = 'myField';\n\nif (a.json[fieldName] < b.json[fieldName]) {\n\t\treturn -1;\n}\nif (a.json[fieldName] > b.json[fieldName]) {\n\t\treturn 1;\n}\nreturn 0;`,\n\t\t\t\t\tdescription: 'Javascript code to determine the order of any two items',\n\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\tresource: ['itemList'],\n\t\t\t\t\t\t\toperation: ['sort'],\n\t\t\t\t\t\t\ttype: ['code'],\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t// Limit - Fields\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'Max Items',\n\t\t\t\t\tname: 'maxItems',\n\t\t\t\t\ttype: 'number',\n\t\t\t\t\ttypeOptions: {\n\t\t\t\t\t\tminValue: 1,\n\t\t\t\t\t},\n\t\t\t\t\tdefault: 1,\n\t\t\t\t\tdescription: 'If there are more items than this number, some are removed',\n\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\tresource: ['itemList'],\n\t\t\t\t\t\t\toperation: ['limit'],\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'Keep',\n\t\t\t\t\tname: 'keep',\n\t\t\t\t\ttype: 'options',\n\t\t\t\t\toptions: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'First Items',\n\t\t\t\t\t\t\tvalue: 'firstItems',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'Last Items',\n\t\t\t\t\t\t\tvalue: 'lastItems',\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t\tdefault: 'firstItems',\n\t\t\t\t\tdescription: 'When removing items, whether to keep the ones at the start or the ending',\n\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\tresource: ['itemList'],\n\t\t\t\t\t\t\toperation: ['limit'],\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'Options',\n\t\t\t\t\tname: 'options',\n\t\t\t\t\ttype: 'collection',\n\t\t\t\t\tplaceholder: 'Add Field',\n\t\t\t\t\tdefault: {},\n\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\tresource: ['itemList'],\n\t\t\t\t\t\t\toperation: ['removeDuplicates'],\n\t\t\t\t\t\t\tcompare: ['allFieldsExcept', 'selectedFields'],\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\toptions: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tdisplayName: 'Remove Other Fields',\n\t\t\t\t\t\t\tname: 'removeOtherFields',\n\t\t\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\t\t\tdefault: false,\n\t\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t\t'Whether to remove any fields that are not being compared. If disabled, will keep the values from the first of the duplicates.',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tdisplayName: 'Disable Dot Notation',\n\t\t\t\t\t\t\tname: 'disableDotNotation',\n\t\t\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\t\t\tdefault: false,\n\t\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t\t'Whether to disallow referencing child fields using `parent.child` in the field name',\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'Options',\n\t\t\t\t\tname: 'options',\n\t\t\t\t\ttype: 'collection',\n\t\t\t\t\tplaceholder: 'Add Field',\n\t\t\t\t\tdefault: {},\n\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\tresource: ['itemList'],\n\t\t\t\t\t\t\toperation: ['sort'],\n\t\t\t\t\t\t\ttype: ['simple'],\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\toptions: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tdisplayName: 'Disable Dot Notation',\n\t\t\t\t\t\t\tname: 'disableDotNotation',\n\t\t\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\t\t\tdefault: false,\n\t\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t\t'Whether to disallow referencing child fields using `parent.child` in the field name',\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'Options',\n\t\t\t\t\tname: 'options',\n\t\t\t\t\ttype: 'collection',\n\t\t\t\t\tplaceholder: 'Add Field',\n\t\t\t\t\tdefault: {},\n\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\tresource: ['itemList'],\n\t\t\t\t\t\t\toperation: ['splitOutItems', 'aggregateItems'],\n\t\t\t\t\t\t},\n\t\t\t\t\t\thide: {\n\t\t\t\t\t\t\taggregate: ['aggregateAllItemData'],\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\toptions: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tdisplayName: 'Disable Dot Notation',\n\t\t\t\t\t\t\tname: 'disableDotNotation',\n\t\t\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\t\t\t'/operation': ['splitOutItems', 'aggregateItems'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tdefault: false,\n\t\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t\t'Whether to disallow referencing child fields using `parent.child` in the field name',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tdisplayName: 'Destination Field Name',\n\t\t\t\t\t\t\tname: 'destinationFieldName',\n\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\trequiresDataPath: 'multiple',\n\t\t\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\t\t\t'/operation': ['splitOutItems'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\t\tdescription: 'The field in the output under which to put the split field contents',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tdisplayName: 'Merge Lists',\n\t\t\t\t\t\t\tname: 'mergeLists',\n\t\t\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\t\t\t'/operation': ['aggregateItems'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tdefault: false,\n\t\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t\t'Whether to merge the output into a single flat list (rather than a list of lists), if the field to aggregate is a list',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tdisplayName: 'Keep Missing And Null Values',\n\t\t\t\t\t\t\tname: 'keepMissing',\n\t\t\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\t\t\t'/operation': ['aggregateItems'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tdefault: false,\n\t\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t\t'Whether to add a null entry to the aggregated list when there is a missing or null value',\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t// Remove duplicates - Fields\n\t\t\t\t...summarize.description,\n\t\t\t],\n\t\t};\n\t}\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t\tconst items = this.getInputData();\n\t\tconst length = items.length;\n\t\tconst returnData: INodeExecutionData[] = [];\n\t\tconst resource = this.getNodeParameter('resource', 0);\n\t\tconst operation = this.getNodeParameter('operation', 0);\n\t\tconst nodeVersion = this.getNode().typeVersion;\n\n\t\tif (resource === 'itemList') {\n\t\t\tif (operation === 'splitOutItems') {\n\t\t\t\tfor (let i = 0; i < length; i++) {\n\t\t\t\t\tconst fieldsToSplitOut = (this.getNodeParameter('fieldToSplitOut', i) as string)\n\t\t\t\t\t\t.split(',')\n\t\t\t\t\t\t.map((field) => field.trim());\n\t\t\t\t\tconst disableDotNotation = this.getNodeParameter(\n\t\t\t\t\t\t'options.disableDotNotation',\n\t\t\t\t\t\t0,\n\t\t\t\t\t\tfalse,\n\t\t\t\t\t) as boolean;\n\n\t\t\t\t\tconst destinationFields = (\n\t\t\t\t\t\tthis.getNodeParameter('options.destinationFieldName', i, '') as string\n\t\t\t\t\t)\n\t\t\t\t\t\t.split(',')\n\t\t\t\t\t\t.filter((field) => field.trim() !== '')\n\t\t\t\t\t\t.map((field) => field.trim());\n\n\t\t\t\t\tif (destinationFields.length && destinationFields.length !== fieldsToSplitOut.length) {\n\t\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t\t'If multiple fields to split out are given, the same number of destination fields must be given',\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst include = this.getNodeParameter('include', i) as\n\t\t\t\t\t\t| 'selectedOtherFields'\n\t\t\t\t\t\t| 'allOtherFields'\n\t\t\t\t\t\t| 'noOtherFields';\n\n\t\t\t\t\tconst multiSplit = fieldsToSplitOut.length > 1;\n\n\t\t\t\t\tconst item = { ...items[i].json };\n\t\t\t\t\tconst splited: IDataObject[] = [];\n\t\t\t\t\tfor (const [entryIndex, fieldToSplitOut] of fieldsToSplitOut.entries()) {\n\t\t\t\t\t\tconst destinationFieldName = destinationFields[entryIndex] || '';\n\n\t\t\t\t\t\tlet arrayToSplit;\n\t\t\t\t\t\tif (!disableDotNotation) {\n\t\t\t\t\t\t\tarrayToSplit = get(item, fieldToSplitOut);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tarrayToSplit = item[fieldToSplitOut];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (arrayToSplit === undefined) {\n\t\t\t\t\t\t\tif (nodeVersion < 2.1) {\n\t\t\t\t\t\t\t\tif (fieldToSplitOut.includes('.') && disableDotNotation) {\n\t\t\t\t\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t\t\t\t\t`Couldn't find the field '${fieldToSplitOut}' in the input data`,\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t\t\t\t\t\t\"If you're trying to use a nested field, make sure you turn off 'disable dot notation' in the node options\",\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t\t\t\t\t`Couldn't find the field '${fieldToSplitOut}' in the input data`,\n\t\t\t\t\t\t\t\t\t\t{ itemIndex: i },\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tarrayToSplit = [];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (typeof arrayToSplit !== 'object' || arrayToSplit === null) {\n\t\t\t\t\t\t\tif (nodeVersion < 2.2) {\n\t\t\t\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t\t\t\t`The provided field '${fieldToSplitOut}' is not an array or object`,\n\t\t\t\t\t\t\t\t\t{ itemIndex: i },\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tarrayToSplit = [arrayToSplit];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (!Array.isArray(arrayToSplit)) {\n\t\t\t\t\t\t\tarrayToSplit = Object.values(arrayToSplit);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfor (const [elementIndex, element] of arrayToSplit.entries()) {\n\t\t\t\t\t\t\tif (splited[elementIndex] === undefined) {\n\t\t\t\t\t\t\t\tsplited[elementIndex] = {};\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tconst fieldName = destinationFieldName || fieldToSplitOut;\n\n\t\t\t\t\t\t\tif (typeof element === 'object' && element !== null && include === 'noOtherFields') {\n\t\t\t\t\t\t\t\tif (destinationFieldName === '' && !multiSplit) {\n\t\t\t\t\t\t\t\t\tsplited[elementIndex] = { ...splited[elementIndex], ...element };\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tsplited[elementIndex][fieldName] = element;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tsplited[elementIndex][fieldName] = element;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (const splitEntry of splited) {\n\t\t\t\t\t\tlet newItem: IDataObject = {};\n\n\t\t\t\t\t\tif (include === 'noOtherFields') {\n\t\t\t\t\t\t\tnewItem = splitEntry;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (include === 'allOtherFields') {\n\t\t\t\t\t\t\tconst itemCopy = deepCopy(item);\n\t\t\t\t\t\t\tfor (const fieldToSplitOut of fieldsToSplitOut) {\n\t\t\t\t\t\t\t\tif (!disableDotNotation) {\n\t\t\t\t\t\t\t\t\tunset(itemCopy, fieldToSplitOut);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tdelete itemCopy[fieldToSplitOut];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tnewItem = { ...itemCopy, ...splitEntry };\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (include === 'selectedOtherFields') {\n\t\t\t\t\t\t\tconst fieldsToInclude = (\n\t\t\t\t\t\t\t\tthis.getNodeParameter('fieldsToInclude.fields', i, []) as [{ fieldName: string }]\n\t\t\t\t\t\t\t).map((field) => field.fieldName);\n\n\t\t\t\t\t\t\tif (!fieldsToInclude.length) {\n\t\t\t\t\t\t\t\tthrow new NodeOperationError(this.getNode(), 'No fields specified', {\n\t\t\t\t\t\t\t\t\tdescription: 'Please add a field to include',\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tfor (const field of fieldsToInclude) {\n\t\t\t\t\t\t\t\tif (!disableDotNotation) {\n\t\t\t\t\t\t\t\t\tsplitEntry[field] = get(item, field);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tsplitEntry[field] = item[field];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tnewItem = splitEntry;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturnData.push({\n\t\t\t\t\t\t\tjson: newItem,\n\t\t\t\t\t\t\tpairedItem: {\n\t\t\t\t\t\t\t\titem: i,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn [returnData];\n\t\t\t} else if (operation === 'aggregateItems') {\n\t\t\t\tconst aggregate = this.getNodeParameter('aggregate', 0, '') as string;\n\n\t\t\t\tif (aggregate === 'aggregateIndividualFields') {\n\t\t\t\t\tconst disableDotNotation = this.getNodeParameter(\n\t\t\t\t\t\t'options.disableDotNotation',\n\t\t\t\t\t\t0,\n\t\t\t\t\t\tfalse,\n\t\t\t\t\t) as boolean;\n\t\t\t\t\tconst mergeLists = this.getNodeParameter('options.mergeLists', 0, false) as boolean;\n\t\t\t\t\tconst fieldsToAggregate = this.getNodeParameter(\n\t\t\t\t\t\t'fieldsToAggregate.fieldToAggregate',\n\t\t\t\t\t\t0,\n\t\t\t\t\t\t[],\n\t\t\t\t\t) as [{ fieldToAggregate: string; renameField: boolean; outputFieldName: string }];\n\t\t\t\t\tconst keepMissing = this.getNodeParameter('options.keepMissing', 0, false) as boolean;\n\n\t\t\t\t\tif (!fieldsToAggregate.length) {\n\t\t\t\t\t\tthrow new NodeOperationError(this.getNode(), 'No fields specified', {\n\t\t\t\t\t\t\tdescription: 'Please add a field to aggregate',\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\tif (nodeVersion < 2.1) {\n\t\t\t\t\t\tfor (const { fieldToAggregate } of fieldsToAggregate) {\n\t\t\t\t\t\t\tlet found = false;\n\t\t\t\t\t\t\tfor (const item of items) {\n\t\t\t\t\t\t\t\tif (fieldToAggregate === '') {\n\t\t\t\t\t\t\t\t\tthrow new NodeOperationError(this.getNode(), 'Field to aggregate is blank', {\n\t\t\t\t\t\t\t\t\t\tdescription: 'Please add a field to aggregate',\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (!disableDotNotation) {\n\t\t\t\t\t\t\t\t\tif (get(item.json, fieldToAggregate) !== undefined) {\n\t\t\t\t\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t} else if (item.json.hasOwnProperty(fieldToAggregate)) {\n\t\t\t\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (!found && disableDotNotation && fieldToAggregate.includes('.')) {\n\t\t\t\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t\t\t\t`Couldn't find the field '${fieldToAggregate}' in the input data`,\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t\t\t\t\t\"If you're trying to use a nested field, make sure you turn off 'disable dot notation' in the node options\",\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t} else if (!found && !keepMissing) {\n\t\t\t\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t\t\t\t`Couldn't find the field '${fieldToAggregate}' in the input data`,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tconst newItem: INodeExecutionData = {\n\t\t\t\t\t\tjson: {},\n\t\t\t\t\t\tpairedItem: Array.from({ length }, (_, i) => i).map((index) => {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\titem: index,\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}),\n\t\t\t\t\t};\n\n\t\t\t\t\tconst values: { [key: string]: any } = {};\n\t\t\t\t\tconst outputFields: string[] = [];\n\n\t\t\t\t\tfor (const { fieldToAggregate, outputFieldName, renameField } of fieldsToAggregate) {\n\t\t\t\t\t\tconst field = renameField ? outputFieldName : fieldToAggregate;\n\n\t\t\t\t\t\tif (outputFields.includes(field)) {\n\t\t\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t\t\t`The '${field}' output field is used more than once`,\n\t\t\t\t\t\t\t\t{ description: 'Please make sure each output field name is unique' },\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\toutputFields.push(field);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst getFieldToAggregate = () =>\n\t\t\t\t\t\t\t!disableDotNotation && fieldToAggregate.includes('.')\n\t\t\t\t\t\t\t\t? fieldToAggregate.split('.').pop()\n\t\t\t\t\t\t\t\t: fieldToAggregate;\n\n\t\t\t\t\t\tconst _outputFieldName = outputFieldName\n\t\t\t\t\t\t\t? outputFieldName\n\t\t\t\t\t\t\t: (getFieldToAggregate() as string);\n\n\t\t\t\t\t\tif (fieldToAggregate !== '') {\n\t\t\t\t\t\t\tvalues[_outputFieldName] = [];\n\t\t\t\t\t\t\tfor (let i = 0; i < length; i++) {\n\t\t\t\t\t\t\t\tif (!disableDotNotation) {\n\t\t\t\t\t\t\t\t\tlet value = get(items[i].json, fieldToAggregate);\n\n\t\t\t\t\t\t\t\t\tif (!keepMissing) {\n\t\t\t\t\t\t\t\t\t\tif (Array.isArray(value)) {\n\t\t\t\t\t\t\t\t\t\t\tvalue = value.filter((entry) => entry !== null);\n\t\t\t\t\t\t\t\t\t\t} else if (value === null || value === undefined) {\n\t\t\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tif (Array.isArray(value) && mergeLists) {\n\t\t\t\t\t\t\t\t\t\tvalues[_outputFieldName].push(...value);\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tvalues[_outputFieldName].push(value);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tlet value = items[i].json[fieldToAggregate];\n\n\t\t\t\t\t\t\t\t\tif (!keepMissing) {\n\t\t\t\t\t\t\t\t\t\tif (Array.isArray(value)) {\n\t\t\t\t\t\t\t\t\t\t\tvalue = value.filter((entry) => entry !== null);\n\t\t\t\t\t\t\t\t\t\t} else if (value === null || value === undefined) {\n\t\t\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tif (Array.isArray(value) && mergeLists) {\n\t\t\t\t\t\t\t\t\t\tvalues[_outputFieldName].push(...value);\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tvalues[_outputFieldName].push(value);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (const key of Object.keys(values)) {\n\t\t\t\t\t\tif (!disableDotNotation) {\n\t\t\t\t\t\t\tset(newItem.json, key, values[key]);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tnewItem.json[key] = values[key];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturnData.push(newItem);\n\n\t\t\t\t\treturn [returnData];\n\t\t\t\t} else {\n\t\t\t\t\tlet newItems: IDataObject[] = items.map((item) => item.json);\n\t\t\t\t\tlet pairedItem: IPairedItemData[] = [];\n\t\t\t\t\tconst destinationFieldName = this.getNodeParameter('destinationFieldName', 0) as string;\n\t\t\t\t\tconst fieldsToExclude = (\n\t\t\t\t\t\tthis.getNodeParameter('fieldsToExclude.fields', 0, []) as IDataObject[]\n\t\t\t\t\t).map((entry) => entry.fieldName);\n\t\t\t\t\tconst fieldsToInclude = (\n\t\t\t\t\t\tthis.getNodeParameter('fieldsToInclude.fields', 0, []) as IDataObject[]\n\t\t\t\t\t).map((entry) => entry.fieldName);\n\n\t\t\t\t\tif (fieldsToExclude.length || fieldsToInclude.length) {\n\t\t\t\t\t\tnewItems = newItems.reduce((acc, item, index) => {\n\t\t\t\t\t\t\tconst newItem: IDataObject = {};\n\t\t\t\t\t\t\tlet outputFields = Object.keys(item);\n\n\t\t\t\t\t\t\tif (fieldsToExclude.length) {\n\t\t\t\t\t\t\t\toutputFields = outputFields.filter((key) => !fieldsToExclude.includes(key));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (fieldsToInclude.length) {\n\t\t\t\t\t\t\t\toutputFields = outputFields.filter((key) =>\n\t\t\t\t\t\t\t\t\tfieldsToInclude.length ? fieldsToInclude.includes(key) : true,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\toutputFields.forEach((key) => {\n\t\t\t\t\t\t\t\tnewItem[key] = item[key];\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\tif (isEmpty(newItem)) {\n\t\t\t\t\t\t\t\treturn acc;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tpairedItem.push({ item: index });\n\t\t\t\t\t\t\treturn acc.concat([newItem]);\n\t\t\t\t\t\t}, [] as IDataObject[]);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tpairedItem = Array.from({ length: newItems.length }, (_, item) => ({\n\t\t\t\t\t\t\titem,\n\t\t\t\t\t\t}));\n\t\t\t\t\t}\n\n\t\t\t\t\treturn [[{ json: { [destinationFieldName]: newItems }, pairedItem }]];\n\t\t\t\t}\n\t\t\t} else if (operation === 'removeDuplicates') {\n\t\t\t\tconst compare = this.getNodeParameter('compare', 0) as string;\n\t\t\t\tconst disableDotNotation = this.getNodeParameter(\n\t\t\t\t\t'options.disableDotNotation',\n\t\t\t\t\t0,\n\t\t\t\t\tfalse,\n\t\t\t\t) as boolean;\n\t\t\t\tconst removeOtherFields = this.getNodeParameter(\n\t\t\t\t\t'options.removeOtherFields',\n\t\t\t\t\t0,\n\t\t\t\t\tfalse,\n\t\t\t\t) as boolean;\n\n\t\t\t\tlet keys = disableDotNotation\n\t\t\t\t\t? Object.keys(items[0].json)\n\t\t\t\t\t: Object.keys(flattenKeys(items[0].json));\n\n\t\t\t\tfor (const item of items) {\n\t\t\t\t\tfor (const key of disableDotNotation\n\t\t\t\t\t\t? Object.keys(item.json)\n\t\t\t\t\t\t: Object.keys(flattenKeys(item.json))) {\n\t\t\t\t\t\tif (!keys.includes(key)) {\n\t\t\t\t\t\t\tkeys.push(key);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (compare === 'allFieldsExcept') {\n\t\t\t\t\tconst fieldsToExclude = (\n\t\t\t\t\t\tthis.getNodeParameter('fieldsToExclude.fields', 0, []) as [{ fieldName: string }]\n\t\t\t\t\t).map((field) => field.fieldName);\n\t\t\t\t\tif (!fieldsToExclude.length) {\n\t\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t\t'No fields specified. Please add a field to exclude from comparison',\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tif (!disableDotNotation) {\n\t\t\t\t\t\tkeys = Object.keys(flattenKeys(items[0].json));\n\t\t\t\t\t}\n\t\t\t\t\tkeys = keys.filter((key) => !fieldsToExclude.includes(key));\n\t\t\t\t}\n\t\t\t\tif (compare === 'selectedFields') {\n\t\t\t\t\tconst fieldsToCompare = (\n\t\t\t\t\t\tthis.getNodeParameter('fieldsToCompare.fields', 0, []) as [{ fieldName: string }]\n\t\t\t\t\t).map((field) => field.fieldName);\n\t\t\t\t\tif (!fieldsToCompare.length) {\n\t\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t\t'No fields specified. Please add a field to compare on',\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tif (!disableDotNotation) {\n\t\t\t\t\t\tkeys = Object.keys(flattenKeys(items[0].json));\n\t\t\t\t\t}\n\t\t\t\t\tkeys = fieldsToCompare.map((key) => key.trim());\n\t\t\t\t}\n\n\t\t\t\t// This solution is O(nlogn)\n\t\t\t\t// add original index to the items\n\t\t\t\tconst newItems = items.map(\n\t\t\t\t\t(item, index) =>\n\t\t\t\t\t\t({\n\t\t\t\t\t\t\tjson: { ...item.json, __INDEX: index },\n\t\t\t\t\t\t\tpairedItem: { item: index },\n\t\t\t\t\t\t}) as INodeExecutionData,\n\t\t\t\t);\n\t\t\t\t//sort items using the compare keys\n\t\t\t\tnewItems.sort((a, b) => {\n\t\t\t\t\tlet result = 0;\n\n\t\t\t\t\tfor (const key of keys) {\n\t\t\t\t\t\tlet equal;\n\t\t\t\t\t\tif (!disableDotNotation) {\n\t\t\t\t\t\t\tequal = isEqual(get(a.json, key), get(b.json, key));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tequal = isEqual(a.json[key], b.json[key]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!equal) {\n\t\t\t\t\t\t\tlet lessThan;\n\t\t\t\t\t\t\tif (!disableDotNotation) {\n\t\t\t\t\t\t\t\tlessThan = lt(get(a.json, key), get(b.json, key));\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tlessThan = lt(a.json[key], b.json[key]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tresult = lessThan ? -1 : 1;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn result;\n\t\t\t\t});\n\n\t\t\t\tfor (const key of keys) {\n\t\t\t\t\tlet type: any = undefined;\n\t\t\t\t\tfor (const item of newItems) {\n\t\t\t\t\t\tif (key === '') {\n\t\t\t\t\t\t\tthrow new NodeOperationError(this.getNode(), 'Name of field to compare is blank');\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst value = !disableDotNotation ? get(item.json, key) : item.json[key];\n\t\t\t\t\t\tif (value === undefined && disableDotNotation && key.includes('.')) {\n\t\t\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t\t\t`'${key}' field is missing from some input items`,\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t\t\t\t\"If you're trying to use a nested field, make sure you turn off 'disable dot notation' in the node options\",\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else if (value === undefined) {\n\t\t\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t\t\t`'${key}' field is missing from some input items`,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (type !== undefined && value !== undefined && type !== typeof value) {\n\t\t\t\t\t\t\tthrow new NodeOperationError(this.getNode(), `'${key}' isn't always the same type`, {\n\t\t\t\t\t\t\t\tdescription: 'The type of this field varies between items',\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttype = typeof value;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// collect the original indexes of items to be removed\n\t\t\t\tconst removedIndexes: number[] = [];\n\t\t\t\tlet temp = newItems[0];\n\t\t\t\tfor (let index = 1; index < newItems.length; index++) {\n\t\t\t\t\tif (compareItems(newItems[index], temp, keys, disableDotNotation)) {\n\t\t\t\t\t\tremovedIndexes.push(newItems[index].json.__INDEX as unknown as number);\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttemp = newItems[index];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tlet data = items.filter((_, index) => !removedIndexes.includes(index));\n\n\t\t\t\tif (removeOtherFields) {\n\t\t\t\t\tdata = data.map((item, index) => ({\n\t\t\t\t\t\tjson: pick(item.json, ...keys),\n\t\t\t\t\t\tpairedItem: { item: index },\n\t\t\t\t\t}));\n\t\t\t\t}\n\n\t\t\t\t// return the filtered items\n\t\t\t\treturn [data];\n\t\t\t} else if (operation === 'sort') {\n\t\t\t\tlet newItems = [...items];\n\t\t\t\tconst type = this.getNodeParameter('type', 0) as string;\n\t\t\t\tconst disableDotNotation = this.getNodeParameter(\n\t\t\t\t\t'options.disableDotNotation',\n\t\t\t\t\t0,\n\t\t\t\t\tfalse,\n\t\t\t\t) as boolean;\n\n\t\t\t\tif (type === 'random') {\n\t\t\t\t\tshuffleArray(newItems);\n\t\t\t\t\treturn [newItems];\n\t\t\t\t}\n\n\t\t\t\tif (type === 'simple') {\n\t\t\t\t\tconst sortFieldsUi = this.getNodeParameter('sortFieldsUi', 0) as IDataObject;\n\t\t\t\t\tconst sortFields = sortFieldsUi.sortField as Array<{\n\t\t\t\t\t\tfieldName: string;\n\t\t\t\t\t\torder: 'ascending' | 'descending';\n\t\t\t\t\t}>;\n\n\t\t\t\t\tif (!sortFields?.length) {\n\t\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t\t'No sorting specified. Please add a field to sort by',\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (const { fieldName } of sortFields) {\n\t\t\t\t\t\tlet found = false;\n\t\t\t\t\t\tfor (const item of items) {\n\t\t\t\t\t\t\tif (!disableDotNotation) {\n\t\t\t\t\t\t\t\tif (get(item.json, fieldName) !== undefined) {\n\t\t\t\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else if (item.json.hasOwnProperty(fieldName)) {\n\t\t\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!found && disableDotNotation && fieldName.includes('.')) {\n\t\t\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t\t\t`Couldn't find the field '${fieldName}' in the input data`,\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t\t\t\t\"If you're trying to use a nested field, make sure you turn off 'disable dot notation' in the node options\",\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else if (!found) {\n\t\t\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t\t\t`Couldn't find the field '${fieldName}' in the input data`,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tconst sortFieldsWithDirection = sortFields.map((field) => ({\n\t\t\t\t\t\tname: field.fieldName,\n\t\t\t\t\t\tdir: field.order === 'ascending' ? 1 : -1,\n\t\t\t\t\t}));\n\n\t\t\t\t\tnewItems.sort((a, b) => {\n\t\t\t\t\t\tlet result = 0;\n\t\t\t\t\t\tfor (const field of sortFieldsWithDirection) {\n\t\t\t\t\t\t\tlet equal;\n\t\t\t\t\t\t\tif (!disableDotNotation) {\n\t\t\t\t\t\t\t\tconst _a =\n\t\t\t\t\t\t\t\t\ttypeof get(a.json, field.name) === 'string'\n\t\t\t\t\t\t\t\t\t\t? (get(a.json, field.name) as string).toLowerCase()\n\t\t\t\t\t\t\t\t\t\t: get(a.json, field.name);\n\t\t\t\t\t\t\t\tconst _b =\n\t\t\t\t\t\t\t\t\ttypeof get(b.json, field.name) === 'string'\n\t\t\t\t\t\t\t\t\t\t? (get(b.json, field.name) as string).toLowerCase()\n\t\t\t\t\t\t\t\t\t\t: get(b.json, field.name);\n\t\t\t\t\t\t\t\tequal = isEqual(_a, _b);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tconst _a =\n\t\t\t\t\t\t\t\t\ttypeof a.json[field.name] === 'string'\n\t\t\t\t\t\t\t\t\t\t? (a.json[field.name] as string).toLowerCase()\n\t\t\t\t\t\t\t\t\t\t: a.json[field.name];\n\t\t\t\t\t\t\t\tconst _b =\n\t\t\t\t\t\t\t\t\ttypeof b.json[field.name] === 'string'\n\t\t\t\t\t\t\t\t\t\t? (b.json[field.name] as string).toLowerCase()\n\t\t\t\t\t\t\t\t\t\t: b.json[field.name];\n\t\t\t\t\t\t\t\tequal = isEqual(_a, _b);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (!equal) {\n\t\t\t\t\t\t\t\tlet lessThan;\n\t\t\t\t\t\t\t\tif (!disableDotNotation) {\n\t\t\t\t\t\t\t\t\tconst _a =\n\t\t\t\t\t\t\t\t\t\ttypeof get(a.json, field.name) === 'string'\n\t\t\t\t\t\t\t\t\t\t\t? (get(a.json, field.name) as string).toLowerCase()\n\t\t\t\t\t\t\t\t\t\t\t: get(a.json, field.name);\n\t\t\t\t\t\t\t\t\tconst _b =\n\t\t\t\t\t\t\t\t\t\ttypeof get(b.json, field.name) === 'string'\n\t\t\t\t\t\t\t\t\t\t\t? (get(b.json, field.name) as string).toLowerCase()\n\t\t\t\t\t\t\t\t\t\t\t: get(b.json, field.name);\n\t\t\t\t\t\t\t\t\tlessThan = lt(_a, _b);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tconst _a =\n\t\t\t\t\t\t\t\t\t\ttypeof a.json[field.name] === 'string'\n\t\t\t\t\t\t\t\t\t\t\t? (a.json[field.name] as string).toLowerCase()\n\t\t\t\t\t\t\t\t\t\t\t: a.json[field.name];\n\t\t\t\t\t\t\t\t\tconst _b =\n\t\t\t\t\t\t\t\t\t\ttypeof b.json[field.name] === 'string'\n\t\t\t\t\t\t\t\t\t\t\t? (b.json[field.name] as string).toLowerCase()\n\t\t\t\t\t\t\t\t\t\t\t: b.json[field.name];\n\t\t\t\t\t\t\t\t\tlessThan = lt(_a, _b);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (lessThan) {\n\t\t\t\t\t\t\t\t\tresult = -1 * field.dir;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tresult = 1 * field.dir;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn result;\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tnewItems = sortByCode.call(this, newItems);\n\t\t\t\t}\n\t\t\t\treturn [newItems];\n\t\t\t} else if (operation === 'limit') {\n\t\t\t\tlet newItems = items;\n\t\t\t\tconst maxItems = this.getNodeParameter('maxItems', 0) as number;\n\t\t\t\tconst keep = this.getNodeParameter('keep', 0) as string;\n\n\t\t\t\tif (maxItems > items.length) {\n\t\t\t\t\treturn [newItems];\n\t\t\t\t}\n\n\t\t\t\tif (keep === 'firstItems') {\n\t\t\t\t\tnewItems = items.slice(0, maxItems);\n\t\t\t\t} else {\n\t\t\t\t\tnewItems = items.slice(items.length - maxItems, items.length);\n\t\t\t\t}\n\t\t\t\treturn [newItems];\n\t\t\t} else if (operation === 'summarize') {\n\t\t\t\treturn await summarize.execute.call(this, items);\n\t\t\t} else {\n\t\t\t\tthrow new NodeOperationError(this.getNode(), `Operation '${operation}' is not recognized`);\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new NodeOperationError(this.getNode(), `Resource '${resource}' is not recognized`);\n\t\t}\n\t}\n}\n"],"mappings":"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","names":["get","unset","set","isEmpty","isEqual","lt","pick"]}