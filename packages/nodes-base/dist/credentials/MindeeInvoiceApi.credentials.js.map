{"version":3,"sources":["../../credentials/MindeeInvoiceApi.credentials.ts"],"sourcesContent":["import type {\n\tICredentialDataDecryptedObject,\n\tICredentialType,\n\tIHttpRequestOptions,\n\tINodeProperties,\n} from 'n8n-workflow';\n\nexport class MindeeInvoiceApi implements ICredentialType {\n\tname = 'mindeeInvoiceApi';\n\n\tdisplayName = 'Mindee Invoice API';\n\n\tdocumentationUrl = 'mindee';\n\n\tproperties: INodeProperties[] = [\n\t\t{\n\t\t\tdisplayName: 'API Key',\n\t\t\tname: 'apiKey',\n\t\t\ttype: 'string',\n\t\t\ttypeOptions: { password: true },\n\t\t\tdefault: '',\n\t\t},\n\t];\n\n\tasync authenticate(\n\t\tcredentials: ICredentialDataDecryptedObject,\n\t\trequestOptions: IHttpRequestOptions,\n\t): Promise<IHttpRequestOptions> {\n\t\t// @ts-ignore\n\t\tconst url = new URL(requestOptions.url ? requestOptions.url : requestOptions.uri);\n\t\tif (url.hostname === 'api.mindee.net' && url.pathname.startsWith('/v1/')) {\n\t\t\trequestOptions.headers!.Authorization = `Token ${credentials.apiKey}`;\n\t\t} else {\n\t\t\trequestOptions.headers!['X-Inferuser-Token'] = `${credentials.apiKey}`;\n\t\t}\n\t\treturn requestOptions;\n\t}\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAOO,MAAM,iBAA4C;AAAA,EAAlD;AACN,gBAAO;AAEP,uBAAc;AAEd,4BAAmB;AAEnB,sBAAgC;AAAA,MAC/B;AAAA,QACC,aAAa;AAAA,QACb,MAAM;AAAA,QACN,MAAM;AAAA,QACN,aAAa,EAAE,UAAU,KAAK;AAAA,QAC9B,SAAS;AAAA,MACV;AAAA,IACD;AAAA;AAAA,EAEA,MAAM,aACL,aACA,gBAC+B;AAE/B,UAAM,MAAM,IAAI,IAAI,eAAe,MAAM,eAAe,MAAM,eAAe,GAAG;AAChF,QAAI,IAAI,aAAa,oBAAoB,IAAI,SAAS,WAAW,MAAM,GAAG;AACzE,qBAAe,QAAS,gBAAgB,SAAS,YAAY,MAAM;AAAA,IACpE,OAAO;AACN,qBAAe,QAAS,mBAAmB,IAAI,GAAG,YAAY,MAAM;AAAA,IACrE;AACA,WAAO;AAAA,EACR;AACD;","names":[]}