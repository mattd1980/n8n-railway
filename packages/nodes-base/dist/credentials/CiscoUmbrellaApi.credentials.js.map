{"version":3,"sources":["../../credentials/CiscoUmbrellaApi.credentials.ts"],"sourcesContent":["import type {\n\tIAuthenticateGeneric,\n\tICredentialDataDecryptedObject,\n\tICredentialTestRequest,\n\tICredentialType,\n\tIHttpRequestHelper,\n\tINodeProperties,\n} from 'n8n-workflow';\n\nexport class CiscoUmbrellaApi implements ICredentialType {\n\tname = 'ciscoUmbrellaApi';\n\n\tdisplayName = 'Cisco Umbrella API';\n\n\tdocumentationUrl = 'ciscoumbrella';\n\n\ticon = { light: 'file:icons/Cisco.svg', dark: 'file:icons/Cisco.dark.svg' } as const;\n\n\thttpRequestNode = {\n\t\tname: 'Cisco Umbrella',\n\t\tdocsUrl: 'https://developer.cisco.com/docs/cloud-security/',\n\t\tapiBaseUrl: 'https://api.umbrella.com/',\n\t};\n\n\tproperties: INodeProperties[] = [\n\t\t{\n\t\t\tdisplayName: 'Session Token',\n\t\t\tname: 'sessionToken',\n\t\t\ttype: 'hidden',\n\n\t\t\ttypeOptions: {\n\t\t\t\texpirable: true,\n\t\t\t},\n\t\t\tdefault: '',\n\t\t},\n\t\t{\n\t\t\tdisplayName: 'API Key',\n\t\t\tname: 'apiKey',\n\t\t\ttype: 'string',\n\t\t\ttypeOptions: { password: true },\n\t\t\trequired: true,\n\t\t\tdefault: '',\n\t\t},\n\t\t{\n\t\t\tdisplayName: 'Secret',\n\t\t\tname: 'secret',\n\t\t\ttype: 'string',\n\t\t\ttypeOptions: {\n\t\t\t\tpassword: true,\n\t\t\t},\n\t\t\trequired: true,\n\t\t\tdefault: '',\n\t\t},\n\t];\n\n\tasync preAuthentication(this: IHttpRequestHelper, credentials: ICredentialDataDecryptedObject) {\n\t\tconst url = 'https://api.umbrella.com';\n\t\tconst { access_token } = (await this.helpers.httpRequest({\n\t\t\tmethod: 'POST',\n\t\t\turl: `${\n\t\t\t\turl.endsWith('/') ? url.slice(0, -1) : url\n\t\t\t}/auth/v2/token?grant_type=client_credentials`,\n\t\t\tauth: {\n\t\t\t\tusername: credentials.apiKey as string,\n\t\t\t\tpassword: credentials.secret as string,\n\t\t\t},\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'x-www-form-urlencoded',\n\t\t\t},\n\t\t})) as { access_token: string };\n\t\treturn { sessionToken: access_token };\n\t}\n\n\tauthenticate: IAuthenticateGeneric = {\n\t\ttype: 'generic',\n\t\tproperties: {\n\t\t\theaders: {\n\t\t\t\tAuthorization: '=Bearer {{$credentials.sessionToken}}',\n\t\t\t},\n\t\t},\n\t};\n\n\ttest: ICredentialTestRequest = {\n\t\trequest: {\n\t\t\tbaseURL: 'https://api.umbrella.com',\n\t\t\turl: '/users',\n\t\t},\n\t};\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AASO,MAAM,iBAA4C;AAAA,EAAlD;AACN,gBAAO;AAEP,uBAAc;AAEd,4BAAmB;AAEnB,gBAAO,EAAE,OAAO,wBAAwB,MAAM,4BAA4B;AAE1E,2BAAkB;AAAA,MACjB,MAAM;AAAA,MACN,SAAS;AAAA,MACT,YAAY;AAAA,IACb;AAEA,sBAAgC;AAAA,MAC/B;AAAA,QACC,aAAa;AAAA,QACb,MAAM;AAAA,QACN,MAAM;AAAA,QAEN,aAAa;AAAA,UACZ,WAAW;AAAA,QACZ;AAAA,QACA,SAAS;AAAA,MACV;AAAA,MACA;AAAA,QACC,aAAa;AAAA,QACb,MAAM;AAAA,QACN,MAAM;AAAA,QACN,aAAa,EAAE,UAAU,KAAK;AAAA,QAC9B,UAAU;AAAA,QACV,SAAS;AAAA,MACV;AAAA,MACA;AAAA,QACC,aAAa;AAAA,QACb,MAAM;AAAA,QACN,MAAM;AAAA,QACN,aAAa;AAAA,UACZ,UAAU;AAAA,QACX;AAAA,QACA,UAAU;AAAA,QACV,SAAS;AAAA,MACV;AAAA,IACD;AAoBA,wBAAqC;AAAA,MACpC,MAAM;AAAA,MACN,YAAY;AAAA,QACX,SAAS;AAAA,UACR,eAAe;AAAA,QAChB;AAAA,MACD;AAAA,IACD;AAEA,gBAA+B;AAAA,MAC9B,SAAS;AAAA,QACR,SAAS;AAAA,QACT,KAAK;AAAA,MACN;AAAA,IACD;AAAA;AAAA,EAhCA,MAAM,kBAA4C,aAA6C;AAC9F,UAAM,MAAM;AACZ,UAAM,EAAE,aAAa,IAAK,MAAM,KAAK,QAAQ,YAAY;AAAA,MACxD,QAAQ;AAAA,MACR,KAAK,GACJ,IAAI,SAAS,GAAG,IAAI,IAAI,MAAM,GAAG,EAAE,IAAI,GACxC;AAAA,MACA,MAAM;AAAA,QACL,UAAU,YAAY;AAAA,QACtB,UAAU,YAAY;AAAA,MACvB;AAAA,MACA,SAAS;AAAA,QACR,gBAAgB;AAAA,MACjB;AAAA,IACD,CAAC;AACD,WAAO,EAAE,cAAc,aAAa;AAAA,EACrC;AAiBD;","names":[]}