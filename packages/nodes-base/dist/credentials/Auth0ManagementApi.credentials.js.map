{"version":3,"sources":["../../credentials/Auth0ManagementApi.credentials.ts"],"sourcesContent":["import type {\n\tIAuthenticateGeneric,\n\tICredentialDataDecryptedObject,\n\tICredentialTestRequest,\n\tICredentialType,\n\tIHttpRequestHelper,\n\tINodeProperties,\n} from 'n8n-workflow';\n\nexport class Auth0ManagementApi implements ICredentialType {\n\tname = 'auth0ManagementApi';\n\n\tdisplayName = 'Auth0 Management API';\n\n\tdocumentationUrl = 'auth0management';\n\n\ticon = { light: 'file:icons/Auth0.svg', dark: 'file:icons/Auth0.dark.svg' } as const;\n\n\thttpRequestNode = {\n\t\tname: 'Auth0',\n\t\tdocsUrl: 'https://auth0.com/docs/api/management/v2',\n\t\tapiBaseUrlPlaceholder: 'https://your-tenant.auth0.com/api/v2/users/',\n\t};\n\n\tproperties: INodeProperties[] = [\n\t\t{\n\t\t\tdisplayName: 'Session Token',\n\t\t\tname: 'sessionToken',\n\t\t\ttype: 'hidden',\n\t\t\ttypeOptions: {\n\t\t\t\texpirable: true,\n\t\t\t\tpassword: true,\n\t\t\t},\n\t\t\tdefault: '',\n\t\t},\n\t\t{\n\t\t\tdisplayName: 'Auth0 Domain',\n\t\t\tname: 'domain',\n\t\t\ttype: 'string',\n\t\t\trequired: true,\n\t\t\tdefault: 'your-domain.eu.auth0.com',\n\t\t},\n\t\t{\n\t\t\tdisplayName: 'Client ID',\n\t\t\tname: 'clientId',\n\t\t\ttype: 'string',\n\t\t\trequired: true,\n\t\t\tdefault: '',\n\t\t},\n\t\t{\n\t\t\tdisplayName: 'Client Secret',\n\t\t\tname: 'clientSecret',\n\t\t\ttype: 'string',\n\t\t\ttypeOptions: {\n\t\t\t\tpassword: true,\n\t\t\t},\n\t\t\trequired: true,\n\t\t\tdefault: '',\n\t\t},\n\t];\n\n\tasync preAuthentication(this: IHttpRequestHelper, credentials: ICredentialDataDecryptedObject) {\n\t\tconst { access_token } = (await this.helpers.httpRequest({\n\t\t\tmethod: 'POST',\n\t\t\turl: `https://${credentials.domain}/oauth/token`,\n\t\t\tbody: {\n\t\t\t\tclient_id: credentials.clientId,\n\t\t\t\tclient_secret: credentials.clientSecret,\n\t\t\t\taudience: `https://${credentials.domain}/api/v2/`,\n\t\t\t\tgrant_type: 'client_credentials',\n\t\t\t},\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t},\n\t\t})) as { access_token: string };\n\t\treturn { sessionToken: access_token };\n\t}\n\n\tauthenticate: IAuthenticateGeneric = {\n\t\ttype: 'generic',\n\t\tproperties: {\n\t\t\theaders: {\n\t\t\t\tAuthorization: '=Bearer {{$credentials.sessionToken}}',\n\t\t\t},\n\t\t},\n\t};\n\n\ttest: ICredentialTestRequest = {\n\t\trequest: {\n\t\t\tbaseURL: '=https://{{$credentials.domain}}',\n\t\t\turl: '/api/v2/clients',\n\t\t},\n\t};\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AASO,MAAM,mBAA8C;AAAA,EAApD;AACN,gBAAO;AAEP,uBAAc;AAEd,4BAAmB;AAEnB,gBAAO,EAAE,OAAO,wBAAwB,MAAM,4BAA4B;AAE1E,2BAAkB;AAAA,MACjB,MAAM;AAAA,MACN,SAAS;AAAA,MACT,uBAAuB;AAAA,IACxB;AAEA,sBAAgC;AAAA,MAC/B;AAAA,QACC,aAAa;AAAA,QACb,MAAM;AAAA,QACN,MAAM;AAAA,QACN,aAAa;AAAA,UACZ,WAAW;AAAA,UACX,UAAU;AAAA,QACX;AAAA,QACA,SAAS;AAAA,MACV;AAAA,MACA;AAAA,QACC,aAAa;AAAA,QACb,MAAM;AAAA,QACN,MAAM;AAAA,QACN,UAAU;AAAA,QACV,SAAS;AAAA,MACV;AAAA,MACA;AAAA,QACC,aAAa;AAAA,QACb,MAAM;AAAA,QACN,MAAM;AAAA,QACN,UAAU;AAAA,QACV,SAAS;AAAA,MACV;AAAA,MACA;AAAA,QACC,aAAa;AAAA,QACb,MAAM;AAAA,QACN,MAAM;AAAA,QACN,aAAa;AAAA,UACZ,UAAU;AAAA,QACX;AAAA,QACA,UAAU;AAAA,QACV,SAAS;AAAA,MACV;AAAA,IACD;AAmBA,wBAAqC;AAAA,MACpC,MAAM;AAAA,MACN,YAAY;AAAA,QACX,SAAS;AAAA,UACR,eAAe;AAAA,QAChB;AAAA,MACD;AAAA,IACD;AAEA,gBAA+B;AAAA,MAC9B,SAAS;AAAA,QACR,SAAS;AAAA,QACT,KAAK;AAAA,MACN;AAAA,IACD;AAAA;AAAA,EA/BA,MAAM,kBAA4C,aAA6C;AAC9F,UAAM,EAAE,aAAa,IAAK,MAAM,KAAK,QAAQ,YAAY;AAAA,MACxD,QAAQ;AAAA,MACR,KAAK,WAAW,YAAY,MAAM;AAAA,MAClC,MAAM;AAAA,QACL,WAAW,YAAY;AAAA,QACvB,eAAe,YAAY;AAAA,QAC3B,UAAU,WAAW,YAAY,MAAM;AAAA,QACvC,YAAY;AAAA,MACb;AAAA,MACA,SAAS;AAAA,QACR,gBAAgB;AAAA,MACjB;AAAA,IACD,CAAC;AACD,WAAO,EAAE,cAAc,aAAa;AAAA,EACrC;AAiBD;","names":[]}