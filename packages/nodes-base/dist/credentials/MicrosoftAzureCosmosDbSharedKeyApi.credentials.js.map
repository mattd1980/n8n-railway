{"version":3,"sources":["../../credentials/MicrosoftAzureCosmosDbSharedKeyApi.credentials.ts"],"sourcesContent":["import { createHmac } from 'crypto';\nimport type {\n\tICredentialDataDecryptedObject,\n\tICredentialType,\n\tICredentialTestRequest,\n\tIHttpRequestOptions,\n\tINodeProperties,\n\tIRequestOptions,\n} from 'n8n-workflow';\nimport { OperationalError } from 'n8n-workflow';\n\nimport {\n\tCURRENT_VERSION,\n\tHeaderConstants,\n\tRESOURCE_TYPES,\n} from '../nodes/Microsoft/AzureCosmosDb/helpers/constants';\n\nexport class MicrosoftAzureCosmosDbSharedKeyApi implements ICredentialType {\n\tname = 'microsoftAzureCosmosDbSharedKeyApi';\n\n\tdisplayName = 'Microsoft Azure Cosmos DB API';\n\n\tdocumentationUrl = 'azurecosmosdb';\n\n\tproperties: INodeProperties[] = [\n\t\t{\n\t\t\tdisplayName: 'Account',\n\t\t\tname: 'account',\n\t\t\tdefault: '',\n\t\t\tdescription: 'Account name',\n\t\t\trequired: true,\n\t\t\ttype: 'string',\n\t\t},\n\t\t{\n\t\t\tdisplayName: 'Key',\n\t\t\tname: 'key',\n\t\t\tdefault: '',\n\t\t\tdescription: 'Account key',\n\t\t\trequired: true,\n\t\t\ttype: 'string',\n\t\t\ttypeOptions: {\n\t\t\t\tpassword: true,\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tdisplayName: 'Database',\n\t\t\tname: 'database',\n\t\t\tdefault: '',\n\t\t\tdescription: 'Database name',\n\t\t\trequired: true,\n\t\t\ttype: 'string',\n\t\t},\n\t];\n\n\tasync authenticate(\n\t\tcredentials: ICredentialDataDecryptedObject,\n\t\trequestOptions: IHttpRequestOptions,\n\t): Promise<IHttpRequestOptions> {\n\t\tconst date = new Date().toUTCString();\n\n\t\trequestOptions.headers ??= {};\n\t\trequestOptions.headers = {\n\t\t\t...requestOptions.headers,\n\t\t\t'x-ms-date': date,\n\t\t\t'x-ms-version': CURRENT_VERSION,\n\t\t\t'Cache-Control': 'no-cache',\n\t\t};\n\n\t\t// HttpRequest node uses IRequestOptions.uri\n\t\tconst url = new URL(\n\t\t\t(requestOptions as IRequestOptions).uri ?? requestOptions.baseURL + requestOptions.url,\n\t\t);\n\n\t\tconst pathSegments = url.pathname.split('/').filter(Boolean);\n\n\t\tconst foundResource = RESOURCE_TYPES.map((type) => ({\n\t\t\ttype,\n\t\t\tindex: pathSegments.lastIndexOf(type),\n\t\t}))\n\t\t\t.filter(({ index }) => index !== -1)\n\t\t\t.sort((a, b) => b.index - a.index)\n\t\t\t.shift();\n\n\t\tif (!foundResource) {\n\t\t\tthrow new OperationalError('Unable to determine the resource type from the URL');\n\t\t}\n\n\t\tconst { type, index } = foundResource;\n\t\tconst resourceId =\n\t\t\tpathSegments[index + 1] !== undefined\n\t\t\t\t? `${pathSegments.slice(0, index).join('/')}/${type}/${pathSegments[index + 1]}`\n\t\t\t\t: pathSegments.slice(0, index).join('/');\n\n\t\tconst key = Buffer.from(credentials.key as string, 'base64');\n\t\tconst payload = `${(requestOptions.method ?? 'GET').toLowerCase()}\\n${type.toLowerCase()}\\n${resourceId}\\n${date.toLowerCase()}\\n\\n`;\n\t\tconst hmacSha256 = createHmac('sha256', key);\n\t\tconst signature = hmacSha256.update(payload, 'utf8').digest('base64');\n\n\t\trequestOptions.headers[HeaderConstants.AUTHORIZATION] = encodeURIComponent(\n\t\t\t`type=master&ver=1.0&sig=${signature}`,\n\t\t);\n\n\t\treturn requestOptions;\n\t}\n\n\ttest: ICredentialTestRequest = {\n\t\trequest: {\n\t\t\tbaseURL:\n\t\t\t\t'=https://{{ $credentials.account }}.documents.azure.com/dbs/{{ $credentials.database }}',\n\t\t\turl: '/colls',\n\t\t},\n\t};\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAA2B;AAS3B,0BAAiC;AAEjC,uBAIO;AAEA,MAAM,mCAA8D;AAAA,EAApE;AACN,gBAAO;AAEP,uBAAc;AAEd,4BAAmB;AAEnB,sBAAgC;AAAA,MAC/B;AAAA,QACC,aAAa;AAAA,QACb,MAAM;AAAA,QACN,SAAS;AAAA,QACT,aAAa;AAAA,QACb,UAAU;AAAA,QACV,MAAM;AAAA,MACP;AAAA,MACA;AAAA,QACC,aAAa;AAAA,QACb,MAAM;AAAA,QACN,SAAS;AAAA,QACT,aAAa;AAAA,QACb,UAAU;AAAA,QACV,MAAM;AAAA,QACN,aAAa;AAAA,UACZ,UAAU;AAAA,QACX;AAAA,MACD;AAAA,MACA;AAAA,QACC,aAAa;AAAA,QACb,MAAM;AAAA,QACN,SAAS;AAAA,QACT,aAAa;AAAA,QACb,UAAU;AAAA,QACV,MAAM;AAAA,MACP;AAAA,IACD;AAqDA,gBAA+B;AAAA,MAC9B,SAAS;AAAA,QACR,SACC;AAAA,QACD,KAAK;AAAA,MACN;AAAA,IACD;AAAA;AAAA,EAzDA,MAAM,aACL,aACA,gBAC+B;AAC/B,UAAM,QAAO,oBAAI,KAAK,GAAE,YAAY;AAEpC,mBAAe,YAAY,CAAC;AAC5B,mBAAe,UAAU;AAAA,MACxB,GAAG,eAAe;AAAA,MAClB,aAAa;AAAA,MACb,gBAAgB;AAAA,MAChB,iBAAiB;AAAA,IAClB;AAGA,UAAM,MAAM,IAAI;AAAA,MACd,eAAmC,OAAO,eAAe,UAAU,eAAe;AAAA,IACpF;AAEA,UAAM,eAAe,IAAI,SAAS,MAAM,GAAG,EAAE,OAAO,OAAO;AAE3D,UAAM,gBAAgB,gCAAe,IAAI,CAACA,WAAU;AAAA,MACnD,MAAAA;AAAA,MACA,OAAO,aAAa,YAAYA,KAAI;AAAA,IACrC,EAAE,EACA,OAAO,CAAC,EAAE,OAAAC,OAAM,MAAMA,WAAU,EAAE,EAClC,KAAK,CAAC,GAAG,MAAM,EAAE,QAAQ,EAAE,KAAK,EAChC,MAAM;AAER,QAAI,CAAC,eAAe;AACnB,YAAM,IAAI,qCAAiB,oDAAoD;AAAA,IAChF;AAEA,UAAM,EAAE,MAAM,MAAM,IAAI;AACxB,UAAM,aACL,aAAa,QAAQ,CAAC,MAAM,SACzB,GAAG,aAAa,MAAM,GAAG,KAAK,EAAE,KAAK,GAAG,CAAC,IAAI,IAAI,IAAI,aAAa,QAAQ,CAAC,CAAC,KAC5E,aAAa,MAAM,GAAG,KAAK,EAAE,KAAK,GAAG;AAEzC,UAAM,MAAM,OAAO,KAAK,YAAY,KAAe,QAAQ;AAC3D,UAAM,UAAU,IAAI,eAAe,UAAU,OAAO,YAAY,CAAC;AAAA,EAAK,KAAK,YAAY,CAAC;AAAA,EAAK,UAAU;AAAA,EAAK,KAAK,YAAY,CAAC;AAAA;AAAA;AAC9H,UAAM,iBAAa,0BAAW,UAAU,GAAG;AAC3C,UAAM,YAAY,WAAW,OAAO,SAAS,MAAM,EAAE,OAAO,QAAQ;AAEpE,mBAAe,QAAQ,iCAAgB,aAAa,IAAI;AAAA,MACvD,2BAA2B,SAAS;AAAA,IACrC;AAEA,WAAO;AAAA,EACR;AASD;","names":["type","index"]}