{"version":3,"sources":["../../credentials/SeaTableApi.credentials.ts"],"sourcesContent":["import moment from 'moment-timezone';\nimport type {\n\tICredentialTestRequest,\n\tICredentialType,\n\tINodeProperties,\n\tINodePropertyOptions,\n} from 'n8n-workflow';\n\n// Get options for timezones\nconst timezones: INodePropertyOptions[] = moment.tz\n\t.countries()\n\t.reduce((tz: INodePropertyOptions[], country: string) => {\n\t\tconst zonesForCountry = moment.tz\n\t\t\t.zonesForCountry(country)\n\t\t\t.map((zone) => ({ value: zone, name: zone }));\n\t\treturn tz.concat(zonesForCountry);\n\t}, []);\n\nexport class SeaTableApi implements ICredentialType {\n\tname = 'seaTableApi';\n\n\tdisplayName = 'SeaTable API';\n\n\tdocumentationUrl = 'seaTable';\n\n\tproperties: INodeProperties[] = [\n\t\t{\n\t\t\tdisplayName: 'Environment',\n\t\t\tname: 'environment',\n\t\t\ttype: 'options',\n\t\t\tdefault: 'cloudHosted',\n\t\t\toptions: [\n\t\t\t\t{\n\t\t\t\t\tname: 'Cloud-Hosted',\n\t\t\t\t\tvalue: 'cloudHosted',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'Self-Hosted',\n\t\t\t\t\tvalue: 'selfHosted',\n\t\t\t\t},\n\t\t\t],\n\t\t},\n\t\t{\n\t\t\tdisplayName: 'Self-Hosted Domain',\n\t\t\tname: 'domain',\n\t\t\ttype: 'string',\n\t\t\tdefault: '',\n\t\t\tplaceholder: 'https://seatable.example.com',\n\t\t\tdisplayOptions: {\n\t\t\t\tshow: {\n\t\t\t\t\tenvironment: ['selfHosted'],\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tdisplayName: 'API Token (of a Base)',\n\t\t\tname: 'token',\n\t\t\ttype: 'string',\n\t\t\tdescription:\n\t\t\t\t'The API-Token of the SeaTable base you would like to use with n8n. n8n can only connect to one base at a time.',\n\t\t\ttypeOptions: { password: true },\n\t\t\tdefault: '',\n\t\t},\n\t\t{\n\t\t\tdisplayName: 'Timezone',\n\t\t\tname: 'timezone',\n\t\t\ttype: 'options',\n\t\t\tdefault: '',\n\t\t\tdescription: \"Seatable server's timezone\",\n\t\t\toptions: [...timezones],\n\t\t},\n\t];\n\n\ttest: ICredentialTestRequest = {\n\t\trequest: {\n\t\t\tbaseURL: '={{$credentials?.domain || \"https://cloud.seatable.io\" }}',\n\t\t\turl: '/api/v2.1/dtable/app-access-token/',\n\t\t\theaders: {\n\t\t\t\tAuthorization: '={{\"Token \" + $credentials.token}}',\n\t\t\t},\n\t\t},\n\t};\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAAmB;AASnB,MAAM,YAAoC,uBAAAA,QAAO,GAC/C,UAAU,EACV,OAAO,CAAC,IAA4B,YAAoB;AACxD,QAAM,kBAAkB,uBAAAA,QAAO,GAC7B,gBAAgB,OAAO,EACvB,IAAI,CAAC,UAAU,EAAE,OAAO,MAAM,MAAM,KAAK,EAAE;AAC7C,SAAO,GAAG,OAAO,eAAe;AACjC,GAAG,CAAC,CAAC;AAEC,MAAM,YAAuC;AAAA,EAA7C;AACN,gBAAO;AAEP,uBAAc;AAEd,4BAAmB;AAEnB,sBAAgC;AAAA,MAC/B;AAAA,QACC,aAAa;AAAA,QACb,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,QACT,SAAS;AAAA,UACR;AAAA,YACC,MAAM;AAAA,YACN,OAAO;AAAA,UACR;AAAA,UACA;AAAA,YACC,MAAM;AAAA,YACN,OAAO;AAAA,UACR;AAAA,QACD;AAAA,MACD;AAAA,MACA;AAAA,QACC,aAAa;AAAA,QACb,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,QACT,aAAa;AAAA,QACb,gBAAgB;AAAA,UACf,MAAM;AAAA,YACL,aAAa,CAAC,YAAY;AAAA,UAC3B;AAAA,QACD;AAAA,MACD;AAAA,MACA;AAAA,QACC,aAAa;AAAA,QACb,MAAM;AAAA,QACN,MAAM;AAAA,QACN,aACC;AAAA,QACD,aAAa,EAAE,UAAU,KAAK;AAAA,QAC9B,SAAS;AAAA,MACV;AAAA,MACA;AAAA,QACC,aAAa;AAAA,QACb,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,QACT,aAAa;AAAA,QACb,SAAS,CAAC,GAAG,SAAS;AAAA,MACvB;AAAA,IACD;AAEA,gBAA+B;AAAA,MAC9B,SAAS;AAAA,QACR,SAAS;AAAA,QACT,KAAK;AAAA,QACL,SAAS;AAAA,UACR,eAAe;AAAA,QAChB;AAAA,MACD;AAAA,IACD;AAAA;AACD;","names":["moment"]}