"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var Mqtt_credentials_exports = {};
__export(Mqtt_credentials_exports, {
  Mqtt: () => Mqtt
});
module.exports = __toCommonJS(Mqtt_credentials_exports);
class Mqtt {
  constructor() {
    this.name = "mqtt";
    this.displayName = "MQTT";
    this.documentationUrl = "mqtt";
    this.properties = [
      {
        displayName: "Protocol",
        name: "protocol",
        type: "options",
        options: [
          {
            name: "Mqtt",
            value: "mqtt"
          },
          {
            name: "Mqtts",
            value: "mqtts"
          },
          {
            name: "Ws",
            value: "ws"
          }
        ],
        default: "mqtt"
      },
      {
        displayName: "Host",
        name: "host",
        type: "string",
        default: ""
      },
      {
        displayName: "Port",
        name: "port",
        type: "number",
        default: 1883
      },
      {
        displayName: "Username",
        name: "username",
        type: "string",
        default: ""
      },
      {
        displayName: "Password",
        name: "password",
        type: "string",
        typeOptions: {
          password: true
        },
        default: ""
      },
      {
        displayName: "Clean Session",
        name: "clean",
        type: "boolean",
        default: true,
        description: "Whether to use clean session - set to false to receive QoS 1 and 2 messages while offline"
      },
      {
        displayName: "Client ID",
        name: "clientId",
        type: "string",
        default: "",
        description: "Client ID. If left empty, one is autogenerated for you."
      },
      {
        displayName: "SSL",
        name: "ssl",
        type: "boolean",
        default: false
      },
      {
        displayName: "Passwordless",
        name: "passwordless",
        type: "boolean",
        displayOptions: {
          show: {
            ssl: [true]
          }
        },
        default: true,
        description: "Whether to use passwordless connection with certificates (SASL mechanism EXTERNAL)"
      },
      {
        displayName: "CA Certificates",
        name: "ca",
        type: "string",
        typeOptions: {
          password: true
        },
        displayOptions: {
          show: {
            ssl: [true]
          }
        },
        default: "",
        description: "SSL CA Certificates to use"
      },
      {
        displayName: "Reject Unauthorized Certificate",
        name: "rejectUnauthorized",
        type: "boolean",
        displayOptions: {
          show: {
            ssl: [true],
            passwordless: [true]
          }
        },
        default: false,
        description: "Whether to validate Certificate"
      },
      {
        displayName: "Client Certificate",
        name: "cert",
        type: "string",
        typeOptions: {
          password: true
        },
        displayOptions: {
          show: {
            ssl: [true],
            passwordless: [true]
          }
        },
        default: "",
        description: "SSL Client Certificate to use"
      },
      {
        displayName: "Client Key",
        name: "key",
        type: "string",
        typeOptions: {
          password: true
        },
        displayOptions: {
          show: {
            ssl: [true],
            passwordless: [true]
          }
        },
        default: "",
        description: "SSL Client Key to use"
      }
    ];
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Mqtt
});
//# sourceMappingURL=Mqtt.credentials.js.map