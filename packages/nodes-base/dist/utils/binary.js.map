{"version":3,"sources":["../../utils/binary.ts"],"sourcesContent":["import iconv from 'iconv-lite';\nimport get from 'lodash/get';\nimport type { IBinaryData, IDataObject, IExecuteFunctions, INodeExecutionData } from 'n8n-workflow';\nimport { NodeOperationError, BINARY_ENCODING } from 'n8n-workflow';\nimport { getDocument as readPDF, version as pdfJsVersion } from 'pdfjs-dist';\nimport type { DocumentInitParameters } from 'pdfjs-dist/types/src/display/api';\nimport type { WorkBook, WritingOptions } from 'xlsx';\nimport { utils as xlsxUtils, write as xlsxWrite } from 'xlsx';\n\nimport { flattenObject } from '@utils/utilities';\n\nexport type JsonToSpreadsheetBinaryFormat = 'csv' | 'html' | 'rtf' | 'ods' | 'xls' | 'xlsx';\n\nexport type JsonToSpreadsheetBinaryOptions = {\n\theaderRow?: boolean;\n\tcompression?: boolean;\n\tfileName?: string;\n\tsheetName?: string;\n\tdelimiter?: string;\n};\n\nexport type JsonToBinaryOptions = {\n\tfileName?: string;\n\tsourceKey?: string;\n\tencoding?: string;\n\taddBOM?: boolean;\n\tmimeType?: string;\n\tdataIsBase64?: boolean;\n\titemIndex?: number;\n\tformat?: boolean;\n};\n\ntype PdfDocument = Awaited<ReturnType<Awaited<typeof readPDF>>['promise']>;\ntype PdfPage = Awaited<ReturnType<Awaited<PdfDocument['getPage']>>>;\ntype PdfTextContent = Awaited<ReturnType<PdfPage['getTextContent']>>;\n\nexport async function convertJsonToSpreadsheetBinary(\n\tthis: IExecuteFunctions,\n\titems: INodeExecutionData[],\n\tfileFormat: JsonToSpreadsheetBinaryFormat,\n\toptions: JsonToSpreadsheetBinaryOptions,\n\tdefaultFileName = 'spreadsheet',\n): Promise<IBinaryData> {\n\tconst itemData: IDataObject[] = [];\n\tfor (let itemIndex = 0; itemIndex < items.length; itemIndex++) {\n\t\titemData.push(flattenObject(items[itemIndex].json));\n\t}\n\n\tlet sheetToJsonOptions;\n\tif (options.headerRow === false) {\n\t\tsheetToJsonOptions = { skipHeader: true };\n\t}\n\n\tconst sheet = xlsxUtils.json_to_sheet(itemData, sheetToJsonOptions);\n\n\tconst writingOptions: WritingOptions = {\n\t\tbookType: fileFormat,\n\t\tbookSST: false,\n\t\ttype: 'buffer',\n\t};\n\n\tif (fileFormat === 'csv' && options.delimiter?.length) {\n\t\twritingOptions.FS = options.delimiter ?? ',';\n\t}\n\n\tif (['xlsx', 'ods'].includes(fileFormat) && options.compression) {\n\t\twritingOptions.compression = true;\n\t}\n\n\t// Convert the data in the correct format\n\tconst sheetName = (options.sheetName as string) || 'Sheet';\n\tconst workbook: WorkBook = {\n\t\tSheetNames: [sheetName],\n\t\tSheets: {\n\t\t\t[sheetName]: sheet,\n\t\t},\n\t};\n\n\tconst buffer: Buffer = xlsxWrite(workbook, writingOptions);\n\tconst fileName =\n\t\toptions.fileName !== undefined ? options.fileName : `${defaultFileName}.${fileFormat}`;\n\tconst binaryData = await this.helpers.prepareBinaryData(buffer, fileName);\n\n\treturn binaryData;\n}\n\nexport async function createBinaryFromJson(\n\tthis: IExecuteFunctions,\n\tdata: IDataObject | IDataObject[],\n\toptions: JsonToBinaryOptions,\n): Promise<IBinaryData> {\n\tlet value;\n\tif (options.sourceKey) {\n\t\tvalue = get(data, options.sourceKey) as IDataObject;\n\t} else {\n\t\tvalue = data;\n\t}\n\n\tif (value === undefined) {\n\t\tthrow new NodeOperationError(this.getNode(), `The value in \"${options.sourceKey}\" is not set`, {\n\t\t\titemIndex: options.itemIndex || 0,\n\t\t});\n\t}\n\n\tlet buffer: Buffer;\n\tif (!options.dataIsBase64) {\n\t\tlet valueAsString = value as unknown as string;\n\n\t\tif (typeof value === 'object') {\n\t\t\toptions.mimeType = 'application/json';\n\t\t\tif (options.format) {\n\t\t\t\tvalueAsString = JSON.stringify(value, null, 2);\n\t\t\t} else {\n\t\t\t\tvalueAsString = JSON.stringify(value);\n\t\t\t}\n\t\t}\n\n\t\tbuffer = iconv.encode(valueAsString, options.encoding || 'utf8', {\n\t\t\taddBOM: options.addBOM,\n\t\t});\n\t} else {\n\t\tbuffer = Buffer.from(value as unknown as string, BINARY_ENCODING);\n\t}\n\n\tconst binaryData = await this.helpers.prepareBinaryData(\n\t\tbuffer,\n\t\toptions.fileName,\n\t\toptions.mimeType,\n\t);\n\n\tif (!binaryData.fileName) {\n\t\tconst fileExtension = binaryData.fileExtension ? `.${binaryData.fileExtension}` : '';\n\t\tbinaryData.fileName = `file${fileExtension}`;\n\t}\n\n\treturn binaryData;\n}\n\nconst parseText = (textContent: PdfTextContent) => {\n\tlet lastY = undefined;\n\tconst text = [];\n\tfor (const item of textContent.items) {\n\t\tif ('str' in item) {\n\t\t\tif (lastY == item.transform[5] || !lastY) {\n\t\t\t\ttext.push(item.str);\n\t\t\t} else {\n\t\t\t\ttext.push(`\\n${item.str}`);\n\t\t\t}\n\t\t\tlastY = item.transform[5];\n\t\t}\n\t}\n\treturn text.join('');\n};\n\nexport async function extractDataFromPDF(\n\tthis: IExecuteFunctions,\n\tbinaryPropertyName: string,\n\tpassword?: string,\n\tmaxPages?: number,\n\tjoinPages = true,\n\titemIndex = 0,\n) {\n\tconst binaryData = this.helpers.assertBinaryData(itemIndex, binaryPropertyName);\n\n\tconst params: DocumentInitParameters = { password, isEvalSupported: false };\n\n\tif (binaryData.id) {\n\t\tparams.data = await this.helpers.binaryToBuffer(\n\t\t\tawait this.helpers.getBinaryStream(binaryData.id),\n\t\t);\n\t} else {\n\t\tparams.data = Buffer.from(binaryData.data, BINARY_ENCODING).buffer;\n\t}\n\n\tconst document = await readPDF(params).promise;\n\tconst { info, metadata } = await document\n\t\t.getMetadata()\n\t\t.catch(() => ({ info: null, metadata: null }));\n\n\tconst pages = [];\n\tif (maxPages !== 0) {\n\t\tlet pagesToRead = document.numPages;\n\t\tif (maxPages && maxPages < document.numPages) {\n\t\t\tpagesToRead = maxPages;\n\t\t}\n\t\tfor (let i = 1; i <= pagesToRead; i++) {\n\t\t\tconst page = await document.getPage(i);\n\t\t\tconst text = await page.getTextContent().then(parseText);\n\t\t\tpages.push(text);\n\t\t}\n\t}\n\n\tconst text = joinPages ? pages.join('\\n\\n') : pages;\n\n\tconst returnData = {\n\t\tnumpages: document.numPages,\n\t\tnumrender: document.numPages,\n\t\tinfo,\n\t\tmetadata: metadata?.getAll(),\n\t\ttext,\n\t\tversion: pdfJsVersion,\n\t};\n\n\treturn returnData;\n}\n"],"mappings":"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","names":["xlsxUtils","xlsxWrite","get","iconv","readPDF","text","pdfJsVersion"]}