{"version":3,"sources":["../../../utils/sendAndWait/configureWaitTillDate.util.ts"],"sourcesContent":["import { ApplicationError, NodeOperationError, WAIT_INDEFINITELY } from 'n8n-workflow';\nimport type { IExecuteFunctions, IDataObject } from 'n8n-workflow';\n\nexport function configureWaitTillDate(\n\tcontext: IExecuteFunctions,\n\tlocation: 'options' | 'root' = 'options',\n) {\n\tlet waitTill = WAIT_INDEFINITELY;\n\tlet limitOptions: IDataObject = {};\n\n\tif (location === 'options') {\n\t\tlimitOptions = context.getNodeParameter('options.limitWaitTime.values', 0, {}) as {\n\t\t\tlimitType?: string;\n\t\t\tresumeAmount?: number;\n\t\t\tresumeUnit?: string;\n\t\t\tmaxDateAndTime?: string;\n\t\t};\n\t} else {\n\t\tconst limitWaitTime = context.getNodeParameter('limitWaitTime', 0, false);\n\t\tif (limitWaitTime) {\n\t\t\tlimitOptions.limitType = context.getNodeParameter('limitType', 0, 'afterTimeInterval');\n\n\t\t\tif (limitOptions.limitType === 'afterTimeInterval') {\n\t\t\t\tlimitOptions.resumeAmount = context.getNodeParameter('resumeAmount', 0, 1) as number;\n\t\t\t\tlimitOptions.resumeUnit = context.getNodeParameter('resumeUnit', 0, 'hours');\n\t\t\t} else {\n\t\t\t\tlimitOptions.maxDateAndTime = context.getNodeParameter('maxDateAndTime', 0, '');\n\t\t\t}\n\t\t}\n\t}\n\n\tif (Object.keys(limitOptions).length) {\n\t\ttry {\n\t\t\tif (limitOptions.limitType === 'afterTimeInterval') {\n\t\t\t\tlet waitAmount = limitOptions.resumeAmount as number;\n\n\t\t\t\tif (limitOptions.resumeUnit === 'minutes') {\n\t\t\t\t\twaitAmount *= 60;\n\t\t\t\t}\n\t\t\t\tif (limitOptions.resumeUnit === 'hours') {\n\t\t\t\t\twaitAmount *= 60 * 60;\n\t\t\t\t}\n\t\t\t\tif (limitOptions.resumeUnit === 'days') {\n\t\t\t\t\twaitAmount *= 60 * 60 * 24;\n\t\t\t\t}\n\n\t\t\t\twaitAmount *= 1000;\n\t\t\t\twaitTill = new Date(new Date().getTime() + waitAmount);\n\t\t\t} else {\n\t\t\t\twaitTill = new Date(limitOptions.maxDateAndTime as string);\n\t\t\t}\n\n\t\t\tif (isNaN(waitTill.getTime())) {\n\t\t\t\tthrow new ApplicationError('Invalid date format');\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tthrow new NodeOperationError(context.getNode(), 'Could not configure Limit Wait Time', {\n\t\t\t\tdescription: error.message,\n\t\t\t});\n\t\t}\n\t}\n\n\treturn waitTill;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAwE;AAGjE,SAAS,sBACf,SACA,WAA+B,WAC9B;AACD,MAAI,WAAW;AACf,MAAI,eAA4B,CAAC;AAEjC,MAAI,aAAa,WAAW;AAC3B,mBAAe,QAAQ,iBAAiB,gCAAgC,GAAG,CAAC,CAAC;AAAA,EAM9E,OAAO;AACN,UAAM,gBAAgB,QAAQ,iBAAiB,iBAAiB,GAAG,KAAK;AACxE,QAAI,eAAe;AAClB,mBAAa,YAAY,QAAQ,iBAAiB,aAAa,GAAG,mBAAmB;AAErF,UAAI,aAAa,cAAc,qBAAqB;AACnD,qBAAa,eAAe,QAAQ,iBAAiB,gBAAgB,GAAG,CAAC;AACzE,qBAAa,aAAa,QAAQ,iBAAiB,cAAc,GAAG,OAAO;AAAA,MAC5E,OAAO;AACN,qBAAa,iBAAiB,QAAQ,iBAAiB,kBAAkB,GAAG,EAAE;AAAA,MAC/E;AAAA,IACD;AAAA,EACD;AAEA,MAAI,OAAO,KAAK,YAAY,EAAE,QAAQ;AACrC,QAAI;AACH,UAAI,aAAa,cAAc,qBAAqB;AACnD,YAAI,aAAa,aAAa;AAE9B,YAAI,aAAa,eAAe,WAAW;AAC1C,wBAAc;AAAA,QACf;AACA,YAAI,aAAa,eAAe,SAAS;AACxC,wBAAc,KAAK;AAAA,QACpB;AACA,YAAI,aAAa,eAAe,QAAQ;AACvC,wBAAc,KAAK,KAAK;AAAA,QACzB;AAEA,sBAAc;AACd,mBAAW,IAAI,MAAK,oBAAI,KAAK,GAAE,QAAQ,IAAI,UAAU;AAAA,MACtD,OAAO;AACN,mBAAW,IAAI,KAAK,aAAa,cAAwB;AAAA,MAC1D;AAEA,UAAI,MAAM,SAAS,QAAQ,CAAC,GAAG;AAC9B,cAAM,IAAI,qCAAiB,qBAAqB;AAAA,MACjD;AAAA,IACD,SAAS,OAAO;AACf,YAAM,IAAI,uCAAmB,QAAQ,QAAQ,GAAG,uCAAuC;AAAA,QACtF,aAAa,MAAM;AAAA,MACpB,CAAC;AAAA,IACF;AAAA,EACD;AAEA,SAAO;AACR;","names":[]}