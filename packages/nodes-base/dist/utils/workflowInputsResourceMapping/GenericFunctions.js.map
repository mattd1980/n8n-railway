{"version":3,"sources":["../../../utils/workflowInputsResourceMapping/GenericFunctions.ts"],"sourcesContent":["import { json as generateSchemaFromExample, type SchemaObject } from 'generate-schema';\nimport type { JSONSchema7 } from 'json-schema';\nimport _ from 'lodash';\nimport type {\n\tFieldValueOption,\n\tFieldType,\n\tIWorkflowNodeContext,\n\tINodeExecutionData,\n\tIDataObject,\n\tResourceMapperField,\n\tILocalLoadOptionsFunctions,\n\tWorkflowInputsData,\n\tIExecuteFunctions,\n\tISupplyDataFunctions,\n} from 'n8n-workflow';\nimport { jsonParse, NodeOperationError, EXECUTE_WORKFLOW_TRIGGER_NODE_TYPE } from 'n8n-workflow';\n\nimport {\n\tJSON_EXAMPLE,\n\tINPUT_SOURCE,\n\tWORKFLOW_INPUTS,\n\tVALUES,\n\tTYPE_OPTIONS,\n\tPASSTHROUGH,\n} from './constants';\n\nconst SUPPORTED_TYPES = TYPE_OPTIONS.map((x) => x.value);\n\nfunction parseJsonSchema(schema: JSONSchema7): FieldValueOption[] | string {\n\tif (schema.type !== 'object') {\n\t\tif (schema.type === undefined) {\n\t\t\treturn 'Invalid JSON schema. Missing key `type` in schema';\n\t\t}\n\n\t\tif (Array.isArray(schema.type)) {\n\t\t\treturn `Invalid JSON schema type. Only object type is supported, but got an array of types: ${schema.type.join(', ')}`;\n\t\t}\n\n\t\treturn `Invalid JSON schema type. Only object type is supported, but got ${schema.type}`;\n\t}\n\n\tif (!schema?.properties) {\n\t\treturn 'Invalid JSON schema. Missing key `properties` in schema';\n\t}\n\n\tif (typeof schema.properties !== 'object') {\n\t\treturn 'Invalid JSON schema. Key `properties` is not an object';\n\t}\n\n\tconst result: FieldValueOption[] = [];\n\tfor (const [name, v] of Object.entries(schema.properties)) {\n\t\tif (typeof v !== 'object') {\n\t\t\treturn `Invalid JSON schema. Value for property '${name}' is not an object`;\n\t\t}\n\n\t\tconst type = v?.type;\n\n\t\tif (type === 'null') {\n\t\t\tresult.push({ name, type: 'any' });\n\t\t} else if (Array.isArray(type)) {\n\t\t\t// Schema allows an array of types, but we don't\n\t\t\treturn `Invalid JSON schema. Array of types for property '${name}' is not supported by n8n. Either provide a single type or use type 'any' to allow any type`;\n\t\t} else if (typeof type !== 'string') {\n\t\t\treturn `Invalid JSON schema. Unexpected non-string type ${type} for property '${name}'`;\n\t\t} else if (!SUPPORTED_TYPES.includes(type as never)) {\n\t\t\treturn `Invalid JSON schema. Unsupported type ${type} for property '${name}'. Supported types are ${JSON.stringify(SUPPORTED_TYPES, null, 1)}`;\n\t\t} else {\n\t\t\tresult.push({ name, type: type as FieldType });\n\t\t}\n\t}\n\treturn result;\n}\n\nfunction parseJsonExample(context: IWorkflowNodeContext): JSONSchema7 {\n\tconst jsonString = context.getNodeParameter(JSON_EXAMPLE, 0, '') as string;\n\tconst json = jsonParse<SchemaObject>(jsonString);\n\n\treturn generateSchemaFromExample(json) as JSONSchema7;\n}\n\nexport function getFieldEntries(context: IWorkflowNodeContext): {\n\tdataMode: WorkflowInputsData['dataMode'];\n\tfields: FieldValueOption[];\n\tsubworkflowInfo?: WorkflowInputsData['subworkflowInfo'];\n} {\n\tconst inputSource = context.getNodeParameter(INPUT_SOURCE, 0, PASSTHROUGH);\n\tlet result: FieldValueOption[] | string = 'Internal Error: Invalid input source';\n\ttry {\n\t\tif (inputSource === WORKFLOW_INPUTS) {\n\t\t\tresult = context.getNodeParameter(\n\t\t\t\t`${WORKFLOW_INPUTS}.${VALUES}`,\n\t\t\t\t0,\n\t\t\t\t[],\n\t\t\t) as FieldValueOption[];\n\t\t} else if (inputSource === JSON_EXAMPLE) {\n\t\t\tconst schema = parseJsonExample(context);\n\t\t\tresult = parseJsonSchema(schema);\n\t\t} else if (inputSource === PASSTHROUGH) {\n\t\t\tresult = [];\n\t\t}\n\t} catch (e: unknown) {\n\t\tresult =\n\t\t\te && typeof e === 'object' && 'message' in e && typeof e.message === 'string'\n\t\t\t\t? e.message\n\t\t\t\t: `Unknown error occurred: ${JSON.stringify(e)}`;\n\t}\n\n\tif (Array.isArray(result)) {\n\t\tconst dataMode = String(inputSource);\n\t\tconst workflow = context.getWorkflow();\n\t\tconst node = context.getNode();\n\t\treturn {\n\t\t\tfields: result,\n\t\t\tdataMode,\n\t\t\tsubworkflowInfo: { workflowId: workflow.id, triggerId: node.id },\n\t\t};\n\t}\n\tthrow new NodeOperationError(context.getNode(), result);\n}\n\nexport function getWorkflowInputValues(\n\tthis: IExecuteFunctions | ISupplyDataFunctions,\n): INodeExecutionData[] {\n\tconst inputData = this.getInputData();\n\n\treturn inputData.map(({ json, binary }, itemIndex) => {\n\t\tconst itemFieldValues = this.getNodeParameter(\n\t\t\t'workflowInputs.value',\n\t\t\titemIndex,\n\t\t\t{},\n\t\t) as IDataObject;\n\n\t\treturn {\n\t\t\tjson: {\n\t\t\t\t...json,\n\t\t\t\t...itemFieldValues,\n\t\t\t},\n\t\t\tindex: itemIndex,\n\t\t\tpairedItem: {\n\t\t\t\titem: itemIndex,\n\t\t\t},\n\t\t\tbinary,\n\t\t};\n\t});\n}\n\nexport function getCurrentWorkflowInputData(this: IExecuteFunctions | ISupplyDataFunctions) {\n\tconst inputData: INodeExecutionData[] = getWorkflowInputValues.call(this);\n\n\tconst schema = this.getNodeParameter('workflowInputs.schema', 0, []) as ResourceMapperField[];\n\n\tif (schema.length === 0) {\n\t\treturn inputData;\n\t} else {\n\t\tconst removedKeys = new Set(schema.filter((x) => x.removed).map((x) => x.displayName));\n\n\t\tconst filteredInputData: INodeExecutionData[] = inputData.map(({ json, binary }, index) => ({\n\t\t\tindex,\n\t\t\tpairedItem: { item: index },\n\t\t\tjson: _.pickBy(json, (_v, key) => !removedKeys.has(key)),\n\t\t\tbinary,\n\t\t}));\n\n\t\treturn filteredInputData;\n\t}\n}\n\nexport async function loadWorkflowInputMappings(\n\tthis: ILocalLoadOptionsFunctions,\n): Promise<WorkflowInputsData> {\n\tconst nodeLoadContext = await this.getWorkflowNodeContext(EXECUTE_WORKFLOW_TRIGGER_NODE_TYPE);\n\tlet fields: ResourceMapperField[] = [];\n\tlet dataMode: string = PASSTHROUGH;\n\tlet subworkflowInfo: { workflowId?: string; triggerId?: string } | undefined;\n\n\tif (nodeLoadContext) {\n\t\tconst fieldValues = getFieldEntries(nodeLoadContext);\n\t\tdataMode = fieldValues.dataMode;\n\t\tsubworkflowInfo = fieldValues.subworkflowInfo;\n\n\t\tfields = fieldValues.fields.map((currentWorkflowInput) => {\n\t\t\tconst field: ResourceMapperField = {\n\t\t\t\tid: currentWorkflowInput.name,\n\t\t\t\tdisplayName: currentWorkflowInput.name,\n\t\t\t\trequired: false,\n\t\t\t\tdefaultMatch: false,\n\t\t\t\tdisplay: true,\n\t\t\t\tcanBeUsedToMatch: true,\n\t\t\t};\n\n\t\t\tif (currentWorkflowInput.type !== 'any') {\n\t\t\t\tfield.type = currentWorkflowInput.type;\n\t\t\t}\n\n\t\t\treturn field;\n\t\t});\n\t}\n\treturn { fields, dataMode, subworkflowInfo };\n}\n"],"mappings":"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","names":["generateSchemaFromExample","_"]}