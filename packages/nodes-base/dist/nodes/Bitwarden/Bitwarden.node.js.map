{"version":3,"sources":["../../../nodes/Bitwarden/Bitwarden.node.ts"],"sourcesContent":["import isEmpty from 'lodash/isEmpty';\nimport partialRight from 'lodash/partialRight';\nimport { NodeConnectionTypes, NodeOperationError } from 'n8n-workflow';\nimport type {\n\tIExecuteFunctions,\n\tIDataObject,\n\tILoadOptionsFunctions,\n\tINodeExecutionData,\n\tINodeType,\n\tINodeTypeDescription,\n} from 'n8n-workflow';\n\nimport type { CollectionUpdateFields } from './descriptions/CollectionDescription';\nimport { collectionFields, collectionOperations } from './descriptions/CollectionDescription';\nimport { eventFields, eventOperations } from './descriptions/EventDescription';\nimport type {\n\tGroupCreationAdditionalFields,\n\tGroupUpdateFields,\n} from './descriptions/GroupDescription';\nimport { groupFields, groupOperations } from './descriptions/GroupDescription';\nimport type {\n\tMemberCreationAdditionalFields,\n\tMemberUpdateFields,\n} from './descriptions/MemberDescription';\nimport { memberFields, memberOperations } from './descriptions/MemberDescription';\nimport {\n\tbitwardenApiRequest as tokenlessBitwardenApiRequest,\n\tgetAccessToken,\n\thandleGetAll as tokenlessHandleGetAll,\n\tloadResource,\n} from './GenericFunctions';\n\nexport class Bitwarden implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'Bitwarden',\n\t\tname: 'bitwarden',\n\t\ticon: 'file:bitwarden.svg',\n\t\tgroup: ['transform'],\n\t\tversion: 1,\n\t\tsubtitle: '={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}',\n\t\tdescription: 'Consume the Bitwarden API',\n\t\tdefaults: {\n\t\t\tname: 'Bitwarden',\n\t\t},\n\t\tusableAsTool: true,\n\t\tinputs: [NodeConnectionTypes.Main],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tcredentials: [\n\t\t\t{\n\t\t\t\tname: 'bitwardenApi',\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Resource',\n\t\t\t\tname: 'resource',\n\t\t\t\ttype: 'options',\n\t\t\t\tnoDataExpression: true,\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Collection',\n\t\t\t\t\t\tvalue: 'collection',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Event',\n\t\t\t\t\t\tvalue: 'event',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Group',\n\t\t\t\t\t\tvalue: 'group',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Member',\n\t\t\t\t\t\tvalue: 'member',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'collection',\n\t\t\t},\n\t\t\t...collectionOperations,\n\t\t\t...collectionFields,\n\t\t\t...eventOperations,\n\t\t\t...eventFields,\n\t\t\t...groupOperations,\n\t\t\t...groupFields,\n\t\t\t...memberOperations,\n\t\t\t...memberFields,\n\t\t],\n\t};\n\n\tmethods = {\n\t\tloadOptions: {\n\t\t\tasync getGroups(this: ILoadOptionsFunctions) {\n\t\t\t\treturn await loadResource.call(this, 'groups');\n\t\t\t},\n\n\t\t\tasync getCollections(this: ILoadOptionsFunctions) {\n\t\t\t\treturn await loadResource.call(this, 'collections');\n\t\t\t},\n\t\t},\n\t};\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t\tconst items = this.getInputData();\n\n\t\tconst resource = this.getNodeParameter('resource', 0);\n\t\tconst operation = this.getNodeParameter('operation', 0);\n\n\t\tlet responseData;\n\t\tconst returnData: INodeExecutionData[] = [];\n\n\t\tconst token = await getAccessToken.call(this);\n\t\tconst bitwardenApiRequest = partialRight(tokenlessBitwardenApiRequest, token);\n\t\tconst handleGetAll = partialRight(tokenlessHandleGetAll, token);\n\n\t\tfor (let i = 0; i < items.length; i++) {\n\t\t\tif (resource === 'collection') {\n\t\t\t\t// *********************************************************************\n\t\t\t\t//       collection\n\t\t\t\t// *********************************************************************\n\n\t\t\t\tif (operation === 'delete') {\n\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t//       collection: delete\n\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\tconst id = this.getNodeParameter('collectionId', i);\n\t\t\t\t\tconst endpoint = `/public/collections/${id}`;\n\t\t\t\t\tresponseData = await bitwardenApiRequest.call(this, 'DELETE', endpoint, {}, {});\n\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\tthis.helpers.returnJsonArray({ success: true }),\n\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t);\n\n\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t} else if (operation === 'get') {\n\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t//        collection: get\n\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\tconst id = this.getNodeParameter('collectionId', i);\n\t\t\t\t\tconst endpoint = `/public/collections/${id}`;\n\t\t\t\t\tresponseData = await bitwardenApiRequest.call(this, 'GET', endpoint, {}, {});\n\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t);\n\n\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t} else if (operation === 'getAll') {\n\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t//       collection: getAll\n\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\tconst endpoint = '/public/collections';\n\t\t\t\t\tresponseData = await handleGetAll.call(this, i, 'GET', endpoint, {}, {});\n\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t);\n\n\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t} else if (operation === 'update') {\n\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t//       collection: update\n\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\tconst updateFields = this.getNodeParameter('updateFields', i) as CollectionUpdateFields;\n\n\t\t\t\t\tif (isEmpty(updateFields)) {\n\t\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t\t`Please enter at least one field to update for the ${resource}.`,\n\t\t\t\t\t\t\t{ itemIndex: i },\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst { groups, externalId } = updateFields;\n\n\t\t\t\t\tconst body = {} as IDataObject;\n\n\t\t\t\t\tif (groups) {\n\t\t\t\t\t\tbody.groups = groups.map((groupId) => ({\n\t\t\t\t\t\t\tid: groupId,\n\t\t\t\t\t\t\tReadOnly: false,\n\t\t\t\t\t\t}));\n\t\t\t\t\t}\n\n\t\t\t\t\tif (externalId) {\n\t\t\t\t\t\tbody.externalId = externalId;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst id = this.getNodeParameter('collectionId', i);\n\t\t\t\t\tconst endpoint = `/public/collections/${id}`;\n\t\t\t\t\tresponseData = await bitwardenApiRequest.call(this, 'PUT', endpoint, {}, body);\n\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t);\n\n\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t}\n\t\t\t} else if (resource === 'event') {\n\t\t\t\t// *********************************************************************\n\t\t\t\t//       event\n\t\t\t\t// *********************************************************************\n\n\t\t\t\tif (operation === 'getAll') {\n\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t//         event: getAll\n\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\tconst filters = this.getNodeParameter('filters', i);\n\t\t\t\t\tconst qs = isEmpty(filters) ? {} : filters;\n\t\t\t\t\tconst endpoint = '/public/events';\n\t\t\t\t\tresponseData = await handleGetAll.call(this, i, 'GET', endpoint, qs, {});\n\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t);\n\n\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t}\n\t\t\t} else if (resource === 'group') {\n\t\t\t\t// *********************************************************************\n\t\t\t\t//       group\n\t\t\t\t// *********************************************************************\n\n\t\t\t\tif (operation === 'create') {\n\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t//       group: create\n\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\tconst body = {\n\t\t\t\t\t\tname: this.getNodeParameter('name', i),\n\t\t\t\t\t\tAccessAll: this.getNodeParameter('accessAll', i),\n\t\t\t\t\t} as IDataObject;\n\n\t\t\t\t\tconst { collections, externalId } = this.getNodeParameter(\n\t\t\t\t\t\t'additionalFields',\n\t\t\t\t\t\ti,\n\t\t\t\t\t) as GroupCreationAdditionalFields;\n\n\t\t\t\t\tif (collections) {\n\t\t\t\t\t\tbody.collections = collections.map((collectionId) => ({\n\t\t\t\t\t\t\tid: collectionId,\n\t\t\t\t\t\t\tReadOnly: false,\n\t\t\t\t\t\t}));\n\t\t\t\t\t}\n\n\t\t\t\t\tif (externalId) {\n\t\t\t\t\t\tbody.externalId = externalId;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst endpoint = '/public/groups';\n\t\t\t\t\tresponseData = await bitwardenApiRequest.call(this, 'POST', endpoint, {}, body);\n\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t);\n\n\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t} else if (operation === 'delete') {\n\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t//       group: delete\n\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\tconst id = this.getNodeParameter('groupId', i);\n\t\t\t\t\tconst endpoint = `/public/groups/${id}`;\n\t\t\t\t\tresponseData = await bitwardenApiRequest.call(this, 'DELETE', endpoint, {}, {});\n\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\tthis.helpers.returnJsonArray({ success: true }),\n\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t);\n\n\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t} else if (operation === 'get') {\n\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t//        group: get\n\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\tconst id = this.getNodeParameter('groupId', i);\n\t\t\t\t\tconst endpoint = `/public/groups/${id}`;\n\t\t\t\t\tresponseData = await bitwardenApiRequest.call(this, 'GET', endpoint, {}, {});\n\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t);\n\n\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t} else if (operation === 'getAll') {\n\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t//       group: getAll\n\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\tconst endpoint = '/public/groups';\n\t\t\t\t\tresponseData = await handleGetAll.call(this, i, 'GET', endpoint, {}, {});\n\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t);\n\n\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t} else if (operation === 'getMembers') {\n\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t//       group: getMembers\n\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\tconst id = this.getNodeParameter('groupId', i);\n\t\t\t\t\tconst endpoint = `/public/groups/${id}/member-ids`;\n\t\t\t\t\tresponseData = await bitwardenApiRequest.call(this, 'GET', endpoint, {}, {});\n\t\t\t\t\tresponseData = responseData.map((memberId: string) => ({ memberId }));\n\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t);\n\n\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t} else if (operation === 'update') {\n\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t//       group: update\n\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\tconst groupId = this.getNodeParameter('groupId', i);\n\n\t\t\t\t\tconst updateFields = this.getNodeParameter('updateFields', i) as GroupUpdateFields;\n\n\t\t\t\t\tif (isEmpty(updateFields)) {\n\t\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t\t`Please enter at least one field to update for the ${resource}.`,\n\t\t\t\t\t\t\t{ itemIndex: i },\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\t// set defaults for `name` and `accessAll`, required by Bitwarden but optional in n8n\n\n\t\t\t\t\tlet { name, accessAll } = updateFields;\n\n\t\t\t\t\tif (name === undefined) {\n\t\t\t\t\t\tresponseData = (await bitwardenApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t`/public/groups/${groupId}`,\n\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t)) as { name: string };\n\t\t\t\t\t\tname = responseData.name;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (accessAll === undefined) {\n\t\t\t\t\t\taccessAll = false;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst body = {\n\t\t\t\t\t\tname,\n\t\t\t\t\t\tAccessAll: accessAll,\n\t\t\t\t\t} as IDataObject;\n\n\t\t\t\t\tconst { collections, externalId } = updateFields;\n\n\t\t\t\t\tif (collections) {\n\t\t\t\t\t\tbody.collections = collections.map((collectionId) => ({\n\t\t\t\t\t\t\tid: collectionId,\n\t\t\t\t\t\t\tReadOnly: false,\n\t\t\t\t\t\t}));\n\t\t\t\t\t}\n\n\t\t\t\t\tif (externalId) {\n\t\t\t\t\t\tbody.externalId = externalId;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst endpoint = `/public/groups/${groupId}`;\n\t\t\t\t\tresponseData = await bitwardenApiRequest.call(this, 'PUT', endpoint, {}, body);\n\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t);\n\n\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t} else if (operation === 'updateMembers') {\n\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t//       group: updateMembers\n\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\tconst memberIds = this.getNodeParameter('memberIds', i) as string;\n\n\t\t\t\t\tconst body = {\n\t\t\t\t\t\tmemberIds: memberIds.includes(',') ? memberIds.split(',') : [memberIds],\n\t\t\t\t\t};\n\n\t\t\t\t\tconst groupId = this.getNodeParameter('groupId', i);\n\t\t\t\t\tconst endpoint = `/public/groups/${groupId}/member-ids`;\n\t\t\t\t\tresponseData = await bitwardenApiRequest.call(this, 'PUT', endpoint, {}, body);\n\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\tthis.helpers.returnJsonArray({ success: true }),\n\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t);\n\n\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t}\n\t\t\t} else if (resource === 'member') {\n\t\t\t\t// *********************************************************************\n\t\t\t\t//       member\n\t\t\t\t// *********************************************************************\n\n\t\t\t\tif (operation === 'create') {\n\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t//       member: create\n\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\tconst body = {\n\t\t\t\t\t\temail: this.getNodeParameter('email', i),\n\t\t\t\t\t\ttype: this.getNodeParameter('type', i),\n\t\t\t\t\t\tAccessAll: this.getNodeParameter('accessAll', i),\n\t\t\t\t\t} as IDataObject;\n\n\t\t\t\t\tconst { collections, externalId } = this.getNodeParameter(\n\t\t\t\t\t\t'additionalFields',\n\t\t\t\t\t\ti,\n\t\t\t\t\t) as MemberCreationAdditionalFields;\n\n\t\t\t\t\tif (collections) {\n\t\t\t\t\t\tbody.collections = collections.map((collectionId) => ({\n\t\t\t\t\t\t\tid: collectionId,\n\t\t\t\t\t\t\tReadOnly: false,\n\t\t\t\t\t\t}));\n\t\t\t\t\t}\n\n\t\t\t\t\tif (externalId) {\n\t\t\t\t\t\tbody.externalId = externalId;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst endpoint = '/public/members/';\n\t\t\t\t\tresponseData = await bitwardenApiRequest.call(this, 'POST', endpoint, {}, body);\n\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t);\n\n\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t} else if (operation === 'delete') {\n\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t//       member: delete\n\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\tconst id = this.getNodeParameter('memberId', i);\n\t\t\t\t\tconst endpoint = `/public/members/${id}`;\n\t\t\t\t\tresponseData = await bitwardenApiRequest.call(this, 'DELETE', endpoint, {}, {});\n\t\t\t\t\tresponseData = { success: true };\n\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData),\n\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t);\n\n\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t} else if (operation === 'get') {\n\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t//        member: get\n\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\tconst id = this.getNodeParameter('memberId', i);\n\t\t\t\t\tconst endpoint = `/public/members/${id}`;\n\t\t\t\t\tresponseData = await bitwardenApiRequest.call(this, 'GET', endpoint, {}, {});\n\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t);\n\n\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t} else if (operation === 'getAll') {\n\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t//       member: getAll\n\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\tconst endpoint = '/public/members';\n\t\t\t\t\tresponseData = await handleGetAll.call(this, i, 'GET', endpoint, {}, {});\n\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t);\n\n\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t} else if (operation === 'getGroups') {\n\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t//       member: getGroups\n\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\tconst id = this.getNodeParameter('memberId', i);\n\t\t\t\t\tconst endpoint = `/public/members/${id}/group-ids`;\n\t\t\t\t\tresponseData = await bitwardenApiRequest.call(this, 'GET', endpoint, {}, {});\n\t\t\t\t\tresponseData = responseData.map((groupId: string) => ({ groupId }));\n\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t);\n\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t} else if (operation === 'update') {\n\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t//       member: update\n\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\tconst body = {} as IDataObject;\n\n\t\t\t\t\tconst updateFields = this.getNodeParameter('updateFields', i) as MemberUpdateFields;\n\n\t\t\t\t\tif (isEmpty(updateFields)) {\n\t\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t\t`Please enter at least one field to update for the ${resource}.`,\n\t\t\t\t\t\t\t{ itemIndex: i },\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst { accessAll, collections, externalId, type } = updateFields;\n\n\t\t\t\t\tif (accessAll !== undefined) {\n\t\t\t\t\t\tbody.AccessAll = accessAll;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (collections) {\n\t\t\t\t\t\tbody.collections = collections.map((collectionId) => ({\n\t\t\t\t\t\t\tid: collectionId,\n\t\t\t\t\t\t\tReadOnly: false,\n\t\t\t\t\t\t}));\n\t\t\t\t\t}\n\n\t\t\t\t\tif (externalId) {\n\t\t\t\t\t\tbody.externalId = externalId;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (type !== undefined) {\n\t\t\t\t\t\tbody.Type = type;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst id = this.getNodeParameter('memberId', i);\n\t\t\t\t\tconst endpoint = `/public/members/${id}`;\n\t\t\t\t\tresponseData = await bitwardenApiRequest.call(this, 'PUT', endpoint, {}, body);\n\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t);\n\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t} else if (operation === 'updateGroups') {\n\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t//       member: updateGroups\n\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\tconst groupIds = this.getNodeParameter('groupIds', i) as string;\n\n\t\t\t\t\tconst body = {\n\t\t\t\t\t\tgroupIds: groupIds.includes(',') ? groupIds.split(',') : [groupIds],\n\t\t\t\t\t};\n\n\t\t\t\t\tconst memberId = this.getNodeParameter('memberId', i);\n\t\t\t\t\tconst endpoint = `/public/members/${memberId}/group-ids`;\n\t\t\t\t\tresponseData = await bitwardenApiRequest.call(this, 'PUT', endpoint, {}, body);\n\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\tthis.helpers.returnJsonArray({ success: true }),\n\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t);\n\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn [returnData];\n\t}\n}\n"],"mappings":"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","names":["partialRight","tokenlessBitwardenApiRequest","tokenlessHandleGetAll","isEmpty"]}