{"version":3,"sources":["../../../nodes/Raindrop/Raindrop.node.ts"],"sourcesContent":["import isEmpty from 'lodash/isEmpty';\nimport omit from 'lodash/omit';\nimport type {\n\tIExecuteFunctions,\n\tIDataObject,\n\tILoadOptionsFunctions,\n\tINodeExecutionData,\n\tINodeType,\n\tINodeTypeDescription,\n} from 'n8n-workflow';\nimport { NodeConnectionTypes, NodeOperationError } from 'n8n-workflow';\n\nimport {\n\tbookmarkFields,\n\tbookmarkOperations,\n\tcollectionFields,\n\tcollectionOperations,\n\ttagFields,\n\ttagOperations,\n\tuserFields,\n\tuserOperations,\n} from './descriptions';\nimport { raindropApiRequest } from './GenericFunctions';\n\nexport class Raindrop implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'Raindrop',\n\t\tname: 'raindrop',\n\t\ticon: 'file:raindrop.svg',\n\t\tgroup: ['transform'],\n\t\tversion: 1,\n\t\tsubtitle: '={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}',\n\t\tdescription: 'Consume the Raindrop API',\n\t\tdefaults: {\n\t\t\tname: 'Raindrop',\n\t\t},\n\t\tusableAsTool: true,\n\t\tinputs: [NodeConnectionTypes.Main],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tcredentials: [\n\t\t\t{\n\t\t\t\tname: 'raindropOAuth2Api',\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Resource',\n\t\t\t\tname: 'resource',\n\t\t\t\ttype: 'options',\n\t\t\t\tnoDataExpression: true,\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Bookmark',\n\t\t\t\t\t\tvalue: 'bookmark',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Collection',\n\t\t\t\t\t\tvalue: 'collection',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Tag',\n\t\t\t\t\t\tvalue: 'tag',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'User',\n\t\t\t\t\t\tvalue: 'user',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'collection',\n\t\t\t},\n\t\t\t...bookmarkOperations,\n\t\t\t...bookmarkFields,\n\t\t\t...collectionOperations,\n\t\t\t...collectionFields,\n\t\t\t...tagOperations,\n\t\t\t...tagFields,\n\t\t\t...userOperations,\n\t\t\t...userFields,\n\t\t],\n\t};\n\n\tmethods = {\n\t\tloadOptions: {\n\t\t\tasync getCollections(this: ILoadOptionsFunctions) {\n\t\t\t\tconst responseData = await raindropApiRequest.call(this, 'GET', '/collections', {}, {});\n\t\t\t\treturn responseData.items.map((item: { title: string; _id: string }) => ({\n\t\t\t\t\tname: item.title,\n\t\t\t\t\tvalue: item._id,\n\t\t\t\t}));\n\t\t\t},\n\t\t},\n\t};\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t\tconst items = this.getInputData();\n\n\t\tconst resource = this.getNodeParameter('resource', 0);\n\t\tconst operation = this.getNodeParameter('operation', 0);\n\n\t\tlet responseData;\n\t\tconst returnData: IDataObject[] = [];\n\n\t\tfor (let i = 0; i < items.length; i++) {\n\t\t\ttry {\n\t\t\t\tif (resource === 'bookmark') {\n\t\t\t\t\t// *********************************************************************\n\t\t\t\t\t//                              bookmark\n\t\t\t\t\t// *********************************************************************\n\n\t\t\t\t\t// https://developer.raindrop.io/v1/raindrops\n\n\t\t\t\t\tif (operation === 'create') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//         bookmark: create\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\tconst body: IDataObject = {\n\t\t\t\t\t\t\tlink: this.getNodeParameter('link', i),\n\t\t\t\t\t\t\tcollection: {\n\t\t\t\t\t\t\t\t$id: this.getNodeParameter('collectionId', i),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i);\n\n\t\t\t\t\t\tif (!isEmpty(additionalFields)) {\n\t\t\t\t\t\t\tObject.assign(body, additionalFields);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (additionalFields.pleaseParse === true) {\n\t\t\t\t\t\t\tbody.pleaseParse = {};\n\t\t\t\t\t\t\tdelete additionalFields.pleaseParse;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (additionalFields.tags) {\n\t\t\t\t\t\t\tbody.tags = (additionalFields.tags as string).split(',').map((tag) => tag.trim());\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst endpoint = '/raindrop';\n\t\t\t\t\t\tresponseData = await raindropApiRequest.call(this, 'POST', endpoint, {}, body);\n\t\t\t\t\t\tresponseData = responseData.item;\n\t\t\t\t\t} else if (operation === 'delete') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//         bookmark: delete\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\tconst bookmarkId = this.getNodeParameter('bookmarkId', i);\n\t\t\t\t\t\tconst endpoint = `/raindrop/${bookmarkId}`;\n\t\t\t\t\t\tresponseData = await raindropApiRequest.call(this, 'DELETE', endpoint, {}, {});\n\t\t\t\t\t} else if (operation === 'get') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//         bookmark: get\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\tconst bookmarkId = this.getNodeParameter('bookmarkId', i);\n\t\t\t\t\t\tconst endpoint = `/raindrop/${bookmarkId}`;\n\t\t\t\t\t\tresponseData = await raindropApiRequest.call(this, 'GET', endpoint, {}, {});\n\t\t\t\t\t\tresponseData = responseData.item;\n\t\t\t\t\t} else if (operation === 'getAll') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//         bookmark: getAll\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', i);\n\n\t\t\t\t\t\tconst collectionId = this.getNodeParameter('collectionId', i);\n\t\t\t\t\t\tconst endpoint = `/raindrops/${collectionId}`;\n\t\t\t\t\t\tresponseData = await raindropApiRequest.call(this, 'GET', endpoint, {}, {});\n\t\t\t\t\t\tresponseData = responseData.items;\n\n\t\t\t\t\t\tif (!returnAll) {\n\t\t\t\t\t\t\tconst limit = this.getNodeParameter('limit', 0);\n\t\t\t\t\t\t\tresponseData = responseData.slice(0, limit);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (operation === 'update') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//         bookmark: update\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\tconst bookmarkId = this.getNodeParameter('bookmarkId', i);\n\n\t\t\t\t\t\tconst body = {} as IDataObject;\n\n\t\t\t\t\t\tconst updateFields = this.getNodeParameter('updateFields', i);\n\n\t\t\t\t\t\tif (isEmpty(updateFields)) {\n\t\t\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t\t\t`Please enter at least one field to update for the ${resource}.`,\n\t\t\t\t\t\t\t\t{ itemIndex: i },\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tObject.assign(body, updateFields);\n\n\t\t\t\t\t\tif (updateFields.collectionId) {\n\t\t\t\t\t\t\tbody.collection = {\n\t\t\t\t\t\t\t\t$id: updateFields.collectionId,\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tdelete updateFields.collectionId;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (updateFields.pleaseParse === true) {\n\t\t\t\t\t\t\tbody.pleaseParse = {};\n\t\t\t\t\t\t\tdelete updateFields.pleaseParse;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (updateFields.tags) {\n\t\t\t\t\t\t\tbody.tags = (updateFields.tags as string).split(',').map((tag) => tag.trim());\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst endpoint = `/raindrop/${bookmarkId}`;\n\t\t\t\t\t\tresponseData = await raindropApiRequest.call(this, 'PUT', endpoint, {}, body);\n\t\t\t\t\t\tresponseData = responseData.item;\n\t\t\t\t\t}\n\t\t\t\t} else if (resource === 'collection') {\n\t\t\t\t\t// *********************************************************************\n\t\t\t\t\t//                             collection\n\t\t\t\t\t// *********************************************************************\n\n\t\t\t\t\t// https://developer.raindrop.io/v1/collections/methods\n\n\t\t\t\t\tif (operation === 'create') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//       collection: create\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\tconst body = {\n\t\t\t\t\t\t\ttitle: this.getNodeParameter('title', i),\n\t\t\t\t\t\t} as IDataObject;\n\n\t\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i);\n\n\t\t\t\t\t\tif (!isEmpty(additionalFields)) {\n\t\t\t\t\t\t\tObject.assign(body, additionalFields);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (additionalFields.cover) {\n\t\t\t\t\t\t\tbody.cover = [body.cover];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (additionalFields.parentId) {\n\t\t\t\t\t\t\tbody['parent.$id'] = parseInt(additionalFields.parentId as string, 10);\n\t\t\t\t\t\t\tdelete additionalFields.parentId;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await raindropApiRequest.call(this, 'POST', '/collection', {}, body);\n\t\t\t\t\t\tresponseData = responseData.item;\n\t\t\t\t\t} else if (operation === 'delete') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//        collection: delete\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\tconst collectionId = this.getNodeParameter('collectionId', i);\n\t\t\t\t\t\tconst endpoint = `/collection/${collectionId}`;\n\t\t\t\t\t\tresponseData = await raindropApiRequest.call(this, 'DELETE', endpoint, {}, {});\n\t\t\t\t\t} else if (operation === 'get') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//        collection: get\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\tconst collectionId = this.getNodeParameter('collectionId', i);\n\t\t\t\t\t\tconst endpoint = `/collection/${collectionId}`;\n\t\t\t\t\t\tresponseData = await raindropApiRequest.call(this, 'GET', endpoint, {}, {});\n\t\t\t\t\t\tresponseData = responseData.item;\n\t\t\t\t\t} else if (operation === 'getAll') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//        collection: getAll\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', 0);\n\n\t\t\t\t\t\tconst endpoint =\n\t\t\t\t\t\t\tthis.getNodeParameter('type', i) === 'parent'\n\t\t\t\t\t\t\t\t? '/collections'\n\t\t\t\t\t\t\t\t: '/collections/childrens';\n\n\t\t\t\t\t\tresponseData = await raindropApiRequest.call(this, 'GET', endpoint, {}, {});\n\t\t\t\t\t\tresponseData = responseData.items;\n\n\t\t\t\t\t\tif (!returnAll) {\n\t\t\t\t\t\t\tconst limit = this.getNodeParameter('limit', 0);\n\t\t\t\t\t\t\tresponseData = responseData.slice(0, limit);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (operation === 'update') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//        collection: update\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\tconst collectionId = this.getNodeParameter('collectionId', i);\n\n\t\t\t\t\t\tconst body = {} as IDataObject;\n\n\t\t\t\t\t\tconst updateFields = this.getNodeParameter('updateFields', i);\n\n\t\t\t\t\t\tif (isEmpty(updateFields)) {\n\t\t\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t\t\t`Please enter at least one field to update for the ${resource}.`,\n\t\t\t\t\t\t\t\t{ itemIndex: i },\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (updateFields.parentId) {\n\t\t\t\t\t\t\tbody['parent.$id'] = parseInt(updateFields.parentId as string, 10);\n\t\t\t\t\t\t\tdelete updateFields.parentId;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tObject.assign(body, omit(updateFields, 'binaryPropertyName'));\n\n\t\t\t\t\t\tconst endpoint = `/collection/${collectionId}`;\n\t\t\t\t\t\tresponseData = await raindropApiRequest.call(this, 'PUT', endpoint, {}, body);\n\t\t\t\t\t\tresponseData = responseData.item;\n\n\t\t\t\t\t\t// cover-specific endpoint\n\n\t\t\t\t\t\tif (updateFields.cover) {\n\t\t\t\t\t\t\tconst binaryPropertyName = updateFields.cover as string;\n\t\t\t\t\t\t\tconst binaryData = this.helpers.assertBinaryData(i, binaryPropertyName);\n\t\t\t\t\t\t\tconst dataBuffer = await this.helpers.getBinaryDataBuffer(i, binaryPropertyName);\n\n\t\t\t\t\t\t\tconst formData = {\n\t\t\t\t\t\t\t\tcover: {\n\t\t\t\t\t\t\t\t\tvalue: dataBuffer,\n\t\t\t\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\t\t\t\tfilename: binaryData.fileName,\n\t\t\t\t\t\t\t\t\t\tcontentType: binaryData.mimeType,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\tconst requestEndpoint = `/collection/${collectionId}/cover`;\n\t\t\t\t\t\t\tresponseData = await raindropApiRequest.call(\n\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t'PUT',\n\t\t\t\t\t\t\t\trequestEndpoint,\n\t\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t\t{ 'Content-Type': 'multipart/form-data', formData },\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tresponseData = responseData.item;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (resource === 'user') {\n\t\t\t\t\t// *********************************************************************\n\t\t\t\t\t//                                user\n\t\t\t\t\t// *********************************************************************\n\n\t\t\t\t\t// https://developer.raindrop.io/v1/user\n\n\t\t\t\t\tif (operation === 'get') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//           user: get\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\tconst self = this.getNodeParameter('self', i);\n\t\t\t\t\t\tlet endpoint = '/user';\n\n\t\t\t\t\t\tif (self === false) {\n\t\t\t\t\t\t\tconst userId = this.getNodeParameter('userId', i);\n\t\t\t\t\t\t\tendpoint += `/${userId}`;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await raindropApiRequest.call(this, 'GET', endpoint, {}, {});\n\t\t\t\t\t\tresponseData = responseData.user;\n\t\t\t\t\t}\n\t\t\t\t} else if (resource === 'tag') {\n\t\t\t\t\t// *********************************************************************\n\t\t\t\t\t//                              tag\n\t\t\t\t\t// *********************************************************************\n\n\t\t\t\t\t// https://developer.raindrop.io/v1/tags\n\n\t\t\t\t\tif (operation === 'delete') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//           tag: delete\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\tlet endpoint = '/tags';\n\n\t\t\t\t\t\tconst body: IDataObject = {\n\t\t\t\t\t\t\ttags: (this.getNodeParameter('tags', i) as string).split(','),\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i);\n\n\t\t\t\t\t\tif (additionalFields.collectionId) {\n\t\t\t\t\t\t\tendpoint += `/${additionalFields.collectionId}`;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await raindropApiRequest.call(this, 'DELETE', endpoint, {}, body);\n\t\t\t\t\t} else if (operation === 'getAll') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//           tag: getAll\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\tlet endpoint = '/tags';\n\n\t\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', i);\n\n\t\t\t\t\t\tconst filter = this.getNodeParameter('filters', i);\n\n\t\t\t\t\t\tif (filter.collectionId) {\n\t\t\t\t\t\t\tendpoint += `/${filter.collectionId}`;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await raindropApiRequest.call(this, 'GET', endpoint, {}, {});\n\t\t\t\t\t\tresponseData = responseData.items;\n\n\t\t\t\t\t\tif (!returnAll) {\n\t\t\t\t\t\t\tconst limit = this.getNodeParameter('limit', 0);\n\t\t\t\t\t\t\tresponseData = responseData.slice(0, limit);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tArray.isArray(responseData)\n\t\t\t\t\t? returnData.push(...(responseData as IDataObject[]))\n\t\t\t\t\t: returnData.push(responseData as IDataObject);\n\t\t\t} catch (error) {\n\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\treturnData.push({ error: error.message });\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\n\t\treturn [this.helpers.returnJsonArray(returnData)];\n\t}\n}\n"],"mappings":"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","names":["isEmpty","omit"]}