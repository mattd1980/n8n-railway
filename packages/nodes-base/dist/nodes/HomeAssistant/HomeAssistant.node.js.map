{"version":3,"sources":["../../../nodes/HomeAssistant/HomeAssistant.node.ts"],"sourcesContent":["import {\n\ttype IExecuteFunctions,\n\ttype ICredentialsDecrypted,\n\ttype ICredentialTestFunctions,\n\ttype IDataObject,\n\ttype ILoadOptionsFunctions,\n\ttype INodeCredentialTestResult,\n\ttype INodeExecutionData,\n\ttype INodePropertyOptions,\n\ttype INodeType,\n\ttype INodeTypeDescription,\n\tNodeConnectionTypes,\n} from 'n8n-workflow';\n\nimport { cameraProxyFields, cameraProxyOperations } from './CameraProxyDescription';\nimport { configOperations } from './ConfigDescription';\nimport { eventFields, eventOperations } from './EventDescription';\nimport {\n\tgetHomeAssistantEntities,\n\tgetHomeAssistantServices,\n\thomeAssistantApiRequest,\n} from './GenericFunctions';\nimport { historyFields, historyOperations } from './HistoryDescription';\nimport { logFields, logOperations } from './LogDescription';\nimport { serviceFields, serviceOperations } from './ServiceDescription';\nimport { stateFields, stateOperations } from './StateDescription';\nimport { templateFields, templateOperations } from './TemplateDescription';\n\nexport class HomeAssistant implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'Home Assistant',\n\t\tname: 'homeAssistant',\n\t\ticon: 'file:homeAssistant.svg',\n\t\tgroup: ['output'],\n\t\tversion: 1,\n\t\tsubtitle: '={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}',\n\t\tdescription: 'Consume Home Assistant API',\n\t\tdefaults: {\n\t\t\tname: 'Home Assistant',\n\t\t},\n\t\tusableAsTool: true,\n\t\tinputs: [NodeConnectionTypes.Main],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tcredentials: [\n\t\t\t{\n\t\t\t\tname: 'homeAssistantApi',\n\t\t\t\trequired: true,\n\t\t\t\ttestedBy: 'homeAssistantApiTest',\n\t\t\t},\n\t\t],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Resource',\n\t\t\t\tname: 'resource',\n\t\t\t\ttype: 'options',\n\t\t\t\tnoDataExpression: true,\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Camera Proxy',\n\t\t\t\t\t\tvalue: 'cameraProxy',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Config',\n\t\t\t\t\t\tvalue: 'config',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Event',\n\t\t\t\t\t\tvalue: 'event',\n\t\t\t\t\t},\n\t\t\t\t\t// {\n\t\t\t\t\t// \tname: 'History',\n\t\t\t\t\t// \tvalue: 'history',\n\t\t\t\t\t// },\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Log',\n\t\t\t\t\t\tvalue: 'log',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Service',\n\t\t\t\t\t\tvalue: 'service',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'State',\n\t\t\t\t\t\tvalue: 'state',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Template',\n\t\t\t\t\t\tvalue: 'template',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'config',\n\t\t\t},\n\t\t\t...cameraProxyOperations,\n\t\t\t...cameraProxyFields,\n\t\t\t...configOperations,\n\t\t\t...eventOperations,\n\t\t\t...eventFields,\n\t\t\t...historyOperations,\n\t\t\t...historyFields,\n\t\t\t...logOperations,\n\t\t\t...logFields,\n\t\t\t...serviceOperations,\n\t\t\t...serviceFields,\n\t\t\t...stateOperations,\n\t\t\t...stateFields,\n\t\t\t...templateOperations,\n\t\t\t...templateFields,\n\t\t],\n\t};\n\n\tmethods = {\n\t\tcredentialTest: {\n\t\t\tasync homeAssistantApiTest(\n\t\t\t\tthis: ICredentialTestFunctions,\n\t\t\t\tcredential: ICredentialsDecrypted,\n\t\t\t): Promise<INodeCredentialTestResult> {\n\t\t\t\tconst credentials = credential.data;\n\t\t\t\tconst options = {\n\t\t\t\t\tmethod: 'GET',\n\t\t\t\t\theaders: {\n\t\t\t\t\t\tAuthorization: `Bearer ${credentials!.accessToken}`,\n\t\t\t\t\t},\n\t\t\t\t\turi: `${credentials!.ssl === true ? 'https' : 'http'}://${credentials!.host}:${\n\t\t\t\t\t\tcredentials!.port || '8123'\n\t\t\t\t\t}/api/`,\n\t\t\t\t\tjson: true,\n\t\t\t\t\ttimeout: 5000,\n\t\t\t\t};\n\t\t\t\ttry {\n\t\t\t\t\tconst response = await this.helpers.request(options);\n\t\t\t\t\tif (!response.message) {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tstatus: 'Error',\n\t\t\t\t\t\t\tmessage: `Token is not valid: ${response.error}`,\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tstatus: 'Error',\n\t\t\t\t\t\tmessage: `${\n\t\t\t\t\t\t\terror.statusCode === 401 ? 'Token is' : 'Settings are'\n\t\t\t\t\t\t} not valid: ${error}`,\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\tstatus: 'OK',\n\t\t\t\t\tmessage: 'Authentication successful!',\n\t\t\t\t};\n\t\t\t},\n\t\t},\n\n\t\tloadOptions: {\n\t\t\tasync getAllEntities(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\treturn await getHomeAssistantEntities.call(this);\n\t\t\t},\n\t\t\tasync getCameraEntities(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\treturn await getHomeAssistantEntities.call(this, 'camera');\n\t\t\t},\n\t\t\tasync getDomains(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\treturn await getHomeAssistantServices.call(this);\n\t\t\t},\n\t\t\tasync getDomainServices(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst currentDomain = this.getCurrentNodeParameter('domain') as string;\n\t\t\t\tif (currentDomain) {\n\t\t\t\t\treturn await getHomeAssistantServices.call(this, currentDomain);\n\t\t\t\t} else {\n\t\t\t\t\treturn [];\n\t\t\t\t}\n\t\t\t},\n\t\t},\n\t};\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t\tconst items = this.getInputData();\n\t\tconst returnData: INodeExecutionData[] = [];\n\t\tconst length = items.length;\n\t\tconst resource = this.getNodeParameter('resource', 0);\n\t\tconst operation = this.getNodeParameter('operation', 0);\n\t\tconst qs: IDataObject = {};\n\t\tlet responseData;\n\t\tfor (let i = 0; i < length; i++) {\n\t\t\ttry {\n\t\t\t\tif (resource === 'config') {\n\t\t\t\t\tif (operation === 'get') {\n\t\t\t\t\t\tresponseData = await homeAssistantApiRequest.call(this, 'GET', '/config');\n\t\t\t\t\t} else if (operation === 'check') {\n\t\t\t\t\t\tresponseData = await homeAssistantApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'POST',\n\t\t\t\t\t\t\t'/config/core/check_config',\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t} else if (resource === 'service') {\n\t\t\t\t\tif (operation === 'getAll') {\n\t\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', i);\n\t\t\t\t\t\tresponseData = (await homeAssistantApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t'/services',\n\t\t\t\t\t\t)) as IDataObject[];\n\t\t\t\t\t\tif (!returnAll) {\n\t\t\t\t\t\t\tconst limit = this.getNodeParameter('limit', i);\n\t\t\t\t\t\t\tresponseData = responseData.slice(0, limit);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (operation === 'call') {\n\t\t\t\t\t\tconst domain = this.getNodeParameter('domain', i) as string;\n\t\t\t\t\t\tconst service = this.getNodeParameter('service', i) as string;\n\t\t\t\t\t\tconst serviceAttributes = this.getNodeParameter('serviceAttributes', i) as {\n\t\t\t\t\t\t\tattributes: IDataObject[];\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tconst body: IDataObject = {};\n\n\t\t\t\t\t\tif (Object.entries(serviceAttributes).length) {\n\t\t\t\t\t\t\tif (serviceAttributes.attributes !== undefined) {\n\t\t\t\t\t\t\t\tserviceAttributes.attributes.map((attribute) => {\n\t\t\t\t\t\t\t\t\tbody[attribute.name as string] = attribute.value;\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await homeAssistantApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'POST',\n\t\t\t\t\t\t\t`/services/${domain}/${service}`,\n\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tif (Array.isArray(responseData) && responseData.length === 0) {\n\t\t\t\t\t\t\tresponseData = {};\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (resource === 'state') {\n\t\t\t\t\tif (operation === 'getAll') {\n\t\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', i);\n\t\t\t\t\t\tresponseData = (await homeAssistantApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t'/states',\n\t\t\t\t\t\t)) as IDataObject[];\n\t\t\t\t\t\tif (!returnAll) {\n\t\t\t\t\t\t\tconst limit = this.getNodeParameter('limit', i);\n\t\t\t\t\t\t\tresponseData = responseData.slice(0, limit);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (operation === 'get') {\n\t\t\t\t\t\tconst entityId = this.getNodeParameter('entityId', i) as string;\n\t\t\t\t\t\tresponseData = await homeAssistantApiRequest.call(this, 'GET', `/states/${entityId}`);\n\t\t\t\t\t} else if (operation === 'upsert') {\n\t\t\t\t\t\tconst entityId = this.getNodeParameter('entityId', i) as string;\n\t\t\t\t\t\tconst state = this.getNodeParameter('state', i) as string;\n\t\t\t\t\t\tconst stateAttributes = this.getNodeParameter('stateAttributes', i) as {\n\t\t\t\t\t\t\tattributes: IDataObject[];\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tconst body = {\n\t\t\t\t\t\t\tstate,\n\t\t\t\t\t\t\tattributes: {},\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tif (Object.entries(stateAttributes).length) {\n\t\t\t\t\t\t\tif (stateAttributes.attributes !== undefined) {\n\t\t\t\t\t\t\t\tstateAttributes.attributes.map((attribute) => {\n\t\t\t\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\t\t\t\tbody.attributes[attribute.name as string] = attribute.value;\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await homeAssistantApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'POST',\n\t\t\t\t\t\t\t`/states/${entityId}`,\n\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t} else if (resource === 'event') {\n\t\t\t\t\tif (operation === 'getAll') {\n\t\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', i);\n\t\t\t\t\t\tresponseData = (await homeAssistantApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t'/events',\n\t\t\t\t\t\t)) as IDataObject[];\n\t\t\t\t\t\tif (!returnAll) {\n\t\t\t\t\t\t\tconst limit = this.getNodeParameter('limit', i);\n\t\t\t\t\t\t\tresponseData = responseData.slice(0, limit);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (operation === 'create') {\n\t\t\t\t\t\tconst eventType = this.getNodeParameter('eventType', i) as string;\n\t\t\t\t\t\tconst eventAttributes = this.getNodeParameter('eventAttributes', i) as {\n\t\t\t\t\t\t\tattributes: IDataObject[];\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tconst body = {};\n\n\t\t\t\t\t\tif (Object.entries(eventAttributes).length) {\n\t\t\t\t\t\t\tif (eventAttributes.attributes !== undefined) {\n\t\t\t\t\t\t\t\teventAttributes.attributes.map((attribute) => {\n\t\t\t\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\t\t\t\tbody[attribute.name as string] = attribute.value;\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await homeAssistantApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'POST',\n\t\t\t\t\t\t\t`/events/${eventType}`,\n\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t} else if (resource === 'log') {\n\t\t\t\t\tif (operation === 'getErroLogs') {\n\t\t\t\t\t\tresponseData = await homeAssistantApiRequest.call(this, 'GET', '/error_log');\n\t\t\t\t\t\tif (responseData) {\n\t\t\t\t\t\t\tresponseData = {\n\t\t\t\t\t\t\t\terrorLog: responseData,\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (operation === 'getLogbookEntries') {\n\t\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i);\n\t\t\t\t\t\tlet endpoint = '/logbook';\n\n\t\t\t\t\t\tif (Object.entries(additionalFields).length) {\n\t\t\t\t\t\t\tif (additionalFields.startTime) {\n\t\t\t\t\t\t\t\tendpoint = `/logbook/${additionalFields.startTime}`;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (additionalFields.endTime) {\n\t\t\t\t\t\t\t\tqs.end_time = additionalFields.endTime;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (additionalFields.entityId) {\n\t\t\t\t\t\t\t\tqs.entity = additionalFields.entityId;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await homeAssistantApiRequest.call(this, 'GET', endpoint, {}, qs);\n\t\t\t\t\t}\n\t\t\t\t} else if (resource === 'template') {\n\t\t\t\t\tif (operation === 'create') {\n\t\t\t\t\t\tconst body = {\n\t\t\t\t\t\t\ttemplate: this.getNodeParameter('template', i) as string,\n\t\t\t\t\t\t};\n\t\t\t\t\t\tresponseData = await homeAssistantApiRequest.call(this, 'POST', '/template', body);\n\t\t\t\t\t\tif (responseData) {\n\t\t\t\t\t\t\tresponseData = { renderedTemplate: responseData };\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (resource === 'history') {\n\t\t\t\t\tif (operation === 'getAll') {\n\t\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', i);\n\t\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i);\n\t\t\t\t\t\tlet endpoint = '/history/period';\n\n\t\t\t\t\t\tif (Object.entries(additionalFields).length) {\n\t\t\t\t\t\t\tif (additionalFields.startTime) {\n\t\t\t\t\t\t\t\tendpoint = `/history/period/${additionalFields.startTime}`;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (additionalFields.endTime) {\n\t\t\t\t\t\t\t\tqs.end_time = additionalFields.endTime;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (additionalFields.entityIds) {\n\t\t\t\t\t\t\t\tqs.filter_entity_id = additionalFields.entityIds;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (additionalFields.minimalResponse === true) {\n\t\t\t\t\t\t\t\tqs.minimal_response = additionalFields.minimalResponse;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (additionalFields.significantChangesOnly === true) {\n\t\t\t\t\t\t\t\tqs.significant_changes_only = additionalFields.significantChangesOnly;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = (await homeAssistantApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\tendpoint,\n\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t)) as IDataObject[];\n\t\t\t\t\t\tif (!returnAll) {\n\t\t\t\t\t\t\tconst limit = this.getNodeParameter('limit', i);\n\t\t\t\t\t\t\tresponseData = responseData.slice(0, limit);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (resource === 'cameraProxy') {\n\t\t\t\t\tif (operation === 'getScreenshot') {\n\t\t\t\t\t\tconst cameraEntityId = this.getNodeParameter('cameraEntityId', i) as string;\n\t\t\t\t\t\tconst dataPropertyNameDownload = this.getNodeParameter('binaryPropertyName', i);\n\t\t\t\t\t\tconst endpoint = `/camera_proxy/${cameraEntityId}`;\n\n\t\t\t\t\t\tlet mimeType: string | undefined;\n\n\t\t\t\t\t\tresponseData = await homeAssistantApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\tendpoint,\n\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tencoding: null,\n\t\t\t\t\t\t\t\tresolveWithFullResponse: true,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tconst newItem: INodeExecutionData = {\n\t\t\t\t\t\t\tjson: items[i].json,\n\t\t\t\t\t\t\tbinary: {},\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tif (mimeType === undefined && responseData.headers['content-type']) {\n\t\t\t\t\t\t\tmimeType = responseData.headers['content-type'];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (items[i].binary !== undefined && newItem.binary) {\n\t\t\t\t\t\t\t// Create a shallow copy of the binary data so that the old\n\t\t\t\t\t\t\t// data references which do not get changed still stay behind\n\t\t\t\t\t\t\t// but the incoming data does not get changed.\n\t\t\t\t\t\t\tObject.assign(newItem.binary, items[i].binary);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\titems[i] = newItem;\n\n\t\t\t\t\t\tconst data = Buffer.from(responseData.body as string);\n\n\t\t\t\t\t\titems[i].binary![dataPropertyNameDownload] = await this.helpers.prepareBinaryData(\n\t\t\t\t\t\t\tdata,\n\t\t\t\t\t\t\t'screenshot.jpg',\n\t\t\t\t\t\t\tmimeType,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\tif (resource === 'cameraProxy' && operation === 'get') {\n\t\t\t\t\t\titems[i].json = { error: error.message };\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray({ error: error.message }),\n\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t}\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t{ itemData: { item: i } },\n\t\t\t);\n\t\t\treturnData.push(...executionData);\n\t\t}\n\n\t\tif (resource === 'cameraProxy' && operation === 'getScreenshot') {\n\t\t\treturn [items];\n\t\t} else {\n\t\t\treturn [returnData];\n\t\t}\n\t}\n}\n"],"mappings":"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","names":["executionData"]}