{"version":3,"sources":["../../../nodes/Ghost/GenericFunctions.ts"],"sourcesContent":["import type {\n\tIDataObject,\n\tIExecuteFunctions,\n\tIHookFunctions,\n\tIHttpRequestMethods,\n\tILoadOptionsFunctions,\n\tIRequestOptions,\n} from 'n8n-workflow';\n\nexport async function ghostApiRequest(\n\tthis: IHookFunctions | IExecuteFunctions | ILoadOptionsFunctions,\n\tmethod: IHttpRequestMethods,\n\tendpoint: string,\n\n\tbody: any = {},\n\tquery: IDataObject = {},\n\turi?: string,\n): Promise<any> {\n\tconst source = this.getNodeParameter('source', 0) as string;\n\n\tlet version;\n\tlet credentialType;\n\n\tif (source === 'contentApi') {\n\t\t//https://ghost.org/faq/api-versioning/\n\t\tversion = 'v3';\n\t\tcredentialType = 'ghostContentApi';\n\t} else {\n\t\tversion = 'v2';\n\t\tcredentialType = 'ghostAdminApi';\n\t}\n\n\tconst credentials = await this.getCredentials(credentialType);\n\n\tconst options: IRequestOptions = {\n\t\tmethod,\n\t\tqs: query,\n\t\turi: uri || `${credentials.url}/ghost/api/${version}${endpoint}`,\n\t\tbody,\n\t\tjson: true,\n\t};\n\n\treturn await this.helpers.requestWithAuthentication.call(this, credentialType, options);\n}\n\nexport async function ghostApiRequestAllItems(\n\tthis: IHookFunctions | IExecuteFunctions | ILoadOptionsFunctions,\n\tpropertyName: string,\n\tmethod: IHttpRequestMethods,\n\tendpoint: string,\n\n\tbody: any = {},\n\tquery: IDataObject = {},\n): Promise<any> {\n\tconst returnData: IDataObject[] = [];\n\n\tlet responseData;\n\n\tquery.limit = 50;\n\tquery.page = 1;\n\n\tdo {\n\t\tresponseData = await ghostApiRequest.call(this, method, endpoint, body, query);\n\t\tquery.page = responseData.meta.pagination.next;\n\t\treturnData.push.apply(returnData, responseData[propertyName] as IDataObject[]);\n\t} while (query.page !== null);\n\treturn returnData;\n}\n\nexport function validateJSON(json: string | undefined): any {\n\tlet result;\n\ttry {\n\t\tresult = JSON.parse(json!);\n\t} catch (exception) {\n\t\tresult = undefined;\n\t}\n\treturn result;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA,eAAsB,gBAErB,QACA,UAEA,OAAY,CAAC,GACb,QAAqB,CAAC,GACtB,KACe;AACf,QAAM,SAAS,KAAK,iBAAiB,UAAU,CAAC;AAEhD,MAAI;AACJ,MAAI;AAEJ,MAAI,WAAW,cAAc;AAE5B,cAAU;AACV,qBAAiB;AAAA,EAClB,OAAO;AACN,cAAU;AACV,qBAAiB;AAAA,EAClB;AAEA,QAAM,cAAc,MAAM,KAAK,eAAe,cAAc;AAE5D,QAAM,UAA2B;AAAA,IAChC;AAAA,IACA,IAAI;AAAA,IACJ,KAAK,OAAO,GAAG,YAAY,GAAG,cAAc,OAAO,GAAG,QAAQ;AAAA,IAC9D;AAAA,IACA,MAAM;AAAA,EACP;AAEA,SAAO,MAAM,KAAK,QAAQ,0BAA0B,KAAK,MAAM,gBAAgB,OAAO;AACvF;AAEA,eAAsB,wBAErB,cACA,QACA,UAEA,OAAY,CAAC,GACb,QAAqB,CAAC,GACP;AACf,QAAM,aAA4B,CAAC;AAEnC,MAAI;AAEJ,QAAM,QAAQ;AACd,QAAM,OAAO;AAEb,KAAG;AACF,mBAAe,MAAM,gBAAgB,KAAK,MAAM,QAAQ,UAAU,MAAM,KAAK;AAC7E,UAAM,OAAO,aAAa,KAAK,WAAW;AAC1C,eAAW,KAAK,MAAM,YAAY,aAAa,YAAY,CAAkB;AAAA,EAC9E,SAAS,MAAM,SAAS;AACxB,SAAO;AACR;AAEO,SAAS,aAAa,MAA+B;AAC3D,MAAI;AACJ,MAAI;AACH,aAAS,KAAK,MAAM,IAAK;AAAA,EAC1B,SAAS,WAAW;AACnB,aAAS;AAAA,EACV;AACA,SAAO;AACR;","names":[]}