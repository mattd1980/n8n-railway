{"version":3,"sources":["../../../nodes/RssFeedRead/RssFeedRead.node.ts"],"sourcesContent":["import type {\n\tIExecuteFunctions,\n\tIDataObject,\n\tINodeExecutionData,\n\tINodeType,\n\tINodeTypeDescription,\n} from 'n8n-workflow';\nimport { NodeConnectionTypes, NodeOperationError } from 'n8n-workflow';\nimport Parser from 'rss-parser';\nimport { URL } from 'url';\n\nimport { generatePairedItemData } from '../../utils/utilities';\n\n// Utility function\n\nfunction validateURL(url: string) {\n\ttry {\n\t\tnew URL(url);\n\t\treturn true;\n\t} catch (err) {\n\t\treturn false;\n\t}\n}\n\nexport class RssFeedRead implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'RSS Read',\n\t\tname: 'rssFeedRead',\n\t\ticon: 'fa:rss',\n\t\ticonColor: 'orange-red',\n\t\tgroup: ['input'],\n\t\tversion: [1, 1.1],\n\t\tdescription: 'Reads data from an RSS Feed',\n\t\tdefaults: {\n\t\t\tname: 'RSS Read',\n\t\t\tcolor: '#b02020',\n\t\t},\n\t\tusableAsTool: true,\n\t\tinputs: [NodeConnectionTypes.Main],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'URL',\n\t\t\t\tname: 'url',\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: '',\n\t\t\t\trequired: true,\n\t\t\t\tdescription: 'URL of the RSS feed',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Options',\n\t\t\t\tname: 'options',\n\t\t\t\ttype: 'collection',\n\t\t\t\tplaceholder: 'Add option',\n\t\t\t\tdefault: {},\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Ignore SSL Issues (Insecure)',\n\t\t\t\t\t\tname: 'ignoreSSL',\n\t\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\t\tdefault: false,\n\t\t\t\t\t\tdescription: 'Whether to ignore SSL/TLS certificate issues or not',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t],\n\t};\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t\tconst returnData: INodeExecutionData[] = [];\n\t\tconst nodeVersion = this.getNode().typeVersion;\n\t\tconst items = this.getInputData();\n\n\t\tlet itemsLength = items.length ? 1 : 0;\n\t\tlet fallbackPairedItems;\n\n\t\tif (nodeVersion >= 1.1) {\n\t\t\titemsLength = items.length;\n\t\t} else {\n\t\t\tfallbackPairedItems = generatePairedItemData(items.length);\n\t\t}\n\n\t\tfor (let i = 0; i < itemsLength; i++) {\n\t\t\ttry {\n\t\t\t\tconst url = this.getNodeParameter('url', i) as string;\n\t\t\t\tconst options = this.getNodeParameter('options', i);\n\t\t\t\tconst ignoreSSL = Boolean(options.ignoreSSL);\n\n\t\t\t\tif (!url) {\n\t\t\t\t\tthrow new NodeOperationError(this.getNode(), 'The parameter \"URL\" has to be set!', {\n\t\t\t\t\t\titemIndex: i,\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tif (!validateURL(url)) {\n\t\t\t\t\tthrow new NodeOperationError(this.getNode(), 'The provided \"URL\" is not valid!', {\n\t\t\t\t\t\titemIndex: i,\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tconst parser = new Parser({\n\t\t\t\t\trequestOptions: {\n\t\t\t\t\t\trejectUnauthorized: !ignoreSSL,\n\t\t\t\t\t},\n\t\t\t\t});\n\n\t\t\t\tlet feed: Parser.Output<IDataObject>;\n\t\t\t\ttry {\n\t\t\t\t\tfeed = await parser.parseURL(url);\n\t\t\t\t} catch (error) {\n\t\t\t\t\tif (error.code === 'ECONNREFUSED') {\n\t\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t\t`It was not possible to connect to the URL. Please make sure the URL \"${url}\" it is valid!`,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\titemIndex: i,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tthrow new NodeOperationError(this.getNode(), error as Error, {\n\t\t\t\t\t\titemIndex: i,\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\t// For now we just take the items and ignore everything else\n\t\t\t\tif (feed.items) {\n\t\t\t\t\tconst feedItems = (feed.items as IDataObject[]).map((item) => ({\n\t\t\t\t\t\tjson: item,\n\t\t\t\t\t})) as INodeExecutionData[];\n\n\t\t\t\t\tconst itemData = fallbackPairedItems || [{ item: i }];\n\n\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(feedItems, {\n\t\t\t\t\t\titemData,\n\t\t\t\t\t});\n\n\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\treturnData.push({\n\t\t\t\t\t\tjson: { error: error.message },\n\t\t\t\t\t\tpairedItem: fallbackPairedItems || [{ item: i }],\n\t\t\t\t\t});\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\n\t\treturn [returnData];\n\t}\n}\n"],"mappings":"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","names":["Parser"]}