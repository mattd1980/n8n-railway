{"version":3,"sources":["../../../nodes/Harvest/Harvest.node.ts"],"sourcesContent":["import type {\n\tIExecuteFunctions,\n\tILoadOptionsFunctions,\n\tIDataObject,\n\tINodeExecutionData,\n\tINodePropertyOptions,\n\tINodeType,\n\tINodeTypeDescription,\n\tIHttpRequestMethods,\n} from 'n8n-workflow';\nimport { NodeConnectionTypes, NodeOperationError } from 'n8n-workflow';\n\nimport { clientFields, clientOperations } from './ClientDescription';\nimport { companyOperations } from './CompanyDescription';\nimport { contactFields, contactOperations } from './ContactDescription';\nimport { estimateFields, estimateOperations } from './EstimateDescription';\nimport { expenseFields, expenseOperations } from './ExpenseDescription';\nimport { getAllResource, harvestApiRequest } from './GenericFunctions';\nimport { invoiceFields, invoiceOperations } from './InvoiceDescription';\nimport { projectFields, projectOperations } from './ProjectDescription';\nimport { taskFields, taskOperations } from './TaskDescription';\nimport { timeEntryFields, timeEntryOperations } from './TimeEntryDescription';\nimport { userFields, userOperations } from './UserDescription';\n\nexport class Harvest implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'Harvest',\n\t\tname: 'harvest',\n\t\t// eslint-disable-next-line n8n-nodes-base/node-class-description-icon-not-svg\n\t\ticon: 'file:harvest.png',\n\t\tgroup: ['input'],\n\t\tversion: 1,\n\t\tsubtitle: '={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}',\n\t\tdescription: 'Access data on Harvest',\n\t\tdefaults: {\n\t\t\tname: 'Harvest',\n\t\t},\n\t\tusableAsTool: true,\n\t\tinputs: [NodeConnectionTypes.Main],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tcredentials: [\n\t\t\t{\n\t\t\t\tname: 'harvestApi',\n\t\t\t\trequired: true,\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tauthentication: ['accessToken'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'harvestOAuth2Api',\n\t\t\t\trequired: true,\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tauthentication: ['oAuth2'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Authentication',\n\t\t\t\tname: 'authentication',\n\t\t\t\ttype: 'options',\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Access Token',\n\t\t\t\t\t\tvalue: 'accessToken',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'OAuth2',\n\t\t\t\t\t\tvalue: 'oAuth2',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'accessToken',\n\t\t\t},\n\n\t\t\t{\n\t\t\t\tdisplayName: 'Resource',\n\t\t\t\tname: 'resource',\n\t\t\t\ttype: 'options',\n\t\t\t\tnoDataExpression: true,\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Client',\n\t\t\t\t\t\tvalue: 'client',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Company',\n\t\t\t\t\t\tvalue: 'company',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Contact',\n\t\t\t\t\t\tvalue: 'contact',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Estimate',\n\t\t\t\t\t\tvalue: 'estimate',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Expense',\n\t\t\t\t\t\tvalue: 'expense',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Invoice',\n\t\t\t\t\t\tvalue: 'invoice',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Project',\n\t\t\t\t\t\tvalue: 'project',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Task',\n\t\t\t\t\t\tvalue: 'task',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Time Entry',\n\t\t\t\t\t\tvalue: 'timeEntry',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'User',\n\t\t\t\t\t\tvalue: 'user',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'task',\n\t\t\t},\n\n\t\t\t// operations\n\t\t\t...clientOperations,\n\t\t\t...companyOperations,\n\t\t\t...contactOperations,\n\t\t\t...estimateOperations,\n\t\t\t...expenseOperations,\n\t\t\t...invoiceOperations,\n\t\t\t...projectOperations,\n\t\t\t...taskOperations,\n\t\t\t...timeEntryOperations,\n\t\t\t...userOperations,\n\n\t\t\t{\n\t\t\t\tdisplayName: 'Account Name or ID',\n\t\t\t\tname: 'accountId',\n\t\t\t\ttype: 'options',\n\t\t\t\tdescription:\n\t\t\t\t\t'Choose from the list, or specify an ID using an <a href=\"https://docs.n8n.io/code/expressions/\">expression</a>',\n\t\t\t\trequired: true,\n\t\t\t\ttypeOptions: {\n\t\t\t\t\tloadOptionsMethod: 'getAccounts',\n\t\t\t\t},\n\t\t\t\tdefault: '',\n\t\t\t},\n\n\t\t\t// fields\n\t\t\t...clientFields,\n\t\t\t...contactFields,\n\t\t\t...estimateFields,\n\t\t\t...expenseFields,\n\t\t\t...invoiceFields,\n\t\t\t...projectFields,\n\t\t\t...taskFields,\n\t\t\t...timeEntryFields,\n\t\t\t...userFields,\n\t\t],\n\t};\n\n\tmethods = {\n\t\tloadOptions: {\n\t\t\t// Get all the available accounts to display them to user so that they can\n\t\t\t// select them easily\n\t\t\tasync getAccounts(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst returnData: INodePropertyOptions[] = [];\n\t\t\t\tconst { accounts } = await harvestApiRequest.call(\n\t\t\t\t\tthis,\n\t\t\t\t\t'GET',\n\t\t\t\t\t{},\n\t\t\t\t\t'',\n\t\t\t\t\t{},\n\t\t\t\t\t{},\n\t\t\t\t\t'https://id.getharvest.com/api/v2/accounts',\n\t\t\t\t);\n\t\t\t\tfor (const account of accounts) {\n\t\t\t\t\tconst accountName = account.name;\n\t\t\t\t\tconst accountId = account.id;\n\t\t\t\t\treturnData.push({\n\t\t\t\t\t\tname: accountName,\n\t\t\t\t\t\tvalue: accountId,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn returnData;\n\t\t\t},\n\t\t},\n\t};\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t\tconst items = this.getInputData();\n\t\tconst returnData: INodeExecutionData[] = [];\n\n\t\tconst resource = this.getNodeParameter('resource', 0);\n\t\tconst operation = this.getNodeParameter('operation', 0);\n\n\t\tlet endpoint = '';\n\t\tlet requestMethod: IHttpRequestMethods;\n\t\tlet body: IDataObject | Buffer;\n\t\tlet qs: IDataObject;\n\n\t\tfor (let i = 0; i < items.length; i++) {\n\t\t\ttry {\n\t\t\t\tbody = {};\n\t\t\t\tqs = {};\n\n\t\t\t\tif (resource === 'timeEntry') {\n\t\t\t\t\tif (operation === 'get') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//         get\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\trequestMethod = 'GET';\n\t\t\t\t\t\tconst id = this.getNodeParameter('id', i) as string;\n\n\t\t\t\t\t\tendpoint = `time_entries/${id}`;\n\n\t\t\t\t\t\tconst responseData = await harvestApiRequest.call(this, requestMethod, qs, endpoint);\n\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t} else if (operation === 'getAll') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//         getAll\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\tconst responseData: IDataObject[] = await getAllResource.call(this, 'time_entries', i);\n\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData),\n\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t} else if (operation === 'createByStartEnd') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//         createByStartEnd\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\trequestMethod = 'POST';\n\t\t\t\t\t\tendpoint = 'time_entries';\n\n\t\t\t\t\t\tbody.project_id = this.getNodeParameter('projectId', i) as string;\n\t\t\t\t\t\tbody.task_id = this.getNodeParameter('taskId', i) as string;\n\t\t\t\t\t\tbody.spent_date = this.getNodeParameter('spentDate', i) as string;\n\n\t\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i);\n\t\t\t\t\t\tObject.assign(body, additionalFields);\n\n\t\t\t\t\t\tconst responseData = await harvestApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\trequestMethod,\n\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t\tendpoint,\n\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t} else if (operation === 'createByDuration') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//         createByDuration\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\trequestMethod = 'POST';\n\t\t\t\t\t\tendpoint = 'time_entries';\n\n\t\t\t\t\t\tbody.project_id = this.getNodeParameter('projectId', i) as string;\n\t\t\t\t\t\tbody.task_id = this.getNodeParameter('taskId', i) as string;\n\t\t\t\t\t\tbody.spent_date = this.getNodeParameter('spentDate', i) as string;\n\n\t\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i);\n\t\t\t\t\t\tObject.assign(body, additionalFields);\n\n\t\t\t\t\t\tconst responseData = await harvestApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\trequestMethod,\n\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t\tendpoint,\n\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t} else if (operation === 'delete') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//         delete\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\trequestMethod = 'DELETE';\n\t\t\t\t\t\tconst id = this.getNodeParameter('id', i) as string;\n\t\t\t\t\t\tendpoint = `time_entries/${id}`;\n\n\t\t\t\t\t\tconst responseData = await harvestApiRequest.call(this, requestMethod, qs, endpoint);\n\n\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t} else if (operation === 'deleteExternal') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//         deleteExternal\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\trequestMethod = 'DELETE';\n\t\t\t\t\t\tconst id = this.getNodeParameter('id', i) as string;\n\t\t\t\t\t\tendpoint = `time_entries/${id}/external_reference`;\n\n\t\t\t\t\t\tconst responseData = await harvestApiRequest.call(this, requestMethod, qs, endpoint);\n\n\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t} else if (operation === 'restartTime') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//         restartTime\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\trequestMethod = 'PATCH';\n\t\t\t\t\t\tconst id = this.getNodeParameter('id', i) as string;\n\t\t\t\t\t\tendpoint = `time_entries/${id}/restart`;\n\n\t\t\t\t\t\tconst responseData = await harvestApiRequest.call(this, requestMethod, qs, endpoint);\n\n\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t} else if (operation === 'stopTime') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//         stopTime\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\trequestMethod = 'PATCH';\n\t\t\t\t\t\tconst id = this.getNodeParameter('id', i) as string;\n\t\t\t\t\t\tendpoint = `time_entries/${id}/stop`;\n\n\t\t\t\t\t\tconst responseData = await harvestApiRequest.call(this, requestMethod, qs, endpoint);\n\n\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t} else if (operation === 'update') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//         update\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\trequestMethod = 'PATCH';\n\t\t\t\t\t\tconst id = this.getNodeParameter('id', i) as string;\n\t\t\t\t\t\tendpoint = `time_entries/${id}`;\n\n\t\t\t\t\t\tconst updateFields = this.getNodeParameter('updateFields', i);\n\n\t\t\t\t\t\tObject.assign(body, updateFields);\n\t\t\t\t\t\tconst responseData = await harvestApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\trequestMethod,\n\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t\tendpoint,\n\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t\t`The operation \"${operation}\" is not known!`,\n\t\t\t\t\t\t\t{ itemIndex: i },\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t} else if (resource === 'client') {\n\t\t\t\t\tif (operation === 'get') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//         get\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\trequestMethod = 'GET';\n\t\t\t\t\t\tconst id = this.getNodeParameter('id', i) as string;\n\n\t\t\t\t\t\tendpoint = `clients/${id}`;\n\n\t\t\t\t\t\tconst responseData = await harvestApiRequest.call(this, requestMethod, qs, endpoint);\n\n\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t} else if (operation === 'getAll') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//         getAll\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\tconst responseData: IDataObject[] = await getAllResource.call(this, 'clients', i);\n\n\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData),\n\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t} else if (operation === 'create') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//         create\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\trequestMethod = 'POST';\n\t\t\t\t\t\tendpoint = 'clients';\n\n\t\t\t\t\t\tbody.name = this.getNodeParameter('name', i) as string;\n\n\t\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i);\n\t\t\t\t\t\tObject.assign(body, additionalFields);\n\n\t\t\t\t\t\tconst responseData = await harvestApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\trequestMethod,\n\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t\tendpoint,\n\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t} else if (operation === 'update') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//         update\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\trequestMethod = 'PATCH';\n\t\t\t\t\t\tconst id = this.getNodeParameter('id', i) as string;\n\t\t\t\t\t\tendpoint = `clients/${id}`;\n\n\t\t\t\t\t\tconst updateFields = this.getNodeParameter('updateFields', i);\n\t\t\t\t\t\tObject.assign(qs, updateFields);\n\n\t\t\t\t\t\tconst responseData = await harvestApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\trequestMethod,\n\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t\tendpoint,\n\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t} else if (operation === 'delete') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//         delete\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\trequestMethod = 'DELETE';\n\t\t\t\t\t\tconst id = this.getNodeParameter('id', i) as string;\n\t\t\t\t\t\tendpoint = `clients/${id}`;\n\n\t\t\t\t\t\tconst responseData = await harvestApiRequest.call(this, requestMethod, qs, endpoint);\n\n\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t\t`The resource \"${resource}\" is not known!`,\n\t\t\t\t\t\t\t{ itemIndex: i },\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t} else if (resource === 'project') {\n\t\t\t\t\tif (operation === 'get') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//         get\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\trequestMethod = 'GET';\n\t\t\t\t\t\tconst id = this.getNodeParameter('id', i) as string;\n\n\t\t\t\t\t\tendpoint = `projects/${id}`;\n\n\t\t\t\t\t\tconst responseData = await harvestApiRequest.call(this, requestMethod, qs, endpoint);\n\n\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t} else if (operation === 'getAll') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//         getAll\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\tconst responseData: IDataObject[] = await getAllResource.call(this, 'projects', i);\n\n\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData),\n\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t} else if (operation === 'create') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//         create\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\trequestMethod = 'POST';\n\t\t\t\t\t\tendpoint = 'projects';\n\n\t\t\t\t\t\tbody.client_id = this.getNodeParameter('clientId', i) as string;\n\t\t\t\t\t\tbody.name = this.getNodeParameter('name', i) as string;\n\t\t\t\t\t\tbody.is_billable = this.getNodeParameter('isBillable', i) as string;\n\t\t\t\t\t\tbody.bill_by = this.getNodeParameter('billBy', i) as string;\n\t\t\t\t\t\tbody.budget_by = this.getNodeParameter('budgetBy', i) as string;\n\n\t\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i);\n\t\t\t\t\t\tObject.assign(body, additionalFields);\n\n\t\t\t\t\t\tconst responseData = await harvestApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\trequestMethod,\n\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t\tendpoint,\n\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t} else if (operation === 'update') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//         update\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\trequestMethod = 'PATCH';\n\t\t\t\t\t\tconst id = this.getNodeParameter('id', i) as string;\n\t\t\t\t\t\tendpoint = `projects/${id}`;\n\n\t\t\t\t\t\tconst updateFields = this.getNodeParameter('updateFields', i);\n\n\t\t\t\t\t\tObject.assign(body, updateFields);\n\t\t\t\t\t\tconst responseData = await harvestApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\trequestMethod,\n\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t\tendpoint,\n\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t} else if (operation === 'delete') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//         delete\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\trequestMethod = 'DELETE';\n\t\t\t\t\t\tconst id = this.getNodeParameter('id', i) as string;\n\t\t\t\t\t\tendpoint = `projects/${id}`;\n\n\t\t\t\t\t\tconst responseData = await harvestApiRequest.call(this, requestMethod, qs, endpoint);\n\n\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t\t`The resource \"${resource}\" is not known!`,\n\t\t\t\t\t\t\t{ itemIndex: i },\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t} else if (resource === 'user') {\n\t\t\t\t\tif (operation === 'get') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//         get\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\trequestMethod = 'GET';\n\t\t\t\t\t\tconst id = this.getNodeParameter('id', i) as string;\n\n\t\t\t\t\t\tendpoint = `users/${id}`;\n\n\t\t\t\t\t\tconst responseData = await harvestApiRequest.call(this, requestMethod, qs, endpoint);\n\n\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t} else if (operation === 'getAll') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//         getAll\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\tconst responseData: IDataObject[] = await getAllResource.call(this, 'users', i);\n\n\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData),\n\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t} else if (operation === 'me') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//         me\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\trequestMethod = 'GET';\n\n\t\t\t\t\t\tendpoint = 'users/me';\n\n\t\t\t\t\t\tconst responseData = await harvestApiRequest.call(this, requestMethod, qs, endpoint);\n\n\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t} else if (operation === 'create') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//         create\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\trequestMethod = 'POST';\n\t\t\t\t\t\tendpoint = 'users';\n\n\t\t\t\t\t\tbody.first_name = this.getNodeParameter('firstName', i) as string;\n\t\t\t\t\t\tbody.last_name = this.getNodeParameter('lastName', i) as string;\n\t\t\t\t\t\tbody.email = this.getNodeParameter('email', i) as string;\n\n\t\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i);\n\t\t\t\t\t\tObject.assign(body, additionalFields);\n\n\t\t\t\t\t\tconst responseData = await harvestApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\trequestMethod,\n\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t\tendpoint,\n\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t} else if (operation === 'update') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//         update\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\trequestMethod = 'PATCH';\n\t\t\t\t\t\tconst id = this.getNodeParameter('id', i) as string;\n\t\t\t\t\t\tendpoint = `users/${id}`;\n\n\t\t\t\t\t\tconst updateFields = this.getNodeParameter('updateFields', i);\n\t\t\t\t\t\tObject.assign(qs, updateFields);\n\n\t\t\t\t\t\tconst responseData = await harvestApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\trequestMethod,\n\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t\tendpoint,\n\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t} else if (operation === 'delete') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//         delete\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\trequestMethod = 'DELETE';\n\t\t\t\t\t\tconst id = this.getNodeParameter('id', i) as string;\n\t\t\t\t\t\tendpoint = `users/${id}`;\n\n\t\t\t\t\t\tconst responseData = await harvestApiRequest.call(this, requestMethod, qs, endpoint);\n\n\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t\t`The resource \"${resource}\" is not known!`,\n\t\t\t\t\t\t\t{ itemIndex: i },\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t} else if (resource === 'contact') {\n\t\t\t\t\tif (operation === 'get') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//         get\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\trequestMethod = 'GET';\n\t\t\t\t\t\tconst id = this.getNodeParameter('id', i) as string;\n\n\t\t\t\t\t\tendpoint = `contacts/${id}`;\n\n\t\t\t\t\t\tconst responseData = await harvestApiRequest.call(this, requestMethod, qs, endpoint);\n\n\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t} else if (operation === 'getAll') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//         getAll\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\tconst responseData: IDataObject[] = await getAllResource.call(this, 'contacts', i);\n\n\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData),\n\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t} else if (operation === 'create') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//         create\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\trequestMethod = 'POST';\n\t\t\t\t\t\tendpoint = 'contacts';\n\n\t\t\t\t\t\tbody.client_id = this.getNodeParameter('clientId', i) as string;\n\t\t\t\t\t\tbody.first_name = this.getNodeParameter('firstName', i) as string;\n\n\t\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i);\n\t\t\t\t\t\tObject.assign(body, additionalFields);\n\n\t\t\t\t\t\tconst responseData = await harvestApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\trequestMethod,\n\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t\tendpoint,\n\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t} else if (operation === 'update') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//         update\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\trequestMethod = 'PATCH';\n\t\t\t\t\t\tconst id = this.getNodeParameter('id', i) as string;\n\t\t\t\t\t\tendpoint = `contacts/${id}`;\n\n\t\t\t\t\t\tconst updateFields = this.getNodeParameter('updateFields', i);\n\t\t\t\t\t\tObject.assign(qs, updateFields);\n\n\t\t\t\t\t\tconst responseData = await harvestApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\trequestMethod,\n\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t\tendpoint,\n\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t} else if (operation === 'delete') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//         delete\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\trequestMethod = 'DELETE';\n\t\t\t\t\t\tconst id = this.getNodeParameter('id', i) as string;\n\t\t\t\t\t\tendpoint = `contacts/${id}`;\n\n\t\t\t\t\t\tconst responseData = await harvestApiRequest.call(this, requestMethod, qs, endpoint);\n\n\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t\t`The resource \"${resource}\" is not known!`,\n\t\t\t\t\t\t\t{ itemIndex: i },\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t} else if (resource === 'company') {\n\t\t\t\t\tif (operation === 'get') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//         get\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\trequestMethod = 'GET';\n\t\t\t\t\t\tendpoint = 'company';\n\n\t\t\t\t\t\tconst responseData = await harvestApiRequest.call(this, requestMethod, qs, endpoint);\n\n\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t\t`The resource \"${resource}\" is not known!`,\n\t\t\t\t\t\t\t{ itemIndex: i },\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t} else if (resource === 'task') {\n\t\t\t\t\tif (operation === 'get') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//         get\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\trequestMethod = 'GET';\n\t\t\t\t\t\tconst id = this.getNodeParameter('id', i) as string;\n\n\t\t\t\t\t\tendpoint = `tasks/${id}`;\n\n\t\t\t\t\t\tconst responseData = await harvestApiRequest.call(this, requestMethod, qs, endpoint);\n\n\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t} else if (operation === 'getAll') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//         getAll\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\tconst responseData: IDataObject[] = await getAllResource.call(this, 'tasks', i);\n\n\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData),\n\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t} else if (operation === 'create') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//         create\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\trequestMethod = 'POST';\n\t\t\t\t\t\tendpoint = 'tasks';\n\n\t\t\t\t\t\tbody.name = this.getNodeParameter('name', i) as string;\n\n\t\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i);\n\t\t\t\t\t\tObject.assign(body, additionalFields);\n\n\t\t\t\t\t\tconst responseData = await harvestApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\trequestMethod,\n\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t\tendpoint,\n\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t} else if (operation === 'update') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//         update\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\trequestMethod = 'PATCH';\n\t\t\t\t\t\tconst id = this.getNodeParameter('id', i) as string;\n\t\t\t\t\t\tendpoint = `tasks/${id}`;\n\n\t\t\t\t\t\tconst updateFields = this.getNodeParameter('updateFields', i);\n\t\t\t\t\t\tObject.assign(qs, updateFields);\n\n\t\t\t\t\t\tconst responseData = await harvestApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\trequestMethod,\n\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t\tendpoint,\n\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t} else if (operation === 'delete') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//         delete\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\trequestMethod = 'DELETE';\n\t\t\t\t\t\tconst id = this.getNodeParameter('id', i) as string;\n\t\t\t\t\t\tendpoint = `tasks/${id}`;\n\n\t\t\t\t\t\tconst responseData = await harvestApiRequest.call(this, requestMethod, qs, endpoint);\n\n\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t\t`The resource \"${resource}\" is not known!`,\n\t\t\t\t\t\t\t{ itemIndex: i },\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t} else if (resource === 'invoice') {\n\t\t\t\t\tif (operation === 'get') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//         get\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\trequestMethod = 'GET';\n\t\t\t\t\t\tconst id = this.getNodeParameter('id', i) as string;\n\n\t\t\t\t\t\tendpoint = `invoices/${id}`;\n\n\t\t\t\t\t\tconst responseData = await harvestApiRequest.call(this, requestMethod, qs, endpoint);\n\n\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t} else if (operation === 'getAll') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//         getAll\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\tconst responseData: IDataObject[] = await getAllResource.call(this, 'invoices', i);\n\n\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData),\n\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t} else if (operation === 'create') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//         create\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\trequestMethod = 'POST';\n\t\t\t\t\t\tendpoint = 'invoices';\n\n\t\t\t\t\t\tbody.client_id = this.getNodeParameter('clientId', i) as string;\n\n\t\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i);\n\t\t\t\t\t\tObject.assign(body, additionalFields);\n\n\t\t\t\t\t\tconst responseData = await harvestApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\trequestMethod,\n\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t\tendpoint,\n\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t} else if (operation === 'update') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//         update\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\trequestMethod = 'PATCH';\n\t\t\t\t\t\tconst id = this.getNodeParameter('id', i) as string;\n\t\t\t\t\t\tendpoint = `invoices/${id}`;\n\n\t\t\t\t\t\tconst updateFields = this.getNodeParameter('updateFields', i);\n\t\t\t\t\t\tObject.assign(qs, updateFields);\n\n\t\t\t\t\t\tconst responseData = await harvestApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\trequestMethod,\n\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t\tendpoint,\n\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t} else if (operation === 'delete') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//         delete\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\trequestMethod = 'DELETE';\n\t\t\t\t\t\tconst id = this.getNodeParameter('id', i) as string;\n\t\t\t\t\t\tendpoint = `invoices/${id}`;\n\n\t\t\t\t\t\tconst responseData = await harvestApiRequest.call(this, requestMethod, qs, endpoint);\n\n\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t\t`The resource \"${resource}\" is not known!`,\n\t\t\t\t\t\t\t{ itemIndex: i },\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t} else if (resource === 'expense') {\n\t\t\t\t\tif (operation === 'get') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//         get\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\trequestMethod = 'GET';\n\t\t\t\t\t\tconst id = this.getNodeParameter('id', i) as string;\n\n\t\t\t\t\t\tendpoint = `expenses/${id}`;\n\n\t\t\t\t\t\tconst responseData = await harvestApiRequest.call(this, requestMethod, qs, endpoint);\n\n\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t} else if (operation === 'getAll') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//         getAll\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\tconst responseData: IDataObject[] = await getAllResource.call(this, 'expenses', i);\n\n\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData),\n\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t} else if (operation === 'create') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//         create\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\trequestMethod = 'POST';\n\t\t\t\t\t\tendpoint = 'expenses';\n\n\t\t\t\t\t\tbody.project_id = this.getNodeParameter('projectId', i) as string;\n\t\t\t\t\t\tbody.expense_category_id = this.getNodeParameter('expenseCategoryId', i) as string;\n\t\t\t\t\t\tbody.spent_date = this.getNodeParameter('spentDate', i) as string;\n\n\t\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i);\n\t\t\t\t\t\tObject.assign(body, additionalFields);\n\n\t\t\t\t\t\tconst responseData = await harvestApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\trequestMethod,\n\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t\tendpoint,\n\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t} else if (operation === 'update') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//         update\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\trequestMethod = 'PATCH';\n\t\t\t\t\t\tconst id = this.getNodeParameter('id', i) as string;\n\t\t\t\t\t\tendpoint = `expenses/${id}`;\n\n\t\t\t\t\t\tconst updateFields = this.getNodeParameter('updateFields', i);\n\t\t\t\t\t\tObject.assign(qs, updateFields);\n\n\t\t\t\t\t\tconst responseData = await harvestApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\trequestMethod,\n\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t\tendpoint,\n\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t} else if (operation === 'delete') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//         delete\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\trequestMethod = 'DELETE';\n\t\t\t\t\t\tconst id = this.getNodeParameter('id', i) as string;\n\t\t\t\t\t\tendpoint = `expenses/${id}`;\n\n\t\t\t\t\t\tconst responseData = await harvestApiRequest.call(this, requestMethod, qs, endpoint);\n\n\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t\t`The resource \"${resource}\" is not known!`,\n\t\t\t\t\t\t\t{ itemIndex: i },\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t} else if (resource === 'estimate') {\n\t\t\t\t\tif (operation === 'get') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//         get\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\trequestMethod = 'GET';\n\t\t\t\t\t\tconst id = this.getNodeParameter('id', i) as string;\n\n\t\t\t\t\t\tendpoint = `estimates/${id}`;\n\n\t\t\t\t\t\tconst responseData = await harvestApiRequest.call(this, requestMethod, qs, endpoint);\n\n\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t} else if (operation === 'getAll') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//         getAll\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\tconst responseData: IDataObject[] = await getAllResource.call(this, 'estimates', i);\n\n\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData),\n\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t} else if (operation === 'create') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//         create\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\trequestMethod = 'POST';\n\t\t\t\t\t\tendpoint = 'estimates';\n\n\t\t\t\t\t\tbody.client_id = this.getNodeParameter('clientId', i) as string;\n\n\t\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i);\n\t\t\t\t\t\tObject.assign(body, additionalFields);\n\n\t\t\t\t\t\tconst responseData = await harvestApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\trequestMethod,\n\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t\tendpoint,\n\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t} else if (operation === 'update') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//         update\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\trequestMethod = 'PATCH';\n\t\t\t\t\t\tconst id = this.getNodeParameter('id', i) as string;\n\t\t\t\t\t\tendpoint = `estimates/${id}`;\n\n\t\t\t\t\t\tconst updateFields = this.getNodeParameter('updateFields', i);\n\t\t\t\t\t\tObject.assign(qs, updateFields);\n\n\t\t\t\t\t\tconst responseData = await harvestApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\trequestMethod,\n\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t\tendpoint,\n\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t} else if (operation === 'delete') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//         delete\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\trequestMethod = 'DELETE';\n\t\t\t\t\t\tconst id = this.getNodeParameter('id', i) as string;\n\t\t\t\t\t\tendpoint = `estimates/${id}`;\n\n\t\t\t\t\t\tconst responseData = await harvestApiRequest.call(this, requestMethod, qs, endpoint);\n\n\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t\t`The resource \"${resource}\" is not known!`,\n\t\t\t\t\t\t\t{ itemIndex: i },\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthrow new NodeOperationError(this.getNode(), `The resource \"${resource}\" is not known!`, {\n\t\t\t\t\t\titemIndex: i,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\tconst executionErrorData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\tthis.helpers.returnJsonArray({ error: error.message }),\n\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t);\n\n\t\t\t\t\treturnData.push(...executionErrorData);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\n\t\treturn [returnData];\n\t}\n}\n"],"mappings":"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","names":[]}