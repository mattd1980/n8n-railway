{"version":3,"sources":["../../../nodes/CircleCi/CircleCi.node.ts"],"sourcesContent":["import type {\n\tIExecuteFunctions,\n\tIDataObject,\n\tINodeExecutionData,\n\tINodeType,\n\tINodeTypeDescription,\n} from 'n8n-workflow';\nimport { NodeConnectionTypes } from 'n8n-workflow';\n\nimport { circleciApiRequest, circleciApiRequestAllItems } from './GenericFunctions';\nimport { pipelineFields, pipelineOperations } from './PipelineDescription';\n\nexport class CircleCi implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'CircleCI',\n\t\tname: 'circleCi',\n\n\t\ticon: { light: 'file:circleCi.svg', dark: 'file:circleCi.dark.svg' },\n\t\tgroup: ['output'],\n\t\tversion: 1,\n\t\tsubtitle: '={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}',\n\t\tdescription: 'Consume CircleCI API',\n\t\tdefaults: {\n\t\t\tname: 'CircleCI',\n\t\t},\n\t\tusableAsTool: true,\n\t\tinputs: [NodeConnectionTypes.Main],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tcredentials: [\n\t\t\t{\n\t\t\t\tname: 'circleCiApi',\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Resource',\n\t\t\t\tname: 'resource',\n\t\t\t\ttype: 'options',\n\t\t\t\tnoDataExpression: true,\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Pipeline',\n\t\t\t\t\t\tvalue: 'pipeline',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'pipeline',\n\t\t\t},\n\t\t\t...pipelineOperations,\n\t\t\t...pipelineFields,\n\t\t],\n\t};\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t\tconst items = this.getInputData();\n\t\tconst returnData: INodeExecutionData[] = [];\n\t\tconst length = items.length;\n\t\tconst qs: IDataObject = {};\n\t\tlet responseData;\n\t\tconst resource = this.getNodeParameter('resource', 0);\n\t\tconst operation = this.getNodeParameter('operation', 0);\n\n\t\tfor (let i = 0; i < length; i++) {\n\t\t\ttry {\n\t\t\t\tif (resource === 'pipeline') {\n\t\t\t\t\tif (operation === 'get') {\n\t\t\t\t\t\tconst vcs = this.getNodeParameter('vcs', i) as string;\n\t\t\t\t\t\tlet slug = this.getNodeParameter('projectSlug', i) as string;\n\t\t\t\t\t\tconst pipelineNumber = this.getNodeParameter('pipelineNumber', i) as number;\n\n\t\t\t\t\t\tslug = slug.replace(new RegExp(/\\//g), '%2F');\n\n\t\t\t\t\t\tconst endpoint = `/project/${vcs}/${slug}/pipeline/${pipelineNumber}`;\n\n\t\t\t\t\t\tresponseData = await circleciApiRequest.call(this, 'GET', endpoint, {}, qs);\n\t\t\t\t\t\tresponseData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tif (operation === 'getAll') {\n\t\t\t\t\t\tconst vcs = this.getNodeParameter('vcs', i) as string;\n\t\t\t\t\t\tconst filters = this.getNodeParameter('filters', i);\n\t\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', i);\n\t\t\t\t\t\tlet slug = this.getNodeParameter('projectSlug', i) as string;\n\n\t\t\t\t\t\tslug = slug.replace(new RegExp(/\\//g), '%2F');\n\n\t\t\t\t\t\tif (filters.branch) {\n\t\t\t\t\t\t\tqs.branch = filters.branch;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst endpoint = `/project/${vcs}/${slug}/pipeline`;\n\n\t\t\t\t\t\tif (returnAll) {\n\t\t\t\t\t\t\tresponseData = await circleciApiRequestAllItems.call(\n\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t'items',\n\t\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t\tendpoint,\n\t\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tqs.limit = this.getNodeParameter('limit', i);\n\t\t\t\t\t\t\tresponseData = await circleciApiRequest.call(this, 'GET', endpoint, {}, qs);\n\t\t\t\t\t\t\tresponseData = responseData.items;\n\t\t\t\t\t\t\tresponseData = responseData.splice(0, qs.limit);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresponseData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (operation === 'trigger') {\n\t\t\t\t\t\tconst vcs = this.getNodeParameter('vcs', i) as string;\n\t\t\t\t\t\tlet slug = this.getNodeParameter('projectSlug', i) as string;\n\n\t\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i);\n\n\t\t\t\t\t\tslug = slug.replace(new RegExp(/\\//g), '%2F');\n\n\t\t\t\t\t\tconst endpoint = `/project/${vcs}/${slug}/pipeline`;\n\n\t\t\t\t\t\tconst body: IDataObject = {};\n\n\t\t\t\t\t\tif (additionalFields.branch) {\n\t\t\t\t\t\t\tbody.branch = additionalFields.branch as string;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (additionalFields.tag) {\n\t\t\t\t\t\t\tbody.tag = additionalFields.tag as string;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await circleciApiRequest.call(this, 'POST', endpoint, body, qs);\n\t\t\t\t\t\tresponseData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturnData.push(...(responseData as INodeExecutionData[]));\n\t\t\t} catch (error) {\n\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\treturnData.push({ error: error.message, json: {}, itemIndex: i });\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\t\treturn [returnData];\n\t}\n}\n"],"mappings":"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","names":[]}