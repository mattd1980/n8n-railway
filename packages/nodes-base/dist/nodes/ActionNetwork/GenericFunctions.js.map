{"version":3,"sources":["../../../nodes/ActionNetwork/GenericFunctions.ts"],"sourcesContent":["import flow from 'lodash/flow';\nimport omit from 'lodash/omit';\nimport type {\n\tIDataObject,\n\tIExecuteFunctions,\n\tIHttpRequestMethods,\n\tILoadOptionsFunctions,\n\tIRequestOptions,\n} from 'n8n-workflow';\n\nimport type {\n\tAllFieldsUi,\n\tFieldWithPrimaryField,\n\tLinksFieldContainer,\n\tPersonResponse,\n\tPetitionResponse,\n\tResource,\n\tResponse,\n} from './types';\n\nexport async function actionNetworkApiRequest(\n\tthis: IExecuteFunctions | ILoadOptionsFunctions,\n\tmethod: IHttpRequestMethods,\n\tendpoint: string,\n\tbody: IDataObject = {},\n\tqs: IDataObject = {},\n) {\n\tconst options: IRequestOptions = {\n\t\tmethod,\n\t\tbody,\n\t\tqs,\n\t\turi: `https://actionnetwork.org/api/v2${endpoint}`,\n\t\tjson: true,\n\t};\n\n\tif (!Object.keys(body).length) {\n\t\tdelete options.body;\n\t}\n\n\tif (!Object.keys(qs).length) {\n\t\tdelete options.qs;\n\t}\n\n\treturn await this.helpers.requestWithAuthentication.call(this, 'actionNetworkApi', options);\n}\n\n/**\n * Convert an endpoint to the key needed to access data in the response.\n */\nconst toItemsKey = (endpoint: string) => {\n\t// handle two-resource endpoint\n\tif (\n\t\tendpoint.includes('/signatures') ||\n\t\tendpoint.includes('/attendances') ||\n\t\tendpoint.includes('/taggings')\n\t) {\n\t\tendpoint = endpoint.split('/').pop()!;\n\t}\n\n\treturn `osdi:${endpoint.replace(/\\//g, '')}`;\n};\n\nexport async function handleListing(\n\tthis: IExecuteFunctions | ILoadOptionsFunctions,\n\tmethod: IHttpRequestMethods,\n\tendpoint: string,\n\tbody: IDataObject = {},\n\tqs: IDataObject = {},\n\toptions?: { returnAll: true },\n) {\n\tconst returnData: IDataObject[] = [];\n\tlet responseData;\n\n\tqs.perPage = 25; // max\n\tqs.page = 1;\n\n\tconst returnAll = options?.returnAll ?? (this.getNodeParameter('returnAll', 0, false) as boolean);\n\tconst limit = this.getNodeParameter('limit', 0, 0) as number;\n\n\tconst itemsKey = toItemsKey(endpoint);\n\n\tdo {\n\t\tresponseData = await actionNetworkApiRequest.call(\n\t\t\tthis,\n\t\t\tmethod as IHttpRequestMethods,\n\t\t\tendpoint,\n\t\t\tbody,\n\t\t\tqs,\n\t\t);\n\t\tconst items = responseData._embedded[itemsKey];\n\t\treturnData.push(...(items as IDataObject[]));\n\n\t\tif (!returnAll && returnData.length >= limit) {\n\t\t\treturn returnData.slice(0, limit);\n\t\t}\n\n\t\tif (responseData._links?.next?.href) {\n\t\t\tconst queryString = new URLSearchParams(\n\t\t\t\tresponseData._links.next.href.split('?')[1] as string,\n\t\t\t);\n\t\t\tqs.page = queryString.get('page') as string;\n\t\t}\n\t} while (responseData._links?.next);\n\n\treturn returnData;\n}\n\n// ----------------------------------------\n//              helpers\n// ----------------------------------------\n\nexport const extractId = (response: LinksFieldContainer) => {\n\treturn response._links.self.href.split('/').pop() ?? 'No ID';\n};\n\nexport const makeOsdiLink = (personId: string) => {\n\treturn {\n\t\t_links: {\n\t\t\t'osdi:person': {\n\t\t\t\thref: `https://actionnetwork.org/api/v2/people/${personId}`,\n\t\t\t},\n\t\t},\n\t};\n};\n\nexport const isPrimary = (field: FieldWithPrimaryField) => field.primary;\n\n// ----------------------------------------\n//           field adjusters\n// ----------------------------------------\n\nfunction adjustLanguagesSpoken(allFields: AllFieldsUi) {\n\tif (!allFields.languages_spoken) return allFields;\n\n\treturn {\n\t\t...omit(allFields, ['languages_spoken']),\n\t\tlanguages_spoken: [allFields.languages_spoken],\n\t};\n}\n\nfunction adjustPhoneNumbers(allFields: AllFieldsUi) {\n\tif (!allFields.phone_numbers) return allFields;\n\n\treturn {\n\t\t...omit(allFields, ['phone_numbers']),\n\t\tphone_numbers: [allFields.phone_numbers.phone_numbers_fields],\n\t};\n}\n\nfunction adjustPostalAddresses(allFields: AllFieldsUi) {\n\tif (!allFields.postal_addresses) return allFields;\n\n\tif (allFields.postal_addresses.postal_addresses_fields.length) {\n\t\tconst adjusted = allFields.postal_addresses.postal_addresses_fields.map((field) => {\n\t\t\tconst copy: IDataObject = {\n\t\t\t\t...omit(field, ['address_lines', 'location']),\n\t\t\t};\n\n\t\t\tif (field.address_lines) {\n\t\t\t\tcopy.address_lines = [field.address_lines];\n\t\t\t}\n\n\t\t\tif (field.location) {\n\t\t\t\tcopy.location = field.location.location_fields;\n\t\t\t}\n\n\t\t\treturn copy;\n\t\t});\n\n\t\treturn {\n\t\t\t...omit(allFields, ['postal_addresses']),\n\t\t\tpostal_addresses: adjusted,\n\t\t};\n\t}\n}\n\nfunction adjustLocation(allFields: AllFieldsUi) {\n\tif (!allFields.location) return allFields;\n\n\tconst locationFields = allFields.location.postal_addresses_fields;\n\n\tconst adjusted: IDataObject = {\n\t\t...omit(locationFields, ['address_lines', 'location']),\n\t};\n\n\tif (locationFields.address_lines) {\n\t\tadjusted.address_lines = [locationFields.address_lines];\n\t}\n\n\tif (locationFields.location) {\n\t\tadjusted.location = locationFields.location.location_fields;\n\t}\n\n\treturn {\n\t\t...omit(allFields, ['location']),\n\t\tlocation: adjusted,\n\t};\n}\n\nfunction adjustTargets(allFields: AllFieldsUi) {\n\tif (!allFields.target) return allFields;\n\n\tconst adjusted = allFields.target.split(',').map((value) => ({ name: value }));\n\n\treturn {\n\t\t...omit(allFields, ['target']),\n\t\ttarget: adjusted,\n\t};\n}\n\n// ----------------------------------------\n//           payload adjusters\n// ----------------------------------------\n\nexport const adjustPersonPayload = flow(\n\tadjustLanguagesSpoken,\n\tadjustPhoneNumbers,\n\tadjustPostalAddresses,\n);\n\nexport const adjustPetitionPayload = adjustTargets;\n\nexport const adjustEventPayload = adjustLocation;\n\n// ----------------------------------------\n//           resource loaders\n// ----------------------------------------\n\nasync function loadResource(this: ILoadOptionsFunctions, resource: string) {\n\treturn await handleListing.call(this, 'GET', `/${resource}`, {}, {}, { returnAll: true });\n}\n\nexport const resourceLoaders = {\n\tasync getTags(this: ILoadOptionsFunctions) {\n\t\tconst tags = (await loadResource.call(this, 'tags')) as Array<\n\t\t\t{ name: string } & LinksFieldContainer\n\t\t>;\n\n\t\treturn tags.map((tag) => ({ name: tag.name, value: extractId(tag) }));\n\t},\n\n\tasync getTaggings(this: ILoadOptionsFunctions) {\n\t\tconst tagId = this.getNodeParameter('tagId', 0);\n\t\tconst endpoint = `/tags/${tagId}/taggings`;\n\n\t\t// two-resource endpoint, so direct call\n\t\tconst taggings = (await handleListing.call(\n\t\t\tthis,\n\t\t\t'GET',\n\t\t\tendpoint,\n\t\t\t{},\n\t\t\t{},\n\t\t\t{ returnAll: true },\n\t\t)) as LinksFieldContainer[];\n\n\t\treturn taggings.map((tagging) => {\n\t\t\tconst taggingId = extractId(tagging);\n\n\t\t\treturn {\n\t\t\t\tname: taggingId,\n\t\t\t\tvalue: taggingId,\n\t\t\t};\n\t\t});\n\t},\n};\n\n// ----------------------------------------\n//          response simplifiers\n// ----------------------------------------\nconst simplifyPersonResponse = (response: PersonResponse) => {\n\tconst emailAddress = response.email_addresses.filter(isPrimary);\n\tconst phoneNumber = response.phone_numbers.filter(isPrimary);\n\tconst postalAddress = response.postal_addresses.filter(isPrimary);\n\n\tconst fieldsToSimplify = [\n\t\t'identifiers',\n\t\t'email_addresses',\n\t\t'phone_numbers',\n\t\t'postal_addresses',\n\t\t'languages_spoken',\n\t\t'_links',\n\t];\n\n\treturn {\n\t\tid: extractId(response),\n\t\t...omit(response, fieldsToSimplify),\n\t\t...{ email_address: emailAddress[0].address || '' },\n\t\t...{ phone_number: phoneNumber[0].number || '' },\n\t\t...{\n\t\t\tpostal_address: {\n\t\t\t\t...(postalAddress && omit(postalAddress[0], 'address_lines')),\n\t\t\t\taddress_lines: postalAddress[0].address_lines ?? '',\n\t\t\t},\n\t\t},\n\t\tlanguage_spoken: response.languages_spoken[0],\n\t};\n};\n\nconst simplifyPetitionResponse = (response: PetitionResponse) => {\n\tconst fieldsToSimplify = ['identifiers', '_links', 'action_network:hidden', '_embedded'];\n\n\treturn {\n\t\tid: extractId(response),\n\t\t...omit(response, fieldsToSimplify),\n\t\tcreator: simplifyPersonResponse(response._embedded['osdi:creator']),\n\t};\n};\n\nexport const simplifyResponse = (response: Response, resource: Resource) => {\n\tif (resource === 'person') {\n\t\treturn simplifyPersonResponse(response as PersonResponse);\n\t} else if (resource === 'petition') {\n\t\treturn simplifyPetitionResponse(response as PetitionResponse);\n\t}\n\n\tconst fieldsToSimplify = ['identifiers', '_links', 'action_network:sponsor', 'reminders'];\n\n\treturn {\n\t\tid: extractId(response),\n\t\t...omit(response, fieldsToSimplify),\n\t};\n};\n"],"mappings":"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","names":["omit","flow"]}