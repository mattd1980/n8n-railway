{"version":3,"sources":["../../../nodes/ActionNetwork/ActionNetwork.node.ts"],"sourcesContent":["import type {\n\tIDataObject,\n\tIExecuteFunctions,\n\tINodeExecutionData,\n\tINodeType,\n\tINodeTypeDescription,\n} from 'n8n-workflow';\nimport { NodeConnectionTypes, NodeOperationError } from 'n8n-workflow';\n\nimport {\n\tattendanceFields,\n\tattendanceOperations,\n\teventFields,\n\teventOperations,\n\tpersonFields,\n\tpersonOperations,\n\tpersonTagFields,\n\tpersonTagOperations,\n\tpetitionFields,\n\tpetitionOperations,\n\tsignatureFields,\n\tsignatureOperations,\n\ttagFields,\n\ttagOperations,\n} from './descriptions';\nimport {\n\tactionNetworkApiRequest,\n\tadjustEventPayload,\n\tadjustPersonPayload,\n\tadjustPetitionPayload,\n\thandleListing,\n\tmakeOsdiLink,\n\tresourceLoaders,\n\tsimplifyResponse,\n} from './GenericFunctions';\nimport type {\n\tAllFieldsUi,\n\tEmailAddressUi,\n\tOperation,\n\tPersonResponse,\n\tResource,\n\tResponse,\n} from './types';\n\nexport class ActionNetwork implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'Action Network',\n\t\tname: 'actionNetwork',\n\t\ticon: 'file:actionNetwork.svg',\n\t\tgroup: ['transform'],\n\t\tversion: 1,\n\t\tsubtitle: '={{$parameter[\"resource\"] + \": \" + $parameter[\"operation\"]}}',\n\t\tdescription: 'Consume the Action Network API',\n\t\tdefaults: {\n\t\t\tname: 'Action Network',\n\t\t},\n\t\tusableAsTool: true,\n\t\tinputs: [NodeConnectionTypes.Main],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tcredentials: [\n\t\t\t{\n\t\t\t\tname: 'actionNetworkApi',\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Resource',\n\t\t\t\tname: 'resource',\n\t\t\t\ttype: 'options',\n\t\t\t\tnoDataExpression: true,\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Attendance',\n\t\t\t\t\t\tvalue: 'attendance',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Event',\n\t\t\t\t\t\tvalue: 'event',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Person',\n\t\t\t\t\t\tvalue: 'person',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Person Tag',\n\t\t\t\t\t\tvalue: 'personTag',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Petition',\n\t\t\t\t\t\tvalue: 'petition',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Signature',\n\t\t\t\t\t\tvalue: 'signature',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Tag',\n\t\t\t\t\t\tvalue: 'tag',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'attendance',\n\t\t\t},\n\t\t\t...attendanceOperations,\n\t\t\t...attendanceFields,\n\t\t\t...eventOperations,\n\t\t\t...eventFields,\n\t\t\t...personOperations,\n\t\t\t...personFields,\n\t\t\t...petitionOperations,\n\t\t\t...petitionFields,\n\t\t\t...signatureOperations,\n\t\t\t...signatureFields,\n\t\t\t...tagOperations,\n\t\t\t...tagFields,\n\t\t\t...personTagOperations,\n\t\t\t...personTagFields,\n\t\t],\n\t};\n\n\tmethods = {\n\t\tloadOptions: resourceLoaders,\n\t};\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t\tconst items = this.getInputData();\n\t\tconst returnData: IDataObject[] = [];\n\n\t\tconst resource = this.getNodeParameter('resource', 0) as Resource;\n\t\tconst operation = this.getNodeParameter('operation', 0) as Operation;\n\n\t\tlet response;\n\n\t\tfor (let i = 0; i < items.length; i++) {\n\t\t\ttry {\n\t\t\t\tif (resource === 'attendance') {\n\t\t\t\t\t// **********************************************************************\n\t\t\t\t\t//                               attendance\n\t\t\t\t\t// **********************************************************************\n\n\t\t\t\t\t// https://actionnetwork.org/docs/v2/attendances\n\n\t\t\t\t\tif (operation === 'create') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//            attendance: create\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst personId = this.getNodeParameter('personId', i) as string;\n\t\t\t\t\t\tconst eventId = this.getNodeParameter('eventId', i);\n\n\t\t\t\t\t\tconst body = makeOsdiLink(personId) as IDataObject;\n\n\t\t\t\t\t\tconst endpoint = `/events/${eventId}/attendances`;\n\t\t\t\t\t\tresponse = await actionNetworkApiRequest.call(this, 'POST', endpoint, body);\n\t\t\t\t\t} else if (operation === 'get') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//             attendance: get\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst eventId = this.getNodeParameter('eventId', i);\n\t\t\t\t\t\tconst attendanceId = this.getNodeParameter('attendanceId', i);\n\n\t\t\t\t\t\tconst endpoint = `/events/${eventId}/attendances/${attendanceId}`;\n\t\t\t\t\t\tresponse = await actionNetworkApiRequest.call(this, 'GET', endpoint);\n\t\t\t\t\t} else if (operation === 'getAll') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//            attendance: getAll\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst eventId = this.getNodeParameter('eventId', i);\n\n\t\t\t\t\t\tconst endpoint = `/events/${eventId}/attendances`;\n\t\t\t\t\t\tresponse = await handleListing.call(this, 'GET', endpoint);\n\t\t\t\t\t}\n\t\t\t\t} else if (resource === 'event') {\n\t\t\t\t\t// **********************************************************************\n\t\t\t\t\t//                                 event\n\t\t\t\t\t// **********************************************************************\n\n\t\t\t\t\t// https://actionnetwork.org/docs/v2/events\n\n\t\t\t\t\tif (operation === 'create') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//              event: create\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst body = {\n\t\t\t\t\t\t\torigin_system: this.getNodeParameter('originSystem', i),\n\t\t\t\t\t\t\ttitle: this.getNodeParameter('title', i),\n\t\t\t\t\t\t} as IDataObject;\n\n\t\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i) as AllFieldsUi;\n\n\t\t\t\t\t\tif (Object.keys(additionalFields).length) {\n\t\t\t\t\t\t\tObject.assign(body, adjustEventPayload(additionalFields));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponse = await actionNetworkApiRequest.call(this, 'POST', '/events', body);\n\t\t\t\t\t} else if (operation === 'get') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//                event: get\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst eventId = this.getNodeParameter('eventId', i);\n\n\t\t\t\t\t\tresponse = await actionNetworkApiRequest.call(this, 'GET', `/events/${eventId}`);\n\t\t\t\t\t} else if (operation === 'getAll') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//              event: getAll\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tresponse = await handleListing.call(this, 'GET', '/events');\n\t\t\t\t\t}\n\t\t\t\t} else if (resource === 'person') {\n\t\t\t\t\t// **********************************************************************\n\t\t\t\t\t//                                 person\n\t\t\t\t\t// **********************************************************************\n\n\t\t\t\t\t// https://actionnetwork.org/docs/v2/people\n\n\t\t\t\t\tif (operation === 'create') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//              person: create\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst emailAddresses = this.getNodeParameter('email_addresses', i) as EmailAddressUi;\n\n\t\t\t\t\t\tconst body = {\n\t\t\t\t\t\t\tperson: {\n\t\t\t\t\t\t\t\temail_addresses: [emailAddresses.email_addresses_fields], // only one accepted by API\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t} as IDataObject;\n\n\t\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i);\n\n\t\t\t\t\t\tif (Object.keys(additionalFields).length && body.person) {\n\t\t\t\t\t\t\tObject.assign(body.person, adjustPersonPayload(additionalFields));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponse = await actionNetworkApiRequest.call(this, 'POST', '/people', body);\n\t\t\t\t\t} else if (operation === 'get') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//               person: get\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst personId = this.getNodeParameter('personId', i);\n\n\t\t\t\t\t\tresponse = (await actionNetworkApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t`/people/${personId}`,\n\t\t\t\t\t\t)) as PersonResponse;\n\t\t\t\t\t} else if (operation === 'getAll') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//              person: getAll\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tresponse = (await handleListing.call(this, 'GET', '/people')) as PersonResponse[];\n\t\t\t\t\t} else if (operation === 'update') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//              person: update\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst personId = this.getNodeParameter('personId', i);\n\t\t\t\t\t\tconst body = {} as IDataObject;\n\t\t\t\t\t\tconst updateFields = this.getNodeParameter('updateFields', i);\n\n\t\t\t\t\t\tif (Object.keys(updateFields).length) {\n\t\t\t\t\t\t\tObject.assign(body, adjustPersonPayload(updateFields));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t\t\t`Please enter at least one field to update for the ${resource}.`,\n\t\t\t\t\t\t\t\t{ itemIndex: i },\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponse = await actionNetworkApiRequest.call(this, 'PUT', `/people/${personId}`, body);\n\t\t\t\t\t}\n\t\t\t\t} else if (resource === 'petition') {\n\t\t\t\t\t// **********************************************************************\n\t\t\t\t\t//                                petition\n\t\t\t\t\t// **********************************************************************\n\n\t\t\t\t\t// https://actionnetwork.org/docs/v2/petitions\n\n\t\t\t\t\tif (operation === 'create') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//             petition: create\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst body = {\n\t\t\t\t\t\t\torigin_system: this.getNodeParameter('originSystem', i),\n\t\t\t\t\t\t\ttitle: this.getNodeParameter('title', i),\n\t\t\t\t\t\t} as IDataObject;\n\n\t\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i) as AllFieldsUi;\n\n\t\t\t\t\t\tif (Object.keys(additionalFields).length) {\n\t\t\t\t\t\t\tObject.assign(body, adjustPetitionPayload(additionalFields));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponse = await actionNetworkApiRequest.call(this, 'POST', '/petitions', body);\n\t\t\t\t\t} else if (operation === 'get') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//              petition: get\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst petitionId = this.getNodeParameter('petitionId', i);\n\n\t\t\t\t\t\tconst endpoint = `/petitions/${petitionId}`;\n\t\t\t\t\t\tresponse = await actionNetworkApiRequest.call(this, 'GET', endpoint);\n\t\t\t\t\t} else if (operation === 'getAll') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//             petition: getAll\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tresponse = await handleListing.call(this, 'GET', '/petitions');\n\t\t\t\t\t} else if (operation === 'update') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//             petition: update\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst petitionId = this.getNodeParameter('petitionId', i);\n\t\t\t\t\t\tconst body = {} as IDataObject;\n\t\t\t\t\t\tconst updateFields = this.getNodeParameter('updateFields', i) as AllFieldsUi;\n\n\t\t\t\t\t\tif (Object.keys(updateFields).length) {\n\t\t\t\t\t\t\tObject.assign(body, adjustPetitionPayload(updateFields));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t\t\t`Please enter at least one field to update for the ${resource}.`,\n\t\t\t\t\t\t\t\t{ itemIndex: i },\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponse = await actionNetworkApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'PUT',\n\t\t\t\t\t\t\t`/petitions/${petitionId}`,\n\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t} else if (resource === 'signature') {\n\t\t\t\t\t// **********************************************************************\n\t\t\t\t\t//                               signature\n\t\t\t\t\t// **********************************************************************\n\n\t\t\t\t\t// https://actionnetwork.org/docs/v2/signatures\n\n\t\t\t\t\tif (operation === 'create') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//            signature: create\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst personId = this.getNodeParameter('personId', i) as string;\n\t\t\t\t\t\tconst petitionId = this.getNodeParameter('petitionId', i);\n\n\t\t\t\t\t\tconst body = makeOsdiLink(personId) as IDataObject;\n\n\t\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i);\n\n\t\t\t\t\t\tif (Object.keys(additionalFields).length) {\n\t\t\t\t\t\t\tObject.assign(body, additionalFields);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst endpoint = `/petitions/${petitionId}/signatures`;\n\t\t\t\t\t\tresponse = await actionNetworkApiRequest.call(this, 'POST', endpoint, body);\n\t\t\t\t\t} else if (operation === 'get') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//              signature: get\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst petitionId = this.getNodeParameter('petitionId', i);\n\t\t\t\t\t\tconst signatureId = this.getNodeParameter('signatureId', i);\n\n\t\t\t\t\t\tconst endpoint = `/petitions/${petitionId}/signatures/${signatureId}`;\n\t\t\t\t\t\tresponse = await actionNetworkApiRequest.call(this, 'GET', endpoint);\n\t\t\t\t\t} else if (operation === 'getAll') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//            signature: getAll\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst petitionId = this.getNodeParameter('petitionId', i);\n\n\t\t\t\t\t\tconst endpoint = `/petitions/${petitionId}/signatures`;\n\t\t\t\t\t\tresponse = await handleListing.call(this, 'GET', endpoint);\n\t\t\t\t\t} else if (operation === 'update') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//            signature: update\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst petitionId = this.getNodeParameter('petitionId', i);\n\t\t\t\t\t\tconst signatureId = this.getNodeParameter('signatureId', i);\n\t\t\t\t\t\tconst body = {};\n\t\t\t\t\t\tconst updateFields = this.getNodeParameter('updateFields', i) as AllFieldsUi;\n\n\t\t\t\t\t\tif (Object.keys(updateFields).length) {\n\t\t\t\t\t\t\tObject.assign(body, updateFields);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t\t\t`Please enter at least one field to update for the ${resource}.`,\n\t\t\t\t\t\t\t\t{ itemIndex: i },\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst endpoint = `/petitions/${petitionId}/signatures/${signatureId}`;\n\t\t\t\t\t\tresponse = await actionNetworkApiRequest.call(this, 'PUT', endpoint, body);\n\t\t\t\t\t}\n\t\t\t\t} else if (resource === 'tag') {\n\t\t\t\t\t// **********************************************************************\n\t\t\t\t\t//                                  tag\n\t\t\t\t\t// **********************************************************************\n\n\t\t\t\t\t// https://actionnetwork.org/docs/v2/tags\n\n\t\t\t\t\tif (operation === 'create') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//               tag: create\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst body = {\n\t\t\t\t\t\t\tname: this.getNodeParameter('name', i),\n\t\t\t\t\t\t} as IDataObject;\n\n\t\t\t\t\t\tresponse = await actionNetworkApiRequest.call(this, 'POST', '/tags', body);\n\t\t\t\t\t} else if (operation === 'get') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//                 tag: get\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst tagId = this.getNodeParameter('tagId', i);\n\n\t\t\t\t\t\tresponse = await actionNetworkApiRequest.call(this, 'GET', `/tags/${tagId}`);\n\t\t\t\t\t} else if (operation === 'getAll') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//               tag: getAll\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tresponse = await handleListing.call(this, 'GET', '/tags');\n\t\t\t\t\t}\n\t\t\t\t} else if (resource === 'personTag') {\n\t\t\t\t\t// **********************************************************************\n\t\t\t\t\t//                                personTag\n\t\t\t\t\t// **********************************************************************\n\n\t\t\t\t\t// https://actionnetwork.org/docs/v2/taggings\n\n\t\t\t\t\tif (operation === 'add') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//             personTag: add\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst personId = this.getNodeParameter('personId', i) as string;\n\t\t\t\t\t\tconst tagId = this.getNodeParameter('tagId', i);\n\n\t\t\t\t\t\tconst body = makeOsdiLink(personId) as IDataObject;\n\n\t\t\t\t\t\tconst endpoint = `/tags/${tagId}/taggings`;\n\t\t\t\t\t\tresponse = await actionNetworkApiRequest.call(this, 'POST', endpoint, body);\n\t\t\t\t\t} else if (operation === 'remove') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//             personTag: remove\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst tagId = this.getNodeParameter('tagId', i);\n\t\t\t\t\t\tconst taggingId = this.getNodeParameter('taggingId', i);\n\n\t\t\t\t\t\tconst endpoint = `/tags/${tagId}/taggings/${taggingId}`;\n\t\t\t\t\t\tresponse = await actionNetworkApiRequest.call(this, 'DELETE', endpoint);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst simplify = this.getNodeParameter('simple', i, false) as boolean;\n\n\t\t\t\tif (simplify) {\n\t\t\t\t\tresponse =\n\t\t\t\t\t\toperation === 'getAll'\n\t\t\t\t\t\t\t? response.map((entry: Response) => simplifyResponse(entry, resource))\n\t\t\t\t\t\t\t: simplifyResponse(response as Response, resource);\n\t\t\t\t}\n\n\t\t\t\tArray.isArray(response)\n\t\t\t\t\t? returnData.push(...(response as IDataObject[]))\n\t\t\t\t\t: returnData.push(response as IDataObject);\n\t\t\t} catch (error) {\n\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\treturnData.push({ error: error.message });\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\t\treturn [this.helpers.returnJsonArray(returnData)];\n\t}\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA,0BAAwD;AAExD,0BAeO;AACP,8BASO;AAUA,MAAM,cAAmC;AAAA,EAAzC;AACN,uBAAoC;AAAA,MACnC,aAAa;AAAA,MACb,MAAM;AAAA,MACN,MAAM;AAAA,MACN,OAAO,CAAC,WAAW;AAAA,MACnB,SAAS;AAAA,MACT,UAAU;AAAA,MACV,aAAa;AAAA,MACb,UAAU;AAAA,QACT,MAAM;AAAA,MACP;AAAA,MACA,cAAc;AAAA,MACd,QAAQ,CAAC,wCAAoB,IAAI;AAAA,MACjC,SAAS,CAAC,wCAAoB,IAAI;AAAA,MAClC,aAAa;AAAA,QACZ;AAAA,UACC,MAAM;AAAA,UACN,UAAU;AAAA,QACX;AAAA,MACD;AAAA,MACA,YAAY;AAAA,QACX;AAAA,UACC,aAAa;AAAA,UACb,MAAM;AAAA,UACN,MAAM;AAAA,UACN,kBAAkB;AAAA,UAClB,SAAS;AAAA,YACR;AAAA,cACC,MAAM;AAAA,cACN,OAAO;AAAA,YACR;AAAA,YACA;AAAA,cACC,MAAM;AAAA,cACN,OAAO;AAAA,YACR;AAAA,YACA;AAAA,cACC,MAAM;AAAA,cACN,OAAO;AAAA,YACR;AAAA,YACA;AAAA,cACC,MAAM;AAAA,cACN,OAAO;AAAA,YACR;AAAA,YACA;AAAA,cACC,MAAM;AAAA,cACN,OAAO;AAAA,YACR;AAAA,YACA;AAAA,cACC,MAAM;AAAA,cACN,OAAO;AAAA,YACR;AAAA,YACA;AAAA,cACC,MAAM;AAAA,cACN,OAAO;AAAA,YACR;AAAA,UACD;AAAA,UACA,SAAS;AAAA,QACV;AAAA,QACA,GAAG;AAAA,QACH,GAAG;AAAA,QACH,GAAG;AAAA,QACH,GAAG;AAAA,QACH,GAAG;AAAA,QACH,GAAG;AAAA,QACH,GAAG;AAAA,QACH,GAAG;AAAA,QACH,GAAG;AAAA,QACH,GAAG;AAAA,QACH,GAAG;AAAA,QACH,GAAG;AAAA,QACH,GAAG;AAAA,QACH,GAAG;AAAA,MACJ;AAAA,IACD;AAEA,mBAAU;AAAA,MACT,aAAa;AAAA,IACd;AAAA;AAAA,EAEA,MAAM,UAAkE;AACvE,UAAM,QAAQ,KAAK,aAAa;AAChC,UAAM,aAA4B,CAAC;AAEnC,UAAM,WAAW,KAAK,iBAAiB,YAAY,CAAC;AACpD,UAAM,YAAY,KAAK,iBAAiB,aAAa,CAAC;AAEtD,QAAI;AAEJ,aAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACtC,UAAI;AACH,YAAI,aAAa,cAAc;AAO9B,cAAI,cAAc,UAAU;AAK3B,kBAAM,WAAW,KAAK,iBAAiB,YAAY,CAAC;AACpD,kBAAM,UAAU,KAAK,iBAAiB,WAAW,CAAC;AAElD,kBAAM,WAAO,sCAAa,QAAQ;AAElC,kBAAM,WAAW,WAAW,OAAO;AACnC,uBAAW,MAAM,gDAAwB,KAAK,MAAM,QAAQ,UAAU,IAAI;AAAA,UAC3E,WAAW,cAAc,OAAO;AAK/B,kBAAM,UAAU,KAAK,iBAAiB,WAAW,CAAC;AAClD,kBAAM,eAAe,KAAK,iBAAiB,gBAAgB,CAAC;AAE5D,kBAAM,WAAW,WAAW,OAAO,gBAAgB,YAAY;AAC/D,uBAAW,MAAM,gDAAwB,KAAK,MAAM,OAAO,QAAQ;AAAA,UACpE,WAAW,cAAc,UAAU;AAKlC,kBAAM,UAAU,KAAK,iBAAiB,WAAW,CAAC;AAElD,kBAAM,WAAW,WAAW,OAAO;AACnC,uBAAW,MAAM,sCAAc,KAAK,MAAM,OAAO,QAAQ;AAAA,UAC1D;AAAA,QACD,WAAW,aAAa,SAAS;AAOhC,cAAI,cAAc,UAAU;AAK3B,kBAAM,OAAO;AAAA,cACZ,eAAe,KAAK,iBAAiB,gBAAgB,CAAC;AAAA,cACtD,OAAO,KAAK,iBAAiB,SAAS,CAAC;AAAA,YACxC;AAEA,kBAAM,mBAAmB,KAAK,iBAAiB,oBAAoB,CAAC;AAEpE,gBAAI,OAAO,KAAK,gBAAgB,EAAE,QAAQ;AACzC,qBAAO,OAAO,UAAM,4CAAmB,gBAAgB,CAAC;AAAA,YACzD;AAEA,uBAAW,MAAM,gDAAwB,KAAK,MAAM,QAAQ,WAAW,IAAI;AAAA,UAC5E,WAAW,cAAc,OAAO;AAK/B,kBAAM,UAAU,KAAK,iBAAiB,WAAW,CAAC;AAElD,uBAAW,MAAM,gDAAwB,KAAK,MAAM,OAAO,WAAW,OAAO,EAAE;AAAA,UAChF,WAAW,cAAc,UAAU;AAKlC,uBAAW,MAAM,sCAAc,KAAK,MAAM,OAAO,SAAS;AAAA,UAC3D;AAAA,QACD,WAAW,aAAa,UAAU;AAOjC,cAAI,cAAc,UAAU;AAK3B,kBAAM,iBAAiB,KAAK,iBAAiB,mBAAmB,CAAC;AAEjE,kBAAM,OAAO;AAAA,cACZ,QAAQ;AAAA,gBACP,iBAAiB,CAAC,eAAe,sBAAsB;AAAA;AAAA,cACxD;AAAA,YACD;AAEA,kBAAM,mBAAmB,KAAK,iBAAiB,oBAAoB,CAAC;AAEpE,gBAAI,OAAO,KAAK,gBAAgB,EAAE,UAAU,KAAK,QAAQ;AACxD,qBAAO,OAAO,KAAK,YAAQ,6CAAoB,gBAAgB,CAAC;AAAA,YACjE;AAEA,uBAAW,MAAM,gDAAwB,KAAK,MAAM,QAAQ,WAAW,IAAI;AAAA,UAC5E,WAAW,cAAc,OAAO;AAK/B,kBAAM,WAAW,KAAK,iBAAiB,YAAY,CAAC;AAEpD,uBAAY,MAAM,gDAAwB;AAAA,cACzC;AAAA,cACA;AAAA,cACA,WAAW,QAAQ;AAAA,YACpB;AAAA,UACD,WAAW,cAAc,UAAU;AAKlC,uBAAY,MAAM,sCAAc,KAAK,MAAM,OAAO,SAAS;AAAA,UAC5D,WAAW,cAAc,UAAU;AAKlC,kBAAM,WAAW,KAAK,iBAAiB,YAAY,CAAC;AACpD,kBAAM,OAAO,CAAC;AACd,kBAAM,eAAe,KAAK,iBAAiB,gBAAgB,CAAC;AAE5D,gBAAI,OAAO,KAAK,YAAY,EAAE,QAAQ;AACrC,qBAAO,OAAO,UAAM,6CAAoB,YAAY,CAAC;AAAA,YACtD,OAAO;AACN,oBAAM,IAAI;AAAA,gBACT,KAAK,QAAQ;AAAA,gBACb,qDAAqD,QAAQ;AAAA,gBAC7D,EAAE,WAAW,EAAE;AAAA,cAChB;AAAA,YACD;AAEA,uBAAW,MAAM,gDAAwB,KAAK,MAAM,OAAO,WAAW,QAAQ,IAAI,IAAI;AAAA,UACvF;AAAA,QACD,WAAW,aAAa,YAAY;AAOnC,cAAI,cAAc,UAAU;AAK3B,kBAAM,OAAO;AAAA,cACZ,eAAe,KAAK,iBAAiB,gBAAgB,CAAC;AAAA,cACtD,OAAO,KAAK,iBAAiB,SAAS,CAAC;AAAA,YACxC;AAEA,kBAAM,mBAAmB,KAAK,iBAAiB,oBAAoB,CAAC;AAEpE,gBAAI,OAAO,KAAK,gBAAgB,EAAE,QAAQ;AACzC,qBAAO,OAAO,UAAM,+CAAsB,gBAAgB,CAAC;AAAA,YAC5D;AAEA,uBAAW,MAAM,gDAAwB,KAAK,MAAM,QAAQ,cAAc,IAAI;AAAA,UAC/E,WAAW,cAAc,OAAO;AAK/B,kBAAM,aAAa,KAAK,iBAAiB,cAAc,CAAC;AAExD,kBAAM,WAAW,cAAc,UAAU;AACzC,uBAAW,MAAM,gDAAwB,KAAK,MAAM,OAAO,QAAQ;AAAA,UACpE,WAAW,cAAc,UAAU;AAKlC,uBAAW,MAAM,sCAAc,KAAK,MAAM,OAAO,YAAY;AAAA,UAC9D,WAAW,cAAc,UAAU;AAKlC,kBAAM,aAAa,KAAK,iBAAiB,cAAc,CAAC;AACxD,kBAAM,OAAO,CAAC;AACd,kBAAM,eAAe,KAAK,iBAAiB,gBAAgB,CAAC;AAE5D,gBAAI,OAAO,KAAK,YAAY,EAAE,QAAQ;AACrC,qBAAO,OAAO,UAAM,+CAAsB,YAAY,CAAC;AAAA,YACxD,OAAO;AACN,oBAAM,IAAI;AAAA,gBACT,KAAK,QAAQ;AAAA,gBACb,qDAAqD,QAAQ;AAAA,gBAC7D,EAAE,WAAW,EAAE;AAAA,cAChB;AAAA,YACD;AAEA,uBAAW,MAAM,gDAAwB;AAAA,cACxC;AAAA,cACA;AAAA,cACA,cAAc,UAAU;AAAA,cACxB;AAAA,YACD;AAAA,UACD;AAAA,QACD,WAAW,aAAa,aAAa;AAOpC,cAAI,cAAc,UAAU;AAK3B,kBAAM,WAAW,KAAK,iBAAiB,YAAY,CAAC;AACpD,kBAAM,aAAa,KAAK,iBAAiB,cAAc,CAAC;AAExD,kBAAM,WAAO,sCAAa,QAAQ;AAElC,kBAAM,mBAAmB,KAAK,iBAAiB,oBAAoB,CAAC;AAEpE,gBAAI,OAAO,KAAK,gBAAgB,EAAE,QAAQ;AACzC,qBAAO,OAAO,MAAM,gBAAgB;AAAA,YACrC;AAEA,kBAAM,WAAW,cAAc,UAAU;AACzC,uBAAW,MAAM,gDAAwB,KAAK,MAAM,QAAQ,UAAU,IAAI;AAAA,UAC3E,WAAW,cAAc,OAAO;AAK/B,kBAAM,aAAa,KAAK,iBAAiB,cAAc,CAAC;AACxD,kBAAM,cAAc,KAAK,iBAAiB,eAAe,CAAC;AAE1D,kBAAM,WAAW,cAAc,UAAU,eAAe,WAAW;AACnE,uBAAW,MAAM,gDAAwB,KAAK,MAAM,OAAO,QAAQ;AAAA,UACpE,WAAW,cAAc,UAAU;AAKlC,kBAAM,aAAa,KAAK,iBAAiB,cAAc,CAAC;AAExD,kBAAM,WAAW,cAAc,UAAU;AACzC,uBAAW,MAAM,sCAAc,KAAK,MAAM,OAAO,QAAQ;AAAA,UAC1D,WAAW,cAAc,UAAU;AAKlC,kBAAM,aAAa,KAAK,iBAAiB,cAAc,CAAC;AACxD,kBAAM,cAAc,KAAK,iBAAiB,eAAe,CAAC;AAC1D,kBAAM,OAAO,CAAC;AACd,kBAAM,eAAe,KAAK,iBAAiB,gBAAgB,CAAC;AAE5D,gBAAI,OAAO,KAAK,YAAY,EAAE,QAAQ;AACrC,qBAAO,OAAO,MAAM,YAAY;AAAA,YACjC,OAAO;AACN,oBAAM,IAAI;AAAA,gBACT,KAAK,QAAQ;AAAA,gBACb,qDAAqD,QAAQ;AAAA,gBAC7D,EAAE,WAAW,EAAE;AAAA,cAChB;AAAA,YACD;AAEA,kBAAM,WAAW,cAAc,UAAU,eAAe,WAAW;AACnE,uBAAW,MAAM,gDAAwB,KAAK,MAAM,OAAO,UAAU,IAAI;AAAA,UAC1E;AAAA,QACD,WAAW,aAAa,OAAO;AAO9B,cAAI,cAAc,UAAU;AAK3B,kBAAM,OAAO;AAAA,cACZ,MAAM,KAAK,iBAAiB,QAAQ,CAAC;AAAA,YACtC;AAEA,uBAAW,MAAM,gDAAwB,KAAK,MAAM,QAAQ,SAAS,IAAI;AAAA,UAC1E,WAAW,cAAc,OAAO;AAK/B,kBAAM,QAAQ,KAAK,iBAAiB,SAAS,CAAC;AAE9C,uBAAW,MAAM,gDAAwB,KAAK,MAAM,OAAO,SAAS,KAAK,EAAE;AAAA,UAC5E,WAAW,cAAc,UAAU;AAKlC,uBAAW,MAAM,sCAAc,KAAK,MAAM,OAAO,OAAO;AAAA,UACzD;AAAA,QACD,WAAW,aAAa,aAAa;AAOpC,cAAI,cAAc,OAAO;AAKxB,kBAAM,WAAW,KAAK,iBAAiB,YAAY,CAAC;AACpD,kBAAM,QAAQ,KAAK,iBAAiB,SAAS,CAAC;AAE9C,kBAAM,WAAO,sCAAa,QAAQ;AAElC,kBAAM,WAAW,SAAS,KAAK;AAC/B,uBAAW,MAAM,gDAAwB,KAAK,MAAM,QAAQ,UAAU,IAAI;AAAA,UAC3E,WAAW,cAAc,UAAU;AAKlC,kBAAM,QAAQ,KAAK,iBAAiB,SAAS,CAAC;AAC9C,kBAAM,YAAY,KAAK,iBAAiB,aAAa,CAAC;AAEtD,kBAAM,WAAW,SAAS,KAAK,aAAa,SAAS;AACrD,uBAAW,MAAM,gDAAwB,KAAK,MAAM,UAAU,QAAQ;AAAA,UACvE;AAAA,QACD;AAEA,cAAM,WAAW,KAAK,iBAAiB,UAAU,GAAG,KAAK;AAEzD,YAAI,UAAU;AACb,qBACC,cAAc,WACX,SAAS,IAAI,CAAC,cAAoB,0CAAiB,OAAO,QAAQ,CAAC,QACnE,0CAAiB,UAAsB,QAAQ;AAAA,QACpD;AAEA,cAAM,QAAQ,QAAQ,IACnB,WAAW,KAAK,GAAI,QAA0B,IAC9C,WAAW,KAAK,QAAuB;AAAA,MAC3C,SAAS,OAAO;AACf,YAAI,KAAK,eAAe,GAAG;AAC1B,qBAAW,KAAK,EAAE,OAAO,MAAM,QAAQ,CAAC;AACxC;AAAA,QACD;AACA,cAAM;AAAA,MACP;AAAA,IACD;AACA,WAAO,CAAC,KAAK,QAAQ,gBAAgB,UAAU,CAAC;AAAA,EACjD;AACD;","names":[]}