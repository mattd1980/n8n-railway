{"version":3,"sources":["../../../../../../nodes/Discord/v2/actions/channel/getAll.operation.ts"],"sourcesContent":["import type {\n\tIDataObject,\n\tIExecuteFunctions,\n\tINodeExecutionData,\n\tINodeProperties,\n} from 'n8n-workflow';\n\nimport { returnAllOrLimit } from '../../../../../utils/descriptions';\nimport { updateDisplayOptions } from '../../../../../utils/utilities';\nimport { parseDiscordError, prepareErrorData } from '../../helpers/utils';\nimport { discordApiRequest } from '../../transport';\n\nconst properties: INodeProperties[] = [\n\t...returnAllOrLimit,\n\t{\n\t\tdisplayName: 'Options',\n\t\tname: 'options',\n\t\ttype: 'collection',\n\t\tplaceholder: 'Add option',\n\t\tdefault: {},\n\t\toptions: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Filter by Type',\n\t\t\t\tname: 'filter',\n\t\t\t\ttype: 'multiOptions',\n\t\t\t\tdefault: [],\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Guild Text',\n\t\t\t\t\t\tvalue: 0,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Guild Voice',\n\t\t\t\t\t\tvalue: 2,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Guild Category',\n\t\t\t\t\t\tvalue: 4,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t],\n\t},\n];\n\nconst displayOptions = {\n\tshow: {\n\t\tresource: ['channel'],\n\t\toperation: ['getAll'],\n\t},\n\thide: {\n\t\tauthentication: ['webhook'],\n\t},\n};\n\nexport const description = updateDisplayOptions(displayOptions, properties);\n\nexport async function execute(\n\tthis: IExecuteFunctions,\n\tguildId: string,\n): Promise<INodeExecutionData[]> {\n\tconst returnData: INodeExecutionData[] = [];\n\n\ttry {\n\t\tconst returnAll = this.getNodeParameter('returnAll', 0, false);\n\t\tlet response = await discordApiRequest.call(this, 'GET', `/guilds/${guildId}/channels`);\n\n\t\tif (!returnAll) {\n\t\t\tconst limit = this.getNodeParameter('limit', 0);\n\t\t\tresponse = (response as IDataObject[]).slice(0, limit);\n\t\t}\n\n\t\tconst options = this.getNodeParameter('options', 0, {});\n\n\t\tif (options.filter) {\n\t\t\tconst filter = options.filter as number[];\n\t\t\tresponse = (response as IDataObject[]).filter((item) => filter.includes(item.type as number));\n\t\t}\n\n\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\tthis.helpers.returnJsonArray(response),\n\t\t\t{ itemData: { item: 0 } },\n\t\t);\n\n\t\treturnData.push(...executionData);\n\t} catch (error) {\n\t\tconst err = parseDiscordError.call(this, error);\n\n\t\tif (this.continueOnFail()) {\n\t\t\treturnData.push(...prepareErrorData.call(this, err, 0));\n\t\t}\n\n\t\tthrow err;\n\t}\n\n\treturn returnData;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA,0BAAiC;AACjC,uBAAqC;AACrC,mBAAoD;AACpD,uBAAkC;AAElC,MAAM,aAAgC;AAAA,EACrC,GAAG;AAAA,EACH;AAAA,IACC,aAAa;AAAA,IACb,MAAM;AAAA,IACN,MAAM;AAAA,IACN,aAAa;AAAA,IACb,SAAS,CAAC;AAAA,IACV,SAAS;AAAA,MACR;AAAA,QACC,aAAa;AAAA,QACb,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS,CAAC;AAAA,QACV,SAAS;AAAA,UACR;AAAA,YACC,MAAM;AAAA,YACN,OAAO;AAAA,UACR;AAAA,UACA;AAAA,YACC,MAAM;AAAA,YACN,OAAO;AAAA,UACR;AAAA,UACA;AAAA,YACC,MAAM;AAAA,YACN,OAAO;AAAA,UACR;AAAA,QACD;AAAA,MACD;AAAA,IACD;AAAA,EACD;AACD;AAEA,MAAM,iBAAiB;AAAA,EACtB,MAAM;AAAA,IACL,UAAU,CAAC,SAAS;AAAA,IACpB,WAAW,CAAC,QAAQ;AAAA,EACrB;AAAA,EACA,MAAM;AAAA,IACL,gBAAgB,CAAC,SAAS;AAAA,EAC3B;AACD;AAEO,MAAM,kBAAc,uCAAqB,gBAAgB,UAAU;AAE1E,eAAsB,QAErB,SACgC;AAChC,QAAM,aAAmC,CAAC;AAE1C,MAAI;AACH,UAAM,YAAY,KAAK,iBAAiB,aAAa,GAAG,KAAK;AAC7D,QAAI,WAAW,MAAM,mCAAkB,KAAK,MAAM,OAAO,WAAW,OAAO,WAAW;AAEtF,QAAI,CAAC,WAAW;AACf,YAAM,QAAQ,KAAK,iBAAiB,SAAS,CAAC;AAC9C,iBAAY,SAA2B,MAAM,GAAG,KAAK;AAAA,IACtD;AAEA,UAAM,UAAU,KAAK,iBAAiB,WAAW,GAAG,CAAC,CAAC;AAEtD,QAAI,QAAQ,QAAQ;AACnB,YAAM,SAAS,QAAQ;AACvB,iBAAY,SAA2B,OAAO,CAAC,SAAS,OAAO,SAAS,KAAK,IAAc,CAAC;AAAA,IAC7F;AAEA,UAAM,gBAAgB,KAAK,QAAQ;AAAA,MAClC,KAAK,QAAQ,gBAAgB,QAAQ;AAAA,MACrC,EAAE,UAAU,EAAE,MAAM,EAAE,EAAE;AAAA,IACzB;AAEA,eAAW,KAAK,GAAG,aAAa;AAAA,EACjC,SAAS,OAAO;AACf,UAAM,MAAM,+BAAkB,KAAK,MAAM,KAAK;AAE9C,QAAI,KAAK,eAAe,GAAG;AAC1B,iBAAW,KAAK,GAAG,8BAAiB,KAAK,MAAM,KAAK,CAAC,CAAC;AAAA,IACvD;AAEA,UAAM;AAAA,EACP;AAEA,SAAO;AACR;","names":[]}