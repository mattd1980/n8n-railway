{"version":3,"sources":["../../../../../nodes/Discord/v2/transport/discord.api.ts"],"sourcesContent":["import type FormData from 'form-data';\nimport type {\n\tIDataObject,\n\tIExecuteFunctions,\n\tIExecuteSingleFunctions,\n\tIHookFunctions,\n\tIHttpRequestMethods,\n\tILoadOptionsFunctions,\n\tIRequestOptions,\n} from 'n8n-workflow';\nimport { sleep, NodeApiError, jsonParse } from 'n8n-workflow';\n\nimport { getCredentialsType, requestApi } from './helpers';\n\nexport async function discordApiRequest(\n\tthis: IHookFunctions | IExecuteFunctions | IExecuteSingleFunctions | ILoadOptionsFunctions,\n\tmethod: IHttpRequestMethods,\n\tendpoint: string,\n\tbody?: IDataObject,\n\tqs?: IDataObject,\n) {\n\tconst authentication = this.getNodeParameter('authentication', 0, 'webhook') as string;\n\tconst headers: IDataObject = {};\n\n\tconst credentialType = getCredentialsType(authentication);\n\n\tconst options: IRequestOptions = {\n\t\theaders,\n\t\tmethod,\n\t\tqs,\n\t\tbody,\n\t\turl: `https://discord.com/api/v10${endpoint}`,\n\t\tjson: true,\n\t};\n\n\tif (credentialType === 'discordWebhookApi') {\n\t\tconst credentials = await this.getCredentials('discordWebhookApi');\n\t\toptions.url = credentials.webhookUri as string;\n\t}\n\n\ttry {\n\t\tconst response = await requestApi.call(this, options, credentialType, endpoint);\n\n\t\tconst resetAfter = Number(response.headers['x-ratelimit-reset-after']);\n\t\tconst remaining = Number(response.headers['x-ratelimit-remaining']);\n\n\t\tif (remaining === 0) {\n\t\t\tawait sleep(resetAfter);\n\t\t} else {\n\t\t\tawait sleep(20); //prevent exceeding global rate limit of 50 requests per second\n\t\t}\n\n\t\treturn response.body || { success: true };\n\t} catch (error) {\n\t\tthrow new NodeApiError(this.getNode(), error);\n\t}\n}\n\nexport async function discordApiMultiPartRequest(\n\tthis: IHookFunctions | IExecuteFunctions | IExecuteSingleFunctions | ILoadOptionsFunctions,\n\tmethod: IHttpRequestMethods,\n\tendpoint: string,\n\tformData: FormData,\n) {\n\tconst headers: IDataObject = {\n\t\t'content-type': 'multipart/form-data; charset=utf-8',\n\t};\n\tconst authentication = this.getNodeParameter('authentication', 0, 'webhook') as string;\n\n\tconst credentialType = getCredentialsType(authentication);\n\n\tconst options: IRequestOptions = {\n\t\theaders,\n\t\tmethod,\n\t\tformData,\n\t\turl: `https://discord.com/api/v10${endpoint}`,\n\t};\n\n\tif (credentialType === 'discordWebhookApi') {\n\t\tconst credentials = await this.getCredentials('discordWebhookApi');\n\t\toptions.url = credentials.webhookUri as string;\n\t}\n\n\ttry {\n\t\tconst response = await requestApi.call(this, options, credentialType, endpoint);\n\n\t\tconst resetAfter = Number(response.headers['x-ratelimit-reset-after']);\n\t\tconst remaining = Number(response.headers['x-ratelimit-remaining']);\n\n\t\tif (remaining === 0) {\n\t\t\tawait sleep(resetAfter);\n\t\t} else {\n\t\t\tawait sleep(20); //prevent exceeding global rate limit of 50 requests per second\n\t\t}\n\n\t\treturn jsonParse<IDataObject[]>(response.body);\n\t} catch (error) {\n\t\tthrow new NodeApiError(this.getNode(), error);\n\t}\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA,0BAA+C;AAE/C,qBAA+C;AAE/C,eAAsB,kBAErB,QACA,UACA,MACA,IACC;AACD,QAAM,iBAAiB,KAAK,iBAAiB,kBAAkB,GAAG,SAAS;AAC3E,QAAM,UAAuB,CAAC;AAE9B,QAAM,qBAAiB,mCAAmB,cAAc;AAExD,QAAM,UAA2B;AAAA,IAChC;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,KAAK,8BAA8B,QAAQ;AAAA,IAC3C,MAAM;AAAA,EACP;AAEA,MAAI,mBAAmB,qBAAqB;AAC3C,UAAM,cAAc,MAAM,KAAK,eAAe,mBAAmB;AACjE,YAAQ,MAAM,YAAY;AAAA,EAC3B;AAEA,MAAI;AACH,UAAM,WAAW,MAAM,0BAAW,KAAK,MAAM,SAAS,gBAAgB,QAAQ;AAE9E,UAAM,aAAa,OAAO,SAAS,QAAQ,yBAAyB,CAAC;AACrE,UAAM,YAAY,OAAO,SAAS,QAAQ,uBAAuB,CAAC;AAElE,QAAI,cAAc,GAAG;AACpB,gBAAM,2BAAM,UAAU;AAAA,IACvB,OAAO;AACN,gBAAM,2BAAM,EAAE;AAAA,IACf;AAEA,WAAO,SAAS,QAAQ,EAAE,SAAS,KAAK;AAAA,EACzC,SAAS,OAAO;AACf,UAAM,IAAI,iCAAa,KAAK,QAAQ,GAAG,KAAK;AAAA,EAC7C;AACD;AAEA,eAAsB,2BAErB,QACA,UACA,UACC;AACD,QAAM,UAAuB;AAAA,IAC5B,gBAAgB;AAAA,EACjB;AACA,QAAM,iBAAiB,KAAK,iBAAiB,kBAAkB,GAAG,SAAS;AAE3E,QAAM,qBAAiB,mCAAmB,cAAc;AAExD,QAAM,UAA2B;AAAA,IAChC;AAAA,IACA;AAAA,IACA;AAAA,IACA,KAAK,8BAA8B,QAAQ;AAAA,EAC5C;AAEA,MAAI,mBAAmB,qBAAqB;AAC3C,UAAM,cAAc,MAAM,KAAK,eAAe,mBAAmB;AACjE,YAAQ,MAAM,YAAY;AAAA,EAC3B;AAEA,MAAI;AACH,UAAM,WAAW,MAAM,0BAAW,KAAK,MAAM,SAAS,gBAAgB,QAAQ;AAE9E,UAAM,aAAa,OAAO,SAAS,QAAQ,yBAAyB,CAAC;AACrE,UAAM,YAAY,OAAO,SAAS,QAAQ,uBAAuB,CAAC;AAElE,QAAI,cAAc,GAAG;AACpB,gBAAM,2BAAM,UAAU;AAAA,IACvB,OAAO;AACN,gBAAM,2BAAM,EAAE;AAAA,IACf;AAEA,eAAO,+BAAyB,SAAS,IAAI;AAAA,EAC9C,SAAS,OAAO;AACf,UAAM,IAAI,iCAAa,KAAK,QAAQ,GAAG,KAAK;AAAA,EAC7C;AACD;","names":[]}