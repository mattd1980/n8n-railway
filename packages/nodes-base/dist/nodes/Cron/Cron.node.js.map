{"version":3,"sources":["../../../nodes/Cron/Cron.node.ts"],"sourcesContent":["import type {\n\tITriggerFunctions,\n\tINodeType,\n\tINodeTypeDescription,\n\tITriggerResponse,\n\tTriggerTime,\n} from 'n8n-workflow';\nimport { NodeConnectionTypes, NodeHelpers, toCronExpression } from 'n8n-workflow';\n\nexport class Cron implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'Cron',\n\t\tname: 'cron',\n\t\ticon: 'fa:clock',\n\t\tgroup: ['trigger', 'schedule'],\n\t\tversion: 1,\n\t\thidden: true,\n\t\tdescription: 'Triggers the workflow at a specific time',\n\t\teventTriggerDescription: '',\n\t\tactivationMessage:\n\t\t\t'Your cron trigger will now trigger executions on the schedule you have defined.',\n\t\tdefaults: {\n\t\t\tname: 'Cron',\n\t\t\tcolor: '#29a568',\n\t\t},\n\n\t\tinputs: [],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName:\n\t\t\t\t\t'This workflow will run on the schedule you define here once you <a data-key=\"activate\">activate</a> it.<br><br>For testing, you can also trigger it manually: by going back to the canvas and clicking \\'execute workflow\\'',\n\t\t\t\tname: 'notice',\n\t\t\t\ttype: 'notice',\n\t\t\t\tdefault: '',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Trigger Times',\n\t\t\t\tname: 'triggerTimes',\n\t\t\t\ttype: 'fixedCollection',\n\t\t\t\ttypeOptions: {\n\t\t\t\t\tmultipleValues: true,\n\t\t\t\t\tmultipleValueButtonText: 'Add Time',\n\t\t\t\t},\n\t\t\t\tdefault: {},\n\t\t\t\tdescription: 'Triggers for the workflow',\n\t\t\t\tplaceholder: 'Add Cron Time',\n\t\t\t\toptions: NodeHelpers.cronNodeOptions,\n\t\t\t},\n\t\t],\n\t};\n\n\tasync trigger(this: ITriggerFunctions): Promise<ITriggerResponse> {\n\t\tconst triggerTimes = this.getNodeParameter('triggerTimes') as unknown as {\n\t\t\titem: TriggerTime[];\n\t\t};\n\n\t\t// Get all the trigger times\n\t\tconst cronTimes = (triggerTimes.item || []).map(toCronExpression);\n\n\t\t// The trigger function to execute when the cron-time got reached\n\t\t// or when manually triggered\n\t\tconst executeTrigger = () => {\n\t\t\tthis.emit([this.helpers.returnJsonArray([{}])]);\n\t\t};\n\n\t\t// Register the cron-jobs\n\t\tcronTimes.forEach((cronTime) => this.helpers.registerCron(cronTime, executeTrigger));\n\n\t\treturn {\n\t\t\tmanualTriggerFunction: async () => executeTrigger(),\n\t\t};\n\t}\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA,0BAAmE;AAE5D,MAAM,KAA0B;AAAA,EAAhC;AACN,uBAAoC;AAAA,MACnC,aAAa;AAAA,MACb,MAAM;AAAA,MACN,MAAM;AAAA,MACN,OAAO,CAAC,WAAW,UAAU;AAAA,MAC7B,SAAS;AAAA,MACT,QAAQ;AAAA,MACR,aAAa;AAAA,MACb,yBAAyB;AAAA,MACzB,mBACC;AAAA,MACD,UAAU;AAAA,QACT,MAAM;AAAA,QACN,OAAO;AAAA,MACR;AAAA,MAEA,QAAQ,CAAC;AAAA,MACT,SAAS,CAAC,wCAAoB,IAAI;AAAA,MAClC,YAAY;AAAA,QACX;AAAA,UACC,aACC;AAAA,UACD,MAAM;AAAA,UACN,MAAM;AAAA,UACN,SAAS;AAAA,QACV;AAAA,QACA;AAAA,UACC,aAAa;AAAA,UACb,MAAM;AAAA,UACN,MAAM;AAAA,UACN,aAAa;AAAA,YACZ,gBAAgB;AAAA,YAChB,yBAAyB;AAAA,UAC1B;AAAA,UACA,SAAS,CAAC;AAAA,UACV,aAAa;AAAA,UACb,aAAa;AAAA,UACb,SAAS,gCAAY;AAAA,QACtB;AAAA,MACD;AAAA,IACD;AAAA;AAAA,EAEA,MAAM,UAA4D;AACjE,UAAM,eAAe,KAAK,iBAAiB,cAAc;AAKzD,UAAM,aAAa,aAAa,QAAQ,CAAC,GAAG,IAAI,oCAAgB;AAIhE,UAAM,iBAAiB,MAAM;AAC5B,WAAK,KAAK,CAAC,KAAK,QAAQ,gBAAgB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAAA,IAC/C;AAGA,cAAU,QAAQ,CAAC,aAAa,KAAK,QAAQ,aAAa,UAAU,cAAc,CAAC;AAEnF,WAAO;AAAA,MACN,uBAAuB,YAAY,eAAe;AAAA,IACnD;AAAA,EACD;AACD;","names":[]}