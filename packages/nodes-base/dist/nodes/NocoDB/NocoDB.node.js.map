{"version":3,"sources":["../../../nodes/NocoDB/NocoDB.node.ts"],"sourcesContent":["/* eslint-disable n8n-nodes-base/node-filename-against-convention */\nimport type {\n\tIDataObject,\n\tIExecuteFunctions,\n\tIHttpRequestMethods,\n\tILoadOptionsFunctions,\n\tINodeExecutionData,\n\tINodeType,\n\tINodeTypeDescription,\n\tJsonObject,\n} from 'n8n-workflow';\nimport { NodeApiError, NodeConnectionTypes, NodeOperationError } from 'n8n-workflow';\n\nimport { apiRequest, apiRequestAllItems, downloadRecordAttachments } from './GenericFunctions';\nimport { operationFields } from './OperationDescription';\n\nexport class NocoDB implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'NocoDB',\n\t\tname: 'nocoDb',\n\t\ticon: 'file:nocodb.svg',\n\t\tgroup: ['input'],\n\t\tversion: [1, 2, 3],\n\t\tsubtitle: '={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}',\n\t\tdescription: 'Read, update, write and delete data from NocoDB',\n\t\tdefaults: {\n\t\t\tname: 'NocoDB',\n\t\t},\n\t\tinputs: [NodeConnectionTypes.Main],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tusableAsTool: true,\n\t\tcredentials: [\n\t\t\t{\n\t\t\t\tname: 'nocoDb',\n\t\t\t\trequired: true,\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tauthentication: ['nocoDb'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'nocoDbApiToken',\n\t\t\t\trequired: true,\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tauthentication: ['nocoDbApiToken'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Authentication',\n\t\t\t\tname: 'authentication',\n\t\t\t\ttype: 'options',\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'API Token',\n\t\t\t\t\t\tvalue: 'nocoDbApiToken',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'User Token',\n\t\t\t\t\t\tvalue: 'nocoDb',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'nocoDb',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'API Version',\n\t\t\t\tname: 'version',\n\t\t\t\ttype: 'options',\n\t\t\t\tisNodeSetting: true,\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Before v0.90.0',\n\t\t\t\t\t\tvalue: 1,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'v0.90.0 Onwards',\n\t\t\t\t\t\tvalue: 2,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'v0.200.0 Onwards',\n\t\t\t\t\t\tvalue: 3,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\t'@version': [1],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdefault: 1,\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'API Version',\n\t\t\t\tname: 'version',\n\t\t\t\ttype: 'options',\n\t\t\t\tisNodeSetting: true,\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Before v0.90.0',\n\t\t\t\t\t\tvalue: 1,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'v0.90.0 Onwards',\n\t\t\t\t\t\tvalue: 2,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'v0.200.0 Onwards',\n\t\t\t\t\t\tvalue: 3,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\t'@version': [2],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdefault: 2,\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'API Version',\n\t\t\t\tname: 'version',\n\t\t\t\ttype: 'options',\n\t\t\t\tisNodeSetting: true,\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Before v0.90.0',\n\t\t\t\t\t\tvalue: 1,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'v0.90.0 Onwards',\n\t\t\t\t\t\tvalue: 2,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'v0.200.0 Onwards',\n\t\t\t\t\t\tvalue: 3,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\t'@version': [3],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdefault: 3,\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Resource',\n\t\t\t\tname: 'resource',\n\t\t\t\ttype: 'options',\n\t\t\t\tnoDataExpression: true,\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Row',\n\t\t\t\t\t\tvalue: 'row',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'row',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Operation',\n\t\t\t\tname: 'operation',\n\t\t\t\ttype: 'options',\n\t\t\t\tnoDataExpression: true,\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tresource: ['row'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Create',\n\t\t\t\t\t\tvalue: 'create',\n\t\t\t\t\t\tdescription: 'Create a row',\n\t\t\t\t\t\taction: 'Create a row',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Delete',\n\t\t\t\t\t\tvalue: 'delete',\n\t\t\t\t\t\tdescription: 'Delete a row',\n\t\t\t\t\t\taction: 'Delete a row',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Get',\n\t\t\t\t\t\tvalue: 'get',\n\t\t\t\t\t\tdescription: 'Retrieve a row',\n\t\t\t\t\t\taction: 'Get a row',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Get Many',\n\t\t\t\t\t\tvalue: 'getAll',\n\t\t\t\t\t\tdescription: 'Retrieve many rows',\n\t\t\t\t\t\taction: 'Get many rows',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Update',\n\t\t\t\t\t\tvalue: 'update',\n\t\t\t\t\t\tdescription: 'Update a row',\n\t\t\t\t\t\taction: 'Update a row',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'get',\n\t\t\t},\n\t\t\t...operationFields,\n\t\t],\n\t};\n\n\tmethods = {\n\t\tloadOptions: {\n\t\t\tasync getWorkspaces(this: ILoadOptionsFunctions) {\n\t\t\t\ttry {\n\t\t\t\t\tconst requestMethod = 'GET';\n\t\t\t\t\tconst endpoint = '/api/v1/workspaces/';\n\t\t\t\t\tconst responseData = await apiRequest.call(this, requestMethod, endpoint, {}, {});\n\t\t\t\t\treturn responseData.list.map((i: IDataObject) => ({ name: i.title, value: i.id }));\n\t\t\t\t} catch (e) {\n\t\t\t\t\treturn [{ name: 'No Workspace', value: 'none' }];\n\t\t\t\t}\n\t\t\t},\n\t\t\tasync getBases(this: ILoadOptionsFunctions) {\n\t\t\t\tconst version = this.getNodeParameter('version', 0) as number;\n\t\t\t\tconst workspaceId = this.getNodeParameter('workspaceId', 0) as string;\n\t\t\t\ttry {\n\t\t\t\t\tif (workspaceId && workspaceId !== 'none') {\n\t\t\t\t\t\tconst requestMethod = 'GET';\n\t\t\t\t\t\tconst endpoint = `/api/v1/workspaces/${workspaceId}/bases/`;\n\t\t\t\t\t\tconst responseData = await apiRequest.call(this, requestMethod, endpoint, {}, {});\n\t\t\t\t\t\treturn responseData.list.map((i: IDataObject) => ({ name: i.title, value: i.id }));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst requestMethod = 'GET';\n\t\t\t\t\t\tconst endpoint = version === 3 ? '/api/v2/meta/bases/' : '/api/v1/db/meta/projects/';\n\t\t\t\t\t\tconst responseData = await apiRequest.call(this, requestMethod, endpoint, {}, {});\n\t\t\t\t\t\treturn responseData.list.map((i: IDataObject) => ({ name: i.title, value: i.id }));\n\t\t\t\t\t}\n\t\t\t\t} catch (e) {\n\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\tnew Error(`Error while fetching ${version === 3 ? 'bases' : 'projects'}!`, {\n\t\t\t\t\t\t\tcause: e,\n\t\t\t\t\t\t}),\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlevel: 'warning',\n\t\t\t\t\t\t},\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t},\n\t\t\t// This only supports using the Base ID\n\t\t\tasync getTables(this: ILoadOptionsFunctions) {\n\t\t\t\tconst version = this.getNodeParameter('version', 0) as number;\n\t\t\t\tconst baseId = this.getNodeParameter('projectId', 0) as string;\n\t\t\t\tif (baseId) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst requestMethod = 'GET';\n\t\t\t\t\t\tconst endpoint =\n\t\t\t\t\t\t\tversion === 3\n\t\t\t\t\t\t\t\t? `/api/v2/meta/bases/${baseId}/tables`\n\t\t\t\t\t\t\t\t: `/api/v1/db/meta/projects/${baseId}/tables`;\n\t\t\t\t\t\tconst responseData = await apiRequest.call(this, requestMethod, endpoint, {}, {});\n\t\t\t\t\t\treturn responseData.list.map((i: IDataObject) => ({ name: i.title, value: i.id }));\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t\tnew Error('Error while fetching tables!', { cause: e }),\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tlevel: 'warning',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t`No  ${version === 3 ? 'base' : 'project'} selected!`,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlevel: 'warning',\n\t\t\t\t\t\t},\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t},\n\t\t},\n\t};\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t\tconst items = this.getInputData();\n\t\tconst returnData: IDataObject[] = [];\n\t\tlet responseData;\n\n\t\tconst version = this.getNodeParameter('version', 0) as number;\n\t\tconst resource = this.getNodeParameter('resource', 0);\n\t\tconst operation = this.getNodeParameter('operation', 0);\n\n\t\tlet returnAll = false;\n\t\tlet requestMethod: IHttpRequestMethods = 'GET';\n\n\t\tlet qs: IDataObject = {};\n\n\t\tlet endPoint = '';\n\n\t\tconst baseId = this.getNodeParameter('projectId', 0) as string;\n\t\tconst table = this.getNodeParameter('table', 0) as string;\n\n\t\tif (resource === 'row') {\n\t\t\tif (operation === 'create') {\n\t\t\t\trequestMethod = 'POST';\n\n\t\t\t\tif (version === 1) {\n\t\t\t\t\tendPoint = `/nc/${baseId}/api/v1/${table}/bulk`;\n\t\t\t\t} else if (version === 2) {\n\t\t\t\t\tendPoint = `/api/v1/db/data/bulk/noco/${baseId}/${table}`;\n\t\t\t\t} else if (version === 3) {\n\t\t\t\t\tendPoint = `/api/v2/tables/${table}/records`;\n\t\t\t\t}\n\n\t\t\t\tconst body: IDataObject[] = [];\n\n\t\t\t\tfor (let i = 0; i < items.length; i++) {\n\t\t\t\t\tconst newItem: IDataObject = {};\n\t\t\t\t\tconst dataToSend = this.getNodeParameter('dataToSend', i) as\n\t\t\t\t\t\t| 'defineBelow'\n\t\t\t\t\t\t| 'autoMapInputData';\n\n\t\t\t\t\tif (dataToSend === 'autoMapInputData') {\n\t\t\t\t\t\tconst incomingKeys = Object.keys(items[i].json);\n\t\t\t\t\t\tconst rawInputsToIgnore = this.getNodeParameter('inputsToIgnore', i) as string;\n\t\t\t\t\t\tconst inputDataToIgnore = rawInputsToIgnore.split(',').map((c) => c.trim());\n\t\t\t\t\t\tfor (const key of incomingKeys) {\n\t\t\t\t\t\t\tif (inputDataToIgnore.includes(key)) continue;\n\t\t\t\t\t\t\tnewItem[key] = items[i].json[key];\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst fields = this.getNodeParameter('fieldsUi.fieldValues', i, []) as Array<{\n\t\t\t\t\t\t\tfieldName: string;\n\t\t\t\t\t\t\tbinaryData: boolean;\n\t\t\t\t\t\t\tfieldValue?: string;\n\t\t\t\t\t\t\tbinaryProperty?: string;\n\t\t\t\t\t\t}>;\n\n\t\t\t\t\t\tfor (const field of fields) {\n\t\t\t\t\t\t\tif (!field.binaryData) {\n\t\t\t\t\t\t\t\tnewItem[field.fieldName] = field.fieldValue;\n\t\t\t\t\t\t\t} else if (field.binaryProperty) {\n\t\t\t\t\t\t\t\tconst binaryPropertyName = field.binaryProperty;\n\t\t\t\t\t\t\t\tconst binaryData = this.helpers.assertBinaryData(i, binaryPropertyName);\n\t\t\t\t\t\t\t\tconst dataBuffer = await this.helpers.getBinaryDataBuffer(i, binaryPropertyName);\n\n\t\t\t\t\t\t\t\tconst formData = {\n\t\t\t\t\t\t\t\t\tfile: {\n\t\t\t\t\t\t\t\t\t\tvalue: dataBuffer,\n\t\t\t\t\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\t\t\t\t\tfilename: binaryData.fileName,\n\t\t\t\t\t\t\t\t\t\t\tcontentType: binaryData.mimeType,\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tjson: JSON.stringify({\n\t\t\t\t\t\t\t\t\t\tapi: 'xcAttachmentUpload',\n\t\t\t\t\t\t\t\t\t\tproject_id: baseId,\n\t\t\t\t\t\t\t\t\t\tdbAlias: 'db',\n\t\t\t\t\t\t\t\t\t\targs: {},\n\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\tlet postUrl = '';\n\t\t\t\t\t\t\t\tif (version === 1) {\n\t\t\t\t\t\t\t\t\tpostUrl = '/dashboard';\n\t\t\t\t\t\t\t\t} else if (version === 2) {\n\t\t\t\t\t\t\t\t\tpostUrl = '/api/v1/db/storage/upload';\n\t\t\t\t\t\t\t\t} else if (version === 3) {\n\t\t\t\t\t\t\t\t\tpostUrl = '/api/v2/storage/upload';\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tresponseData = await apiRequest.call(\n\t\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t\t'POST',\n\t\t\t\t\t\t\t\t\tpostUrl,\n\t\t\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t\t\tversion === 3 ? { base_id: baseId } : { project_id: baseId },\n\t\t\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tformData,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tnewItem[field.fieldName] = JSON.stringify(\n\t\t\t\t\t\t\t\t\tArray.isArray(responseData) ? responseData : [responseData],\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbody.push(newItem);\n\t\t\t\t}\n\t\t\t\ttry {\n\t\t\t\t\tresponseData = await apiRequest.call(this, requestMethod, endPoint, body, qs);\n\n\t\t\t\t\tif (version === 3) {\n\t\t\t\t\t\tfor (let i = body.length - 1; i >= 0; i--) {\n\t\t\t\t\t\t\tbody[i] = { ...body[i], ...responseData[i] };\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturnData.push(...body);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Calculate ID manually and add to return data\n\t\t\t\t\t\tlet id = responseData[0];\n\t\t\t\t\t\tfor (let i = body.length - 1; i >= 0; i--) {\n\t\t\t\t\t\t\tbody[i].id = id--;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturnData.push(...body);\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\t\treturnData.push({ error: error.toString() });\n\t\t\t\t\t}\n\t\t\t\t\tthrow new NodeApiError(this.getNode(), error as JsonObject);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (operation === 'delete') {\n\t\t\t\trequestMethod = 'DELETE';\n\t\t\t\tlet primaryKey = 'id';\n\n\t\t\t\tif (version === 1) {\n\t\t\t\t\tendPoint = `/nc/${baseId}/api/v1/${table}/bulk`;\n\t\t\t\t} else if (version === 2) {\n\t\t\t\t\tendPoint = `/api/v1/db/data/bulk/noco/${baseId}/${table}`;\n\n\t\t\t\t\tprimaryKey = this.getNodeParameter('primaryKey', 0) as string;\n\t\t\t\t\tif (primaryKey === 'custom') {\n\t\t\t\t\t\tprimaryKey = this.getNodeParameter('customPrimaryKey', 0) as string;\n\t\t\t\t\t}\n\t\t\t\t} else if (version === 3) {\n\t\t\t\t\tendPoint = `/api/v2/tables/${table}/records`;\n\n\t\t\t\t\tprimaryKey = this.getNodeParameter('primaryKey', 0) as string;\n\t\t\t\t\tif (primaryKey === 'custom') {\n\t\t\t\t\t\tprimaryKey = this.getNodeParameter('customPrimaryKey', 0) as string;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst body: IDataObject[] = [];\n\n\t\t\t\tfor (let i = 0; i < items.length; i++) {\n\t\t\t\t\tconst id = this.getNodeParameter('id', i) as string;\n\t\t\t\t\tbody.push({ [primaryKey]: id });\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tresponseData = (await apiRequest.call(this, requestMethod, endPoint, body, qs)) as any[];\n\t\t\t\t\tif (version === 1) {\n\t\t\t\t\t\treturnData.push(...items.map((item) => item.json));\n\t\t\t\t\t} else if (version === 2) {\n\t\t\t\t\t\treturnData.push(\n\t\t\t\t\t\t\t...responseData.map((result: number, index: number) => {\n\t\t\t\t\t\t\t\tif (result === 0) {\n\t\t\t\t\t\t\t\t\tconst errorMessage = `The row with the ID \"${body[index].id}\" could not be deleted. It probably doesn't exist.`;\n\t\t\t\t\t\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\t\t\t\t\t\treturn { error: errorMessage };\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tthrow new NodeApiError(\n\t\t\t\t\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t\t\t\t\t{ message: errorMessage },\n\t\t\t\t\t\t\t\t\t\t{ message: errorMessage, itemIndex: index },\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\tsuccess: true,\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t);\n\t\t\t\t\t} else if (version === 3) {\n\t\t\t\t\t\treturnData.push(...responseData);\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\t\treturnData.push({ error: error.toString() });\n\t\t\t\t\t}\n\t\t\t\t\tthrow new NodeApiError(this.getNode(), error as JsonObject);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (operation === 'getAll') {\n\t\t\t\tconst data = [];\n\t\t\t\tconst downloadAttachments = this.getNodeParameter('downloadAttachments', 0) as boolean;\n\t\t\t\ttry {\n\t\t\t\t\tfor (let i = 0; i < items.length; i++) {\n\t\t\t\t\t\trequestMethod = 'GET';\n\n\t\t\t\t\t\tif (version === 1) {\n\t\t\t\t\t\t\tendPoint = `/nc/${baseId}/api/v1/${table}`;\n\t\t\t\t\t\t} else if (version === 2) {\n\t\t\t\t\t\t\tendPoint = `/api/v1/db/data/noco/${baseId}/${table}`;\n\t\t\t\t\t\t} else if (version === 3) {\n\t\t\t\t\t\t\tendPoint = `/api/v2/tables/${table}/records`;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturnAll = this.getNodeParameter('returnAll', 0);\n\t\t\t\t\t\tqs = this.getNodeParameter('options', i, {});\n\n\t\t\t\t\t\tif (qs.sort) {\n\t\t\t\t\t\t\tconst properties = (qs.sort as IDataObject).property as Array<{\n\t\t\t\t\t\t\t\tfield: string;\n\t\t\t\t\t\t\t\tdirection: string;\n\t\t\t\t\t\t\t}>;\n\t\t\t\t\t\t\tqs.sort = properties\n\t\t\t\t\t\t\t\t.map((prop) => `${prop.direction === 'asc' ? '' : '-'}${prop.field}`)\n\t\t\t\t\t\t\t\t.join(',');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (qs.fields) {\n\t\t\t\t\t\t\tqs.fields = (qs.fields as IDataObject[]).join(',');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (returnAll) {\n\t\t\t\t\t\t\tresponseData = await apiRequestAllItems.call(this, requestMethod, endPoint, {}, qs);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tqs.limit = this.getNodeParameter('limit', 0);\n\t\t\t\t\t\t\tresponseData = await apiRequest.call(this, requestMethod, endPoint, {}, qs);\n\t\t\t\t\t\t\tif (version === 2 || version === 3) {\n\t\t\t\t\t\t\t\tresponseData = responseData.list;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject),\n\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturnData.push(...executionData);\n\n\t\t\t\t\t\tif (downloadAttachments) {\n\t\t\t\t\t\t\tconst downloadFieldNames = (\n\t\t\t\t\t\t\t\tthis.getNodeParameter('downloadFieldNames', 0) as string\n\t\t\t\t\t\t\t).split(',');\n\t\t\t\t\t\t\tconst response = await downloadRecordAttachments.call(\n\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\tresponseData as IDataObject[],\n\t\t\t\t\t\t\t\tdownloadFieldNames,\n\t\t\t\t\t\t\t\t[{ item: i }],\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tdata.push(...response);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (downloadAttachments) {\n\t\t\t\t\t\treturn [data];\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\t\treturnData.push({ json: { error: error.toString() } });\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow error;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn [returnData as INodeExecutionData[]];\n\t\t\t}\n\n\t\t\tif (operation === 'get') {\n\t\t\t\trequestMethod = 'GET';\n\t\t\t\tconst newItems: INodeExecutionData[] = [];\n\n\t\t\t\tfor (let i = 0; i < items.length; i++) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst id = this.getNodeParameter('id', i) as string;\n\n\t\t\t\t\t\tif (version === 1) {\n\t\t\t\t\t\t\tendPoint = `/nc/${baseId}/api/v1/${table}/${id}`;\n\t\t\t\t\t\t} else if (version === 2) {\n\t\t\t\t\t\t\tendPoint = `/api/v1/db/data/noco/${baseId}/${table}/${id}`;\n\t\t\t\t\t\t} else if (version === 3) {\n\t\t\t\t\t\t\tendPoint = `/api/v2/tables/${table}/records/${id}`;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await apiRequest.call(this, requestMethod, endPoint, {}, qs);\n\n\t\t\t\t\t\tif (version === 2) {\n\t\t\t\t\t\t\tif (Object.keys(responseData as IDataObject).length === 0) {\n\t\t\t\t\t\t\t\t// Get did fail\n\t\t\t\t\t\t\t\tconst errorMessage = `The row with the ID \"${id}\" could not be queried. It probably doesn't exist.`;\n\t\t\t\t\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\t\t\t\t\tnewItems.push({ json: { error: errorMessage } });\n\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tthrow new NodeApiError(\n\t\t\t\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t\t\t\t{ message: errorMessage },\n\t\t\t\t\t\t\t\t\t{ message: errorMessage, itemIndex: i },\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst downloadAttachments = this.getNodeParameter('downloadAttachments', i) as boolean;\n\n\t\t\t\t\t\tif (downloadAttachments) {\n\t\t\t\t\t\t\tconst downloadFieldNames = (\n\t\t\t\t\t\t\t\tthis.getNodeParameter('downloadFieldNames', i) as string\n\t\t\t\t\t\t\t).split(',');\n\t\t\t\t\t\t\tconst data = await downloadRecordAttachments.call(\n\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t[responseData as IDataObject],\n\t\t\t\t\t\t\t\tdownloadFieldNames,\n\t\t\t\t\t\t\t\t[{ item: i }],\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tconst newItem = {\n\t\t\t\t\t\t\t\tbinary: data[0].binary,\n\t\t\t\t\t\t\t\tjson: {},\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\t\t[newItem] as INodeExecutionData[],\n\t\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tnewItems.push(...executionData);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject),\n\t\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tnewItems.push(...executionData);\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\t\tthis.helpers.returnJsonArray({ error: error.toString() }),\n\t\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tnewItems.push(...executionData);\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow new NodeApiError(this.getNode(), error as JsonObject, { itemIndex: i });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn [newItems];\n\t\t\t}\n\n\t\t\tif (operation === 'update') {\n\t\t\t\trequestMethod = 'PATCH';\n\t\t\t\tlet primaryKey = 'id';\n\n\t\t\t\tif (version === 1) {\n\t\t\t\t\tendPoint = `/nc/${baseId}/api/v1/${table}/bulk`;\n\t\t\t\t\trequestMethod = 'PUT';\n\t\t\t\t} else if (version === 2) {\n\t\t\t\t\tendPoint = `/api/v1/db/data/bulk/noco/${baseId}/${table}`;\n\n\t\t\t\t\tprimaryKey = this.getNodeParameter('primaryKey', 0) as string;\n\t\t\t\t\tif (primaryKey === 'custom') {\n\t\t\t\t\t\tprimaryKey = this.getNodeParameter('customPrimaryKey', 0) as string;\n\t\t\t\t\t}\n\t\t\t\t} else if (version === 3) {\n\t\t\t\t\tendPoint = `/api/v2/tables/${table}/records`;\n\t\t\t\t}\n\n\t\t\t\tconst body: IDataObject[] = [];\n\n\t\t\t\tfor (let i = 0; i < items.length; i++) {\n\t\t\t\t\tconst id = version === 3 ? null : (this.getNodeParameter('id', i) as string);\n\t\t\t\t\tconst newItem: IDataObject = version === 3 ? {} : { [primaryKey]: id };\n\t\t\t\t\tconst dataToSend = this.getNodeParameter('dataToSend', i) as\n\t\t\t\t\t\t| 'defineBelow'\n\t\t\t\t\t\t| 'autoMapInputData';\n\n\t\t\t\t\tif (dataToSend === 'autoMapInputData') {\n\t\t\t\t\t\tconst incomingKeys = Object.keys(items[i].json);\n\t\t\t\t\t\tconst rawInputsToIgnore = this.getNodeParameter('inputsToIgnore', i) as string;\n\t\t\t\t\t\tconst inputDataToIgnore = rawInputsToIgnore.split(',').map((c) => c.trim());\n\t\t\t\t\t\tfor (const key of incomingKeys) {\n\t\t\t\t\t\t\tif (inputDataToIgnore.includes(key)) continue;\n\t\t\t\t\t\t\tnewItem[key] = items[i].json[key];\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst fields = this.getNodeParameter('fieldsUi.fieldValues', i, []) as Array<{\n\t\t\t\t\t\t\tfieldName: string;\n\t\t\t\t\t\t\tbinaryData: boolean;\n\t\t\t\t\t\t\tfieldValue?: string;\n\t\t\t\t\t\t\tbinaryProperty?: string;\n\t\t\t\t\t\t}>;\n\n\t\t\t\t\t\tfor (const field of fields) {\n\t\t\t\t\t\t\tif (!field.binaryData) {\n\t\t\t\t\t\t\t\tnewItem[field.fieldName] = field.fieldValue;\n\t\t\t\t\t\t\t} else if (field.binaryProperty) {\n\t\t\t\t\t\t\t\tconst binaryPropertyName = field.binaryProperty;\n\t\t\t\t\t\t\t\tconst binaryData = this.helpers.assertBinaryData(i, binaryPropertyName);\n\t\t\t\t\t\t\t\tconst dataBuffer = await this.helpers.getBinaryDataBuffer(i, binaryPropertyName);\n\n\t\t\t\t\t\t\t\tconst formData = {\n\t\t\t\t\t\t\t\t\tfile: {\n\t\t\t\t\t\t\t\t\t\tvalue: dataBuffer,\n\t\t\t\t\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\t\t\t\t\tfilename: binaryData.fileName,\n\t\t\t\t\t\t\t\t\t\t\tcontentType: binaryData.mimeType,\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tjson: JSON.stringify({\n\t\t\t\t\t\t\t\t\t\tapi: 'xcAttachmentUpload',\n\t\t\t\t\t\t\t\t\t\tproject_id: baseId,\n\t\t\t\t\t\t\t\t\t\tdbAlias: 'db',\n\t\t\t\t\t\t\t\t\t\targs: {},\n\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\tlet postUrl = '';\n\t\t\t\t\t\t\t\tif (version === 1) {\n\t\t\t\t\t\t\t\t\tpostUrl = '/dashboard';\n\t\t\t\t\t\t\t\t} else if (version === 2) {\n\t\t\t\t\t\t\t\t\tpostUrl = '/api/v1/db/storage/upload';\n\t\t\t\t\t\t\t\t} else if (version === 3) {\n\t\t\t\t\t\t\t\t\tpostUrl = '/api/v2/storage/upload';\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tresponseData = await apiRequest.call(\n\t\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t\t'POST',\n\t\t\t\t\t\t\t\t\tpostUrl,\n\t\t\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t\t\tversion === 3 ? { base_id: baseId } : { project_id: baseId },\n\t\t\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tformData,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tnewItem[field.fieldName] = JSON.stringify(\n\t\t\t\t\t\t\t\t\tArray.isArray(responseData) ? responseData : [responseData],\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbody.push(newItem);\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tresponseData = (await apiRequest.call(this, requestMethod, endPoint, body, qs)) as any[];\n\n\t\t\t\t\tif (version === 1) {\n\t\t\t\t\t\treturnData.push(...body);\n\t\t\t\t\t} else if (version === 2) {\n\t\t\t\t\t\treturnData.push(\n\t\t\t\t\t\t\t...responseData.map((result: number, index: number) => {\n\t\t\t\t\t\t\t\tif (result === 0) {\n\t\t\t\t\t\t\t\t\tconst errorMessage = `The row with the ID \"${body[index].id}\" could not be updated. It probably doesn't exist.`;\n\t\t\t\t\t\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\t\t\t\t\t\treturn { error: errorMessage };\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tthrow new NodeApiError(\n\t\t\t\t\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t\t\t\t\t{ message: errorMessage },\n\t\t\t\t\t\t\t\t\t\t{ message: errorMessage, itemIndex: index },\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\tsuccess: true,\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t);\n\t\t\t\t\t} else if (version === 3) {\n\t\t\t\t\t\tfor (let i = body.length - 1; i >= 0; i--) {\n\t\t\t\t\t\t\tbody[i] = { ...body[i], ...responseData[i] };\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturnData.push(...body);\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\t\treturnData.push({ error: error.toString() });\n\t\t\t\t\t}\n\t\t\t\t\tthrow new NodeApiError(this.getNode(), error as JsonObject);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn [this.helpers.returnJsonArray(returnData)];\n\t}\n}\n"],"mappings":"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","names":[]}