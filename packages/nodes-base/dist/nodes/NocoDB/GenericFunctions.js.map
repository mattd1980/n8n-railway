{"version":3,"sources":["../../../nodes/NocoDB/GenericFunctions.ts"],"sourcesContent":["import type {\n\tIBinaryKeyData,\n\tIDataObject,\n\tIExecuteFunctions,\n\tIHookFunctions,\n\tIHttpRequestMethods,\n\tILoadOptionsFunctions,\n\tINodeExecutionData,\n\tIPairedItemData,\n\tIPollFunctions,\n\tIRequestOptions,\n} from 'n8n-workflow';\nimport { jsonParse, NodeOperationError } from 'n8n-workflow';\n\ninterface IAttachment {\n\turl: string;\n\ttitle: string;\n\tmimetype: string;\n\tsize: number;\n\tsignedUrl?: string;\n}\n\n/**\n * Make an API request to NocoDB\n *\n */\nexport async function apiRequest(\n\tthis: IHookFunctions | IExecuteFunctions | ILoadOptionsFunctions | IPollFunctions,\n\tmethod: IHttpRequestMethods,\n\tendpoint: string,\n\tbody: object,\n\tquery?: IDataObject,\n\turi?: string,\n\toption: IDataObject = {},\n): Promise<any> {\n\tconst authenticationMethod = this.getNodeParameter('authentication', 0) as string;\n\tconst credentials = await this.getCredentials(authenticationMethod);\n\n\tif (credentials === undefined) {\n\t\tthrow new NodeOperationError(this.getNode(), 'No credentials got returned!');\n\t}\n\n\tconst baseUrl = credentials.host as string;\n\n\tquery = query || {};\n\n\tif (!uri) {\n\t\turi = baseUrl.endsWith('/') ? `${baseUrl.slice(0, -1)}${endpoint}` : `${baseUrl}${endpoint}`;\n\t}\n\n\tconst options: IRequestOptions = {\n\t\tmethod,\n\t\tbody,\n\t\tqs: query,\n\t\turi,\n\t\tjson: true,\n\t};\n\n\tif (Object.keys(option).length !== 0) {\n\t\tObject.assign(options, option);\n\t}\n\n\tif (Object.keys(body).length === 0) {\n\t\tdelete options.body;\n\t}\n\n\treturn await this.helpers.requestWithAuthentication.call(this, authenticationMethod, options);\n}\n\n/**\n * Make an API request to paginated NocoDB endpoint\n * and return all results\n *\n * @param {(IHookFunctions | IExecuteFunctions)} this\n */\nexport async function apiRequestAllItems(\n\tthis: IHookFunctions | IExecuteFunctions | IPollFunctions,\n\tmethod: IHttpRequestMethods,\n\tendpoint: string,\n\tbody: IDataObject,\n\tquery?: IDataObject,\n): Promise<any> {\n\tconst version = this.getNode().typeVersion;\n\n\tif (query === undefined) {\n\t\tquery = {};\n\t}\n\tquery.limit = 100;\n\tquery.offset = query?.offset ? (query.offset as number) : 0;\n\tconst returnData: IDataObject[] = [];\n\n\tlet responseData;\n\n\tdo {\n\t\tresponseData = await apiRequest.call(this, method, endpoint, body, query);\n\t\tversion === 1\n\t\t\t? returnData.push(...(responseData as IDataObject[]))\n\t\t\t: returnData.push(...(responseData.list as IDataObject[]));\n\n\t\tquery.offset += query.limit;\n\t} while (version === 1 ? responseData.length !== 0 : responseData.pageInfo.isLastPage !== true);\n\n\treturn returnData;\n}\n\nexport async function downloadRecordAttachments(\n\tthis: IExecuteFunctions | IPollFunctions,\n\trecords: IDataObject[],\n\tfieldNames: string[],\n\tpairedItem?: IPairedItemData[],\n): Promise<INodeExecutionData[]> {\n\tconst elements: INodeExecutionData[] = [];\n\n\tfor (const record of records) {\n\t\tconst element: INodeExecutionData = { json: {}, binary: {} };\n\t\tif (pairedItem) {\n\t\t\telement.pairedItem = pairedItem;\n\t\t}\n\t\telement.json = record as unknown as IDataObject;\n\t\tfor (const fieldName of fieldNames) {\n\t\t\tlet attachments = record[fieldName] as IAttachment[];\n\t\t\tif (typeof attachments === 'string') {\n\t\t\t\tattachments = jsonParse<IAttachment[]>(record[fieldName] as string);\n\t\t\t}\n\t\t\tif (record[fieldName]) {\n\t\t\t\tfor (const [index, attachment] of attachments.entries()) {\n\t\t\t\t\tconst attachmentUrl = attachment.signedUrl || attachment.url;\n\t\t\t\t\tconst file: Buffer = await apiRequest.call(this, 'GET', '', {}, {}, attachmentUrl, {\n\t\t\t\t\t\tjson: false,\n\t\t\t\t\t\tencoding: null,\n\t\t\t\t\t});\n\t\t\t\t\telement.binary![`${fieldName}_${index}`] = await this.helpers.prepareBinaryData(\n\t\t\t\t\t\tBuffer.from(file),\n\t\t\t\t\t\tattachment.title,\n\t\t\t\t\t\tattachment.mimetype,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (Object.keys(element.binary as IBinaryKeyData).length === 0) {\n\t\t\tdelete element.binary;\n\t\t}\n\t\telements.push(element);\n\t}\n\treturn elements;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA,0BAA8C;AAc9C,eAAsB,WAErB,QACA,UACA,MACA,OACA,KACA,SAAsB,CAAC,GACR;AACf,QAAM,uBAAuB,KAAK,iBAAiB,kBAAkB,CAAC;AACtE,QAAM,cAAc,MAAM,KAAK,eAAe,oBAAoB;AAElE,MAAI,gBAAgB,QAAW;AAC9B,UAAM,IAAI,uCAAmB,KAAK,QAAQ,GAAG,8BAA8B;AAAA,EAC5E;AAEA,QAAM,UAAU,YAAY;AAE5B,UAAQ,SAAS,CAAC;AAElB,MAAI,CAAC,KAAK;AACT,UAAM,QAAQ,SAAS,GAAG,IAAI,GAAG,QAAQ,MAAM,GAAG,EAAE,CAAC,GAAG,QAAQ,KAAK,GAAG,OAAO,GAAG,QAAQ;AAAA,EAC3F;AAEA,QAAM,UAA2B;AAAA,IAChC;AAAA,IACA;AAAA,IACA,IAAI;AAAA,IACJ;AAAA,IACA,MAAM;AAAA,EACP;AAEA,MAAI,OAAO,KAAK,MAAM,EAAE,WAAW,GAAG;AACrC,WAAO,OAAO,SAAS,MAAM;AAAA,EAC9B;AAEA,MAAI,OAAO,KAAK,IAAI,EAAE,WAAW,GAAG;AACnC,WAAO,QAAQ;AAAA,EAChB;AAEA,SAAO,MAAM,KAAK,QAAQ,0BAA0B,KAAK,MAAM,sBAAsB,OAAO;AAC7F;AAQA,eAAsB,mBAErB,QACA,UACA,MACA,OACe;AACf,QAAM,UAAU,KAAK,QAAQ,EAAE;AAE/B,MAAI,UAAU,QAAW;AACxB,YAAQ,CAAC;AAAA,EACV;AACA,QAAM,QAAQ;AACd,QAAM,SAAS,OAAO,SAAU,MAAM,SAAoB;AAC1D,QAAM,aAA4B,CAAC;AAEnC,MAAI;AAEJ,KAAG;AACF,mBAAe,MAAM,WAAW,KAAK,MAAM,QAAQ,UAAU,MAAM,KAAK;AACxE,gBAAY,IACT,WAAW,KAAK,GAAI,YAA8B,IAClD,WAAW,KAAK,GAAI,aAAa,IAAsB;AAE1D,UAAM,UAAU,MAAM;AAAA,EACvB,SAAS,YAAY,IAAI,aAAa,WAAW,IAAI,aAAa,SAAS,eAAe;AAE1F,SAAO;AACR;AAEA,eAAsB,0BAErB,SACA,YACA,YACgC;AAChC,QAAM,WAAiC,CAAC;AAExC,aAAW,UAAU,SAAS;AAC7B,UAAM,UAA8B,EAAE,MAAM,CAAC,GAAG,QAAQ,CAAC,EAAE;AAC3D,QAAI,YAAY;AACf,cAAQ,aAAa;AAAA,IACtB;AACA,YAAQ,OAAO;AACf,eAAW,aAAa,YAAY;AACnC,UAAI,cAAc,OAAO,SAAS;AAClC,UAAI,OAAO,gBAAgB,UAAU;AACpC,0BAAc,+BAAyB,OAAO,SAAS,CAAW;AAAA,MACnE;AACA,UAAI,OAAO,SAAS,GAAG;AACtB,mBAAW,CAAC,OAAO,UAAU,KAAK,YAAY,QAAQ,GAAG;AACxD,gBAAM,gBAAgB,WAAW,aAAa,WAAW;AACzD,gBAAM,OAAe,MAAM,WAAW,KAAK,MAAM,OAAO,IAAI,CAAC,GAAG,CAAC,GAAG,eAAe;AAAA,YAClF,MAAM;AAAA,YACN,UAAU;AAAA,UACX,CAAC;AACD,kBAAQ,OAAQ,GAAG,SAAS,IAAI,KAAK,EAAE,IAAI,MAAM,KAAK,QAAQ;AAAA,YAC7D,OAAO,KAAK,IAAI;AAAA,YAChB,WAAW;AAAA,YACX,WAAW;AAAA,UACZ;AAAA,QACD;AAAA,MACD;AAAA,IACD;AACA,QAAI,OAAO,KAAK,QAAQ,MAAwB,EAAE,WAAW,GAAG;AAC/D,aAAO,QAAQ;AAAA,IAChB;AACA,aAAS,KAAK,OAAO;AAAA,EACtB;AACA,SAAO;AACR;","names":[]}