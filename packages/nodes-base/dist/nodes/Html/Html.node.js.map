{"version":3,"sources":["../../../nodes/Html/Html.node.ts"],"sourcesContent":["import cheerio from 'cheerio';\nimport get from 'lodash/get';\nimport type {\n\tINodeExecutionData,\n\tIExecuteFunctions,\n\tINodeType,\n\tINodeTypeDescription,\n\tIDataObject,\n\tINodeProperties,\n} from 'n8n-workflow';\nimport { NodeConnectionTypes, NodeOperationError } from 'n8n-workflow';\n\nimport { getResolvables, sanitizeDataPathKey } from '@utils/utilities';\n\nimport { placeholder } from './placeholder';\nimport type { IValueData } from './types';\nimport { getValue } from './utils';\n\nexport const capitalizeHeader = (header: string, capitalize?: boolean) => {\n\tif (!capitalize) return header;\n\treturn header\n\t\t.split('_')\n\t\t.filter((word) => word)\n\t\t.map((word) => word[0].toUpperCase() + word.slice(1))\n\t\t.join(' ');\n};\n\nconst extractionValuesCollection: INodeProperties = {\n\tdisplayName: 'Extraction Values',\n\tname: 'extractionValues',\n\tplaceholder: 'Add Value',\n\ttype: 'fixedCollection',\n\ttypeOptions: {\n\t\tmultipleValues: true,\n\t},\n\tdefault: {},\n\toptions: [\n\t\t{\n\t\t\tname: 'values',\n\t\t\tdisplayName: 'Values',\n\t\t\tvalues: [\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'Key',\n\t\t\t\t\tname: 'key',\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tdefault: '',\n\t\t\t\t\tdescription: 'The key under which the extracted value should be saved',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'CSS Selector',\n\t\t\t\t\tname: 'cssSelector',\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tdefault: '',\n\t\t\t\t\tplaceholder: '.price',\n\t\t\t\t\tdescription: 'The CSS selector to use',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'Return Value',\n\t\t\t\t\tname: 'returnValue',\n\t\t\t\t\ttype: 'options',\n\t\t\t\t\toptions: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'Attribute',\n\t\t\t\t\t\t\tvalue: 'attribute',\n\t\t\t\t\t\t\tdescription: 'Get an attribute value like \"class\" from an element',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'HTML',\n\t\t\t\t\t\t\tvalue: 'html',\n\t\t\t\t\t\t\tdescription: 'Get the HTML the element contains',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'Text',\n\t\t\t\t\t\t\tvalue: 'text',\n\t\t\t\t\t\t\tdescription: 'Get only the text content of the element',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'Value',\n\t\t\t\t\t\t\tvalue: 'value',\n\t\t\t\t\t\t\tdescription: 'Get value of an input, select or textarea',\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t\tdefault: 'text',\n\t\t\t\t\tdescription: 'What kind of data should be returned',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'Attribute',\n\t\t\t\t\tname: 'attribute',\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\treturnValue: ['attribute'],\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tdefault: '',\n\t\t\t\t\tplaceholder: 'class',\n\t\t\t\t\tdescription: 'The name of the attribute to return the value off',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'Skip Selectors',\n\t\t\t\t\tname: 'skipSelectors',\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\treturnValue: ['text'],\n\t\t\t\t\t\t\t'@version': [{ _cnd: { gt: 1.1 } }],\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tdefault: '',\n\t\t\t\t\tplaceholder: 'e.g. img, .className, #ItemId',\n\t\t\t\t\tdescription: 'Comma-separated list of selectors to skip in the text extraction',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'Return Array',\n\t\t\t\t\tname: 'returnArray',\n\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\tdefault: false,\n\t\t\t\t\tdescription:\n\t\t\t\t\t\t'Whether to return the values as an array so if multiple ones get found they also get returned separately. If not set all will be returned as a single string.',\n\t\t\t\t},\n\t\t\t],\n\t\t},\n\t],\n};\n\nexport class Html implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'HTML',\n\t\tname: 'html',\n\t\ticon: { light: 'file:html.svg', dark: 'file:html.dark.svg' },\n\t\tgroup: ['transform'],\n\t\tversion: [1, 1.1, 1.2],\n\t\tsubtitle: '={{ $parameter[\"operation\"] }}',\n\t\tdescription: 'Work with HTML',\n\t\tdefaults: {\n\t\t\tname: 'HTML',\n\t\t},\n\t\tinputs: [NodeConnectionTypes.Main],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tparameterPane: 'wide',\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Operation',\n\t\t\t\tname: 'operation',\n\t\t\t\ttype: 'options',\n\t\t\t\tnoDataExpression: true,\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Generate HTML Template',\n\t\t\t\t\t\tvalue: 'generateHtmlTemplate',\n\t\t\t\t\t\taction: 'Generate HTML template',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Extract HTML Content',\n\t\t\t\t\t\tvalue: 'extractHtmlContent',\n\t\t\t\t\t\taction: 'Extract HTML Content',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Convert to HTML Table',\n\t\t\t\t\t\tvalue: 'convertToHtmlTable',\n\t\t\t\t\t\taction: 'Convert to HTML Table',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'generateHtmlTemplate',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'HTML Template',\n\t\t\t\tname: 'html',\n\t\t\t\ttypeOptions: {\n\t\t\t\t\teditor: 'htmlEditor',\n\t\t\t\t},\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: placeholder,\n\t\t\t\tnoDataExpression: true,\n\t\t\t\tdescription: 'HTML template to render',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['generateHtmlTemplate'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName:\n\t\t\t\t\t'<b>Tips</b>: Type ctrl+space for completions. Use <code>{{ }}</code> for expressions and <code>&lt;style&gt;</code> tags for CSS. JS in <code>&lt;script&gt;</code> tags is included but not executed in n8n.',\n\t\t\t\tname: 'notice',\n\t\t\t\ttype: 'notice',\n\t\t\t\tdefault: '',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['generateHtmlTemplate'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Source Data',\n\t\t\t\tname: 'sourceData',\n\t\t\t\ttype: 'options',\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Binary',\n\t\t\t\t\t\tvalue: 'binary',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'JSON',\n\t\t\t\t\t\tvalue: 'json',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'json',\n\t\t\t\tdescription: 'If HTML should be read from binary or JSON data',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['extractHtmlContent'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Input Binary Field',\n\t\t\t\tname: 'dataPropertyName',\n\t\t\t\ttype: 'string',\n\t\t\t\trequiresDataPath: 'single',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['extractHtmlContent'],\n\t\t\t\t\t\tsourceData: ['binary'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdefault: 'data',\n\t\t\t\trequired: true,\n\t\t\t\thint: 'The name of the input binary field containing the file to be extracted',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'JSON Property',\n\t\t\t\tname: 'dataPropertyName',\n\t\t\t\ttype: 'string',\n\t\t\t\trequiresDataPath: 'single',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['extractHtmlContent'],\n\t\t\t\t\t\tsourceData: ['json'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdefault: 'data',\n\t\t\t\trequired: true,\n\t\t\t\tdescription:\n\t\t\t\t\t'Name of the JSON property in which the HTML to extract the data from can be found. The property can either contain a string or an array of strings.',\n\t\t\t},\n\t\t\t{\n\t\t\t\t...extractionValuesCollection,\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['extractHtmlContent'],\n\t\t\t\t\t\t'@version': [1],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t...extractionValuesCollection,\n\t\t\t\tdefault: {\n\t\t\t\t\tvalues: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tkey: '',\n\t\t\t\t\t\t\tcssSelector: '',\n\t\t\t\t\t\t\treturnValue: 'text',\n\t\t\t\t\t\t\treturnArray: false,\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['extractHtmlContent'],\n\t\t\t\t\t\t'@version': [{ _cnd: { gt: 1 } }],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Options',\n\t\t\t\tname: 'options',\n\t\t\t\ttype: 'collection',\n\t\t\t\tplaceholder: 'Add option',\n\t\t\t\tdefault: {},\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['extractHtmlContent'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Trim Values',\n\t\t\t\t\t\tname: 'trimValues',\n\t\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\t\tdefault: true,\n\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t'Whether to remove automatically all spaces and newlines from the beginning and end of the values',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Clean Up Text',\n\t\t\t\t\t\tname: 'cleanUpText',\n\t\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\t\tdefault: true,\n\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t'Whether to remove leading and trailing whitespaces, line breaks (newlines) and condense multiple consecutive whitespaces into a single space',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t// ----------------------------------\n\t\t\t//       convertToHtmlTable\n\t\t\t// ----------------------------------\n\t\t\t{\n\t\t\t\tdisplayName: 'Options',\n\t\t\t\tname: 'options',\n\t\t\t\ttype: 'collection',\n\t\t\t\tplaceholder: 'Add option',\n\t\t\t\tdefault: {},\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['convertToHtmlTable'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Capitalize Headers',\n\t\t\t\t\t\tname: 'capitalize',\n\t\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\t\tdefault: false,\n\t\t\t\t\t\tdescription: 'Whether to capitalize the headers',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Custom Styling',\n\t\t\t\t\t\tname: 'customStyling',\n\t\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\t\tdefault: false,\n\t\t\t\t\t\tdescription: 'Whether to use custom styling',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Caption',\n\t\t\t\t\t\tname: 'caption',\n\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\tdescription: 'Caption to add to the table',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Table Attributes',\n\t\t\t\t\t\tname: 'tableAttributes',\n\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\tdescription: 'Attributes to attach to the table',\n\t\t\t\t\t\tplaceholder: 'e.g. style=\"padding:10px\"',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Header Attributes',\n\t\t\t\t\t\tname: 'headerAttributes',\n\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\tdescription: 'Attributes to attach to the table header',\n\t\t\t\t\t\tplaceholder: 'e.g. style=\"padding:10px\"',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Row Attributes',\n\t\t\t\t\t\tname: 'rowAttributes',\n\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\tdescription: 'Attributes to attach to the table row',\n\t\t\t\t\t\tplaceholder: 'e.g. style=\"padding:10px\"',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Cell Attributes',\n\t\t\t\t\t\tname: 'cellAttributes',\n\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\tdescription: 'Attributes to attach to the table cell',\n\t\t\t\t\t\tplaceholder: 'e.g. style=\"padding:10px\"',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t],\n\t};\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t\tconst items = this.getInputData();\n\t\tconst operation = this.getNodeParameter('operation', 0);\n\t\tconst nodeVersion = this.getNode().typeVersion;\n\n\t\tif (operation === 'convertToHtmlTable' && items.length) {\n\t\t\tlet table = '';\n\n\t\t\tconst options = this.getNodeParameter('options', 0);\n\n\t\t\tlet tableStyle = '';\n\t\t\tlet headerStyle = '';\n\t\t\tlet cellStyle = '';\n\n\t\t\tif (!options.customStyling) {\n\t\t\t\ttableStyle = \"style='border-spacing:0; font-family:helvetica,arial,sans-serif'\";\n\t\t\t\theaderStyle =\n\t\t\t\t\t\"style='margin:0; padding:7px 20px 7px 0px; border-bottom:1px solid #eee; text-align:left; color:#888; font-weight:normal'\";\n\t\t\t\tcellStyle = \"style='margin:0; padding:7px 20px 7px 0px; border-bottom:1px solid #eee'\";\n\t\t\t}\n\n\t\t\tconst tableAttributes = (options.tableAttributes as string) || '';\n\t\t\tconst headerAttributes = (options.headerAttributes as string) || '';\n\n\t\t\tconst itemsData: IDataObject[] = [];\n\t\t\tconst itemsKeys = new Set<string>();\n\n\t\t\tfor (const entry of items) {\n\t\t\t\titemsData.push(entry.json);\n\n\t\t\t\tfor (const key of Object.keys(entry.json)) {\n\t\t\t\t\titemsKeys.add(key);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst headers = Array.from(itemsKeys);\n\n\t\t\ttable += `<table ${tableStyle} ${tableAttributes}>`;\n\n\t\t\tif (options.caption) {\n\t\t\t\ttable += `<caption>${options.caption}</caption>`;\n\t\t\t}\n\n\t\t\ttable += `<thead ${headerStyle} ${headerAttributes}>`;\n\t\t\ttable += '<tr>';\n\t\t\ttable += headers\n\t\t\t\t.map((header) => '<th>' + capitalizeHeader(header, options.capitalize as boolean) + '</th>')\n\t\t\t\t.join('');\n\t\t\ttable += '</tr>';\n\t\t\ttable += '</thead>';\n\n\t\t\ttable += '<tbody>';\n\t\t\titemsData.forEach((entry, entryIndex) => {\n\t\t\t\tconst rowsAttributes = this.getNodeParameter(\n\t\t\t\t\t'options.rowAttributes',\n\t\t\t\t\tentryIndex,\n\t\t\t\t\t'',\n\t\t\t\t) as string;\n\n\t\t\t\ttable += `<tr  ${rowsAttributes}>`;\n\n\t\t\t\tconst cellsAttributes = this.getNodeParameter(\n\t\t\t\t\t'options.cellAttributes',\n\t\t\t\t\tentryIndex,\n\t\t\t\t\t'',\n\t\t\t\t) as string;\n\n\t\t\t\ttable += headers\n\t\t\t\t\t.map((header) => {\n\t\t\t\t\t\tlet td = `<td ${cellStyle} ${cellsAttributes}>`;\n\n\t\t\t\t\t\tif (typeof entry[header] === 'boolean') {\n\t\t\t\t\t\t\tconst isChecked = entry[header] ? 'checked=\"checked\"' : '';\n\t\t\t\t\t\t\ttd += `<input type=\"checkbox\" ${isChecked}/>`;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttd += entry[header];\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttd += '</td>';\n\t\t\t\t\t\treturn td;\n\t\t\t\t\t})\n\t\t\t\t\t.join('');\n\t\t\t\ttable += '</tr>';\n\t\t\t});\n\n\t\t\ttable += '</tbody>';\n\t\t\ttable += '</table>';\n\n\t\t\treturn [\n\t\t\t\t[\n\t\t\t\t\t{\n\t\t\t\t\t\tjson: { table },\n\t\t\t\t\t\tpairedItem: items.map((_item, index) => ({\n\t\t\t\t\t\t\titem: index,\n\t\t\t\t\t\t})),\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t];\n\t\t}\n\n\t\tlet item: INodeExecutionData;\n\t\tconst returnData: INodeExecutionData[] = [];\n\t\tfor (let itemIndex = 0; itemIndex < items.length; itemIndex++) {\n\t\t\ttry {\n\t\t\t\tif (operation === 'generateHtmlTemplate') {\n\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t//       generateHtmlTemplate\n\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\tlet html = this.getNodeParameter('html', itemIndex) as string;\n\n\t\t\t\t\tfor (const resolvable of getResolvables(html)) {\n\t\t\t\t\t\thtml = html.replace(\n\t\t\t\t\t\t\tresolvable,\n\t\t\t\t\t\t\tthis.evaluateExpression(resolvable, itemIndex) as string,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst result = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\tthis.helpers.returnJsonArray({ html }),\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\titemData: { item: itemIndex },\n\t\t\t\t\t\t},\n\t\t\t\t\t);\n\n\t\t\t\t\treturnData.push(...result);\n\t\t\t\t} else if (operation === 'extractHtmlContent') {\n\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t//         extractHtmlContent\n\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\tconst dataPropertyName = this.getNodeParameter('dataPropertyName', itemIndex);\n\t\t\t\t\tconst extractionValues = this.getNodeParameter(\n\t\t\t\t\t\t'extractionValues',\n\t\t\t\t\t\titemIndex,\n\t\t\t\t\t) as IDataObject;\n\t\t\t\t\tconst options = this.getNodeParameter('options', itemIndex, {});\n\t\t\t\t\tconst sourceData = this.getNodeParameter('sourceData', itemIndex) as string;\n\n\t\t\t\t\titem = items[itemIndex];\n\n\t\t\t\t\tlet htmlArray: string[] | string = [];\n\t\t\t\t\tif (sourceData === 'json') {\n\t\t\t\t\t\tif (nodeVersion === 1) {\n\t\t\t\t\t\t\tconst key = sanitizeDataPathKey(item.json, dataPropertyName);\n\t\t\t\t\t\t\tif (item.json[key] === undefined) {\n\t\t\t\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t\t\t\t`No property named \"${dataPropertyName}\" exists!`,\n\t\t\t\t\t\t\t\t\t{ itemIndex },\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\thtmlArray = item.json[key] as string;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst value = get(item.json, dataPropertyName);\n\t\t\t\t\t\t\tif (value === undefined) {\n\t\t\t\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t\t\t\t`No property named \"${dataPropertyName}\" exists!`,\n\t\t\t\t\t\t\t\t\t{ itemIndex },\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\thtmlArray = value as string;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.helpers.assertBinaryData(itemIndex, dataPropertyName);\n\t\t\t\t\t\tconst binaryDataBuffer = await this.helpers.getBinaryDataBuffer(\n\t\t\t\t\t\t\titemIndex,\n\t\t\t\t\t\t\tdataPropertyName,\n\t\t\t\t\t\t);\n\t\t\t\t\t\thtmlArray = binaryDataBuffer.toString('utf-8');\n\t\t\t\t\t}\n\n\t\t\t\t\t// Convert it always to array that it works with a string or an array of strings\n\t\t\t\t\tif (!Array.isArray(htmlArray)) {\n\t\t\t\t\t\thtmlArray = [htmlArray];\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (const html of htmlArray) {\n\t\t\t\t\t\tconst $ = cheerio.load(html);\n\n\t\t\t\t\t\tconst newItem: INodeExecutionData = {\n\t\t\t\t\t\t\tjson: {},\n\t\t\t\t\t\t\tpairedItem: {\n\t\t\t\t\t\t\t\titem: itemIndex,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\t// Iterate over all the defined values which should be extracted\n\t\t\t\t\t\tlet htmlElement;\n\t\t\t\t\t\tfor (const valueData of extractionValues.values as IValueData[]) {\n\t\t\t\t\t\t\thtmlElement = $(valueData.cssSelector);\n\n\t\t\t\t\t\t\tif (valueData.returnArray) {\n\t\t\t\t\t\t\t\t// An array should be returned so iterate over one\n\t\t\t\t\t\t\t\t// value at a time\n\t\t\t\t\t\t\t\tnewItem.json[valueData.key] = [];\n\t\t\t\t\t\t\t\thtmlElement.each((_, el) => {\n\t\t\t\t\t\t\t\t\t(newItem.json[valueData.key] as Array<string | undefined>).push(\n\t\t\t\t\t\t\t\t\t\tgetValue($(el), valueData, options, nodeVersion),\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t// One single value should be returned\n\t\t\t\t\t\t\t\tnewItem.json[valueData.key] = getValue(\n\t\t\t\t\t\t\t\t\thtmlElement,\n\t\t\t\t\t\t\t\t\tvalueData,\n\t\t\t\t\t\t\t\t\toptions,\n\t\t\t\t\t\t\t\t\tnodeVersion,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturnData.push(newItem);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\treturnData.push({\n\t\t\t\t\t\tjson: {\n\t\t\t\t\t\t\terror: error.message,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tpairedItem: {\n\t\t\t\t\t\t\titem: itemIndex,\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\n\t\treturn [returnData];\n\t}\n}\n"],"mappings":"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","names":["get","cheerio"]}