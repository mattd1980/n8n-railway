{"version":3,"sources":["../../../nodes/Signl4/GenericFunctions.ts"],"sourcesContent":["import type {\n\tIExecuteFunctions,\n\tIDataObject,\n\tJsonObject,\n\tIRequestOptions,\n\tIHttpRequestMethods,\n} from 'n8n-workflow';\nimport { NodeApiError } from 'n8n-workflow';\n\n/**\n * Make an API request to SIGNL4\n *\n * @param {IHookFunctions | IExecuteFunctions} this\n *\n */\n\nexport async function SIGNL4ApiRequest(\n\tthis: IExecuteFunctions,\n\tmethod: IHttpRequestMethods,\n\tbody: string,\n\tquery: IDataObject = {},\n\toption: IDataObject = {},\n): Promise<any> {\n\tconst credentials = await this.getCredentials('signl4Api');\n\n\tconst teamSecret = credentials?.teamSecret as string;\n\n\tlet options: IRequestOptions = {\n\t\theaders: {\n\t\t\tAccept: '*/*',\n\t\t},\n\t\tmethod,\n\t\tbody,\n\t\tqs: query,\n\t\turi: `https://connect.signl4.com/webhook/${teamSecret}`,\n\t\tjson: true,\n\t};\n\n\tif (!Object.keys(body).length) {\n\t\tdelete options.body;\n\t}\n\tif (!Object.keys(query).length) {\n\t\tdelete options.qs;\n\t}\n\toptions = Object.assign({}, options, option);\n\n\ttry {\n\t\treturn await this.helpers.request(options);\n\t} catch (error) {\n\t\tthrow new NodeApiError(this.getNode(), error as JsonObject);\n\t}\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA,0BAA6B;AAS7B,eAAsB,iBAErB,QACA,MACA,QAAqB,CAAC,GACtB,SAAsB,CAAC,GACR;AACf,QAAM,cAAc,MAAM,KAAK,eAAe,WAAW;AAEzD,QAAM,aAAa,aAAa;AAEhC,MAAI,UAA2B;AAAA,IAC9B,SAAS;AAAA,MACR,QAAQ;AAAA,IACT;AAAA,IACA;AAAA,IACA;AAAA,IACA,IAAI;AAAA,IACJ,KAAK,sCAAsC,UAAU;AAAA,IACrD,MAAM;AAAA,EACP;AAEA,MAAI,CAAC,OAAO,KAAK,IAAI,EAAE,QAAQ;AAC9B,WAAO,QAAQ;AAAA,EAChB;AACA,MAAI,CAAC,OAAO,KAAK,KAAK,EAAE,QAAQ;AAC/B,WAAO,QAAQ;AAAA,EAChB;AACA,YAAU,OAAO,OAAO,CAAC,GAAG,SAAS,MAAM;AAE3C,MAAI;AACH,WAAO,MAAM,KAAK,QAAQ,QAAQ,OAAO;AAAA,EAC1C,SAAS,OAAO;AACf,UAAM,IAAI,iCAAa,KAAK,QAAQ,GAAG,KAAmB;AAAA,EAC3D;AACD;","names":[]}