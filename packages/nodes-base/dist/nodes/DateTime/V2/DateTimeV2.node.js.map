{"version":3,"sources":["../../../../nodes/DateTime/V2/DateTimeV2.node.ts"],"sourcesContent":["import type { DateTimeUnit, DurationUnit } from 'luxon';\nimport { DateTime } from 'luxon';\nimport { NodeConnectionTypes, NodeOperationError } from 'n8n-workflow';\nimport type {\n\tIExecuteFunctions,\n\tINodeExecutionData,\n\tINodeType,\n\tINodeTypeBaseDescription,\n\tINodeTypeDescription,\n} from 'n8n-workflow';\n\nimport { AddToDateDescription } from './AddToDateDescription';\nimport { CurrentDateDescription } from './CurrentDateDescription';\nimport { ExtractDateDescription } from './ExtractDateDescription';\nimport { FormatDateDescription } from './FormatDateDescription';\nimport { parseDate } from './GenericFunctions';\nimport { GetTimeBetweenDatesDescription } from './GetTimeBetweenDates';\nimport { RoundDateDescription } from './RoundDateDescription';\nimport { SubtractFromDateDescription } from './SubtractFromDateDescription';\n\nexport class DateTimeV2 implements INodeType {\n\tdescription: INodeTypeDescription;\n\n\tconstructor(baseDescription: INodeTypeBaseDescription) {\n\t\tthis.description = {\n\t\t\t...baseDescription,\n\t\t\tversion: 2,\n\t\t\tdefaults: {\n\t\t\t\tname: 'Date & Time',\n\t\t\t\tcolor: '#408000',\n\t\t\t},\n\t\t\tusableAsTool: true,\n\t\t\tinputs: [NodeConnectionTypes.Main],\n\t\t\toutputs: [NodeConnectionTypes.Main],\n\t\t\tdescription: 'Manipulate date and time values',\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'Operation',\n\t\t\t\t\tname: 'operation',\n\t\t\t\t\ttype: 'options',\n\t\t\t\t\tnoDataExpression: true,\n\t\t\t\t\toptions: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'Add to a Date',\n\t\t\t\t\t\t\tvalue: 'addToDate',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'Extract Part of a Date',\n\t\t\t\t\t\t\tvalue: 'extractDate',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'Format a Date',\n\t\t\t\t\t\t\tvalue: 'formatDate',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'Get Current Date',\n\t\t\t\t\t\t\tvalue: 'getCurrentDate',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'Get Time Between Dates',\n\t\t\t\t\t\t\tvalue: 'getTimeBetweenDates',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'Round a Date',\n\t\t\t\t\t\t\tvalue: 'roundDate',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'Subtract From a Date',\n\t\t\t\t\t\t\tvalue: 'subtractFromDate',\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t\tdefault: 'getCurrentDate',\n\t\t\t\t},\n\t\t\t\t...CurrentDateDescription,\n\t\t\t\t...AddToDateDescription,\n\t\t\t\t...SubtractFromDateDescription,\n\t\t\t\t...FormatDateDescription,\n\t\t\t\t...RoundDateDescription,\n\t\t\t\t...GetTimeBetweenDatesDescription,\n\t\t\t\t...ExtractDateDescription,\n\t\t\t],\n\t\t};\n\t}\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t\tconst items = this.getInputData();\n\t\tconst returnData: INodeExecutionData[] = [];\n\t\tconst operation = this.getNodeParameter('operation', 0);\n\t\tconst workflowTimezone = this.getTimezone();\n\t\tconst includeInputFields = this.getNodeParameter(\n\t\t\t'options.includeInputFields',\n\t\t\t0,\n\t\t\tfalse,\n\t\t) as boolean;\n\n\t\tconst copyShallow = (item: INodeExecutionData) => ({\n\t\t\tjson: { ...item.json },\n\t\t\tbinary: item.binary,\n\t\t});\n\n\t\tfor (let i = 0; i < items.length; i++) {\n\t\t\ttry {\n\t\t\t\tconst item: INodeExecutionData = includeInputFields ? copyShallow(items[i]) : { json: {} };\n\t\t\t\titem.pairedItem = {\n\t\t\t\t\titem: i,\n\t\t\t\t};\n\n\t\t\t\tif (operation === 'getCurrentDate') {\n\t\t\t\t\tconst includeTime = this.getNodeParameter('includeTime', i) as boolean;\n\t\t\t\t\tconst outputFieldName = this.getNodeParameter('outputFieldName', i) as string;\n\t\t\t\t\tconst { timezone } = this.getNodeParameter('options', i) as {\n\t\t\t\t\t\ttimezone: string;\n\t\t\t\t\t};\n\n\t\t\t\t\tconst newLocal = timezone ? timezone : workflowTimezone;\n\t\t\t\t\tif (DateTime.now().setZone(newLocal).invalidReason === 'unsupported zone') {\n\t\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t\t`The timezone ${newLocal} is not valid. Please check the timezone.`,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (includeTime) {\n\t\t\t\t\t\titem.json[outputFieldName] = DateTime.now().setZone(newLocal).toString();\n\t\t\t\t\t} else {\n\t\t\t\t\t\titem.json[outputFieldName] = DateTime.now().setZone(newLocal).startOf('day').toString();\n\t\t\t\t\t}\n\t\t\t\t\treturnData.push(item);\n\t\t\t\t} else if (operation === 'addToDate') {\n\t\t\t\t\tconst addToDate = this.getNodeParameter('magnitude', i) as string;\n\t\t\t\t\tconst timeUnit = this.getNodeParameter('timeUnit', i) as string;\n\t\t\t\t\tconst duration = this.getNodeParameter('duration', i) as number;\n\t\t\t\t\tconst outputFieldName = this.getNodeParameter('outputFieldName', i) as string;\n\n\t\t\t\t\tconst dateToAdd = parseDate.call(this, addToDate, { timezone: workflowTimezone });\n\t\t\t\t\tconst returnedDate = dateToAdd.plus({ [timeUnit]: duration });\n\n\t\t\t\t\titem.json[outputFieldName] = returnedDate.toString();\n\t\t\t\t\treturnData.push(item);\n\t\t\t\t} else if (operation === 'subtractFromDate') {\n\t\t\t\t\tconst subtractFromDate = this.getNodeParameter('magnitude', i) as string;\n\t\t\t\t\tconst timeUnit = this.getNodeParameter('timeUnit', i) as string;\n\t\t\t\t\tconst duration = this.getNodeParameter('duration', i) as number;\n\t\t\t\t\tconst outputFieldName = this.getNodeParameter('outputFieldName', i) as string;\n\n\t\t\t\t\tconst dateToAdd = parseDate.call(this, subtractFromDate, { timezone: workflowTimezone });\n\t\t\t\t\tconst returnedDate = dateToAdd.minus({ [timeUnit]: duration });\n\n\t\t\t\t\titem.json[outputFieldName] = returnedDate.toString();\n\t\t\t\t\treturnData.push(item);\n\t\t\t\t} else if (operation === 'formatDate') {\n\t\t\t\t\tconst date = this.getNodeParameter('date', i) as string;\n\t\t\t\t\tconst format = this.getNodeParameter('format', i) as string;\n\t\t\t\t\tconst outputFieldName = this.getNodeParameter('outputFieldName', i) as string;\n\t\t\t\t\tconst { timezone, fromFormat } = this.getNodeParameter('options', i) as {\n\t\t\t\t\t\ttimezone: boolean;\n\t\t\t\t\t\tfromFormat: string;\n\t\t\t\t\t};\n\n\t\t\t\t\tif (date === null || date === undefined) {\n\t\t\t\t\t\titem.json[outputFieldName] = date;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst dateLuxon = parseDate.call(this, date, {\n\t\t\t\t\t\t\ttimezone: timezone ? workflowTimezone : undefined,\n\t\t\t\t\t\t\tfromFormat,\n\t\t\t\t\t\t});\n\t\t\t\t\t\tif (format === 'custom') {\n\t\t\t\t\t\t\tconst customFormat = this.getNodeParameter('customFormat', i) as string;\n\t\t\t\t\t\t\titem.json[outputFieldName] = dateLuxon.toFormat(customFormat);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\titem.json[outputFieldName] = dateLuxon.toFormat(format);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturnData.push(item);\n\t\t\t\t} else if (operation === 'roundDate') {\n\t\t\t\t\tconst date = this.getNodeParameter('date', i) as string;\n\t\t\t\t\tconst mode = this.getNodeParameter('mode', i) as string;\n\t\t\t\t\tconst outputFieldName = this.getNodeParameter('outputFieldName', i) as string;\n\n\t\t\t\t\tconst dateLuxon = parseDate.call(this, date, { timezone: workflowTimezone });\n\n\t\t\t\t\tif (mode === 'roundDown') {\n\t\t\t\t\t\tconst toNearest = this.getNodeParameter('toNearest', i) as string;\n\t\t\t\t\t\titem.json[outputFieldName] = dateLuxon.startOf(toNearest as DateTimeUnit).toString();\n\t\t\t\t\t} else if (mode === 'roundUp') {\n\t\t\t\t\t\tconst to = this.getNodeParameter('to', i) as string;\n\t\t\t\t\t\titem.json[outputFieldName] = dateLuxon\n\t\t\t\t\t\t\t.plus({ [to]: 1 })\n\t\t\t\t\t\t\t.startOf(to as DateTimeUnit)\n\t\t\t\t\t\t\t.toString();\n\t\t\t\t\t}\n\t\t\t\t\treturnData.push(item);\n\t\t\t\t} else if (operation === 'getTimeBetweenDates') {\n\t\t\t\t\tconst startDate = this.getNodeParameter('startDate', i) as string;\n\t\t\t\t\tconst endDate = this.getNodeParameter('endDate', i) as string;\n\t\t\t\t\tconst unit = this.getNodeParameter('units', i) as DurationUnit[];\n\t\t\t\t\tconst outputFieldName = this.getNodeParameter('outputFieldName', i) as string;\n\t\t\t\t\tconst { isoString } = this.getNodeParameter('options', i) as {\n\t\t\t\t\t\tisoString: boolean;\n\t\t\t\t\t};\n\n\t\t\t\t\tconst luxonStartDate = parseDate.call(this, startDate, { timezone: workflowTimezone });\n\t\t\t\t\tconst luxonEndDate = parseDate.call(this, endDate, { timezone: workflowTimezone });\n\t\t\t\t\tconst duration = luxonEndDate.diff(luxonStartDate, unit);\n\t\t\t\t\tif (isoString) {\n\t\t\t\t\t\titem.json[outputFieldName] = duration.toString();\n\t\t\t\t\t} else {\n\t\t\t\t\t\titem.json[outputFieldName] = duration.toObject();\n\t\t\t\t\t}\n\t\t\t\t\treturnData.push(item);\n\t\t\t\t} else if (operation === 'extractDate') {\n\t\t\t\t\tconst date = this.getNodeParameter('date', i) as string | DateTime;\n\t\t\t\t\tconst outputFieldName = this.getNodeParameter('outputFieldName', i) as string;\n\t\t\t\t\tconst part = this.getNodeParameter('part', i) as keyof DateTime | 'week';\n\n\t\t\t\t\tconst parsedDate = parseDate.call(this, date, { timezone: workflowTimezone });\n\t\t\t\t\tconst selectedPart = part === 'week' ? parsedDate.weekNumber : parsedDate.get(part);\n\t\t\t\t\titem.json[outputFieldName] = selectedPart;\n\t\t\t\t\treturnData.push(item);\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\treturnData.push({ json: { error: error.message } });\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tthrow new NodeOperationError(this.getNode(), error, { itemIndex: i });\n\t\t\t}\n\t\t}\n\t\treturn [returnData];\n\t}\n}\n"],"mappings":"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","names":[]}