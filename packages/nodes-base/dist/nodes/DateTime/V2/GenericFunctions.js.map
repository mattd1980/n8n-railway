{"version":3,"sources":["../../../../nodes/DateTime/V2/GenericFunctions.ts"],"sourcesContent":["import { DateTime } from 'luxon';\nimport moment from 'moment-timezone';\nimport type { IExecuteFunctions } from 'n8n-workflow';\nimport { NodeOperationError } from 'n8n-workflow';\n\nexport function parseDate(\n\tthis: IExecuteFunctions,\n\tdate: string | number | DateTime,\n\toptions: Partial<{\n\t\ttimezone: string;\n\t\tfromFormat: string;\n\t}> = {},\n) {\n\tlet parsedDate;\n\n\tif (date instanceof DateTime) {\n\t\tparsedDate = date;\n\t} else {\n\t\t// Check if the input is a number, don't convert to number if fromFormat is set\n\t\tif (!Number.isNaN(Number(date)) && !options.fromFormat) {\n\t\t\t//input is a number, convert to number in case it is a string formatted number\n\t\t\tdate = Number(date);\n\t\t\t// check if the number is a timestamp in float format and convert to integer\n\t\t\tif (!Number.isInteger(date)) {\n\t\t\t\tdate = date * 1000;\n\t\t\t}\n\t\t}\n\n\t\tlet timezone = options.timezone;\n\t\tif (Number.isInteger(date)) {\n\t\t\tconst timestampLengthInMilliseconds1990 = 12;\n\t\t\t// check if the number is a timestamp in seconds or milliseconds and create a moment object accordingly\n\t\t\tif (date.toString().length < timestampLengthInMilliseconds1990) {\n\t\t\t\tparsedDate = DateTime.fromSeconds(date as number);\n\t\t\t} else {\n\t\t\t\tparsedDate = DateTime.fromMillis(date as number);\n\t\t\t}\n\t\t} else {\n\t\t\tif (!timezone && (date as string).includes('+')) {\n\t\t\t\tconst offset = (date as string).split('+')[1].slice(0, 2) as unknown as number;\n\t\t\t\ttimezone = `Etc/GMT-${offset * 1}`;\n\t\t\t}\n\n\t\t\tif (options.fromFormat) {\n\t\t\t\tparsedDate = DateTime.fromFormat(date as string, options.fromFormat);\n\t\t\t} else {\n\t\t\t\tparsedDate = DateTime.fromISO(moment(date).toISOString());\n\t\t\t}\n\t\t}\n\n\t\tparsedDate = parsedDate.setZone(timezone || 'Etc/UTC');\n\n\t\tif (parsedDate.invalidReason === 'unparsable') {\n\t\t\tthrow new NodeOperationError(this.getNode(), 'Invalid date format');\n\t\t}\n\t}\n\treturn parsedDate;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAyB;AACzB,6BAAmB;AAEnB,0BAAmC;AAE5B,SAAS,UAEf,MACA,UAGK,CAAC,GACL;AACD,MAAI;AAEJ,MAAI,gBAAgB,uBAAU;AAC7B,iBAAa;AAAA,EACd,OAAO;AAEN,QAAI,CAAC,OAAO,MAAM,OAAO,IAAI,CAAC,KAAK,CAAC,QAAQ,YAAY;AAEvD,aAAO,OAAO,IAAI;AAElB,UAAI,CAAC,OAAO,UAAU,IAAI,GAAG;AAC5B,eAAO,OAAO;AAAA,MACf;AAAA,IACD;AAEA,QAAI,WAAW,QAAQ;AACvB,QAAI,OAAO,UAAU,IAAI,GAAG;AAC3B,YAAM,oCAAoC;AAE1C,UAAI,KAAK,SAAS,EAAE,SAAS,mCAAmC;AAC/D,qBAAa,sBAAS,YAAY,IAAc;AAAA,MACjD,OAAO;AACN,qBAAa,sBAAS,WAAW,IAAc;AAAA,MAChD;AAAA,IACD,OAAO;AACN,UAAI,CAAC,YAAa,KAAgB,SAAS,GAAG,GAAG;AAChD,cAAM,SAAU,KAAgB,MAAM,GAAG,EAAE,CAAC,EAAE,MAAM,GAAG,CAAC;AACxD,mBAAW,WAAW,SAAS,CAAC;AAAA,MACjC;AAEA,UAAI,QAAQ,YAAY;AACvB,qBAAa,sBAAS,WAAW,MAAgB,QAAQ,UAAU;AAAA,MACpE,OAAO;AACN,qBAAa,sBAAS,YAAQ,uBAAAA,SAAO,IAAI,EAAE,YAAY,CAAC;AAAA,MACzD;AAAA,IACD;AAEA,iBAAa,WAAW,QAAQ,YAAY,SAAS;AAErD,QAAI,WAAW,kBAAkB,cAAc;AAC9C,YAAM,IAAI,uCAAmB,KAAK,QAAQ,GAAG,qBAAqB;AAAA,IACnE;AAAA,EACD;AACA,SAAO;AACR;","names":["moment"]}