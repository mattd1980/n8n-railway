{"version":3,"sources":["../../../../nodes/DateTime/V1/DateTimeV1.node.ts"],"sourcesContent":["import set from 'lodash/set';\nimport { DateTime as LuxonDateTime } from 'luxon';\nimport moment from 'moment-timezone';\nimport type {\n\tIDataObject,\n\tIExecuteFunctions,\n\tILoadOptionsFunctions,\n\tINodeExecutionData,\n\tINodePropertyOptions,\n\tINodeType,\n\tINodeTypeBaseDescription,\n\tINodeTypeDescription,\n} from 'n8n-workflow';\nimport { deepCopy, NodeConnectionTypes, NodeOperationError } from 'n8n-workflow';\n\nfunction parseDateByFormat(this: IExecuteFunctions, value: string, fromFormat: string) {\n\tconst date = moment(value, fromFormat, true);\n\tif (moment(date).isValid()) return date;\n\n\tthrow new NodeOperationError(\n\t\tthis.getNode(),\n\t\t'Date input cannot be parsed. Please recheck the value and the \"From Format\" field.',\n\t);\n}\n\nfunction getIsoValue(this: IExecuteFunctions, value: string) {\n\ttry {\n\t\treturn new Date(value).toISOString(); // may throw due to unpredictable input\n\t} catch (error) {\n\t\tthrow new NodeOperationError(\n\t\t\tthis.getNode(),\n\t\t\t'Unrecognized date input. Please specify a format in the \"From Format\" field.',\n\t\t);\n\t}\n}\n\nfunction parseDateByDefault(this: IExecuteFunctions, value: string) {\n\tconst isoValue = getIsoValue.call(this, value);\n\tif (moment(isoValue).isValid()) return moment(isoValue);\n\n\tthrow new NodeOperationError(\n\t\tthis.getNode(),\n\t\t'Unrecognized date input. Please specify a format in the \"From Format\" field.',\n\t);\n}\n\nconst versionDescription: INodeTypeDescription = {\n\tdisplayName: 'Date & Time',\n\tname: 'dateTime',\n\ticon: 'fa:clock',\n\tgroup: ['transform'],\n\tversion: 1,\n\tdescription: 'Allows you to manipulate date and time values',\n\tsubtitle: '={{$parameter[\"action\"]}}',\n\tdefaults: {\n\t\tname: 'Date & Time',\n\t\tcolor: '#408000',\n\t},\n\tinputs: [NodeConnectionTypes.Main],\n\toutputs: [NodeConnectionTypes.Main],\n\tproperties: [\n\t\t{\n\t\t\tdisplayName:\n\t\t\t\t\"More powerful date functionality is available in <a href='https://docs.n8n.io/code/cookbook/luxon/' target='_blank'>expressions</a>,</br> e.g. <code>{{ $now.plus(1, 'week') }}</code>\",\n\t\t\tname: 'noticeDateTime',\n\t\t\ttype: 'notice',\n\t\t\tdefault: '',\n\t\t},\n\t\t{\n\t\t\tdisplayName: 'Action',\n\t\t\tname: 'action',\n\t\t\ttype: 'options',\n\t\t\toptions: [\n\t\t\t\t{\n\t\t\t\t\tname: 'Calculate a Date',\n\t\t\t\t\tdescription: 'Add or subtract time from a date',\n\t\t\t\t\tvalue: 'calculate',\n\t\t\t\t\taction: 'Add or subtract time from a date',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'Format a Date',\n\t\t\t\t\tdescription: 'Convert a date to a different format',\n\t\t\t\t\tvalue: 'format',\n\t\t\t\t\taction: 'Convert a date to a different format',\n\t\t\t\t},\n\t\t\t],\n\t\t\tdefault: 'format',\n\t\t},\n\t\t{\n\t\t\tdisplayName: 'Value',\n\t\t\tname: 'value',\n\t\t\tdisplayOptions: {\n\t\t\t\tshow: {\n\t\t\t\t\taction: ['format'],\n\t\t\t\t},\n\t\t\t},\n\t\t\ttype: 'string',\n\t\t\tdefault: '',\n\t\t\tdescription: 'The value that should be converted',\n\t\t\trequired: true,\n\t\t},\n\t\t{\n\t\t\tdisplayName: 'Property Name',\n\t\t\tname: 'dataPropertyName',\n\t\t\ttype: 'string',\n\t\t\tdefault: 'data',\n\t\t\trequired: true,\n\t\t\tdisplayOptions: {\n\t\t\t\tshow: {\n\t\t\t\t\taction: ['format'],\n\t\t\t\t},\n\t\t\t},\n\t\t\tdescription: 'Name of the property to which to write the converted date',\n\t\t},\n\t\t{\n\t\t\tdisplayName: 'Custom Format',\n\t\t\tname: 'custom',\n\t\t\tdisplayOptions: {\n\t\t\t\tshow: {\n\t\t\t\t\taction: ['format'],\n\t\t\t\t},\n\t\t\t},\n\t\t\ttype: 'boolean',\n\t\t\tdefault: false,\n\t\t\tdescription: 'Whether a predefined format should be selected or custom format entered',\n\t\t},\n\t\t{\n\t\t\tdisplayName: 'To Format',\n\t\t\tname: 'toFormat',\n\t\t\tdisplayOptions: {\n\t\t\t\tshow: {\n\t\t\t\t\taction: ['format'],\n\t\t\t\t\tcustom: [true],\n\t\t\t\t},\n\t\t\t},\n\t\t\ttype: 'string',\n\t\t\tdefault: '',\n\t\t\tplaceholder: 'YYYY-MM-DD',\n\t\t\tdescription: 'The format to convert the date to',\n\t\t},\n\t\t{\n\t\t\tdisplayName: 'To Format',\n\t\t\tname: 'toFormat',\n\t\t\ttype: 'options',\n\t\t\tdisplayOptions: {\n\t\t\t\tshow: {\n\t\t\t\t\taction: ['format'],\n\t\t\t\t\tcustom: [false],\n\t\t\t\t},\n\t\t\t},\n\t\t\t// eslint-disable-next-line n8n-nodes-base/node-param-options-type-unsorted-items\n\t\t\toptions: [\n\t\t\t\t{\n\t\t\t\t\tname: 'MM/DD/YYYY',\n\t\t\t\t\tvalue: 'MM/DD/YYYY',\n\t\t\t\t\tdescription: 'Example: 09/04/1986',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'YYYY/MM/DD',\n\t\t\t\t\tvalue: 'YYYY/MM/DD',\n\t\t\t\t\tdescription: 'Example: 1986/04/09',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'MMMM DD YYYY',\n\t\t\t\t\tvalue: 'MMMM DD YYYY',\n\t\t\t\t\tdescription: 'Example: April 09 1986',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'MM-DD-YYYY',\n\t\t\t\t\tvalue: 'MM-DD-YYYY',\n\t\t\t\t\tdescription: 'Example: 09-04-1986',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'YYYY-MM-DD',\n\t\t\t\t\tvalue: 'YYYY-MM-DD',\n\t\t\t\t\tdescription: 'Example: 1986-04-09',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'Unix Timestamp',\n\t\t\t\t\tvalue: 'X',\n\t\t\t\t\tdescription: 'Example: 513388800.879',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'Unix Ms Timestamp',\n\t\t\t\t\tvalue: 'x',\n\t\t\t\t\tdescription: 'Example: 513388800',\n\t\t\t\t},\n\t\t\t],\n\t\t\tdefault: 'MM/DD/YYYY',\n\t\t\tdescription: 'The format to convert the date to',\n\t\t},\n\t\t{\n\t\t\tdisplayName: 'Options',\n\t\t\tname: 'options',\n\t\t\tdisplayOptions: {\n\t\t\t\tshow: {\n\t\t\t\t\taction: ['format'],\n\t\t\t\t},\n\t\t\t},\n\t\t\ttype: 'collection',\n\t\t\tplaceholder: 'Add option',\n\t\t\tdefault: {},\n\t\t\toptions: [\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'From Format',\n\t\t\t\t\tname: 'fromFormat',\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tdefault: '',\n\t\t\t\t\tdescription: 'In case the input format is not recognized you can provide the format',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'From Timezone Name or ID',\n\t\t\t\t\tname: 'fromTimezone',\n\t\t\t\t\ttype: 'options',\n\t\t\t\t\ttypeOptions: {\n\t\t\t\t\t\tloadOptionsMethod: 'getTimezones',\n\t\t\t\t\t},\n\t\t\t\t\tdefault: 'UTC',\n\t\t\t\t\tdescription:\n\t\t\t\t\t\t'The timezone to convert from. Choose from the list, or specify an ID using an <a href=\"https://docs.n8n.io/code/expressions/\">expression</a>.',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'To Timezone Name or ID',\n\t\t\t\t\tname: 'toTimezone',\n\t\t\t\t\ttype: 'options',\n\t\t\t\t\ttypeOptions: {\n\t\t\t\t\t\tloadOptionsMethod: 'getTimezones',\n\t\t\t\t\t},\n\t\t\t\t\tdefault: 'UTC',\n\t\t\t\t\tdescription:\n\t\t\t\t\t\t'The timezone to convert to. Choose from the list, or specify an ID using an <a href=\"https://docs.n8n.io/code/expressions/\">expression</a>.',\n\t\t\t\t},\n\t\t\t],\n\t\t},\n\t\t{\n\t\t\tdisplayName: 'Date Value',\n\t\t\tname: 'value',\n\t\t\tdisplayOptions: {\n\t\t\t\tshow: {\n\t\t\t\t\taction: ['calculate'],\n\t\t\t\t},\n\t\t\t},\n\t\t\ttype: 'string',\n\t\t\tdefault: '',\n\t\t\tdescription: 'The date string or timestamp from which you want to add/subtract time',\n\t\t\trequired: true,\n\t\t},\n\t\t{\n\t\t\tdisplayName: 'Operation',\n\t\t\tname: 'operation',\n\t\t\tdisplayOptions: {\n\t\t\t\tshow: {\n\t\t\t\t\taction: ['calculate'],\n\t\t\t\t},\n\t\t\t},\n\t\t\ttype: 'options',\n\t\t\tnoDataExpression: true,\n\t\t\toptions: [\n\t\t\t\t{\n\t\t\t\t\tname: 'Add',\n\t\t\t\t\tvalue: 'add',\n\t\t\t\t\tdescription: 'Add time to Date Value',\n\t\t\t\t\taction: 'Add time to Date Value',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'Subtract',\n\t\t\t\t\tvalue: 'subtract',\n\t\t\t\t\tdescription: 'Subtract time from Date Value',\n\t\t\t\t\taction: 'Subtract time from Date Value',\n\t\t\t\t},\n\t\t\t],\n\t\t\tdefault: 'add',\n\t\t\trequired: true,\n\t\t},\n\t\t{\n\t\t\tdisplayName: 'Duration',\n\t\t\tname: 'duration',\n\t\t\tdisplayOptions: {\n\t\t\t\tshow: {\n\t\t\t\t\taction: ['calculate'],\n\t\t\t\t},\n\t\t\t},\n\t\t\ttype: 'number',\n\t\t\ttypeOptions: {\n\t\t\t\tminValue: 0,\n\t\t\t},\n\t\t\tdefault: 0,\n\t\t\trequired: true,\n\t\t\tdescription: 'E.g. enter “10” then select “Days” if you want to add 10 days to Date Value.',\n\t\t},\n\t\t{\n\t\t\tdisplayName: 'Time Unit',\n\t\t\tname: 'timeUnit',\n\t\t\tdescription: 'Time unit for Duration parameter above',\n\t\t\tdisplayOptions: {\n\t\t\t\tshow: {\n\t\t\t\t\taction: ['calculate'],\n\t\t\t\t},\n\t\t\t},\n\t\t\ttype: 'options',\n\t\t\t// eslint-disable-next-line n8n-nodes-base/node-param-options-type-unsorted-items\n\t\t\toptions: [\n\t\t\t\t{\n\t\t\t\t\tname: 'Quarters',\n\t\t\t\t\tvalue: 'quarters',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'Years',\n\t\t\t\t\tvalue: 'years',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'Months',\n\t\t\t\t\tvalue: 'months',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'Weeks',\n\t\t\t\t\tvalue: 'weeks',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'Days',\n\t\t\t\t\tvalue: 'days',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'Hours',\n\t\t\t\t\tvalue: 'hours',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'Minutes',\n\t\t\t\t\tvalue: 'minutes',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'Seconds',\n\t\t\t\t\tvalue: 'seconds',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'Milliseconds',\n\t\t\t\t\tvalue: 'milliseconds',\n\t\t\t\t},\n\t\t\t],\n\t\t\tdefault: 'days',\n\t\t\trequired: true,\n\t\t},\n\t\t{\n\t\t\tdisplayName: 'Property Name',\n\t\t\tname: 'dataPropertyName',\n\t\t\ttype: 'string',\n\t\t\tdefault: 'data',\n\t\t\trequired: true,\n\t\t\tdisplayOptions: {\n\t\t\t\tshow: {\n\t\t\t\t\taction: ['calculate'],\n\t\t\t\t},\n\t\t\t},\n\t\t\tdescription: 'Name of the output property to which to write the converted date',\n\t\t},\n\t\t{\n\t\t\tdisplayName: 'Options',\n\t\t\tname: 'options',\n\t\t\ttype: 'collection',\n\t\t\tplaceholder: 'Add option',\n\t\t\tdefault: {},\n\t\t\tdisplayOptions: {\n\t\t\t\tshow: {\n\t\t\t\t\taction: ['calculate'],\n\t\t\t\t},\n\t\t\t},\n\t\t\toptions: [\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'From Format',\n\t\t\t\t\tname: 'fromFormat',\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tdefault: '',\n\t\t\t\t\tdescription:\n\t\t\t\t\t\t'Format for parsing the value as a date. If unrecognized, specify the <a href=\"https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.datetime/#faqs\">format</a> for the value.',\n\t\t\t\t},\n\t\t\t],\n\t\t},\n\t],\n};\n\nexport class DateTimeV1 implements INodeType {\n\tdescription: INodeTypeDescription;\n\n\tconstructor(baseDescription: INodeTypeBaseDescription) {\n\t\tthis.description = {\n\t\t\t...baseDescription,\n\t\t\t...versionDescription,\n\t\t};\n\t}\n\n\tmethods = {\n\t\tloadOptions: {\n\t\t\t// Get all the timezones to display them to user so that they can\n\t\t\t// select them easily\n\t\t\tasync getTimezones(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst returnData: INodePropertyOptions[] = [];\n\t\t\t\tfor (const timezone of moment.tz.names()) {\n\t\t\t\t\tconst timezoneName = timezone;\n\t\t\t\t\tconst timezoneId = timezone;\n\t\t\t\t\treturnData.push({\n\t\t\t\t\t\tname: timezoneName,\n\t\t\t\t\t\tvalue: timezoneId,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn returnData;\n\t\t\t},\n\t\t},\n\t};\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t\tconst items = this.getInputData();\n\t\tconst length = items.length;\n\t\tconst returnData: INodeExecutionData[] = [];\n\n\t\tconst workflowTimezone = this.getTimezone();\n\t\tlet item: INodeExecutionData;\n\n\t\tfor (let i = 0; i < length; i++) {\n\t\t\ttry {\n\t\t\t\tconst action = this.getNodeParameter('action', 0) as string;\n\t\t\t\titem = items[i];\n\n\t\t\t\tif (action === 'format') {\n\t\t\t\t\tlet currentDate: string | number | LuxonDateTime = this.getNodeParameter(\n\t\t\t\t\t\t'value',\n\t\t\t\t\t\ti,\n\t\t\t\t\t) as string;\n\t\t\t\t\tconst dataPropertyName = this.getNodeParameter('dataPropertyName', i);\n\t\t\t\t\tconst toFormat = this.getNodeParameter('toFormat', i) as string;\n\t\t\t\t\tconst options = this.getNodeParameter('options', i);\n\t\t\t\t\tlet newDate;\n\n\t\t\t\t\tif ((currentDate as unknown as IDataObject) instanceof LuxonDateTime) {\n\t\t\t\t\t\tcurrentDate = (currentDate as unknown as LuxonDateTime).toISO();\n\t\t\t\t\t}\n\n\t\t\t\t\t// Check if the input is a number\n\t\t\t\t\tif (!Number.isNaN(Number(currentDate))) {\n\t\t\t\t\t\t//input is a number, convert to number in case it is a string\n\t\t\t\t\t\tcurrentDate = Number(currentDate);\n\t\t\t\t\t\t// check if the number is a timestamp in float format and convert to integer\n\t\t\t\t\t\tif (!Number.isInteger(currentDate)) {\n\t\t\t\t\t\t\tcurrentDate = currentDate * 1000;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (currentDate === undefined) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tif (options.fromFormat === undefined && !moment(currentDate).isValid()) {\n\t\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t\t'The date input format could not be recognized. Please set the \"From Format\" field',\n\t\t\t\t\t\t\t{ itemIndex: i },\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (Number.isInteger(currentDate)) {\n\t\t\t\t\t\tconst timestampLengthInMilliseconds1990 = 12;\n\t\t\t\t\t\t// check if the number is a timestamp in seconds or milliseconds and create a moment object accordingly\n\t\t\t\t\t\tif (currentDate.toString().length < timestampLengthInMilliseconds1990) {\n\t\t\t\t\t\t\tnewDate = moment.unix(currentDate as number);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tnewDate = moment(currentDate);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (options.fromTimezone || options.toTimezone) {\n\t\t\t\t\t\t\tconst fromTimezone = options.fromTimezone || workflowTimezone;\n\t\t\t\t\t\t\tif (options.fromFormat) {\n\t\t\t\t\t\t\t\tnewDate = moment.tz(\n\t\t\t\t\t\t\t\t\tcurrentDate as string,\n\t\t\t\t\t\t\t\t\toptions.fromFormat as string,\n\t\t\t\t\t\t\t\t\tfromTimezone as string,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tnewDate = moment.tz(currentDate, fromTimezone as string);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (options.fromFormat) {\n\t\t\t\t\t\t\t\tnewDate = moment(currentDate, options.fromFormat as string);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tnewDate = moment(currentDate);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (options.toTimezone || options.fromTimezone) {\n\t\t\t\t\t\t// If either a source or a target timezone got defined the\n\t\t\t\t\t\t// timezone of the date has to be changed. If a target-timezone\n\t\t\t\t\t\t// is set use it else fall back to workflow timezone.\n\t\t\t\t\t\tnewDate = newDate.tz((options.toTimezone as string) || workflowTimezone);\n\t\t\t\t\t}\n\n\t\t\t\t\tnewDate = newDate.format(toFormat);\n\n\t\t\t\t\tlet newItem: INodeExecutionData;\n\t\t\t\t\tif (dataPropertyName.includes('.')) {\n\t\t\t\t\t\t// Uses dot notation so copy all data\n\t\t\t\t\t\tnewItem = {\n\t\t\t\t\t\t\tjson: deepCopy(item.json),\n\t\t\t\t\t\t\tpairedItem: {\n\t\t\t\t\t\t\t\titem: i,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t};\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Does not use dot notation so shallow copy is enough\n\t\t\t\t\t\tnewItem = {\n\t\t\t\t\t\t\tjson: { ...item.json },\n\t\t\t\t\t\t\tpairedItem: {\n\t\t\t\t\t\t\t\titem: i,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\n\t\t\t\t\tif (item.binary !== undefined) {\n\t\t\t\t\t\tnewItem.binary = item.binary;\n\t\t\t\t\t}\n\n\t\t\t\t\tset(newItem, ['json', dataPropertyName], newDate);\n\n\t\t\t\t\treturnData.push(newItem);\n\t\t\t\t}\n\n\t\t\t\tif (action === 'calculate') {\n\t\t\t\t\tconst dateValue = this.getNodeParameter('value', i) as string;\n\t\t\t\t\tconst operation = this.getNodeParameter('operation', i) as 'add' | 'subtract';\n\t\t\t\t\tconst duration = this.getNodeParameter('duration', i) as number;\n\t\t\t\t\tconst timeUnit = this.getNodeParameter('timeUnit', i) as moment.DurationInputArg2;\n\t\t\t\t\tconst { fromFormat } = this.getNodeParameter('options', i) as { fromFormat?: string };\n\t\t\t\t\tconst dataPropertyName = this.getNodeParameter('dataPropertyName', i);\n\n\t\t\t\t\tconst newDate = fromFormat\n\t\t\t\t\t\t? parseDateByFormat.call(this, dateValue, fromFormat)\n\t\t\t\t\t\t: parseDateByDefault.call(this, dateValue);\n\n\t\t\t\t\toperation === 'add'\n\t\t\t\t\t\t? newDate.add(duration, timeUnit).utc().format()\n\t\t\t\t\t\t: newDate.subtract(duration, timeUnit).utc().format();\n\n\t\t\t\t\tlet newItem: INodeExecutionData;\n\t\t\t\t\tif (dataPropertyName.includes('.')) {\n\t\t\t\t\t\t// Uses dot notation so copy all data\n\t\t\t\t\t\tnewItem = {\n\t\t\t\t\t\t\tjson: deepCopy(item.json),\n\t\t\t\t\t\t\tpairedItem: {\n\t\t\t\t\t\t\t\titem: i,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t};\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Does not use dot notation so shallow copy is enough\n\t\t\t\t\t\tnewItem = {\n\t\t\t\t\t\t\tjson: { ...item.json },\n\t\t\t\t\t\t\tpairedItem: {\n\t\t\t\t\t\t\t\titem: i,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\n\t\t\t\t\tif (item.binary !== undefined) {\n\t\t\t\t\t\tnewItem.binary = item.binary;\n\t\t\t\t\t}\n\n\t\t\t\t\tset(newItem, ['json', dataPropertyName], newDate.toISOString());\n\n\t\t\t\t\treturnData.push(newItem);\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\treturnData.push({\n\t\t\t\t\t\tjson: {\n\t\t\t\t\t\t\terror: error.message,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tpairedItem: {\n\t\t\t\t\t\t\titem: i,\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\n\t\treturn [returnData];\n\t}\n}\n"],"mappings":"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","names":["moment","LuxonDateTime","set"]}