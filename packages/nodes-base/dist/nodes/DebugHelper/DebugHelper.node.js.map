{"version":3,"sources":["../../../nodes/DebugHelper/DebugHelper.node.ts"],"sourcesContent":["import { setSeed, array as mfArray } from 'minifaker';\nimport type {\n\tIExecuteFunctions,\n\tINodeExecutionData,\n\tINodeType,\n\tINodeTypeDescription,\n} from 'n8n-workflow';\nimport {\n\tApplicationError,\n\tNodeApiError,\n\tNodeConnectionTypes,\n\tNodeOperationError,\n} from 'n8n-workflow';\n\nimport { generateGarbageMemory, runGarbageCollector } from './functions';\nimport {\n\tgenerateCreditCard,\n\tgenerateIPv4,\n\tgenerateIPv6,\n\tgenerateLocation,\n\tgenerateMAC,\n\tgenerateNanoid,\n\tgenerateRandomAddress,\n\tgenerateRandomEmail,\n\tgenerateRandomUser,\n\tgenerateURL,\n\tgenerateUUID,\n\tgenerateVersion,\n} from './randomData';\n\nexport class DebugHelper implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'DebugHelper',\n\t\tname: 'debugHelper',\n\t\ticon: { light: 'file:DebugHelper.svg', dark: 'file:DebugHelper.dark.svg' },\n\t\tgroup: ['output'],\n\t\tsubtitle: '={{$parameter[\"category\"]}}',\n\t\tdescription: 'Causes problems intentionally and generates useful data for debugging',\n\t\tversion: 1,\n\t\tdefaults: {\n\t\t\tname: 'DebugHelper',\n\t\t},\n\t\tinputs: [NodeConnectionTypes.Main],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tcredentials: [],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Category',\n\t\t\t\tname: 'category',\n\t\t\t\ttype: 'options',\n\t\t\t\tnoDataExpression: true,\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Do Nothing',\n\t\t\t\t\t\tvalue: 'doNothing',\n\t\t\t\t\t\tdescription: 'Does nothing',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Throw Error',\n\t\t\t\t\t\tvalue: 'throwError',\n\t\t\t\t\t\tdescription: 'Throws an error with the specified type and message',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Out Of Memory',\n\t\t\t\t\t\tvalue: 'oom',\n\t\t\t\t\t\tdescription: 'Generates a large amount of memory to cause an out of memory error',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Generate Random Data',\n\t\t\t\t\t\tvalue: 'randomData',\n\t\t\t\t\t\tdescription: 'Generates random data sets',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'throwError',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Error Type',\n\t\t\t\tname: 'throwErrorType',\n\t\t\t\ttype: 'options',\n\t\t\t\tnoDataExpression: true,\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'NodeApiError',\n\t\t\t\t\t\tvalue: 'NodeApiError',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'NodeOperationError',\n\t\t\t\t\t\tvalue: 'NodeOperationError',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Error',\n\t\t\t\t\t\tvalue: 'Error',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'NodeApiError',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tcategory: ['throwError'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Error Message',\n\t\t\t\tname: 'throwErrorMessage',\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: 'Node has thrown an error',\n\t\t\t\tdescription: 'The message to send as part of the error',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tcategory: ['throwError'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Memory Size to Generate',\n\t\t\t\tname: 'memorySizeValue',\n\t\t\t\ttype: 'number',\n\t\t\t\tdefault: 10,\n\t\t\t\tdescription: 'The approximate amount of memory to generate. Be generous...',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tcategory: ['oom'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Data Type',\n\t\t\t\tname: 'randomDataType',\n\t\t\t\ttype: 'options',\n\t\t\t\tnoDataExpression: true,\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Address',\n\t\t\t\t\t\tvalue: 'address',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Coordinates',\n\t\t\t\t\t\tvalue: 'latLong',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Credit Card',\n\t\t\t\t\t\tvalue: 'creditCard',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Email',\n\t\t\t\t\t\tvalue: 'email',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'IPv4',\n\t\t\t\t\t\tvalue: 'ipv4',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'IPv6',\n\t\t\t\t\t\tvalue: 'ipv6',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'MAC',\n\t\t\t\t\t\tvalue: 'macAddress',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'NanoIds',\n\t\t\t\t\t\tvalue: 'nanoid',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'URL',\n\t\t\t\t\t\tvalue: 'url',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'User Data',\n\t\t\t\t\t\tvalue: 'user',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'UUID',\n\t\t\t\t\t\tvalue: 'uuid',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Version',\n\t\t\t\t\t\tvalue: 'semver',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'user',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tcategory: ['randomData'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'NanoId Alphabet',\n\t\t\t\tname: 'nanoidAlphabet',\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ',\n\t\t\t\tdescription: 'The alphabet to use for generating the nanoIds',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tcategory: ['randomData'],\n\t\t\t\t\t\trandomDataType: ['nanoid'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'NanoId Length',\n\t\t\t\tname: 'nanoidLength',\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: '16',\n\t\t\t\tdescription: 'The length of each nanoIds',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tcategory: ['randomData'],\n\t\t\t\t\t\trandomDataType: ['nanoid'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Seed',\n\t\t\t\tname: 'randomDataSeed',\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: '',\n\t\t\t\tplaceholder: 'Leave empty for random seed',\n\t\t\t\tdescription:\n\t\t\t\t\t'If set, seed to use for generating the data (same seed will generate the same data)',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tcategory: ['randomData'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Number of Items to Generate',\n\t\t\t\tname: 'randomDataCount',\n\t\t\t\ttype: 'number',\n\t\t\t\tdefault: 10,\n\t\t\t\tdescription: 'The number of random data items to generate into an array',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tcategory: ['randomData'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Output as Single Array',\n\t\t\t\tname: 'randomDataSingleArray',\n\t\t\t\ttype: 'boolean',\n\t\t\t\tdefault: false,\n\t\t\t\tdescription: 'Whether to output a single array instead of multiple items',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tcategory: ['randomData'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t};\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t\tconst items = this.getInputData();\n\t\tconst returnData: INodeExecutionData[] = [];\n\t\tconst category = this.getNodeParameter('category', 0) as string;\n\n\t\tfor (let i = 0; i < items.length; i++) {\n\t\t\ttry {\n\t\t\t\tswitch (category) {\n\t\t\t\t\tcase 'doNothing':\n\t\t\t\t\t\t// as it says on the tin...\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'throwError':\n\t\t\t\t\t\tconst throwErrorType = this.getNodeParameter('throwErrorType', 0) as string;\n\t\t\t\t\t\tconst throwErrorMessage = this.getNodeParameter('throwErrorMessage', 0) as string;\n\t\t\t\t\t\tswitch (throwErrorType) {\n\t\t\t\t\t\t\tcase 'NodeApiError':\n\t\t\t\t\t\t\t\tthrow new NodeApiError(\n\t\t\t\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t\t\t\t{ message: throwErrorMessage },\n\t\t\t\t\t\t\t\t\t{ message: throwErrorMessage },\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tcase 'NodeOperationError':\n\t\t\t\t\t\t\t\tthrow new NodeOperationError(this.getNode(), throwErrorMessage, {\n\t\t\t\t\t\t\t\t\tmessage: throwErrorMessage,\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tcase 'Error':\n\t\t\t\t\t\t\t\tthrow new ApplicationError(throwErrorMessage);\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\tcase 'oom':\n\t\t\t\t\t\tconst memorySizeValue = this.getNodeParameter('memorySizeValue', 0) as number;\n\t\t\t\t\t\trunGarbageCollector();\n\t\t\t\t\t\tconst memUsed = generateGarbageMemory(memorySizeValue);\n\t\t\t\t\t\titems[i].json = memUsed;\n\t\t\t\t\t\treturnData.push(items[i]);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'randomData':\n\t\t\t\t\t\tconst randomDataType = this.getNodeParameter('randomDataType', 0) as string;\n\t\t\t\t\t\tconst randomDataCount = this.getNodeParameter('randomDataCount', 0) as number;\n\t\t\t\t\t\tconst randomDataSeed = this.getNodeParameter('randomDataSeed', 0) as string;\n\t\t\t\t\t\tconst randomDataSingleArray = this.getNodeParameter(\n\t\t\t\t\t\t\t'randomDataSingleArray',\n\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t) as boolean;\n\t\t\t\t\t\tconst newItem: INodeExecutionData = {\n\t\t\t\t\t\t\tjson: {},\n\t\t\t\t\t\t\tpairedItem: { item: i },\n\t\t\t\t\t\t};\n\t\t\t\t\t\tif (randomDataSeed !== '') {\n\t\t\t\t\t\t\tsetSeed(randomDataSeed);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tlet randomFn: () => any = generateRandomUser;\n\t\t\t\t\t\tswitch (randomDataType) {\n\t\t\t\t\t\t\tcase 'user':\n\t\t\t\t\t\t\t\trandomFn = generateRandomUser;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'email':\n\t\t\t\t\t\t\t\trandomFn = generateRandomEmail;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'address':\n\t\t\t\t\t\t\t\trandomFn = generateRandomAddress;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'creditCard':\n\t\t\t\t\t\t\t\trandomFn = generateCreditCard;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'uuid':\n\t\t\t\t\t\t\t\trandomFn = generateUUID;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'macAddress':\n\t\t\t\t\t\t\t\trandomFn = generateMAC;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'ipv4':\n\t\t\t\t\t\t\t\trandomFn = generateIPv4;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'ipv6':\n\t\t\t\t\t\t\t\trandomFn = generateIPv6;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'latLong':\n\t\t\t\t\t\t\t\trandomFn = generateLocation;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'semver':\n\t\t\t\t\t\t\t\trandomFn = generateVersion;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'url':\n\t\t\t\t\t\t\t\trandomFn = generateURL;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'nanoid':\n\t\t\t\t\t\t\t\tconst nanoidAlphabet = this.getNodeParameter('nanoidAlphabet', 0) as string;\n\t\t\t\t\t\t\t\tconst nanoidLength = this.getNodeParameter('nanoidLength', 0) as string;\n\t\t\t\t\t\t\t\trandomFn = () => generateNanoid(nanoidAlphabet, nanoidLength);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst generatedItems = mfArray(randomDataCount, randomFn);\n\t\t\t\t\t\tif (randomDataSingleArray) {\n\t\t\t\t\t\t\tnewItem.json = { generatedItems };\n\t\t\t\t\t\t\treturnData.push(newItem);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tfor (const generatedItem of generatedItems) {\n\t\t\t\t\t\t\t\treturnData.push({\n\t\t\t\t\t\t\t\t\tjson: generatedItem,\n\t\t\t\t\t\t\t\t\tpairedItem: { item: i },\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\tconst executionErrorData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\tthis.helpers.returnJsonArray({ error: error.message }),\n\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t);\n\t\t\t\t\treturnData.push(...executionErrorData);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\t\treturn [returnData];\n\t}\n}\n"],"mappings":"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","names":["mfArray"]}