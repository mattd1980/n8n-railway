{"version":3,"sources":["../../../../../nodes/Airtop/actions/window/takeScreenshot.operation.ts"],"sourcesContent":["import type { IExecuteFunctions, INodeExecutionData, IBinaryData } from 'n8n-workflow';\n\nimport {\n\tvalidateSessionAndWindowId,\n\tvalidateAirtopApiResponse,\n\tconvertScreenshotToBinary,\n} from '../../GenericFunctions';\nimport { apiRequest } from '../../transport';\n\nexport async function execute(\n\tthis: IExecuteFunctions,\n\tindex: number,\n): Promise<INodeExecutionData[]> {\n\tconst { sessionId, windowId } = validateSessionAndWindowId.call(this, index);\n\tlet data: IBinaryData | undefined; // for storing the binary data\n\tconst response = await apiRequest.call(\n\t\tthis,\n\t\t'POST',\n\t\t`/sessions/${sessionId}/windows/${windowId}/screenshot`,\n\t);\n\n\t// validate response\n\tvalidateAirtopApiResponse(this.getNode(), response);\n\n\t// process screenshot on success\n\tif (response.meta?.screenshots?.length) {\n\t\tconst buffer = convertScreenshotToBinary(response.meta.screenshots[0]);\n\t\tdata = await this.helpers.prepareBinaryData(buffer, 'screenshot.jpg', 'image/jpeg');\n\t}\n\n\treturn [\n\t\t{\n\t\t\tjson: {\n\t\t\t\tsessionId,\n\t\t\t\twindowId,\n\t\t\t\t...response,\n\t\t\t},\n\t\t\t...(data ? { binary: { data } } : {}),\n\t\t},\n\t];\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,8BAIO;AACP,uBAA2B;AAE3B,eAAsB,QAErB,OACgC;AAChC,QAAM,EAAE,WAAW,SAAS,IAAI,mDAA2B,KAAK,MAAM,KAAK;AAC3E,MAAI;AACJ,QAAM,WAAW,MAAM,4BAAW;AAAA,IACjC;AAAA,IACA;AAAA,IACA,aAAa,SAAS,YAAY,QAAQ;AAAA,EAC3C;AAGA,yDAA0B,KAAK,QAAQ,GAAG,QAAQ;AAGlD,MAAI,SAAS,MAAM,aAAa,QAAQ;AACvC,UAAM,aAAS,mDAA0B,SAAS,KAAK,YAAY,CAAC,CAAC;AACrE,WAAO,MAAM,KAAK,QAAQ,kBAAkB,QAAQ,kBAAkB,YAAY;AAAA,EACnF;AAEA,SAAO;AAAA,IACN;AAAA,MACC,MAAM;AAAA,QACL;AAAA,QACA;AAAA,QACA,GAAG;AAAA,MACJ;AAAA,MACA,GAAI,OAAO,EAAE,QAAQ,EAAE,KAAK,EAAE,IAAI,CAAC;AAAA,IACpC;AAAA,EACD;AACD;","names":[]}