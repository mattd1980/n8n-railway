{"version":3,"sources":["../../../nodes/Function/Function.node.ts"],"sourcesContent":["import type { NodeVMOptions } from '@n8n/vm2';\nimport { NodeVM } from '@n8n/vm2';\nimport type {\n\tIExecuteFunctions,\n\tIBinaryKeyData,\n\tIDataObject,\n\tINodeExecutionData,\n\tINodeType,\n\tINodeTypeDescription,\n} from 'n8n-workflow';\nimport { NodeConnectionTypes, deepCopy, NodeOperationError } from 'n8n-workflow';\n\nimport { vmResolver } from '../Code/JavaScriptSandbox';\n\nexport class Function implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'Function',\n\t\tname: 'function',\n\t\thidden: true,\n\t\ticon: 'fa:code',\n\t\tgroup: ['transform'],\n\t\tversion: 1,\n\t\tdescription:\n\t\t\t'Run custom function code which gets executed once and allows you to add, remove, change and replace items',\n\t\tdefaults: {\n\t\t\tname: 'Function',\n\t\t\tcolor: '#FF9922',\n\t\t},\n\t\tinputs: [NodeConnectionTypes.Main],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'A newer version of this node type is available, called the ‘Code’ node',\n\t\t\t\tname: 'notice',\n\t\t\t\ttype: 'notice',\n\t\t\t\tdefault: '',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'JavaScript Code',\n\t\t\t\tname: 'functionCode',\n\t\t\t\ttypeOptions: {\n\t\t\t\t\talwaysOpenEditWindow: true,\n\t\t\t\t\tcodeAutocomplete: 'function',\n\t\t\t\t\teditor: 'jsEditor',\n\t\t\t\t\trows: 10,\n\t\t\t\t},\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: `// Code here will run only once, no matter how many input items there are.\n// More info and help:https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.function/\n// Tip: You can use luxon for dates and $jmespath for querying JSON structures\n\n// Loop over inputs and add a new field called 'myNewField' to the JSON of each one\nfor (item of items) {\n  item.json.myNewField = 1;\n}\n\n// You can write logs to the browser console\nconsole.log('Done!');\n\nreturn items;`,\n\t\t\t\tdescription: 'The JavaScript code to execute',\n\t\t\t\tnoDataExpression: true,\n\t\t\t},\n\t\t],\n\t};\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t\t// const item = this.getInputData();\n\t\tlet items = this.getInputData();\n\n\t\t// Copy the items as they may get changed in the functions\n\t\titems = deepCopy(items);\n\n\t\t// Assign item indexes\n\t\tfor (let itemIndex = 0; itemIndex < items.length; itemIndex++) {\n\t\t\titems[itemIndex].index = itemIndex;\n\t\t}\n\n\t\tconst cleanupData = (inputData: IDataObject): IDataObject => {\n\t\t\tObject.keys(inputData).map((key) => {\n\t\t\t\tif (inputData[key] !== null && typeof inputData[key] === 'object') {\n\t\t\t\t\tif (inputData[key].constructor.name === 'Object') {\n\t\t\t\t\t\t// Is regular node.js object so check its data\n\t\t\t\t\t\tinputData[key] = cleanupData(inputData[key] as IDataObject);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Is some special object like a Date so stringify\n\t\t\t\t\t\tinputData[key] = deepCopy(inputData[key]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn inputData;\n\t\t};\n\n\t\t// Define the global objects for the custom function\n\t\tconst sandbox = {\n\t\t\tgetNodeParameter: this.getNodeParameter.bind(this),\n\t\t\tgetWorkflowStaticData: this.getWorkflowStaticData.bind(this),\n\t\t\thelpers: this.helpers,\n\t\t\titems,\n\t\t\t// To be able to access data of other items\n\t\t\t$item: (index: number) => this.getWorkflowDataProxy(index),\n\t\t\tgetBinaryDataAsync: async (item: INodeExecutionData): Promise<IBinaryKeyData | undefined> => {\n\t\t\t\t// Fetch Binary Data, if available. Cannot check item with `if (item?.index)`, as index may be 0.\n\t\t\t\tif (item?.binary && item?.index !== undefined && item?.index !== null) {\n\t\t\t\t\tfor (const binaryPropertyName of Object.keys(item.binary)) {\n\t\t\t\t\t\titem.binary[binaryPropertyName].data = (\n\t\t\t\t\t\t\tawait this.helpers.getBinaryDataBuffer(item.index, binaryPropertyName)\n\t\t\t\t\t\t)?.toString('base64');\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Return Data\n\t\t\t\treturn item.binary;\n\t\t\t},\n\t\t\tsetBinaryDataAsync: async (item: INodeExecutionData, data: IBinaryKeyData) => {\n\t\t\t\t// Ensure item is provided, else return a friendly error.\n\t\t\t\tif (!item) {\n\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t'No item was provided to setBinaryDataAsync (item: INodeExecutionData, data: IBinaryKeyData).',\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\t// Ensure data is provided, else return a friendly error.\n\t\t\t\tif (!data) {\n\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t'No data was provided to setBinaryDataAsync (item: INodeExecutionData, data: IBinaryKeyData).',\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\t// Set Binary Data\n\t\t\t\tfor (const binaryPropertyName of Object.keys(data)) {\n\t\t\t\t\tconst binaryItem = data[binaryPropertyName];\n\t\t\t\t\tdata[binaryPropertyName] = await this.helpers.setBinaryDataBuffer(\n\t\t\t\t\t\tbinaryItem,\n\t\t\t\t\t\tBuffer.from(binaryItem.data, 'base64'),\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\t// Set Item Reference\n\t\t\t\titem.binary = data;\n\t\t\t},\n\t\t};\n\n\t\t// Make it possible to access data via $node, $parameter, ...\n\t\t// By default use data from first item\n\t\tObject.assign(sandbox, sandbox.$item(0));\n\n\t\tconst mode = this.getMode();\n\n\t\tconst options: NodeVMOptions = {\n\t\t\tconsole: mode === 'manual' ? 'redirect' : 'inherit',\n\t\t\tsandbox,\n\t\t\trequire: vmResolver,\n\t\t};\n\n\t\tconst vm = new NodeVM(options);\n\n\t\tif (mode === 'manual') {\n\t\t\tvm.on('console.log', this.sendMessageToUI.bind(this));\n\t\t}\n\n\t\t// Get the code to execute\n\t\tconst functionCode = this.getNodeParameter('functionCode', 0) as string;\n\n\t\ttry {\n\t\t\t// Execute the function code\n\t\t\titems = await vm.run(`module.exports = async function() {${functionCode}\\n}()`, __dirname);\n\t\t\titems = this.helpers.normalizeItems(items);\n\n\t\t\t// Do very basic validation of the data\n\t\t\tif (items === undefined) {\n\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t'No data got returned. Always return an Array of items!',\n\t\t\t\t);\n\t\t\t}\n\t\t\tif (!Array.isArray(items)) {\n\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t'Always an Array of items has to be returned!',\n\t\t\t\t);\n\t\t\t}\n\t\t\tfor (const item of items) {\n\t\t\t\tif (item.json === undefined) {\n\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t'All returned items have to contain a property named \"json\"!',\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tif (typeof item.json !== 'object') {\n\t\t\t\t\tthrow new NodeOperationError(this.getNode(), 'The json-property has to be an object!');\n\t\t\t\t}\n\n\t\t\t\titem.json = cleanupData(item.json);\n\n\t\t\t\tif (item.binary !== undefined) {\n\t\t\t\t\tif (Array.isArray(item.binary) || typeof item.binary !== 'object') {\n\t\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t\t'The binary-property has to be an object!',\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tif (this.continueOnFail()) {\n\t\t\t\titems = [{ json: { error: error.message } }];\n\t\t\t} else {\n\t\t\t\t// Try to find the line number which contains the error and attach to error message\n\t\t\t\tconst stackLines = error.stack.split('\\n');\n\t\t\t\tif (stackLines.length > 0) {\n\t\t\t\t\tstackLines.shift();\n\t\t\t\t\tconst lineParts = stackLines.find((line: string) => line.includes('Function')).split(':');\n\t\t\t\t\tif (lineParts.length > 2) {\n\t\t\t\t\t\tconst lineNumber = lineParts.splice(-2, 1);\n\t\t\t\t\t\tif (!isNaN(lineNumber as number)) {\n\t\t\t\t\t\t\terror.message = `${error.message} [Line ${lineNumber}]`;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\n\t\treturn [items];\n\t}\n}\n"],"mappings":"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","names":[]}