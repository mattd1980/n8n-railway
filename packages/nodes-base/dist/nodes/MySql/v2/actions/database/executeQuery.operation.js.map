{"version":3,"sources":["../../../../../../nodes/MySql/v2/actions/database/executeQuery.operation.ts"],"sourcesContent":["import type {\n\tIDataObject,\n\tIExecuteFunctions,\n\tINodeExecutionData,\n\tINodeProperties,\n} from 'n8n-workflow';\nimport { NodeOperationError } from 'n8n-workflow';\n\nimport { getResolvables, updateDisplayOptions } from '@utils/utilities';\n\nimport type { QueryRunner, QueryWithValues } from '../../helpers/interfaces';\nimport { prepareQueryAndReplacements, replaceEmptyStringsByNulls } from '../../helpers/utils';\nimport { optionsCollection } from '../common.descriptions';\n\nconst properties: INodeProperties[] = [\n\t{\n\t\tdisplayName: 'Query',\n\t\tname: 'query',\n\t\ttype: 'string',\n\t\tdefault: '',\n\t\tplaceholder: 'e.g. SELECT id, name FROM product WHERE id < 40',\n\t\trequired: true,\n\t\tdescription:\n\t\t\t\"The SQL query to execute. You can use n8n expressions and $1, $2, $3, etc to refer to the 'Query Parameters' set in options below.\",\n\t\tnoDataExpression: true,\n\t\ttypeOptions: {\n\t\t\teditor: 'sqlEditor',\n\t\t\tsqlDialect: 'MySQL',\n\t\t},\n\t\thint: 'Consider using query parameters to prevent SQL injection attacks. Add them in the options below',\n\t},\n\toptionsCollection,\n];\n\nconst displayOptions = {\n\tshow: {\n\t\tresource: ['database'],\n\t\toperation: ['executeQuery'],\n\t},\n};\n\nexport const description = updateDisplayOptions(displayOptions, properties);\n\nexport async function execute(\n\tthis: IExecuteFunctions,\n\tinputItems: INodeExecutionData[],\n\trunQueries: QueryRunner,\n\tnodeOptions: IDataObject,\n): Promise<INodeExecutionData[]> {\n\tlet returnData: INodeExecutionData[] = [];\n\tconst items = replaceEmptyStringsByNulls(inputItems, nodeOptions.replaceEmptyStrings as boolean);\n\n\tconst queries: QueryWithValues[] = [];\n\n\tfor (let i = 0; i < items.length; i++) {\n\t\tlet rawQuery = this.getNodeParameter('query', i) as string;\n\n\t\tfor (const resolvable of getResolvables(rawQuery)) {\n\t\t\trawQuery = rawQuery.replace(resolvable, this.evaluateExpression(resolvable, i) as string);\n\t\t}\n\n\t\tconst options = this.getNodeParameter('options', i, {});\n\n\t\tlet values;\n\t\tlet queryReplacement = options.queryReplacement || [];\n\n\t\tif (typeof queryReplacement === 'string') {\n\t\t\tqueryReplacement = queryReplacement.split(',').map((entry) => entry.trim());\n\t\t}\n\n\t\tif (Array.isArray(queryReplacement)) {\n\t\t\tvalues = queryReplacement as IDataObject[];\n\t\t} else {\n\t\t\tthrow new NodeOperationError(\n\t\t\t\tthis.getNode(),\n\t\t\t\t'Query Replacement must be a string of comma-separated values, or an array of values',\n\t\t\t\t{ itemIndex: i },\n\t\t\t);\n\t\t}\n\n\t\tconst preparedQuery = prepareQueryAndReplacements(rawQuery, values);\n\n\t\tif ((nodeOptions.nodeVersion as number) >= 2.3) {\n\t\t\tconst parsedNumbers = preparedQuery.values.map((value) => {\n\t\t\t\treturn Number(value) ? Number(value) : value;\n\t\t\t});\n\t\t\tpreparedQuery.values = parsedNumbers;\n\t\t}\n\n\t\tqueries.push(preparedQuery);\n\t}\n\n\treturnData = await runQueries(queries);\n\n\treturn returnData;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA,0BAAmC;AAEnC,uBAAqD;AAGrD,mBAAwE;AACxE,oBAAkC;AAElC,MAAM,aAAgC;AAAA,EACrC;AAAA,IACC,aAAa;AAAA,IACb,MAAM;AAAA,IACN,MAAM;AAAA,IACN,SAAS;AAAA,IACT,aAAa;AAAA,IACb,UAAU;AAAA,IACV,aACC;AAAA,IACD,kBAAkB;AAAA,IAClB,aAAa;AAAA,MACZ,QAAQ;AAAA,MACR,YAAY;AAAA,IACb;AAAA,IACA,MAAM;AAAA,EACP;AAAA,EACA;AACD;AAEA,MAAM,iBAAiB;AAAA,EACtB,MAAM;AAAA,IACL,UAAU,CAAC,UAAU;AAAA,IACrB,WAAW,CAAC,cAAc;AAAA,EAC3B;AACD;AAEO,MAAM,kBAAc,uCAAqB,gBAAgB,UAAU;AAE1E,eAAsB,QAErB,YACA,YACA,aACgC;AAChC,MAAI,aAAmC,CAAC;AACxC,QAAM,YAAQ,yCAA2B,YAAY,YAAY,mBAA8B;AAE/F,QAAM,UAA6B,CAAC;AAEpC,WAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACtC,QAAI,WAAW,KAAK,iBAAiB,SAAS,CAAC;AAE/C,eAAW,kBAAc,iCAAe,QAAQ,GAAG;AAClD,iBAAW,SAAS,QAAQ,YAAY,KAAK,mBAAmB,YAAY,CAAC,CAAW;AAAA,IACzF;AAEA,UAAM,UAAU,KAAK,iBAAiB,WAAW,GAAG,CAAC,CAAC;AAEtD,QAAI;AACJ,QAAI,mBAAmB,QAAQ,oBAAoB,CAAC;AAEpD,QAAI,OAAO,qBAAqB,UAAU;AACzC,yBAAmB,iBAAiB,MAAM,GAAG,EAAE,IAAI,CAAC,UAAU,MAAM,KAAK,CAAC;AAAA,IAC3E;AAEA,QAAI,MAAM,QAAQ,gBAAgB,GAAG;AACpC,eAAS;AAAA,IACV,OAAO;AACN,YAAM,IAAI;AAAA,QACT,KAAK,QAAQ;AAAA,QACb;AAAA,QACA,EAAE,WAAW,EAAE;AAAA,MAChB;AAAA,IACD;AAEA,UAAM,oBAAgB,0CAA4B,UAAU,MAAM;AAElE,QAAK,YAAY,eAA0B,KAAK;AAC/C,YAAM,gBAAgB,cAAc,OAAO,IAAI,CAAC,UAAU;AACzD,eAAO,OAAO,KAAK,IAAI,OAAO,KAAK,IAAI;AAAA,MACxC,CAAC;AACD,oBAAc,SAAS;AAAA,IACxB;AAEA,YAAQ,KAAK,aAAa;AAAA,EAC3B;AAEA,eAAa,MAAM,WAAW,OAAO;AAErC,SAAO;AACR;","names":[]}