{"version":3,"sources":["../../../../../../nodes/MySql/v2/actions/database/insert.operation.ts"],"sourcesContent":["import type {\n\tIDataObject,\n\tIExecuteFunctions,\n\tINodeExecutionData,\n\tINodeProperties,\n} from 'n8n-workflow';\n\nimport { updateDisplayOptions } from '@utils/utilities';\n\nimport type {\n\tQueryMode,\n\tQueryRunner,\n\tQueryValues,\n\tQueryWithValues,\n} from '../../helpers/interfaces';\nimport { AUTO_MAP, BATCH_MODE, DATA_MODE } from '../../helpers/interfaces';\nimport { escapeSqlIdentifier, replaceEmptyStringsByNulls } from '../../helpers/utils';\nimport { optionsCollection } from '../common.descriptions';\n\nconst properties: INodeProperties[] = [\n\t{\n\t\tdisplayName: 'Data Mode',\n\t\tname: 'dataMode',\n\t\ttype: 'options',\n\t\toptions: [\n\t\t\t{\n\t\t\t\tname: 'Auto-Map Input Data to Columns',\n\t\t\t\tvalue: DATA_MODE.AUTO_MAP,\n\t\t\t\tdescription: 'Use when node input properties names exactly match the table column names',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Map Each Column Manually',\n\t\t\t\tvalue: DATA_MODE.MANUAL,\n\t\t\t\tdescription: 'Set the value for each destination column manually',\n\t\t\t},\n\t\t],\n\t\tdefault: AUTO_MAP,\n\t\tdescription:\n\t\t\t'Whether to map node input properties and the table data automatically or manually',\n\t},\n\t{\n\t\tdisplayName: `\n\t\tIn this mode, make sure incoming data fields are named the same as the columns in your table. If needed, use an 'Edit Fields' node before this node to change the field names.\n\t\t`,\n\t\tname: 'notice',\n\t\ttype: 'notice',\n\t\tdefault: '',\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tdataMode: [DATA_MODE.AUTO_MAP],\n\t\t\t},\n\t\t},\n\t},\n\t{\n\t\tdisplayName: 'Values to Send',\n\t\tname: 'valuesToSend',\n\t\tplaceholder: 'Add Value',\n\t\ttype: 'fixedCollection',\n\t\ttypeOptions: {\n\t\t\tmultipleValueButtonText: 'Add Value',\n\t\t\tmultipleValues: true,\n\t\t},\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tdataMode: [DATA_MODE.MANUAL],\n\t\t\t},\n\t\t},\n\t\tdefault: {},\n\t\toptions: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Values',\n\t\t\t\tname: 'values',\n\t\t\t\tvalues: [\n\t\t\t\t\t{\n\t\t\t\t\t\t// eslint-disable-next-line n8n-nodes-base/node-param-display-name-wrong-for-dynamic-options\n\t\t\t\t\t\tdisplayName: 'Column',\n\t\t\t\t\t\tname: 'column',\n\t\t\t\t\t\ttype: 'options',\n\t\t\t\t\t\t// eslint-disable-next-line n8n-nodes-base/node-param-description-wrong-for-dynamic-options\n\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t'Choose from the list, or specify an ID using an <a href=\"https://docs.n8n.io/code/expressions/\" target=\"_blank\">expression</a>',\n\t\t\t\t\t\ttypeOptions: {\n\t\t\t\t\t\t\tloadOptionsMethod: 'getColumns',\n\t\t\t\t\t\t\tloadOptionsDependsOn: ['table.value'],\n\t\t\t\t\t\t},\n\t\t\t\t\t\tdefault: [],\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Value',\n\t\t\t\t\t\tname: 'value',\n\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t],\n\t},\n\toptionsCollection,\n];\n\nconst displayOptions = {\n\tshow: {\n\t\tresource: ['database'],\n\t\toperation: ['insert'],\n\t},\n\thide: {\n\t\ttable: [''],\n\t},\n};\n\nexport const description = updateDisplayOptions(displayOptions, properties);\n\nexport async function execute(\n\tthis: IExecuteFunctions,\n\tinputItems: INodeExecutionData[],\n\trunQueries: QueryRunner,\n\tnodeOptions: IDataObject,\n): Promise<INodeExecutionData[]> {\n\tlet returnData: INodeExecutionData[] = [];\n\tconst items = replaceEmptyStringsByNulls(inputItems, nodeOptions.replaceEmptyStrings as boolean);\n\n\tconst table = this.getNodeParameter('table', 0, '', { extractValue: true }) as string;\n\n\tconst dataMode = this.getNodeParameter('dataMode', 0) as string;\n\tconst queryBatching = (nodeOptions.queryBatching as QueryMode) || BATCH_MODE.SINGLE;\n\n\tconst queries: QueryWithValues[] = [];\n\n\tif (queryBatching === BATCH_MODE.SINGLE) {\n\t\tlet columns: string[] = [];\n\t\tlet insertItems: IDataObject[] = [];\n\n\t\tconst priority = (nodeOptions.priority as string) || '';\n\t\tconst ignore = (nodeOptions.skipOnConflict as boolean) ? 'IGNORE' : '';\n\n\t\tif (dataMode === DATA_MODE.AUTO_MAP) {\n\t\t\tcolumns = [\n\t\t\t\t...new Set(\n\t\t\t\t\titems.reduce((acc, item) => {\n\t\t\t\t\t\tconst itemColumns = Object.keys(item.json);\n\n\t\t\t\t\t\treturn acc.concat(itemColumns);\n\t\t\t\t\t}, [] as string[]),\n\t\t\t\t),\n\t\t\t];\n\t\t\tinsertItems = this.helpers.copyInputItems(items, columns);\n\t\t}\n\n\t\tif (dataMode === DATA_MODE.MANUAL) {\n\t\t\tfor (let i = 0; i < items.length; i++) {\n\t\t\t\tconst valuesToSend = (this.getNodeParameter('valuesToSend', i, []) as IDataObject)\n\t\t\t\t\t.values as IDataObject[];\n\n\t\t\t\tconst item = valuesToSend.reduce((acc, { column, value }) => {\n\t\t\t\t\tacc[column as string] = value;\n\t\t\t\t\treturn acc;\n\t\t\t\t}, {} as IDataObject);\n\n\t\t\t\tinsertItems.push(item);\n\t\t\t}\n\t\t\tcolumns = [\n\t\t\t\t...new Set(\n\t\t\t\t\tinsertItems.reduce((acc, item) => {\n\t\t\t\t\t\tconst itemColumns = Object.keys(item);\n\n\t\t\t\t\t\treturn acc.concat(itemColumns);\n\t\t\t\t\t}, [] as string[]),\n\t\t\t\t),\n\t\t\t];\n\t\t}\n\n\t\tconst escapedColumns = columns.map(escapeSqlIdentifier).join(', ');\n\t\tconst placeholder = `(${columns.map(() => '?').join(',')})`;\n\t\tconst replacements = items.map(() => placeholder).join(',');\n\n\t\tconst query = `INSERT ${priority} ${ignore} INTO ${escapeSqlIdentifier(\n\t\t\ttable,\n\t\t)} (${escapedColumns}) VALUES ${replacements}`;\n\n\t\tconst values = insertItems.reduce(\n\t\t\t(acc: IDataObject[], item) => acc.concat(Object.values(item) as IDataObject[]),\n\t\t\t[],\n\t\t);\n\n\t\tqueries.push({ query, values });\n\t} else {\n\t\tfor (let i = 0; i < items.length; i++) {\n\t\t\tlet columns: string[] = [];\n\t\t\tlet insertItem: IDataObject = {};\n\n\t\t\tconst options = this.getNodeParameter('options', i);\n\t\t\tconst priority = (options.priority as string) || '';\n\t\t\tconst ignore = (options.skipOnConflict as boolean) ? 'IGNORE' : '';\n\n\t\t\tif (dataMode === DATA_MODE.AUTO_MAP) {\n\t\t\t\tcolumns = Object.keys(items[i].json);\n\t\t\t\tinsertItem = columns.reduce((acc, key) => {\n\t\t\t\t\tif (columns.includes(key)) {\n\t\t\t\t\t\tacc[key] = items[i].json[key];\n\t\t\t\t\t}\n\t\t\t\t\treturn acc;\n\t\t\t\t}, {} as IDataObject);\n\t\t\t}\n\n\t\t\tif (dataMode === DATA_MODE.MANUAL) {\n\t\t\t\tconst valuesToSend = (this.getNodeParameter('valuesToSend', i, []) as IDataObject)\n\t\t\t\t\t.values as IDataObject[];\n\n\t\t\t\tinsertItem = valuesToSend.reduce((acc, { column, value }) => {\n\t\t\t\t\tacc[column as string] = value;\n\t\t\t\t\treturn acc;\n\t\t\t\t}, {} as IDataObject);\n\n\t\t\t\tcolumns = Object.keys(insertItem);\n\t\t\t}\n\n\t\t\tconst escapedColumns = columns.map(escapeSqlIdentifier).join(', ');\n\t\t\tconst placeholder = `(${columns.map(() => '?').join(',')})`;\n\n\t\t\tconst query = `INSERT ${priority} ${ignore} INTO ${escapeSqlIdentifier(\n\t\t\t\ttable,\n\t\t\t)} (${escapedColumns}) VALUES ${placeholder};`;\n\n\t\t\tconst values = Object.values(insertItem) as QueryValues;\n\n\t\t\tqueries.push({ query, values });\n\t\t}\n\t}\n\n\treturnData = await runQueries(queries);\n\n\treturn returnData;\n}\n"],"mappings":"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","names":[]}