{"version":3,"sources":["../../../../../../nodes/MySql/v2/actions/database/select.operation.ts"],"sourcesContent":["import type {\n\tIDataObject,\n\tIExecuteFunctions,\n\tINodeExecutionData,\n\tINodeProperties,\n} from 'n8n-workflow';\n\nimport { updateDisplayOptions } from '@utils/utilities';\n\nimport type {\n\tQueryRunner,\n\tQueryValues,\n\tQueryWithValues,\n\tSortRule,\n\tWhereClause,\n} from '../../helpers/interfaces';\nimport { addSortRules, addWhereClauses, escapeSqlIdentifier } from '../../helpers/utils';\nimport {\n\toptionsCollection,\n\tsortFixedCollection,\n\tselectRowsFixedCollection,\n\tcombineConditionsCollection,\n} from '../common.descriptions';\n\nconst properties: INodeProperties[] = [\n\t{\n\t\tdisplayName: 'Return All',\n\t\tname: 'returnAll',\n\t\ttype: 'boolean',\n\t\tdefault: false,\n\t\tdescription: 'Whether to return all results or only up to a given limit',\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tresource: ['event'],\n\t\t\t\toperation: ['getAll'],\n\t\t\t},\n\t\t},\n\t},\n\t{\n\t\tdisplayName: 'Limit',\n\t\tname: 'limit',\n\t\ttype: 'number',\n\t\tdefault: 50,\n\t\tdescription: 'Max number of results to return',\n\t\ttypeOptions: {\n\t\t\tminValue: 1,\n\t\t},\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\treturnAll: [false],\n\t\t\t},\n\t\t},\n\t},\n\tselectRowsFixedCollection,\n\tcombineConditionsCollection,\n\tsortFixedCollection,\n\toptionsCollection,\n];\n\nconst displayOptions = {\n\tshow: {\n\t\tresource: ['database'],\n\t\toperation: ['select'],\n\t},\n\thide: {\n\t\ttable: [''],\n\t},\n};\n\nexport const description = updateDisplayOptions(displayOptions, properties);\n\nexport async function execute(\n\tthis: IExecuteFunctions,\n\tinputItems: INodeExecutionData[],\n\trunQueries: QueryRunner,\n): Promise<INodeExecutionData[]> {\n\tlet returnData: INodeExecutionData[] = [];\n\n\tconst queries: QueryWithValues[] = [];\n\n\tfor (let i = 0; i < inputItems.length; i++) {\n\t\tconst table = this.getNodeParameter('table', i, undefined, {\n\t\t\textractValue: true,\n\t\t}) as string;\n\n\t\tconst outputColumns = this.getNodeParameter('options.outputColumns', i, ['*']) as string[];\n\t\tconst selectDistinct = this.getNodeParameter('options.selectDistinct', i, false) as boolean;\n\n\t\tlet query = '';\n\t\tconst SELECT = selectDistinct ? 'SELECT DISTINCT' : 'SELECT';\n\n\t\tif (outputColumns.includes('*')) {\n\t\t\tquery = `${SELECT} * FROM ${escapeSqlIdentifier(table)}`;\n\t\t} else {\n\t\t\tconst escapedColumns = outputColumns.map(escapeSqlIdentifier).join(', ');\n\t\t\tquery = `${SELECT} ${escapedColumns} FROM ${escapeSqlIdentifier(table)}`;\n\t\t}\n\n\t\tlet values: QueryValues = [];\n\n\t\tconst whereClauses =\n\t\t\t((this.getNodeParameter('where', i, []) as IDataObject).values as WhereClause[]) || [];\n\n\t\tconst combineConditions = this.getNodeParameter('combineConditions', i, 'AND') as string;\n\n\t\t[query, values] = addWhereClauses(\n\t\t\tthis.getNode(),\n\t\t\ti,\n\t\t\tquery,\n\t\t\twhereClauses,\n\t\t\tvalues,\n\t\t\tcombineConditions,\n\t\t);\n\n\t\tconst sortRules =\n\t\t\t((this.getNodeParameter('sort', i, []) as IDataObject).values as SortRule[]) || [];\n\n\t\t[query, values] = addSortRules(query, sortRules, values);\n\n\t\tconst returnAll = this.getNodeParameter('returnAll', i, false);\n\t\tif (!returnAll) {\n\t\t\tconst limit = this.getNodeParameter('limit', i, 50);\n\t\t\tquery += ' LIMIT ?';\n\t\t\tvalues.push(limit);\n\t\t}\n\n\t\tqueries.push({ query, values });\n\t}\n\n\treturnData = await runQueries(queries);\n\n\treturn returnData;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA,uBAAqC;AASrC,mBAAmE;AACnE,oBAKO;AAEP,MAAM,aAAgC;AAAA,EACrC;AAAA,IACC,aAAa;AAAA,IACb,MAAM;AAAA,IACN,MAAM;AAAA,IACN,SAAS;AAAA,IACT,aAAa;AAAA,IACb,gBAAgB;AAAA,MACf,MAAM;AAAA,QACL,UAAU,CAAC,OAAO;AAAA,QAClB,WAAW,CAAC,QAAQ;AAAA,MACrB;AAAA,IACD;AAAA,EACD;AAAA,EACA;AAAA,IACC,aAAa;AAAA,IACb,MAAM;AAAA,IACN,MAAM;AAAA,IACN,SAAS;AAAA,IACT,aAAa;AAAA,IACb,aAAa;AAAA,MACZ,UAAU;AAAA,IACX;AAAA,IACA,gBAAgB;AAAA,MACf,MAAM;AAAA,QACL,WAAW,CAAC,KAAK;AAAA,MAClB;AAAA,IACD;AAAA,EACD;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACD;AAEA,MAAM,iBAAiB;AAAA,EACtB,MAAM;AAAA,IACL,UAAU,CAAC,UAAU;AAAA,IACrB,WAAW,CAAC,QAAQ;AAAA,EACrB;AAAA,EACA,MAAM;AAAA,IACL,OAAO,CAAC,EAAE;AAAA,EACX;AACD;AAEO,MAAM,kBAAc,uCAAqB,gBAAgB,UAAU;AAE1E,eAAsB,QAErB,YACA,YACgC;AAChC,MAAI,aAAmC,CAAC;AAExC,QAAM,UAA6B,CAAC;AAEpC,WAAS,IAAI,GAAG,IAAI,WAAW,QAAQ,KAAK;AAC3C,UAAM,QAAQ,KAAK,iBAAiB,SAAS,GAAG,QAAW;AAAA,MAC1D,cAAc;AAAA,IACf,CAAC;AAED,UAAM,gBAAgB,KAAK,iBAAiB,yBAAyB,GAAG,CAAC,GAAG,CAAC;AAC7E,UAAM,iBAAiB,KAAK,iBAAiB,0BAA0B,GAAG,KAAK;AAE/E,QAAI,QAAQ;AACZ,UAAM,SAAS,iBAAiB,oBAAoB;AAEpD,QAAI,cAAc,SAAS,GAAG,GAAG;AAChC,cAAQ,GAAG,MAAM,eAAW,kCAAoB,KAAK,CAAC;AAAA,IACvD,OAAO;AACN,YAAM,iBAAiB,cAAc,IAAI,gCAAmB,EAAE,KAAK,IAAI;AACvE,cAAQ,GAAG,MAAM,IAAI,cAAc,aAAS,kCAAoB,KAAK,CAAC;AAAA,IACvE;AAEA,QAAI,SAAsB,CAAC;AAE3B,UAAM,eACH,KAAK,iBAAiB,SAAS,GAAG,CAAC,CAAC,EAAkB,UAA4B,CAAC;AAEtF,UAAM,oBAAoB,KAAK,iBAAiB,qBAAqB,GAAG,KAAK;AAE7E,KAAC,OAAO,MAAM,QAAI;AAAA,MACjB,KAAK,QAAQ;AAAA,MACb;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACD;AAEA,UAAM,YACH,KAAK,iBAAiB,QAAQ,GAAG,CAAC,CAAC,EAAkB,UAAyB,CAAC;AAElF,KAAC,OAAO,MAAM,QAAI,2BAAa,OAAO,WAAW,MAAM;AAEvD,UAAM,YAAY,KAAK,iBAAiB,aAAa,GAAG,KAAK;AAC7D,QAAI,CAAC,WAAW;AACf,YAAM,QAAQ,KAAK,iBAAiB,SAAS,GAAG,EAAE;AAClD,eAAS;AACT,aAAO,KAAK,KAAK;AAAA,IAClB;AAEA,YAAQ,KAAK,EAAE,OAAO,OAAO,CAAC;AAAA,EAC/B;AAEA,eAAa,MAAM,WAAW,OAAO;AAErC,SAAO;AACR;","names":[]}