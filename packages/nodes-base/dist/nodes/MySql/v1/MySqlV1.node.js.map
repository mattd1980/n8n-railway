{"version":3,"sources":["../../../../nodes/MySql/v1/MySqlV1.node.ts"],"sourcesContent":["import type mysql2 from 'mysql2/promise';\nimport type {\n\tICredentialDataDecryptedObject,\n\tICredentialsDecrypted,\n\tICredentialTestFunctions,\n\tIDataObject,\n\tIExecuteFunctions,\n\tINodeCredentialTestResult,\n\tINodeExecutionData,\n\tINodeType,\n\tINodeTypeBaseDescription,\n\tINodeTypeDescription,\n} from 'n8n-workflow';\nimport { NodeConnectionTypes, NodeOperationError } from 'n8n-workflow';\n\nimport { oldVersionNotice } from '@utils/descriptions';\nimport { getResolvables } from '@utils/utilities';\n\nimport { createConnection, searchTables } from './GenericFunctions';\n\nconst versionDescription: INodeTypeDescription = {\n\tdisplayName: 'MySQL',\n\tname: 'mySql',\n\ticon: 'file:mysql.svg',\n\tgroup: ['input'],\n\tversion: 1,\n\tdescription: 'Get, add and update data in MySQL',\n\tdefaults: {\n\t\tname: 'MySQL',\n\t},\n\tinputs: [NodeConnectionTypes.Main],\n\toutputs: [NodeConnectionTypes.Main],\n\tcredentials: [\n\t\t{\n\t\t\tname: 'mySql',\n\t\t\trequired: true,\n\t\t\ttestedBy: 'mysqlConnectionTest',\n\t\t},\n\t],\n\tproperties: [\n\t\toldVersionNotice,\n\t\t{\n\t\t\tdisplayName: 'Operation',\n\t\t\tname: 'operation',\n\t\t\ttype: 'options',\n\t\t\tnoDataExpression: true,\n\t\t\toptions: [\n\t\t\t\t{\n\t\t\t\t\tname: 'Execute Query',\n\t\t\t\t\tvalue: 'executeQuery',\n\t\t\t\t\tdescription: 'Execute an SQL query',\n\t\t\t\t\taction: 'Execute a SQL query',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'Insert',\n\t\t\t\t\tvalue: 'insert',\n\t\t\t\t\tdescription: 'Insert rows in database',\n\t\t\t\t\taction: 'Insert rows in database',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'Update',\n\t\t\t\t\tvalue: 'update',\n\t\t\t\t\tdescription: 'Update rows in database',\n\t\t\t\t\taction: 'Update rows in database',\n\t\t\t\t},\n\t\t\t],\n\t\t\tdefault: 'insert',\n\t\t},\n\n\t\t// ----------------------------------\n\t\t//         executeQuery\n\t\t// ----------------------------------\n\t\t{\n\t\t\tdisplayName: 'Query',\n\t\t\tname: 'query',\n\t\t\ttype: 'string',\n\t\t\tnoDataExpression: true,\n\t\t\ttypeOptions: {\n\t\t\t\teditor: 'sqlEditor',\n\t\t\t\tsqlDialect: 'MySQL',\n\t\t\t},\n\t\t\tdisplayOptions: {\n\t\t\t\tshow: {\n\t\t\t\t\toperation: ['executeQuery'],\n\t\t\t\t},\n\t\t\t},\n\t\t\tdefault: '',\n\t\t\tplaceholder: 'SELECT id, name FROM product WHERE id < 40',\n\t\t\trequired: true,\n\t\t\tdescription: 'The SQL query to execute',\n\t\t},\n\n\t\t// ----------------------------------\n\t\t//         insert\n\t\t// ----------------------------------\n\t\t{\n\t\t\tdisplayName: 'Table',\n\t\t\tname: 'table',\n\t\t\ttype: 'resourceLocator',\n\t\t\tdefault: { mode: 'list', value: '' },\n\t\t\trequired: true,\n\t\t\tmodes: [\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'From List',\n\t\t\t\t\tname: 'list',\n\t\t\t\t\ttype: 'list',\n\t\t\t\t\tplaceholder: 'Select a Table...',\n\t\t\t\t\ttypeOptions: {\n\t\t\t\t\t\tsearchListMethod: 'searchTables',\n\t\t\t\t\t\tsearchFilterRequired: false,\n\t\t\t\t\t\tsearchable: true,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'Name',\n\t\t\t\t\tname: 'name',\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tplaceholder: 'table_name',\n\t\t\t\t},\n\t\t\t],\n\t\t\tdisplayOptions: {\n\t\t\t\tshow: {\n\t\t\t\t\toperation: ['insert'],\n\t\t\t\t},\n\t\t\t},\n\t\t\tdescription: 'Name of the table in which to insert data to',\n\t\t},\n\t\t{\n\t\t\tdisplayName: 'Columns',\n\t\t\tname: 'columns',\n\t\t\ttype: 'string',\n\t\t\tdisplayOptions: {\n\t\t\t\tshow: {\n\t\t\t\t\toperation: ['insert'],\n\t\t\t\t},\n\t\t\t},\n\t\t\trequiresDataPath: 'multiple',\n\t\t\tdefault: '',\n\t\t\tplaceholder: 'id,name,description',\n\t\t\tdescription:\n\t\t\t\t'Comma-separated list of the properties which should used as columns for the new rows',\n\t\t},\n\t\t{\n\t\t\tdisplayName: 'Options',\n\t\t\tname: 'options',\n\t\t\ttype: 'collection',\n\t\t\tdisplayOptions: {\n\t\t\t\tshow: {\n\t\t\t\t\toperation: ['insert'],\n\t\t\t\t},\n\t\t\t},\n\t\t\tdefault: {},\n\t\t\tplaceholder: 'Add modifiers',\n\t\t\tdescription: 'Modifiers for INSERT statement',\n\t\t\toptions: [\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'Ignore',\n\t\t\t\t\tname: 'ignore',\n\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\tdefault: true,\n\t\t\t\t\tdescription:\n\t\t\t\t\t\t'Whether to ignore any ignorable errors that occur while executing the INSERT statement',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'Priority',\n\t\t\t\t\tname: 'priority',\n\t\t\t\t\ttype: 'options',\n\t\t\t\t\toptions: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'Low Prioirity',\n\t\t\t\t\t\t\tvalue: 'LOW_PRIORITY',\n\t\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t\t'Delays execution of the INSERT until no other clients are reading from the table',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'High Priority',\n\t\t\t\t\t\t\tvalue: 'HIGH_PRIORITY',\n\t\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t\t'Overrides the effect of the --low-priority-updates option if the server was started with that option. It also causes concurrent inserts not to be used.',\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t\tdefault: 'LOW_PRIORITY',\n\t\t\t\t\tdescription:\n\t\t\t\t\t\t'Ignore any ignorable errors that occur while executing the INSERT statement',\n\t\t\t\t},\n\t\t\t],\n\t\t},\n\n\t\t// ----------------------------------\n\t\t//         update\n\t\t// ----------------------------------\n\t\t{\n\t\t\tdisplayName: 'Table',\n\t\t\tname: 'table',\n\t\t\ttype: 'resourceLocator',\n\t\t\tdefault: { mode: 'list', value: '' },\n\t\t\trequired: true,\n\t\t\tmodes: [\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'From List',\n\t\t\t\t\tname: 'list',\n\t\t\t\t\ttype: 'list',\n\t\t\t\t\tplaceholder: 'Select a Table...',\n\t\t\t\t\ttypeOptions: {\n\t\t\t\t\t\tsearchListMethod: 'searchTables',\n\t\t\t\t\t\tsearchFilterRequired: false,\n\t\t\t\t\t\tsearchable: true,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'Name',\n\t\t\t\t\tname: 'name',\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tplaceholder: 'table_name',\n\t\t\t\t},\n\t\t\t],\n\t\t\tdisplayOptions: {\n\t\t\t\tshow: {\n\t\t\t\t\toperation: ['update'],\n\t\t\t\t},\n\t\t\t},\n\t\t\tdescription: 'Name of the table in which to update data in',\n\t\t},\n\t\t{\n\t\t\tdisplayName: 'Update Key',\n\t\t\tname: 'updateKey',\n\t\t\ttype: 'string',\n\t\t\tdisplayOptions: {\n\t\t\t\tshow: {\n\t\t\t\t\toperation: ['update'],\n\t\t\t\t},\n\t\t\t},\n\t\t\tdefault: 'id',\n\t\t\trequired: true,\n\t\t\t// eslint-disable-next-line n8n-nodes-base/node-param-description-miscased-id\n\t\t\tdescription:\n\t\t\t\t'Name of the property which decides which rows in the database should be updated. Normally that would be \"id\".',\n\t\t},\n\t\t{\n\t\t\tdisplayName: 'Columns',\n\t\t\tname: 'columns',\n\t\t\ttype: 'string',\n\t\t\trequiresDataPath: 'multiple',\n\t\t\tdisplayOptions: {\n\t\t\t\tshow: {\n\t\t\t\t\toperation: ['update'],\n\t\t\t\t},\n\t\t\t},\n\t\t\tdefault: '',\n\t\t\tplaceholder: 'name,description',\n\t\t\tdescription:\n\t\t\t\t'Comma-separated list of the properties which should used as columns for rows to update',\n\t\t},\n\t],\n};\n\nexport class MySqlV1 implements INodeType {\n\tdescription: INodeTypeDescription;\n\n\tconstructor(baseDescription: INodeTypeBaseDescription) {\n\t\tthis.description = {\n\t\t\t...baseDescription,\n\t\t\t...versionDescription,\n\t\t};\n\t}\n\n\tmethods = {\n\t\tcredentialTest: {\n\t\t\tasync mysqlConnectionTest(\n\t\t\t\tthis: ICredentialTestFunctions,\n\t\t\t\tcredential: ICredentialsDecrypted,\n\t\t\t): Promise<INodeCredentialTestResult> {\n\t\t\t\tconst credentials = credential.data as ICredentialDataDecryptedObject;\n\t\t\t\ttry {\n\t\t\t\t\tconst connection = await createConnection(credentials);\n\t\t\t\t\tawait connection.end();\n\t\t\t\t} catch (error) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tstatus: 'Error',\n\t\t\t\t\t\tmessage: error.message,\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\treturn {\n\t\t\t\t\tstatus: 'OK',\n\t\t\t\t\tmessage: 'Connection successful!',\n\t\t\t\t};\n\t\t\t},\n\t\t},\n\t\tlistSearch: {\n\t\t\tsearchTables,\n\t\t},\n\t};\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t\tconst credentials = await this.getCredentials('mySql');\n\t\tconst connection = await createConnection(credentials);\n\t\tconst items = this.getInputData();\n\t\tconst operation = this.getNodeParameter('operation', 0);\n\t\tlet returnItems: INodeExecutionData[] = [];\n\n\t\tif (operation === 'executeQuery') {\n\t\t\t// ----------------------------------\n\t\t\t//         executeQuery\n\t\t\t// ----------------------------------\n\n\t\t\ttry {\n\t\t\t\tconst queryQueue = items.map(async (_, index) => {\n\t\t\t\t\tlet rawQuery = (this.getNodeParameter('query', index) as string).trim();\n\n\t\t\t\t\tfor (const resolvable of getResolvables(rawQuery)) {\n\t\t\t\t\t\trawQuery = rawQuery.replace(\n\t\t\t\t\t\t\tresolvable,\n\t\t\t\t\t\t\tthis.evaluateExpression(resolvable, index) as string,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn await connection.query(rawQuery);\n\t\t\t\t});\n\n\t\t\t\treturnItems = ((await Promise.all(queryQueue)) as mysql2.OkPacket[][]).reduce(\n\t\t\t\t\t(collection, result, index) => {\n\t\t\t\t\t\tconst [rows] = result;\n\n\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray(rows as unknown as IDataObject[]),\n\t\t\t\t\t\t\t{ itemData: { item: index } },\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tcollection = collection.concat(executionData);\n\n\t\t\t\t\t\treturn collection;\n\t\t\t\t\t},\n\t\t\t\t\t[] as INodeExecutionData[],\n\t\t\t\t);\n\t\t\t} catch (error) {\n\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\treturnItems = this.helpers.returnJsonArray({ error: error.message });\n\t\t\t\t} else {\n\t\t\t\t\tawait connection.end();\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (operation === 'insert') {\n\t\t\t// ----------------------------------\n\t\t\t//         insert\n\t\t\t// ----------------------------------\n\n\t\t\ttry {\n\t\t\t\tconst table = this.getNodeParameter('table', 0, '', { extractValue: true }) as string;\n\t\t\t\tconst columnString = this.getNodeParameter('columns', 0) as string;\n\t\t\t\tconst columns = columnString.split(',').map((column) => column.trim());\n\t\t\t\tconst insertItems = this.helpers.copyInputItems(items, columns);\n\t\t\t\tconst insertPlaceholder = `(${columns.map((_column) => '?').join(',')})`;\n\t\t\t\tconst options = this.getNodeParameter('options', 0);\n\t\t\t\tconst insertIgnore = options.ignore as boolean;\n\t\t\t\tconst insertPriority = options.priority as string;\n\n\t\t\t\tconst insertSQL = `INSERT ${insertPriority || ''} ${\n\t\t\t\t\tinsertIgnore ? 'IGNORE' : ''\n\t\t\t\t} INTO ${table}(${columnString}) VALUES ${items\n\t\t\t\t\t.map((_item) => insertPlaceholder)\n\t\t\t\t\t.join(',')};`;\n\t\t\t\tconst queryItems = insertItems.reduce(\n\t\t\t\t\t(collection: IDataObject[], item) =>\n\t\t\t\t\t\tcollection.concat(Object.values(item) as IDataObject[]),\n\t\t\t\t\t[],\n\t\t\t\t);\n\n\t\t\t\tconst queryResult = await connection.query(insertSQL, queryItems);\n\n\t\t\t\treturnItems = this.helpers.returnJsonArray(queryResult[0] as unknown as IDataObject);\n\t\t\t} catch (error) {\n\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\treturnItems = this.helpers.returnJsonArray({ error: error.message });\n\t\t\t\t} else {\n\t\t\t\t\tawait connection.end();\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (operation === 'update') {\n\t\t\t// ----------------------------------\n\t\t\t//         update\n\t\t\t// ----------------------------------\n\n\t\t\ttry {\n\t\t\t\tconst table = this.getNodeParameter('table', 0, '', { extractValue: true }) as string;\n\t\t\t\tconst updateKey = this.getNodeParameter('updateKey', 0) as string;\n\t\t\t\tconst columnString = this.getNodeParameter('columns', 0) as string;\n\t\t\t\tconst columns = columnString.split(',').map((column) => column.trim());\n\n\t\t\t\tif (!columns.includes(updateKey)) {\n\t\t\t\t\tcolumns.unshift(updateKey);\n\t\t\t\t}\n\n\t\t\t\tconst updateItems = this.helpers.copyInputItems(items, columns);\n\t\t\t\tconst updateSQL = `UPDATE ${table} SET ${columns\n\t\t\t\t\t.map((column) => `${column} = ?`)\n\t\t\t\t\t.join(',')} WHERE ${updateKey} = ?;`;\n\t\t\t\tconst queryQueue = updateItems.map(\n\t\t\t\t\tasync (item) =>\n\t\t\t\t\t\tawait connection.query(updateSQL, Object.values(item).concat(item[updateKey])),\n\t\t\t\t);\n\t\t\t\tconst queryResult = await Promise.all(queryQueue);\n\t\t\t\treturnItems = this.helpers.returnJsonArray(\n\t\t\t\t\tqueryResult.map((result) => result[0]) as unknown as IDataObject[],\n\t\t\t\t);\n\t\t\t} catch (error) {\n\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\treturnItems = this.helpers.returnJsonArray({ error: error.message });\n\t\t\t\t} else {\n\t\t\t\t\tawait connection.end();\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tif (this.continueOnFail()) {\n\t\t\t\treturnItems = this.helpers.returnJsonArray({\n\t\t\t\t\terror: `The operation \"${operation}\" is not supported!`,\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tawait connection.end();\n\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t`The operation \"${operation}\" is not supported!`,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tawait connection.end();\n\n\t\treturn [returnItems];\n\t}\n}\n"],"mappings":"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","names":[]}