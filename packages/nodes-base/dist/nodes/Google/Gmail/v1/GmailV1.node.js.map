{"version":3,"sources":["../../../../../nodes/Google/Gmail/v1/GmailV1.node.ts"],"sourcesContent":["import isEmpty from 'lodash/isEmpty';\nimport {\n\tNodeConnectionTypes,\n\ttype IBinaryKeyData,\n\ttype IDataObject,\n\ttype IExecuteFunctions,\n\ttype IHttpRequestMethods,\n\ttype INodeExecutionData,\n\ttype INodeType,\n\ttype INodeTypeBaseDescription,\n\ttype INodeTypeDescription,\n} from 'n8n-workflow';\n\nimport { oldVersionNotice } from '@utils/descriptions';\n\nimport { draftFields, draftOperations } from './DraftDescription';\nimport { labelFields, labelOperations } from './LabelDescription';\nimport { getLabels } from './loadOptions';\nimport { messageFields, messageOperations } from './MessageDescription';\nimport { messageLabelFields, messageLabelOperations } from './MessageLabelDescription';\nimport type { IEmail } from '../../../../utils/sendAndWait/interfaces';\nimport {\n\tencodeEmail,\n\textractEmail,\n\tgoogleApiRequest,\n\tgoogleApiRequestAllItems,\n\tparseRawEmail,\n} from '../GenericFunctions';\n\nconst versionDescription: INodeTypeDescription = {\n\tdisplayName: 'Gmail',\n\tname: 'gmail',\n\ticon: 'file:gmail.svg',\n\tgroup: ['transform'],\n\tversion: 1,\n\tsubtitle: '={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}',\n\tdescription: 'Consume the Gmail API',\n\tdefaults: {\n\t\tname: 'Gmail',\n\t},\n\tinputs: [NodeConnectionTypes.Main],\n\toutputs: [NodeConnectionTypes.Main],\n\tcredentials: [\n\t\t{\n\t\t\tname: 'googleApi',\n\t\t\trequired: true,\n\t\t\tdisplayOptions: {\n\t\t\t\tshow: {\n\t\t\t\t\tauthentication: ['serviceAccount'],\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: 'gmailOAuth2',\n\t\t\trequired: true,\n\t\t\tdisplayOptions: {\n\t\t\t\tshow: {\n\t\t\t\t\tauthentication: ['oAuth2'],\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t],\n\tproperties: [\n\t\toldVersionNotice,\n\t\t{\n\t\t\tdisplayName: 'Authentication',\n\t\t\tname: 'authentication',\n\t\t\ttype: 'options',\n\t\t\toptions: [\n\t\t\t\t{\n\t\t\t\t\t// eslint-disable-next-line n8n-nodes-base/node-param-display-name-miscased\n\t\t\t\t\tname: 'OAuth2 (recommended)',\n\t\t\t\t\tvalue: 'oAuth2',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'Service Account',\n\t\t\t\t\tvalue: 'serviceAccount',\n\t\t\t\t},\n\t\t\t],\n\t\t\tdefault: 'oAuth2',\n\t\t},\n\t\t{\n\t\t\tdisplayName: 'Resource',\n\t\t\tname: 'resource',\n\t\t\ttype: 'options',\n\t\t\tnoDataExpression: true,\n\t\t\toptions: [\n\t\t\t\t{\n\t\t\t\t\tname: 'Draft',\n\t\t\t\t\tvalue: 'draft',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'Label',\n\t\t\t\t\tvalue: 'label',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'Message',\n\t\t\t\t\tvalue: 'message',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'Message Label',\n\t\t\t\t\tvalue: 'messageLabel',\n\t\t\t\t},\n\t\t\t],\n\t\t\tdefault: 'draft',\n\t\t},\n\t\t//-------------------------------\n\t\t// Draft Operations\n\t\t//-------------------------------\n\t\t...draftOperations,\n\t\t...draftFields,\n\t\t//-------------------------------\n\t\t// Label Operations\n\t\t//-------------------------------\n\t\t...labelOperations,\n\t\t...labelFields,\n\t\t//-------------------------------\n\t\t// Message Operations\n\t\t//-------------------------------\n\t\t...messageOperations,\n\t\t...messageFields,\n\t\t//-------------------------------\n\t\t// MessageLabel Operations\n\t\t//-------------------------------\n\t\t...messageLabelOperations,\n\t\t...messageLabelFields,\n\t\t//-------------------------------\n\t],\n};\n\nexport class GmailV1 implements INodeType {\n\tdescription: INodeTypeDescription;\n\n\tconstructor(baseDescription: INodeTypeBaseDescription) {\n\t\tthis.description = {\n\t\t\t...baseDescription,\n\t\t\t...versionDescription,\n\t\t};\n\t}\n\n\tmethods = {\n\t\tloadOptions: {\n\t\t\tgetLabels,\n\t\t},\n\t};\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t\tconst items = this.getInputData();\n\t\tconst returnData: INodeExecutionData[] = [];\n\t\tconst resource = this.getNodeParameter('resource', 0);\n\t\tconst operation = this.getNodeParameter('operation', 0);\n\n\t\tlet method: IHttpRequestMethods = 'GET';\n\t\tlet body: IDataObject = {};\n\t\tlet qs: IDataObject = {};\n\t\tlet endpoint = '';\n\t\tlet responseData;\n\n\t\tfor (let i = 0; i < items.length; i++) {\n\t\t\ttry {\n\t\t\t\tif (resource === 'label') {\n\t\t\t\t\tif (operation === 'create') {\n\t\t\t\t\t\t//https://developers.google.com/gmail/api/v1/reference/users/labels/create\n\t\t\t\t\t\tconst labelName = this.getNodeParameter('name', i) as string;\n\t\t\t\t\t\tconst labelListVisibility = this.getNodeParameter('labelListVisibility', i) as string;\n\t\t\t\t\t\tconst messageListVisibility = this.getNodeParameter(\n\t\t\t\t\t\t\t'messageListVisibility',\n\t\t\t\t\t\t\ti,\n\t\t\t\t\t\t) as string;\n\n\t\t\t\t\t\tmethod = 'POST';\n\t\t\t\t\t\tendpoint = '/gmail/v1/users/me/labels';\n\n\t\t\t\t\t\tbody = {\n\t\t\t\t\t\t\tlabelListVisibility,\n\t\t\t\t\t\t\tmessageListVisibility,\n\t\t\t\t\t\t\tname: labelName,\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tresponseData = await googleApiRequest.call(this, method, endpoint, body, qs);\n\t\t\t\t\t}\n\t\t\t\t\tif (operation === 'delete') {\n\t\t\t\t\t\t//https://developers.google.com/gmail/api/v1/reference/users/labels/delete\n\t\t\t\t\t\tconst labelId = this.getNodeParameter('labelId', i) as string[];\n\n\t\t\t\t\t\tmethod = 'DELETE';\n\t\t\t\t\t\tendpoint = `/gmail/v1/users/me/labels/${labelId}`;\n\t\t\t\t\t\tresponseData = await googleApiRequest.call(this, method, endpoint, body, qs);\n\t\t\t\t\t\tresponseData = { success: true };\n\t\t\t\t\t}\n\t\t\t\t\tif (operation === 'get') {\n\t\t\t\t\t\t// https://developers.google.com/gmail/api/v1/reference/users/labels/get\n\t\t\t\t\t\tconst labelId = this.getNodeParameter('labelId', i);\n\n\t\t\t\t\t\tmethod = 'GET';\n\t\t\t\t\t\tendpoint = `/gmail/v1/users/me/labels/${labelId}`;\n\n\t\t\t\t\t\tresponseData = await googleApiRequest.call(this, method, endpoint, body, qs);\n\t\t\t\t\t}\n\t\t\t\t\tif (operation === 'getAll') {\n\t\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', i);\n\n\t\t\t\t\t\tresponseData = await googleApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t'/gmail/v1/users/me/labels',\n\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tresponseData = responseData.labels;\n\n\t\t\t\t\t\tif (!returnAll) {\n\t\t\t\t\t\t\tconst limit = this.getNodeParameter('limit', i);\n\t\t\t\t\t\t\tresponseData = responseData.splice(0, limit);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (resource === 'messageLabel') {\n\t\t\t\t\tif (operation === 'remove') {\n\t\t\t\t\t\t//https://developers.google.com/gmail/api/v1/reference/users/messages/modify\n\t\t\t\t\t\tconst messageID = this.getNodeParameter('messageId', i);\n\t\t\t\t\t\tconst labelIds = this.getNodeParameter('labelIds', i) as string[];\n\n\t\t\t\t\t\tmethod = 'POST';\n\t\t\t\t\t\tendpoint = `/gmail/v1/users/me/messages/${messageID}/modify`;\n\t\t\t\t\t\tbody = {\n\t\t\t\t\t\t\tremoveLabelIds: labelIds,\n\t\t\t\t\t\t};\n\t\t\t\t\t\tresponseData = await googleApiRequest.call(this, method, endpoint, body, qs);\n\t\t\t\t\t}\n\t\t\t\t\tif (operation === 'add') {\n\t\t\t\t\t\t// https://developers.google.com/gmail/api/v1/reference/users/messages/modify\n\t\t\t\t\t\tconst messageID = this.getNodeParameter('messageId', i);\n\t\t\t\t\t\tconst labelIds = this.getNodeParameter('labelIds', i) as string[];\n\n\t\t\t\t\t\tmethod = 'POST';\n\t\t\t\t\t\tendpoint = `/gmail/v1/users/me/messages/${messageID}/modify`;\n\n\t\t\t\t\t\tbody = {\n\t\t\t\t\t\t\taddLabelIds: labelIds,\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tresponseData = await googleApiRequest.call(this, method, endpoint, body, qs);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (resource === 'message') {\n\t\t\t\t\tif (operation === 'send') {\n\t\t\t\t\t\t// https://developers.google.com/gmail/api/v1/reference/users/messages/send\n\n\t\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i);\n\n\t\t\t\t\t\tlet toStr = '';\n\t\t\t\t\t\tlet ccStr = '';\n\t\t\t\t\t\tlet bccStr = '';\n\t\t\t\t\t\tlet attachmentsList: IDataObject[] = [];\n\n\t\t\t\t\t\tconst toList = this.getNodeParameter('toList', i) as IDataObject[];\n\n\t\t\t\t\t\ttoList.forEach((email) => {\n\t\t\t\t\t\t\ttoStr += `<${email}>, `;\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tif (additionalFields.ccList) {\n\t\t\t\t\t\t\tconst ccList = additionalFields.ccList as IDataObject[];\n\n\t\t\t\t\t\t\tccList.forEach((email) => {\n\t\t\t\t\t\t\t\tccStr += `<${email}>, `;\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (additionalFields.bccList) {\n\t\t\t\t\t\t\tconst bccList = additionalFields.bccList as IDataObject[];\n\n\t\t\t\t\t\t\tbccList.forEach((email) => {\n\t\t\t\t\t\t\t\tbccStr += `<${email}>, `;\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (additionalFields.attachmentsUi) {\n\t\t\t\t\t\t\tconst attachmentsUi = additionalFields.attachmentsUi as IDataObject;\n\t\t\t\t\t\t\tconst attachmentsBinary = [];\n\t\t\t\t\t\t\tif (!isEmpty(attachmentsUi)) {\n\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\tattachmentsUi.hasOwnProperty('attachmentsBinary') &&\n\t\t\t\t\t\t\t\t\t!isEmpty(attachmentsUi.attachmentsBinary) &&\n\t\t\t\t\t\t\t\t\titems[i].binary\n\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\tfor (const { property } of attachmentsUi.attachmentsBinary as IDataObject[]) {\n\t\t\t\t\t\t\t\t\t\tfor (const binaryProperty of (property as string).split(',')) {\n\t\t\t\t\t\t\t\t\t\t\tconst binaryData = this.helpers.assertBinaryData(i, binaryProperty);\n\t\t\t\t\t\t\t\t\t\t\tconst binaryDataBuffer = await this.helpers.getBinaryDataBuffer(\n\t\t\t\t\t\t\t\t\t\t\t\ti,\n\t\t\t\t\t\t\t\t\t\t\t\tbinaryProperty,\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\tattachmentsBinary.push({\n\t\t\t\t\t\t\t\t\t\t\t\tname: binaryData.fileName || 'unknown',\n\t\t\t\t\t\t\t\t\t\t\t\tcontent: binaryDataBuffer,\n\t\t\t\t\t\t\t\t\t\t\t\ttype: binaryData.mimeType,\n\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tqs = {\n\t\t\t\t\t\t\t\t\tuserId: 'me',\n\t\t\t\t\t\t\t\t\tuploadType: 'media',\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\tattachmentsList = attachmentsBinary;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst email: IEmail = {\n\t\t\t\t\t\t\tfrom: (additionalFields.senderName as string) || '',\n\t\t\t\t\t\t\tto: toStr,\n\t\t\t\t\t\t\tcc: ccStr,\n\t\t\t\t\t\t\tbcc: bccStr,\n\t\t\t\t\t\t\tsubject: this.getNodeParameter('subject', i) as string,\n\t\t\t\t\t\t\tbody: this.getNodeParameter('message', i) as string,\n\t\t\t\t\t\t\tattachments: attachmentsList,\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tif (this.getNodeParameter('includeHtml', i, false) as boolean) {\n\t\t\t\t\t\t\temail.htmlBody = this.getNodeParameter('htmlMessage', i) as string;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tendpoint = '/gmail/v1/users/me/messages/send';\n\t\t\t\t\t\tmethod = 'POST';\n\n\t\t\t\t\t\tbody = {\n\t\t\t\t\t\t\traw: await encodeEmail(email),\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tresponseData = await googleApiRequest.call(this, method, endpoint, body, qs);\n\t\t\t\t\t}\n\t\t\t\t\tif (operation === 'reply') {\n\t\t\t\t\t\tconst id = this.getNodeParameter('messageId', i) as string;\n\t\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i);\n\n\t\t\t\t\t\tlet toStr = '';\n\t\t\t\t\t\tlet ccStr = '';\n\t\t\t\t\t\tlet bccStr = '';\n\t\t\t\t\t\tlet attachmentsList: IDataObject[] = [];\n\n\t\t\t\t\t\tconst toList = this.getNodeParameter('toList', i) as IDataObject[];\n\n\t\t\t\t\t\ttoList.forEach((email) => {\n\t\t\t\t\t\t\ttoStr += `<${email}>, `;\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tif (additionalFields.ccList) {\n\t\t\t\t\t\t\tconst ccList = additionalFields.ccList as IDataObject[];\n\n\t\t\t\t\t\t\tccList.forEach((email) => {\n\t\t\t\t\t\t\t\tccStr += `<${email}>, `;\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (additionalFields.bccList) {\n\t\t\t\t\t\t\tconst bccList = additionalFields.bccList as IDataObject[];\n\n\t\t\t\t\t\t\tbccList.forEach((email) => {\n\t\t\t\t\t\t\t\tbccStr += `<${email}>, `;\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (additionalFields.attachmentsUi) {\n\t\t\t\t\t\t\tconst attachmentsUi = additionalFields.attachmentsUi as IDataObject;\n\t\t\t\t\t\t\tconst attachmentsBinary = [];\n\t\t\t\t\t\t\tif (!isEmpty(attachmentsUi)) {\n\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\tattachmentsUi.hasOwnProperty('attachmentsBinary') &&\n\t\t\t\t\t\t\t\t\t!isEmpty(attachmentsUi.attachmentsBinary) &&\n\t\t\t\t\t\t\t\t\titems[i].binary\n\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\tfor (const { property } of attachmentsUi.attachmentsBinary as IDataObject[]) {\n\t\t\t\t\t\t\t\t\t\tfor (const binaryProperty of (property as string).split(',')) {\n\t\t\t\t\t\t\t\t\t\t\tconst binaryData = this.helpers.assertBinaryData(i, binaryProperty);\n\t\t\t\t\t\t\t\t\t\t\tconst binaryDataBuffer = await this.helpers.getBinaryDataBuffer(\n\t\t\t\t\t\t\t\t\t\t\t\ti,\n\t\t\t\t\t\t\t\t\t\t\t\tbinaryProperty,\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\tattachmentsBinary.push({\n\t\t\t\t\t\t\t\t\t\t\t\tname: binaryData.fileName || 'unknown',\n\t\t\t\t\t\t\t\t\t\t\t\tcontent: binaryDataBuffer,\n\t\t\t\t\t\t\t\t\t\t\t\ttype: binaryData.mimeType,\n\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tqs = {\n\t\t\t\t\t\t\t\t\tuserId: 'me',\n\t\t\t\t\t\t\t\t\tuploadType: 'media',\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\tattachmentsList = attachmentsBinary;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tendpoint = `/gmail/v1/users/me/messages/${id}`;\n\n\t\t\t\t\t\tqs.format = 'metadata';\n\n\t\t\t\t\t\tconst { payload } = await googleApiRequest.call(this, method, endpoint, body, qs);\n\n\t\t\t\t\t\tif (toStr === '') {\n\t\t\t\t\t\t\tfor (const header of payload.headers as IDataObject[]) {\n\t\t\t\t\t\t\t\tif (header.name === 'From') {\n\t\t\t\t\t\t\t\t\ttoStr = `<${extractEmail(header.value as string)}>,`;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst subject =\n\t\t\t\t\t\t\tpayload.headers.filter(\n\t\t\t\t\t\t\t\t(data: { [key: string]: string }) => data.name === 'Subject',\n\t\t\t\t\t\t\t)[0]?.value || '';\n\t\t\t\t\t\tconst references =\n\t\t\t\t\t\t\tpayload.headers.filter(\n\t\t\t\t\t\t\t\t(data: { [key: string]: string }) => data.name === 'References',\n\t\t\t\t\t\t\t)[0]?.value || '';\n\n\t\t\t\t\t\tconst email: IEmail = {\n\t\t\t\t\t\t\tfrom: (additionalFields.senderName as string) || '',\n\t\t\t\t\t\t\tto: toStr,\n\t\t\t\t\t\t\tcc: ccStr,\n\t\t\t\t\t\t\tbcc: bccStr,\n\t\t\t\t\t\t\tsubject,\n\t\t\t\t\t\t\tbody: this.getNodeParameter('message', i) as string,\n\t\t\t\t\t\t\tattachments: attachmentsList,\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tif (this.getNodeParameter('includeHtml', i, false) as boolean) {\n\t\t\t\t\t\t\temail.htmlBody = this.getNodeParameter('htmlMessage', i) as string;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tendpoint = '/gmail/v1/users/me/messages/send';\n\t\t\t\t\t\tmethod = 'POST';\n\n\t\t\t\t\t\temail.inReplyTo = id;\n\t\t\t\t\t\temail.reference = references;\n\n\t\t\t\t\t\tbody = {\n\t\t\t\t\t\t\traw: await encodeEmail(email),\n\t\t\t\t\t\t\tthreadId: this.getNodeParameter('threadId', i) as string,\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tresponseData = await googleApiRequest.call(this, method, endpoint, body, qs);\n\t\t\t\t\t}\n\t\t\t\t\tif (operation === 'get') {\n\t\t\t\t\t\t//https://developers.google.com/gmail/api/v1/reference/users/messages/get\n\t\t\t\t\t\tmethod = 'GET';\n\n\t\t\t\t\t\tconst id = this.getNodeParameter('messageId', i);\n\n\t\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i);\n\t\t\t\t\t\tconst format = additionalFields.format || 'resolved';\n\n\t\t\t\t\t\tif (format === 'resolved') {\n\t\t\t\t\t\t\tqs.format = 'raw';\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tqs.format = format;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tendpoint = `/gmail/v1/users/me/messages/${id}`;\n\n\t\t\t\t\t\tresponseData = await googleApiRequest.call(this, method, endpoint, body, qs);\n\n\t\t\t\t\t\tlet nodeExecutionData: INodeExecutionData;\n\t\t\t\t\t\tif (format === 'resolved') {\n\t\t\t\t\t\t\tconst dataPropertyNameDownload =\n\t\t\t\t\t\t\t\t(additionalFields.dataPropertyAttachmentsPrefixName as string) || 'attachment_';\n\n\t\t\t\t\t\t\tnodeExecutionData = await parseRawEmail.call(\n\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\tresponseData,\n\t\t\t\t\t\t\t\tdataPropertyNameDownload,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tnodeExecutionData = {\n\t\t\t\t\t\t\t\tjson: responseData,\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = nodeExecutionData;\n\t\t\t\t\t}\n\t\t\t\t\tif (operation === 'getAll') {\n\t\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', i);\n\t\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i);\n\t\t\t\t\t\tObject.assign(qs, additionalFields);\n\n\t\t\t\t\t\tif (qs.labelIds) {\n\t\t\t\t\t\t\tif (qs.labelIds == '') {\n\t\t\t\t\t\t\t\tdelete qs.labelIds;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tqs.labelIds = qs.labelIds as string[];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (returnAll) {\n\t\t\t\t\t\t\tresponseData = await googleApiRequestAllItems.call(\n\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t'messages',\n\t\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t\t'/gmail/v1/users/me/messages',\n\t\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tqs.maxResults = this.getNodeParameter('limit', i);\n\t\t\t\t\t\t\tresponseData = await googleApiRequest.call(\n\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t\t'/gmail/v1/users/me/messages',\n\t\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tresponseData = responseData.messages;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (responseData === undefined) {\n\t\t\t\t\t\t\tresponseData = [];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst format = additionalFields.format || 'resolved';\n\n\t\t\t\t\t\tif (format !== 'ids') {\n\t\t\t\t\t\t\tif (format === 'resolved') {\n\t\t\t\t\t\t\t\tqs.format = 'raw';\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tqs.format = format;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tfor (let index = 0; index < responseData.length; index++) {\n\t\t\t\t\t\t\t\tresponseData[index] = await googleApiRequest.call(\n\t\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t\t\t`/gmail/v1/users/me/messages/${responseData[index].id}`,\n\t\t\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\tif (format === 'resolved') {\n\t\t\t\t\t\t\t\t\tconst dataPropertyNameDownload =\n\t\t\t\t\t\t\t\t\t\t(additionalFields.dataPropertyAttachmentsPrefixName as string) || 'attachment_';\n\n\t\t\t\t\t\t\t\t\tresponseData[index] = await parseRawEmail.call(\n\t\t\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t\t\tresponseData[index],\n\t\t\t\t\t\t\t\t\t\tdataPropertyNameDownload,\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (format !== 'resolved') {\n\t\t\t\t\t\t\tresponseData = this.helpers.returnJsonArray(responseData as IDataObject[]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (operation === 'delete') {\n\t\t\t\t\t\t// https://developers.google.com/gmail/api/v1/reference/users/messages/delete\n\t\t\t\t\t\tmethod = 'DELETE';\n\t\t\t\t\t\tconst id = this.getNodeParameter('messageId', i);\n\n\t\t\t\t\t\tendpoint = `/gmail/v1/users/me/messages/${id}`;\n\n\t\t\t\t\t\tresponseData = await googleApiRequest.call(this, method, endpoint, body, qs);\n\n\t\t\t\t\t\tresponseData = { success: true };\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (resource === 'draft') {\n\t\t\t\t\tif (operation === 'create') {\n\t\t\t\t\t\t// https://developers.google.com/gmail/api/v1/reference/users/drafts/create\n\n\t\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i);\n\n\t\t\t\t\t\tlet toStr = '';\n\t\t\t\t\t\tlet ccStr = '';\n\t\t\t\t\t\tlet bccStr = '';\n\t\t\t\t\t\tlet attachmentsList: IDataObject[] = [];\n\n\t\t\t\t\t\tif (additionalFields.toList) {\n\t\t\t\t\t\t\tconst toList = additionalFields.toList as IDataObject[];\n\n\t\t\t\t\t\t\ttoList.forEach((email) => {\n\t\t\t\t\t\t\t\ttoStr += `<${email}>, `;\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (additionalFields.ccList) {\n\t\t\t\t\t\t\tconst ccList = additionalFields.ccList as IDataObject[];\n\n\t\t\t\t\t\t\tccList.forEach((email) => {\n\t\t\t\t\t\t\t\tccStr += `<${email}>, `;\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (additionalFields.bccList) {\n\t\t\t\t\t\t\tconst bccList = additionalFields.bccList as IDataObject[];\n\n\t\t\t\t\t\t\tbccList.forEach((email) => {\n\t\t\t\t\t\t\t\tbccStr += `<${email}>, `;\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (additionalFields.attachmentsUi) {\n\t\t\t\t\t\t\tconst attachmentsUi = additionalFields.attachmentsUi as IDataObject;\n\t\t\t\t\t\t\tconst attachmentsBinary = [];\n\t\t\t\t\t\t\tif (!isEmpty(attachmentsUi)) {\n\t\t\t\t\t\t\t\tif (!isEmpty(attachmentsUi)) {\n\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\tattachmentsUi.hasOwnProperty('attachmentsBinary') &&\n\t\t\t\t\t\t\t\t\t\t!isEmpty(attachmentsUi.attachmentsBinary) &&\n\t\t\t\t\t\t\t\t\t\titems[i].binary\n\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\tfor (const { property } of attachmentsUi.attachmentsBinary as IDataObject[]) {\n\t\t\t\t\t\t\t\t\t\t\tfor (const binaryProperty of (property as string).split(',')) {\n\t\t\t\t\t\t\t\t\t\t\t\tconst binaryData = this.helpers.assertBinaryData(i, binaryProperty);\n\t\t\t\t\t\t\t\t\t\t\t\tconst binaryDataBuffer = await this.helpers.getBinaryDataBuffer(\n\t\t\t\t\t\t\t\t\t\t\t\t\ti,\n\t\t\t\t\t\t\t\t\t\t\t\t\tbinaryProperty,\n\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\tattachmentsBinary.push({\n\t\t\t\t\t\t\t\t\t\t\t\t\tname: binaryData.fileName || 'unknown',\n\t\t\t\t\t\t\t\t\t\t\t\t\tcontent: binaryDataBuffer,\n\t\t\t\t\t\t\t\t\t\t\t\t\ttype: binaryData.mimeType,\n\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tqs = {\n\t\t\t\t\t\t\t\t\tuserId: 'me',\n\t\t\t\t\t\t\t\t\tuploadType: 'media',\n\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\tattachmentsList = attachmentsBinary;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst email: IEmail = {\n\t\t\t\t\t\t\tto: toStr,\n\t\t\t\t\t\t\tcc: ccStr,\n\t\t\t\t\t\t\tbcc: bccStr,\n\t\t\t\t\t\t\tsubject: this.getNodeParameter('subject', i) as string,\n\t\t\t\t\t\t\tbody: this.getNodeParameter('message', i) as string,\n\t\t\t\t\t\t\tattachments: attachmentsList,\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tif (this.getNodeParameter('includeHtml', i, false) as boolean) {\n\t\t\t\t\t\t\temail.htmlBody = this.getNodeParameter('htmlMessage', i) as string;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tendpoint = '/gmail/v1/users/me/drafts';\n\t\t\t\t\t\tmethod = 'POST';\n\n\t\t\t\t\t\tbody = {\n\t\t\t\t\t\t\tmessage: {\n\t\t\t\t\t\t\t\traw: await encodeEmail(email),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tresponseData = await googleApiRequest.call(this, method, endpoint, body, qs);\n\t\t\t\t\t}\n\t\t\t\t\tif (operation === 'get') {\n\t\t\t\t\t\t// https://developers.google.com/gmail/api/v1/reference/users/drafts/get\n\t\t\t\t\t\tmethod = 'GET';\n\t\t\t\t\t\tconst id = this.getNodeParameter('messageId', i);\n\n\t\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i);\n\t\t\t\t\t\tconst format = additionalFields.format || 'resolved';\n\n\t\t\t\t\t\tif (format === 'resolved') {\n\t\t\t\t\t\t\tqs.format = 'raw';\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tqs.format = format;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tendpoint = `/gmail/v1/users/me/drafts/${id}`;\n\n\t\t\t\t\t\tresponseData = await googleApiRequest.call(this, method, endpoint, body, qs);\n\n\t\t\t\t\t\tconst binaryData: IBinaryKeyData = {};\n\n\t\t\t\t\t\tlet nodeExecutionData: INodeExecutionData;\n\t\t\t\t\t\tif (format === 'resolved') {\n\t\t\t\t\t\t\tconst dataPropertyNameDownload =\n\t\t\t\t\t\t\t\t(additionalFields.dataPropertyAttachmentsPrefixName as string) || 'attachment_';\n\n\t\t\t\t\t\t\tnodeExecutionData = await parseRawEmail.call(\n\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\tresponseData.message,\n\t\t\t\t\t\t\t\tdataPropertyNameDownload,\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t// Add the draft-id\n\t\t\t\t\t\t\tnodeExecutionData.json.messageId = nodeExecutionData.json.id;\n\t\t\t\t\t\t\tnodeExecutionData.json.id = responseData.id;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tnodeExecutionData = {\n\t\t\t\t\t\t\t\tjson: responseData,\n\t\t\t\t\t\t\t\tbinary: Object.keys(binaryData).length ? binaryData : undefined,\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = nodeExecutionData;\n\t\t\t\t\t}\n\t\t\t\t\tif (operation === 'delete') {\n\t\t\t\t\t\t// https://developers.google.com/gmail/api/v1/reference/users/drafts/delete\n\t\t\t\t\t\tmethod = 'DELETE';\n\t\t\t\t\t\tconst id = this.getNodeParameter('messageId', i);\n\n\t\t\t\t\t\tendpoint = `/gmail/v1/users/me/drafts/${id}`;\n\n\t\t\t\t\t\tresponseData = await googleApiRequest.call(this, method, endpoint, body, qs);\n\n\t\t\t\t\t\tresponseData = { success: true };\n\t\t\t\t\t}\n\t\t\t\t\tif (operation === 'getAll') {\n\t\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', i);\n\t\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i);\n\t\t\t\t\t\tObject.assign(qs, additionalFields);\n\n\t\t\t\t\t\tif (returnAll) {\n\t\t\t\t\t\t\tresponseData = await googleApiRequestAllItems.call(\n\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t'drafts',\n\t\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t\t'/gmail/v1/users/me/drafts',\n\t\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tqs.maxResults = this.getNodeParameter('limit', i);\n\t\t\t\t\t\t\tresponseData = await googleApiRequest.call(\n\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t\t'/gmail/v1/users/me/drafts',\n\t\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tresponseData = responseData.drafts;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (responseData === undefined) {\n\t\t\t\t\t\t\tresponseData = [];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst format = additionalFields.format || 'resolved';\n\n\t\t\t\t\t\tif (format !== 'ids') {\n\t\t\t\t\t\t\tif (format === 'resolved') {\n\t\t\t\t\t\t\t\tqs.format = 'raw';\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tqs.format = format;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tfor (let index = 0; index < responseData.length; index++) {\n\t\t\t\t\t\t\t\tresponseData[index] = await googleApiRequest.call(\n\t\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t\t\t`/gmail/v1/users/me/drafts/${responseData[index].id}`,\n\t\t\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\tif (format === 'resolved') {\n\t\t\t\t\t\t\t\t\tconst dataPropertyNameDownload =\n\t\t\t\t\t\t\t\t\t\t(additionalFields.dataPropertyAttachmentsPrefixName as string) || 'attachment_';\n\t\t\t\t\t\t\t\t\tconst id = responseData[index].id;\n\t\t\t\t\t\t\t\t\tresponseData[index] = await parseRawEmail.call(\n\t\t\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t\t\tresponseData[index].message,\n\t\t\t\t\t\t\t\t\t\tdataPropertyNameDownload,\n\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t// Add the draft-id\n\t\t\t\t\t\t\t\t\tresponseData[index].json.messageId = responseData[index].json.id;\n\t\t\t\t\t\t\t\t\tresponseData[index].json.id = id;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (format !== 'resolved') {\n\t\t\t\t\t\t\tresponseData = this.helpers.returnJsonArray(responseData as IDataObject[]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t);\n\n\t\t\t\treturnData.push(...executionData);\n\t\t\t} catch (error) {\n\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\treturnData.push({ json: { error: error.message } });\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\t\treturn [returnData];\n\t}\n}\n"],"mappings":"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","names":["email","isEmpty"]}