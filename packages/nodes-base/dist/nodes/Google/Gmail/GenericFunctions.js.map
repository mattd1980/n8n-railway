{"version":3,"sources":["../../../../nodes/Google/Gmail/GenericFunctions.ts"],"sourcesContent":["import isEmpty from 'lodash/isEmpty';\nimport { DateTime } from 'luxon';\nimport { simpleParser } from 'mailparser';\nimport type {\n\tIBinaryKeyData,\n\tIDataObject,\n\tIExecuteFunctions,\n\tIHttpRequestMethods,\n\tILoadOptionsFunctions,\n\tINode,\n\tINodeExecutionData,\n\tINodePropertyOptions,\n\tIPollFunctions,\n\tIRequestOptions,\n\tJsonObject,\n} from 'n8n-workflow';\nimport { NodeApiError, NodeOperationError } from 'n8n-workflow';\nimport MailComposer from 'nodemailer/lib/mail-composer';\n\nimport type { IEmail } from '../../../utils/sendAndWait/interfaces';\nimport { createUtmCampaignLink, escapeHtml } from '../../../utils/utilities';\nimport { getGoogleAccessToken } from '../GenericFunctions';\n\nexport interface IAttachments {\n\ttype: string;\n\tname: string;\n\tcontent: string;\n}\n\nexport async function googleApiRequest(\n\tthis: IExecuteFunctions | ILoadOptionsFunctions | IPollFunctions,\n\tmethod: IHttpRequestMethods,\n\tendpoint: string,\n\tbody: IDataObject = {},\n\tqs: IDataObject = {},\n\turi?: string,\n\toption: IDataObject = {},\n) {\n\tlet options: IRequestOptions = {\n\t\theaders: {\n\t\t\tAccept: 'application/json',\n\t\t\t'Content-Type': 'application/json',\n\t\t},\n\t\tmethod,\n\t\tbody,\n\t\tqs,\n\t\turi: uri || `https://www.googleapis.com${endpoint}`,\n\t\tqsStringifyOptions: {\n\t\t\tarrayFormat: 'repeat',\n\t\t},\n\t\tjson: true,\n\t};\n\n\toptions = Object.assign({}, options, option);\n\n\ttry {\n\t\tif (Object.keys(body).length === 0) {\n\t\t\tdelete options.body;\n\t\t}\n\n\t\tlet credentialType = 'gmailOAuth2';\n\t\tconst authentication = this.getNodeParameter('authentication', 0) as string;\n\n\t\tif (authentication === 'serviceAccount') {\n\t\t\tconst credentials = await this.getCredentials('googleApi');\n\t\t\tcredentialType = 'googleApi';\n\n\t\t\tconst { access_token } = await getGoogleAccessToken.call(this, credentials, 'gmail');\n\n\t\t\t(options.headers as IDataObject).Authorization = `Bearer ${access_token}`;\n\t\t}\n\n\t\tconst response = await this.helpers.requestWithAuthentication.call(\n\t\t\tthis,\n\t\t\tcredentialType,\n\t\t\toptions,\n\t\t);\n\t\treturn response;\n\t} catch (error) {\n\t\tif (error.code === 'ERR_OSSL_PEM_NO_START_LINE') {\n\t\t\terror.statusCode = '401';\n\t\t}\n\n\t\tif (error.httpCode === '400') {\n\t\t\tif (error.cause && ((error.cause.message as string) || '').includes('Invalid id value')) {\n\t\t\t\tconst resource = this.getNodeParameter('resource', 0) as string;\n\t\t\t\tconst errorOptions = {\n\t\t\t\t\tmessage: `Invalid ${resource} ID`,\n\t\t\t\t\tdescription: `${\n\t\t\t\t\t\tresource.charAt(0).toUpperCase() + resource.slice(1)\n\t\t\t\t\t} IDs should look something like this: 182b676d244938bd`,\n\t\t\t\t};\n\t\t\t\tthrow new NodeApiError(this.getNode(), error as JsonObject, errorOptions);\n\t\t\t}\n\t\t}\n\n\t\tif (error.httpCode === '404') {\n\t\t\tlet resource = this.getNodeParameter('resource', 0) as string;\n\t\t\tif (resource === 'label') {\n\t\t\t\tresource = 'label ID';\n\t\t\t}\n\t\t\tconst errorOptions = {\n\t\t\t\tmessage: `${resource.charAt(0).toUpperCase() + resource.slice(1)} not found`,\n\t\t\t\tdescription: '',\n\t\t\t};\n\t\t\tthrow new NodeApiError(this.getNode(), error as JsonObject, errorOptions);\n\t\t}\n\n\t\tif (error.httpCode === '409') {\n\t\t\tconst resource = this.getNodeParameter('resource', 0) as string;\n\t\t\tif (resource === 'label') {\n\t\t\t\tconst errorOptions = {\n\t\t\t\t\tmessage: 'Label name exists already',\n\t\t\t\t\tdescription: '',\n\t\t\t\t};\n\t\t\t\tthrow new NodeApiError(this.getNode(), error as JsonObject, errorOptions);\n\t\t\t}\n\t\t}\n\n\t\tif (error.code === 'EAUTH') {\n\t\t\tconst errorOptions = {\n\t\t\t\tmessage: error?.body?.error_description || 'Authorization error',\n\t\t\t\tdescription: (error as Error).message,\n\t\t\t};\n\t\t\tthrow new NodeApiError(this.getNode(), error as JsonObject, errorOptions);\n\t\t}\n\n\t\tif (\n\t\t\t((error.message as string) || '').includes('Bad request - please check your parameters') &&\n\t\t\terror.description\n\t\t) {\n\t\t\tconst errorOptions = {\n\t\t\t\tmessage: error.description,\n\t\t\t\tdescription: '',\n\t\t\t};\n\t\t\tthrow new NodeApiError(this.getNode(), error as JsonObject, errorOptions);\n\t\t}\n\n\t\tthrow new NodeApiError(this.getNode(), error as JsonObject, {\n\t\t\tmessage: error.message,\n\t\t\tdescription: error.description,\n\t\t});\n\t}\n}\n\nexport async function parseRawEmail(\n\tthis: IExecuteFunctions | IPollFunctions,\n\n\tmessageData: any,\n\tdataPropertyNameDownload: string,\n): Promise<INodeExecutionData> {\n\tconst messageEncoded = Buffer.from(messageData.raw as string, 'base64').toString('utf8');\n\tconst responseData = await simpleParser(messageEncoded);\n\n\tconst headers: IDataObject = {};\n\tfor (const header of responseData.headerLines) {\n\t\theaders[header.key] = header.line;\n\t}\n\n\tconst binaryData: IBinaryKeyData = {};\n\tif (responseData.attachments) {\n\t\tconst downloadAttachments = this.getNodeParameter(\n\t\t\t'options.downloadAttachments',\n\t\t\t0,\n\t\t\tfalse,\n\t\t) as boolean;\n\t\tif (downloadAttachments) {\n\t\t\tfor (let i = 0; i < responseData.attachments.length; i++) {\n\t\t\t\tconst attachment = responseData.attachments[i];\n\t\t\t\tbinaryData[`${dataPropertyNameDownload}${i}`] = await this.helpers.prepareBinaryData(\n\t\t\t\t\tattachment.content,\n\t\t\t\t\tattachment.filename,\n\t\t\t\t\tattachment.contentType,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tconst mailBaseData: IDataObject = {};\n\n\tconst resolvedModeAddProperties = ['id', 'threadId', 'labelIds', 'sizeEstimate'];\n\n\tfor (const key of resolvedModeAddProperties) {\n\t\tmailBaseData[key] = messageData[key];\n\t}\n\n\tconst json = Object.assign({}, mailBaseData, responseData, {\n\t\theaders,\n\t\theaderLines: undefined,\n\t\tattachments: undefined,\n\t\t// Having data in IDataObjects that is not representable in JSON leads to\n\t\t// inconsistencies between test executions and production executions.\n\t\t// During a manual execution this would be stringified and during a\n\t\t// production execution the next node would receive a date instance.\n\t\tdate: responseData.date ? responseData.date.toISOString() : responseData.date,\n\t}) as IDataObject;\n\n\treturn {\n\t\tjson,\n\t\tbinary: Object.keys(binaryData).length ? binaryData : undefined,\n\t} as INodeExecutionData;\n}\n\n//------------------------------------------------------------------------------------------------------------------------------------------\n// This function converts an email object into a MIME encoded email and then converts that string into base64 encoding\n// for more info on MIME, https://docs.microsoft.com/en-us/previous-versions/office/developer/exchange-server-2010/aa494197(v%3Dexchg.140)\n//------------------------------------------------------------------------------------------------------------------------------------------\n\nexport async function encodeEmail(email: IEmail) {\n\t// https://nodemailer.com/extras/mailcomposer/#e-mail-message-fields\n\tconst mailOptions = {\n\t\tfrom: email.from,\n\t\tto: email.to,\n\t\tcc: email.cc,\n\t\tbcc: email.bcc,\n\t\treplyTo: email.replyTo,\n\t\tinReplyTo: email.inReplyTo,\n\t\treferences: email.reference,\n\t\tsubject: email.subject,\n\t\ttext: email.body,\n\t\tkeepBcc: true,\n\t} as IDataObject;\n\n\tif (email.htmlBody) {\n\t\tmailOptions.html = email.htmlBody;\n\t}\n\n\tif (\n\t\temail.attachments !== undefined &&\n\t\tArray.isArray(email.attachments) &&\n\t\temail.attachments.length > 0\n\t) {\n\t\tconst attachments = email.attachments.map((attachment) => ({\n\t\t\tfilename: attachment.name,\n\t\t\tcontent: attachment.content,\n\t\t\tcontentType: attachment.type,\n\t\t\tencoding: 'base64',\n\t\t}));\n\n\t\tmailOptions.attachments = attachments;\n\t}\n\n\tconst mail = new MailComposer(mailOptions).compile();\n\n\t// by default the bcc headers are deleted when the mail is built.\n\t// So add keepBcc flag to override such behaviour. Only works when\n\t// the flag is set after the compilation.\n\t// @ts-expect-error - https://nodemailer.com/extras/mailcomposer/#bcc\n\tmail.keepBcc = true;\n\n\tconst mailBody = await mail.build();\n\n\treturn mailBody.toString('base64').replace(/\\+/g, '-').replace(/\\//g, '_');\n}\n\nexport async function googleApiRequestAllItems(\n\tthis: IExecuteFunctions | ILoadOptionsFunctions | IPollFunctions,\n\tpropertyName: string,\n\tmethod: IHttpRequestMethods,\n\tendpoint: string,\n\n\tbody: any = {},\n\tquery: IDataObject = {},\n): Promise<any> {\n\tconst returnData: IDataObject[] = [];\n\n\tlet responseData;\n\tquery.maxResults = 100;\n\n\tdo {\n\t\tresponseData = await googleApiRequest.call(this, method, endpoint, body as IDataObject, query);\n\t\tquery.pageToken = responseData.nextPageToken;\n\t\treturnData.push.apply(returnData, responseData[propertyName] as IDataObject[]);\n\t} while (responseData.nextPageToken !== undefined && responseData.nextPageToken !== '');\n\n\treturn returnData;\n}\n\nexport function extractEmail(s: string) {\n\tif (s.includes('<')) {\n\t\tconst data = s.split('<')[1];\n\t\treturn data.substring(0, data.length - 1);\n\t}\n\treturn s;\n}\n\nexport const prepareTimestamp = (\n\tnode: INode,\n\titemIndex: number,\n\tquery: string,\n\tdateValue: string | number | DateTime,\n\tlabel: 'after' | 'before',\n) => {\n\tif (dateValue instanceof DateTime) {\n\t\tdateValue = dateValue.toISO();\n\t}\n\n\tlet timestamp = DateTime.fromISO(dateValue as string).toSeconds();\n\tconst timestampLengthInMilliseconds1990 = 12;\n\n\tif (typeof timestamp === 'number') {\n\t\ttimestamp = Math.round(timestamp);\n\t}\n\n\tif (\n\t\t!timestamp &&\n\t\ttypeof dateValue === 'number' &&\n\t\tdateValue.toString().length < timestampLengthInMilliseconds1990\n\t) {\n\t\ttimestamp = dateValue;\n\t}\n\n\tif (!timestamp && (dateValue as string).length < timestampLengthInMilliseconds1990) {\n\t\ttimestamp = parseInt(dateValue as string, 10);\n\t}\n\n\tif (!timestamp) {\n\t\ttimestamp = Math.floor(DateTime.fromMillis(parseInt(dateValue as string, 10)).toSeconds());\n\t}\n\n\tif (!timestamp) {\n\t\tconst description = `'${dateValue}' isn't a valid date and time. If you're using an expression, be sure to set an ISO date string or a timestamp.`;\n\t\tthrow new NodeOperationError(\n\t\t\tnode,\n\t\t\t`Invalid date/time in 'Received ${label[0].toUpperCase() + label.slice(1)}' field`,\n\t\t\t{\n\t\t\t\tdescription,\n\t\t\t\titemIndex,\n\t\t\t},\n\t\t);\n\t}\n\n\tif (query) {\n\t\tquery += ` ${label}:${timestamp}`;\n\t} else {\n\t\tquery = `${label}:${timestamp}`;\n\t}\n\treturn query;\n};\n\nexport function prepareQuery(\n\tthis: IExecuteFunctions | ILoadOptionsFunctions | IPollFunctions,\n\tfields: IDataObject,\n\titemIndex: number,\n) {\n\tconst qs: IDataObject = { ...fields };\n\tif (qs.labelIds) {\n\t\tif (qs.labelIds === '') {\n\t\t\tdelete qs.labelIds;\n\t\t} else {\n\t\t\tqs.labelIds = qs.labelIds as string[];\n\t\t}\n\t}\n\n\tif (qs.sender) {\n\t\tif (qs.q) {\n\t\t\tqs.q += ` from:${qs.sender}`;\n\t\t} else {\n\t\t\tqs.q = `from:${qs.sender}`;\n\t\t}\n\t\tdelete qs.sender;\n\t}\n\n\tif (qs.readStatus && qs.readStatus !== 'both') {\n\t\tif (qs.q) {\n\t\t\tqs.q += ` is:${qs.readStatus}`;\n\t\t} else {\n\t\t\tqs.q = `is:${qs.readStatus}`;\n\t\t}\n\t\tdelete qs.readStatus;\n\t}\n\n\tif (qs.receivedAfter) {\n\t\tqs.q = prepareTimestamp(\n\t\t\tthis.getNode(),\n\t\t\titemIndex,\n\t\t\tqs.q as string,\n\t\t\tqs.receivedAfter as string,\n\t\t\t'after',\n\t\t);\n\t\tdelete qs.receivedAfter;\n\t}\n\n\tif (qs.receivedBefore) {\n\t\tqs.q = prepareTimestamp(\n\t\t\tthis.getNode(),\n\t\t\titemIndex,\n\t\t\tqs.q as string,\n\t\t\tqs.receivedBefore as string,\n\t\t\t'before',\n\t\t);\n\t\tdelete qs.receivedBefore;\n\t}\n\n\treturn qs;\n}\n\nexport function prepareEmailsInput(\n\tthis: IExecuteFunctions | ILoadOptionsFunctions,\n\tinput: string,\n\tfieldName: string,\n\titemIndex: number,\n) {\n\tlet emails = '';\n\n\tinput.split(',').forEach((entry) => {\n\t\tconst email = entry.trim();\n\n\t\tif (email.indexOf('@') === -1) {\n\t\t\tconst description = `The email address '${email}' in the '${fieldName}' field isn't valid`;\n\t\t\tthrow new NodeOperationError(this.getNode(), 'Invalid email address', {\n\t\t\t\tdescription,\n\t\t\t\titemIndex,\n\t\t\t});\n\t\t}\n\t\tif (email.includes('<') && email.includes('>')) {\n\t\t\temails += `${email},`;\n\t\t} else {\n\t\t\temails += `<${email}>, `;\n\t\t}\n\t});\n\n\treturn emails;\n}\n\nexport function prepareEmailBody(\n\tthis: IExecuteFunctions | ILoadOptionsFunctions,\n\titemIndex: number,\n\tappendAttribution = false,\n\tinstanceId?: string,\n) {\n\tconst emailType = this.getNodeParameter('emailType', itemIndex) as string;\n\tlet message = (this.getNodeParameter('message', itemIndex, '') as string).trim();\n\n\tif (appendAttribution) {\n\t\tconst attributionText = 'This email was sent automatically with ';\n\t\tconst link = createUtmCampaignLink('n8n-nodes-base.gmail', instanceId);\n\t\tif (emailType === 'html') {\n\t\t\tmessage = `\n\t\t\t${message}\n\t\t\t<br>\n\t\t\t<br>\n\t\t\t---\n\t\t\t<br>\n\t\t\t<em>${attributionText}<a href=\"${link}\" target=\"_blank\">n8n</a></em>\n\t\t\t`;\n\t\t} else {\n\t\t\tmessage = `${message}\\n\\n---\\n${attributionText}n8n\\n${'https://n8n.io'}`;\n\t\t}\n\t}\n\n\tconst body = {\n\t\tbody: '',\n\t\thtmlBody: '',\n\t};\n\n\tif (emailType === 'html') {\n\t\tbody.htmlBody = message;\n\t} else {\n\t\tbody.body = message;\n\t}\n\n\treturn body;\n}\n\nexport async function prepareEmailAttachments(\n\tthis: IExecuteFunctions,\n\toptions: IDataObject,\n\titemIndex: number,\n) {\n\tconst attachmentsList: IDataObject[] = [];\n\tconst attachments = options.attachmentsBinary as IDataObject[];\n\n\tif (attachments && !isEmpty(attachments)) {\n\t\tfor (const { property } of attachments) {\n\t\t\tfor (const name of (property as string).split(',')) {\n\t\t\t\tconst binaryData = this.helpers.assertBinaryData(itemIndex, name);\n\t\t\t\tconst binaryDataBuffer = await this.helpers.getBinaryDataBuffer(itemIndex, name);\n\n\t\t\t\tif (!Buffer.isBuffer(binaryDataBuffer)) {\n\t\t\t\t\tconst description = `The input field '${name}' doesn't contain an attachment. Please make sure you specify a field containing binary data`;\n\t\t\t\t\tthrow new NodeOperationError(this.getNode(), 'Attachment not found', {\n\t\t\t\t\t\tdescription,\n\t\t\t\t\t\titemIndex,\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tattachmentsList.push({\n\t\t\t\t\tname: binaryData.fileName || 'unknown',\n\t\t\t\t\tcontent: binaryDataBuffer,\n\t\t\t\t\ttype: binaryData.mimeType,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\treturn attachmentsList;\n}\n\nexport function unescapeSnippets(items: INodeExecutionData[]) {\n\tconst result = items.map((item) => {\n\t\tconst snippet = item.json.snippet as string;\n\t\tif (snippet) {\n\t\t\titem.json.snippet = escapeHtml(snippet);\n\t\t}\n\t\treturn item;\n\t});\n\treturn result;\n}\n\nexport async function replyToEmail(\n\tthis: IExecuteFunctions,\n\tgmailId: string,\n\toptions: IDataObject,\n\titemIndex: number,\n) {\n\tlet qs: IDataObject = {};\n\n\tlet cc = '';\n\tlet bcc = '';\n\n\tif (options.ccList) {\n\t\tcc = prepareEmailsInput.call(this, options.ccList as string, 'CC', itemIndex);\n\t}\n\n\tif (options.bccList) {\n\t\tbcc = prepareEmailsInput.call(this, options.bccList as string, 'BCC', itemIndex);\n\t}\n\tlet attachments: IDataObject[] = [];\n\tif (options.attachmentsUi) {\n\t\tattachments = await prepareEmailAttachments.call(\n\t\t\tthis,\n\t\t\toptions.attachmentsUi as IDataObject,\n\t\t\titemIndex,\n\t\t);\n\t\tif (attachments.length) {\n\t\t\tqs = {\n\t\t\t\tuserId: 'me',\n\t\t\t\tuploadType: 'media',\n\t\t\t};\n\t\t}\n\t}\n\n\tconst endpoint = `/gmail/v1/users/me/messages/${gmailId}`;\n\n\tqs.format = 'metadata';\n\n\tconst { payload, threadId } = await googleApiRequest.call(this, 'GET', endpoint, {}, qs);\n\n\tconst subject =\n\t\tpayload.headers.filter(\n\t\t\t(data: { [key: string]: string }) => data.name.toLowerCase() === 'subject',\n\t\t)[0]?.value || '';\n\n\tconst messageIdGlobal =\n\t\tpayload.headers.filter(\n\t\t\t(data: { [key: string]: string }) => data.name.toLowerCase() === 'message-id',\n\t\t)[0]?.value || '';\n\n\tconst { emailAddress } = await googleApiRequest.call(this, 'GET', '/gmail/v1/users/me/profile');\n\n\tlet to = '';\n\tconst replyToSenderOnly =\n\t\toptions.replyToSenderOnly === undefined ? false : (options.replyToSenderOnly as boolean);\n\n\tconst prepareEmailString = (email: string) => {\n\t\tif (email.includes(emailAddress as string)) return;\n\t\tif (email.includes('<') && email.includes('>')) {\n\t\t\tto += `${email}, `;\n\t\t} else {\n\t\t\tto += `<${email}>, `;\n\t\t}\n\t};\n\n\tfor (const header of payload.headers as IDataObject[]) {\n\t\tif (((header.name as string) || '').toLowerCase() === 'from') {\n\t\t\tconst from = header.value as string;\n\t\t\tif (from.includes('<') && from.includes('>')) {\n\t\t\t\tto += `${from}, `;\n\t\t\t} else {\n\t\t\t\tto += `<${from}>, `;\n\t\t\t}\n\t\t}\n\n\t\tif (((header.name as string) || '').toLowerCase() === 'to' && !replyToSenderOnly) {\n\t\t\tconst toEmails = header.value as string;\n\t\t\ttoEmails.split(',').forEach(prepareEmailString);\n\t\t}\n\t}\n\n\tlet from = '';\n\tif (options.senderName) {\n\t\tfrom = `${options.senderName as string} <${emailAddress}>`;\n\t}\n\n\tconst email: IEmail = {\n\t\tfrom,\n\t\tto,\n\t\tcc,\n\t\tbcc,\n\t\tsubject,\n\t\tattachments,\n\t\tinReplyTo: messageIdGlobal,\n\t\treference: messageIdGlobal,\n\t\t...prepareEmailBody.call(this, itemIndex),\n\t};\n\n\tconst body = {\n\t\traw: await encodeEmail(email),\n\t\tthreadId,\n\t};\n\n\treturn await googleApiRequest.call(this, 'POST', '/gmail/v1/users/me/messages/send', body, qs);\n}\n\nexport async function simplifyOutput(\n\tthis: IExecuteFunctions | IPollFunctions,\n\tdata: IDataObject[],\n) {\n\tconst labelsData = await googleApiRequest.call(this, 'GET', '/gmail/v1/users/me/labels');\n\tconst labels = ((labelsData.labels as IDataObject[]) || []).map(({ id, name }) => ({\n\t\tid,\n\t\tname,\n\t}));\n\treturn (data || []).map((item) => {\n\t\tif (item.labelIds) {\n\t\t\titem.labels = labels.filter((label) =>\n\t\t\t\t(item.labelIds as string[]).includes(label.id as string),\n\t\t\t);\n\t\t\tdelete item.labelIds;\n\t\t}\n\t\tif (item.payload && (item.payload as IDataObject).headers) {\n\t\t\tconst { headers } = item.payload as IDataObject;\n\t\t\t((headers as IDataObject[]) || []).forEach((header) => {\n\t\t\t\titem[header.name as string] = header.value;\n\t\t\t});\n\t\t\tdelete (item.payload as IDataObject).headers;\n\t\t}\n\t\treturn item;\n\t});\n}\n\n/**\n * Get all the labels to display them to user so that they can select them easily\n */\nexport async function getLabels(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\tconst returnData: INodePropertyOptions[] = [];\n\n\tconst labels = await googleApiRequestAllItems.call(\n\t\tthis,\n\t\t'labels',\n\t\t'GET',\n\t\t'/gmail/v1/users/me/labels',\n\t);\n\n\tfor (const label of labels) {\n\t\treturnData.push({\n\t\t\tname: label.name,\n\t\t\tvalue: label.id,\n\t\t});\n\t}\n\n\treturn returnData.sort((a, b) => {\n\t\tif (a.name < b.name) {\n\t\t\treturn -1;\n\t\t}\n\t\tif (a.name > b.name) {\n\t\t\treturn 1;\n\t\t}\n\t\treturn 0;\n\t});\n}\n"],"mappings":"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","names":["MailComposer","isEmpty","email","from"]}