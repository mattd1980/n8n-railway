{"version":3,"sources":["../../../../nodes/Google/BusinessProfile/GoogleBusinessProfileTrigger.node.ts"],"sourcesContent":["import {\n\tNodeApiError,\n\tNodeConnectionTypes,\n\ttype IPollFunctions,\n\ttype IDataObject,\n\ttype INodeExecutionData,\n\ttype INodeType,\n\ttype INodeTypeDescription,\n} from 'n8n-workflow';\n\nimport { googleApiRequest, searchAccounts, searchLocations } from './GenericFunctions';\n\nexport class GoogleBusinessProfileTrigger implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'Google Business Profile Trigger',\n\t\tname: 'googleBusinessProfileTrigger',\n\t\ticon: 'file:googleBusinessProfile.svg',\n\t\tgroup: ['trigger'],\n\t\tversion: 1,\n\t\tdescription:\n\t\t\t'Fetches reviews from Google Business Profile and starts the workflow on specified polling intervals.',\n\t\tsubtitle: '={{\"Google Business Profile Trigger\"}}',\n\t\tdefaults: {\n\t\t\tname: 'Google Business Profile Trigger',\n\t\t},\n\t\tcredentials: [\n\t\t\t{\n\t\t\t\tname: 'googleBusinessProfileOAuth2Api',\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t],\n\t\tpolling: true,\n\t\tinputs: [],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Event',\n\t\t\t\tname: 'event',\n\t\t\t\trequired: true,\n\t\t\t\ttype: 'options',\n\t\t\t\tnoDataExpression: true,\n\t\t\t\tdefault: 'reviewAdded',\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Review Added',\n\t\t\t\t\t\tvalue: 'reviewAdded',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Account',\n\t\t\t\tname: 'account',\n\t\t\t\trequired: true,\n\t\t\t\ttype: 'resourceLocator',\n\t\t\t\tdefault: { mode: 'list', value: '' },\n\t\t\t\tdescription: 'The Google Business Profile account',\n\t\t\t\tdisplayOptions: { show: { event: ['reviewAdded'] } },\n\t\t\t\tmodes: [\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'From list',\n\t\t\t\t\t\tname: 'list',\n\t\t\t\t\t\ttype: 'list',\n\t\t\t\t\t\ttypeOptions: {\n\t\t\t\t\t\t\tsearchListMethod: 'searchAccounts',\n\t\t\t\t\t\t\tsearchable: true,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'By name',\n\t\t\t\t\t\tname: 'name',\n\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\thint: 'Enter the account name',\n\t\t\t\t\t\tvalidation: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttype: 'regex',\n\t\t\t\t\t\t\t\tproperties: {\n\t\t\t\t\t\t\t\t\tregex: 'accounts/[0-9]+',\n\t\t\t\t\t\t\t\t\terrorMessage: 'The name must start with \"accounts/\"',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t\tplaceholder: 'e.g. accounts/0123456789',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Location',\n\t\t\t\tname: 'location',\n\t\t\t\trequired: true,\n\t\t\t\ttype: 'resourceLocator',\n\t\t\t\tdefault: { mode: 'list', value: '' },\n\t\t\t\tdescription: 'The specific location or business associated with the account',\n\t\t\t\tdisplayOptions: { show: { event: ['reviewAdded'] } },\n\t\t\t\tmodes: [\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'From list',\n\t\t\t\t\t\tname: 'list',\n\t\t\t\t\t\ttype: 'list',\n\t\t\t\t\t\ttypeOptions: {\n\t\t\t\t\t\t\tsearchListMethod: 'searchLocations',\n\t\t\t\t\t\t\tsearchable: true,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'By name',\n\t\t\t\t\t\tname: 'name',\n\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\thint: 'Enter the location name',\n\t\t\t\t\t\tvalidation: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttype: 'regex',\n\t\t\t\t\t\t\t\tproperties: {\n\t\t\t\t\t\t\t\t\tregex: 'locations/[0-9]+',\n\t\t\t\t\t\t\t\t\terrorMessage: 'The name must start with \"locations/\"',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t\tplaceholder: 'e.g. locations/0123456789',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t],\n\t};\n\n\tmethods = {\n\t\tlistSearch: {\n\t\t\tsearchAccounts,\n\t\t\tsearchLocations,\n\t\t},\n\t};\n\n\tasync poll(this: IPollFunctions): Promise<INodeExecutionData[][] | null> {\n\t\tconst nodeStaticData = this.getWorkflowStaticData('node');\n\t\tlet responseData;\n\t\tconst qs: IDataObject = {};\n\n\t\tconst account = (this.getNodeParameter('account') as { value: string; mode: string }).value;\n\t\tconst location = (this.getNodeParameter('location') as { value: string; mode: string }).value;\n\n\t\tconst manualMode = this.getMode() === 'manual';\n\t\tif (manualMode) {\n\t\t\tqs.pageSize = 1; // In manual mode we only want to fetch the latest review\n\t\t} else {\n\t\t\tqs.pageSize = 50; // Maximal page size for the get reviews endpoint\n\t\t}\n\n\t\ttry {\n\t\t\tresponseData = (await googleApiRequest.call(\n\t\t\t\tthis,\n\t\t\t\t'GET',\n\t\t\t\t`/${account}/${location}/reviews`,\n\t\t\t\t{},\n\t\t\t\tqs,\n\t\t\t)) as { reviews: IDataObject[]; totalReviewCount: number; nextPageToken?: string };\n\n\t\t\tif (manualMode) {\n\t\t\t\tresponseData = responseData.reviews;\n\t\t\t} else {\n\t\t\t\t// During the first execution there is no delta\n\t\t\t\tif (!nodeStaticData.totalReviewCountLastTimeChecked) {\n\t\t\t\t\tnodeStaticData.totalReviewCountLastTimeChecked = responseData.totalReviewCount;\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t\t// When count did't change the node shouldn't trigger\n\t\t\t\tif (\n\t\t\t\t\t!responseData?.reviews?.length ||\n\t\t\t\t\tnodeStaticData?.totalReviewCountLastTimeChecked === responseData?.totalReviewCount\n\t\t\t\t) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t\tconst numNewReviews =\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\tresponseData.totalReviewCount - nodeStaticData.totalReviewCountLastTimeChecked;\n\t\t\t\tnodeStaticData.totalReviewCountLastTimeChecked = responseData.totalReviewCount;\n\n\t\t\t\t// By default the reviews will be sorted by updateTime in descending order\n\t\t\t\t// Return only the delta reviews since last pooling\n\t\t\t\tresponseData = responseData.reviews.slice(0, numNewReviews);\n\t\t\t}\n\n\t\t\tif (Array.isArray(responseData) && responseData.length) {\n\t\t\t\treturn [this.helpers.returnJsonArray(responseData)];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t} catch (error) {\n\t\t\tthrow new NodeApiError(this.getNode(), error);\n\t\t}\n\t}\n}\n"],"mappings":"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","names":[]}