{"version":3,"sources":["../../../../nodes/Google/BusinessProfile/GenericFunctions.ts"],"sourcesContent":["import {\n\tNodeApiError,\n\tNodeOperationError,\n\ttype DeclarativeRestApiSettings,\n\ttype IDataObject,\n\ttype IExecutePaginationFunctions,\n\ttype IExecuteSingleFunctions,\n\ttype IHttpRequestMethods,\n\ttype IHttpRequestOptions,\n\ttype ILoadOptionsFunctions,\n\ttype IN8nHttpFullResponse,\n\ttype INodeExecutionData,\n\ttype INodeListSearchItems,\n\ttype INodeListSearchResult,\n\ttype IPollFunctions,\n\ttype JsonObject,\n} from 'n8n-workflow';\n\nimport type { ITimeInterval } from './Interfaces';\n\nconst addOptName = 'additionalOptions';\nconst possibleRootProperties = ['localPosts', 'reviews'];\n\nconst getAllParams = (execFns: IExecuteSingleFunctions): Record<string, unknown> => {\n\tconst params = execFns.getNode().parameters;\n\tconst additionalOptions = execFns.getNodeParameter(addOptName, {}) as Record<string, unknown>;\n\n\t// Merge standard parameters with additional options from the node parameters\n\treturn { ...params, ...additionalOptions };\n};\n\n/* Helper function to adjust date-time parameters for API requests */\nexport async function handleDatesPresend(\n\tthis: IExecuteSingleFunctions,\n\topts: IHttpRequestOptions,\n): Promise<IHttpRequestOptions> {\n\tconst params = getAllParams(this);\n\tconst body = Object.assign({}, opts.body) as IDataObject;\n\tconst event = (body.event as IDataObject) ?? ({} as IDataObject);\n\n\tif (!params.startDateTime && !params.startDate && !params.endDateTime && !params.endDate) {\n\t\treturn opts;\n\t}\n\n\tconst createDateTimeObject = (dateString: string) => {\n\t\tconst date = new Date(dateString);\n\t\treturn {\n\t\t\tdate: {\n\t\t\t\tyear: date.getUTCFullYear(),\n\t\t\t\tmonth: date.getUTCMonth() + 1,\n\t\t\t\tday: date.getUTCDate(),\n\t\t\t},\n\t\t\ttime: dateString.includes('T')\n\t\t\t\t? {\n\t\t\t\t\t\thours: date.getUTCHours(),\n\t\t\t\t\t\tminutes: date.getUTCMinutes(),\n\t\t\t\t\t\tseconds: date.getUTCSeconds(),\n\t\t\t\t\t\tnanos: 0,\n\t\t\t\t\t}\n\t\t\t\t: undefined,\n\t\t};\n\t};\n\n\t// Convert start and end date-time parameters if provided\n\tconst startDateTime =\n\t\tparams.startDateTime || params.startDate\n\t\t\t? createDateTimeObject((params.startDateTime || params.startDate) as string)\n\t\t\t: null;\n\tconst endDateTime =\n\t\tparams.endDateTime || params.endDate\n\t\t\t? createDateTimeObject((params.endDateTime || params.endDate) as string)\n\t\t\t: null;\n\n\tconst schedule: Partial<ITimeInterval> = {\n\t\tstartDate: startDateTime?.date,\n\t\tendDate: endDateTime?.date,\n\t\tstartTime: startDateTime?.time,\n\t\tendTime: endDateTime?.time,\n\t};\n\n\tevent.schedule = schedule;\n\tObject.assign(body, { event });\n\topts.body = body;\n\treturn opts;\n}\n\n/* Helper function adding update mask to the request */\nexport async function addUpdateMaskPresend(\n\tthis: IExecuteSingleFunctions,\n\topts: IHttpRequestOptions,\n): Promise<IHttpRequestOptions> {\n\tconst additionalOptions = this.getNodeParameter('additionalOptions') as IDataObject;\n\tconst propertyMapping: { [key: string]: string } = {\n\t\tpostType: 'topicType',\n\t\tactionType: 'actionType',\n\t\tcallToActionType: 'callToAction.actionType',\n\t\turl: 'callToAction.url',\n\t\tstartDateTime: 'event.schedule.startDate,event.schedule.startTime',\n\t\tendDateTime: 'event.schedule.endDate,event.schedule.endTime',\n\t\ttitle: 'event.title',\n\t\tstartDate: 'event.schedule.startDate',\n\t\tendDate: 'event.schedule.endDate',\n\t\tcouponCode: 'offer.couponCode',\n\t\tredeemOnlineUrl: 'offer.redeemOnlineUrl',\n\t\ttermsAndConditions: 'offer.termsAndConditions',\n\t};\n\n\tif (Object.keys(additionalOptions).length) {\n\t\tconst updateMask = Object.keys(additionalOptions)\n\t\t\t.map((key) => propertyMapping[key] || key)\n\t\t\t.join(',');\n\t\topts.qs = {\n\t\t\t...opts.qs,\n\t\t\tupdateMask,\n\t\t};\n\t}\n\n\treturn opts;\n}\n\n/* Helper function to handle pagination */\nexport async function handlePagination(\n\tthis: IExecutePaginationFunctions,\n\tresultOptions: DeclarativeRestApiSettings.ResultOptions,\n): Promise<INodeExecutionData[]> {\n\tconst aggregatedResult: IDataObject[] = [];\n\tlet nextPageToken: string | undefined;\n\tconst returnAll = this.getNodeParameter('returnAll') as boolean;\n\tlet limit = 100;\n\tif (!returnAll) {\n\t\tlimit = this.getNodeParameter('limit') as number;\n\t\tresultOptions.maxResults = limit;\n\t}\n\tresultOptions.paginate = true;\n\n\tdo {\n\t\tif (nextPageToken) {\n\t\t\tresultOptions.options.qs = { ...resultOptions.options.qs, pageToken: nextPageToken };\n\t\t}\n\n\t\tconst responseData = await this.makeRoutingRequest(resultOptions);\n\n\t\tfor (const page of responseData) {\n\t\t\tfor (const prop of possibleRootProperties) {\n\t\t\t\tif (page.json[prop]) {\n\t\t\t\t\tconst currentData = page.json[prop] as IDataObject[];\n\t\t\t\t\taggregatedResult.push(...currentData);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!returnAll && aggregatedResult.length >= limit) {\n\t\t\t\treturn aggregatedResult.slice(0, limit).map((item) => ({ json: item }));\n\t\t\t}\n\n\t\t\tnextPageToken = page.json.nextPageToken as string | undefined;\n\t\t}\n\t} while (nextPageToken);\n\n\treturn aggregatedResult.map((item) => ({ json: item }));\n}\n\n/* Helper functions to handle errors */\n\nexport async function handleErrorsDeletePost(\n\tthis: IExecuteSingleFunctions,\n\tdata: INodeExecutionData[],\n\tresponse: IN8nHttpFullResponse,\n): Promise<INodeExecutionData[]> {\n\tif (response.statusCode < 200 || response.statusCode >= 300) {\n\t\tconst post = this.getNodeParameter('post', undefined) as IDataObject;\n\n\t\t// Provide a better error message\n\t\tif (post && response.statusCode === 404) {\n\t\t\tthrow new NodeOperationError(\n\t\t\t\tthis.getNode(),\n\t\t\t\t'The post you are deleting could not be found. Adjust the \"post\" parameter setting to delete the post correctly.',\n\t\t\t);\n\t\t}\n\n\t\tthrow new NodeApiError(this.getNode(), response.body as JsonObject, {\n\t\t\tmessage: response.statusMessage,\n\t\t\thttpCode: response.statusCode.toString(),\n\t\t});\n\t}\n\treturn data;\n}\n\nexport async function handleErrorsGetPost(\n\tthis: IExecuteSingleFunctions,\n\tdata: INodeExecutionData[],\n\tresponse: IN8nHttpFullResponse,\n): Promise<INodeExecutionData[]> {\n\tif (response.statusCode < 200 || response.statusCode >= 300) {\n\t\tconst post = this.getNodeParameter('post', undefined) as IDataObject;\n\n\t\t// Provide a better error message\n\t\tif (post && response.statusCode === 404) {\n\t\t\tthrow new NodeOperationError(\n\t\t\t\tthis.getNode(),\n\t\t\t\t'The post you are requesting could not be found. Adjust the \"post\" parameter setting to retrieve the post correctly.',\n\t\t\t);\n\t\t}\n\n\t\tthrow new NodeApiError(this.getNode(), response.body as JsonObject, {\n\t\t\tmessage: response.statusMessage,\n\t\t\thttpCode: response.statusCode.toString(),\n\t\t});\n\t}\n\treturn data;\n}\n\nexport async function handleErrorsUpdatePost(\n\tthis: IExecuteSingleFunctions,\n\tdata: INodeExecutionData[],\n\tresponse: IN8nHttpFullResponse,\n): Promise<INodeExecutionData[]> {\n\tif (response.statusCode < 200 || response.statusCode >= 300) {\n\t\tconst post = this.getNodeParameter('post') as IDataObject;\n\t\tconst additionalOptions = this.getNodeParameter('additionalOptions') as IDataObject;\n\n\t\t// Provide a better error message\n\t\tif (post && response.statusCode === 404) {\n\t\t\tthrow new NodeOperationError(\n\t\t\t\tthis.getNode(),\n\t\t\t\t'The post you are updating could not be found. Adjust the \"post\" parameter setting to update the post correctly.',\n\t\t\t);\n\t\t}\n\n\t\t// Do not throw an error if the user didn't set additional options (a hint will be shown)\n\t\tif (response.statusCode === 400 && Object.keys(additionalOptions).length === 0) {\n\t\t\treturn [{ json: { success: true } }];\n\t\t}\n\n\t\tthrow new NodeApiError(this.getNode(), response.body as JsonObject, {\n\t\t\tmessage: response.statusMessage,\n\t\t\thttpCode: response.statusCode.toString(),\n\t\t});\n\t}\n\treturn data;\n}\n\nexport async function handleErrorsDeleteReply(\n\tthis: IExecuteSingleFunctions,\n\tdata: INodeExecutionData[],\n\tresponse: IN8nHttpFullResponse,\n): Promise<INodeExecutionData[]> {\n\tif (response.statusCode < 200 || response.statusCode >= 300) {\n\t\tconst review = this.getNodeParameter('review', undefined) as IDataObject;\n\n\t\t// Provide a better error message\n\t\tif (review && response.statusCode === 404) {\n\t\t\tthrow new NodeOperationError(\n\t\t\t\tthis.getNode(),\n\t\t\t\t'The review you are deleting could not be found. Adjust the \"review\" parameter setting to update the review correctly.',\n\t\t\t);\n\t\t}\n\n\t\tthrow new NodeApiError(this.getNode(), response.body as JsonObject, {\n\t\t\tmessage: response.statusMessage,\n\t\t\thttpCode: response.statusCode.toString(),\n\t\t});\n\t}\n\treturn data;\n}\n\nexport async function handleErrorsGetReview(\n\tthis: IExecuteSingleFunctions,\n\tdata: INodeExecutionData[],\n\tresponse: IN8nHttpFullResponse,\n): Promise<INodeExecutionData[]> {\n\tif (response.statusCode < 200 || response.statusCode >= 300) {\n\t\tconst review = this.getNodeParameter('review', undefined) as IDataObject;\n\n\t\t// Provide a better error message\n\t\tif (review && response.statusCode === 404) {\n\t\t\tthrow new NodeOperationError(\n\t\t\t\tthis.getNode(),\n\t\t\t\t'The review you are requesting could not be found. Adjust the \"review\" parameter setting to update the review correctly.',\n\t\t\t);\n\t\t}\n\n\t\tthrow new NodeApiError(this.getNode(), response.body as JsonObject, {\n\t\t\tmessage: response.statusMessage,\n\t\t\thttpCode: response.statusCode.toString(),\n\t\t});\n\t}\n\treturn data;\n}\n\nexport async function handleErrorsReplyToReview(\n\tthis: IExecuteSingleFunctions,\n\tdata: INodeExecutionData[],\n\tresponse: IN8nHttpFullResponse,\n): Promise<INodeExecutionData[]> {\n\tif (response.statusCode < 200 || response.statusCode >= 300) {\n\t\tconst review = this.getNodeParameter('review', undefined) as IDataObject;\n\n\t\t// Provide a better error message\n\t\tif (review && response.statusCode === 404) {\n\t\t\tthrow new NodeOperationError(\n\t\t\t\tthis.getNode(),\n\t\t\t\t'The review you are replying to could not be found. Adjust the \"review\" parameter setting to reply to the review correctly.',\n\t\t\t);\n\t\t}\n\n\t\tthrow new NodeApiError(this.getNode(), response.body as JsonObject, {\n\t\t\tmessage: response.statusMessage,\n\t\t\thttpCode: response.statusCode.toString(),\n\t\t});\n\t}\n\treturn data;\n}\n\n/* Helper function used in listSearch methods */\nexport async function googleApiRequest(\n\tthis: ILoadOptionsFunctions | IPollFunctions,\n\tmethod: IHttpRequestMethods,\n\tresource: string,\n\tbody: IDataObject = {},\n\tqs: IDataObject = {},\n\turl?: string,\n): Promise<IDataObject> {\n\tconst options: IHttpRequestOptions = {\n\t\theaders: {\n\t\t\t'Content-Type': 'application/json',\n\t\t},\n\t\tmethod,\n\t\tbody,\n\t\tqs,\n\t\turl: url ?? `https://mybusiness.googleapis.com/v4${resource}`,\n\t\tjson: true,\n\t};\n\ttry {\n\t\tif (Object.keys(body).length === 0) {\n\t\t\tdelete options.body;\n\t\t}\n\n\t\treturn (await this.helpers.httpRequestWithAuthentication.call(\n\t\t\tthis,\n\t\t\t'googleBusinessProfileOAuth2Api',\n\t\t\toptions,\n\t\t)) as IDataObject;\n\t} catch (error) {\n\t\tthrow new NodeApiError(this.getNode(), error as JsonObject);\n\t}\n}\n\n/* listSearch methods */\n\nexport async function searchAccounts(\n\tthis: ILoadOptionsFunctions,\n\tfilter?: string,\n\tpaginationToken?: string,\n): Promise<INodeListSearchResult> {\n\t// Docs for this API call can be found here:\n\t// https://developers.google.com/my-business/reference/accountmanagement/rest/v1/accounts/list\n\tconst query: IDataObject = {};\n\tif (paginationToken) {\n\t\tquery.pageToken = paginationToken;\n\t}\n\n\tconst responseData: IDataObject = await googleApiRequest.call(\n\t\tthis,\n\t\t'GET',\n\t\t'',\n\t\t{},\n\t\t{\n\t\t\tpageSize: 20,\n\t\t\t...query,\n\t\t},\n\t\t'https://mybusinessaccountmanagement.googleapis.com/v1/accounts',\n\t);\n\n\tconst accounts = responseData.accounts as Array<{ name: string; accountName: string }>;\n\n\tconst results: INodeListSearchItems[] = accounts\n\t\t.map((a) => ({\n\t\t\tname: a.accountName,\n\t\t\tvalue: a.name,\n\t\t}))\n\t\t.filter(\n\t\t\t(a) =>\n\t\t\t\t!filter ||\n\t\t\t\ta.name.toLowerCase().includes(filter.toLowerCase()) ||\n\t\t\t\ta.value.toLowerCase().includes(filter.toLowerCase()),\n\t\t)\n\t\t.sort((a, b) => {\n\t\t\tif (a.name.toLowerCase() < b.name.toLowerCase()) return -1;\n\t\t\tif (a.name.toLowerCase() > b.name.toLowerCase()) return 1;\n\t\t\treturn 0;\n\t\t});\n\n\treturn { results, paginationToken: responseData.nextPageToken };\n}\n\nexport async function searchLocations(\n\tthis: ILoadOptionsFunctions,\n\tfilter?: string,\n\tpaginationToken?: string,\n): Promise<INodeListSearchResult> {\n\t// Docs for this API call can be found here:\n\t// https://developers.google.com/my-business/reference/businessinformation/rest/v1/accounts.locations/list\n\tconst query: IDataObject = {};\n\tif (paginationToken) {\n\t\tquery.pageToken = paginationToken;\n\t}\n\n\tconst account = (this.getNodeParameter('account') as IDataObject).value as string;\n\n\tconst responseData: IDataObject = await googleApiRequest.call(\n\t\tthis,\n\t\t'GET',\n\t\t'',\n\t\t{},\n\t\t{\n\t\t\treadMask: 'name',\n\t\t\tpageSize: 100,\n\t\t\t...query,\n\t\t},\n\t\t`https://mybusinessbusinessinformation.googleapis.com/v1/${account}/locations`,\n\t);\n\n\tconst locations = responseData.locations as Array<{ name: string }>;\n\n\tconst results: INodeListSearchItems[] = locations\n\t\t.map((a) => ({\n\t\t\tname: a.name,\n\t\t\tvalue: a.name,\n\t\t}))\n\t\t.filter((a) => !filter || a.name.toLowerCase().includes(filter.toLowerCase()))\n\t\t.sort((a, b) => {\n\t\t\tif (a.name.toLowerCase() < b.name.toLowerCase()) return -1;\n\t\t\tif (a.name.toLowerCase() > b.name.toLowerCase()) return 1;\n\t\t\treturn 0;\n\t\t});\n\n\treturn { results, paginationToken: responseData.nextPageToken };\n}\n\nexport async function searchReviews(\n\tthis: ILoadOptionsFunctions,\n\tfilter?: string,\n\tpaginationToken?: string,\n): Promise<INodeListSearchResult> {\n\tconst query: IDataObject = {};\n\tif (paginationToken) {\n\t\tquery.pageToken = paginationToken;\n\t}\n\n\tconst account = (this.getNodeParameter('account') as IDataObject).value as string;\n\tconst location = (this.getNodeParameter('location') as IDataObject).value as string;\n\n\tconst responseData: IDataObject = await googleApiRequest.call(\n\t\tthis,\n\t\t'GET',\n\t\t`/${account}/${location}/reviews`,\n\t\t{},\n\t\t{\n\t\t\tpageSize: 50,\n\t\t\t...query,\n\t\t},\n\t);\n\n\tconst reviews = responseData.reviews as Array<{ name: string; comment: string }>;\n\n\tconst results: INodeListSearchItems[] = reviews\n\t\t.map((a) => ({\n\t\t\tname: a.comment,\n\t\t\tvalue: a.name,\n\t\t}))\n\t\t.filter((a) => !filter || a.name.toLowerCase().includes(filter.toLowerCase()))\n\t\t.sort((a, b) => {\n\t\t\tif (a.name.toLowerCase() < b.name.toLowerCase()) return -1;\n\t\t\tif (a.name.toLowerCase() > b.name.toLowerCase()) return 1;\n\t\t\treturn 0;\n\t\t});\n\n\treturn { results, paginationToken: responseData.nextPageToken };\n}\n\nexport async function searchPosts(\n\tthis: ILoadOptionsFunctions,\n\tfilter?: string,\n\tpaginationToken?: string,\n): Promise<INodeListSearchResult> {\n\tconst query: IDataObject = {};\n\tif (paginationToken) {\n\t\tquery.pageToken = paginationToken;\n\t}\n\n\tconst account = (this.getNodeParameter('account') as IDataObject).value as string;\n\tconst location = (this.getNodeParameter('location') as IDataObject).value as string;\n\n\tconst responseData: IDataObject = await googleApiRequest.call(\n\t\tthis,\n\t\t'GET',\n\t\t`/${account}/${location}/localPosts`,\n\t\t{},\n\t\t{\n\t\t\tpageSize: 100,\n\t\t\t...query,\n\t\t},\n\t);\n\n\tconst localPosts = responseData.localPosts as Array<{ name: string; summary: string }>;\n\n\tconst results: INodeListSearchItems[] = localPosts\n\t\t.map((a) => ({\n\t\t\tname: a.summary,\n\t\t\tvalue: a.name,\n\t\t}))\n\t\t.filter((a) => !filter || a.name.toLowerCase().includes(filter.toLowerCase()))\n\t\t.sort((a, b) => {\n\t\t\tif (a.name.toLowerCase() < b.name.toLowerCase()) return -1;\n\t\t\tif (a.name.toLowerCase() > b.name.toLowerCase()) return 1;\n\t\t\treturn 0;\n\t\t});\n\n\treturn { results, paginationToken: responseData.nextPageToken };\n}\n"],"mappings":"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","names":[]}