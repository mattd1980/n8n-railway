{"version":3,"sources":["../../../../nodes/Google/Sheet/GoogleSheetsTrigger.utils.ts"],"sourcesContent":["import isEqual from 'lodash/isEqual';\nimport zip from 'lodash/zip';\nimport type { IDataObject, IPollFunctions } from 'n8n-workflow';\nimport * as XLSX from 'xlsx';\n\nimport type { SheetDataRow, SheetRangeData } from './v2/helpers/GoogleSheets.types';\nimport { apiRequest } from './v2/transport';\n\nexport const BINARY_MIME_TYPE = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet';\n\ntype DiffData = Array<{\n\trowIndex: number;\n\tprevious: SheetDataRow;\n\tcurrent: SheetDataRow;\n\tchangeType: string;\n}>;\n\nexport async function getRevisionFile(this: IPollFunctions, exportLink: string) {\n\tconst mimeType = BINARY_MIME_TYPE;\n\n\tconst response = await apiRequest.call(\n\t\tthis,\n\t\t'GET',\n\t\t'',\n\t\tundefined,\n\t\t{ mimeType },\n\t\texportLink,\n\t\tundefined,\n\t\t{\n\t\t\tresolveWithFullResponse: true,\n\t\t\tencoding: null,\n\t\t\tjson: false,\n\t\t},\n\t);\n\n\treturn Buffer.from(response.body as string);\n}\n\nexport function sheetBinaryToArrayOfArrays(\n\tdata: Buffer,\n\tsheetName: string,\n\trange: string | undefined,\n) {\n\tconst workbook = XLSX.read(data, { type: 'buffer', sheets: [sheetName] });\n\tconst sheet = workbook.Sheets[sheetName];\n\tconst sheetData: string[][] = sheet['!ref']\n\t\t? XLSX.utils.sheet_to_json(sheet, { header: 1, defval: '', range })\n\t\t: [];\n\n\tconst lastDataRowIndex = sheetData.reduce((lastRowIndex, row, rowIndex) => {\n\t\tif (row.some((cell) => cell !== '')) {\n\t\t\treturn rowIndex;\n\t\t}\n\t\treturn lastRowIndex;\n\t}, 0);\n\n\treturn sheetData.slice(0, lastDataRowIndex + 1);\n}\n\nexport function arrayOfArraysToJson(sheetData: SheetRangeData, columns: SheetDataRow) {\n\tconst returnData: IDataObject[] = [];\n\n\tfor (let rowIndex = 0; rowIndex < sheetData.length; rowIndex++) {\n\t\tconst rowData: IDataObject = {};\n\n\t\tfor (let columnIndex = 0; columnIndex < columns.length; columnIndex++) {\n\t\t\tconst columnName = columns[columnIndex];\n\t\t\tconst cellValue = sheetData[rowIndex][columnIndex] || '';\n\n\t\t\trowData[columnName] = cellValue;\n\t\t}\n\n\t\treturnData.push(rowData);\n\t}\n\n\treturn returnData;\n}\n\nconst getSpecificColumns = (\n\trow: SheetDataRow,\n\tselectedColumns: SheetDataRow,\n\tcolumns: SheetDataRow,\n) => {\n\treturn row ? selectedColumns.map((column) => row[columns.indexOf(column) - 1]) : [];\n};\n\nconst extractVersionData = (\n\tdata: DiffData,\n\tversion: 'previous' | 'current',\n\ttriggerEvent: string,\n) => {\n\tif (triggerEvent === 'anyUpdate') {\n\t\treturn data.map(({ [version]: entry, rowIndex, changeType }) =>\n\t\t\tentry ? [rowIndex, changeType, ...entry] : [rowIndex, changeType],\n\t\t);\n\t}\n\treturn data.map(({ [version]: entry, rowIndex }) => (entry ? [rowIndex, ...entry] : [rowIndex]));\n};\n\nexport function compareRevisions(\n\tprevious: SheetRangeData,\n\tcurrent: SheetRangeData,\n\tkeyRow: number,\n\tincludeInOutput: string,\n\tcolumnsToWatch: string[],\n\tdataStartIndex: number,\n\tevent: string,\n) {\n\tconst dataLength = current.length > previous.length ? current.length : previous.length;\n\n\tconst columnsRowIndex = keyRow - 1;\n\tconst columnsInCurrent = current[columnsRowIndex];\n\tconst columnsInPrevious = previous[columnsRowIndex];\n\n\tlet columns: SheetDataRow =\n\t\tevent === 'anyUpdate' ? ['row_number', 'change_type'] : ['row_number'];\n\tif (columnsInCurrent !== undefined && columnsInPrevious !== undefined) {\n\t\tcolumns =\n\t\t\tcolumnsInCurrent.length > columnsInPrevious.length\n\t\t\t\t? columns.concat(columnsInCurrent)\n\t\t\t\t: columns.concat(columnsInPrevious);\n\t} else if (columnsInCurrent !== undefined) {\n\t\tcolumns = columns.concat(columnsInCurrent);\n\t} else if (columnsInPrevious !== undefined) {\n\t\tcolumns = columns.concat(columnsInPrevious);\n\t}\n\n\tconst diffData: DiffData = [];\n\n\tfor (let i = dataStartIndex; i < dataLength; i++) {\n\t\tif (i === columnsRowIndex) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t// sheets API omits trailing empty columns, xlsx does not - so we need to pad the shorter array\n\t\tif (Array.isArray(current[i]) && Array.isArray(previous[i])) {\n\t\t\twhile (current[i].length < previous[i].length) {\n\t\t\t\tcurrent[i].push('');\n\t\t\t}\n\t\t}\n\n\t\t// if columnsToWatch is defined, only compare those columns\n\t\tif (columnsToWatch?.length) {\n\t\t\tconst currentRow = getSpecificColumns(current[i], columnsToWatch, columns);\n\t\t\tconst previousRow = getSpecificColumns(previous[i], columnsToWatch, columns);\n\n\t\t\tif (isEqual(currentRow, previousRow)) continue;\n\t\t} else {\n\t\t\tif (isEqual(current[i], previous[i])) continue;\n\t\t}\n\n\t\tif (event === 'rowUpdate' && (!previous[i] || previous[i].every((cell) => cell === '')))\n\t\t\tcontinue;\n\n\t\tlet changeType = 'updated';\n\t\tif (previous[i] === undefined) {\n\t\t\tprevious[i] = current[i].map(() => '');\n\t\t\tchangeType = 'added';\n\t\t}\n\n\t\tif (current[i] === undefined) continue;\n\n\t\tdiffData.push({\n\t\t\trowIndex: i + 1,\n\t\t\tprevious: previous[i],\n\t\t\tcurrent: current[i],\n\t\t\tchangeType,\n\t\t});\n\t}\n\n\tif (includeInOutput === 'old') {\n\t\treturn arrayOfArraysToJson(extractVersionData(diffData, 'previous', event), columns);\n\t}\n\tif (includeInOutput === 'both') {\n\t\tconst previousData = arrayOfArraysToJson(\n\t\t\textractVersionData(diffData, 'previous', event),\n\t\t\tcolumns,\n\t\t).map((row) => ({ previous: row }));\n\n\t\tconst currentData = arrayOfArraysToJson(\n\t\t\textractVersionData(diffData, 'current', event),\n\t\t\tcolumns,\n\t\t).map((row) => ({ current: row }));\n\n\t\tconst differences = currentData.map(({ current: currentRow }, index) => {\n\t\t\tconst { row_number, ...rest } = currentRow;\n\t\t\tconst returnData: IDataObject = {};\n\t\t\treturnData.row_number = row_number;\n\n\t\t\tObject.keys(rest).forEach((key) => {\n\t\t\t\tconst previousValue = previousData[index].previous[key];\n\t\t\t\tconst currentValue = currentRow[key];\n\n\t\t\t\tif (isEqual(previousValue, currentValue)) return;\n\n\t\t\t\treturnData[key] = {\n\t\t\t\t\tprevious: previousValue,\n\t\t\t\t\tcurrent: currentValue,\n\t\t\t\t};\n\t\t\t});\n\t\t\treturn { differences: returnData };\n\t\t});\n\n\t\treturn zip(previousData, currentData, differences).map((row) => Object.assign({}, ...row));\n\t}\n\n\treturn arrayOfArraysToJson(extractVersionData(diffData, 'current', event), columns);\n}\n"],"mappings":"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","names":["isEqual","zip"]}