{"version":3,"sources":["../../../../../nodes/Google/Sheet/v1/GoogleSheetsV1.node.ts"],"sourcesContent":["import type {\n\tIExecuteFunctions,\n\tICredentialsDecrypted,\n\tICredentialTestFunctions,\n\tIDataObject,\n\tILoadOptionsFunctions,\n\tINodeCredentialTestResult,\n\tINodeExecutionData,\n\tINodePropertyOptions,\n\tINodeType,\n\tINodeTypeBaseDescription,\n\tINodeTypeDescription,\n} from 'n8n-workflow';\nimport { NodeOperationError } from 'n8n-workflow';\n\nimport { googleApiRequest, hexToRgb } from './GenericFunctions';\nimport type {\n\tILookupValues,\n\tISheetUpdateData,\n\tIToDelete,\n\tValueInputOption,\n\tValueRenderOption,\n} from './GoogleSheet';\nimport { GoogleSheet } from './GoogleSheet';\nimport { versionDescription } from './versionDescription';\nimport { generatePairedItemData } from '../../../../utils/utilities';\nimport { getGoogleAccessToken } from '../../GenericFunctions';\n\nexport class GoogleSheetsV1 implements INodeType {\n\tdescription: INodeTypeDescription;\n\n\tconstructor(baseDescription: INodeTypeBaseDescription) {\n\t\tthis.description = {\n\t\t\t...baseDescription,\n\t\t\t...versionDescription,\n\t\t};\n\t}\n\n\tmethods = {\n\t\tloadOptions: {\n\t\t\t// Get all the sheets in a Spreadsheet\n\t\t\tasync getSheets(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst spreadsheetId = this.getCurrentNodeParameter('sheetId') as string;\n\n\t\t\t\tconst sheet = new GoogleSheet(spreadsheetId, this);\n\t\t\t\tconst responseData = await sheet.spreadsheetGetSheets();\n\n\t\t\t\tif (responseData === undefined) {\n\t\t\t\t\tthrow new NodeOperationError(this.getNode(), 'No data got returned');\n\t\t\t\t}\n\n\t\t\t\tconst returnData: INodePropertyOptions[] = [];\n\t\t\t\tfor (const entry of responseData.sheets!) {\n\t\t\t\t\tif (entry.properties!.sheetType !== 'GRID') {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\treturnData.push({\n\t\t\t\t\t\tname: entry.properties!.title as string,\n\t\t\t\t\t\tvalue: entry.properties!.sheetId as unknown as string,\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\treturn returnData;\n\t\t\t},\n\t\t},\n\t\tcredentialTest: {\n\t\t\tasync googleApiCredentialTest(\n\t\t\t\tthis: ICredentialTestFunctions,\n\t\t\t\tcredential: ICredentialsDecrypted,\n\t\t\t): Promise<INodeCredentialTestResult> {\n\t\t\t\ttry {\n\t\t\t\t\tconst tokenRequest = await getGoogleAccessToken.call(this, credential.data!, 'sheetV1');\n\n\t\t\t\t\tif (!tokenRequest.access_token) {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tstatus: 'Error',\n\t\t\t\t\t\t\tmessage: 'Could not generate a token from your private key.',\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t} catch (err) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tstatus: 'Error',\n\t\t\t\t\t\tmessage: `Private key validation failed: ${err.message}`,\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\tstatus: 'OK',\n\t\t\t\t\tmessage: 'Connection successful!',\n\t\t\t\t};\n\t\t\t},\n\t\t},\n\t};\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t\tconst operation = this.getNodeParameter('operation', 0);\n\t\tconst resource = this.getNodeParameter('resource', 0);\n\n\t\tif (resource === 'sheet') {\n\t\t\tconst spreadsheetId = this.getNodeParameter('sheetId', 0) as string;\n\n\t\t\tconst sheet = new GoogleSheet(spreadsheetId, this);\n\n\t\t\tlet range = '';\n\t\t\tif (!['create', 'delete', 'remove'].includes(operation)) {\n\t\t\t\trange = this.getNodeParameter('range', 0) as string;\n\t\t\t}\n\n\t\t\tconst options = this.getNodeParameter('options', 0, {});\n\n\t\t\tconst valueInputMode = (options.valueInputMode || 'RAW') as ValueInputOption;\n\t\t\tconst valueRenderMode = (options.valueRenderMode || 'UNFORMATTED_VALUE') as ValueRenderOption;\n\n\t\t\tif (operation === 'append') {\n\t\t\t\t// ----------------------------------\n\t\t\t\t//         append\n\t\t\t\t// ----------------------------------\n\t\t\t\ttry {\n\t\t\t\t\tconst keyRow = parseInt(this.getNodeParameter('keyRow', 0) as string, 10);\n\n\t\t\t\t\tconst items = this.getInputData();\n\n\t\t\t\t\tconst setData: IDataObject[] = [];\n\t\t\t\t\titems.forEach((item) => {\n\t\t\t\t\t\tsetData.push(item.json);\n\t\t\t\t\t});\n\n\t\t\t\t\tconst usePathForKeyRow = (options.usePathForKeyRow || false) as boolean;\n\n\t\t\t\t\t// Convert data into array format\n\t\t\t\t\tawait sheet.appendSheetData(\n\t\t\t\t\t\tsetData,\n\t\t\t\t\t\tsheet.encodeRange(range),\n\t\t\t\t\t\tkeyRow,\n\t\t\t\t\t\tvalueInputMode,\n\t\t\t\t\t\tusePathForKeyRow,\n\t\t\t\t\t);\n\n\t\t\t\t\t// TODO: Should add this data somewhere\n\t\t\t\t\t// TODO: Should have something like add metadata which does not get passed through\n\n\t\t\t\t\treturn [items];\n\t\t\t\t} catch (error) {\n\t\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\t\treturn [[{ json: { error: error.message } }]];\n\t\t\t\t\t}\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\t\t\t} else if (operation === 'clear') {\n\t\t\t\t// ----------------------------------\n\t\t\t\t//         clear\n\t\t\t\t// ----------------------------------\n\t\t\t\ttry {\n\t\t\t\t\tawait sheet.clearData(sheet.encodeRange(range));\n\n\t\t\t\t\tconst items = this.getInputData();\n\t\t\t\t\treturn [items];\n\t\t\t\t} catch (error) {\n\t\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\t\treturn [[{ json: { error: error.message } }]];\n\t\t\t\t\t}\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\t\t\t} else if (operation === 'create') {\n\t\t\t\tconst returnData: IDataObject[] = [];\n\n\t\t\t\tlet responseData;\n\t\t\t\tfor (let i = 0; i < this.getInputData().length; i++) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst sheetId = this.getNodeParameter('sheetId', i) as string;\n\t\t\t\t\t\tconst iterationOptions = this.getNodeParameter('options', i, {});\n\t\t\t\t\t\tconst simple = this.getNodeParameter('simple', 0) as boolean;\n\t\t\t\t\t\tconst properties = { ...iterationOptions };\n\n\t\t\t\t\t\tif (iterationOptions.tabColor) {\n\t\t\t\t\t\t\tconst { red, green, blue } = hexToRgb(iterationOptions.tabColor as string)!;\n\t\t\t\t\t\t\tproperties.tabColor = { red: red / 255, green: green / 255, blue: blue / 255 };\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst requests = [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\taddSheet: {\n\t\t\t\t\t\t\t\t\tproperties,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tresponseData = await googleApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'POST',\n\t\t\t\t\t\t\t`/v4/spreadsheets/${sheetId}:batchUpdate`,\n\t\t\t\t\t\t\t{ requests },\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tif (simple) {\n\t\t\t\t\t\t\tObject.assign(responseData, responseData.replies[0].addSheet.properties);\n\t\t\t\t\t\t\tdelete responseData.replies;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturnData.push(responseData as IDataObject);\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\t\t\treturnData.push({ error: error.message });\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow error;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn [this.helpers.returnJsonArray(returnData)];\n\t\t\t} else if (operation === 'delete') {\n\t\t\t\t// ----------------------------------\n\t\t\t\t//         delete\n\t\t\t\t// ----------------------------------\n\t\t\t\ttry {\n\t\t\t\t\tconst requests: IDataObject[] = [];\n\n\t\t\t\t\tconst toDelete = this.getNodeParameter('toDelete', 0) as IToDelete;\n\n\t\t\t\t\tconst deletePropertyToDimensions: IDataObject = {\n\t\t\t\t\t\tcolumns: 'COLUMNS',\n\t\t\t\t\t\trows: 'ROWS',\n\t\t\t\t\t};\n\n\t\t\t\t\tfor (const propertyName of Object.keys(deletePropertyToDimensions)) {\n\t\t\t\t\t\tif (toDelete[propertyName] !== undefined) {\n\t\t\t\t\t\t\ttoDelete[propertyName].forEach((entry) => {\n\t\t\t\t\t\t\t\trequests.push({\n\t\t\t\t\t\t\t\t\tdeleteDimension: {\n\t\t\t\t\t\t\t\t\t\trange: {\n\t\t\t\t\t\t\t\t\t\t\tsheetId: entry.sheetId,\n\t\t\t\t\t\t\t\t\t\t\tdimension: deletePropertyToDimensions[propertyName] as string,\n\t\t\t\t\t\t\t\t\t\t\tstartIndex: entry.startIndex,\n\t\t\t\t\t\t\t\t\t\t\tendIndex:\n\t\t\t\t\t\t\t\t\t\t\t\tparseInt(entry.startIndex.toString(), 10) +\n\t\t\t\t\t\t\t\t\t\t\t\tparseInt(entry.amount.toString(), 10),\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tawait sheet.spreadsheetBatchUpdate(requests);\n\n\t\t\t\t\tconst items = this.getInputData();\n\t\t\t\t\treturn [items];\n\t\t\t\t} catch (error) {\n\t\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\t\treturn [[{ json: { error: error.message } }]];\n\t\t\t\t\t}\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\t\t\t} else if (operation === 'lookup') {\n\t\t\t\t// ----------------------------------\n\t\t\t\t//         lookup\n\t\t\t\t// ----------------------------------\n\t\t\t\ttry {\n\t\t\t\t\tconst sheetData = await sheet.getData(sheet.encodeRange(range), valueRenderMode);\n\n\t\t\t\t\tif (sheetData === undefined) {\n\t\t\t\t\t\treturn [];\n\t\t\t\t\t}\n\n\t\t\t\t\tconst dataStartRow = parseInt(this.getNodeParameter('dataStartRow', 0) as string, 10);\n\t\t\t\t\tconst keyRow = parseInt(this.getNodeParameter('keyRow', 0) as string, 10);\n\n\t\t\t\t\tconst items = this.getInputData();\n\n\t\t\t\t\tconst lookupValues: ILookupValues[] = [];\n\t\t\t\t\tfor (let i = 0; i < items.length; i++) {\n\t\t\t\t\t\tlookupValues.push({\n\t\t\t\t\t\t\tlookupColumn: this.getNodeParameter('lookupColumn', i) as string,\n\t\t\t\t\t\t\tlookupValue: this.getNodeParameter('lookupValue', i) as string,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\tlet returnData = await sheet.lookupValues(\n\t\t\t\t\t\tsheetData,\n\t\t\t\t\t\tkeyRow,\n\t\t\t\t\t\tdataStartRow,\n\t\t\t\t\t\tlookupValues,\n\t\t\t\t\t\toptions.returnAllMatches as boolean | undefined,\n\t\t\t\t\t);\n\n\t\t\t\t\tif (returnData.length === 0 && options.continue && options.returnAllMatches) {\n\t\t\t\t\t\treturnData = [{}];\n\t\t\t\t\t} else if (\n\t\t\t\t\t\treturnData.length === 1 &&\n\t\t\t\t\t\tObject.keys(returnData[0]).length === 0 &&\n\t\t\t\t\t\t!options.continue &&\n\t\t\t\t\t\t!options.returnAllMatches\n\t\t\t\t\t) {\n\t\t\t\t\t\treturnData = [];\n\t\t\t\t\t}\n\n\t\t\t\t\tconst pairedItem = generatePairedItemData(items.length);\n\n\t\t\t\t\tconst lookupOutput = returnData.map((item) => {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tjson: item,\n\t\t\t\t\t\t\tpairedItem,\n\t\t\t\t\t\t};\n\t\t\t\t\t});\n\n\t\t\t\t\treturn [lookupOutput];\n\t\t\t\t} catch (error) {\n\t\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\t\treturn [this.helpers.returnJsonArray({ error: error.message })];\n\t\t\t\t\t}\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\t\t\t} else if (operation === 'read') {\n\t\t\t\t// ----------------------------------\n\t\t\t\t//         read\n\t\t\t\t// ----------------------------------\n\t\t\t\ttry {\n\t\t\t\t\tconst rawData = this.getNodeParameter('rawData', 0);\n\n\t\t\t\t\tconst sheetData = await sheet.getData(sheet.encodeRange(range), valueRenderMode);\n\n\t\t\t\t\tlet returnData: IDataObject[];\n\t\t\t\t\tif (!sheetData) {\n\t\t\t\t\t\treturnData = [];\n\t\t\t\t\t} else if (rawData) {\n\t\t\t\t\t\tconst dataProperty = this.getNodeParameter('dataProperty', 0) as string;\n\t\t\t\t\t\treturnData = [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t[dataProperty]: sheetData,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t];\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst dataStartRow = parseInt(this.getNodeParameter('dataStartRow', 0) as string, 10);\n\t\t\t\t\t\tconst keyRow = parseInt(this.getNodeParameter('keyRow', 0) as string, 10);\n\n\t\t\t\t\t\treturnData = sheet.structureArrayDataByColumn(sheetData, keyRow, dataStartRow);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (returnData.length === 0 && options.continue) {\n\t\t\t\t\t\treturnData = [{}];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn [this.helpers.returnJsonArray(returnData)];\n\t\t\t\t} catch (error) {\n\t\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\t\treturn [this.helpers.returnJsonArray({ error: error.message })];\n\t\t\t\t\t}\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\t\t\t} else if (operation === 'remove') {\n\t\t\t\tconst returnData: IDataObject[] = [];\n\n\t\t\t\tlet responseData;\n\t\t\t\tfor (let i = 0; i < this.getInputData().length; i++) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst id = this.getNodeParameter('id', i) as string;\n\t\t\t\t\t\tconst sheetId = this.getNodeParameter('sheetId', i) as string;\n\n\t\t\t\t\t\tconst requests = [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdeleteSheet: {\n\t\t\t\t\t\t\t\t\tsheetId: id,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tresponseData = await googleApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'POST',\n\t\t\t\t\t\t\t`/v4/spreadsheets/${sheetId}:batchUpdate`,\n\t\t\t\t\t\t\t{ requests },\n\t\t\t\t\t\t);\n\t\t\t\t\t\tdelete responseData.replies;\n\t\t\t\t\t\treturnData.push(responseData as IDataObject);\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\t\t\treturnData.push({ error: error.message });\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow error;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn [this.helpers.returnJsonArray(returnData)];\n\t\t\t} else if (operation === 'update' || operation === 'upsert') {\n\t\t\t\t// ----------------------------------\n\t\t\t\t//         update/upsert\n\t\t\t\t// ----------------------------------\n\t\t\t\tconst upsert = operation === 'upsert' ? true : false;\n\t\t\t\ttry {\n\t\t\t\t\tconst rawData = this.getNodeParameter('rawData', 0);\n\n\t\t\t\t\tconst items = this.getInputData();\n\n\t\t\t\t\tif (rawData) {\n\t\t\t\t\t\tconst dataProperty = this.getNodeParameter('dataProperty', 0) as string;\n\n\t\t\t\t\t\tconst updateData: ISheetUpdateData[] = [];\n\t\t\t\t\t\tfor (let i = 0; i < items.length; i++) {\n\t\t\t\t\t\t\tupdateData.push({\n\t\t\t\t\t\t\t\trange,\n\t\t\t\t\t\t\t\tvalues: items[i].json[dataProperty] as string[][],\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tawait sheet.batchUpdate(updateData, valueInputMode);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst keyName = this.getNodeParameter('key', 0) as string;\n\t\t\t\t\t\tconst keyRow = parseInt(this.getNodeParameter('keyRow', 0) as string, 10);\n\t\t\t\t\t\tconst dataStartRow = parseInt(this.getNodeParameter('dataStartRow', 0) as string, 10);\n\n\t\t\t\t\t\tconst setData: IDataObject[] = [];\n\t\t\t\t\t\titems.forEach((item) => {\n\t\t\t\t\t\t\tsetData.push(item.json);\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tawait sheet.updateSheetData(\n\t\t\t\t\t\t\tsetData,\n\t\t\t\t\t\t\tkeyName,\n\t\t\t\t\t\t\trange,\n\t\t\t\t\t\t\tkeyRow,\n\t\t\t\t\t\t\tdataStartRow,\n\t\t\t\t\t\t\tvalueInputMode,\n\t\t\t\t\t\t\tvalueRenderMode,\n\t\t\t\t\t\t\tupsert,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\t// TODO: Should add this data somewhere\n\t\t\t\t\t// TODO: Should have something like add metadata which does not get passed through\n\n\t\t\t\t\treturn [items];\n\t\t\t\t} catch (error) {\n\t\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\t\treturn [[{ json: { error: error.message } }]];\n\t\t\t\t\t}\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (resource === 'spreadsheet') {\n\t\t\tconst returnData: IDataObject[] = [];\n\n\t\t\tlet responseData;\n\n\t\t\tif (operation === 'create') {\n\t\t\t\t// ----------------------------------\n\t\t\t\t//         create\n\t\t\t\t// ----------------------------------\n\t\t\t\t// https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/create\n\n\t\t\t\tfor (let i = 0; i < this.getInputData().length; i++) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst title = this.getNodeParameter('title', i) as string;\n\t\t\t\t\t\tconst sheetsUi = this.getNodeParameter('sheetsUi', i, {}) as IDataObject;\n\n\t\t\t\t\t\tconst body = {\n\t\t\t\t\t\t\tproperties: {\n\t\t\t\t\t\t\t\ttitle,\n\t\t\t\t\t\t\t\tautoRecalc: undefined as undefined | string,\n\t\t\t\t\t\t\t\tlocale: undefined as undefined | string,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tsheets: [] as IDataObject[],\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tconst options = this.getNodeParameter('options', i, {});\n\n\t\t\t\t\t\tif (Object.keys(sheetsUi).length) {\n\t\t\t\t\t\t\tconst data = [];\n\t\t\t\t\t\t\tconst sheets = sheetsUi.sheetValues as IDataObject[];\n\t\t\t\t\t\t\tfor (const sheet of sheets) {\n\t\t\t\t\t\t\t\tconst properties = sheet.propertiesUi as IDataObject;\n\t\t\t\t\t\t\t\tif (properties) {\n\t\t\t\t\t\t\t\t\tdata.push({ properties });\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbody.sheets = data;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbody.properties.autoRecalc = options.autoRecalc\n\t\t\t\t\t\t\t? (options.autoRecalc as string)\n\t\t\t\t\t\t\t: undefined;\n\t\t\t\t\t\tbody.properties.locale = options.locale ? (options.locale as string) : undefined;\n\n\t\t\t\t\t\tresponseData = await googleApiRequest.call(this, 'POST', '/v4/spreadsheets', body);\n\n\t\t\t\t\t\treturnData.push(responseData as IDataObject);\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\t\t\treturnData.push({ error: error.message });\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow error;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn [this.helpers.returnJsonArray(returnData)];\n\t\t}\n\n\t\treturn [];\n\t}\n}\n"],"mappings":"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","names":["import_GenericFunctions"]}