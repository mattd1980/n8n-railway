{"version":3,"sources":["../../../../../../../nodes/Google/Sheet/v2/actions/sheet/clear.operation.ts"],"sourcesContent":["import type { IExecuteFunctions, INodeExecutionData } from 'n8n-workflow';\n\nimport type { GoogleSheet } from '../../helpers/GoogleSheet';\nimport type { SheetProperties } from '../../helpers/GoogleSheets.types';\nimport {\n\tgetColumnName,\n\tgetColumnNumber,\n\tuntilSheetSelected,\n} from '../../helpers/GoogleSheets.utils';\n\nexport const description: SheetProperties = [\n\t{\n\t\tdisplayName: 'Clear',\n\t\tname: 'clear',\n\t\ttype: 'options',\n\t\toptions: [\n\t\t\t{\n\t\t\t\tname: 'Whole Sheet',\n\t\t\t\tvalue: 'wholeSheet',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Specific Rows',\n\t\t\t\tvalue: 'specificRows',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Specific Columns',\n\t\t\t\tvalue: 'specificColumns',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Specific Range',\n\t\t\t\tvalue: 'specificRange',\n\t\t\t},\n\t\t],\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tresource: ['sheet'],\n\t\t\t\toperation: ['clear'],\n\t\t\t},\n\t\t\thide: {\n\t\t\t\t...untilSheetSelected,\n\t\t\t},\n\t\t},\n\t\tdefault: 'wholeSheet',\n\t\tdescription: 'What to clear',\n\t},\n\t{\n\t\tdisplayName: 'Keep First Row',\n\t\tname: 'keepFirstRow',\n\t\ttype: 'boolean',\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tresource: ['sheet'],\n\t\t\t\toperation: ['clear'],\n\t\t\t\tclear: ['wholeSheet'],\n\t\t\t},\n\t\t\thide: {\n\t\t\t\t...untilSheetSelected,\n\t\t\t},\n\t\t},\n\t\tdefault: false,\n\t},\n\t{\n\t\tdisplayName: 'Start Row Number',\n\t\tname: 'startIndex',\n\t\ttype: 'number',\n\t\ttypeOptions: {\n\t\t\tminValue: 1,\n\t\t},\n\t\tdefault: 1,\n\t\tdescription: 'The row number to delete from, The first row is 1',\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tresource: ['sheet'],\n\t\t\t\toperation: ['clear'],\n\t\t\t\tclear: ['specificRows'],\n\t\t\t},\n\t\t\thide: {\n\t\t\t\t...untilSheetSelected,\n\t\t\t},\n\t\t},\n\t},\n\t{\n\t\tdisplayName: 'Number of Rows to Delete',\n\t\tname: 'rowsToDelete',\n\t\ttype: 'number',\n\t\ttypeOptions: {\n\t\t\tminValue: 1,\n\t\t},\n\t\tdefault: 1,\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tresource: ['sheet'],\n\t\t\t\toperation: ['clear'],\n\t\t\t\tclear: ['specificRows'],\n\t\t\t},\n\t\t\thide: {\n\t\t\t\t...untilSheetSelected,\n\t\t\t},\n\t\t},\n\t},\n\n\t{\n\t\tdisplayName: 'Start Column',\n\t\tname: 'startIndex',\n\t\ttype: 'string',\n\t\tdefault: 'A',\n\t\tdescription: 'The column to delete',\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tresource: ['sheet'],\n\t\t\t\toperation: ['clear'],\n\t\t\t\tclear: ['specificColumns'],\n\t\t\t},\n\t\t\thide: {\n\t\t\t\t...untilSheetSelected,\n\t\t\t},\n\t\t},\n\t},\n\t{\n\t\t// Could this be better as \"end column\"?\n\t\tdisplayName: 'Number of Columns to Delete',\n\t\tname: 'columnsToDelete',\n\t\ttype: 'number',\n\t\ttypeOptions: {\n\t\t\tminValue: 1,\n\t\t},\n\t\tdefault: 1,\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tresource: ['sheet'],\n\t\t\t\toperation: ['clear'],\n\t\t\t\tclear: ['specificColumns'],\n\t\t\t},\n\t\t\thide: {\n\t\t\t\t...untilSheetSelected,\n\t\t\t},\n\t\t},\n\t},\n\t{\n\t\tdisplayName: 'Range',\n\t\tname: 'range',\n\t\ttype: 'string',\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tresource: ['sheet'],\n\t\t\t\toperation: ['clear'],\n\t\t\t\tclear: ['specificRange'],\n\t\t\t},\n\t\t\thide: {\n\t\t\t\t...untilSheetSelected,\n\t\t\t},\n\t\t},\n\t\tdefault: 'A:F',\n\t\trequired: true,\n\t\tdescription:\n\t\t\t'The table range to read from or to append data to. See the Google <a href=\"https://developers.google.com/sheets/api/guides/values#writing\">documentation</a> for the details. If it contains multiple sheets it can also be added like this: \"MySheet!A:F\"',\n\t},\n];\n\nexport async function execute(\n\tthis: IExecuteFunctions,\n\tsheet: GoogleSheet,\n\tsheetName: string,\n): Promise<INodeExecutionData[]> {\n\tconst items = this.getInputData();\n\n\tfor (let i = 0; i < items.length; i++) {\n\t\tconst clearType = this.getNodeParameter('clear', i) as string;\n\t\tconst keepFirstRow = this.getNodeParameter('keepFirstRow', i, false) as boolean;\n\t\tlet range = '';\n\n\t\tif (clearType === 'specificRows') {\n\t\t\tconst startIndex = this.getNodeParameter('startIndex', i) as number;\n\t\t\tconst rowsToDelete = this.getNodeParameter('rowsToDelete', i) as number;\n\t\t\tconst endIndex = rowsToDelete === 1 ? startIndex : startIndex + rowsToDelete - 1;\n\n\t\t\trange = `${sheetName}!${startIndex}:${endIndex}`;\n\t\t}\n\n\t\tif (clearType === 'specificColumns') {\n\t\t\tconst startIndex = this.getNodeParameter('startIndex', i) as string;\n\t\t\tconst columnsToDelete = this.getNodeParameter('columnsToDelete', i) as number;\n\t\t\tconst columnNumber = getColumnNumber(startIndex);\n\t\t\tconst endIndex = columnsToDelete === 1 ? columnNumber : columnNumber + columnsToDelete - 1;\n\n\t\t\trange = `${sheetName}!${startIndex}:${getColumnName(endIndex)}`;\n\t\t}\n\n\t\tif (clearType === 'specificRange') {\n\t\t\tconst rangeField = this.getNodeParameter('range', i) as string;\n\t\t\tconst region = rangeField.includes('!') ? rangeField.split('!')[1] || '' : rangeField;\n\n\t\t\trange = `${sheetName}!${region}`;\n\t\t}\n\n\t\tif (clearType === 'wholeSheet') {\n\t\t\trange = sheetName;\n\t\t}\n\n\t\tif (keepFirstRow) {\n\t\t\tconst firstRow = await sheet.getData(`${range}!1:1`, 'FORMATTED_VALUE');\n\t\t\tawait sheet.clearData(range);\n\t\t\tawait sheet.updateRows(range, firstRow as string[][], 'RAW', 1);\n\t\t} else {\n\t\t\tawait sheet.clearData(range);\n\t\t}\n\t}\n\n\treturn items;\n}\n"],"mappings":"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","names":[]}