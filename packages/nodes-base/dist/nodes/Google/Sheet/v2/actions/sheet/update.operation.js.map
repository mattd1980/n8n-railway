{"version":3,"sources":["../../../../../../../nodes/Google/Sheet/v2/actions/sheet/update.operation.ts"],"sourcesContent":["import type { IExecuteFunctions, IDataObject, INodeExecutionData } from 'n8n-workflow';\nimport { NodeOperationError, UserError } from 'n8n-workflow';\n\nimport { cellFormat, handlingExtraData, locationDefine } from './commonDescription';\nimport type { GoogleSheet } from '../../helpers/GoogleSheet';\nimport {\n\tROW_NUMBER,\n\ttype ISheetUpdateData,\n\ttype SheetProperties,\n\ttype ValueInputOption,\n\ttype ValueRenderOption,\n} from '../../helpers/GoogleSheets.types';\nimport { cellFormatDefault, untilSheetSelected } from '../../helpers/GoogleSheets.utils';\n\nexport const description: SheetProperties = [\n\t{\n\t\tdisplayName: 'Data Mode',\n\t\tname: 'dataMode',\n\t\ttype: 'options',\n\t\toptions: [\n\t\t\t{\n\t\t\t\tname: 'Auto-Map Input Data to Columns',\n\t\t\t\tvalue: 'autoMapInputData',\n\t\t\t\tdescription: 'Use when node input properties match destination column names',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Map Each Column Below',\n\t\t\t\tvalue: 'defineBelow',\n\t\t\t\tdescription: 'Set the value for each destination column',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Nothing',\n\t\t\t\tvalue: 'nothing',\n\t\t\t\tdescription: 'Do not send anything',\n\t\t\t},\n\t\t],\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tresource: ['sheet'],\n\t\t\t\toperation: ['update'],\n\t\t\t\t'@version': [3],\n\t\t\t},\n\t\t\thide: {\n\t\t\t\t...untilSheetSelected,\n\t\t\t},\n\t\t},\n\t\tdefault: 'defineBelow',\n\t\tdescription: 'Whether to insert the input data this node receives in the new row',\n\t},\n\t{\n\t\t// eslint-disable-next-line n8n-nodes-base/node-param-display-name-miscased, n8n-nodes-base/node-param-display-name-wrong-for-dynamic-options\n\t\tdisplayName: 'Column to match on',\n\t\tname: 'columnToMatchOn',\n\t\ttype: 'options',\n\t\tdescription:\n\t\t\t'Choose from the list, or specify an ID using an <a href=\"https://docs.n8n.io/code/expressions/\">expression</a>',\n\t\ttypeOptions: {\n\t\t\tloadOptionsDependsOn: ['sheetName.value'],\n\t\t\tloadOptionsMethod: 'getSheetHeaderRowAndSkipEmpty',\n\t\t},\n\t\tdefault: '',\n\t\thint: \"Used to find the correct row to update. Doesn't get changed.\",\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tresource: ['sheet'],\n\t\t\t\toperation: ['update'],\n\t\t\t\t'@version': [3],\n\t\t\t},\n\t\t\thide: {\n\t\t\t\t...untilSheetSelected,\n\t\t\t},\n\t\t},\n\t},\n\t{\n\t\tdisplayName: 'Value of Column to Match On',\n\t\tname: 'valueToMatchOn',\n\t\ttype: 'string',\n\t\tdefault: '',\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tresource: ['sheet'],\n\t\t\t\toperation: ['update'],\n\t\t\t\tdataMode: ['defineBelow'],\n\t\t\t\t'@version': [3],\n\t\t\t},\n\t\t\thide: {\n\t\t\t\t...untilSheetSelected,\n\t\t\t},\n\t\t},\n\t},\n\t{\n\t\tdisplayName: 'Values to Send',\n\t\tname: 'fieldsUi',\n\t\tplaceholder: 'Add Field',\n\t\ttype: 'fixedCollection',\n\t\ttypeOptions: {\n\t\t\tmultipleValues: true,\n\t\t},\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tresource: ['sheet'],\n\t\t\t\toperation: ['update'],\n\t\t\t\tdataMode: ['defineBelow'],\n\t\t\t\t'@version': [3],\n\t\t\t},\n\t\t\thide: {\n\t\t\t\t...untilSheetSelected,\n\t\t\t},\n\t\t},\n\t\tdefault: {},\n\t\toptions: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Field',\n\t\t\t\tname: 'values',\n\t\t\t\tvalues: [\n\t\t\t\t\t{\n\t\t\t\t\t\t// eslint-disable-next-line n8n-nodes-base/node-param-display-name-wrong-for-dynamic-options\n\t\t\t\t\t\tdisplayName: 'Column',\n\t\t\t\t\t\tname: 'column',\n\t\t\t\t\t\ttype: 'options',\n\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t'Choose from the list, or specify an ID using an <a href=\"https://docs.n8n.io/code/expressions/\">expression</a>',\n\t\t\t\t\t\ttypeOptions: {\n\t\t\t\t\t\t\tloadOptionsDependsOn: ['sheetName.value', 'columnToMatchOn'],\n\t\t\t\t\t\t\tloadOptionsMethod: 'getSheetHeaderRowAndAddColumn',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Column Name',\n\t\t\t\t\t\tname: 'columnName',\n\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\t\tcolumn: ['newColumn'],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Value',\n\t\t\t\t\t\tname: 'fieldValue',\n\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t],\n\t},\n\t{\n\t\tdisplayName: 'Columns',\n\t\tname: 'columns',\n\t\ttype: 'resourceMapper',\n\t\tnoDataExpression: true,\n\t\tdefault: {\n\t\t\tmappingMode: 'defineBelow',\n\t\t\tvalue: null,\n\t\t},\n\t\trequired: true,\n\t\ttypeOptions: {\n\t\t\tloadOptionsDependsOn: ['sheetName.value'],\n\t\t\tresourceMapper: {\n\t\t\t\tresourceMapperMethod: 'getMappingColumns',\n\t\t\t\tmode: 'update',\n\t\t\t\tfieldWords: {\n\t\t\t\t\tsingular: 'column',\n\t\t\t\t\tplural: 'columns',\n\t\t\t\t},\n\t\t\t\taddAllFields: true,\n\t\t\t\tmultiKeyMatch: false,\n\t\t\t},\n\t\t},\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tresource: ['sheet'],\n\t\t\t\toperation: ['update'],\n\t\t\t\t'@version': [{ _cnd: { gte: 4 } }],\n\t\t\t},\n\t\t\thide: {\n\t\t\t\t...untilSheetSelected,\n\t\t\t},\n\t\t},\n\t},\n\t{\n\t\tdisplayName: 'Options',\n\t\tname: 'options',\n\t\ttype: 'collection',\n\t\tplaceholder: 'Add option',\n\t\tdefault: {},\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tresource: ['sheet'],\n\t\t\t\toperation: ['update'],\n\t\t\t},\n\t\t\thide: {\n\t\t\t\t...untilSheetSelected,\n\t\t\t},\n\t\t},\n\t\toptions: [\n\t\t\tcellFormat,\n\t\t\tlocationDefine,\n\t\t\thandlingExtraData,\n\t\t\t{\n\t\t\t\t...handlingExtraData,\n\t\t\t\tdisplayOptions: { show: { '/columns.mappingMode': ['autoMapInputData'] } },\n\t\t\t},\n\t\t],\n\t},\n];\n\nexport async function execute(\n\tthis: IExecuteFunctions,\n\tsheet: GoogleSheet,\n\tsheetName: string,\n): Promise<INodeExecutionData[]> {\n\tconst items = this.getInputData();\n\tconst nodeVersion = this.getNode().typeVersion;\n\n\tconst range = `${sheetName}!A:Z`;\n\n\tconst valueInputMode = this.getNodeParameter(\n\t\t'options.cellFormat',\n\t\t0,\n\t\tcellFormatDefault(nodeVersion),\n\t) as ValueInputOption;\n\n\tconst options = this.getNodeParameter('options', 0, {});\n\n\tconst valueRenderMode = (options.valueRenderMode || 'UNFORMATTED_VALUE') as ValueRenderOption;\n\n\tconst locationDefineOptions = (options.locationDefine as IDataObject)?.values as IDataObject;\n\n\tlet keyRowIndex = 0;\n\tlet dataStartRowIndex = 1;\n\n\tif (locationDefineOptions) {\n\t\tif (locationDefineOptions.headerRow) {\n\t\t\tkeyRowIndex = parseInt(locationDefineOptions.headerRow as string, 10) - 1;\n\t\t}\n\t\tif (locationDefineOptions.firstDataRow) {\n\t\t\tdataStartRowIndex = parseInt(locationDefineOptions.firstDataRow as string, 10) - 1;\n\t\t}\n\t}\n\n\tlet columnNames: string[] = [];\n\n\tconst sheetData = await sheet.getData(sheetName, 'FORMATTED_VALUE');\n\n\tif (sheetData?.[keyRowIndex] === undefined) {\n\t\tthrow new NodeOperationError(\n\t\t\tthis.getNode(),\n\t\t\t`Could not retrieve the column names from row ${keyRowIndex + 1}`,\n\t\t);\n\t}\n\n\tcolumnNames = sheetData[keyRowIndex];\n\n\tconst newColumns = new Set<string>();\n\n\tconst columnsToMatchOn: string[] =\n\t\tnodeVersion < 4\n\t\t\t? [this.getNodeParameter('columnToMatchOn', 0) as string]\n\t\t\t: (this.getNodeParameter('columns.matchingColumns', 0) as string[]);\n\n\tconst dataMode =\n\t\tnodeVersion < 4\n\t\t\t? (this.getNodeParameter('dataMode', 0) as string)\n\t\t\t: (this.getNodeParameter('columns.mappingMode', 0) as string);\n\n\t// TODO: Add support for multiple columns to match on in the next overhaul\n\tconst keyIndex = columnNames.indexOf(columnsToMatchOn[0]);\n\n\t//not used when updating row\n\tconst columnValuesList = await sheet.getColumnValues({\n\t\trange,\n\t\tkeyIndex,\n\t\tdataStartRowIndex,\n\t\tvalueRenderMode,\n\t\tsheetData,\n\t});\n\n\tconst updateData: ISheetUpdateData[] = [];\n\n\tconst mappedValues: IDataObject[] = [];\n\n\tconst errorOnUnexpectedColumn = (key: string, i: number) => {\n\t\tif (!columnNames.includes(key)) {\n\t\t\tthrow new NodeOperationError(this.getNode(), 'Unexpected fields in node input', {\n\t\t\t\titemIndex: i,\n\t\t\t\tdescription: `The input field '${key}' doesn't match any column in the Sheet. You can ignore this by changing the 'Handling extra data' field, which you can find under 'Options'.`,\n\t\t\t});\n\t\t}\n\t};\n\n\tconst addNewColumn = (key: string) => {\n\t\tif (!columnNames.includes(key) && key !== ROW_NUMBER) {\n\t\t\tnewColumns.add(key);\n\t\t}\n\t};\n\n\tfor (let i = 0; i < items.length; i++) {\n\t\tif (dataMode === 'nothing') continue;\n\n\t\tconst inputData: IDataObject[] = [];\n\n\t\tif (dataMode === 'autoMapInputData') {\n\t\t\tconst handlingExtraDataOption = (options.handlingExtraData as string) || 'insertInNewColumn';\n\t\t\tif (handlingExtraDataOption === 'ignoreIt') {\n\t\t\t\tinputData.push(items[i].json);\n\t\t\t}\n\t\t\tif (handlingExtraDataOption === 'error') {\n\t\t\t\tObject.keys(items[i].json).forEach((key) => errorOnUnexpectedColumn(key, i));\n\t\t\t\tinputData.push(items[i].json);\n\t\t\t}\n\t\t\tif (handlingExtraDataOption === 'insertInNewColumn') {\n\t\t\t\tObject.keys(items[i].json).forEach(addNewColumn);\n\t\t\t\tinputData.push(items[i].json);\n\t\t\t}\n\t\t} else {\n\t\t\tconst valueToMatchOn =\n\t\t\t\tnodeVersion < 4\n\t\t\t\t\t? (this.getNodeParameter('valueToMatchOn', i, '') as string)\n\t\t\t\t\t: (this.getNodeParameter(`columns.value[\"${columnsToMatchOn[0]}\"]`, i, '') as string);\n\n\t\t\tif (valueToMatchOn === '') {\n\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\"The 'Column to Match On' parameter is required\",\n\t\t\t\t\t{\n\t\t\t\t\t\titemIndex: i,\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (nodeVersion < 4) {\n\t\t\t\tconst valuesToSend = this.getNodeParameter('fieldsUi.values', i, []) as IDataObject[];\n\t\t\t\tif (!valuesToSend?.length) {\n\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t\"At least one value has to be added under 'Values to Send'\",\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-loop-func\n\t\t\t\tconst fields = valuesToSend.reduce((acc, entry) => {\n\t\t\t\t\tif (entry.column === 'newColumn') {\n\t\t\t\t\t\tconst columnName = entry.columnName as string;\n\n\t\t\t\t\t\tif (!columnNames.includes(columnName)) {\n\t\t\t\t\t\t\tnewColumns.add(columnName);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tacc[columnName] = entry.fieldValue as string;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tacc[entry.column as string] = entry.fieldValue as string;\n\t\t\t\t\t}\n\t\t\t\t\treturn acc;\n\t\t\t\t}, {} as IDataObject);\n\n\t\t\t\tfields[columnsToMatchOn[0]] = valueToMatchOn;\n\n\t\t\t\tinputData.push(fields);\n\t\t\t} else {\n\t\t\t\tconst mappingValues = this.getNodeParameter('columns.value', i) as IDataObject;\n\t\t\t\tif (Object.keys(mappingValues).length === 0) {\n\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t\"At least one value has to be added under 'Values to Send'\",\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\t// Setting empty values to empty string so that they are not ignored by the API\n\t\t\t\tObject.keys(mappingValues).forEach((key) => {\n\t\t\t\t\tif (\n\t\t\t\t\t\tkey === 'row_number' &&\n\t\t\t\t\t\t(mappingValues[key] === null || mappingValues[key] === undefined)\n\t\t\t\t\t) {\n\t\t\t\t\t\tthrow new UserError(\n\t\t\t\t\t\t\t'Column to match on (row_number) is not defined. Since the field is used to determine the row to update, it needs to have a value set.',\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (mappingValues[key] === undefined || mappingValues[key] === null) {\n\t\t\t\t\t\tmappingValues[key] = '';\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tinputData.push(mappingValues);\n\t\t\t\tmappedValues.push(mappingValues);\n\t\t\t}\n\t\t}\n\n\t\tif (newColumns.size) {\n\t\t\tconst newColumnNames = columnNames.concat([...newColumns]);\n\t\t\tawait sheet.updateRows(\n\t\t\t\tsheetName,\n\t\t\t\t[newColumnNames],\n\t\t\t\t(options.cellFormat as ValueInputOption) || cellFormatDefault(nodeVersion),\n\t\t\t\tkeyRowIndex + 1,\n\t\t\t);\n\t\t\tcolumnNames = newColumnNames;\n\t\t\tnewColumns.clear();\n\t\t}\n\n\t\tlet preparedData;\n\t\tconst columnNamesList = [columnNames.concat([...newColumns])];\n\n\t\tif (columnsToMatchOn[0] === 'row_number') {\n\t\t\tpreparedData = sheet.prepareDataForUpdatingByRowNumber(inputData, range, columnNamesList);\n\t\t} else {\n\t\t\tconst indexKey = columnsToMatchOn[0];\n\n\t\t\tpreparedData = await sheet.prepareDataForUpdateOrUpsert({\n\t\t\t\tinputData,\n\t\t\t\tindexKey,\n\t\t\t\trange,\n\t\t\t\tkeyRowIndex,\n\t\t\t\tdataStartRowIndex,\n\t\t\t\tvalueRenderMode,\n\t\t\t\tcolumnNamesList,\n\t\t\t\tcolumnValuesList,\n\t\t\t});\n\t\t}\n\n\t\tupdateData.push(...preparedData.updateData);\n\t}\n\n\tif (updateData.length) {\n\t\tawait sheet.batchUpdate(updateData, valueInputMode);\n\t}\n\n\tif (nodeVersion < 4 || dataMode === 'autoMapInputData') {\n\t\treturn items.map((item, index) => {\n\t\t\titem.pairedItem = { item: index };\n\t\t\treturn item;\n\t\t});\n\t} else {\n\t\tif (!updateData.length) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst returnData: INodeExecutionData[] = [];\n\t\tfor (const [index, entry] of mappedValues.entries()) {\n\t\t\treturnData.push({\n\t\t\t\tjson: entry,\n\t\t\t\tpairedItem: { item: index },\n\t\t\t});\n\t\t}\n\t\treturn returnData;\n\t}\n}\n"],"mappings":"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","names":["import_GoogleSheets"]}