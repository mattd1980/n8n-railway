{"version":3,"sources":["../../../../../../../nodes/Google/Sheet/v2/actions/sheet/append.operation.ts"],"sourcesContent":["import {\n\ttype IExecuteFunctions,\n\ttype IDataObject,\n\ttype INodeExecutionData,\n\tNodeOperationError,\n\ttype ResourceMapperField,\n} from 'n8n-workflow';\n\nimport { cellFormat, handlingExtraData, useAppendOption } from './commonDescription';\nimport type { GoogleSheet } from '../../helpers/GoogleSheet';\nimport type { SheetProperties, ValueInputOption } from '../../helpers/GoogleSheets.types';\nimport {\n\tautoMapInputData,\n\tcellFormatDefault,\n\tcheckForSchemaChanges,\n\tmapFields,\n\tuntilSheetSelected,\n} from '../../helpers/GoogleSheets.utils';\n\nexport const description: SheetProperties = [\n\t{\n\t\tdisplayName: 'Data Mode',\n\t\tname: 'dataMode',\n\t\ttype: 'options',\n\t\toptions: [\n\t\t\t{\n\t\t\t\tname: 'Auto-Map Input Data to Columns',\n\t\t\t\tvalue: 'autoMapInputData',\n\t\t\t\tdescription: 'Use when node input properties match destination column names',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Map Each Column Below',\n\t\t\t\tvalue: 'defineBelow',\n\t\t\t\tdescription: 'Set the value for each destination column',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Nothing',\n\t\t\t\tvalue: 'nothing',\n\t\t\t\tdescription: 'Do not send anything',\n\t\t\t},\n\t\t],\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tresource: ['sheet'],\n\t\t\t\toperation: ['append'],\n\t\t\t\t'@version': [3],\n\t\t\t},\n\t\t\thide: {\n\t\t\t\t...untilSheetSelected,\n\t\t\t},\n\t\t},\n\t\tdefault: 'defineBelow',\n\t\tdescription: 'Whether to insert the input data this node receives in the new row',\n\t},\n\t{\n\t\tdisplayName:\n\t\t\t\"In this mode, make sure the incoming data is named the same as the columns in your Sheet. (Use an 'Edit Fields' node before this node to change it if required.)\",\n\t\tname: 'autoMapNotice',\n\t\ttype: 'notice',\n\t\tdefault: '',\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\toperation: ['append'],\n\t\t\t\tdataMode: ['autoMapInputData'],\n\t\t\t\t'@version': [3],\n\t\t\t},\n\t\t\thide: {\n\t\t\t\t...untilSheetSelected,\n\t\t\t},\n\t\t},\n\t},\n\t{\n\t\tdisplayName: 'Fields to Send',\n\t\tname: 'fieldsUi',\n\t\tplaceholder: 'Add Field',\n\t\ttype: 'fixedCollection',\n\t\ttypeOptions: {\n\t\t\tmultipleValueButtonText: 'Add Field to Send',\n\t\t\tmultipleValues: true,\n\t\t},\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tresource: ['sheet'],\n\t\t\t\toperation: ['append'],\n\t\t\t\tdataMode: ['defineBelow'],\n\t\t\t\t'@version': [3],\n\t\t\t},\n\t\t\thide: {\n\t\t\t\t...untilSheetSelected,\n\t\t\t},\n\t\t},\n\t\tdefault: {},\n\t\toptions: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Field',\n\t\t\t\tname: 'fieldValues',\n\t\t\t\tvalues: [\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Field Name or ID',\n\t\t\t\t\t\tname: 'fieldId',\n\t\t\t\t\t\ttype: 'options',\n\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t'Choose from the list, or specify an ID using an <a href=\"https://docs.n8n.io/code/expressions/\">expression</a>',\n\t\t\t\t\t\ttypeOptions: {\n\t\t\t\t\t\t\tloadOptionsDependsOn: ['sheetName.value'],\n\t\t\t\t\t\t\tloadOptionsMethod: 'getSheetHeaderRowAndSkipEmpty',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Field Value',\n\t\t\t\t\t\tname: 'fieldValue',\n\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t],\n\t},\n\t{\n\t\tdisplayName: 'Columns',\n\t\tname: 'columns',\n\t\ttype: 'resourceMapper',\n\t\tnoDataExpression: true,\n\t\tdefault: {\n\t\t\tmappingMode: 'defineBelow',\n\t\t\tvalue: null,\n\t\t},\n\t\trequired: true,\n\t\ttypeOptions: {\n\t\t\tloadOptionsDependsOn: ['sheetName.value'],\n\t\t\tresourceMapper: {\n\t\t\t\tresourceMapperMethod: 'getMappingColumns',\n\t\t\t\tmode: 'add',\n\t\t\t\tfieldWords: {\n\t\t\t\t\tsingular: 'column',\n\t\t\t\t\tplural: 'columns',\n\t\t\t\t},\n\t\t\t\taddAllFields: true,\n\t\t\t\tmultiKeyMatch: false,\n\t\t\t},\n\t\t},\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tresource: ['sheet'],\n\t\t\t\toperation: ['append'],\n\t\t\t\t'@version': [{ _cnd: { gte: 4 } }],\n\t\t\t},\n\t\t\thide: {\n\t\t\t\t...untilSheetSelected,\n\t\t\t},\n\t\t},\n\t},\n\t{\n\t\tdisplayName: 'Options',\n\t\tname: 'options',\n\t\ttype: 'collection',\n\t\tplaceholder: 'Add option',\n\t\tdefault: {},\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tresource: ['sheet'],\n\t\t\t\toperation: ['append'],\n\t\t\t},\n\t\t\thide: {\n\t\t\t\t...untilSheetSelected,\n\t\t\t},\n\t\t},\n\t\toptions: [\n\t\t\tcellFormat,\n\t\t\t{\n\t\t\t\tdisplayName: 'Data Location on Sheet',\n\t\t\t\tname: 'locationDefine',\n\t\t\t\ttype: 'fixedCollection',\n\t\t\t\tplaceholder: 'Select Range',\n\t\t\t\tdefault: { values: {} },\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Values',\n\t\t\t\t\t\tname: 'values',\n\t\t\t\t\t\tvalues: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdisplayName: 'Header Row',\n\t\t\t\t\t\t\t\tname: 'headerRow',\n\t\t\t\t\t\t\t\ttype: 'number',\n\t\t\t\t\t\t\t\ttypeOptions: {\n\t\t\t\t\t\t\t\t\tminValue: 1,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tdefault: 1,\n\t\t\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t\t\t'Index of the row which contains the keys. Starts at 1. The incoming node data is matched to the keys for assignment. The matching is case sensitive.',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\thandlingExtraData,\n\t\t\t{\n\t\t\t\t...handlingExtraData,\n\t\t\t\tdisplayOptions: { show: { '/columns.mappingMode': ['autoMapInputData'] } },\n\t\t\t},\n\t\t\tuseAppendOption,\n\t\t],\n\t},\n];\n\nexport async function execute(\n\tthis: IExecuteFunctions,\n\tsheet: GoogleSheet,\n\trange: string,\n\tsheetId: string,\n): Promise<INodeExecutionData[]> {\n\tconst items = this.getInputData();\n\tconst nodeVersion = this.getNode().typeVersion;\n\tlet dataMode =\n\t\tnodeVersion < 4\n\t\t\t? (this.getNodeParameter('dataMode', 0) as string)\n\t\t\t: (this.getNodeParameter('columns.mappingMode', 0) as string);\n\n\tif (!items.length || dataMode === 'nothing') return [];\n\n\tconst options = this.getNodeParameter('options', 0, {});\n\tconst locationDefine = (options.locationDefine as IDataObject)?.values as IDataObject;\n\n\tlet keyRowIndex = 1;\n\tif (locationDefine?.headerRow) {\n\t\tkeyRowIndex = locationDefine.headerRow as number;\n\t}\n\n\tconst sheetData = await sheet.getData(range, 'FORMATTED_VALUE');\n\n\tif (!sheetData?.length) {\n\t\tdataMode = 'autoMapInputData';\n\t}\n\n\tif (nodeVersion >= 4.4 && dataMode !== 'autoMapInputData') {\n\t\t//not possible to refresh columns when mode is autoMapInputData\n\t\tif (sheetData?.[keyRowIndex - 1] === undefined) {\n\t\t\tthrow new NodeOperationError(\n\t\t\t\tthis.getNode(),\n\t\t\t\t`Could not retrieve the column names from row ${keyRowIndex}`,\n\t\t\t);\n\t\t}\n\n\t\tconst schema = this.getNodeParameter('columns.schema', 0) as ResourceMapperField[];\n\t\tcheckForSchemaChanges(this.getNode(), sheetData[keyRowIndex - 1], schema);\n\t}\n\n\tlet inputData: IDataObject[] = [];\n\n\tif (dataMode === 'autoMapInputData') {\n\t\tinputData = await autoMapInputData.call(this, range, sheet, items, options);\n\t} else {\n\t\tinputData = mapFields.call(this, items.length);\n\t}\n\n\tif (inputData.length === 0) {\n\t\treturn [];\n\t}\n\n\tconst valueInputMode = (options.cellFormat as ValueInputOption) || cellFormatDefault(nodeVersion);\n\tconst useAppend = options.useAppend as boolean;\n\n\tif (options.useAppend) {\n\t\tawait sheet.appendSheetData({\n\t\t\tinputData,\n\t\t\trange,\n\t\t\tkeyRowIndex,\n\t\t\tvalueInputMode,\n\t\t\tuseAppend,\n\t\t});\n\t} else {\n\t\t//if no trailing empty row exists in the sheet update operation will fail\n\t\tawait sheet.appendEmptyRowsOrColumns(sheetId, 1, 0);\n\n\t\t// if sheetData is undefined it means that the sheet was empty\n\t\t// we did add row with column names in the first row (autoMapInputData)\n\t\t// to account for that length has to be 1 and we append data in the next row\n\t\tconst lastRow = (sheetData ?? [{}]).length + 1;\n\n\t\tawait sheet.appendSheetData({\n\t\t\tinputData,\n\t\t\trange,\n\t\t\tkeyRowIndex,\n\t\t\tvalueInputMode,\n\t\t\tlastRow,\n\t\t});\n\t}\n\n\tif (nodeVersion < 4 || dataMode === 'autoMapInputData') {\n\t\treturn items.map((item, index) => {\n\t\t\titem.pairedItem = { item: index };\n\t\t\treturn item;\n\t\t});\n\t} else {\n\t\tconst returnData: INodeExecutionData[] = [];\n\t\tfor (const [index, entry] of inputData.entries()) {\n\t\t\treturnData.push({\n\t\t\t\tjson: entry,\n\t\t\t\tpairedItem: { item: index },\n\t\t\t});\n\t\t}\n\t\treturn returnData;\n\t}\n}\n"],"mappings":"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","names":[]}