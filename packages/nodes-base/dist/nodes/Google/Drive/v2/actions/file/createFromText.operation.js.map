{"version":3,"sources":["../../../../../../../nodes/Google/Drive/v2/actions/file/createFromText.operation.ts"],"sourcesContent":["import type {\n\tIDataObject,\n\tIExecuteFunctions,\n\tINodeExecutionData,\n\tINodeProperties,\n} from 'n8n-workflow';\n\nimport { updateDisplayOptions } from '@utils/utilities';\n\nimport { DRIVE } from '../../helpers/interfaces';\nimport { setFileProperties, setParentFolder, setUpdateCommonParams } from '../../helpers/utils';\nimport { googleApiRequest } from '../../transport';\nimport { driveRLC, folderRLC, updateCommonOptions } from '../common.descriptions';\n\nconst properties: INodeProperties[] = [\n\t{\n\t\tdisplayName: 'File Content',\n\t\tname: 'content',\n\t\ttype: 'string',\n\t\tdefault: '',\n\t\ttypeOptions: {\n\t\t\trows: 2,\n\t\t},\n\t\tdescription: 'The text to create the file with',\n\t},\n\t{\n\t\tdisplayName: 'File Name',\n\t\tname: 'name',\n\t\ttype: 'string',\n\t\tdefault: '',\n\t\tplaceholder: 'e.g. My New File',\n\t\tdescription:\n\t\t\t\"The name of the file you want to create. If not specified, 'Untitled' will be used.\",\n\t},\n\t{\n\t\t...driveRLC,\n\t\tdisplayName: 'Parent Drive',\n\t\trequired: false,\n\t\tdescription: 'The drive where to create the new file',\n\t},\n\t{\n\t\t...folderRLC,\n\t\tdisplayName: 'Parent Folder',\n\t\trequired: false,\n\t\tdescription: 'The folder where to create the new file',\n\t},\n\t{\n\t\tdisplayName: 'Options',\n\t\tname: 'options',\n\t\ttype: 'collection',\n\t\tplaceholder: 'Add option',\n\t\tdefault: {},\n\t\toptions: [\n\t\t\t...updateCommonOptions,\n\t\t\t{\n\t\t\t\tdisplayName: 'Convert to Google Document',\n\t\t\t\tname: 'convertToGoogleDocument',\n\t\t\t\ttype: 'boolean',\n\t\t\t\tdefault: false,\n\t\t\t\tdescription: 'Whether to create a Google Document (instead of the .txt default format)',\n\t\t\t\thint: 'Google Docs API has to be enabled in the <a href=\"https://console.developers.google.com/apis/library/docs.googleapis.com\" target=\"_blank\">Google API Console</a>.',\n\t\t\t},\n\t\t],\n\t},\n];\n\nconst displayOptions = {\n\tshow: {\n\t\tresource: ['file'],\n\t\toperation: ['createFromText'],\n\t},\n};\n\nexport const description = updateDisplayOptions(displayOptions, properties);\n\nexport async function execute(this: IExecuteFunctions, i: number): Promise<INodeExecutionData[]> {\n\tconst name = (this.getNodeParameter('name', i) as string) || 'Untitled';\n\n\tconst options = this.getNodeParameter('options', i, {});\n\tconst convertToGoogleDocument = (options.convertToGoogleDocument as boolean) || false;\n\tconst mimeType = convertToGoogleDocument ? DRIVE.DOCUMENT : 'text/plain';\n\n\tconst driveId = this.getNodeParameter('driveId', i, undefined, {\n\t\textractValue: true,\n\t}) as string;\n\n\tconst folderId = this.getNodeParameter('folderId', i, undefined, {\n\t\textractValue: true,\n\t}) as string;\n\n\tconst bodyParameters = setFileProperties(\n\t\t{\n\t\t\tname,\n\t\t\tparents: [setParentFolder(folderId, driveId)],\n\t\t\tmimeType,\n\t\t},\n\t\toptions,\n\t);\n\n\tconst qs = setUpdateCommonParams(\n\t\t{\n\t\t\tincludeItemsFromAllDrives: true,\n\t\t\tsupportsAllDrives: true,\n\t\t\tspaces: 'appDataFolder, drive',\n\t\t\tcorpora: 'allDrives',\n\t\t},\n\t\toptions,\n\t);\n\n\tlet response;\n\tif (convertToGoogleDocument) {\n\t\tconst document = await googleApiRequest.call(\n\t\t\tthis,\n\t\t\t'POST',\n\t\t\t'/drive/v3/files',\n\t\t\tbodyParameters,\n\t\t\tqs,\n\t\t);\n\n\t\tconst text = this.getNodeParameter('content', i, '') as string;\n\n\t\tconst body = {\n\t\t\trequests: [\n\t\t\t\t{\n\t\t\t\t\tinsertText: {\n\t\t\t\t\t\ttext,\n\t\t\t\t\t\tendOfSegmentLocation: {\n\t\t\t\t\t\t\tsegmentId: '', //empty segment ID signifies the document's body\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t],\n\t\t};\n\n\t\tconst updateResponse = await googleApiRequest.call(\n\t\t\tthis,\n\t\t\t'POST',\n\t\t\t'',\n\t\t\tbody,\n\t\t\tundefined,\n\t\t\t`https://docs.googleapis.com/v1/documents/${document.id}:batchUpdate`,\n\t\t);\n\n\t\tresponse = { id: updateResponse.documentId };\n\t} else {\n\t\tconst content = Buffer.from(this.getNodeParameter('content', i, '') as string, 'utf8');\n\t\tconst contentLength = content.byteLength;\n\n\t\tconst uploadData = await googleApiRequest.call(\n\t\t\tthis,\n\t\t\t'POST',\n\t\t\t'/upload/drive/v3/files',\n\t\t\tcontent,\n\t\t\t{\n\t\t\t\tuploadType: 'media',\n\t\t\t},\n\t\t\tundefined,\n\t\t\t{\n\t\t\t\theaders: {\n\t\t\t\t\t'Content-Type': mimeType,\n\t\t\t\t\t'Content-Length': contentLength,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\n\t\tconst uploadId = uploadData.id;\n\n\t\tqs.addParents = setParentFolder(folderId, driveId);\n\t\tdelete bodyParameters.parents;\n\n\t\tconst responseData = await googleApiRequest.call(\n\t\t\tthis,\n\t\t\t'PATCH',\n\t\t\t`/drive/v3/files/${uploadId}`,\n\t\t\tbodyParameters,\n\t\t\tqs,\n\t\t);\n\n\t\tresponse = { id: responseData.id };\n\t}\n\n\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\tthis.helpers.returnJsonArray(response as IDataObject),\n\t\t{ itemData: { item: i } },\n\t);\n\n\treturn executionData;\n}\n"],"mappings":"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","names":[]}