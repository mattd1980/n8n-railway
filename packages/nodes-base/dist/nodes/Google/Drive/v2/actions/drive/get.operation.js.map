{"version":3,"sources":["../../../../../../../nodes/Google/Drive/v2/actions/drive/get.operation.ts"],"sourcesContent":["import type {\n\tIExecuteFunctions,\n\tIDataObject,\n\tINodeExecutionData,\n\tINodeProperties,\n} from 'n8n-workflow';\n\nimport { updateDisplayOptions } from '@utils/utilities';\n\nimport { googleApiRequest } from '../../transport';\nimport { sharedDriveRLC } from '../common.descriptions';\n\nconst properties: INodeProperties[] = [\n\t{\n\t\t...sharedDriveRLC,\n\t\tdescription: 'The shared drive to get',\n\t},\n\t{\n\t\tdisplayName: 'Options',\n\t\tname: 'options',\n\t\ttype: 'collection',\n\t\tplaceholder: 'Add option',\n\t\tdefault: {},\n\t\toptions: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Use Domain Admin Access',\n\t\t\t\tname: 'useDomainAdminAccess',\n\t\t\t\ttype: 'boolean',\n\t\t\t\tdefault: false,\n\t\t\t\tdescription:\n\t\t\t\t\t'Whether to issue the request as a domain administrator; if set to true, then the requester will be granted access if they are an administrator of the domain to which the shared drive belongs',\n\t\t\t},\n\t\t],\n\t},\n];\n\nconst displayOptions = {\n\tshow: {\n\t\tresource: ['drive'],\n\t\toperation: ['get'],\n\t},\n};\n\nexport const description = updateDisplayOptions(displayOptions, properties);\n\nexport async function execute(this: IExecuteFunctions, i: number): Promise<INodeExecutionData[]> {\n\tconst returnData: INodeExecutionData[] = [];\n\tconst options = this.getNodeParameter('options', i);\n\n\tconst driveId = this.getNodeParameter('driveId', i, undefined, {\n\t\textractValue: true,\n\t}) as string;\n\n\tconst qs: IDataObject = {};\n\n\tObject.assign(qs, options);\n\n\tconst response = await googleApiRequest.call(this, 'GET', `/drive/v3/drives/${driveId}`, {}, qs);\n\n\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\tthis.helpers.returnJsonArray(response as IDataObject[]),\n\t\t{ itemData: { item: i } },\n\t);\n\n\treturnData.push(...executionData);\n\n\treturn returnData;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA,uBAAqC;AAErC,uBAAiC;AACjC,oBAA+B;AAE/B,MAAM,aAAgC;AAAA,EACrC;AAAA,IACC,GAAG;AAAA,IACH,aAAa;AAAA,EACd;AAAA,EACA;AAAA,IACC,aAAa;AAAA,IACb,MAAM;AAAA,IACN,MAAM;AAAA,IACN,aAAa;AAAA,IACb,SAAS,CAAC;AAAA,IACV,SAAS;AAAA,MACR;AAAA,QACC,aAAa;AAAA,QACb,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,QACT,aACC;AAAA,MACF;AAAA,IACD;AAAA,EACD;AACD;AAEA,MAAM,iBAAiB;AAAA,EACtB,MAAM;AAAA,IACL,UAAU,CAAC,OAAO;AAAA,IAClB,WAAW,CAAC,KAAK;AAAA,EAClB;AACD;AAEO,MAAM,kBAAc,uCAAqB,gBAAgB,UAAU;AAE1E,eAAsB,QAAiC,GAA0C;AAChG,QAAM,aAAmC,CAAC;AAC1C,QAAM,UAAU,KAAK,iBAAiB,WAAW,CAAC;AAElD,QAAM,UAAU,KAAK,iBAAiB,WAAW,GAAG,QAAW;AAAA,IAC9D,cAAc;AAAA,EACf,CAAC;AAED,QAAM,KAAkB,CAAC;AAEzB,SAAO,OAAO,IAAI,OAAO;AAEzB,QAAM,WAAW,MAAM,kCAAiB,KAAK,MAAM,OAAO,oBAAoB,OAAO,IAAI,CAAC,GAAG,EAAE;AAE/F,QAAM,gBAAgB,KAAK,QAAQ;AAAA,IAClC,KAAK,QAAQ,gBAAgB,QAAyB;AAAA,IACtD,EAAE,UAAU,EAAE,MAAM,EAAE,EAAE;AAAA,EACzB;AAEA,aAAW,KAAK,GAAG,aAAa;AAEhC,SAAO;AACR;","names":[]}