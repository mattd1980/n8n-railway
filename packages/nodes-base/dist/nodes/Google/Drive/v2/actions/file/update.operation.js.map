{"version":3,"sources":["../../../../../../../nodes/Google/Drive/v2/actions/file/update.operation.ts"],"sourcesContent":["import type {\n\tIDataObject,\n\tIExecuteFunctions,\n\tINodeExecutionData,\n\tINodeProperties,\n} from 'n8n-workflow';\nimport { NodeOperationError } from 'n8n-workflow';\n\nimport { updateDisplayOptions } from '@utils/utilities';\n\nimport {\n\tgetItemBinaryData,\n\tprepareQueryString,\n\tsetFileProperties,\n\tsetUpdateCommonParams,\n} from '../../helpers/utils';\nimport { googleApiRequest } from '../../transport';\nimport { fileRLC, updateCommonOptions } from '../common.descriptions';\n\nconst properties: INodeProperties[] = [\n\t{\n\t\t...fileRLC,\n\t\tdisplayName: 'File to Update',\n\t\tdescription: 'The file to update',\n\t},\n\t{\n\t\tdisplayName: 'Change File Content',\n\t\tname: 'changeFileContent',\n\t\ttype: 'boolean',\n\t\tdefault: false,\n\t\tdescription: 'Whether to send a new binary data to update the file',\n\t},\n\t{\n\t\tdisplayName: 'Input Data Field Name',\n\t\tname: 'inputDataFieldName',\n\t\ttype: 'string',\n\t\tplaceholder: 'e.g. data',\n\t\tdefault: 'data',\n\t\thint: 'The name of the input field containing the binary file data to update the file',\n\t\tdescription:\n\t\t\t'Find the name of input field containing the binary data to update the file in the Input panel on the left, in the Binary tab',\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tchangeFileContent: [true],\n\t\t\t},\n\t\t},\n\t},\n\t{\n\t\tdisplayName: 'New Updated File Name',\n\t\tname: 'newUpdatedFileName',\n\t\ttype: 'string',\n\t\tdefault: '',\n\t\tplaceholder: 'e.g. My New File',\n\t\tdescription: 'If not specified, the file name will not be changed',\n\t},\n\n\t{\n\t\tdisplayName: 'Options',\n\t\tname: 'options',\n\t\ttype: 'collection',\n\t\tplaceholder: 'Add option',\n\t\tdefault: {},\n\t\toptions: [\n\t\t\t...updateCommonOptions,\n\t\t\t{\n\t\t\t\tdisplayName: 'Move to Trash',\n\t\t\t\tname: 'trashed',\n\t\t\t\ttype: 'boolean',\n\t\t\t\tdefault: false,\n\t\t\t\tdescription: 'Whether to move a file to the trash. Only the owner may trash a file.',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Return Fields',\n\t\t\t\tname: 'fields',\n\t\t\t\ttype: 'multiOptions',\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: '[All]',\n\t\t\t\t\t\tvalue: '*',\n\t\t\t\t\t\tdescription: 'All fields',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'explicitlyTrashed',\n\t\t\t\t\t\tvalue: 'explicitlyTrashed',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'exportLinks',\n\t\t\t\t\t\tvalue: 'exportLinks',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'hasThumbnail',\n\t\t\t\t\t\tvalue: 'hasThumbnail',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'iconLink',\n\t\t\t\t\t\tvalue: 'iconLink',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'ID',\n\t\t\t\t\t\tvalue: 'id',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Kind',\n\t\t\t\t\t\tvalue: 'kind',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'mimeType',\n\t\t\t\t\t\tvalue: 'mimeType',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Name',\n\t\t\t\t\t\tvalue: 'name',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Permissions',\n\t\t\t\t\t\tvalue: 'permissions',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Shared',\n\t\t\t\t\t\tvalue: 'shared',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Spaces',\n\t\t\t\t\t\tvalue: 'spaces',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Starred',\n\t\t\t\t\t\tvalue: 'starred',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'thumbnailLink',\n\t\t\t\t\t\tvalue: 'thumbnailLink',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Trashed',\n\t\t\t\t\t\tvalue: 'trashed',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Version',\n\t\t\t\t\t\tvalue: 'version',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'webViewLink',\n\t\t\t\t\t\tvalue: 'webViewLink',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: [],\n\t\t\t\tdescription: 'The fields to return',\n\t\t\t},\n\t\t],\n\t},\n];\n\nconst displayOptions = {\n\tshow: {\n\t\tresource: ['file'],\n\t\toperation: ['update'],\n\t},\n};\n\nexport const description = updateDisplayOptions(displayOptions, properties);\n\nexport async function execute(this: IExecuteFunctions, i: number): Promise<INodeExecutionData[]> {\n\tconst fileId = this.getNodeParameter('fileId', i, undefined, {\n\t\textractValue: true,\n\t}) as string;\n\n\tconst changeFileContent = this.getNodeParameter('changeFileContent', i, false) as boolean;\n\n\tlet mimeType;\n\n\t// update file binary data\n\tif (changeFileContent) {\n\t\tconst inputDataFieldName = this.getNodeParameter('inputDataFieldName', i) as string;\n\n\t\tconst binaryData = await getItemBinaryData.call(this, inputDataFieldName, i);\n\n\t\tconst { contentLength, fileContent } = binaryData;\n\t\tmimeType = binaryData.mimeType;\n\n\t\tif (Buffer.isBuffer(fileContent)) {\n\t\t\tawait googleApiRequest.call(\n\t\t\t\tthis,\n\t\t\t\t'PATCH',\n\t\t\t\t`/upload/drive/v3/files/${fileId}`,\n\t\t\t\tfileContent,\n\t\t\t\t{\n\t\t\t\t\tuploadType: 'media',\n\t\t\t\t\tsupportsAllDrives: true,\n\t\t\t\t},\n\t\t\t\tundefined,\n\t\t\t\t{\n\t\t\t\t\theaders: {\n\t\t\t\t\t\t'Content-Type': mimeType,\n\t\t\t\t\t\t'Content-Length': contentLength,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t);\n\t\t} else {\n\t\t\tconst resumableUpload = await googleApiRequest.call(\n\t\t\t\tthis,\n\t\t\t\t'PATCH',\n\t\t\t\t`/upload/drive/v3/files/${fileId}`,\n\t\t\t\tundefined,\n\t\t\t\t{ uploadType: 'resumable', supportsAllDrives: true },\n\t\t\t\tundefined,\n\t\t\t\t{\n\t\t\t\t\treturnFullResponse: true,\n\t\t\t\t},\n\t\t\t);\n\t\t\tconst uploadUrl = resumableUpload.headers.location;\n\n\t\t\tlet offset = 0;\n\t\t\tfor await (const chunk of fileContent) {\n\t\t\t\tconst nextOffset = offset + Number(chunk.length);\n\t\t\t\ttry {\n\t\t\t\t\tawait this.helpers.httpRequest({\n\t\t\t\t\t\tmethod: 'PUT',\n\t\t\t\t\t\turl: uploadUrl,\n\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t'Content-Length': chunk.length,\n\t\t\t\t\t\t\t'Content-Range': `bytes ${offset}-${nextOffset - 1}/${contentLength}`,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tbody: chunk,\n\t\t\t\t\t});\n\t\t\t\t} catch (error) {\n\t\t\t\t\tif (error.response?.status !== 308) {\n\t\t\t\t\t\tthrow new NodeOperationError(this.getNode(), error as Error, { itemIndex: i });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\toffset = nextOffset;\n\t\t\t}\n\t\t}\n\t}\n\n\tconst options = this.getNodeParameter('options', i, {});\n\n\tconst qs: IDataObject = setUpdateCommonParams(\n\t\t{\n\t\t\tsupportsAllDrives: true,\n\t\t},\n\t\toptions,\n\t);\n\n\tif (options.fields) {\n\t\tconst queryFields = prepareQueryString(options.fields as string[]);\n\t\tqs.fields = queryFields;\n\t}\n\n\tif (options.trashed) {\n\t\tqs.trashed = options.trashed;\n\t}\n\n\tconst body: IDataObject = setFileProperties({}, options);\n\n\tconst newUpdatedFileName = this.getNodeParameter('newUpdatedFileName', i, '') as string;\n\tif (newUpdatedFileName) {\n\t\tbody.name = newUpdatedFileName;\n\t}\n\n\tif (mimeType) {\n\t\tbody.mimeType = mimeType;\n\t}\n\n\t// update file metadata\n\tconst responseData = await googleApiRequest.call(\n\t\tthis,\n\t\t'PATCH',\n\t\t`/drive/v3/files/${fileId}`,\n\t\tbody,\n\t\tqs,\n\t);\n\n\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t{ itemData: { item: i } },\n\t);\n\n\treturn executionData;\n}\n"],"mappings":"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","names":[]}