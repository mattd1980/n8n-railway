{"version":3,"sources":["../../../../../../../nodes/Google/Drive/v2/actions/folder/create.operation.ts"],"sourcesContent":["import type {\n\tIDataObject,\n\tIExecuteFunctions,\n\tINodeExecutionData,\n\tINodeProperties,\n} from 'n8n-workflow';\n\nimport { updateDisplayOptions } from '@utils/utilities';\n\nimport { DRIVE } from '../../helpers/interfaces';\nimport { setParentFolder } from '../../helpers/utils';\nimport { googleApiRequest } from '../../transport';\nimport { driveRLC, folderRLC } from '../common.descriptions';\n\nconst properties: INodeProperties[] = [\n\t{\n\t\tdisplayName: 'Folder Name',\n\t\tname: 'name',\n\t\ttype: 'string',\n\t\tdefault: '',\n\t\tplaceholder: 'e.g. New Folder',\n\t\tdescription: \"The name of the new folder. If not set, 'Untitled' will be used.\",\n\t},\n\t{\n\t\t...driveRLC,\n\t\tdisplayName: 'Parent Drive',\n\t\tdescription: 'The drive where to create the new folder',\n\t},\n\t{\n\t\t...folderRLC,\n\t\tdisplayName: 'Parent Folder',\n\t\tdescription: 'The parent folder where to create the new folder',\n\t},\n\t{\n\t\tdisplayName: 'Options',\n\t\tname: 'options',\n\t\ttype: 'collection',\n\t\tplaceholder: 'Add option',\n\t\tdefault: {},\n\t\toptions: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Simplify Output',\n\t\t\t\tname: 'simplifyOutput',\n\t\t\t\ttype: 'boolean',\n\t\t\t\tdefault: true,\n\t\t\t\tdescription: 'Whether to return a simplified version of the response instead of all fields',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Folder Color',\n\t\t\t\tname: 'folderColorRgb',\n\t\t\t\ttype: 'color',\n\t\t\t\tdefault: '',\n\t\t\t\tdescription:\n\t\t\t\t\t'The color of the folder as an RGB hex string. If an unsupported color is specified, the closest color in the palette will be used instead.',\n\t\t\t},\n\t\t],\n\t},\n];\n\nconst displayOptions = {\n\tshow: {\n\t\tresource: ['folder'],\n\t\toperation: ['create'],\n\t},\n};\n\nexport const description = updateDisplayOptions(displayOptions, properties);\n\nexport async function execute(this: IExecuteFunctions, i: number): Promise<INodeExecutionData[]> {\n\tconst name = (this.getNodeParameter('name', i) as string) || 'Untitled';\n\n\tconst driveId = this.getNodeParameter('driveId', i, undefined, {\n\t\textractValue: true,\n\t}) as string;\n\n\tconst folderId = this.getNodeParameter('folderId', i, undefined, {\n\t\textractValue: true,\n\t}) as string;\n\n\tconst body: IDataObject = {\n\t\tname,\n\t\tmimeType: DRIVE.FOLDER,\n\t\tparents: [setParentFolder(folderId, driveId)],\n\t};\n\n\tconst folderColorRgb =\n\t\t(this.getNodeParameter('options.folderColorRgb', i, '') as string) || undefined;\n\tif (folderColorRgb) {\n\t\tbody.folderColorRgb = folderColorRgb;\n\t}\n\n\tconst simplifyOutput = this.getNodeParameter('options.simplifyOutput', i, true) as boolean;\n\tlet fields;\n\tif (!simplifyOutput) {\n\t\tfields = '*';\n\t}\n\n\tconst qs = {\n\t\tfields,\n\t\tincludeItemsFromAllDrives: true,\n\t\tsupportsAllDrives: true,\n\t\tspaces: 'appDataFolder, drive',\n\t\tcorpora: 'allDrives',\n\t};\n\n\tconst response = await googleApiRequest.call(this, 'POST', '/drive/v3/files', body, qs);\n\n\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\tthis.helpers.returnJsonArray(response as IDataObject[]),\n\t\t{ itemData: { item: i } },\n\t);\n\n\treturn executionData;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA,uBAAqC;AAErC,wBAAsB;AACtB,mBAAgC;AAChC,uBAAiC;AACjC,oBAAoC;AAEpC,MAAM,aAAgC;AAAA,EACrC;AAAA,IACC,aAAa;AAAA,IACb,MAAM;AAAA,IACN,MAAM;AAAA,IACN,SAAS;AAAA,IACT,aAAa;AAAA,IACb,aAAa;AAAA,EACd;AAAA,EACA;AAAA,IACC,GAAG;AAAA,IACH,aAAa;AAAA,IACb,aAAa;AAAA,EACd;AAAA,EACA;AAAA,IACC,GAAG;AAAA,IACH,aAAa;AAAA,IACb,aAAa;AAAA,EACd;AAAA,EACA;AAAA,IACC,aAAa;AAAA,IACb,MAAM;AAAA,IACN,MAAM;AAAA,IACN,aAAa;AAAA,IACb,SAAS,CAAC;AAAA,IACV,SAAS;AAAA,MACR;AAAA,QACC,aAAa;AAAA,QACb,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,QACT,aAAa;AAAA,MACd;AAAA,MACA;AAAA,QACC,aAAa;AAAA,QACb,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,QACT,aACC;AAAA,MACF;AAAA,IACD;AAAA,EACD;AACD;AAEA,MAAM,iBAAiB;AAAA,EACtB,MAAM;AAAA,IACL,UAAU,CAAC,QAAQ;AAAA,IACnB,WAAW,CAAC,QAAQ;AAAA,EACrB;AACD;AAEO,MAAM,kBAAc,uCAAqB,gBAAgB,UAAU;AAE1E,eAAsB,QAAiC,GAA0C;AAChG,QAAM,OAAQ,KAAK,iBAAiB,QAAQ,CAAC,KAAgB;AAE7D,QAAM,UAAU,KAAK,iBAAiB,WAAW,GAAG,QAAW;AAAA,IAC9D,cAAc;AAAA,EACf,CAAC;AAED,QAAM,WAAW,KAAK,iBAAiB,YAAY,GAAG,QAAW;AAAA,IAChE,cAAc;AAAA,EACf,CAAC;AAED,QAAM,OAAoB;AAAA,IACzB;AAAA,IACA,UAAU,wBAAM;AAAA,IAChB,SAAS,KAAC,8BAAgB,UAAU,OAAO,CAAC;AAAA,EAC7C;AAEA,QAAM,iBACJ,KAAK,iBAAiB,0BAA0B,GAAG,EAAE,KAAgB;AACvE,MAAI,gBAAgB;AACnB,SAAK,iBAAiB;AAAA,EACvB;AAEA,QAAM,iBAAiB,KAAK,iBAAiB,0BAA0B,GAAG,IAAI;AAC9E,MAAI;AACJ,MAAI,CAAC,gBAAgB;AACpB,aAAS;AAAA,EACV;AAEA,QAAM,KAAK;AAAA,IACV;AAAA,IACA,2BAA2B;AAAA,IAC3B,mBAAmB;AAAA,IACnB,QAAQ;AAAA,IACR,SAAS;AAAA,EACV;AAEA,QAAM,WAAW,MAAM,kCAAiB,KAAK,MAAM,QAAQ,mBAAmB,MAAM,EAAE;AAEtF,QAAM,gBAAgB,KAAK,QAAQ;AAAA,IAClC,KAAK,QAAQ,gBAAgB,QAAyB;AAAA,IACtD,EAAE,UAAU,EAAE,MAAM,EAAE,EAAE;AAAA,EACzB;AAEA,SAAO;AACR;","names":[]}