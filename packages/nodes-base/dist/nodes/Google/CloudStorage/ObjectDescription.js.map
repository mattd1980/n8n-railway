{"version":3,"sources":["../../../../nodes/Google/CloudStorage/ObjectDescription.ts"],"sourcesContent":["import FormData from 'form-data';\nimport {\n\tBINARY_ENCODING,\n\ttype IDataObject,\n\ttype INodeExecutionData,\n\ttype INodeProperties,\n} from 'n8n-workflow';\nimport type { Readable } from 'stream';\n\n// Define these because we'll be using them in two separate places\nconst metagenerationFilters: INodeProperties[] = [\n\t{\n\t\tdisplayName: 'Generation',\n\t\tname: 'generation',\n\t\ttype: 'number',\n\t\tplaceholder: 'Select a specific revision of the chosen object',\n\t\tdefault: -1,\n\t},\n\t{\n\t\tdisplayName: 'Generation Match',\n\t\tname: 'ifGenerationMatch',\n\t\ttype: 'number',\n\t\tplaceholder: 'Make operation conditional of the object generation matching this value',\n\t\tdefault: -1,\n\t},\n\t{\n\t\tdisplayName: 'Generation Exclude',\n\t\tname: 'ifGenerationNotMatch',\n\t\ttype: 'number',\n\t\tplaceholder: 'Make operation conditional of the object generation not matching this value',\n\t\tdefault: -1,\n\t},\n\t{\n\t\tdisplayName: 'Metageneration Match',\n\t\tname: 'ifMetagenerationMatch',\n\t\ttype: 'number',\n\t\tplaceholder:\n\t\t\t\"Make operation conditional of the object's current metageneration matching this value\",\n\t\tdefault: -1,\n\t},\n\t{\n\t\tdisplayName: 'Metageneration Exclude',\n\t\tname: 'ifMetagenerationNotMatch',\n\t\ttype: 'number',\n\t\tplaceholder:\n\t\t\t\"Make operation conditional of the object's current metageneration not matching this value\",\n\t\tdefault: -1,\n\t},\n];\n\nconst predefinedAclOptions: INodeProperties = {\n\tdisplayName: 'Predefined ACL',\n\tname: 'predefinedAcl',\n\ttype: 'options',\n\tplaceholder: 'Apply a predefined set of Access Controls to the object',\n\tdefault: 'authenticatedRead',\n\toptions: [\n\t\t{\n\t\t\tname: 'Authenticated Read',\n\t\t\tvalue: 'authenticatedRead',\n\t\t},\n\t\t{\n\t\t\tname: 'Bucket Owner Full Control',\n\t\t\tvalue: 'bucketOwnerFullControl',\n\t\t},\n\t\t{\n\t\t\tname: 'Bucket Owner Read',\n\t\t\tvalue: 'bucketOwnerRead',\n\t\t},\n\t\t{\n\t\t\tname: 'Private',\n\t\t\tvalue: 'private',\n\t\t},\n\t\t{\n\t\t\tname: 'Project Private',\n\t\t\tvalue: 'projectPrivate',\n\t\t},\n\t\t{\n\t\t\tname: 'Public Read',\n\t\t\tvalue: 'publicRead',\n\t\t},\n\t],\n};\n\nexport const objectOperations: INodeProperties[] = [\n\t{\n\t\tdisplayName: 'Operation',\n\t\tname: 'operation',\n\t\ttype: 'options',\n\t\tnoDataExpression: true,\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tresource: ['object'],\n\t\t\t},\n\t\t},\n\t\toptions: [\n\t\t\t{\n\t\t\t\tname: 'Create',\n\t\t\t\tvalue: 'create',\n\t\t\t\tdescription: 'Create an object',\n\t\t\t\trouting: {\n\t\t\t\t\trequest: {\n\t\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\t\tbaseURL: 'https://storage.googleapis.com/upload/storage/v1',\n\t\t\t\t\t\turl: '={{\"/b/\" + $parameter[\"bucketName\"] + \"/o/\"}}',\n\t\t\t\t\t\tqs: {\n\t\t\t\t\t\t\tname: '={{$parameter[\"objectName\"]}}',\n\t\t\t\t\t\t\tuploadType: 'multipart',\n\t\t\t\t\t\t},\n\t\t\t\t\t\theaders: {},\n\t\t\t\t\t},\n\t\t\t\t\tsend: {\n\t\t\t\t\t\tpreSend: [\n\t\t\t\t\t\t\t// Handle setup of Query and Headers\n\t\t\t\t\t\t\tasync function (this, requestOptions) {\n\t\t\t\t\t\t\t\t// Merge in the options into the queryset and headers objects\n\t\t\t\t\t\t\t\tif (!requestOptions.qs) requestOptions.qs = {};\n\t\t\t\t\t\t\t\tif (!requestOptions.headers) requestOptions.headers = {};\n\t\t\t\t\t\t\t\tconst options = this.getNodeParameter('createQuery') as IDataObject;\n\t\t\t\t\t\t\t\tconst headers = this.getNodeParameter('encryptionHeaders') as IDataObject;\n\t\t\t\t\t\t\t\trequestOptions.qs = Object.assign(requestOptions.qs, options);\n\t\t\t\t\t\t\t\trequestOptions.headers = Object.assign(requestOptions.headers, headers);\n\t\t\t\t\t\t\t\treturn requestOptions;\n\t\t\t\t\t\t\t},\n\n\t\t\t\t\t\t\t// Handle body creation\n\t\t\t\t\t\t\tasync function (this, requestOptions) {\n\t\t\t\t\t\t\t\t// Populate metadata JSON\n\t\t\t\t\t\t\t\tlet metadata: IDataObject = { name: this.getNodeParameter('objectName') as string };\n\t\t\t\t\t\t\t\tconst bodyData = this.getNodeParameter('createData') as IDataObject;\n\t\t\t\t\t\t\t\tconst useBinary = this.getNodeParameter('createFromBinary') as boolean;\n\n\t\t\t\t\t\t\t\t// Parse JSON body parameters\n\t\t\t\t\t\t\t\tif (bodyData.acl) {\n\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\tbodyData.acl = JSON.parse(bodyData.acl as string);\n\t\t\t\t\t\t\t\t\t} catch (error) {}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (bodyData.metadata) {\n\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\tbodyData.metadata = JSON.parse(bodyData.metadata as string);\n\t\t\t\t\t\t\t\t\t} catch (error) {}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tmetadata = Object.assign(metadata, bodyData);\n\n\t\t\t\t\t\t\t\t// Populate request body\n\t\t\t\t\t\t\t\tconst body = new FormData();\n\t\t\t\t\t\t\t\tbody.append('metadata', JSON.stringify(metadata), {\n\t\t\t\t\t\t\t\t\tcontentType: 'application/json',\n\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\t// Determine content and content type\n\t\t\t\t\t\t\t\tlet content: string | Buffer | Readable;\n\t\t\t\t\t\t\t\tlet contentType: string;\n\t\t\t\t\t\t\t\tlet contentLength: number;\n\t\t\t\t\t\t\t\tif (useBinary) {\n\t\t\t\t\t\t\t\t\tconst binaryPropertyName = this.getNodeParameter(\n\t\t\t\t\t\t\t\t\t\t'createBinaryPropertyName',\n\t\t\t\t\t\t\t\t\t) as string;\n\n\t\t\t\t\t\t\t\t\tconst binaryData = this.helpers.assertBinaryData(binaryPropertyName);\n\t\t\t\t\t\t\t\t\tif (binaryData.id) {\n\t\t\t\t\t\t\t\t\t\tcontent = await this.helpers.getBinaryStream(binaryData.id);\n\t\t\t\t\t\t\t\t\t\tconst binaryMetadata = await this.helpers.getBinaryMetadata(binaryData.id);\n\t\t\t\t\t\t\t\t\t\tcontentType = binaryMetadata.mimeType ?? 'application/octet-stream';\n\t\t\t\t\t\t\t\t\t\tcontentLength = binaryMetadata.fileSize;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tcontent = Buffer.from(binaryData.data, BINARY_ENCODING);\n\t\t\t\t\t\t\t\t\t\tcontentType = binaryData.mimeType;\n\t\t\t\t\t\t\t\t\t\tcontentLength = content.length;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tcontent = this.getNodeParameter('createContent') as string;\n\t\t\t\t\t\t\t\t\tcontentType = 'text/plain';\n\t\t\t\t\t\t\t\t\tcontentLength = content.length;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbody.append('file', content, { contentType, knownLength: contentLength });\n\n\t\t\t\t\t\t\t\t// Set the headers\n\t\t\t\t\t\t\t\tif (!requestOptions.headers) requestOptions.headers = {};\n\t\t\t\t\t\t\t\trequestOptions.headers['Content-Length'] = body.getLengthSync();\n\t\t\t\t\t\t\t\trequestOptions.headers['Content-Type'] =\n\t\t\t\t\t\t\t\t\t`multipart/related; boundary=${body.getBoundary()}`;\n\n\t\t\t\t\t\t\t\t// Return the request data\n\t\t\t\t\t\t\t\trequestOptions.body = body;\n\t\t\t\t\t\t\t\treturn requestOptions;\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\taction: 'Create an object',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Delete',\n\t\t\t\tvalue: 'delete',\n\t\t\t\tdescription: 'Delete an object',\n\t\t\t\trouting: {\n\t\t\t\t\trequest: {\n\t\t\t\t\t\tmethod: 'DELETE',\n\t\t\t\t\t\turl: '={{\"/b/\" + $parameter[\"bucketName\"] + \"/o/\" + $parameter[\"objectName\"]}}',\n\t\t\t\t\t\tqs: {},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\taction: 'Delete an object from a bucket',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Get',\n\t\t\t\tvalue: 'get',\n\t\t\t\tdescription: 'Get object data or metadata',\n\t\t\t\trouting: {\n\t\t\t\t\trequest: {\n\t\t\t\t\t\tmethod: 'GET',\n\t\t\t\t\t\turl: '={{\"/b/\" + $parameter[\"bucketName\"] + \"/o/\" + $parameter[\"objectName\"]}}',\n\t\t\t\t\t\treturnFullResponse: true,\n\t\t\t\t\t\tqs: {\n\t\t\t\t\t\t\talt: '={{$parameter[\"alt\"]}}',\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tsend: {\n\t\t\t\t\t\tpreSend: [\n\t\t\t\t\t\t\tasync function (this, requestOptions) {\n\t\t\t\t\t\t\t\tif (!requestOptions.qs) requestOptions.qs = {};\n\t\t\t\t\t\t\t\tif (!requestOptions.headers) requestOptions.headers = {};\n\t\t\t\t\t\t\t\tconst options = this.getNodeParameter('getParameters') as IDataObject;\n\t\t\t\t\t\t\t\tconst headers = this.getNodeParameter('encryptionHeaders') as IDataObject;\n\t\t\t\t\t\t\t\tconst datatype = this.getNodeParameter('alt') as string;\n\n\t\t\t\t\t\t\t\tif (datatype === 'media') {\n\t\t\t\t\t\t\t\t\trequestOptions.encoding = 'arraybuffer';\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t// Merge in the options into the queryset and headers objects\n\t\t\t\t\t\t\t\trequestOptions.qs = Object.assign(requestOptions.qs, options);\n\t\t\t\t\t\t\t\trequestOptions.headers = Object.assign(requestOptions.headers, headers);\n\n\t\t\t\t\t\t\t\t// Return the request data\n\t\t\t\t\t\t\t\treturn requestOptions;\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t\toutput: {\n\t\t\t\t\t\tpostReceive: [\n\t\t\t\t\t\t\tasync function (this, items, responseData) {\n\t\t\t\t\t\t\t\t// If the request was for object data as opposed to metadata, change the json to binary field in the response\n\t\t\t\t\t\t\t\tconst datatype = this.getNodeParameter('alt') as string;\n\n\t\t\t\t\t\t\t\tif (datatype === 'media') {\n\t\t\t\t\t\t\t\t\t// Adapt the binaryProperty part of Routing Node since it's conditional\n\t\t\t\t\t\t\t\t\tconst destinationName = this.getNodeParameter('binaryPropertyName') as string;\n\t\t\t\t\t\t\t\t\tconst fileName = this.getNodeParameter('objectName') as string;\n\t\t\t\t\t\t\t\t\tconst binaryData = await this.helpers.prepareBinaryData(\n\t\t\t\t\t\t\t\t\t\tresponseData.body as Buffer,\n\t\t\t\t\t\t\t\t\t\tfileName,\n\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t// Transform items\n\t\t\t\t\t\t\t\t\titems = items.map((item) => {\n\t\t\t\t\t\t\t\t\t\titem.json = {};\n\t\t\t\t\t\t\t\t\t\titem.binary = { [destinationName]: binaryData };\n\t\t\t\t\t\t\t\t\t\treturn item;\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\treturn items;\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\taction: 'Get object data or metadata',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Get Many',\n\t\t\t\tvalue: 'getAll',\n\t\t\t\tdescription: 'Retrieve a list of objects',\n\t\t\t\trouting: {\n\t\t\t\t\trequest: {\n\t\t\t\t\t\tmethod: 'GET',\n\t\t\t\t\t\turl: '={{\"/b/\" + $parameter[\"bucketName\"] + \"/o/\"}}',\n\t\t\t\t\t\treturnFullResponse: true,\n\t\t\t\t\t\tqs: {},\n\t\t\t\t\t},\n\t\t\t\t\tsend: {\n\t\t\t\t\t\tpreSend: [\n\t\t\t\t\t\t\tasync function (this, requestOptions) {\n\t\t\t\t\t\t\t\tif (!requestOptions.qs) requestOptions.qs = {};\n\t\t\t\t\t\t\t\tconst options = this.getNodeParameter('listFilters') as IDataObject;\n\n\t\t\t\t\t\t\t\t// Merge in the options into the queryset\n\t\t\t\t\t\t\t\trequestOptions.qs = Object.assign(requestOptions.qs, options);\n\n\t\t\t\t\t\t\t\t// Check if we send a limit\n\t\t\t\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll') as boolean;\n\t\t\t\t\t\t\t\tif (!returnAll) requestOptions.qs.maxResults = this.getNodeParameter('maxResults');\n\n\t\t\t\t\t\t\t\t// Return the request data\n\t\t\t\t\t\t\t\treturn requestOptions;\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t\tpaginate: true,\n\t\t\t\t\t},\n\t\t\t\t\toperations: {\n\t\t\t\t\t\tasync pagination(this, requestOptions) {\n\t\t\t\t\t\t\tif (!requestOptions.options.qs) requestOptions.options.qs = {};\n\t\t\t\t\t\t\tlet executions: INodeExecutionData[] = [];\n\t\t\t\t\t\t\tlet responseData: INodeExecutionData[];\n\t\t\t\t\t\t\tlet nextPageToken: string | undefined = undefined;\n\t\t\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll') as boolean;\n\n\t\t\t\t\t\t\tconst extractBucketsList = (page: INodeExecutionData) => {\n\t\t\t\t\t\t\t\tconst objects = page.json.items as IDataObject[];\n\t\t\t\t\t\t\t\tif (objects) {\n\t\t\t\t\t\t\t\t\texecutions = executions.concat(objects.map((object) => ({ json: object })));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\tdo {\n\t\t\t\t\t\t\t\trequestOptions.options.qs.pageToken = nextPageToken;\n\t\t\t\t\t\t\t\tresponseData = await this.makeRoutingRequest(requestOptions);\n\n\t\t\t\t\t\t\t\t// Check for another page\n\t\t\t\t\t\t\t\tconst lastItem = responseData[responseData.length - 1].json;\n\t\t\t\t\t\t\t\tnextPageToken = lastItem.nextPageToken as string | undefined;\n\n\t\t\t\t\t\t\t\t// Extract just the list of buckets from the page data\n\t\t\t\t\t\t\t\tresponseData.forEach(extractBucketsList);\n\t\t\t\t\t\t\t} while (returnAll && nextPageToken);\n\n\t\t\t\t\t\t\t// Return all execution responses as an array\n\t\t\t\t\t\t\treturn executions;\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\taction: 'Get a list of objects',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Update',\n\t\t\t\tvalue: 'update',\n\t\t\t\tdescription: \"Update an object's metadata\",\n\t\t\t\trouting: {\n\t\t\t\t\trequest: {\n\t\t\t\t\t\tmethod: 'PATCH',\n\t\t\t\t\t\turl: '={{\"/b/\" + $parameter[\"bucketName\"] + \"/o/\" + $parameter[\"objectName\"]}}',\n\t\t\t\t\t\tqs: {},\n\t\t\t\t\t\tbody: {},\n\t\t\t\t\t},\n\t\t\t\t\tsend: {\n\t\t\t\t\t\tpreSend: [\n\t\t\t\t\t\t\tasync function (this, requestOptions) {\n\t\t\t\t\t\t\t\tif (!requestOptions.qs) requestOptions.qs = {};\n\t\t\t\t\t\t\t\tif (!requestOptions.headers) requestOptions.headers = {};\n\t\t\t\t\t\t\t\tif (!requestOptions.body) requestOptions.body = {};\n\t\t\t\t\t\t\t\tconst options = this.getNodeParameter('metagenAndAclQuery') as IDataObject;\n\t\t\t\t\t\t\t\tconst headers = this.getNodeParameter('encryptionHeaders') as IDataObject;\n\t\t\t\t\t\t\t\tconst body = this.getNodeParameter('updateData') as IDataObject;\n\n\t\t\t\t\t\t\t\t// Parse JSON body parameters\n\t\t\t\t\t\t\t\tif (body.acl) {\n\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\tbody.acl = JSON.parse(body.acl as string);\n\t\t\t\t\t\t\t\t\t} catch (error) {}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (body.metadata) {\n\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\tbody.metadata = JSON.parse(body.metadata as string);\n\t\t\t\t\t\t\t\t\t} catch (error) {}\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t// Merge in the options into the queryset and headers objects\n\t\t\t\t\t\t\t\trequestOptions.qs = Object.assign(requestOptions.qs, options);\n\t\t\t\t\t\t\t\trequestOptions.headers = Object.assign(requestOptions.headers, headers);\n\t\t\t\t\t\t\t\trequestOptions.body = Object.assign(requestOptions.body, body);\n\n\t\t\t\t\t\t\t\t// Return the request data\n\t\t\t\t\t\t\t\treturn requestOptions;\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\taction: \"Update an object's metadata\",\n\t\t\t},\n\t\t],\n\t\tdefault: 'getAll',\n\t},\n];\n\nexport const objectFields: INodeProperties[] = [\n\t{\n\t\tdisplayName: 'Bucket Name',\n\t\tname: 'bucketName',\n\t\ttype: 'string',\n\t\tplaceholder: 'Bucket Name',\n\t\trequired: true,\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tresource: ['object'],\n\t\t\t},\n\t\t},\n\t\tdefault: '',\n\t},\n\t{\n\t\tdisplayName: 'Object Name',\n\t\tname: 'objectName',\n\t\ttype: 'string',\n\t\tplaceholder: 'Object Name',\n\t\trequired: true,\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tresource: ['object'],\n\t\t\t\toperation: ['create', 'delete', 'get', 'update'],\n\t\t\t},\n\t\t},\n\t\tdefault: '',\n\t},\n\t{\n\t\tdisplayName: 'Projection',\n\t\tname: 'projection',\n\t\ttype: 'options',\n\t\tnoDataExpression: true,\n\t\toptions: [\n\t\t\t{\n\t\t\t\tname: 'All Properties',\n\t\t\t\tvalue: 'full',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'No ACL',\n\t\t\t\tvalue: 'noAcl',\n\t\t\t},\n\t\t],\n\t\tdefault: 'noAcl',\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tresource: ['object'],\n\t\t\t\toperation: ['get', 'getAll'],\n\t\t\t},\n\t\t},\n\t\trouting: {\n\t\t\trequest: {\n\t\t\t\tqs: {\n\t\t\t\t\tprojection: '={{$value}}',\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n\t// Create / Update gets their own definition because the default value is swapped\n\t{\n\t\tdisplayName: 'Projection',\n\t\tname: 'updateProjection',\n\t\ttype: 'options',\n\t\tnoDataExpression: true,\n\t\toptions: [\n\t\t\t{\n\t\t\t\tname: 'All Properties',\n\t\t\t\tvalue: 'full',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'No ACL',\n\t\t\t\tvalue: 'noAcl',\n\t\t\t},\n\t\t],\n\t\tdefault: 'full',\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tresource: ['object'],\n\t\t\t\toperation: ['create', 'update'],\n\t\t\t},\n\t\t},\n\t\trouting: {\n\t\t\trequest: {\n\t\t\t\tqs: {\n\t\t\t\t\tprojection: '={{$value}}',\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n\t{\n\t\tdisplayName: 'Return Data',\n\t\tname: 'alt',\n\t\ttype: 'options',\n\t\tplaceholder: 'The type of data to return from the request',\n\t\tdefault: 'json',\n\t\toptions: [\n\t\t\t{\n\t\t\t\tname: 'Metadata',\n\t\t\t\tvalue: 'json',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Object Data',\n\t\t\t\tvalue: 'media',\n\t\t\t},\n\t\t],\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tresource: ['object'],\n\t\t\t\toperation: ['get'],\n\t\t\t},\n\t\t},\n\t},\n\t{\n\t\tdisplayName: 'Use Input Binary Field',\n\t\tname: 'createFromBinary',\n\t\ttype: 'boolean',\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tresource: ['object'],\n\t\t\t\toperation: ['create'],\n\t\t\t},\n\t\t},\n\t\tdefault: true,\n\t\tnoDataExpression: true,\n\t\tdescription: 'Whether the data for creating a file should come from a binary field',\n\t},\n\t{\n\t\tdisplayName: 'Input Binary Field',\n\t\tname: 'createBinaryPropertyName',\n\t\ttype: 'string',\n\t\thint: 'The name of the input binary field containing the file to be written',\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tresource: ['object'],\n\t\t\t\toperation: ['create'],\n\t\t\t\tcreateFromBinary: [true],\n\t\t\t},\n\t\t},\n\t\tdefault: 'data',\n\t},\n\t{\n\t\tdisplayName: 'File Content',\n\t\tname: 'createContent',\n\t\ttype: 'string',\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tresource: ['object'],\n\t\t\t\toperation: ['create'],\n\t\t\t\tcreateFromBinary: [false],\n\t\t\t},\n\t\t},\n\t\tdefault: '',\n\t\tdescription: 'Content of the file to be uploaded',\n\t},\n\t{\n\t\tdisplayName: 'Put Output File in Field',\n\t\tname: 'binaryPropertyName',\n\t\ttype: 'string',\n\t\thint: 'The name of the output binary field to put the file in',\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tresource: ['object'],\n\t\t\t\toperation: ['get'],\n\t\t\t\talt: ['media'],\n\t\t\t},\n\t\t},\n\t\tdefault: 'data',\n\t},\n\t{\n\t\tdisplayName: 'Return All',\n\t\tname: 'returnAll',\n\t\ttype: 'boolean',\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tresource: ['object'],\n\t\t\t\toperation: ['getAll'],\n\t\t\t},\n\t\t},\n\t\tdefault: false,\n\t\tdescription: 'Whether to return all results or only up to a given limit',\n\t},\n\t{\n\t\tdisplayName: 'Limit',\n\t\tname: 'maxResults',\n\t\ttype: 'number',\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tresource: ['object'],\n\t\t\t\toperation: ['getAll'],\n\t\t\t\treturnAll: [false],\n\t\t\t},\n\t\t},\n\t\ttypeOptions: {\n\t\t\tminValue: 1,\n\t\t\tmaxValue: 1000,\n\t\t},\n\t\tdefault: 100,\n\t\tdescription: 'Max number of results to return',\n\t},\n\t{\n\t\tdisplayName: 'Create Fields',\n\t\tname: 'createData',\n\t\ttype: 'collection',\n\t\tplaceholder: 'Add Create Body Field',\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tresource: ['object'],\n\t\t\t\toperation: ['create'],\n\t\t\t},\n\t\t},\n\t\tdefault: {},\n\t\toptions: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Access Control List',\n\t\t\t\tname: 'acl',\n\t\t\t\ttype: 'json',\n\t\t\t\tdefault: '[]',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Cache Control',\n\t\t\t\tname: 'cacheControl',\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: '',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Content Disposition',\n\t\t\t\tname: 'contentDisposition',\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: '',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Content Encoding',\n\t\t\t\tname: 'contentEncoding',\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: '',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Content Language',\n\t\t\t\tname: 'contentLanguage',\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: '',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Content Type',\n\t\t\t\tname: 'contentType',\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: '',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'CRC32c Checksum',\n\t\t\t\tname: 'crc32c',\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: '',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Custom Time',\n\t\t\t\tname: 'customTime',\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: '',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Event Based Hold',\n\t\t\t\tname: 'eventBasedHold',\n\t\t\t\ttype: 'boolean',\n\t\t\t\tdefault: false,\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'MD5 Hash',\n\t\t\t\tname: 'md5Hash',\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: '',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Metadata',\n\t\t\t\tname: 'metadata',\n\t\t\t\ttype: 'json',\n\t\t\t\tdefault: '{}',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Storage Class',\n\t\t\t\tname: 'storageClass',\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: '',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Temporary Hold',\n\t\t\t\tname: 'temporaryHold',\n\t\t\t\ttype: 'boolean',\n\t\t\t\tdefault: false,\n\t\t\t},\n\t\t],\n\t},\n\t{\n\t\tdisplayName: 'Update Fields',\n\t\tname: 'updateData',\n\t\ttype: 'collection',\n\t\tplaceholder: 'Add Update Body Field',\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tresource: ['object'],\n\t\t\t\toperation: ['update'],\n\t\t\t},\n\t\t},\n\t\tdefault: {\n\t\t\tacl: '[]',\n\t\t},\n\t\toptions: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Access Control',\n\t\t\t\tname: 'acl',\n\t\t\t\ttype: 'json',\n\t\t\t\tdefault: '[]',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Cache Control',\n\t\t\t\tname: 'cacheControl',\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: '',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Content Disposition',\n\t\t\t\tname: 'contentDisposition',\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: '',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Content Encoding',\n\t\t\t\tname: 'contentEncoding',\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: '',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Content Language',\n\t\t\t\tname: 'contentLanguage',\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: '',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Content Type',\n\t\t\t\tname: 'contentType',\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: '',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Custom Time',\n\t\t\t\tname: 'customTime',\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: '',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Event Based Hold',\n\t\t\t\tname: 'eventBasedHold',\n\t\t\t\ttype: 'boolean',\n\t\t\t\tdefault: false,\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Metadata',\n\t\t\t\tname: 'metadata',\n\t\t\t\ttype: 'json',\n\t\t\t\tdefault: '{}',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Temporary Hold',\n\t\t\t\tname: 'temporaryHold',\n\t\t\t\ttype: 'boolean',\n\t\t\t\tdefault: false,\n\t\t\t},\n\t\t],\n\t},\n\t{\n\t\tdisplayName: 'Additional Parameters',\n\t\tname: 'createQuery',\n\t\ttype: 'collection',\n\t\tplaceholder: 'Add Additional Parameters',\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tresource: ['object'],\n\t\t\t\toperation: ['create'],\n\t\t\t},\n\t\t},\n\t\tdefault: {},\n\t\toptions: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Content Encoding',\n\t\t\t\tname: 'contentEncoding',\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: '',\n\t\t\t},\n\t\t\t...metagenerationFilters,\n\t\t\t{\n\t\t\t\tdisplayName: 'KMS Key Name',\n\t\t\t\tname: 'kmsKeyName',\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: '',\n\t\t\t},\n\t\t\tpredefinedAclOptions,\n\t\t],\n\t},\n\t{\n\t\tdisplayName: 'Additional Parameters',\n\t\tname: 'getParameters',\n\t\ttype: 'collection',\n\t\tplaceholder: 'Add Additional Parameters',\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tresource: ['object'],\n\t\t\t\toperation: ['delete', 'get'],\n\t\t\t},\n\t\t},\n\t\tdefault: {},\n\t\toptions: [...metagenerationFilters],\n\t},\n\t{\n\t\tdisplayName: 'Additional Parameters',\n\t\tname: 'metagenAndAclQuery',\n\t\ttype: 'collection',\n\t\tplaceholder: 'Add Additional Parameters',\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tresource: ['object'],\n\t\t\t\toperation: ['update'],\n\t\t\t},\n\t\t},\n\t\tdefault: {},\n\t\toptions: [...metagenerationFilters, predefinedAclOptions],\n\t},\n\t{\n\t\tdisplayName: 'Encryption Headers',\n\t\tname: 'encryptionHeaders',\n\t\ttype: 'collection',\n\t\tplaceholder: 'Add Encryption Headers',\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tresource: ['object'],\n\t\t\t\toperation: ['create', 'get', 'update'],\n\t\t\t},\n\t\t},\n\t\tdefault: {},\n\t\toptions: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Encryption Algorithm',\n\t\t\t\tname: 'X-Goog-Encryption-Algorithm',\n\t\t\t\ttype: 'options',\n\t\t\t\tplaceholder:\n\t\t\t\t\t'The encryption algorithm to use, which must be AES256. Use to supply your own key in the request',\n\t\t\t\tdefault: 'AES256',\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'AES256',\n\t\t\t\t\t\tvalue: 'AES256',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Encryption Key',\n\t\t\t\tname: 'X-Goog-Encryption-Key',\n\t\t\t\ttype: 'string',\n\t\t\t\tplaceholder: 'Base64 encoded string of your AES256 encryption key',\n\t\t\t\tdefault: '',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Encryption Key Hash',\n\t\t\t\tname: 'X-Goog-Encryption-Key-Sha256',\n\t\t\t\ttype: 'string',\n\t\t\t\tplaceholder: 'Base64 encoded string of the SHA256 hash of your encryption key',\n\t\t\t\tdefault: '',\n\t\t\t},\n\t\t],\n\t},\n\t{\n\t\tdisplayName: 'Additional Parameters',\n\t\tname: 'listFilters',\n\t\ttype: 'collection',\n\t\tplaceholder: 'Add Additional Parameters',\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tresource: ['object'],\n\t\t\t\toperation: ['getAll'],\n\t\t\t},\n\t\t},\n\t\tdefault: {},\n\t\toptions: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Delimiter',\n\t\t\t\tname: 'delimiter',\n\t\t\t\ttype: 'string',\n\t\t\t\tplaceholder: 'Returns results in directory-like mode, using this value as the delimiter',\n\t\t\t\tdefault: '/',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'End Offset',\n\t\t\t\tname: 'endOffset',\n\t\t\t\ttype: 'string',\n\t\t\t\tplaceholder: 'Filter results to names lexicographically before this value',\n\t\t\t\tdefault: '',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Include Trailing Delimiter',\n\t\t\t\tname: 'includeTrailingDelimiter',\n\t\t\t\ttype: 'boolean',\n\t\t\t\tplaceholder:\n\t\t\t\t\t'If true, objects will appear with exactly one instance of delimiter at the end of the name',\n\t\t\t\tdefault: false,\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Prefix',\n\t\t\t\tname: 'prefix',\n\t\t\t\ttype: 'string',\n\t\t\t\tplaceholder: 'Filter results to names that start with this value',\n\t\t\t\tdefault: '',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Start Offset',\n\t\t\t\tname: 'startOffset',\n\t\t\t\ttype: 'string',\n\t\t\t\tplaceholder: 'Filter results to names lexicographically equal or after this value',\n\t\t\t\tdefault: '',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Versions',\n\t\t\t\tname: 'versions',\n\t\t\t\ttype: 'boolean',\n\t\t\t\tplaceholder: 'If true, list all versions of objects as distinct entries',\n\t\t\t\tdefault: false,\n\t\t\t},\n\t\t],\n\t},\n];\n"],"mappings":"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","names":["FormData"]}