{"version":3,"sources":["../../../nodes/HtmlExtract/HtmlExtract.node.ts"],"sourcesContent":["import cheerio from 'cheerio';\nimport get from 'lodash/get';\nimport type {\n\tIDataObject,\n\tIExecuteFunctions,\n\tINodeExecutionData,\n\tINodeType,\n\tINodeTypeDescription,\n} from 'n8n-workflow';\nimport { NodeConnectionTypes, NodeOperationError } from 'n8n-workflow';\n\ntype Cheerio = ReturnType<typeof cheerio>;\n\ninterface IValueData {\n\tattribute?: string;\n\tcssSelector: string;\n\treturnValue: string;\n\tkey: string;\n\treturnArray: boolean;\n}\n\n// The extraction functions\nconst extractFunctions: {\n\t[key: string]: ($: Cheerio, valueData: IValueData) => string | undefined;\n} = {\n\tattribute: ($: Cheerio, valueData: IValueData): string | undefined =>\n\t\t$.attr(valueData.attribute!),\n\thtml: ($: Cheerio, _valueData: IValueData): string | undefined => $.html() || undefined,\n\ttext: ($: Cheerio, _valueData: IValueData): string | undefined => $.text(),\n\tvalue: ($: Cheerio, _valueData: IValueData): string | undefined => $.val(),\n};\n\n/**\n * Simple helper function which applies options\n */\nfunction getValue($: Cheerio, valueData: IValueData, options: IDataObject) {\n\tconst value = extractFunctions[valueData.returnValue]($, valueData);\n\tif (options.trimValues === false || value === undefined) {\n\t\treturn value;\n\t}\n\n\treturn value.trim();\n}\n\nexport class HtmlExtract implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'HTML Extract',\n\t\tname: 'htmlExtract',\n\t\ticon: 'fa:cut',\n\t\tgroup: ['transform'],\n\t\tversion: 1,\n\t\thidden: true,\n\t\tsubtitle: '={{$parameter[\"sourceData\"] + \": \" + $parameter[\"dataPropertyName\"]}}',\n\t\tdescription: 'Extracts data from HTML',\n\t\tdefaults: {\n\t\t\tname: 'HTML Extract',\n\t\t\tcolor: '#333377',\n\t\t},\n\t\tinputs: [NodeConnectionTypes.Main],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Source Data',\n\t\t\t\tname: 'sourceData',\n\t\t\t\ttype: 'options',\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Binary',\n\t\t\t\t\t\tvalue: 'binary',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'JSON',\n\t\t\t\t\t\tvalue: 'json',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'json',\n\t\t\t\tdescription: 'If HTML should be read from binary or JSON data',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Input Binary Field',\n\t\t\t\tname: 'dataPropertyName',\n\t\t\t\ttype: 'string',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tsourceData: ['binary'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdefault: 'data',\n\t\t\t\trequired: true,\n\t\t\t\thint: 'The name of the input binary field containing the file to be extracted',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'JSON Property',\n\t\t\t\tname: 'dataPropertyName',\n\t\t\t\ttype: 'string',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tsourceData: ['json'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdefault: 'data',\n\t\t\t\trequired: true,\n\t\t\t\tdescription:\n\t\t\t\t\t'Name of the JSON property in which the HTML to extract the data from can be found. The property can either contain a string or an array of strings.',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Extraction Values',\n\t\t\t\tname: 'extractionValues',\n\t\t\t\tplaceholder: 'Add Value',\n\t\t\t\ttype: 'fixedCollection',\n\t\t\t\ttypeOptions: {\n\t\t\t\t\tmultipleValues: true,\n\t\t\t\t},\n\t\t\t\tdefault: {},\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'values',\n\t\t\t\t\t\tdisplayName: 'Values',\n\t\t\t\t\t\tvalues: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdisplayName: 'Key',\n\t\t\t\t\t\t\t\tname: 'key',\n\t\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\t\t\tdescription: 'The key under which the extracted value should be saved',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdisplayName: 'CSS Selector',\n\t\t\t\t\t\t\t\tname: 'cssSelector',\n\t\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\t\t\tplaceholder: '.price',\n\t\t\t\t\t\t\t\tdescription: 'The CSS selector to use',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdisplayName: 'Return Value',\n\t\t\t\t\t\t\t\tname: 'returnValue',\n\t\t\t\t\t\t\t\ttype: 'options',\n\t\t\t\t\t\t\t\toptions: [\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tname: 'Attribute',\n\t\t\t\t\t\t\t\t\t\tvalue: 'attribute',\n\t\t\t\t\t\t\t\t\t\tdescription: 'Get an attribute value like \"class\" from an element',\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tname: 'HTML',\n\t\t\t\t\t\t\t\t\t\tvalue: 'html',\n\t\t\t\t\t\t\t\t\t\tdescription: 'Get the HTML the element contains',\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tname: 'Text',\n\t\t\t\t\t\t\t\t\t\tvalue: 'text',\n\t\t\t\t\t\t\t\t\t\tdescription: 'Get only the text content of the element',\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tname: 'Value',\n\t\t\t\t\t\t\t\t\t\tvalue: 'value',\n\t\t\t\t\t\t\t\t\t\tdescription: 'Get value of an input, select or textarea',\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\tdefault: 'text',\n\t\t\t\t\t\t\t\tdescription: 'What kind of data should be returned',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdisplayName: 'Attribute',\n\t\t\t\t\t\t\t\tname: 'attribute',\n\t\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\t\t\t\treturnValue: ['attribute'],\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\t\t\tplaceholder: 'class',\n\t\t\t\t\t\t\t\tdescription: 'The name of the attribute to return the value off',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdisplayName: 'Return Array',\n\t\t\t\t\t\t\t\tname: 'returnArray',\n\t\t\t\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\t\t\t\tdefault: false,\n\t\t\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t\t\t'Whether to return the values as an array so if multiple ones get found they also get returned separately. If not set all will be returned as a single string.',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\n\t\t\t{\n\t\t\t\tdisplayName: 'Options',\n\t\t\t\tname: 'options',\n\t\t\t\ttype: 'collection',\n\t\t\t\tplaceholder: 'Add option',\n\t\t\t\tdefault: {},\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Trim Values',\n\t\t\t\t\t\tname: 'trimValues',\n\t\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\t\tdefault: true,\n\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t'Whether to remove automatically all spaces and newlines from the beginning and end of the values',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t],\n\t};\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t\tconst items = this.getInputData();\n\n\t\tconst returnData: INodeExecutionData[] = [];\n\n\t\tlet item: INodeExecutionData;\n\t\tfor (let itemIndex = 0; itemIndex < items.length; itemIndex++) {\n\t\t\ttry {\n\t\t\t\tconst dataPropertyName = this.getNodeParameter('dataPropertyName', itemIndex);\n\t\t\t\tconst extractionValues = this.getNodeParameter(\n\t\t\t\t\t'extractionValues',\n\t\t\t\t\titemIndex,\n\t\t\t\t) as IDataObject;\n\t\t\t\tconst options = this.getNodeParameter('options', itemIndex, {});\n\t\t\t\tconst sourceData = this.getNodeParameter('sourceData', itemIndex) as string;\n\n\t\t\t\titem = items[itemIndex];\n\n\t\t\t\tlet htmlArray: string[] | string = [];\n\t\t\t\tif (sourceData === 'json') {\n\t\t\t\t\tconst data = get(item.json, dataPropertyName, undefined);\n\t\t\t\t\tif (data === undefined) {\n\t\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t\t`No property named \"${dataPropertyName}\" exists!`,\n\t\t\t\t\t\t\t{ itemIndex },\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\thtmlArray = data as string;\n\t\t\t\t} else {\n\t\t\t\t\tthis.helpers.assertBinaryData(itemIndex, dataPropertyName);\n\t\t\t\t\tconst binaryDataBuffer = await this.helpers.getBinaryDataBuffer(\n\t\t\t\t\t\titemIndex,\n\t\t\t\t\t\tdataPropertyName,\n\t\t\t\t\t);\n\t\t\t\t\thtmlArray = binaryDataBuffer.toString('utf-8');\n\t\t\t\t}\n\n\t\t\t\t// Convert it always to array that it works with a string or an array of strings\n\t\t\t\tif (!Array.isArray(htmlArray)) {\n\t\t\t\t\thtmlArray = [htmlArray];\n\t\t\t\t}\n\n\t\t\t\tfor (const html of htmlArray as string[]) {\n\t\t\t\t\tconst $ = cheerio.load(html);\n\n\t\t\t\t\tconst newItem: INodeExecutionData = {\n\t\t\t\t\t\tjson: {},\n\t\t\t\t\t\tpairedItem: {\n\t\t\t\t\t\t\titem: itemIndex,\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\n\t\t\t\t\t// Iterate over all the defined values which should be extracted\n\t\t\t\t\tlet htmlElement;\n\t\t\t\t\tfor (const valueData of extractionValues.values as IValueData[]) {\n\t\t\t\t\t\thtmlElement = $(valueData.cssSelector);\n\n\t\t\t\t\t\tif (valueData.returnArray) {\n\t\t\t\t\t\t\t// An array should be returned so iterate over one\n\t\t\t\t\t\t\t// value at a time\n\t\t\t\t\t\t\tnewItem.json[valueData.key] = [];\n\t\t\t\t\t\t\thtmlElement.each((_, el) => {\n\t\t\t\t\t\t\t\t(newItem.json[valueData.key] as Array<string | undefined>).push(\n\t\t\t\t\t\t\t\t\tgetValue($(el), valueData, options),\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// One single value should be returned\n\t\t\t\t\t\t\tnewItem.json[valueData.key] = getValue(htmlElement, valueData, options);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturnData.push(newItem);\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\treturnData.push({\n\t\t\t\t\t\tjson: {\n\t\t\t\t\t\t\terror: error.message,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tpairedItem: {\n\t\t\t\t\t\t\titem: itemIndex,\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\n\t\treturn [returnData];\n\t}\n}\n"],"mappings":"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","names":["get","cheerio"]}