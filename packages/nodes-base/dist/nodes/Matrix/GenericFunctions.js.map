{"version":3,"sources":["../../../nodes/Matrix/GenericFunctions.ts"],"sourcesContent":["import type {\n\tIDataObject,\n\tIExecuteFunctions,\n\tIHttpRequestMethods,\n\tILoadOptionsFunctions,\n\tIRequestOptions,\n\tJsonObject,\n} from 'n8n-workflow';\nimport { NodeApiError, NodeOperationError } from 'n8n-workflow';\nimport { v4 as uuid } from 'uuid';\n\nexport async function matrixApiRequest(\n\tthis: IExecuteFunctions | ILoadOptionsFunctions,\n\tmethod: IHttpRequestMethods,\n\tresource: string,\n\tbody: string | object = {},\n\tquery: IDataObject = {},\n\theaders: IDataObject | undefined = undefined,\n\toption: IDataObject = {},\n) {\n\tlet options: IRequestOptions = {\n\t\tmethod,\n\t\theaders: headers || {\n\t\t\t'Content-Type': 'application/json; charset=utf-8',\n\t\t},\n\t\tbody,\n\t\tqs: query,\n\t\turi: '',\n\t\tjson: true,\n\t};\n\toptions = Object.assign({}, options, option);\n\tif (Object.keys(body).length === 0) {\n\t\tdelete options.body;\n\t}\n\tif (Object.keys(query).length === 0) {\n\t\tdelete options.qs;\n\t}\n\ttry {\n\t\tconst credentials = await this.getCredentials('matrixApi');\n\n\t\toptions.uri = `${credentials.homeserverUrl}/_matrix/${\n\t\t\toption.overridePrefix || 'client'\n\t\t}/r0${resource}`;\n\t\toptions.headers!.Authorization = `Bearer ${credentials.accessToken}`;\n\t\tconst response = await this.helpers.request(options);\n\n\t\t// When working with images, the request cannot be JSON (it's raw binary data)\n\t\t// But the output is JSON so we have to parse it manually.\n\t\t//@ts-ignore\n\t\treturn options.overridePrefix === 'media' ? JSON.parse(response as string) : response;\n\t} catch (error) {\n\t\tthrow new NodeApiError(this.getNode(), error as JsonObject);\n\t}\n}\n\nexport async function handleMatrixCall(\n\tthis: IExecuteFunctions,\n\tindex: number,\n\tresource: string,\n\toperation: string,\n): Promise<any> {\n\tif (resource === 'account') {\n\t\tif (operation === 'me') {\n\t\t\treturn await matrixApiRequest.call(this, 'GET', '/account/whoami');\n\t\t}\n\t} else if (resource === 'room') {\n\t\tif (operation === 'create') {\n\t\t\tconst name = this.getNodeParameter('roomName', index) as string;\n\t\t\tconst preset = this.getNodeParameter('preset', index) as string;\n\t\t\tconst roomAlias = this.getNodeParameter('roomAlias', index) as string;\n\t\t\tconst body: IDataObject = {\n\t\t\t\tname,\n\t\t\t\tpreset,\n\t\t\t};\n\t\t\tif (roomAlias) {\n\t\t\t\tbody.room_alias_name = roomAlias;\n\t\t\t}\n\t\t\treturn await matrixApiRequest.call(this, 'POST', '/createRoom', body);\n\t\t} else if (operation === 'join') {\n\t\t\tconst roomIdOrAlias = this.getNodeParameter('roomIdOrAlias', index) as string;\n\t\t\treturn await matrixApiRequest.call(this, 'POST', `/rooms/${roomIdOrAlias}/join`);\n\t\t} else if (operation === 'leave') {\n\t\t\tconst roomId = this.getNodeParameter('roomId', index) as string;\n\t\t\treturn await matrixApiRequest.call(this, 'POST', `/rooms/${roomId}/leave`);\n\t\t} else if (operation === 'invite') {\n\t\t\tconst roomId = this.getNodeParameter('roomId', index) as string;\n\t\t\tconst userId = this.getNodeParameter('userId', index) as string;\n\t\t\tconst body: IDataObject = {\n\t\t\t\tuser_id: userId,\n\t\t\t};\n\t\t\treturn await matrixApiRequest.call(this, 'POST', `/rooms/${roomId}/invite`, body);\n\t\t} else if (operation === 'kick') {\n\t\t\tconst roomId = this.getNodeParameter('roomId', index) as string;\n\t\t\tconst userId = this.getNodeParameter('userId', index) as string;\n\t\t\tconst reason = this.getNodeParameter('reason', index) as string;\n\t\t\tconst body: IDataObject = {\n\t\t\t\tuser_id: userId,\n\t\t\t\treason,\n\t\t\t};\n\t\t\treturn await matrixApiRequest.call(this, 'POST', `/rooms/${roomId}/kick`, body);\n\t\t}\n\t} else if (resource === 'message') {\n\t\tif (operation === 'create') {\n\t\t\tconst roomId = this.getNodeParameter('roomId', index) as string;\n\t\t\tconst text = this.getNodeParameter('text', index, '') as string;\n\t\t\tconst messageType = this.getNodeParameter('messageType', index) as string;\n\t\t\tconst messageFormat = this.getNodeParameter('messageFormat', index) as string;\n\t\t\tconst body: IDataObject = {\n\t\t\t\tmsgtype: messageType,\n\t\t\t\tbody: text,\n\t\t\t};\n\t\t\tif (messageFormat === 'org.matrix.custom.html') {\n\t\t\t\tconst fallbackText = this.getNodeParameter('fallbackText', index, '') as string;\n\t\t\t\tbody.format = messageFormat;\n\t\t\t\tbody.formatted_body = text;\n\t\t\t\tbody.body = fallbackText;\n\t\t\t}\n\t\t\tconst messageId = uuid();\n\t\t\treturn await matrixApiRequest.call(\n\t\t\t\tthis,\n\t\t\t\t'PUT',\n\t\t\t\t`/rooms/${roomId}/send/m.room.message/${messageId}`,\n\t\t\t\tbody,\n\t\t\t);\n\t\t} else if (operation === 'getAll') {\n\t\t\tconst roomId = this.getNodeParameter('roomId', index) as string;\n\t\t\tconst returnAll = this.getNodeParameter('returnAll', index);\n\t\t\tconst otherOptions = this.getNodeParameter('otherOptions', index) as IDataObject;\n\t\t\tconst returnData: IDataObject[] = [];\n\n\t\t\tif (returnAll) {\n\t\t\t\tlet responseData;\n\t\t\t\tlet from;\n\t\t\t\tdo {\n\t\t\t\t\tconst qs: IDataObject = {\n\t\t\t\t\t\tdir: 'b', // Get latest messages first - doesn't return anything if we use f without a previous token.\n\t\t\t\t\t\tfrom,\n\t\t\t\t\t};\n\n\t\t\t\t\tif (otherOptions.filter) {\n\t\t\t\t\t\tqs.filter = otherOptions.filter;\n\t\t\t\t\t}\n\n\t\t\t\t\tresponseData = await matrixApiRequest.call(\n\t\t\t\t\t\tthis,\n\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t`/rooms/${roomId}/messages`,\n\t\t\t\t\t\t{},\n\t\t\t\t\t\tqs,\n\t\t\t\t\t);\n\t\t\t\t\treturnData.push.apply(returnData, responseData.chunk as IDataObject[]);\n\t\t\t\t\tfrom = responseData.end;\n\t\t\t\t} while (responseData.chunk.length > 0);\n\t\t\t} else {\n\t\t\t\tconst limit = this.getNodeParameter('limit', index);\n\t\t\t\tconst qs: IDataObject = {\n\t\t\t\t\tdir: 'b', // GetfallbackText latest messages first - doesn't return anything if we use f without a previous token.\n\t\t\t\t\tlimit,\n\t\t\t\t};\n\n\t\t\t\tif (otherOptions.filter) {\n\t\t\t\t\tqs.filter = otherOptions.filter;\n\t\t\t\t}\n\n\t\t\t\tconst responseData = await matrixApiRequest.call(\n\t\t\t\t\tthis,\n\t\t\t\t\t'GET',\n\t\t\t\t\t`/rooms/${roomId}/messages`,\n\t\t\t\t\t{},\n\t\t\t\t\tqs,\n\t\t\t\t);\n\t\t\t\treturnData.push.apply(returnData, responseData.chunk as IDataObject[]);\n\t\t\t}\n\n\t\t\treturn returnData;\n\t\t}\n\t} else if (resource === 'event') {\n\t\tif (operation === 'get') {\n\t\t\tconst roomId = this.getNodeParameter('roomId', index) as string;\n\t\t\tconst eventId = this.getNodeParameter('eventId', index) as string;\n\t\t\treturn await matrixApiRequest.call(this, 'GET', `/rooms/${roomId}/event/${eventId}`);\n\t\t}\n\t} else if (resource === 'media') {\n\t\tif (operation === 'upload') {\n\t\t\tconst roomId = this.getNodeParameter('roomId', index) as string;\n\t\t\tconst mediaType = this.getNodeParameter('mediaType', index) as string;\n\t\t\tconst binaryPropertyName = this.getNodeParameter('binaryPropertyName', index);\n\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', index);\n\n\t\t\tlet body;\n\t\t\tconst qs: IDataObject = {};\n\t\t\tconst headers: IDataObject = {};\n\n\t\t\tconst { fileName, mimeType } = this.helpers.assertBinaryData(index, binaryPropertyName);\n\t\t\tbody = await this.helpers.getBinaryDataBuffer(index, binaryPropertyName);\n\n\t\t\tif (additionalFields.fileName) {\n\t\t\t\tqs.filename = additionalFields.fileName as string;\n\t\t\t} else {\n\t\t\t\tqs.filename = fileName;\n\t\t\t}\n\n\t\t\theaders['Content-Type'] = mimeType;\n\t\t\theaders.accept = 'application/json,text/*;q=0.99';\n\n\t\t\tconst uploadRequestResult = await matrixApiRequest.call(\n\t\t\t\tthis,\n\t\t\t\t'POST',\n\t\t\t\t'/upload',\n\t\t\t\tbody,\n\t\t\t\tqs,\n\t\t\t\theaders,\n\t\t\t\t{\n\t\t\t\t\toverridePrefix: 'media',\n\t\t\t\t\tjson: false,\n\t\t\t\t},\n\t\t\t);\n\n\t\t\tbody = {\n\t\t\t\tmsgtype: `m.${mediaType}`,\n\t\t\t\tbody: qs.filename,\n\t\t\t\turl: uploadRequestResult.content_uri,\n\t\t\t};\n\t\t\tconst messageId = uuid();\n\t\t\treturn await matrixApiRequest.call(\n\t\t\t\tthis,\n\t\t\t\t'PUT',\n\t\t\t\t`/rooms/${roomId}/send/m.room.message/${messageId}`,\n\t\t\t\tbody,\n\t\t\t);\n\t\t}\n\t} else if (resource === 'roomMember') {\n\t\tif (operation === 'getAll') {\n\t\t\tconst roomId = this.getNodeParameter('roomId', index) as string;\n\t\t\tconst filters = this.getNodeParameter('filters', index);\n\t\t\tconst qs: IDataObject = {\n\t\t\t\tmembership: filters.membership ? filters.membership : '',\n\t\t\t\tnot_membership: filters.notMembership ? filters.notMembership : '',\n\t\t\t};\n\t\t\tconst roomMembersResponse = await matrixApiRequest.call(\n\t\t\t\tthis,\n\t\t\t\t'GET',\n\t\t\t\t`/rooms/${roomId}/members`,\n\t\t\t\t{},\n\t\t\t\tqs,\n\t\t\t);\n\t\t\treturn roomMembersResponse.chunk;\n\t\t}\n\t}\n\n\tthrow new NodeOperationError(this.getNode(), 'Not implemented yet');\n}\n"],"mappings":"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","names":["uuid"]}