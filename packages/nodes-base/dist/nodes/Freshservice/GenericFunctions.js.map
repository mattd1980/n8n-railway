{"version":3,"sources":["../../../nodes/Freshservice/GenericFunctions.ts"],"sourcesContent":["import { omit } from 'lodash';\nimport type {\n\tIExecuteFunctions,\n\tIHookFunctions,\n\tIDataObject,\n\tILoadOptionsFunctions,\n\tJsonObject,\n\tIHttpRequestMethods,\n\tIRequestOptions,\n} from 'n8n-workflow';\nimport { NodeApiError, NodeOperationError } from 'n8n-workflow';\n\nimport type {\n\tAddressFixedCollection,\n\tFreshserviceCredentials,\n\tLoadedUser,\n\tRolesParameter,\n} from './types';\n\nexport async function freshserviceApiRequest(\n\tthis: IExecuteFunctions | IHookFunctions | ILoadOptionsFunctions,\n\tmethod: IHttpRequestMethods,\n\tendpoint: string,\n\tbody: IDataObject = {},\n\tqs: IDataObject = {},\n) {\n\tconst { apiKey, domain } = await this.getCredentials<FreshserviceCredentials>('freshserviceApi');\n\tconst encodedApiKey = Buffer.from(`${apiKey}:X`).toString('base64');\n\n\tconst options: IRequestOptions = {\n\t\theaders: {\n\t\t\tAuthorization: `Basic ${encodedApiKey}`,\n\t\t},\n\t\tmethod,\n\t\tbody,\n\t\tqs,\n\t\turi: `https://${domain}.freshservice.com/api/v2${endpoint}`,\n\t\tjson: true,\n\t};\n\n\tif (!Object.keys(body).length) {\n\t\tdelete options.body;\n\t}\n\n\tif (!Object.keys(qs).length) {\n\t\tdelete options.qs;\n\t}\n\n\ttry {\n\t\treturn await this.helpers.request(options);\n\t} catch (error) {\n\t\tif (error.error.description === 'Validation failed') {\n\t\t\tconst numberOfErrors = error.error.errors.length;\n\t\t\tconst message = 'Please check your parameters';\n\n\t\t\tif (numberOfErrors === 1) {\n\t\t\t\tconst [validationError] = error.error.errors;\n\t\t\t\tthrow new NodeApiError(this.getNode(), error as JsonObject, {\n\t\t\t\t\tmessage,\n\t\t\t\t\tdescription: `For ${validationError.field}: ${validationError.message}`,\n\t\t\t\t});\n\t\t\t} else if (numberOfErrors > 1) {\n\t\t\t\tthrow new NodeApiError(this.getNode(), error as JsonObject, {\n\t\t\t\t\tmessage,\n\t\t\t\t\tdescription: \"For more information, expand 'details' below and look at 'cause' section\",\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tthrow new NodeApiError(this.getNode(), error as JsonObject);\n\t}\n}\n\nexport async function freshserviceApiRequestAllItems(\n\tthis: IExecuteFunctions | IHookFunctions,\n\tmethod: IHttpRequestMethods,\n\tendpoint: string,\n\tbody: IDataObject = {},\n\tqs: IDataObject = {},\n) {\n\tconst returnData: IDataObject[] = [];\n\tqs.page = 1;\n\tlet items;\n\n\tdo {\n\t\tconst responseData = await freshserviceApiRequest.call(this, method, endpoint, body, qs);\n\t\tconst key = Object.keys(responseData as IDataObject)[0];\n\t\titems = responseData[key];\n\t\tif (!items.length) return returnData;\n\t\treturnData.push(...(items as IDataObject[]));\n\t\tqs.page++;\n\t} while (items.length >= 30);\n\n\treturn returnData;\n}\n\nexport async function handleListing(\n\tthis: IExecuteFunctions,\n\tmethod: IHttpRequestMethods,\n\tendpoint: string,\n\tbody: IDataObject = {},\n\tqs: IDataObject = {},\n) {\n\tconst returnAll = this.getNodeParameter('returnAll', 0);\n\n\tif (returnAll) {\n\t\treturn await freshserviceApiRequestAllItems.call(this, method, endpoint, body, qs);\n\t}\n\n\tconst responseData = await freshserviceApiRequestAllItems.call(this, method, endpoint, body, qs);\n\tconst limit = this.getNodeParameter('limit', 0);\n\n\treturn responseData.slice(0, limit);\n}\n\nexport const toOptions = (loadedResources: LoadedResource[]) => {\n\treturn loadedResources\n\t\t.map(({ id, name }) => ({ value: id, name }))\n\t\t.sort((a, b) => a.name.localeCompare(b.name));\n};\n\nexport const toUserOptions = (loadedUsers: LoadedUser[]) => {\n\treturn loadedUsers\n\t\t.map(({ id, last_name, first_name }) => {\n\t\t\treturn {\n\t\t\t\tvalue: id,\n\t\t\t\tname: last_name ? `${last_name}, ${first_name}` : `${first_name}`,\n\t\t\t};\n\t\t})\n\t\t.sort((a, b) => a.name.localeCompare(b.name));\n};\n\n/**\n * Ensure at least one role has been specified.\n */\nexport function validateAssignmentScopeGroup(this: IExecuteFunctions, roles: RolesParameter) {\n\tif (!roles.roleProperties?.length) {\n\t\tthrow new NodeOperationError(this.getNode(), 'Please specify a role for the agent to create.');\n\t}\n}\n\nexport function sanitizeAssignmentScopeGroup(this: IExecuteFunctions, roles: RolesParameter) {\n\troles.roleProperties.forEach((roleProperty) => {\n\t\tif (roleProperty.assignment_scope === 'specified_groups' && !roleProperty?.groups?.length) {\n\t\t\tthrow new NodeOperationError(\n\t\t\t\tthis.getNode(),\n\t\t\t\t'Please specify a group for every role of the agent to create.',\n\t\t\t);\n\t\t}\n\n\t\t// remove the `groups` param, only needed for scopes other than `specified_groups`\n\t\tif (roleProperty.assignment_scope !== 'specified_groups' && roleProperty.groups) {\n\t\t\tdelete roleProperty.groups;\n\t\t}\n\t});\n}\n\n/**\n * Adjust a roles fixed collection into the format expected by Freshservice API.\n */\nexport function adjustAgentRoles(roles: RolesParameter) {\n\treturn {\n\t\troles: roles.roleProperties.map(({ role, assignment_scope, groups }) => {\n\t\t\treturn {\n\t\t\t\trole_id: role,\n\t\t\t\tassignment_scope,\n\t\t\t\tgroups,\n\t\t\t};\n\t\t}),\n\t};\n}\n\nexport function formatFilters(filters: IDataObject) {\n\tconst query = Object.keys(filters)\n\t\t.map((key) => {\n\t\t\tconst value = filters[key];\n\n\t\t\tif (!isNaN(Number(value))) {\n\t\t\t\treturn `${key}:${filters[key]}`; // number\n\t\t\t}\n\n\t\t\tif (typeof value === 'string' && value.endsWith('Z')) {\n\t\t\t\treturn `${key}:'${value.split('T')[0]}'`; // date\n\t\t\t}\n\n\t\t\treturn `${key}:'${filters[key]}'`; // string\n\t\t})\n\t\t.join(' AND ');\n\n\treturn {\n\t\tquery: `\"${query}\"`,\n\t};\n}\n\nexport function validateUpdateFields(\n\tthis: IExecuteFunctions,\n\tupdateFields: IDataObject,\n\tresource: string,\n) {\n\tif (!Object.keys(updateFields).length) {\n\t\tconst twoWordResources: { [key: string]: string } = {\n\t\t\tagentGroup: 'agent group',\n\t\t\tagentRole: 'agent role',\n\t\t\tassetType: 'asset type',\n\t\t\trequesterGroup: 'requester group',\n\t\t};\n\n\t\tthrow new NodeOperationError(\n\t\t\tthis.getNode(),\n\t\t\t`Please enter at least one field to update for the ${\n\t\t\t\ttwoWordResources[resource] ?? resource\n\t\t\t}.`,\n\t\t);\n\t}\n}\n\nexport const toArray = (str: string) => str.split(',').map((e) => e.trim());\n\nexport function adjustAddress(fixedCollection: IDataObject & AddressFixedCollection) {\n\tif (!fixedCollection.address) return fixedCollection;\n\n\tconst adjusted = omit(fixedCollection, ['address']);\n\tadjusted.address = fixedCollection.address.addressFields;\n\n\treturn adjusted;\n}\n"],"mappings":"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","names":[]}