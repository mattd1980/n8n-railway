{"version":3,"sources":["../../../../nodes/Splunk/v1/GenericFunctions.ts"],"sourcesContent":["import type {\n\tIExecuteFunctions,\n\tIDataObject,\n\tILoadOptionsFunctions,\n\tJsonObject,\n\tIRequestOptions,\n\tIHttpRequestMethods,\n} from 'n8n-workflow';\nimport { NodeApiError, NodeOperationError, sleep } from 'n8n-workflow';\nimport { parseString } from 'xml2js';\n\nimport {\n\tSPLUNK,\n\ttype SplunkError,\n\ttype SplunkFeedResponse,\n\ttype SplunkResultResponse,\n\ttype SplunkSearchResponse,\n} from './types';\n\n// ----------------------------------------\n//            entry formatting\n// ----------------------------------------\n\nfunction compactEntryContent(splunkObject: any): any {\n\tif (typeof splunkObject !== 'object') {\n\t\treturn {};\n\t}\n\n\tif (Array.isArray(splunkObject)) {\n\t\treturn splunkObject.reduce((acc, cur) => {\n\t\t\tacc = { ...acc, ...compactEntryContent(cur) };\n\t\t\treturn acc;\n\t\t}, {});\n\t}\n\n\tif (splunkObject[SPLUNK.DICT]) {\n\t\tconst obj = splunkObject[SPLUNK.DICT][SPLUNK.KEY];\n\t\treturn { [splunkObject.$.name]: compactEntryContent(obj) };\n\t}\n\n\tif (splunkObject[SPLUNK.LIST]) {\n\t\tconst items = splunkObject[SPLUNK.LIST][SPLUNK.ITEM];\n\t\treturn { [splunkObject.$.name]: items };\n\t}\n\n\tif (splunkObject._) {\n\t\treturn {\n\t\t\t[splunkObject.$.name]: splunkObject._,\n\t\t};\n\t}\n\n\treturn {\n\t\t[splunkObject.$.name]: '',\n\t};\n}\n\nfunction formatEntryContent(content: any): any {\n\treturn content[SPLUNK.DICT][SPLUNK.KEY].reduce((acc: any, cur: any) => {\n\t\tacc = { ...acc, ...compactEntryContent(cur) };\n\t\treturn acc;\n\t}, {});\n}\n\nfunction formatEntry(entry: any): any {\n\tconst { content, link, ...rest } = entry;\n\tconst formattedEntry = { ...rest, ...formatEntryContent(content) };\n\n\tif (formattedEntry.id) {\n\t\tformattedEntry.entryUrl = formattedEntry.id;\n\t\tformattedEntry.id = formattedEntry.id.split('/').pop();\n\t}\n\n\treturn formattedEntry;\n}\n\n// ----------------------------------------\n//            search formatting\n// ----------------------------------------\n\nexport function formatSearch(responseData: SplunkSearchResponse) {\n\tconst { entry: entries } = responseData;\n\n\tif (!entries) return [];\n\n\treturn Array.isArray(entries) ? entries.map(formatEntry) : [formatEntry(entries)];\n}\n\n// ----------------------------------------\n//                 utils\n// ----------------------------------------\n\nexport async function parseXml(xml: string) {\n\treturn await new Promise((resolve, reject) => {\n\t\tparseString(xml, { explicitArray: false }, (error, result) => {\n\t\t\terror ? reject(error) : resolve(result);\n\t\t});\n\t});\n}\n\nexport function extractErrorDescription(rawError: SplunkError) {\n\tconst messages = rawError.response?.messages;\n\treturn messages ? { [messages.msg.$.type.toLowerCase()]: messages.msg._ } : rawError;\n}\n\nexport function toUnixEpoch(timestamp: string) {\n\treturn Date.parse(timestamp) / 1000;\n}\n\nexport async function splunkApiRequest(\n\tthis: IExecuteFunctions | ILoadOptionsFunctions,\n\tmethod: IHttpRequestMethods,\n\tendpoint: string,\n\tbody: IDataObject = {},\n\tqs: IDataObject = {},\n): Promise<any> {\n\tconst { baseUrl, allowUnauthorizedCerts } = await this.getCredentials('splunkApi');\n\n\tconst options: IRequestOptions = {\n\t\theaders: {\n\t\t\t'Content-Type': 'application/x-www-form-urlencoded',\n\t\t},\n\t\tmethod,\n\t\tform: body,\n\t\tqs,\n\t\turi: `${baseUrl}${endpoint}`,\n\t\tjson: true,\n\t\trejectUnauthorized: !allowUnauthorizedCerts,\n\t\tuseQuerystring: true, // serialize roles array as `roles=A&roles=B`\n\t};\n\n\tif (!Object.keys(body).length) {\n\t\tdelete options.body;\n\t}\n\n\tif (!Object.keys(qs).length) {\n\t\tdelete options.qs;\n\t}\n\n\tlet result;\n\ttry {\n\t\tlet attempts = 0;\n\n\t\tdo {\n\t\t\ttry {\n\t\t\t\tconst response = await this.helpers.requestWithAuthentication.call(\n\t\t\t\t\tthis,\n\t\t\t\t\t'splunkApi',\n\t\t\t\t\toptions,\n\t\t\t\t);\n\t\t\t\tresult = await parseXml(response);\n\t\t\t\treturn result;\n\t\t\t} catch (error) {\n\t\t\t\tif (attempts >= 5) {\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\t\t\t\tawait sleep(1000);\n\t\t\t\tattempts++;\n\t\t\t}\n\t\t} while (true);\n\t} catch (error) {\n\t\tif (result === undefined) {\n\t\t\tthrow new NodeOperationError(this.getNode(), 'No response from API call', {\n\t\t\t\tdescription: \"Try to use 'Retry On Fail' option from node's settings\",\n\t\t\t});\n\t\t}\n\t\tif (error?.cause?.code === 'ECONNREFUSED') {\n\t\t\tthrow new NodeApiError(this.getNode(), { ...(error as JsonObject), code: 401 });\n\t\t}\n\n\t\tconst rawError = (await parseXml(error.error as string)) as SplunkError;\n\t\terror = extractErrorDescription(rawError);\n\n\t\tif ('fatal' in error) {\n\t\t\terror = { error: error.fatal };\n\t\t}\n\n\t\tthrow new NodeApiError(this.getNode(), error as JsonObject);\n\t}\n}\n\n// ----------------------------------------\n//            feed formatting\n// ----------------------------------------\n\nexport function formatFeed(responseData: SplunkFeedResponse) {\n\tconst { entry: entries } = responseData.feed;\n\n\tif (!entries) return [];\n\n\treturn Array.isArray(entries) ? entries.map(formatEntry) : [formatEntry(entries)];\n}\n\n// ----------------------------------------\n//            result formatting\n// ----------------------------------------\nfunction compactResult(splunkObject: any): any {\n\tif (typeof splunkObject !== 'object') {\n\t\treturn {};\n\t}\n\n\tif (Array.isArray(splunkObject?.value) && splunkObject?.value[0]?.text) {\n\t\treturn {\n\t\t\t[splunkObject.$.k]: splunkObject.value.map((v: { text: string }) => v.text).join(','),\n\t\t};\n\t}\n\n\tif (!splunkObject?.$?.k || !splunkObject?.value?.text) {\n\t\treturn {};\n\t}\n\n\treturn {\n\t\t[splunkObject.$.k]: splunkObject.value.text,\n\t};\n}\n\nfunction formatResult(field: any): any {\n\treturn field.reduce((acc: any, cur: any) => {\n\t\tacc = { ...acc, ...compactResult(cur) };\n\t\treturn acc;\n\t}, {});\n}\n\nexport function formatResults(responseData: SplunkResultResponse) {\n\tconst results = responseData.results.result;\n\tif (!results) return [];\n\n\treturn Array.isArray(results)\n\t\t? results.map((r) => formatResult(r.field))\n\t\t: [formatResult(results.field)];\n}\n\n// ----------------------------------------\n//             param loaders\n// ----------------------------------------\n\n/**\n * Set count of entries to retrieve.\n */\nexport function setCount(this: IExecuteFunctions, qs: IDataObject) {\n\tqs.count = this.getNodeParameter('returnAll', 0) ? 0 : this.getNodeParameter('limit', 0);\n}\n\nexport function populate(source: IDataObject, destination: IDataObject) {\n\tif (Object.keys(source).length) {\n\t\tObject.assign(destination, source);\n\t}\n}\n\n/**\n * Retrieve an ID, with tolerance when contained in an endpoint.\n * The field `id` in Splunk API responses is a full link.\n */\nexport function getId(\n\tthis: IExecuteFunctions,\n\ti: number,\n\tidType: 'userId' | 'searchJobId' | 'searchConfigurationId',\n\tendpoint: string,\n) {\n\tconst id = this.getNodeParameter(idType, i) as string;\n\n\treturn id.includes(endpoint) ? id.split(endpoint).pop() : id;\n}\n"],"mappings":"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","names":[]}