{"version":3,"sources":["../../../nodes/Linear/Linear.node.ts"],"sourcesContent":["import {\n\ttype IExecuteFunctions,\n\ttype ICredentialDataDecryptedObject,\n\ttype ICredentialsDecrypted,\n\ttype ICredentialTestFunctions,\n\ttype IDataObject,\n\ttype ILoadOptionsFunctions,\n\ttype INodeCredentialTestResult,\n\ttype INodeExecutionData,\n\ttype INodePropertyOptions,\n\ttype INodeType,\n\ttype INodeTypeDescription,\n\ttype JsonObject,\n\tNodeConnectionTypes,\n} from 'n8n-workflow';\n\nimport {\n\tlinearApiRequest,\n\tlinearApiRequestAllItems,\n\tsort,\n\tvalidateCredentials,\n} from './GenericFunctions';\nimport { issueFields, issueOperations } from './IssueDescription';\nimport { query } from './Queries';\ninterface IGraphqlBody {\n\tquery: string;\n\tvariables: IDataObject;\n}\nexport class Linear implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'Linear',\n\t\tname: 'linear',\n\t\ticon: 'file:linear.svg',\n\t\tgroup: ['output'],\n\t\tversion: 1,\n\t\tsubtitle: '={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}',\n\t\tdescription: 'Consume Linear API',\n\t\tdefaults: {\n\t\t\tname: 'Linear',\n\t\t},\n\t\tusableAsTool: true,\n\t\tinputs: [NodeConnectionTypes.Main],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tcredentials: [\n\t\t\t{\n\t\t\t\tname: 'linearApi',\n\t\t\t\trequired: true,\n\t\t\t\ttestedBy: 'linearApiTest',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tauthentication: ['apiToken'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'linearOAuth2Api',\n\t\t\t\trequired: true,\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tauthentication: ['oAuth2'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Authentication',\n\t\t\t\tname: 'authentication',\n\t\t\t\ttype: 'options',\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'API Token',\n\t\t\t\t\t\tvalue: 'apiToken',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'OAuth2',\n\t\t\t\t\t\tvalue: 'oAuth2',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'apiToken',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Resource',\n\t\t\t\tname: 'resource',\n\t\t\t\ttype: 'options',\n\t\t\t\tnoDataExpression: true,\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Issue',\n\t\t\t\t\t\tvalue: 'issue',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'issue',\n\t\t\t},\n\t\t\t...issueOperations,\n\t\t\t...issueFields,\n\t\t],\n\t};\n\n\tmethods = {\n\t\tcredentialTest: {\n\t\t\tasync linearApiTest(\n\t\t\t\tthis: ICredentialTestFunctions,\n\t\t\t\tcredential: ICredentialsDecrypted,\n\t\t\t): Promise<INodeCredentialTestResult> {\n\t\t\t\ttry {\n\t\t\t\t\tawait validateCredentials.call(this, credential.data as ICredentialDataDecryptedObject);\n\t\t\t\t} catch (error) {\n\t\t\t\t\tconst { error: err } = error as JsonObject;\n\t\t\t\t\tconst errors = (err as IDataObject).errors as [{ extensions: { code: string } }];\n\t\t\t\t\tconst authenticationError = Boolean(\n\t\t\t\t\t\terrors.filter((e) => e.extensions.code === 'AUTHENTICATION_ERROR').length,\n\t\t\t\t\t);\n\t\t\t\t\tif (authenticationError) {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tstatus: 'Error',\n\t\t\t\t\t\t\tmessage: 'The security token included in the request is invalid',\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\tstatus: 'OK',\n\t\t\t\t\tmessage: 'Connection successful!',\n\t\t\t\t};\n\t\t\t},\n\t\t},\n\t\tloadOptions: {\n\t\t\tasync getTeams(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst returnData: INodePropertyOptions[] = [];\n\t\t\t\tconst body = {\n\t\t\t\t\tquery: query.getTeams(),\n\t\t\t\t\tvariables: {\n\t\t\t\t\t\t$first: 10,\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t\tconst teams = await linearApiRequestAllItems.call(this, 'data.teams', body);\n\n\t\t\t\tfor (const team of teams) {\n\t\t\t\t\treturnData.push({\n\t\t\t\t\t\tname: team.name,\n\t\t\t\t\t\tvalue: team.id,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn returnData;\n\t\t\t},\n\t\t\tasync getUsers(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst returnData: INodePropertyOptions[] = [];\n\t\t\t\tconst body = {\n\t\t\t\t\tquery: query.getUsers(),\n\t\t\t\t\tvariables: {\n\t\t\t\t\t\t$first: 10,\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t\tconst users = await linearApiRequestAllItems.call(this, 'data.users', body);\n\n\t\t\t\tfor (const user of users) {\n\t\t\t\t\treturnData.push({\n\t\t\t\t\t\tname: user.name,\n\t\t\t\t\t\tvalue: user.id,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn returnData;\n\t\t\t},\n\t\t\tasync getStates(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tlet teamId = this.getNodeParameter('teamId', null) as string;\n\t\t\t\t// Handle Updates\n\t\t\t\tif (!teamId) {\n\t\t\t\t\tconst updateFields = this.getNodeParameter('updateFields', null) as IDataObject;\n\t\t\t\t\t// If not updating the team look up the current team\n\t\t\t\t\tif (!updateFields.teamId) {\n\t\t\t\t\t\tconst issueId = this.getNodeParameter('issueId');\n\t\t\t\t\t\tconst body = {\n\t\t\t\t\t\t\tquery: query.getIssueTeam(),\n\t\t\t\t\t\t\tvariables: {\n\t\t\t\t\t\t\t\tissueId,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t};\n\t\t\t\t\t\tconst responseData = await linearApiRequest.call(this, body);\n\t\t\t\t\t\tteamId = responseData?.data?.issue?.team?.id;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tteamId = updateFields.teamId as string;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst returnData: INodePropertyOptions[] = [];\n\t\t\t\tconst body = {\n\t\t\t\t\tquery: query.getStates(),\n\t\t\t\t\tvariables: {\n\t\t\t\t\t\t$first: 10,\n\t\t\t\t\t\tfilter: {\n\t\t\t\t\t\t\tteam: {\n\t\t\t\t\t\t\t\tid: {\n\t\t\t\t\t\t\t\t\teq: teamId,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t\tconst states = await linearApiRequestAllItems.call(this, 'data.workflowStates', body);\n\n\t\t\t\tfor (const state of states) {\n\t\t\t\t\treturnData.push({\n\t\t\t\t\t\tname: state.name,\n\t\t\t\t\t\tvalue: state.id,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn returnData.sort(sort);\n\t\t\t},\n\t\t},\n\t};\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t\tconst items = this.getInputData();\n\t\tconst returnData: INodeExecutionData[] = [];\n\t\tconst length = items.length;\n\t\tlet responseData;\n\t\tconst resource = this.getNodeParameter('resource', 0);\n\t\tconst operation = this.getNodeParameter('operation', 0);\n\t\tfor (let i = 0; i < length; i++) {\n\t\t\ttry {\n\t\t\t\tif (resource === 'issue') {\n\t\t\t\t\tif (operation === 'create') {\n\t\t\t\t\t\tconst teamId = this.getNodeParameter('teamId', i) as string;\n\t\t\t\t\t\tconst title = this.getNodeParameter('title', i) as string;\n\t\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i);\n\t\t\t\t\t\tconst body: IGraphqlBody = {\n\t\t\t\t\t\t\tquery: query.createIssue(),\n\t\t\t\t\t\t\tvariables: {\n\t\t\t\t\t\t\t\tteamId,\n\t\t\t\t\t\t\t\ttitle,\n\t\t\t\t\t\t\t\t...additionalFields,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tresponseData = await linearApiRequest.call(this, body);\n\t\t\t\t\t\tresponseData = responseData.data.issueCreate?.issue;\n\t\t\t\t\t}\n\t\t\t\t\tif (operation === 'delete') {\n\t\t\t\t\t\tconst issueId = this.getNodeParameter('issueId', i) as string;\n\t\t\t\t\t\tconst body: IGraphqlBody = {\n\t\t\t\t\t\t\tquery: query.deleteIssue(),\n\t\t\t\t\t\t\tvariables: {\n\t\t\t\t\t\t\t\tissueId,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tresponseData = await linearApiRequest.call(this, body);\n\t\t\t\t\t\tresponseData = responseData?.data?.issueDelete;\n\t\t\t\t\t}\n\t\t\t\t\tif (operation === 'get') {\n\t\t\t\t\t\tconst issueId = this.getNodeParameter('issueId', i) as string;\n\t\t\t\t\t\tconst body: IGraphqlBody = {\n\t\t\t\t\t\t\tquery: query.getIssue(),\n\t\t\t\t\t\t\tvariables: {\n\t\t\t\t\t\t\t\tissueId,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tresponseData = await linearApiRequest.call(this, body);\n\t\t\t\t\t\tresponseData = responseData.data.issue;\n\t\t\t\t\t}\n\t\t\t\t\tif (operation === 'getAll') {\n\t\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', i);\n\t\t\t\t\t\tconst body: IGraphqlBody = {\n\t\t\t\t\t\t\tquery: query.getIssues(),\n\t\t\t\t\t\t\tvariables: {\n\t\t\t\t\t\t\t\tfirst: 50,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t};\n\t\t\t\t\t\tif (returnAll) {\n\t\t\t\t\t\t\tresponseData = await linearApiRequestAllItems.call(this, 'data.issues', body);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst limit = this.getNodeParameter('limit', 0);\n\t\t\t\t\t\t\tresponseData = await linearApiRequestAllItems.call(this, 'data.issues', body, limit);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (operation === 'update') {\n\t\t\t\t\t\tconst issueId = this.getNodeParameter('issueId', i) as string;\n\t\t\t\t\t\tconst updateFields = this.getNodeParameter('updateFields', i);\n\t\t\t\t\t\tconst body: IGraphqlBody = {\n\t\t\t\t\t\t\tquery: query.updateIssue(),\n\t\t\t\t\t\t\tvariables: {\n\t\t\t\t\t\t\t\tissueId,\n\t\t\t\t\t\t\t\t...updateFields,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tresponseData = await linearApiRequest.call(this, body);\n\t\t\t\t\t\tresponseData = responseData?.data?.issueUpdate?.issue;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject),\n\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t);\n\n\t\t\t\treturnData.push(...executionData);\n\t\t\t} catch (error) {\n\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\tconst executionErrorData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\tthis.helpers.returnJsonArray({ error: error.message }),\n\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t);\n\t\t\t\t\treturnData.push(...executionErrorData);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\t\treturn [returnData];\n\t}\n}\n"],"mappings":"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","names":["body"]}