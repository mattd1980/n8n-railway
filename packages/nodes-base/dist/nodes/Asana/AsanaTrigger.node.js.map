{"version":3,"sources":["../../../nodes/Asana/AsanaTrigger.node.ts"],"sourcesContent":["import type {\n\tIHookFunctions,\n\tIWebhookFunctions,\n\tIDataObject,\n\tILoadOptionsFunctions,\n\tINodePropertyOptions,\n\tINodeType,\n\tINodeTypeDescription,\n\tIWebhookResponseData,\n} from 'n8n-workflow';\nimport { NodeConnectionTypes, NodeOperationError } from 'n8n-workflow';\n\nimport { asanaApiRequest, getWorkspaces } from './GenericFunctions';\n\n// import {\n// \tcreateHmac,\n// } from 'crypto';\n\nexport class AsanaTrigger implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'Asana Trigger',\n\t\tname: 'asanaTrigger',\n\t\ticon: 'file:asana.svg',\n\t\tgroup: ['trigger'],\n\t\tversion: 1,\n\t\tdescription: 'Starts the workflow when Asana events occur.',\n\t\tdefaults: {\n\t\t\tname: 'Asana Trigger',\n\t\t},\n\t\tinputs: [],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tcredentials: [\n\t\t\t{\n\t\t\t\tname: 'asanaApi',\n\t\t\t\trequired: true,\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tauthentication: ['accessToken'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'asanaOAuth2Api',\n\t\t\t\trequired: true,\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tauthentication: ['oAuth2'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t\twebhooks: [\n\t\t\t{\n\t\t\t\tname: 'default',\n\t\t\t\thttpMethod: 'POST',\n\t\t\t\tresponseMode: 'onReceived',\n\t\t\t\tpath: 'webhook',\n\t\t\t},\n\t\t],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Authentication',\n\t\t\t\tname: 'authentication',\n\t\t\t\ttype: 'options',\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Access Token',\n\t\t\t\t\t\tvalue: 'accessToken',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'OAuth2',\n\t\t\t\t\t\tvalue: 'oAuth2',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'accessToken',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Resource',\n\t\t\t\tname: 'resource',\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: '',\n\t\t\t\trequired: true,\n\t\t\t\tdescription: 'The resource ID to subscribe to. The resource can be a task or project.',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Workspace Name or ID',\n\t\t\t\tname: 'workspace',\n\t\t\t\ttype: 'options',\n\t\t\t\ttypeOptions: {\n\t\t\t\t\tloadOptionsMethod: 'getWorkspaces',\n\t\t\t\t},\n\t\t\t\toptions: [],\n\t\t\t\tdefault: '',\n\t\t\t\tdescription:\n\t\t\t\t\t'The workspace ID the resource is registered under. This is only required if you want to allow overriding existing webhooks. Choose from the list, or specify an ID using an <a href=\"https://docs.n8n.io/code/expressions/\">expression</a>.',\n\t\t\t},\n\t\t],\n\t};\n\n\tmethods = {\n\t\tloadOptions: {\n\t\t\t// Get all the available workspaces to display them to user so that they can\n\t\t\t// select them easily\n\t\t\tasync getWorkspaces(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst workspaces = await getWorkspaces.call(this);\n\t\t\t\tworkspaces.unshift({\n\t\t\t\t\tname: '',\n\t\t\t\t\tvalue: '',\n\t\t\t\t});\n\t\t\t\treturn workspaces;\n\t\t\t},\n\t\t},\n\t};\n\n\twebhookMethods = {\n\t\tdefault: {\n\t\t\tasync checkExists(this: IHookFunctions): Promise<boolean> {\n\t\t\t\tconst webhookData = this.getWorkflowStaticData('node');\n\n\t\t\t\tconst webhookUrl = this.getNodeWebhookUrl('default') as string;\n\n\t\t\t\tconst resource = this.getNodeParameter('resource') as string;\n\n\t\t\t\tconst workspace = this.getNodeParameter('workspace') as string;\n\n\t\t\t\tconst { data } = await asanaApiRequest.call(this, 'GET', '/webhooks', {}, { workspace });\n\n\t\t\t\tfor (const webhook of data) {\n\t\t\t\t\tif (webhook.resource.gid === resource && webhook.target === webhookUrl) {\n\t\t\t\t\t\twebhookData.webhookId = webhook.gid;\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// If it did not error then the webhook exists\n\t\t\t\treturn false;\n\t\t\t},\n\t\t\tasync create(this: IHookFunctions): Promise<boolean> {\n\t\t\t\tconst webhookData = this.getWorkflowStaticData('node');\n\n\t\t\t\tconst webhookUrl = this.getNodeWebhookUrl('default') as string;\n\n\t\t\t\tif (webhookUrl.includes('%20')) {\n\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t'The name of the Asana Trigger Node is not allowed to contain any spaces!',\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tconst resource = this.getNodeParameter('resource') as string;\n\n\t\t\t\tconst body = {\n\t\t\t\t\tresource,\n\t\t\t\t\ttarget: webhookUrl,\n\t\t\t\t};\n\n\t\t\t\tconst responseData = await asanaApiRequest.call(this, 'POST', '/webhooks', body);\n\n\t\t\t\tif (responseData.data === undefined || responseData.data.gid === undefined) {\n\t\t\t\t\t// Required data is missing so was not successful\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\twebhookData.webhookId = responseData.data.gid as string;\n\n\t\t\t\treturn true;\n\t\t\t},\n\t\t\tasync delete(this: IHookFunctions): Promise<boolean> {\n\t\t\t\tconst webhookData = this.getWorkflowStaticData('node');\n\n\t\t\t\tif (webhookData.webhookId !== undefined) {\n\t\t\t\t\tconst body = {};\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tawait asanaApiRequest.call(this, 'DELETE', `/webhooks/${webhookData.webhookId}`, body);\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Remove from the static workflow data so that it is clear\n\t\t\t\t\t// that no webhooks are registered anymore\n\t\t\t\t\tdelete webhookData.webhookId;\n\t\t\t\t\tdelete webhookData.webhookEvents;\n\t\t\t\t\tdelete webhookData.hookSecret;\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\t\t\t},\n\t\t},\n\t};\n\n\tasync webhook(this: IWebhookFunctions): Promise<IWebhookResponseData> {\n\t\tconst bodyData = this.getBodyData();\n\t\tconst headerData = this.getHeaderData() as IDataObject;\n\t\tconst req = this.getRequestObject();\n\n\t\tconst webhookData = this.getWorkflowStaticData('node');\n\n\t\tif (headerData['x-hook-secret'] !== undefined) {\n\t\t\t// Is a create webhook confirmation request\n\t\t\twebhookData.hookSecret = headerData['x-hook-secret'];\n\n\t\t\tconst res = this.getResponseObject();\n\t\t\tres.set('X-Hook-Secret', webhookData.hookSecret as string);\n\t\t\tres.status(200).end();\n\n\t\t\treturn {\n\t\t\t\tnoWebhookResponse: true,\n\t\t\t};\n\t\t}\n\n\t\t// Is regular webhook call\n\t\t// Check if it contains any events\n\t\tif (\n\t\t\tbodyData.events === undefined ||\n\t\t\t!Array.isArray(bodyData.events) ||\n\t\t\tbodyData.events.length === 0\n\t\t) {\n\t\t\t// Does not contain any event data so nothing to process so no reason to\n\t\t\t// start the workflow\n\t\t\treturn {};\n\t\t}\n\n\t\t// TODO: Had to be deactivated as it is currently not possible to get the secret\n\t\t//       in production mode as the static data overwrites each other because the\n\t\t//       two exist at the same time (create webhook [with webhookId] and receive\n\t\t//       webhook [with secret])\n\t\t// // Check if the request is valid\n\t\t// // (if the signature matches to data and hookSecret)\n\t\t// const computedSignature = createHmac('sha256', webhookData.hookSecret as string).update(JSON.stringify(req.body)).digest('hex');\n\t\t// if (headerData['x-hook-signature'] !== computedSignature) {\n\t\t// \t// Signature is not valid so ignore call\n\t\t// \treturn {};\n\t\t// }\n\n\t\treturn {\n\t\t\tworkflowData: [this.helpers.returnJsonArray(req.body.events as IDataObject[])],\n\t\t};\n\t}\n}\n"],"mappings":"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","names":[]}