{"version":3,"sources":["../../../nodes/Hunter/Hunter.node.ts"],"sourcesContent":["import type {\n\tIExecuteFunctions,\n\tIDataObject,\n\tINodeExecutionData,\n\tINodeType,\n\tINodeTypeDescription,\n} from 'n8n-workflow';\nimport { NodeConnectionTypes } from 'n8n-workflow';\n\nimport { hunterApiRequest, hunterApiRequestAllItems } from './GenericFunctions';\n\nexport class Hunter implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'Hunter',\n\t\tname: 'hunter',\n\t\t// eslint-disable-next-line n8n-nodes-base/node-class-description-icon-not-svg\n\t\ticon: 'file:hunter.png',\n\t\tgroup: ['output'],\n\t\tversion: 1,\n\t\tsubtitle: '={{$parameter[\"operation\"]}}',\n\t\tdescription: 'Consume Hunter API',\n\t\tdefaults: {\n\t\t\tname: 'Hunter',\n\t\t},\n\t\tusableAsTool: true,\n\t\tinputs: [NodeConnectionTypes.Main],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tcredentials: [\n\t\t\t{\n\t\t\t\tname: 'hunterApi',\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Operation',\n\t\t\t\tname: 'operation',\n\t\t\t\ttype: 'options',\n\t\t\t\tnoDataExpression: true,\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Domain Search',\n\t\t\t\t\t\tvalue: 'domainSearch',\n\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t'Get every email address found on the internet using a given domain name, with sources',\n\t\t\t\t\t\taction:\n\t\t\t\t\t\t\t'Get every email address found on the internet using a given domain name, with sources',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Email Finder',\n\t\t\t\t\t\tvalue: 'emailFinder',\n\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t'Generate or retrieve the most likely email address from a domain name, a first name and a last name',\n\t\t\t\t\t\taction:\n\t\t\t\t\t\t\t'Generate or retrieve the most likely email address from a domain name, a first name and a last name',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Email Verifier',\n\t\t\t\t\t\tvalue: 'emailVerifier',\n\t\t\t\t\t\tdescription: 'Verify the deliverability of an email address',\n\t\t\t\t\t\taction: 'Verify the deliverability of an email address',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'domainSearch',\n\t\t\t\tdescription: 'Operation to consume',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Domain',\n\t\t\t\tname: 'domain',\n\t\t\t\ttype: 'string',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['domainSearch'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdefault: '',\n\t\t\t\trequired: true,\n\t\t\t\tdescription:\n\t\t\t\t\t'Domain name from which you want to find the email addresses. For example, \"stripe.com\".',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Only Emails',\n\t\t\t\tname: 'onlyEmails',\n\t\t\t\ttype: 'boolean',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['domainSearch'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdefault: true,\n\t\t\t\tdescription: 'Whether to return only the found emails',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Return All',\n\t\t\t\tname: 'returnAll',\n\t\t\t\ttype: 'boolean',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['domainSearch'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdefault: false,\n\t\t\t\tdescription: 'Whether to return all results or only up to a given limit',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Limit',\n\t\t\t\tname: 'limit',\n\t\t\t\ttype: 'number',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['domainSearch'],\n\t\t\t\t\t\treturnAll: [false],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\ttypeOptions: {\n\t\t\t\t\tminValue: 1,\n\t\t\t\t\tmaxValue: 100,\n\t\t\t\t},\n\t\t\t\tdefault: 100,\n\t\t\t\tdescription: 'Max number of results to return',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Filters',\n\t\t\t\tname: 'filters',\n\t\t\t\ttype: 'collection',\n\t\t\t\tplaceholder: 'Add Filter',\n\t\t\t\tdefault: {},\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['domainSearch'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Type',\n\t\t\t\t\t\tname: 'type',\n\t\t\t\t\t\ttype: 'options',\n\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\toptions: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: 'Personal',\n\t\t\t\t\t\t\t\tvalue: 'personal',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: 'Generic',\n\t\t\t\t\t\t\t\tvalue: 'generic',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Seniority',\n\t\t\t\t\t\tname: 'seniority',\n\t\t\t\t\t\ttype: 'multiOptions',\n\t\t\t\t\t\tdefault: [],\n\t\t\t\t\t\toptions: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: 'Junior',\n\t\t\t\t\t\t\t\tvalue: 'junior',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: 'Senior',\n\t\t\t\t\t\t\t\tvalue: 'senior',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: 'Executive',\n\t\t\t\t\t\t\t\tvalue: 'executive',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Department',\n\t\t\t\t\t\tname: 'department',\n\t\t\t\t\t\ttype: 'multiOptions',\n\t\t\t\t\t\tdefault: [],\n\t\t\t\t\t\toptions: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: 'Communication',\n\t\t\t\t\t\t\t\tvalue: 'communication',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: 'Executive',\n\t\t\t\t\t\t\t\tvalue: 'executive',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: 'Finance',\n\t\t\t\t\t\t\t\tvalue: 'finance',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: 'HR',\n\t\t\t\t\t\t\t\tvalue: 'hr',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: 'IT',\n\t\t\t\t\t\t\t\tvalue: 'it',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: 'Legal',\n\t\t\t\t\t\t\t\tvalue: 'legal',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: 'Management',\n\t\t\t\t\t\t\t\tvalue: 'management',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: 'Marketing',\n\t\t\t\t\t\t\t\tvalue: 'marketing',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: 'Sales',\n\t\t\t\t\t\t\t\tvalue: 'sales',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: 'Support',\n\t\t\t\t\t\t\t\tvalue: 'support',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Domain',\n\t\t\t\tname: 'domain',\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: '',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['emailFinder'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\trequired: true,\n\t\t\t\tdescription:\n\t\t\t\t\t'Domain name from which you want to find the email addresses. For example, \"stripe.com\".',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'First Name',\n\t\t\t\tname: 'firstname',\n\t\t\t\ttype: 'string',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['emailFinder'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdefault: '',\n\t\t\t\trequired: true,\n\t\t\t\tdescription: \"The person's first name. It doesn't need to be in lowercase.\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Last Name',\n\t\t\t\tname: 'lastname',\n\t\t\t\ttype: 'string',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['emailFinder'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdefault: '',\n\t\t\t\trequired: true,\n\t\t\t\tdescription: \"The person's last name. It doesn't need to be in lowercase.\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Email',\n\t\t\t\tname: 'email',\n\t\t\t\ttype: 'string',\n\t\t\t\tplaceholder: 'name@email.com',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['emailVerifier'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdefault: '',\n\t\t\t\trequired: true,\n\t\t\t\tdescription: 'The email address you want to verify',\n\t\t\t},\n\t\t],\n\t};\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t\tconst items = this.getInputData();\n\t\tconst returnData: INodeExecutionData[] = [];\n\t\tconst length = items.length;\n\t\tconst qs: IDataObject = {};\n\t\tlet responseData;\n\t\tfor (let i = 0; i < length; i++) {\n\t\t\ttry {\n\t\t\t\tconst operation = this.getNodeParameter('operation', 0);\n\t\t\t\t//https://hunter.io/api-documentation/v2#domain-search\n\t\t\t\tif (operation === 'domainSearch') {\n\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', i);\n\t\t\t\t\tconst filters = this.getNodeParameter('filters', i);\n\t\t\t\t\tconst domain = this.getNodeParameter('domain', i) as string;\n\t\t\t\t\tconst onlyEmails = this.getNodeParameter('onlyEmails', i, false) as boolean;\n\n\t\t\t\t\tqs.domain = domain;\n\t\t\t\t\tif (filters.type) {\n\t\t\t\t\t\tqs.type = filters.type;\n\t\t\t\t\t}\n\t\t\t\t\tif (filters.seniority) {\n\t\t\t\t\t\tqs.seniority = (filters.seniority as string[]).join(',');\n\t\t\t\t\t}\n\t\t\t\t\tif (filters.department) {\n\t\t\t\t\t\tqs.department = (filters.department as string[]).join(',');\n\t\t\t\t\t}\n\t\t\t\t\tif (returnAll) {\n\t\t\t\t\t\tresponseData = await hunterApiRequestAllItems.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'data',\n\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t'/domain-search',\n\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t// Make sure that the company information is there only once and\n\t\t\t\t\t\t// the emails are combined underneath it.\n\t\t\t\t\t\tif (!onlyEmails) {\n\t\t\t\t\t\t\tlet tempReturnData: IDataObject = {};\n\n\t\t\t\t\t\t\tfor (let index = 0; index < responseData.length; index++) {\n\t\t\t\t\t\t\t\tif (index === 0) {\n\t\t\t\t\t\t\t\t\ttempReturnData = responseData[index];\n\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t(tempReturnData.emails as IDataObject[]).push.apply(\n\t\t\t\t\t\t\t\t\ttempReturnData.emails,\n\t\t\t\t\t\t\t\t\tresponseData[index].emails as IDataObject[],\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tresponseData = tempReturnData;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst limit = this.getNodeParameter('limit', i);\n\t\t\t\t\t\tqs.limit = limit;\n\t\t\t\t\t\tresponseData = await hunterApiRequest.call(this, 'GET', '/domain-search', {}, qs);\n\t\t\t\t\t\tresponseData = responseData.data;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (onlyEmails) {\n\t\t\t\t\t\tlet tempReturnData: IDataObject[] = [];\n\n\t\t\t\t\t\tif (Array.isArray(responseData)) {\n\t\t\t\t\t\t\tfor (const data of responseData) {\n\t\t\t\t\t\t\t\ttempReturnData.push.apply(tempReturnData, data.emails as IDataObject[]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttempReturnData = responseData.emails;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = tempReturnData;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t//https://hunter.io/api-documentation/v2#email-finder\n\t\t\t\tif (operation === 'emailFinder') {\n\t\t\t\t\tconst domain = this.getNodeParameter('domain', i) as string;\n\t\t\t\t\tconst firstname = this.getNodeParameter('firstname', i) as string;\n\t\t\t\t\tconst lastname = this.getNodeParameter('lastname', i) as string;\n\t\t\t\t\tqs.first_name = firstname;\n\t\t\t\t\tqs.last_name = lastname;\n\t\t\t\t\tqs.domain = domain;\n\t\t\t\t\tresponseData = await hunterApiRequest.call(this, 'GET', '/email-finder', {}, qs);\n\t\t\t\t\tresponseData = responseData.data;\n\t\t\t\t}\n\t\t\t\t//https://hunter.io/api-documentation/v2#email-verifier\n\t\t\t\tif (operation === 'emailVerifier') {\n\t\t\t\t\tconst email = this.getNodeParameter('email', i) as string;\n\t\t\t\t\tqs.email = email;\n\t\t\t\t\tresponseData = await hunterApiRequest.call(this, 'GET', '/email-verifier', {}, qs);\n\t\t\t\t\tresponseData = responseData.data;\n\t\t\t\t}\n\n\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t);\n\n\t\t\t\treturnData.push(...executionData);\n\t\t\t} catch (error) {\n\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\tconst executionErrorData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\tthis.helpers.returnJsonArray({ error: error.message }),\n\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t);\n\t\t\t\t\treturnData.push(...executionErrorData);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\n\t\treturn [returnData];\n\t}\n}\n"],"mappings":"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","names":[]}