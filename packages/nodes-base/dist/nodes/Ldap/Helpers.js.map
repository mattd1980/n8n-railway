{"version":3,"sources":["../../../nodes/Ldap/Helpers.ts"],"sourcesContent":["import { Client } from 'ldapts';\nimport type { ClientOptions, Entry } from 'ldapts';\nimport type { ICredentialDataDecryptedObject, IDataObject, Logger } from 'n8n-workflow';\nexport const BINARY_AD_ATTRIBUTES = ['objectGUID', 'objectSid'];\n\nconst resolveEntryBinaryAttributes = (entry: Entry): Entry => {\n\tObject.entries(entry)\n\t\t.filter(([k]) => BINARY_AD_ATTRIBUTES.includes(k))\n\t\t.forEach(([k]) => {\n\t\t\tentry[k] = (entry[k] as Buffer).toString('hex');\n\t\t});\n\treturn entry;\n};\n\nexport const resolveBinaryAttributes = (entries: Entry[]): void => {\n\tentries.forEach((entry) => resolveEntryBinaryAttributes(entry));\n};\n\nexport async function createLdapClient(\n\tcontext: { logger: Logger },\n\tcredentials: ICredentialDataDecryptedObject,\n\tnodeDebug?: boolean,\n\tnodeType?: string,\n\tnodeName?: string,\n): Promise<Client> {\n\tconst protocol = credentials.connectionSecurity === 'tls' ? 'ldaps' : 'ldap';\n\tconst url = `${protocol}://${credentials.hostname}:${credentials.port}`;\n\n\tconst ldapOptions: ClientOptions = { url };\n\tconst tlsOptions: IDataObject = {};\n\n\tif (credentials.connectionSecurity !== 'none') {\n\t\ttlsOptions.rejectUnauthorized = credentials.allowUnauthorizedCerts === false;\n\t\tif (credentials.caCertificate) {\n\t\t\ttlsOptions.ca = [credentials.caCertificate as string];\n\t\t}\n\t\tif (credentials.connectionSecurity !== 'startTls') {\n\t\t\tldapOptions.tlsOptions = tlsOptions;\n\t\t}\n\t}\n\n\tif (credentials.timeout) {\n\t\t// Convert seconds to milliseconds\n\t\tldapOptions.timeout = (credentials.timeout as number) * 1000;\n\t}\n\n\tif (nodeDebug) {\n\t\tcontext.logger.info(\n\t\t\t`[${nodeType} | ${nodeName}] - LDAP Options: ${JSON.stringify(ldapOptions, null, 2)}`,\n\t\t);\n\t}\n\n\tconst client = new Client(ldapOptions);\n\tif (credentials.connectionSecurity === 'startTls') {\n\t\tawait client.startTLS(tlsOptions);\n\t}\n\treturn client;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAuB;AAGhB,MAAM,uBAAuB,CAAC,cAAc,WAAW;AAE9D,MAAM,+BAA+B,CAAC,UAAwB;AAC7D,SAAO,QAAQ,KAAK,EAClB,OAAO,CAAC,CAAC,CAAC,MAAM,qBAAqB,SAAS,CAAC,CAAC,EAChD,QAAQ,CAAC,CAAC,CAAC,MAAM;AACjB,UAAM,CAAC,IAAK,MAAM,CAAC,EAAa,SAAS,KAAK;AAAA,EAC/C,CAAC;AACF,SAAO;AACR;AAEO,MAAM,0BAA0B,CAAC,YAA2B;AAClE,UAAQ,QAAQ,CAAC,UAAU,6BAA6B,KAAK,CAAC;AAC/D;AAEA,eAAsB,iBACrB,SACA,aACA,WACA,UACA,UACkB;AAClB,QAAM,WAAW,YAAY,uBAAuB,QAAQ,UAAU;AACtE,QAAM,MAAM,GAAG,QAAQ,MAAM,YAAY,QAAQ,IAAI,YAAY,IAAI;AAErE,QAAM,cAA6B,EAAE,IAAI;AACzC,QAAM,aAA0B,CAAC;AAEjC,MAAI,YAAY,uBAAuB,QAAQ;AAC9C,eAAW,qBAAqB,YAAY,2BAA2B;AACvE,QAAI,YAAY,eAAe;AAC9B,iBAAW,KAAK,CAAC,YAAY,aAAuB;AAAA,IACrD;AACA,QAAI,YAAY,uBAAuB,YAAY;AAClD,kBAAY,aAAa;AAAA,IAC1B;AAAA,EACD;AAEA,MAAI,YAAY,SAAS;AAExB,gBAAY,UAAW,YAAY,UAAqB;AAAA,EACzD;AAEA,MAAI,WAAW;AACd,YAAQ,OAAO;AAAA,MACd,IAAI,QAAQ,MAAM,QAAQ,qBAAqB,KAAK,UAAU,aAAa,MAAM,CAAC,CAAC;AAAA,IACpF;AAAA,EACD;AAEA,QAAM,SAAS,IAAI,qBAAO,WAAW;AACrC,MAAI,YAAY,uBAAuB,YAAY;AAClD,UAAM,OAAO,SAAS,UAAU;AAAA,EACjC;AACA,SAAO;AACR;","names":[]}