{"version":3,"sources":["../../../nodes/AiTransform/AiTransform.node.ts"],"sourcesContent":["import set from 'lodash/set';\nimport {\n\tNodeOperationError,\n\tNodeConnectionTypes,\n\ttype IExecuteFunctions,\n\ttype INodeExecutionData,\n\ttype INodeType,\n\ttype INodeTypeDescription,\n\tAI_TRANSFORM_CODE_GENERATED_FOR_PROMPT,\n\tAI_TRANSFORM_JS_CODE,\n} from 'n8n-workflow';\n\nimport { JavaScriptSandbox } from '../Code/JavaScriptSandbox';\nimport { getSandboxContext } from '../Code/Sandbox';\nimport { standardizeOutput } from '../Code/utils';\n\nconst { CODE_ENABLE_STDOUT } = process.env;\n\nexport class AiTransform implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'AI Transform',\n\t\tname: 'aiTransform',\n\t\ticon: 'file:aitransform.svg',\n\t\tgroup: ['transform'],\n\t\tversion: 1,\n\t\tdescription: 'Modify data based on instructions written in plain english',\n\t\tdefaults: {\n\t\t\tname: 'AI Transform',\n\t\t},\n\t\tinputs: [NodeConnectionTypes.Main],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tparameterPane: 'wide',\n\t\thints: [\n\t\t\t{\n\t\t\t\tmessage:\n\t\t\t\t\t\"This node doesn't have access to the contents of binary files. To use those contents here, use the 'Extract from File' node first.\",\n\t\t\t\tdisplayCondition: '={{ $input.all().some(i => i.binary) }}',\n\t\t\t\tlocation: 'outputPane',\n\t\t\t},\n\t\t],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Instructions',\n\t\t\t\tname: 'instructions',\n\t\t\t\ttype: 'button',\n\t\t\t\tdefault: '',\n\t\t\t\tdescription:\n\t\t\t\t\t\"Provide instructions on how you want to transform the data, then click 'Generate code'. Use dot notation to refer to nested fields (e.g. address.street).\",\n\t\t\t\tplaceholder:\n\t\t\t\t\t\"Example: Merge 'firstname' and 'lastname' into a field 'details.name' and sort by 'email'\",\n\t\t\t\ttypeOptions: {\n\t\t\t\t\tbuttonConfig: {\n\t\t\t\t\t\tlabel: 'Generate code',\n\t\t\t\t\t\thasInputField: true,\n\t\t\t\t\t\tinputFieldMaxLength: 500,\n\t\t\t\t\t\taction: {\n\t\t\t\t\t\t\ttype: 'askAiCodeGeneration',\n\t\t\t\t\t\t\ttarget: AI_TRANSFORM_JS_CODE,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Code Generated For Prompt',\n\t\t\t\tname: AI_TRANSFORM_CODE_GENERATED_FOR_PROMPT,\n\t\t\t\ttype: 'hidden',\n\t\t\t\tdefault: '',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Generated JavaScript',\n\t\t\t\tname: AI_TRANSFORM_JS_CODE,\n\t\t\t\ttype: 'string',\n\t\t\t\ttypeOptions: {\n\t\t\t\t\teditor: 'jsEditor',\n\t\t\t\t\teditorIsReadOnly: true,\n\t\t\t\t},\n\t\t\t\tdefault: '',\n\t\t\t\thint: 'Read-only. To edit this code, adjust the instructions or copy and paste it into a Code node.',\n\t\t\t\tnoDataExpression: true,\n\t\t\t},\n\t\t],\n\t};\n\n\tasync execute(this: IExecuteFunctions) {\n\t\tconst workflowMode = this.getMode();\n\n\t\tconst node = this.getNode();\n\n\t\tconst codeParameterName = 'jsCode';\n\n\t\tconst getSandbox = (index = 0) => {\n\t\t\tlet code = '';\n\t\t\ttry {\n\t\t\t\tcode = this.getNodeParameter(codeParameterName, index) as string;\n\n\t\t\t\tif (!code) {\n\t\t\t\t\tconst instructions = this.getNodeParameter('instructions', index) as string;\n\t\t\t\t\tif (!instructions) {\n\t\t\t\t\t\tthrow new NodeOperationError(node, 'Missing instructions to generate code', {\n\t\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t\t\"Enter your prompt in the 'Instructions' parameter and click 'Generate code'\",\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\tthrow new NodeOperationError(node, 'Missing code for data transformation', {\n\t\t\t\t\t\tdescription: \"Click the 'Generate code' button to create the code\",\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tif (error instanceof NodeOperationError) throw error;\n\n\t\t\t\tthrow new NodeOperationError(node, error);\n\t\t\t}\n\n\t\t\tconst context = getSandboxContext.call(this, index);\n\n\t\t\tcontext.items = context.$input.all();\n\n\t\t\tconst Sandbox = JavaScriptSandbox;\n\t\t\tconst sandbox = new Sandbox(context, code, this.helpers);\n\t\t\tsandbox.on(\n\t\t\t\t'output',\n\t\t\t\tworkflowMode === 'manual'\n\t\t\t\t\t? this.sendMessageToUI.bind(this)\n\t\t\t\t\t: CODE_ENABLE_STDOUT === 'true'\n\t\t\t\t\t\t? (...args) =>\n\t\t\t\t\t\t\t\tconsole.log(`[Workflow \"${this.getWorkflow().id}\"][Node \"${node.name}\"]`, ...args)\n\t\t\t\t\t\t: () => {},\n\t\t\t);\n\t\t\treturn sandbox;\n\t\t};\n\n\t\tconst sandbox = getSandbox();\n\t\tlet items: INodeExecutionData[];\n\t\ttry {\n\t\t\titems = (await sandbox.runCodeAllItems()) as INodeExecutionData[];\n\t\t} catch (error) {\n\t\t\tif (!this.continueOnFail()) {\n\t\t\t\tset(error, 'node', node);\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t\titems = [{ json: { error: error.message } }];\n\t\t}\n\n\t\tfor (const item of items) {\n\t\t\tstandardizeOutput(item.json);\n\t\t}\n\n\t\treturn [items];\n\t}\n}\n"],"mappings":"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","names":["sandbox","set"]}