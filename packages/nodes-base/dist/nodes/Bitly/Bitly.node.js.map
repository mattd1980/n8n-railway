{"version":3,"sources":["../../../nodes/Bitly/Bitly.node.ts"],"sourcesContent":["import type {\n\tIExecuteFunctions,\n\tIDataObject,\n\tILoadOptionsFunctions,\n\tINodeExecutionData,\n\tINodePropertyOptions,\n\tINodeType,\n\tINodeTypeDescription,\n} from 'n8n-workflow';\nimport { NodeConnectionTypes } from 'n8n-workflow';\n\nimport { bitlyApiRequest, bitlyApiRequestAllItems } from './GenericFunctions';\nimport { linkFields, linkOperations } from './LinkDescription';\n\nexport class Bitly implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'Bitly',\n\t\tname: 'bitly',\n\t\ticon: 'file:bitly.svg',\n\t\tgroup: ['output'],\n\t\tversion: 1,\n\t\tsubtitle: '={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}',\n\t\tdescription: 'Consume Bitly API',\n\t\tdefaults: {\n\t\t\tname: 'Bitly',\n\t\t},\n\t\tusableAsTool: true,\n\t\tinputs: [NodeConnectionTypes.Main],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tcredentials: [\n\t\t\t{\n\t\t\t\tname: 'bitlyApi',\n\t\t\t\trequired: true,\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tauthentication: ['accessToken'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'bitlyOAuth2Api',\n\t\t\t\trequired: true,\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tauthentication: ['oAuth2'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Authentication',\n\t\t\t\tname: 'authentication',\n\t\t\t\ttype: 'options',\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Access Token',\n\t\t\t\t\t\tvalue: 'accessToken',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'OAuth2',\n\t\t\t\t\t\tvalue: 'oAuth2',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'accessToken',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Resource',\n\t\t\t\tname: 'resource',\n\t\t\t\ttype: 'options',\n\t\t\t\tnoDataExpression: true,\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Link',\n\t\t\t\t\t\tvalue: 'link',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'link',\n\t\t\t},\n\t\t\t...linkOperations,\n\t\t\t...linkFields,\n\t\t],\n\t};\n\n\tmethods = {\n\t\tloadOptions: {\n\t\t\t// Get all the available groups to display them to user so that they can\n\t\t\t// select them easily\n\t\t\tasync getGroups(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst returnData: INodePropertyOptions[] = [];\n\t\t\t\tconst groups = await bitlyApiRequestAllItems.call(this, 'groups', 'GET', '/groups');\n\t\t\t\tfor (const group of groups) {\n\t\t\t\t\tconst groupName = group.name;\n\t\t\t\t\tconst groupId = group.guid;\n\t\t\t\t\treturnData.push({\n\t\t\t\t\t\tname: groupName,\n\t\t\t\t\t\tvalue: groupId,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn returnData;\n\t\t\t},\n\t\t\t// Get all the available tags to display them to user so that they can\n\t\t\t// select them easily\n\t\t\tasync getTags(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst groupId = this.getCurrentNodeParameter('group') as string;\n\t\t\t\tconst returnData: INodePropertyOptions[] = [];\n\t\t\t\tconst tags = await bitlyApiRequestAllItems.call(\n\t\t\t\t\tthis,\n\t\t\t\t\t'tags',\n\t\t\t\t\t'GET',\n\t\t\t\t\t`groups/${groupId}/tags`,\n\t\t\t\t);\n\t\t\t\tfor (const tag of tags) {\n\t\t\t\t\tconst tagName = tag;\n\t\t\t\t\tconst tagId = tag;\n\t\t\t\t\treturnData.push({\n\t\t\t\t\t\tname: tagName,\n\t\t\t\t\t\tvalue: tagId,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn returnData;\n\t\t\t},\n\t\t},\n\t};\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t\tconst items = this.getInputData();\n\t\tconst returnData: INodeExecutionData[] = [];\n\t\tconst length = items.length;\n\t\tlet responseData;\n\t\tconst resource = this.getNodeParameter('resource', 0);\n\t\tconst operation = this.getNodeParameter('operation', 0);\n\t\tfor (let i = 0; i < length; i++) {\n\t\t\ttry {\n\t\t\t\tif (resource === 'link') {\n\t\t\t\t\tif (operation === 'create') {\n\t\t\t\t\t\tconst longUrl = this.getNodeParameter('longUrl', i) as string;\n\t\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i);\n\t\t\t\t\t\tconst body: IDataObject = {\n\t\t\t\t\t\t\tlong_url: longUrl,\n\t\t\t\t\t\t};\n\t\t\t\t\t\tif (additionalFields.title) {\n\t\t\t\t\t\t\tbody.title = additionalFields.title as string;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (additionalFields.domain) {\n\t\t\t\t\t\t\tbody.domain = additionalFields.domain as string;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (additionalFields.group) {\n\t\t\t\t\t\t\tbody.group = additionalFields.group as string;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (additionalFields.tags) {\n\t\t\t\t\t\t\tbody.tags = additionalFields.tags as string[];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst deeplinks = (this.getNodeParameter('deeplink', i) as IDataObject)\n\t\t\t\t\t\t\t.deeplinkUi as IDataObject[];\n\t\t\t\t\t\tif (deeplinks) {\n\t\t\t\t\t\t\tfor (const deeplink of deeplinks) {\n\t\t\t\t\t\t\t\t//@ts-ignore\n\t\t\t\t\t\t\t\tbody.deeplinks.push({\n\t\t\t\t\t\t\t\t\tapp_uri_path: deeplink.appUriPath,\n\t\t\t\t\t\t\t\t\tinstall_type: deeplink.installType,\n\t\t\t\t\t\t\t\t\tinstall_url: deeplink.installUrl,\n\t\t\t\t\t\t\t\t\tapp_id: deeplink.appId,\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresponseData = await bitlyApiRequest.call(this, 'POST', '/bitlinks', body);\n\t\t\t\t\t}\n\t\t\t\t\tif (operation === 'update') {\n\t\t\t\t\t\tconst linkId = this.getNodeParameter('id', i) as string;\n\t\t\t\t\t\tconst updateFields = this.getNodeParameter('updateFields', i);\n\t\t\t\t\t\tconst body: IDataObject = {};\n\t\t\t\t\t\tif (updateFields.longUrl) {\n\t\t\t\t\t\t\tbody.long_url = updateFields.longUrl as string;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (updateFields.title) {\n\t\t\t\t\t\t\tbody.title = updateFields.title as string;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (updateFields.archived !== undefined) {\n\t\t\t\t\t\t\tbody.archived = updateFields.archived as boolean;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (updateFields.group) {\n\t\t\t\t\t\t\tbody.group = updateFields.group as string;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (updateFields.tags) {\n\t\t\t\t\t\t\tbody.tags = updateFields.tags as string[];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst deeplinks = (this.getNodeParameter('deeplink', i) as IDataObject)\n\t\t\t\t\t\t\t.deeplinkUi as IDataObject[];\n\t\t\t\t\t\tif (deeplinks) {\n\t\t\t\t\t\t\tfor (const deeplink of deeplinks) {\n\t\t\t\t\t\t\t\t//@ts-ignore\n\t\t\t\t\t\t\t\tbody.deeplinks.push({\n\t\t\t\t\t\t\t\t\tapp_uri_path: deeplink.appUriPath,\n\t\t\t\t\t\t\t\t\tinstall_type: deeplink.installType,\n\t\t\t\t\t\t\t\t\tinstall_url: deeplink.installUrl,\n\t\t\t\t\t\t\t\t\tapp_id: deeplink.appId,\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresponseData = await bitlyApiRequest.call(this, 'PATCH', `/bitlinks/${linkId}`, body);\n\t\t\t\t\t}\n\t\t\t\t\tif (operation === 'get') {\n\t\t\t\t\t\tconst linkId = this.getNodeParameter('id', i) as string;\n\t\t\t\t\t\tresponseData = await bitlyApiRequest.call(this, 'GET', `/bitlinks/${linkId}`);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t);\n\t\t\t\treturnData.push(...executionData);\n\t\t\t} catch (error) {\n\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\treturnData.push({ error: error.message, json: {}, itemIndex: i });\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\t\treturn [returnData];\n\t}\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AASA,0BAAoC;AAEpC,8BAAyD;AACzD,6BAA2C;AAEpC,MAAM,MAA2B;AAAA,EAAjC;AACN,uBAAoC;AAAA,MACnC,aAAa;AAAA,MACb,MAAM;AAAA,MACN,MAAM;AAAA,MACN,OAAO,CAAC,QAAQ;AAAA,MAChB,SAAS;AAAA,MACT,UAAU;AAAA,MACV,aAAa;AAAA,MACb,UAAU;AAAA,QACT,MAAM;AAAA,MACP;AAAA,MACA,cAAc;AAAA,MACd,QAAQ,CAAC,wCAAoB,IAAI;AAAA,MACjC,SAAS,CAAC,wCAAoB,IAAI;AAAA,MAClC,aAAa;AAAA,QACZ;AAAA,UACC,MAAM;AAAA,UACN,UAAU;AAAA,UACV,gBAAgB;AAAA,YACf,MAAM;AAAA,cACL,gBAAgB,CAAC,aAAa;AAAA,YAC/B;AAAA,UACD;AAAA,QACD;AAAA,QACA;AAAA,UACC,MAAM;AAAA,UACN,UAAU;AAAA,UACV,gBAAgB;AAAA,YACf,MAAM;AAAA,cACL,gBAAgB,CAAC,QAAQ;AAAA,YAC1B;AAAA,UACD;AAAA,QACD;AAAA,MACD;AAAA,MACA,YAAY;AAAA,QACX;AAAA,UACC,aAAa;AAAA,UACb,MAAM;AAAA,UACN,MAAM;AAAA,UACN,SAAS;AAAA,YACR;AAAA,cACC,MAAM;AAAA,cACN,OAAO;AAAA,YACR;AAAA,YACA;AAAA,cACC,MAAM;AAAA,cACN,OAAO;AAAA,YACR;AAAA,UACD;AAAA,UACA,SAAS;AAAA,QACV;AAAA,QACA;AAAA,UACC,aAAa;AAAA,UACb,MAAM;AAAA,UACN,MAAM;AAAA,UACN,kBAAkB;AAAA,UAClB,SAAS;AAAA,YACR;AAAA,cACC,MAAM;AAAA,cACN,OAAO;AAAA,YACR;AAAA,UACD;AAAA,UACA,SAAS;AAAA,QACV;AAAA,QACA,GAAG;AAAA,QACH,GAAG;AAAA,MACJ;AAAA,IACD;AAEA,mBAAU;AAAA,MACT,aAAa;AAAA;AAAA;AAAA,QAGZ,MAAM,YAAwE;AAC7E,gBAAM,aAAqC,CAAC;AAC5C,gBAAM,SAAS,MAAM,gDAAwB,KAAK,MAAM,UAAU,OAAO,SAAS;AAClF,qBAAW,SAAS,QAAQ;AAC3B,kBAAM,YAAY,MAAM;AACxB,kBAAM,UAAU,MAAM;AACtB,uBAAW,KAAK;AAAA,cACf,MAAM;AAAA,cACN,OAAO;AAAA,YACR,CAAC;AAAA,UACF;AACA,iBAAO;AAAA,QACR;AAAA;AAAA;AAAA,QAGA,MAAM,UAAsE;AAC3E,gBAAM,UAAU,KAAK,wBAAwB,OAAO;AACpD,gBAAM,aAAqC,CAAC;AAC5C,gBAAM,OAAO,MAAM,gDAAwB;AAAA,YAC1C;AAAA,YACA;AAAA,YACA;AAAA,YACA,UAAU,OAAO;AAAA,UAClB;AACA,qBAAW,OAAO,MAAM;AACvB,kBAAM,UAAU;AAChB,kBAAM,QAAQ;AACd,uBAAW,KAAK;AAAA,cACf,MAAM;AAAA,cACN,OAAO;AAAA,YACR,CAAC;AAAA,UACF;AACA,iBAAO;AAAA,QACR;AAAA,MACD;AAAA,IACD;AAAA;AAAA,EAEA,MAAM,UAAkE;AACvE,UAAM,QAAQ,KAAK,aAAa;AAChC,UAAM,aAAmC,CAAC;AAC1C,UAAM,SAAS,MAAM;AACrB,QAAI;AACJ,UAAM,WAAW,KAAK,iBAAiB,YAAY,CAAC;AACpD,UAAM,YAAY,KAAK,iBAAiB,aAAa,CAAC;AACtD,aAAS,IAAI,GAAG,IAAI,QAAQ,KAAK;AAChC,UAAI;AACH,YAAI,aAAa,QAAQ;AACxB,cAAI,cAAc,UAAU;AAC3B,kBAAM,UAAU,KAAK,iBAAiB,WAAW,CAAC;AAClD,kBAAM,mBAAmB,KAAK,iBAAiB,oBAAoB,CAAC;AACpE,kBAAM,OAAoB;AAAA,cACzB,UAAU;AAAA,YACX;AACA,gBAAI,iBAAiB,OAAO;AAC3B,mBAAK,QAAQ,iBAAiB;AAAA,YAC/B;AACA,gBAAI,iBAAiB,QAAQ;AAC5B,mBAAK,SAAS,iBAAiB;AAAA,YAChC;AACA,gBAAI,iBAAiB,OAAO;AAC3B,mBAAK,QAAQ,iBAAiB;AAAA,YAC/B;AACA,gBAAI,iBAAiB,MAAM;AAC1B,mBAAK,OAAO,iBAAiB;AAAA,YAC9B;AACA,kBAAM,YAAa,KAAK,iBAAiB,YAAY,CAAC,EACpD;AACF,gBAAI,WAAW;AACd,yBAAW,YAAY,WAAW;AAEjC,qBAAK,UAAU,KAAK;AAAA,kBACnB,cAAc,SAAS;AAAA,kBACvB,cAAc,SAAS;AAAA,kBACvB,aAAa,SAAS;AAAA,kBACtB,QAAQ,SAAS;AAAA,gBAClB,CAAC;AAAA,cACF;AAAA,YACD;AACA,2BAAe,MAAM,wCAAgB,KAAK,MAAM,QAAQ,aAAa,IAAI;AAAA,UAC1E;AACA,cAAI,cAAc,UAAU;AAC3B,kBAAM,SAAS,KAAK,iBAAiB,MAAM,CAAC;AAC5C,kBAAM,eAAe,KAAK,iBAAiB,gBAAgB,CAAC;AAC5D,kBAAM,OAAoB,CAAC;AAC3B,gBAAI,aAAa,SAAS;AACzB,mBAAK,WAAW,aAAa;AAAA,YAC9B;AACA,gBAAI,aAAa,OAAO;AACvB,mBAAK,QAAQ,aAAa;AAAA,YAC3B;AACA,gBAAI,aAAa,aAAa,QAAW;AACxC,mBAAK,WAAW,aAAa;AAAA,YAC9B;AACA,gBAAI,aAAa,OAAO;AACvB,mBAAK,QAAQ,aAAa;AAAA,YAC3B;AACA,gBAAI,aAAa,MAAM;AACtB,mBAAK,OAAO,aAAa;AAAA,YAC1B;AACA,kBAAM,YAAa,KAAK,iBAAiB,YAAY,CAAC,EACpD;AACF,gBAAI,WAAW;AACd,yBAAW,YAAY,WAAW;AAEjC,qBAAK,UAAU,KAAK;AAAA,kBACnB,cAAc,SAAS;AAAA,kBACvB,cAAc,SAAS;AAAA,kBACvB,aAAa,SAAS;AAAA,kBACtB,QAAQ,SAAS;AAAA,gBAClB,CAAC;AAAA,cACF;AAAA,YACD;AACA,2BAAe,MAAM,wCAAgB,KAAK,MAAM,SAAS,aAAa,MAAM,IAAI,IAAI;AAAA,UACrF;AACA,cAAI,cAAc,OAAO;AACxB,kBAAM,SAAS,KAAK,iBAAiB,MAAM,CAAC;AAC5C,2BAAe,MAAM,wCAAgB,KAAK,MAAM,OAAO,aAAa,MAAM,EAAE;AAAA,UAC7E;AAAA,QACD;AAEA,cAAM,gBAAgB,KAAK,QAAQ;AAAA,UAClC,KAAK,QAAQ,gBAAgB,YAA6B;AAAA,UAC1D,EAAE,UAAU,EAAE,MAAM,EAAE,EAAE;AAAA,QACzB;AACA,mBAAW,KAAK,GAAG,aAAa;AAAA,MACjC,SAAS,OAAO;AACf,YAAI,KAAK,eAAe,GAAG;AAC1B,qBAAW,KAAK,EAAE,OAAO,MAAM,SAAS,MAAM,CAAC,GAAG,WAAW,EAAE,CAAC;AAChE;AAAA,QACD;AACA,cAAM;AAAA,MACP;AAAA,IACD;AACA,WAAO,CAAC,UAAU;AAAA,EACnB;AACD;","names":[]}