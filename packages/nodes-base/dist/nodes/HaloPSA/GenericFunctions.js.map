{"version":3,"sources":["../../../nodes/HaloPSA/GenericFunctions.ts"],"sourcesContent":["import type {\n\tICredentialDataDecryptedObject,\n\tICredentialTestFunctions,\n\tIDataObject,\n\tIExecuteFunctions,\n\tIHookFunctions,\n\tIHttpRequestMethods,\n\tILoadOptionsFunctions,\n\tIPollFunctions,\n\tIRequestOptions,\n\tJsonObject,\n} from 'n8n-workflow';\nimport { NodeApiError } from 'n8n-workflow';\n\n// Interfaces and Types -------------------------------------------------------------\ninterface IHaloPSATokens {\n\tscope: string;\n\ttoken_type: string;\n\taccess_token: string;\n\texpires_in: number;\n\trefresh_token: string;\n\tid_token: string;\n}\n\nfunction getAuthUrl(credentials: IDataObject) {\n\treturn credentials.hostingType === 'on-premise'\n\t\t? `${credentials.appUrl}/auth/token`\n\t\t: `${credentials.authUrl}/token?tenant=${credentials.tenant}`;\n}\n\n// API Requests ---------------------------------------------------------------------\n\nexport async function getAccessTokens(\n\tthis: IExecuteFunctions | ILoadOptionsFunctions,\n): Promise<IHaloPSATokens> {\n\tconst credentials = await this.getCredentials('haloPSAApi');\n\n\tconst options: IRequestOptions = {\n\t\theaders: {\n\t\t\t'Content-Type': 'application/x-www-form-urlencoded',\n\t\t},\n\t\tmethod: 'POST',\n\t\tform: {\n\t\t\tclient_id: credentials.client_id,\n\t\t\tclient_secret: credentials.client_secret,\n\t\t\tgrant_type: 'client_credentials',\n\t\t\tscope: credentials.scope,\n\t\t},\n\t\turi: getAuthUrl(credentials),\n\t\tjson: true,\n\t};\n\n\ttry {\n\t\tconst tokens = await this.helpers.request(options);\n\t\treturn tokens;\n\t} catch (error) {\n\t\tthrow new NodeApiError(this.getNode(), error as JsonObject);\n\t}\n}\n\nexport async function haloPSAApiRequest(\n\tthis: IHookFunctions | IExecuteFunctions | ILoadOptionsFunctions | IPollFunctions,\n\tmethod: IHttpRequestMethods,\n\tresource: string,\n\taccessToken: string,\n\tbody: IDataObject | IDataObject[] = {},\n\tqs: IDataObject = {},\n\toption: IDataObject = {},\n): Promise<any> {\n\tconst resourceApiUrl = (await this.getCredentials('haloPSAApi')).resourceApiUrl as string;\n\n\ttry {\n\t\tlet options: IRequestOptions = {\n\t\t\theaders: {\n\t\t\t\tAuthorization: `Bearer ${accessToken}`,\n\t\t\t\t'User-Agent': 'https://n8n.io',\n\t\t\t\tConnection: 'keep-alive',\n\t\t\t\tAccept: '*/*',\n\t\t\t\t'Accept-Encoding': 'gzip, deflate, br',\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t},\n\t\t\tmethod,\n\t\t\tqs,\n\t\t\tbody,\n\t\t\turi: `${resourceApiUrl}${resource}`,\n\t\t\tjson: true,\n\t\t};\n\t\toptions = Object.assign({}, options, option);\n\t\tif (Object.keys(body).length === 0) {\n\t\t\tdelete options.body;\n\t\t}\n\t\tconst result = await this.helpers.request(options);\n\t\tif (method === 'DELETE' && result.id) {\n\t\t\treturn { success: true };\n\t\t}\n\t\treturn result;\n\t} catch (error) {\n\t\tconst message = (error as JsonObject).message as string;\n\t\tif (method === 'DELETE' || method === 'GET' || (method === 'POST' && message)) {\n\t\t\tlet newErrorMessage;\n\t\t\tif (message.includes('400')) {\n\t\t\t\tthis.logger.debug(message);\n\t\t\t\tnewErrorMessage = JSON.parse(message.split(' - ')[1]);\n\t\t\t\t(error as JsonObject).message = `For field ID, ${\n\t\t\t\t\tnewErrorMessage.id || newErrorMessage['[0].id']\n\t\t\t\t}`;\n\t\t\t}\n\t\t\tif (message.includes('403')) {\n\t\t\t\t(error as JsonObject).message =\n\t\t\t\t\t`You don\\'t have permissions to ${method.toLowerCase()} ${resource\n\t\t\t\t\t\t.split('/')[1]\n\t\t\t\t\t\t.toLowerCase()}.`;\n\t\t\t}\n\t\t}\n\t\tthrow new NodeApiError(this.getNode(), error as JsonObject);\n\t}\n}\n\n// export async function reasignTickets(\n// \tthis:\n// \t\t| IHookFunctions\n// \t\t| IExecuteFunctions\n// \t\t| ILoadOptionsFunctions\n// \t\t| IPollFunctions,\n// \tclientId: string,\n// \treasigmentCliendId: string,\n// \taccessToken: string,\n// ): Promise<any> {\n// \tconst response = (await haloPSAApiRequest.call(\n// \t\tthis,\n// \t\t'GET',\n// \t\t`/tickets`,\n// \t\taccessToken,\n// \t\t{},\n// \t\t{ client_id: reasigmentCliendId },\n// \t)) as IDataObject;\n\n// \tconst { tickets } = response;\n// \tthis.logger.debug((tickets as IDataObject[]).map(t => t.id));\n// \tconst body: IDataObject = {\n// \t\tid: clientId,\n// \t\tclient_id: reasigmentCliendId,\n// \t};\n\n// \tfor (const ticket of (tickets as IDataObject[])) {\n// \t\tthis.logger.debug(ticket.id);\n// \t\tawait haloPSAApiRequest.call(this, 'DELETE', `/tickets/${ticket.id}`, accessToken);\n// \t}\n// }\n\nexport async function haloPSAApiRequestAllItems(\n\tthis: IExecuteFunctions | ILoadOptionsFunctions | IHookFunctions,\n\tpropertyName: string,\n\tmethod: IHttpRequestMethods,\n\tendpoint: string,\n\taccessToken: string,\n\tbody = {},\n\tquery: IDataObject = {},\n): Promise<any> {\n\tconst returnData: IDataObject[] = [];\n\n\tlet responseData: IDataObject;\n\tquery.page_size = 100;\n\tquery.page_no = 1;\n\tquery.pageinate = true;\n\n\tdo {\n\t\tresponseData = (await haloPSAApiRequest.call(\n\t\t\tthis,\n\t\t\tmethod,\n\t\t\tendpoint,\n\t\t\taccessToken,\n\t\t\tbody,\n\t\t\tquery,\n\t\t)) as IDataObject;\n\t\treturnData.push.apply(returnData, responseData[propertyName] as IDataObject[]);\n\t\tquery.page_no++;\n\t\t//@ts-ignore\n\t} while (returnData.length < responseData.record_count);\n\n\treturn returnData;\n}\n\n// Utilities ------------------------------------------------------------------------\n\nexport function simplifyHaloPSAGetOutput(\n\tresponse: IDataObject[],\n\tfieldsList: string[],\n): IDataObject[] {\n\tconst output = [];\n\tfor (const item of response) {\n\t\tconst simplifiedItem: IDataObject = {};\n\t\tObject.keys(item).forEach((key: string) => {\n\t\t\tif (fieldsList.includes(key)) {\n\t\t\t\tsimplifiedItem[key] = item[key];\n\t\t\t}\n\t\t});\n\t\toutput.push(simplifiedItem);\n\t}\n\treturn output;\n}\n\nexport function qsSetStatus(status: string) {\n\tif (!status) return {};\n\tconst qs: IDataObject = {};\n\tif (status === 'all') {\n\t\tqs.includeinactive = true;\n\t\tqs.includeactive = true;\n\t} else if (status === 'active') {\n\t\tqs.includeinactive = false;\n\t\tqs.includeactive = true;\n\t} else {\n\t\tqs.includeinactive = true;\n\t\tqs.includeactive = false;\n\t}\n\treturn qs;\n}\n\n// Validation -----------------------------------------------------------------------\n\nexport async function validateCredentials(\n\tthis: ICredentialTestFunctions,\n\tdecryptedCredentials: ICredentialDataDecryptedObject,\n): Promise<IHaloPSATokens> {\n\tconst credentials = decryptedCredentials;\n\n\tconst options: IRequestOptions = {\n\t\theaders: {\n\t\t\t'Content-Type': 'application/x-www-form-urlencoded',\n\t\t},\n\t\tmethod: 'POST',\n\t\tform: {\n\t\t\tclient_id: credentials.client_id,\n\t\t\tclient_secret: credentials.client_secret,\n\t\t\tgrant_type: 'client_credentials',\n\t\t\tscope: credentials.scope,\n\t\t},\n\t\turi: getAuthUrl(credentials),\n\t\tjson: true,\n\t};\n\n\treturn (await this.helpers.request(options)) as IHaloPSATokens;\n}\n"],"mappings":"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","names":[]}