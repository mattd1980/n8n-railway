{"version":3,"sources":["../../../../../../nodes/Airtable/v2/actions/record/update.operation.ts"],"sourcesContent":["import type {\n\tIDataObject,\n\tINodeExecutionData,\n\tINodeProperties,\n\tNodeApiError,\n\tIExecuteFunctions,\n} from 'n8n-workflow';\n\nimport { updateDisplayOptions, wrapData } from '../../../../../utils/utilities';\nimport type { UpdateRecord } from '../../helpers/interfaces';\nimport { findMatches, processAirtableError, removeIgnored } from '../../helpers/utils';\nimport { apiRequestAllItems, batchUpdate } from '../../transport';\nimport { insertUpdateOptions } from '../common.descriptions';\n\nconst properties: INodeProperties[] = [\n\t{\n\t\tdisplayName: 'Columns',\n\t\tname: 'columns',\n\t\ttype: 'resourceMapper',\n\t\tnoDataExpression: true,\n\t\tdefault: {\n\t\t\tmappingMode: 'defineBelow',\n\t\t\tvalue: null,\n\t\t},\n\t\trequired: true,\n\t\ttypeOptions: {\n\t\t\tloadOptionsDependsOn: ['table.value', 'base.value'],\n\t\t\tresourceMapper: {\n\t\t\t\tresourceMapperMethod: 'getColumnsWithRecordId',\n\t\t\t\tmode: 'update',\n\t\t\t\tfieldWords: {\n\t\t\t\t\tsingular: 'column',\n\t\t\t\t\tplural: 'columns',\n\t\t\t\t},\n\t\t\t\taddAllFields: true,\n\t\t\t\tmultiKeyMatch: true,\n\t\t\t},\n\t\t},\n\t},\n\t...insertUpdateOptions,\n];\n\nconst displayOptions = {\n\tshow: {\n\t\tresource: ['record'],\n\t\toperation: ['update'],\n\t},\n};\n\nexport const description = updateDisplayOptions(displayOptions, properties);\n\nexport async function execute(\n\tthis: IExecuteFunctions,\n\titems: INodeExecutionData[],\n\tbase: string,\n\ttable: string,\n): Promise<INodeExecutionData[]> {\n\tconst returnData: INodeExecutionData[] = [];\n\n\tconst endpoint = `${base}/${table}`;\n\n\tconst dataMode = this.getNodeParameter('columns.mappingMode', 0) as string;\n\n\tconst columnsToMatchOn = this.getNodeParameter('columns.matchingColumns', 0) as string[];\n\n\tlet tableData: UpdateRecord[] = [];\n\tif (!columnsToMatchOn.includes('id')) {\n\t\tconst response = await apiRequestAllItems.call(\n\t\t\tthis,\n\t\t\t'GET',\n\t\t\tendpoint,\n\t\t\t{},\n\t\t\t{ fields: columnsToMatchOn },\n\t\t);\n\t\ttableData = response.records as UpdateRecord[];\n\t}\n\n\tfor (let i = 0; i < items.length; i++) {\n\t\tlet recordId = '';\n\t\ttry {\n\t\t\tconst records: UpdateRecord[] = [];\n\t\t\tconst options = this.getNodeParameter('options', i, {});\n\t\t\tconst typecast = options.typecast ? true : false;\n\n\t\t\tif (dataMode === 'autoMapInputData') {\n\t\t\t\tif (columnsToMatchOn.includes('id')) {\n\t\t\t\t\tconst { id, ...fields } = items[i].json;\n\t\t\t\t\trecordId = id as string;\n\n\t\t\t\t\trecords.push({\n\t\t\t\t\t\tid: recordId,\n\t\t\t\t\t\tfields: removeIgnored(fields, options.ignoreFields as string),\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tconst matches = findMatches(\n\t\t\t\t\t\ttableData,\n\t\t\t\t\t\tcolumnsToMatchOn,\n\t\t\t\t\t\titems[i].json,\n\t\t\t\t\t\toptions.updateAllMatches as boolean,\n\t\t\t\t\t);\n\n\t\t\t\t\tfor (const match of matches) {\n\t\t\t\t\t\tconst id = match.id as string;\n\t\t\t\t\t\tconst fields = items[i].json;\n\t\t\t\t\t\trecords.push({ id, fields: removeIgnored(fields, options.ignoreFields as string) });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (dataMode === 'defineBelow') {\n\t\t\t\tconst getNodeParameterOptions = typecast ? { skipValidation: true } : undefined;\n\t\t\t\tif (columnsToMatchOn.includes('id')) {\n\t\t\t\t\tconst { id, ...fields } = this.getNodeParameter(\n\t\t\t\t\t\t'columns.value',\n\t\t\t\t\t\ti,\n\t\t\t\t\t\t[],\n\t\t\t\t\t\tgetNodeParameterOptions,\n\t\t\t\t\t) as IDataObject;\n\t\t\t\t\trecords.push({ id: id as string, fields });\n\t\t\t\t} else {\n\t\t\t\t\tconst fields = this.getNodeParameter(\n\t\t\t\t\t\t'columns.value',\n\t\t\t\t\t\ti,\n\t\t\t\t\t\t[],\n\t\t\t\t\t\tgetNodeParameterOptions,\n\t\t\t\t\t) as IDataObject;\n\n\t\t\t\t\tconst matches = findMatches(\n\t\t\t\t\t\ttableData,\n\t\t\t\t\t\tcolumnsToMatchOn,\n\t\t\t\t\t\tfields,\n\t\t\t\t\t\toptions.updateAllMatches as boolean,\n\t\t\t\t\t);\n\n\t\t\t\t\tfor (const match of matches) {\n\t\t\t\t\t\tconst id = match.id as string;\n\t\t\t\t\t\trecords.push({ id, fields: removeIgnored(fields, columnsToMatchOn) });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst body: IDataObject = { typecast };\n\n\t\t\tconst responseData = await batchUpdate.call(this, endpoint, body, records);\n\n\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\twrapData(responseData.records as IDataObject[]),\n\t\t\t\t{ itemData: { item: i } },\n\t\t\t);\n\n\t\t\treturnData.push(...executionData);\n\t\t} catch (error) {\n\t\t\terror = processAirtableError(error as NodeApiError, recordId, i);\n\t\t\tif (this.continueOnFail()) {\n\t\t\t\treturnData.push({ json: { message: error.message, error } });\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\treturn returnData;\n}\n"],"mappings":"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","names":[]}