{"version":3,"sources":["../../../../../nodes/Airtable/v2/methods/loadOptions.ts"],"sourcesContent":["import type { IDataObject, ILoadOptionsFunctions, INodePropertyOptions } from 'n8n-workflow';\nimport { NodeOperationError } from 'n8n-workflow';\n\nimport { apiRequest } from '../transport';\n\nexport async function getColumns(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\tconst base = this.getNodeParameter('base', undefined, {\n\t\textractValue: true,\n\t}) as string;\n\n\tconst tableId = encodeURI(\n\t\tthis.getNodeParameter('table', undefined, {\n\t\t\textractValue: true,\n\t\t}) as string,\n\t);\n\n\tconst response = await apiRequest.call(this, 'GET', `meta/bases/${base}/tables`);\n\n\tconst tableData = ((response.tables as IDataObject[]) || []).find((table: IDataObject) => {\n\t\treturn table.id === tableId;\n\t});\n\n\tif (!tableData) {\n\t\tthrow new NodeOperationError(this.getNode(), 'Table information could not be found!', {\n\t\t\tlevel: 'warning',\n\t\t});\n\t}\n\n\tconst result: INodePropertyOptions[] = [];\n\n\tfor (const field of tableData.fields as IDataObject[]) {\n\t\tresult.push({\n\t\t\tname: field.name as string,\n\t\t\tvalue: field.name as string,\n\t\t\tdescription: `Type: ${field.type}`,\n\t\t});\n\t}\n\n\treturn result;\n}\n\nexport async function getColumnsWithRecordId(\n\tthis: ILoadOptionsFunctions,\n): Promise<INodePropertyOptions[]> {\n\tconst returnData = await getColumns.call(this);\n\treturn [\n\t\t{\n\t\t\t// eslint-disable-next-line n8n-nodes-base/node-param-display-name-miscased-id, n8n-nodes-base/node-param-display-name-miscased\n\t\t\tname: 'id',\n\t\t\tvalue: 'id' as string,\n\t\t\tdescription: 'Type: primaryFieldId',\n\t\t},\n\t\t...returnData,\n\t];\n}\n\nexport async function getColumnsWithoutColumnToMatchOn(\n\tthis: ILoadOptionsFunctions,\n): Promise<INodePropertyOptions[]> {\n\tconst columnToMatchOn = this.getNodeParameter('columnToMatchOn') as string;\n\tconst returnData = await getColumns.call(this);\n\treturn returnData.filter((column) => column.value !== columnToMatchOn);\n}\n\nexport async function getAttachmentColumns(\n\tthis: ILoadOptionsFunctions,\n): Promise<INodePropertyOptions[]> {\n\tconst base = this.getNodeParameter('base', undefined, {\n\t\textractValue: true,\n\t}) as string;\n\n\tconst tableId = encodeURI(\n\t\tthis.getNodeParameter('table', undefined, {\n\t\t\textractValue: true,\n\t\t}) as string,\n\t);\n\n\tconst response = await apiRequest.call(this, 'GET', `meta/bases/${base}/tables`);\n\n\tconst tableData = ((response.tables as IDataObject[]) || []).find((table: IDataObject) => {\n\t\treturn table.id === tableId;\n\t});\n\n\tif (!tableData) {\n\t\tthrow new NodeOperationError(this.getNode(), 'Table information could not be found!', {\n\t\t\tlevel: 'warning',\n\t\t});\n\t}\n\n\tconst result: INodePropertyOptions[] = [];\n\n\tfor (const field of tableData.fields as IDataObject[]) {\n\t\tif (!(field.type as string)?.toLowerCase()?.includes('attachment')) {\n\t\t\tcontinue;\n\t\t}\n\t\tresult.push({\n\t\t\tname: field.name as string,\n\t\t\tvalue: field.name as string,\n\t\t\tdescription: `Type: ${field.type}`,\n\t\t});\n\t}\n\n\treturn result;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,0BAAmC;AAEnC,uBAA2B;AAE3B,eAAsB,aAAyE;AAC9F,QAAM,OAAO,KAAK,iBAAiB,QAAQ,QAAW;AAAA,IACrD,cAAc;AAAA,EACf,CAAC;AAED,QAAM,UAAU;AAAA,IACf,KAAK,iBAAiB,SAAS,QAAW;AAAA,MACzC,cAAc;AAAA,IACf,CAAC;AAAA,EACF;AAEA,QAAM,WAAW,MAAM,4BAAW,KAAK,MAAM,OAAO,cAAc,IAAI,SAAS;AAE/E,QAAM,aAAc,SAAS,UAA4B,CAAC,GAAG,KAAK,CAAC,UAAuB;AACzF,WAAO,MAAM,OAAO;AAAA,EACrB,CAAC;AAED,MAAI,CAAC,WAAW;AACf,UAAM,IAAI,uCAAmB,KAAK,QAAQ,GAAG,yCAAyC;AAAA,MACrF,OAAO;AAAA,IACR,CAAC;AAAA,EACF;AAEA,QAAM,SAAiC,CAAC;AAExC,aAAW,SAAS,UAAU,QAAyB;AACtD,WAAO,KAAK;AAAA,MACX,MAAM,MAAM;AAAA,MACZ,OAAO,MAAM;AAAA,MACb,aAAa,SAAS,MAAM,IAAI;AAAA,IACjC,CAAC;AAAA,EACF;AAEA,SAAO;AACR;AAEA,eAAsB,yBAEa;AAClC,QAAM,aAAa,MAAM,WAAW,KAAK,IAAI;AAC7C,SAAO;AAAA,IACN;AAAA;AAAA,MAEC,MAAM;AAAA,MACN,OAAO;AAAA,MACP,aAAa;AAAA,IACd;AAAA,IACA,GAAG;AAAA,EACJ;AACD;AAEA,eAAsB,mCAEa;AAClC,QAAM,kBAAkB,KAAK,iBAAiB,iBAAiB;AAC/D,QAAM,aAAa,MAAM,WAAW,KAAK,IAAI;AAC7C,SAAO,WAAW,OAAO,CAAC,WAAW,OAAO,UAAU,eAAe;AACtE;AAEA,eAAsB,uBAEa;AAClC,QAAM,OAAO,KAAK,iBAAiB,QAAQ,QAAW;AAAA,IACrD,cAAc;AAAA,EACf,CAAC;AAED,QAAM,UAAU;AAAA,IACf,KAAK,iBAAiB,SAAS,QAAW;AAAA,MACzC,cAAc;AAAA,IACf,CAAC;AAAA,EACF;AAEA,QAAM,WAAW,MAAM,4BAAW,KAAK,MAAM,OAAO,cAAc,IAAI,SAAS;AAE/E,QAAM,aAAc,SAAS,UAA4B,CAAC,GAAG,KAAK,CAAC,UAAuB;AACzF,WAAO,MAAM,OAAO;AAAA,EACrB,CAAC;AAED,MAAI,CAAC,WAAW;AACf,UAAM,IAAI,uCAAmB,KAAK,QAAQ,GAAG,yCAAyC;AAAA,MACrF,OAAO;AAAA,IACR,CAAC;AAAA,EACF;AAEA,QAAM,SAAiC,CAAC;AAExC,aAAW,SAAS,UAAU,QAAyB;AACtD,QAAI,CAAE,MAAM,MAAiB,YAAY,GAAG,SAAS,YAAY,GAAG;AACnE;AAAA,IACD;AACA,WAAO,KAAK;AAAA,MACX,MAAM,MAAM;AAAA,MACZ,OAAO,MAAM;AAAA,MACb,aAAa,SAAS,MAAM,IAAI;AAAA,IACjC,CAAC;AAAA,EACF;AAEA,SAAO;AACR;","names":[]}