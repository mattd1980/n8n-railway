{"version":3,"sources":["../../../../../nodes/Airtable/v2/methods/resourceMapping.ts"],"sourcesContent":["import type {\n\tFieldType,\n\tIDataObject,\n\tILoadOptionsFunctions,\n\tINodePropertyOptions,\n\tResourceMapperField,\n\tResourceMapperFields,\n} from 'n8n-workflow';\nimport { NodeOperationError } from 'n8n-workflow';\n\nimport { apiRequest } from '../transport';\n\ntype AirtableSchema = {\n\tid: string;\n\tname: string;\n\ttype: string;\n\toptions?: IDataObject;\n};\n\ntype TypesMap = Partial<Record<FieldType, string[]>>;\n\nconst airtableReadOnlyFields = [\n\t'autoNumber',\n\t'button',\n\t'count',\n\t'createdBy',\n\t'createdTime',\n\t'formula',\n\t'lastModifiedBy',\n\t'lastModifiedTime',\n\t'lookup',\n\t'rollup',\n\t'externalSyncSource',\n\t'multipleLookupValues',\n];\n\nconst airtableTypesMap: TypesMap = {\n\tstring: ['singleLineText', 'multilineText', 'richText', 'email', 'phoneNumber', 'url'],\n\tnumber: ['rating', 'percent', 'number', 'duration', 'currency'],\n\tboolean: ['checkbox'],\n\tdateTime: ['dateTime', 'date'],\n\ttime: [],\n\tobject: [],\n\toptions: ['singleSelect'],\n\tarray: ['multipleSelects', 'multipleRecordLinks', 'multipleAttachments'],\n};\n\nfunction mapForeignType(foreignType: string, typesMap: TypesMap): FieldType {\n\tlet type: FieldType = 'string';\n\n\tfor (const nativeType of Object.keys(typesMap)) {\n\t\tconst mappedForeignTypes = typesMap[nativeType as FieldType];\n\n\t\tif (mappedForeignTypes?.includes(foreignType)) {\n\t\t\ttype = nativeType as FieldType;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn type;\n}\n\nexport async function getColumns(this: ILoadOptionsFunctions): Promise<ResourceMapperFields> {\n\tconst base = this.getNodeParameter('base', undefined, {\n\t\textractValue: true,\n\t}) as string;\n\n\tconst tableId = encodeURI(\n\t\tthis.getNodeParameter('table', undefined, {\n\t\t\textractValue: true,\n\t\t}) as string,\n\t);\n\n\tconst response = await apiRequest.call(this, 'GET', `meta/bases/${base}/tables`);\n\n\tconst tableData = ((response.tables as IDataObject[]) || []).find((table: IDataObject) => {\n\t\treturn table.id === tableId;\n\t});\n\n\tif (!tableData) {\n\t\tthrow new NodeOperationError(this.getNode(), 'Table information could not be found!', {\n\t\t\tlevel: 'warning',\n\t\t});\n\t}\n\n\tconst fields: ResourceMapperField[] = [];\n\n\tconst constructOptions = (field: AirtableSchema) => {\n\t\tif (field?.options?.choices) {\n\t\t\treturn (field.options.choices as IDataObject[]).map((choice) => ({\n\t\t\t\tname: choice.name,\n\t\t\t\tvalue: choice.name,\n\t\t\t})) as INodePropertyOptions[];\n\t\t}\n\n\t\treturn undefined;\n\t};\n\n\tfor (const field of tableData.fields as AirtableSchema[]) {\n\t\tconst type = mapForeignType(field.type, airtableTypesMap);\n\t\tconst isReadOnly = airtableReadOnlyFields.includes(field.type);\n\t\tconst options = constructOptions(field);\n\t\tfields.push({\n\t\t\tid: field.name,\n\t\t\tdisplayName: field.name,\n\t\t\trequired: false,\n\t\t\tdefaultMatch: false,\n\t\t\tcanBeUsedToMatch: true,\n\t\t\tdisplay: true,\n\t\t\ttype,\n\t\t\toptions,\n\t\t\treadOnly: isReadOnly,\n\t\t\tremoved: isReadOnly,\n\t\t});\n\t}\n\n\treturn { fields };\n}\n\nexport async function getColumnsWithRecordId(\n\tthis: ILoadOptionsFunctions,\n): Promise<ResourceMapperFields> {\n\tconst returnData = await getColumns.call(this);\n\treturn {\n\t\tfields: [\n\t\t\t{\n\t\t\t\tid: 'id',\n\t\t\t\tdisplayName: 'id',\n\t\t\t\trequired: false,\n\t\t\t\tdefaultMatch: true,\n\t\t\t\tdisplay: true,\n\t\t\t\ttype: 'string',\n\t\t\t\treadOnly: true,\n\t\t\t},\n\t\t\t...returnData.fields,\n\t\t],\n\t};\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA,0BAAmC;AAEnC,uBAA2B;AAW3B,MAAM,yBAAyB;AAAA,EAC9B;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACD;AAEA,MAAM,mBAA6B;AAAA,EAClC,QAAQ,CAAC,kBAAkB,iBAAiB,YAAY,SAAS,eAAe,KAAK;AAAA,EACrF,QAAQ,CAAC,UAAU,WAAW,UAAU,YAAY,UAAU;AAAA,EAC9D,SAAS,CAAC,UAAU;AAAA,EACpB,UAAU,CAAC,YAAY,MAAM;AAAA,EAC7B,MAAM,CAAC;AAAA,EACP,QAAQ,CAAC;AAAA,EACT,SAAS,CAAC,cAAc;AAAA,EACxB,OAAO,CAAC,mBAAmB,uBAAuB,qBAAqB;AACxE;AAEA,SAAS,eAAe,aAAqB,UAA+B;AAC3E,MAAI,OAAkB;AAEtB,aAAW,cAAc,OAAO,KAAK,QAAQ,GAAG;AAC/C,UAAM,qBAAqB,SAAS,UAAuB;AAE3D,QAAI,oBAAoB,SAAS,WAAW,GAAG;AAC9C,aAAO;AACP;AAAA,IACD;AAAA,EACD;AAEA,SAAO;AACR;AAEA,eAAsB,aAAuE;AAC5F,QAAM,OAAO,KAAK,iBAAiB,QAAQ,QAAW;AAAA,IACrD,cAAc;AAAA,EACf,CAAC;AAED,QAAM,UAAU;AAAA,IACf,KAAK,iBAAiB,SAAS,QAAW;AAAA,MACzC,cAAc;AAAA,IACf,CAAC;AAAA,EACF;AAEA,QAAM,WAAW,MAAM,4BAAW,KAAK,MAAM,OAAO,cAAc,IAAI,SAAS;AAE/E,QAAM,aAAc,SAAS,UAA4B,CAAC,GAAG,KAAK,CAAC,UAAuB;AACzF,WAAO,MAAM,OAAO;AAAA,EACrB,CAAC;AAED,MAAI,CAAC,WAAW;AACf,UAAM,IAAI,uCAAmB,KAAK,QAAQ,GAAG,yCAAyC;AAAA,MACrF,OAAO;AAAA,IACR,CAAC;AAAA,EACF;AAEA,QAAM,SAAgC,CAAC;AAEvC,QAAM,mBAAmB,CAAC,UAA0B;AACnD,QAAI,OAAO,SAAS,SAAS;AAC5B,aAAQ,MAAM,QAAQ,QAA0B,IAAI,CAAC,YAAY;AAAA,QAChE,MAAM,OAAO;AAAA,QACb,OAAO,OAAO;AAAA,MACf,EAAE;AAAA,IACH;AAEA,WAAO;AAAA,EACR;AAEA,aAAW,SAAS,UAAU,QAA4B;AACzD,UAAM,OAAO,eAAe,MAAM,MAAM,gBAAgB;AACxD,UAAM,aAAa,uBAAuB,SAAS,MAAM,IAAI;AAC7D,UAAM,UAAU,iBAAiB,KAAK;AACtC,WAAO,KAAK;AAAA,MACX,IAAI,MAAM;AAAA,MACV,aAAa,MAAM;AAAA,MACnB,UAAU;AAAA,MACV,cAAc;AAAA,MACd,kBAAkB;AAAA,MAClB,SAAS;AAAA,MACT;AAAA,MACA;AAAA,MACA,UAAU;AAAA,MACV,SAAS;AAAA,IACV,CAAC;AAAA,EACF;AAEA,SAAO,EAAE,OAAO;AACjB;AAEA,eAAsB,yBAEW;AAChC,QAAM,aAAa,MAAM,WAAW,KAAK,IAAI;AAC7C,SAAO;AAAA,IACN,QAAQ;AAAA,MACP;AAAA,QACC,IAAI;AAAA,QACJ,aAAa;AAAA,QACb,UAAU;AAAA,QACV,cAAc;AAAA,QACd,SAAS;AAAA,QACT,MAAM;AAAA,QACN,UAAU;AAAA,MACX;AAAA,MACA,GAAG,WAAW;AAAA,IACf;AAAA,EACD;AACD;","names":[]}