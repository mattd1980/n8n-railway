{"version":3,"sources":["../../../nodes/ReadPdf/ReadPDF.node.ts"],"sourcesContent":["import {\n\tNodeOperationError,\n\tNodeConnectionTypes,\n\ttype IExecuteFunctions,\n\ttype INodeExecutionData,\n\ttype INodeType,\n\ttype INodeTypeDescription,\n} from 'n8n-workflow';\n\nimport { extractDataFromPDF } from '@utils/binary';\n\nexport class ReadPDF implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\thidden: true,\n\t\tdisplayName: 'Read PDF',\n\t\t// eslint-disable-next-line n8n-nodes-base/node-class-description-name-miscased\n\t\tname: 'readPDF',\n\t\ticon: 'fa:file-pdf',\n\t\tgroup: ['input'],\n\t\tversion: 1,\n\t\tdescription: 'Reads a PDF and extracts its content',\n\t\tdefaults: {\n\t\t\tname: 'Read PDF',\n\t\t\tcolor: '#003355',\n\t\t},\n\t\tinputs: [NodeConnectionTypes.Main],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Input Binary Field',\n\t\t\t\tname: 'binaryPropertyName',\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: 'data',\n\t\t\t\trequired: true,\n\t\t\t\tdescription: 'Name of the binary property from which to read the PDF file',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Encrypted',\n\t\t\t\tname: 'encrypted',\n\t\t\t\ttype: 'boolean',\n\t\t\t\tdefault: false,\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Password',\n\t\t\t\tname: 'password',\n\t\t\t\ttype: 'string',\n\t\t\t\ttypeOptions: { password: true },\n\t\t\t\tdefault: '',\n\t\t\t\tdescription: 'Password to decrypt the PDF file with',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tencrypted: [true],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t};\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t\tconst items = this.getInputData();\n\n\t\tconst returnData: INodeExecutionData[] = [];\n\t\tconst length = items.length;\n\n\t\tfor (let itemIndex = 0; itemIndex < length; itemIndex++) {\n\t\t\ttry {\n\t\t\t\tconst binaryPropertyName = this.getNodeParameter('binaryPropertyName', itemIndex);\n\n\t\t\t\tlet password;\n\t\t\t\tif (this.getNodeParameter('encrypted', itemIndex) === true) {\n\t\t\t\t\tpassword = this.getNodeParameter('password', itemIndex) as string;\n\t\t\t\t}\n\n\t\t\t\tconst json = await extractDataFromPDF.call(\n\t\t\t\t\tthis,\n\t\t\t\t\tbinaryPropertyName,\n\t\t\t\t\tpassword,\n\t\t\t\t\tundefined,\n\t\t\t\t\tundefined,\n\t\t\t\t\titemIndex,\n\t\t\t\t);\n\n\t\t\t\treturnData.push({\n\t\t\t\t\tbinary: items[itemIndex].binary,\n\t\t\t\t\tjson,\n\t\t\t\t});\n\t\t\t} catch (error) {\n\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\treturnData.push({\n\t\t\t\t\t\tjson: {\n\t\t\t\t\t\t\terror: error.message,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tpairedItem: {\n\t\t\t\t\t\t\titem: itemIndex,\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tthrow new NodeOperationError(this.getNode(), error, { itemIndex });\n\t\t\t}\n\t\t}\n\t\treturn [returnData];\n\t}\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAOO;AAEP,oBAAmC;AAE5B,MAAM,QAA6B;AAAA,EAAnC;AACN,uBAAoC;AAAA,MACnC,QAAQ;AAAA,MACR,aAAa;AAAA;AAAA,MAEb,MAAM;AAAA,MACN,MAAM;AAAA,MACN,OAAO,CAAC,OAAO;AAAA,MACf,SAAS;AAAA,MACT,aAAa;AAAA,MACb,UAAU;AAAA,QACT,MAAM;AAAA,QACN,OAAO;AAAA,MACR;AAAA,MACA,QAAQ,CAAC,wCAAoB,IAAI;AAAA,MACjC,SAAS,CAAC,wCAAoB,IAAI;AAAA,MAClC,YAAY;AAAA,QACX;AAAA,UACC,aAAa;AAAA,UACb,MAAM;AAAA,UACN,MAAM;AAAA,UACN,SAAS;AAAA,UACT,UAAU;AAAA,UACV,aAAa;AAAA,QACd;AAAA,QACA;AAAA,UACC,aAAa;AAAA,UACb,MAAM;AAAA,UACN,MAAM;AAAA,UACN,SAAS;AAAA,UACT,UAAU;AAAA,QACX;AAAA,QACA;AAAA,UACC,aAAa;AAAA,UACb,MAAM;AAAA,UACN,MAAM;AAAA,UACN,aAAa,EAAE,UAAU,KAAK;AAAA,UAC9B,SAAS;AAAA,UACT,aAAa;AAAA,UACb,gBAAgB;AAAA,YACf,MAAM;AAAA,cACL,WAAW,CAAC,IAAI;AAAA,YACjB;AAAA,UACD;AAAA,QACD;AAAA,MACD;AAAA,IACD;AAAA;AAAA,EAEA,MAAM,UAAkE;AACvE,UAAM,QAAQ,KAAK,aAAa;AAEhC,UAAM,aAAmC,CAAC;AAC1C,UAAM,SAAS,MAAM;AAErB,aAAS,YAAY,GAAG,YAAY,QAAQ,aAAa;AACxD,UAAI;AACH,cAAM,qBAAqB,KAAK,iBAAiB,sBAAsB,SAAS;AAEhF,YAAI;AACJ,YAAI,KAAK,iBAAiB,aAAa,SAAS,MAAM,MAAM;AAC3D,qBAAW,KAAK,iBAAiB,YAAY,SAAS;AAAA,QACvD;AAEA,cAAM,OAAO,MAAM,iCAAmB;AAAA,UACrC;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,QACD;AAEA,mBAAW,KAAK;AAAA,UACf,QAAQ,MAAM,SAAS,EAAE;AAAA,UACzB;AAAA,QACD,CAAC;AAAA,MACF,SAAS,OAAO;AACf,YAAI,KAAK,eAAe,GAAG;AAC1B,qBAAW,KAAK;AAAA,YACf,MAAM;AAAA,cACL,OAAO,MAAM;AAAA,YACd;AAAA,YACA,YAAY;AAAA,cACX,MAAM;AAAA,YACP;AAAA,UACD,CAAC;AACD;AAAA,QACD;AACA,cAAM,IAAI,uCAAmB,KAAK,QAAQ,GAAG,OAAO,EAAE,UAAU,CAAC;AAAA,MAClE;AAAA,IACD;AACA,WAAO,CAAC,UAAU;AAAA,EACnB;AACD;","names":[]}