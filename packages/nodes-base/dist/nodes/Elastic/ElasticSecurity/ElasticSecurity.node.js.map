{"version":3,"sources":["../../../../nodes/Elastic/ElasticSecurity/ElasticSecurity.node.ts"],"sourcesContent":["import type {\n\tIExecuteFunctions,\n\tIDataObject,\n\tILoadOptionsFunctions,\n\tINodeExecutionData,\n\tINodePropertyOptions,\n\tINodeType,\n\tINodeTypeDescription,\n} from 'n8n-workflow';\nimport { NodeConnectionTypes, NodeOperationError } from 'n8n-workflow';\n\nimport {\n\tcaseCommentFields,\n\tcaseCommentOperations,\n\tcaseFields,\n\tcaseOperations,\n\tcaseTagFields,\n\tcaseTagOperations,\n\tconnectorFields,\n\tconnectorOperations,\n} from './descriptions';\nimport {\n\telasticSecurityApiRequest,\n\tgetConnector,\n\tgetVersion,\n\thandleListing,\n\tthrowOnEmptyUpdate,\n} from './GenericFunctions';\nimport type { Connector, ConnectorCreatePayload, ConnectorType } from './types';\n\nexport class ElasticSecurity implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'Elastic Security',\n\t\tname: 'elasticSecurity',\n\t\ticon: 'file:elasticSecurity.svg',\n\t\tgroup: ['transform'],\n\t\tversion: 1,\n\t\tsubtitle: '={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}',\n\t\tdescription: 'Consume the Elastic Security API',\n\t\tdefaults: {\n\t\t\tname: 'Elastic Security',\n\t\t},\n\t\tusableAsTool: true,\n\t\tinputs: [NodeConnectionTypes.Main],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tcredentials: [\n\t\t\t{\n\t\t\t\tname: 'elasticSecurityApi',\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Resource',\n\t\t\t\tname: 'resource',\n\t\t\t\tnoDataExpression: true,\n\t\t\t\ttype: 'options',\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Case',\n\t\t\t\t\t\tvalue: 'case',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Case Comment',\n\t\t\t\t\t\tvalue: 'caseComment',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Case Tag',\n\t\t\t\t\t\tvalue: 'caseTag',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Connector',\n\t\t\t\t\t\tvalue: 'connector',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'case',\n\t\t\t},\n\t\t\t...caseOperations,\n\t\t\t...caseFields,\n\t\t\t...caseCommentOperations,\n\t\t\t...caseCommentFields,\n\t\t\t...caseTagOperations,\n\t\t\t...caseTagFields,\n\t\t\t...connectorOperations,\n\t\t\t...connectorFields,\n\t\t],\n\t};\n\n\tmethods = {\n\t\tloadOptions: {\n\t\t\tasync getTags(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst tags = (await elasticSecurityApiRequest.call(this, 'GET', '/cases/tags')) as string[];\n\t\t\t\treturn tags.map((tag) => ({ name: tag, value: tag }));\n\t\t\t},\n\n\t\t\tasync getConnectors(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst endpoint = '/cases/configure/connectors/_find';\n\t\t\t\tconst connectors = (await elasticSecurityApiRequest.call(\n\t\t\t\t\tthis,\n\t\t\t\t\t'GET',\n\t\t\t\t\tendpoint,\n\t\t\t\t)) as Connector[];\n\t\t\t\treturn connectors.map(({ name, id }) => ({ name, value: id }));\n\t\t\t},\n\t\t},\n\t};\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t\tconst items = this.getInputData();\n\t\tconst returnData: INodeExecutionData[] = [];\n\n\t\tconst resource = this.getNodeParameter('resource', 0);\n\t\tconst operation = this.getNodeParameter('operation', 0);\n\n\t\tlet responseData;\n\n\t\tfor (let i = 0; i < items.length; i++) {\n\t\t\ttry {\n\t\t\t\tif (resource === 'case') {\n\t\t\t\t\t// **********************************************************************\n\t\t\t\t\t//                                  case\n\t\t\t\t\t// **********************************************************************\n\n\t\t\t\t\tif (operation === 'create') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//               case: create\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\t// https://www.elastic.co/guide/en/security/current/cases-api-create.html\n\n\t\t\t\t\t\tconst body = {\n\t\t\t\t\t\t\ttitle: this.getNodeParameter('title', i),\n\t\t\t\t\t\t\tconnector: {},\n\t\t\t\t\t\t\towner: 'securitySolution',\n\t\t\t\t\t\t\tdescription: '',\n\t\t\t\t\t\t\ttags: [], // set via `caseTag: add` but must be present\n\t\t\t\t\t\t\tsettings: {\n\t\t\t\t\t\t\t\tsyncAlerts: this.getNodeParameter('additionalFields.syncAlerts', i, false),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t} as IDataObject;\n\n\t\t\t\t\t\tconst connectorId = this.getNodeParameter('connectorId', i) as ConnectorType;\n\n\t\t\t\t\t\tconst {\n\t\t\t\t\t\t\tid: fetchedId,\n\t\t\t\t\t\t\tname: fetchedName,\n\t\t\t\t\t\t\ttype: fetchedType,\n\t\t\t\t\t\t} = await getConnector.call(this, connectorId);\n\n\t\t\t\t\t\tconst selectedConnectorType = this.getNodeParameter(\n\t\t\t\t\t\t\t'connectorType',\n\t\t\t\t\t\t\ti,\n\t\t\t\t\t\t) as ConnectorType;\n\n\t\t\t\t\t\tif (fetchedType !== selectedConnectorType) {\n\t\t\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t\t\t'Connector Type does not match the type of the connector in Connector Name',\n\t\t\t\t\t\t\t\t{ itemIndex: i },\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst connector = {\n\t\t\t\t\t\t\tid: fetchedId,\n\t\t\t\t\t\t\tname: fetchedName,\n\t\t\t\t\t\t\ttype: fetchedType,\n\t\t\t\t\t\t\tfields: {},\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tif (selectedConnectorType === '.jira') {\n\t\t\t\t\t\t\tconnector.fields = {\n\t\t\t\t\t\t\t\tissueType: this.getNodeParameter('issueType', i),\n\t\t\t\t\t\t\t\tpriority: this.getNodeParameter('priority', i),\n\t\t\t\t\t\t\t\tparent: null, // required but unimplemented\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t} else if (selectedConnectorType === '.servicenow') {\n\t\t\t\t\t\t\tconnector.fields = {\n\t\t\t\t\t\t\t\turgency: this.getNodeParameter('urgency', i),\n\t\t\t\t\t\t\t\tseverity: this.getNodeParameter('severity', i),\n\t\t\t\t\t\t\t\timpact: this.getNodeParameter('impact', i),\n\t\t\t\t\t\t\t\tcategory: this.getNodeParameter('category', i),\n\t\t\t\t\t\t\t\tsubcategory: null, // required but unimplemented\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t} else if (selectedConnectorType === '.resilient') {\n\t\t\t\t\t\t\tconst rawIssueTypes = this.getNodeParameter('issueTypes', i) as string;\n\t\t\t\t\t\t\tconnector.fields = {\n\t\t\t\t\t\t\t\tissueTypes: rawIssueTypes.split(',').map(Number),\n\t\t\t\t\t\t\t\tseverityCode: this.getNodeParameter('severityCode', i) as number,\n\t\t\t\t\t\t\t\tincidentTypes: null, // required but undocumented\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbody.connector = connector;\n\n\t\t\t\t\t\tconst {\n\t\t\t\t\t\t\tsyncAlerts, // ignored because already set\n\t\t\t\t\t\t\t...rest\n\t\t\t\t\t\t} = this.getNodeParameter('additionalFields', i);\n\n\t\t\t\t\t\tif (Object.keys(rest).length) {\n\t\t\t\t\t\t\tObject.assign(body, rest);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await elasticSecurityApiRequest.call(this, 'POST', '/cases', body);\n\t\t\t\t\t} else if (operation === 'delete') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//               case: delete\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\t// https://www.elastic.co/guide/en/security/current/cases-api-delete-case.html\n\n\t\t\t\t\t\tconst caseId = this.getNodeParameter('caseId', i);\n\t\t\t\t\t\tawait elasticSecurityApiRequest.call(this, 'DELETE', `/cases?ids=[\"${caseId}\"]`);\n\t\t\t\t\t\tresponseData = { success: true };\n\t\t\t\t\t} else if (operation === 'get') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//                case: get\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\t// https://www.elastic.co/guide/en/security/current/cases-api-get-case.html\n\n\t\t\t\t\t\tconst caseId = this.getNodeParameter('caseId', i);\n\t\t\t\t\t\tresponseData = await elasticSecurityApiRequest.call(this, 'GET', `/cases/${caseId}`);\n\t\t\t\t\t} else if (operation === 'getAll') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//               case: getAll\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\t// https://www.elastic.co/guide/en/security/current/cases-api-find-cases.html\n\n\t\t\t\t\t\tconst qs = {} as IDataObject;\n\t\t\t\t\t\tconst { tags, status } = this.getNodeParameter('filters', i) as IDataObject & {\n\t\t\t\t\t\t\ttags: string[];\n\t\t\t\t\t\t\tstatus: string;\n\t\t\t\t\t\t};\n\t\t\t\t\t\tconst sortOptions = this.getNodeParameter('sortOptions', i) as IDataObject;\n\n\t\t\t\t\t\tqs.sortField = sortOptions.sortField ?? 'createdAt';\n\t\t\t\t\t\tqs.sortOrder = sortOptions.sortOrder ?? 'asc';\n\n\t\t\t\t\t\tif (status) {\n\t\t\t\t\t\t\tqs.status = status;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (tags?.length) {\n\t\t\t\t\t\t\tqs.tags = tags.join(',');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await handleListing.call(this, 'GET', '/cases/_find', {}, qs);\n\t\t\t\t\t} else if (operation === 'getStatus') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//             case: getStatus\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\t// https://www.elastic.co/guide/en/security/current/cases-api-get-status.html\n\n\t\t\t\t\t\tresponseData = await elasticSecurityApiRequest.call(this, 'GET', '/cases/status');\n\t\t\t\t\t} else if (operation === 'update') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//               case: update\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\t// https://www.elastic.co/guide/en/security/current/cases-api-update.html\n\n\t\t\t\t\t\tconst caseId = this.getNodeParameter('caseId', i);\n\n\t\t\t\t\t\tconst body = {} as IDataObject;\n\t\t\t\t\t\tconst updateFields = this.getNodeParameter('updateFields', i);\n\n\t\t\t\t\t\tif (!Object.keys(updateFields).length) {\n\t\t\t\t\t\t\tthrowOnEmptyUpdate.call(this, resource);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst { syncAlerts, ...rest } = updateFields;\n\n\t\t\t\t\t\tObject.assign(body, {\n\t\t\t\t\t\t\tcases: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tid: caseId,\n\t\t\t\t\t\t\t\t\tversion: await getVersion.call(this, `/cases/${caseId}`),\n\t\t\t\t\t\t\t\t\t...(syncAlerts && { settings: { syncAlerts } }),\n\t\t\t\t\t\t\t\t\t...rest,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tresponseData = await elasticSecurityApiRequest.call(this, 'PATCH', '/cases', body);\n\t\t\t\t\t}\n\t\t\t\t} else if (resource === 'caseTag') {\n\t\t\t\t\t// **********************************************************************\n\t\t\t\t\t//                               caseTag\n\t\t\t\t\t// **********************************************************************\n\n\t\t\t\t\tif (operation === 'add') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//              caseTag: add\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\t// https://www.elastic.co/guide/en/security/current/cases-api-create.html\n\n\t\t\t\t\t\tconst caseId = this.getNodeParameter('caseId', i);\n\n\t\t\t\t\t\tconst { title, connector, owner, description, settings, tags } =\n\t\t\t\t\t\t\tawait elasticSecurityApiRequest.call(this, 'GET', `/cases/${caseId}`);\n\n\t\t\t\t\t\tconst tagToAdd = this.getNodeParameter('tag', i);\n\n\t\t\t\t\t\tif (tags.includes(tagToAdd)) {\n\t\t\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t\t\t`Cannot add tag \"${tagToAdd}\" to case ID ${caseId} because this case already has this tag.`,\n\t\t\t\t\t\t\t\t{ itemIndex: i },\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst body = {};\n\n\t\t\t\t\t\tObject.assign(body, {\n\t\t\t\t\t\t\tcases: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tid: caseId,\n\t\t\t\t\t\t\t\t\ttitle,\n\t\t\t\t\t\t\t\t\tconnector,\n\t\t\t\t\t\t\t\t\towner,\n\t\t\t\t\t\t\t\t\tdescription,\n\t\t\t\t\t\t\t\t\tsettings,\n\t\t\t\t\t\t\t\t\tversion: await getVersion.call(this, `/cases/${caseId}`),\n\t\t\t\t\t\t\t\t\ttags: [...tags, tagToAdd],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tresponseData = await elasticSecurityApiRequest.call(this, 'PATCH', '/cases', body);\n\t\t\t\t\t} else if (operation === 'remove') {\n\t\t\t\t\t\t// https://www.elastic.co/guide/en/security/current/cases-api-update.html\n\n\t\t\t\t\t\tconst caseId = this.getNodeParameter('caseId', i);\n\t\t\t\t\t\tconst tagToRemove = this.getNodeParameter('tag', i) as string;\n\n\t\t\t\t\t\tconst { title, connector, owner, description, settings, tags } =\n\t\t\t\t\t\t\t(await elasticSecurityApiRequest.call(\n\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t\t`/cases/${caseId}`,\n\t\t\t\t\t\t\t)) as IDataObject & { tags: string[] };\n\n\t\t\t\t\t\tif (!tags.includes(tagToRemove)) {\n\t\t\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t\t\t`Cannot remove tag \"${tagToRemove}\" from case ID ${caseId} because this case does not have this tag.`,\n\t\t\t\t\t\t\t\t{ itemIndex: i },\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst body = {};\n\n\t\t\t\t\t\tObject.assign(body, {\n\t\t\t\t\t\t\tcases: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tid: caseId,\n\t\t\t\t\t\t\t\t\ttitle,\n\t\t\t\t\t\t\t\t\tconnector,\n\t\t\t\t\t\t\t\t\towner,\n\t\t\t\t\t\t\t\t\tdescription,\n\t\t\t\t\t\t\t\t\tsettings,\n\t\t\t\t\t\t\t\t\tversion: await getVersion.call(this, `/cases/${caseId}`),\n\t\t\t\t\t\t\t\t\ttags: tags.filter((tag) => tag !== tagToRemove),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tresponseData = await elasticSecurityApiRequest.call(this, 'PATCH', '/cases', body);\n\t\t\t\t\t}\n\t\t\t\t} else if (resource === 'caseComment') {\n\t\t\t\t\t// **********************************************************************\n\t\t\t\t\t//                              caseComment\n\t\t\t\t\t// **********************************************************************\n\n\t\t\t\t\tif (operation === 'add') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//             caseComment: add\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\t// https://www.elastic.co/guide/en/security/current/cases-api-add-comment.html\n\n\t\t\t\t\t\tconst simple = this.getNodeParameter('simple', i) as boolean;\n\n\t\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i);\n\n\t\t\t\t\t\tconst body = {\n\t\t\t\t\t\t\tcomment: this.getNodeParameter('comment', i),\n\t\t\t\t\t\t\ttype: 'user',\n\t\t\t\t\t\t\towner: additionalFields.owner || 'securitySolution',\n\t\t\t\t\t\t} as IDataObject;\n\n\t\t\t\t\t\tconst caseId = this.getNodeParameter('caseId', i);\n\t\t\t\t\t\tconst endpoint = `/cases/${caseId}/comments`;\n\t\t\t\t\t\tresponseData = await elasticSecurityApiRequest.call(this, 'POST', endpoint, body);\n\n\t\t\t\t\t\tif (simple) {\n\t\t\t\t\t\t\tconst { comments } = responseData;\n\t\t\t\t\t\t\tresponseData = comments[comments.length - 1];\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (operation === 'get') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//             caseComment: get\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\t// https://www.elastic.co/guide/en/security/current/cases-api-get-comment.html\n\n\t\t\t\t\t\tconst caseId = this.getNodeParameter('caseId', i);\n\t\t\t\t\t\tconst commentId = this.getNodeParameter('commentId', i);\n\n\t\t\t\t\t\tconst endpoint = `/cases/${caseId}/comments/${commentId}`;\n\t\t\t\t\t\tresponseData = await elasticSecurityApiRequest.call(this, 'GET', endpoint);\n\t\t\t\t\t} else if (operation === 'getAll') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//           caseComment: getAll\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\t// https://www.elastic.co/guide/en/security/current/cases-api-get-all-case-comments.html\n\n\t\t\t\t\t\tconst caseId = this.getNodeParameter('caseId', i);\n\n\t\t\t\t\t\tconst endpoint = `/cases/${caseId}/comments`;\n\t\t\t\t\t\tresponseData = await handleListing.call(this, 'GET', endpoint);\n\t\t\t\t\t} else if (operation === 'remove') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//           caseComment: remove\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\t// https://www.elastic.co/guide/en/security/current/cases-api-delete-comment.html\n\n\t\t\t\t\t\tconst caseId = this.getNodeParameter('caseId', i);\n\t\t\t\t\t\tconst commentId = this.getNodeParameter('commentId', i);\n\n\t\t\t\t\t\tconst endpoint = `/cases/${caseId}/comments/${commentId}`;\n\t\t\t\t\t\tawait elasticSecurityApiRequest.call(this, 'DELETE', endpoint);\n\t\t\t\t\t\tresponseData = { success: true };\n\t\t\t\t\t} else if (operation === 'update') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//           caseComment: update\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\t// https://www.elastic.co/guide/en/security/current/cases-api-update-comment.html\n\n\t\t\t\t\t\tconst simple = this.getNodeParameter('simple', i) as boolean;\n\t\t\t\t\t\tconst caseId = this.getNodeParameter('caseId', i);\n\t\t\t\t\t\tconst commentId = this.getNodeParameter('commentId', i);\n\n\t\t\t\t\t\tconst body = {\n\t\t\t\t\t\t\tcomment: this.getNodeParameter('comment', i),\n\t\t\t\t\t\t\tid: commentId,\n\t\t\t\t\t\t\ttype: 'user',\n\t\t\t\t\t\t\towner: 'securitySolution',\n\t\t\t\t\t\t\tversion: await getVersion.call(this, `/cases/${caseId}/comments/${commentId}`),\n\t\t\t\t\t\t} as IDataObject;\n\n\t\t\t\t\t\tconst patchEndpoint = `/cases/${caseId}/comments`;\n\t\t\t\t\t\tresponseData = await elasticSecurityApiRequest.call(this, 'PATCH', patchEndpoint, body);\n\n\t\t\t\t\t\tif (simple) {\n\t\t\t\t\t\t\tconst { comments } = responseData;\n\t\t\t\t\t\t\tresponseData = comments[comments.length - 1];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (resource === 'connector') {\n\t\t\t\t\tif (operation === 'create') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//           connector: create\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\t// https://www.elastic.co/guide/en/security/current/register-connector.html\n\n\t\t\t\t\t\tconst connectorType = this.getNodeParameter('connectorType', i) as ConnectorType;\n\n\t\t\t\t\t\tconst body: ConnectorCreatePayload = {\n\t\t\t\t\t\t\tconnector_type_id: connectorType,\n\t\t\t\t\t\t\tname: this.getNodeParameter('name', i) as string,\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tif (connectorType === '.jira') {\n\t\t\t\t\t\t\tbody.config = {\n\t\t\t\t\t\t\t\tapiUrl: this.getNodeParameter('apiUrl', i) as string,\n\t\t\t\t\t\t\t\tprojectKey: this.getNodeParameter('projectKey', i) as string,\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tbody.secrets = {\n\t\t\t\t\t\t\t\temail: this.getNodeParameter('email', i) as string,\n\t\t\t\t\t\t\t\tapiToken: this.getNodeParameter('apiToken', i) as string,\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t} else if (connectorType === '.resilient') {\n\t\t\t\t\t\t\tbody.config = {\n\t\t\t\t\t\t\t\tapiUrl: this.getNodeParameter('apiUrl', i) as string,\n\t\t\t\t\t\t\t\torgId: this.getNodeParameter('orgId', i) as string,\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tbody.secrets = {\n\t\t\t\t\t\t\t\tapiKeyId: this.getNodeParameter('apiKeyId', i) as string,\n\t\t\t\t\t\t\t\tapiKeySecret: this.getNodeParameter('apiKeySecret', i) as string,\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t} else if (connectorType === '.servicenow') {\n\t\t\t\t\t\t\tbody.config = {\n\t\t\t\t\t\t\t\tapiUrl: this.getNodeParameter('apiUrl', i) as string,\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tbody.secrets = {\n\t\t\t\t\t\t\t\tusername: this.getNodeParameter('username', i) as string,\n\t\t\t\t\t\t\t\tpassword: this.getNodeParameter('password', i) as string,\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await elasticSecurityApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'POST',\n\t\t\t\t\t\t\t'/actions/connector',\n\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t);\n\t\t\t\treturnData.push(...executionData);\n\t\t\t} catch (error) {\n\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\tconst executionErrorData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\tthis.helpers.returnJsonArray({ error: error.message }),\n\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t);\n\t\t\t\t\treturnData.push(...executionErrorData);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\n\t\treturn [returnData];\n\t}\n}\n"],"mappings":"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","names":[]}