{"version":3,"sources":["../../../../nodes/Elastic/Elasticsearch/Elasticsearch.node.ts"],"sourcesContent":["import omit from 'lodash/omit';\nimport type {\n\tIExecuteFunctions,\n\tIDataObject,\n\tINodeExecutionData,\n\tINodeType,\n\tINodeTypeDescription,\n\tJsonObject,\n} from 'n8n-workflow';\nimport { NodeConnectionTypes, jsonParse, NodeApiError } from 'n8n-workflow';\n\nimport { documentFields, documentOperations, indexFields, indexOperations } from './descriptions';\nimport {\n\telasticsearchApiRequest,\n\telasticsearchApiRequestAllItems,\n\telasticsearchBulkApiRequest,\n} from './GenericFunctions';\nimport type { DocumentGetAllOptions, FieldsUiValues } from './types';\n\nexport class Elasticsearch implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'Elasticsearch',\n\t\tname: 'elasticsearch',\n\t\ticon: 'file:elasticsearch.svg',\n\t\tgroup: ['transform'],\n\t\tversion: 1,\n\t\tsubtitle: '={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}',\n\t\tdescription: 'Consume the Elasticsearch API',\n\t\tdefaults: {\n\t\t\tname: 'Elasticsearch',\n\t\t},\n\t\tusableAsTool: true,\n\t\tinputs: [NodeConnectionTypes.Main],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tcredentials: [\n\t\t\t{\n\t\t\t\tname: 'elasticsearchApi',\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Resource',\n\t\t\t\tname: 'resource',\n\t\t\t\ttype: 'options',\n\t\t\t\tnoDataExpression: true,\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Document',\n\t\t\t\t\t\tvalue: 'document',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Index',\n\t\t\t\t\t\tvalue: 'index',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'document',\n\t\t\t},\n\t\t\t...documentOperations,\n\t\t\t...documentFields,\n\t\t\t...indexOperations,\n\t\t\t...indexFields,\n\t\t],\n\t};\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t\tconst items = this.getInputData();\n\t\tconst returnData: INodeExecutionData[] = [];\n\n\t\tconst resource = this.getNodeParameter('resource', 0) as 'document' | 'index';\n\t\tconst operation = this.getNodeParameter('operation', 0);\n\n\t\tlet responseData;\n\n\t\tlet bulkBody: IDataObject = {};\n\n\t\tfor (let i = 0; i < items.length; i++) {\n\t\t\tconst bulkOperation = this.getNodeParameter('options.bulkOperation', i, false);\n\t\t\tif (resource === 'document') {\n\t\t\t\t// **********************************************************************\n\t\t\t\t//                                document\n\t\t\t\t// **********************************************************************\n\t\t\t\tif (operation === 'delete') {\n\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t//             document: delete\n\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t// https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-delete.html\n\n\t\t\t\t\tconst indexId = this.getNodeParameter('indexId', i);\n\t\t\t\t\tconst documentId = this.getNodeParameter('documentId', i);\n\n\t\t\t\t\tif (bulkOperation) {\n\t\t\t\t\t\tbulkBody[i] = JSON.stringify({\n\t\t\t\t\t\t\tdelete: {\n\t\t\t\t\t\t\t\t_index: indexId,\n\t\t\t\t\t\t\t\t_id: documentId,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst endpoint = `/${indexId}/_doc/${documentId}`;\n\t\t\t\t\t\tresponseData = await elasticsearchApiRequest.call(this, 'DELETE', endpoint);\n\t\t\t\t\t}\n\t\t\t\t} else if (operation === 'get') {\n\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t//              document: get\n\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t// https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-get.html\n\n\t\t\t\t\tconst indexId = this.getNodeParameter('indexId', i);\n\t\t\t\t\tconst documentId = this.getNodeParameter('documentId', i);\n\n\t\t\t\t\tconst qs = {} as IDataObject;\n\t\t\t\t\tconst options = this.getNodeParameter('options', i);\n\n\t\t\t\t\tif (Object.keys(options).length) {\n\t\t\t\t\t\tObject.assign(qs, options);\n\t\t\t\t\t\tqs._source = true;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst endpoint = `/${indexId}/_doc/${documentId}`;\n\t\t\t\t\tresponseData = await elasticsearchApiRequest.call(this, 'GET', endpoint, {}, qs);\n\n\t\t\t\t\tconst simple = this.getNodeParameter('simple', i) as IDataObject;\n\n\t\t\t\t\tif (simple) {\n\t\t\t\t\t\tresponseData = {\n\t\t\t\t\t\t\t_id: responseData._id,\n\t\t\t\t\t\t\t...responseData._source,\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t} else if (operation === 'getAll') {\n\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t//            document: getAll\n\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t// https://www.elastic.co/guide/en/elasticsearch/reference/current/search-search.html\n\n\t\t\t\t\tconst indexId = this.getNodeParameter('indexId', i);\n\n\t\t\t\t\tconst body = {} as IDataObject;\n\t\t\t\t\tconst qs = {} as IDataObject;\n\t\t\t\t\tconst options = this.getNodeParameter('options', i) as DocumentGetAllOptions;\n\t\t\t\t\t// const paginate = this.getNodeParameter('paginate', i) as boolean;\n\n\t\t\t\t\tif (Object.keys(options).length) {\n\t\t\t\t\t\tconst { query, ...rest } = options;\n\t\t\t\t\t\tif (query) {\n\t\t\t\t\t\t\tObject.assign(\n\t\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t\t\tjsonParse(query, { errorMessage: \"Invalid JSON in 'Query' option\" }),\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tObject.assign(qs, rest);\n\t\t\t\t\t\tqs._source = true;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', 0);\n\n\t\t\t\t\tif (returnAll) {\n\t\t\t\t\t\t//Defines the number of hits to return. Defaults to 10. By default, you cannot page through more than 10,000 hits\n\t\t\t\t\t\tqs.size = 10000;\n\t\t\t\t\t\tif (qs.sort) {\n\t\t\t\t\t\t\tresponseData = await elasticsearchApiRequestAllItems.call(\n\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\tindexId as string,\n\t\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresponseData = await elasticsearchApiRequest.call(\n\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t'POST',\n\t\t\t\t\t\t\t\t`/${indexId}/_search`,\n\t\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tresponseData = responseData.hits.hits;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tqs.size = this.getNodeParameter('limit', 0);\n\n\t\t\t\t\t\tresponseData = await elasticsearchApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'POST',\n\t\t\t\t\t\t\t`/${indexId}/_search`,\n\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tresponseData = responseData.hits.hits;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst simple = this.getNodeParameter('simple', 0) as IDataObject;\n\n\t\t\t\t\tif (simple) {\n\t\t\t\t\t\tresponseData = responseData.map((item: IDataObject) => {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t_id: item._id,\n\t\t\t\t\t\t\t\t...(item._source as IDataObject),\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t} else if (operation === 'create') {\n\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t//             document: create\n\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t// https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-index_.html\n\n\t\t\t\t\tconst body: IDataObject = {};\n\n\t\t\t\t\tconst dataToSend = this.getNodeParameter('dataToSend', 0) as\n\t\t\t\t\t\t| 'defineBelow'\n\t\t\t\t\t\t| 'autoMapInputData';\n\n\t\t\t\t\tif (dataToSend === 'defineBelow') {\n\t\t\t\t\t\tconst fields = this.getNodeParameter('fieldsUi.fieldValues', i, []) as FieldsUiValues;\n\t\t\t\t\t\tfields.forEach(({ fieldId, fieldValue }) => (body[fieldId] = fieldValue));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst inputData = items[i].json;\n\t\t\t\t\t\tconst rawInputsToIgnore = this.getNodeParameter('inputsToIgnore', i) as string;\n\t\t\t\t\t\tconst inputsToIgnore = rawInputsToIgnore.split(',').map((c) => c.trim());\n\n\t\t\t\t\t\tfor (const key of Object.keys(inputData)) {\n\t\t\t\t\t\t\tif (inputsToIgnore.includes(key)) continue;\n\t\t\t\t\t\t\tbody[key] = inputData[key];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tconst qs = {} as IDataObject;\n\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i);\n\n\t\t\t\t\tif (Object.keys(additionalFields).length) {\n\t\t\t\t\t\tObject.assign(qs, omit(additionalFields, ['documentId']));\n\t\t\t\t\t}\n\n\t\t\t\t\tconst indexId = this.getNodeParameter('indexId', i);\n\t\t\t\t\tconst { documentId } = additionalFields;\n\n\t\t\t\t\tif (bulkOperation) {\n\t\t\t\t\t\tbulkBody[i] = JSON.stringify({\n\t\t\t\t\t\t\tindex: {\n\t\t\t\t\t\t\t\t_index: indexId,\n\t\t\t\t\t\t\t\t_id: documentId,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t});\n\t\t\t\t\t\tbulkBody[i] += `\\n${JSON.stringify(body)}`;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (documentId) {\n\t\t\t\t\t\t\tconst endpoint = `/${indexId}/_doc/${documentId}`;\n\t\t\t\t\t\t\tresponseData = await elasticsearchApiRequest.call(this, 'PUT', endpoint, body);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst endpoint = `/${indexId}/_doc`;\n\t\t\t\t\t\t\tresponseData = await elasticsearchApiRequest.call(this, 'POST', endpoint, body);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (operation === 'update') {\n\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t//             document: update\n\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t// https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-update.html\n\n\t\t\t\t\tconst body = { doc: {} } as { doc: { [key: string]: string } };\n\n\t\t\t\t\tconst dataToSend = this.getNodeParameter('dataToSend', 0) as\n\t\t\t\t\t\t| 'defineBelow'\n\t\t\t\t\t\t| 'autoMapInputData';\n\n\t\t\t\t\tif (dataToSend === 'defineBelow') {\n\t\t\t\t\t\tconst fields = this.getNodeParameter('fieldsUi.fieldValues', i, []) as FieldsUiValues;\n\t\t\t\t\t\tfields.forEach(({ fieldId, fieldValue }) => (body.doc[fieldId] = fieldValue));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst inputData = items[i].json;\n\t\t\t\t\t\tconst rawInputsToIgnore = this.getNodeParameter('inputsToIgnore', i) as string;\n\t\t\t\t\t\tconst inputsToIgnore = rawInputsToIgnore.split(',').map((c) => c.trim());\n\n\t\t\t\t\t\tfor (const key of Object.keys(inputData)) {\n\t\t\t\t\t\t\tif (inputsToIgnore.includes(key)) continue;\n\t\t\t\t\t\t\tbody.doc[key] = inputData[key] as string;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tconst indexId = this.getNodeParameter('indexId', i);\n\t\t\t\t\tconst documentId = this.getNodeParameter('documentId', i);\n\n\t\t\t\t\tconst endpoint = `/${indexId}/_update/${documentId}`;\n\t\t\t\t\tif (bulkOperation) {\n\t\t\t\t\t\tbulkBody[i] = JSON.stringify({\n\t\t\t\t\t\t\tupdate: {\n\t\t\t\t\t\t\t\t_index: indexId,\n\t\t\t\t\t\t\t\t_id: documentId,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t});\n\t\t\t\t\t\tbulkBody[i] += `\\n${JSON.stringify(body)}`;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresponseData = await elasticsearchApiRequest.call(this, 'POST', endpoint, body);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (resource === 'index') {\n\t\t\t\t// **********************************************************************\n\t\t\t\t//                                 index\n\t\t\t\t// **********************************************************************\n\n\t\t\t\t// https://www.elastic.co/guide/en/elasticsearch/reference/current/indices.html\n\n\t\t\t\tif (operation === 'create') {\n\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t//              index: create\n\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t// https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-create-index.html\n\n\t\t\t\t\tconst indexId = this.getNodeParameter('indexId', i);\n\n\t\t\t\t\tconst body = {} as IDataObject;\n\t\t\t\t\tconst qs = {} as IDataObject;\n\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i);\n\n\t\t\t\t\tif (Object.keys(additionalFields).length) {\n\t\t\t\t\t\tconst { aliases, mappings, settings, ...rest } = additionalFields;\n\t\t\t\t\t\tObject.assign(body, aliases, mappings, settings);\n\t\t\t\t\t\tObject.assign(qs, rest);\n\t\t\t\t\t}\n\n\t\t\t\t\tresponseData = await elasticsearchApiRequest.call(this, 'PUT', `/${indexId}`);\n\t\t\t\t\tresponseData = { id: indexId, ...responseData };\n\t\t\t\t\tdelete responseData.index;\n\t\t\t\t} else if (operation === 'delete') {\n\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t//              index: delete\n\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t// https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-delete-index.html\n\n\t\t\t\t\tconst indexId = this.getNodeParameter('indexId', i);\n\n\t\t\t\t\tresponseData = await elasticsearchApiRequest.call(this, 'DELETE', `/${indexId}`);\n\t\t\t\t\tresponseData = { success: true };\n\t\t\t\t} else if (operation === 'get') {\n\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t//              index: get\n\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t// https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-index.html\n\n\t\t\t\t\tconst indexId = this.getNodeParameter('indexId', i) as string;\n\n\t\t\t\t\tconst qs = {} as IDataObject;\n\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i);\n\n\t\t\t\t\tif (Object.keys(additionalFields).length) {\n\t\t\t\t\t\tObject.assign(qs, additionalFields);\n\t\t\t\t\t}\n\n\t\t\t\t\tresponseData = await elasticsearchApiRequest.call(this, 'GET', `/${indexId}`, {}, qs);\n\t\t\t\t\tresponseData = { id: indexId, ...responseData[indexId] };\n\t\t\t\t} else if (operation === 'getAll') {\n\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t//              index: getAll\n\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t// https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-aliases.html\n\n\t\t\t\t\tresponseData = await elasticsearchApiRequest.call(this, 'GET', '/_aliases');\n\t\t\t\t\tresponseData = Object.keys(responseData as IDataObject).map((index) => ({\n\t\t\t\t\t\tindexId: index,\n\t\t\t\t\t}));\n\n\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', i);\n\n\t\t\t\t\tif (!returnAll) {\n\t\t\t\t\t\tconst limit = this.getNodeParameter('limit', i);\n\t\t\t\t\t\tresponseData = responseData.slice(0, limit);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!bulkOperation) {\n\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t);\n\t\t\t\treturnData.push(...executionData);\n\t\t\t}\n\t\t\tif (Object.keys(bulkBody).length >= 50) {\n\t\t\t\tresponseData = (await elasticsearchBulkApiRequest.call(this, bulkBody)) as IDataObject[];\n\t\t\t\tfor (let j = 0; j < responseData.length; j++) {\n\t\t\t\t\tconst itemData = responseData[j];\n\t\t\t\t\tif (itemData.error) {\n\t\t\t\t\t\tconst errorData = itemData.error as IDataObject;\n\t\t\t\t\t\tconst message = errorData.type as string;\n\t\t\t\t\t\tconst description = errorData.reason as string;\n\t\t\t\t\t\tconst itemIndex = parseInt(Object.keys(bulkBody)[j]);\n\t\t\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\t\t\treturnData.push(\n\t\t\t\t\t\t\t\t...this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\t\t\tthis.helpers.returnJsonArray({ error: message, message: itemData.error }),\n\t\t\t\t\t\t\t\t\t{ itemData: { item: itemIndex } },\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthrow new NodeApiError(this.getNode(), {\n\t\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\t\tdescription,\n\t\t\t\t\t\t\t\titemIndex,\n\t\t\t\t\t\t\t} as JsonObject);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\tthis.helpers.returnJsonArray(itemData),\n\t\t\t\t\t\t{ itemData: { item: parseInt(Object.keys(bulkBody)[j]) } },\n\t\t\t\t\t);\n\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t}\n\t\t\t\tbulkBody = {};\n\t\t\t}\n\t\t}\n\t\tif (Object.keys(bulkBody).length) {\n\t\t\tresponseData = (await elasticsearchBulkApiRequest.call(this, bulkBody)) as IDataObject[];\n\t\t\tfor (let j = 0; j < responseData.length; j++) {\n\t\t\t\tconst itemData = responseData[j];\n\t\t\t\tif (itemData.error) {\n\t\t\t\t\tconst errorData = itemData.error as IDataObject;\n\t\t\t\t\tconst message = errorData.type as string;\n\t\t\t\t\tconst description = errorData.reason as string;\n\t\t\t\t\tconst itemIndex = parseInt(Object.keys(bulkBody)[j]);\n\t\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\t\treturnData.push(\n\t\t\t\t\t\t\t...this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\t\tthis.helpers.returnJsonArray({ error: message, message: itemData.error }),\n\t\t\t\t\t\t\t\t{ itemData: { item: itemIndex } },\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new NodeApiError(this.getNode(), {\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tdescription,\n\t\t\t\t\t\t\titemIndex,\n\t\t\t\t\t\t} as JsonObject);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\tthis.helpers.returnJsonArray(itemData),\n\t\t\t\t\t{ itemData: { item: parseInt(Object.keys(bulkBody)[j]) } },\n\t\t\t\t);\n\t\t\t\treturnData.push(...executionData);\n\t\t\t}\n\t\t}\n\t\treturn [returnData];\n\t}\n}\n"],"mappings":"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","names":["omit"]}