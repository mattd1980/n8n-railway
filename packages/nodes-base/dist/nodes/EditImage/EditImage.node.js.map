{"version":3,"sources":["../../../nodes/EditImage/EditImage.node.ts"],"sourcesContent":["import { writeFile as fsWriteFile } from 'fs/promises';\nimport getSystemFonts from 'get-system-fonts';\nimport gm from 'gm';\nimport type {\n\tIDataObject,\n\tIExecuteFunctions,\n\tILoadOptionsFunctions,\n\tINodeExecutionData,\n\tINodeProperties,\n\tINodePropertyOptions,\n\tINodeType,\n\tINodeTypeDescription,\n} from 'n8n-workflow';\nimport { NodeOperationError, NodeConnectionTypes, deepCopy } from 'n8n-workflow';\nimport { parse as pathParse } from 'path';\nimport { file } from 'tmp-promise';\n\nconst nodeOperations: INodePropertyOptions[] = [\n\t{\n\t\tname: 'Blur',\n\t\tvalue: 'blur',\n\t\tdescription: 'Adds a blur to the image and so makes it less sharp',\n\t\taction: 'Blur Image',\n\t},\n\t{\n\t\tname: 'Border',\n\t\tvalue: 'border',\n\t\tdescription: 'Adds a border to the image',\n\t\taction: 'Border Image',\n\t},\n\t{\n\t\tname: 'Composite',\n\t\tvalue: 'composite',\n\t\tdescription: 'Composite image on top of another one',\n\t\taction: 'Composite Image',\n\t},\n\t{\n\t\tname: 'Create',\n\t\tvalue: 'create',\n\t\tdescription: 'Create a new image',\n\t\taction: 'Create Image',\n\t},\n\t{\n\t\tname: 'Crop',\n\t\tvalue: 'crop',\n\t\tdescription: 'Crops the image',\n\t\taction: 'Crop Image',\n\t},\n\t{\n\t\tname: 'Draw',\n\t\tvalue: 'draw',\n\t\tdescription: 'Draw on image',\n\t\taction: 'Draw Image',\n\t},\n\t{\n\t\tname: 'Rotate',\n\t\tvalue: 'rotate',\n\t\tdescription: 'Rotate image',\n\t\taction: 'Rotate Image',\n\t},\n\t{\n\t\tname: 'Resize',\n\t\tvalue: 'resize',\n\t\tdescription: 'Change the size of image',\n\t\taction: 'Resize Image',\n\t},\n\t{\n\t\tname: 'Shear',\n\t\tvalue: 'shear',\n\t\tdescription: 'Shear image along the X or Y axis',\n\t\taction: 'Shear Image',\n\t},\n\t{\n\t\tname: 'Text',\n\t\tvalue: 'text',\n\t\tdescription: 'Adds text to image',\n\t\taction: 'Apply Text to Image',\n\t},\n\t{\n\t\tname: 'Transparent',\n\t\tvalue: 'transparent',\n\t\tdescription: 'Make a color in image transparent',\n\t\taction: 'Add Transparency to Image',\n\t},\n];\n\nconst nodeOperationOptions: INodeProperties[] = [\n\t// ----------------------------------\n\t//         create\n\t// ----------------------------------\n\t{\n\t\tdisplayName: 'Background Color',\n\t\tname: 'backgroundColor',\n\t\ttype: 'color',\n\t\tdefault: '#ffffff00',\n\t\ttypeOptions: {\n\t\t\tshowAlpha: true,\n\t\t},\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\toperation: ['create'],\n\t\t\t},\n\t\t},\n\t\tdescription: 'The background color of the image to create',\n\t},\n\t{\n\t\tdisplayName: 'Image Width',\n\t\tname: 'width',\n\t\ttype: 'number',\n\t\tdefault: 50,\n\t\ttypeOptions: {\n\t\t\tminValue: 1,\n\t\t},\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\toperation: ['create'],\n\t\t\t},\n\t\t},\n\t\tdescription: 'The width of the image to create',\n\t},\n\t{\n\t\tdisplayName: 'Image Height',\n\t\tname: 'height',\n\t\ttype: 'number',\n\t\tdefault: 50,\n\t\ttypeOptions: {\n\t\t\tminValue: 1,\n\t\t},\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\toperation: ['create'],\n\t\t\t},\n\t\t},\n\t\tdescription: 'The height of the image to create',\n\t},\n\n\t// ----------------------------------\n\t//         draw\n\t// ----------------------------------\n\t{\n\t\tdisplayName: 'Primitive',\n\t\tname: 'primitive',\n\t\ttype: 'options',\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\toperation: ['draw'],\n\t\t\t},\n\t\t},\n\t\toptions: [\n\t\t\t{\n\t\t\t\tname: 'Circle',\n\t\t\t\tvalue: 'circle',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Line',\n\t\t\t\tvalue: 'line',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Rectangle',\n\t\t\t\tvalue: 'rectangle',\n\t\t\t},\n\t\t],\n\t\tdefault: 'rectangle',\n\t\tdescription: 'The primitive to draw',\n\t},\n\t{\n\t\tdisplayName: 'Color',\n\t\tname: 'color',\n\t\ttype: 'color',\n\t\tdefault: '#ff000000',\n\t\ttypeOptions: {\n\t\t\tshowAlpha: true,\n\t\t},\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\toperation: ['draw'],\n\t\t\t},\n\t\t},\n\t\tdescription: 'The color of the primitive to draw',\n\t},\n\t{\n\t\tdisplayName: 'Start Position X',\n\t\tname: 'startPositionX',\n\t\ttype: 'number',\n\t\tdefault: 50,\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\toperation: ['draw'],\n\t\t\t\tprimitive: ['circle', 'line', 'rectangle'],\n\t\t\t},\n\t\t},\n\t\tdescription: 'X (horizontal) start position of the primitive',\n\t},\n\t{\n\t\tdisplayName: 'Start Position Y',\n\t\tname: 'startPositionY',\n\t\ttype: 'number',\n\t\tdefault: 50,\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\toperation: ['draw'],\n\t\t\t\tprimitive: ['circle', 'line', 'rectangle'],\n\t\t\t},\n\t\t},\n\t\tdescription: 'Y (horizontal) start position of the primitive',\n\t},\n\t{\n\t\tdisplayName: 'End Position X',\n\t\tname: 'endPositionX',\n\t\ttype: 'number',\n\t\tdefault: 250,\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\toperation: ['draw'],\n\t\t\t\tprimitive: ['circle', 'line', 'rectangle'],\n\t\t\t},\n\t\t},\n\t\tdescription: 'X (horizontal) end position of the primitive',\n\t},\n\t{\n\t\tdisplayName: 'End Position Y',\n\t\tname: 'endPositionY',\n\t\ttype: 'number',\n\t\tdefault: 250,\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\toperation: ['draw'],\n\t\t\t\tprimitive: ['circle', 'line', 'rectangle'],\n\t\t\t},\n\t\t},\n\t\tdescription: 'Y (horizontal) end position of the primitive',\n\t},\n\t{\n\t\tdisplayName: 'Corner Radius',\n\t\tname: 'cornerRadius',\n\t\ttype: 'number',\n\t\tdefault: 0,\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\toperation: ['draw'],\n\t\t\t\tprimitive: ['rectangle'],\n\t\t\t},\n\t\t},\n\t\tdescription: 'The radius of the corner to create round corners',\n\t},\n\n\t// ----------------------------------\n\t//         text\n\t// ----------------------------------\n\t{\n\t\tdisplayName: 'Text',\n\t\tname: 'text',\n\t\ttypeOptions: {\n\t\t\trows: 5,\n\t\t},\n\t\ttype: 'string',\n\t\tdefault: '',\n\t\tplaceholder: 'Text to render',\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\toperation: ['text'],\n\t\t\t},\n\t\t},\n\t\tdescription: 'Text to write on the image',\n\t},\n\t{\n\t\tdisplayName: 'Font Size',\n\t\tname: 'fontSize',\n\t\ttype: 'number',\n\t\tdefault: 18,\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\toperation: ['text'],\n\t\t\t},\n\t\t},\n\t\tdescription: 'Size of the text',\n\t},\n\t{\n\t\tdisplayName: 'Font Color',\n\t\tname: 'fontColor',\n\t\ttype: 'color',\n\t\tdefault: '#000000',\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\toperation: ['text'],\n\t\t\t},\n\t\t},\n\t\tdescription: 'Color of the text',\n\t},\n\t{\n\t\tdisplayName: 'Position X',\n\t\tname: 'positionX',\n\t\ttype: 'number',\n\t\tdefault: 50,\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\toperation: ['text'],\n\t\t\t},\n\t\t},\n\t\tdescription: 'X (horizontal) position of the text',\n\t},\n\t{\n\t\tdisplayName: 'Position Y',\n\t\tname: 'positionY',\n\t\ttype: 'number',\n\t\tdefault: 50,\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\toperation: ['text'],\n\t\t\t},\n\t\t},\n\t\tdescription: 'Y (vertical) position of the text',\n\t},\n\t{\n\t\tdisplayName: 'Max Line Length',\n\t\tname: 'lineLength',\n\t\ttype: 'number',\n\t\ttypeOptions: {\n\t\t\tminValue: 1,\n\t\t},\n\t\tdefault: 80,\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\toperation: ['text'],\n\t\t\t},\n\t\t},\n\t\tdescription: 'Max amount of characters in a line before a line-break should get added',\n\t},\n\n\t// ----------------------------------\n\t//         blur\n\t// ----------------------------------\n\t{\n\t\tdisplayName: 'Blur',\n\t\tname: 'blur',\n\t\ttype: 'number',\n\t\ttypeOptions: {\n\t\t\tminValue: 0,\n\t\t\tmaxValue: 1000,\n\t\t},\n\t\tdefault: 5,\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\toperation: ['blur'],\n\t\t\t},\n\t\t},\n\t\tdescription: 'How strong the blur should be',\n\t},\n\t{\n\t\tdisplayName: 'Sigma',\n\t\tname: 'sigma',\n\t\ttype: 'number',\n\t\ttypeOptions: {\n\t\t\tminValue: 0,\n\t\t\tmaxValue: 1000,\n\t\t},\n\t\tdefault: 2,\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\toperation: ['blur'],\n\t\t\t},\n\t\t},\n\t\tdescription: 'The sigma of the blur',\n\t},\n\n\t// ----------------------------------\n\t//         border\n\t// ----------------------------------\n\t{\n\t\tdisplayName: 'Border Width',\n\t\tname: 'borderWidth',\n\t\ttype: 'number',\n\t\tdefault: 10,\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\toperation: ['border'],\n\t\t\t},\n\t\t},\n\t\tdescription: 'The width of the border',\n\t},\n\t{\n\t\tdisplayName: 'Border Height',\n\t\tname: 'borderHeight',\n\t\ttype: 'number',\n\t\tdefault: 10,\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\toperation: ['border'],\n\t\t\t},\n\t\t},\n\t\tdescription: 'The height of the border',\n\t},\n\t{\n\t\tdisplayName: 'Border Color',\n\t\tname: 'borderColor',\n\t\ttype: 'color',\n\t\tdefault: '#000000',\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\toperation: ['border'],\n\t\t\t},\n\t\t},\n\t\tdescription: 'Color of the border',\n\t},\n\n\t// ----------------------------------\n\t//         composite\n\t// ----------------------------------\n\t{\n\t\tdisplayName: 'Composite Image Property',\n\t\tname: 'dataPropertyNameComposite',\n\t\ttype: 'string',\n\t\tdefault: '',\n\t\tplaceholder: 'data2',\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\toperation: ['composite'],\n\t\t\t},\n\t\t},\n\t\tdescription:\n\t\t\t'The name of the binary property which contains the data of the image to composite on top of image which is found in Property Name',\n\t},\n\t{\n\t\tdisplayName: 'Operator',\n\t\tname: 'operator',\n\t\ttype: 'options',\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\toperation: ['composite'],\n\t\t\t},\n\t\t},\n\t\toptions: [\n\t\t\t{\n\t\t\t\tname: 'Add',\n\t\t\t\tvalue: 'Add',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Atop',\n\t\t\t\tvalue: 'Atop',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Bumpmap',\n\t\t\t\tvalue: 'Bumpmap',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Copy',\n\t\t\t\tvalue: 'Copy',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Copy Black',\n\t\t\t\tvalue: 'CopyBlack',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Copy Blue',\n\t\t\t\tvalue: 'CopyBlue',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Copy Cyan',\n\t\t\t\tvalue: 'CopyCyan',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Copy Green',\n\t\t\t\tvalue: 'CopyGreen',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Copy Magenta',\n\t\t\t\tvalue: 'CopyMagenta',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Copy Opacity',\n\t\t\t\tvalue: 'CopyOpacity',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Copy Red',\n\t\t\t\tvalue: 'CopyRed',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Copy Yellow',\n\t\t\t\tvalue: 'CopyYellow',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Difference',\n\t\t\t\tvalue: 'Difference',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Divide',\n\t\t\t\tvalue: 'Divide',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'In',\n\t\t\t\tvalue: 'In',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Minus',\n\t\t\t\tvalue: 'Minus',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Multiply',\n\t\t\t\tvalue: 'Multiply',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Out',\n\t\t\t\tvalue: 'Out',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Over',\n\t\t\t\tvalue: 'Over',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Plus',\n\t\t\t\tvalue: 'Plus',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Subtract',\n\t\t\t\tvalue: 'Subtract',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Xor',\n\t\t\t\tvalue: 'Xor',\n\t\t\t},\n\t\t],\n\t\tdefault: 'Over',\n\t\tdescription: 'The operator to use to combine the images',\n\t},\n\t{\n\t\tdisplayName: 'Position X',\n\t\tname: 'positionX',\n\t\ttype: 'number',\n\t\tdefault: 0,\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\toperation: ['composite'],\n\t\t\t},\n\t\t},\n\t\tdescription: 'X (horizontal) position of composite image',\n\t},\n\t{\n\t\tdisplayName: 'Position Y',\n\t\tname: 'positionY',\n\t\ttype: 'number',\n\t\tdefault: 0,\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\toperation: ['composite'],\n\t\t\t},\n\t\t},\n\t\tdescription: 'Y (vertical) position of composite image',\n\t},\n\n\t// ----------------------------------\n\t//         crop\n\t// ----------------------------------\n\t{\n\t\tdisplayName: 'Width',\n\t\tname: 'width',\n\t\ttype: 'number',\n\t\tdefault: 500,\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\toperation: ['crop'],\n\t\t\t},\n\t\t},\n\t\tdescription: 'Crop width',\n\t},\n\t{\n\t\tdisplayName: 'Height',\n\t\tname: 'height',\n\t\ttype: 'number',\n\t\tdefault: 500,\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\toperation: ['crop'],\n\t\t\t},\n\t\t},\n\t\tdescription: 'Crop height',\n\t},\n\t{\n\t\tdisplayName: 'Position X',\n\t\tname: 'positionX',\n\t\ttype: 'number',\n\t\tdefault: 0,\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\toperation: ['crop'],\n\t\t\t},\n\t\t},\n\t\tdescription: 'X (horizontal) position to crop from',\n\t},\n\t{\n\t\tdisplayName: 'Position Y',\n\t\tname: 'positionY',\n\t\ttype: 'number',\n\t\tdefault: 0,\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\toperation: ['crop'],\n\t\t\t},\n\t\t},\n\t\tdescription: 'Y (vertical) position to crop from',\n\t},\n\n\t// ----------------------------------\n\t//         resize\n\t// ----------------------------------\n\t{\n\t\tdisplayName: 'Width',\n\t\tname: 'width',\n\t\ttype: 'number',\n\t\tdefault: 500,\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\toperation: ['resize'],\n\t\t\t},\n\t\t},\n\t\tdescription: 'New width of the image',\n\t},\n\t{\n\t\tdisplayName: 'Height',\n\t\tname: 'height',\n\t\ttype: 'number',\n\t\tdefault: 500,\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\toperation: ['resize'],\n\t\t\t},\n\t\t},\n\t\tdescription: 'New height of the image',\n\t},\n\t{\n\t\tdisplayName: 'Option',\n\t\tname: 'resizeOption',\n\t\ttype: 'options',\n\t\toptions: [\n\t\t\t{\n\t\t\t\tname: 'Ignore Aspect Ratio',\n\t\t\t\tvalue: 'ignoreAspectRatio',\n\t\t\t\tdescription: 'Ignore aspect ratio and resize exactly to specified values',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Maximum Area',\n\t\t\t\tvalue: 'maximumArea',\n\t\t\t\tdescription: 'Specified values are maximum area',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Minimum Area',\n\t\t\t\tvalue: 'minimumArea',\n\t\t\t\tdescription: 'Specified values are minimum area',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Only if Larger',\n\t\t\t\tvalue: 'onlyIfLarger',\n\t\t\t\tdescription: 'Resize only if image is larger than width or height',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Only if Smaller',\n\t\t\t\tvalue: 'onlyIfSmaller',\n\t\t\t\tdescription: 'Resize only if image is smaller than width or height',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Percent',\n\t\t\t\tvalue: 'percent',\n\t\t\t\tdescription: 'Width and height are specified in percents',\n\t\t\t},\n\t\t],\n\t\tdefault: 'maximumArea',\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\toperation: ['resize'],\n\t\t\t},\n\t\t},\n\t\tdescription: 'How to resize the image',\n\t},\n\n\t// ----------------------------------\n\t//         rotate\n\t// ----------------------------------\n\t{\n\t\tdisplayName: 'Rotate',\n\t\tname: 'rotate',\n\t\ttype: 'number',\n\t\ttypeOptions: {\n\t\t\tminValue: -360,\n\t\t\tmaxValue: 360,\n\t\t},\n\t\tdefault: 0,\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\toperation: ['rotate'],\n\t\t\t},\n\t\t},\n\t\tdescription: 'How much the image should be rotated',\n\t},\n\t{\n\t\tdisplayName: 'Background Color',\n\t\tname: 'backgroundColor',\n\t\ttype: 'color',\n\t\tdefault: '#ffffffff',\n\t\ttypeOptions: {\n\t\t\tshowAlpha: true,\n\t\t},\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\toperation: ['rotate'],\n\t\t\t},\n\t\t},\n\t\tdescription:\n\t\t\t'The color to use for the background when image gets rotated by anything which is not a multiple of 90',\n\t},\n\n\t// ----------------------------------\n\t//         shear\n\t// ----------------------------------\n\t{\n\t\tdisplayName: 'Degrees X',\n\t\tname: 'degreesX',\n\t\ttype: 'number',\n\t\tdefault: 0,\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\toperation: ['shear'],\n\t\t\t},\n\t\t},\n\t\tdescription: 'X (horizontal) shear degrees',\n\t},\n\t{\n\t\tdisplayName: 'Degrees Y',\n\t\tname: 'degreesY',\n\t\ttype: 'number',\n\t\tdefault: 0,\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\toperation: ['shear'],\n\t\t\t},\n\t\t},\n\t\tdescription: 'Y (vertical) shear degrees',\n\t},\n\n\t// ----------------------------------\n\t//         transparent\n\t// ----------------------------------\n\t{\n\t\tdisplayName: 'Color',\n\t\tname: 'color',\n\t\ttype: 'color',\n\t\tdefault: '#ff0000',\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\toperation: ['transparent'],\n\t\t\t},\n\t\t},\n\t\tdescription: 'The color to make transparent',\n\t},\n];\n\nexport class EditImage implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'Edit Image',\n\t\tname: 'editImage',\n\t\ticon: 'fa:image',\n\t\ticonColor: 'purple',\n\t\tgroup: ['transform'],\n\t\tversion: 1,\n\t\tdescription: 'Edits an image like blur, resize or adding border and text',\n\t\tdefaults: {\n\t\t\tname: 'Edit Image',\n\t\t\tcolor: '#553399',\n\t\t},\n\t\tinputs: [NodeConnectionTypes.Main],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Operation',\n\t\t\t\tname: 'operation',\n\t\t\t\ttype: 'options',\n\t\t\t\tnoDataExpression: true,\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Get Information',\n\t\t\t\t\t\tvalue: 'information',\n\t\t\t\t\t\tdescription: 'Returns image information like resolution',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Multi Step',\n\t\t\t\t\t\tvalue: 'multiStep',\n\t\t\t\t\t\tdescription: 'Perform multiple operations',\n\t\t\t\t\t},\n\t\t\t\t\t...nodeOperations,\n\t\t\t\t].sort((a, b) => {\n\t\t\t\t\tif (a.name.toLowerCase() < b.name.toLowerCase()) {\n\t\t\t\t\t\treturn -1;\n\t\t\t\t\t}\n\t\t\t\t\tif (a.name.toLowerCase() > b.name.toLowerCase()) {\n\t\t\t\t\t\treturn 1;\n\t\t\t\t\t}\n\t\t\t\t\treturn 0;\n\t\t\t\t}),\n\t\t\t\tdefault: 'border',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Property Name',\n\t\t\t\tname: 'dataPropertyName',\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: 'data',\n\t\t\t\tdescription: 'Name of the binary property in which the image data can be found',\n\t\t\t},\n\n\t\t\t// ----------------------------------\n\t\t\t//         multiStep\n\t\t\t// ----------------------------------\n\t\t\t{\n\t\t\t\tdisplayName: 'Operations',\n\t\t\t\tname: 'operations',\n\t\t\t\tplaceholder: 'Add Operation',\n\t\t\t\ttype: 'fixedCollection',\n\t\t\t\ttypeOptions: {\n\t\t\t\t\tmultipleValues: true,\n\t\t\t\t\tsortable: true,\n\t\t\t\t},\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['multiStep'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdescription: 'The operations to perform',\n\t\t\t\tdefault: {},\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'operations',\n\t\t\t\t\t\tdisplayName: 'Operations',\n\t\t\t\t\t\tvalues: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdisplayName: 'Operation',\n\t\t\t\t\t\t\t\tname: 'operation',\n\t\t\t\t\t\t\t\ttype: 'options',\n\t\t\t\t\t\t\t\tnoDataExpression: true,\n\t\t\t\t\t\t\t\toptions: nodeOperations,\n\t\t\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t...nodeOperationOptions,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdisplayName: 'Font Name or ID',\n\t\t\t\t\t\t\t\tname: 'font',\n\t\t\t\t\t\t\t\ttype: 'options',\n\t\t\t\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\t\t\t\toperation: ['text'],\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\ttypeOptions: {\n\t\t\t\t\t\t\t\t\tloadOptionsMethod: 'getFonts',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t\t\t'The font to use. Defaults to Arial. Choose from the list, or specify an ID using an <a href=\"https://docs.n8n.io/code/expressions/\">expression</a>.',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\n\t\t\t...nodeOperationOptions,\n\t\t\t{\n\t\t\t\tdisplayName: 'Options',\n\t\t\t\tname: 'options',\n\t\t\t\ttype: 'collection',\n\t\t\t\tplaceholder: 'Add option',\n\t\t\t\tdefault: {},\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\thide: {\n\t\t\t\t\t\toperation: ['information'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'File Name',\n\t\t\t\t\t\tname: 'fileName',\n\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\tdescription: 'File name to set in binary data',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Font Name or ID',\n\t\t\t\t\t\tname: 'font',\n\t\t\t\t\t\ttype: 'options',\n\t\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\t\t'/operation': ['text'],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttypeOptions: {\n\t\t\t\t\t\t\tloadOptionsMethod: 'getFonts',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t'The font to use. Defaults to Arial. Choose from the list, or specify an ID using an <a href=\"https://docs.n8n.io/code/expressions/\">expression</a>.',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Format',\n\t\t\t\t\t\tname: 'format',\n\t\t\t\t\t\ttype: 'options',\n\t\t\t\t\t\toptions: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: 'bmp',\n\t\t\t\t\t\t\t\tvalue: 'bmp',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: 'gif',\n\t\t\t\t\t\t\t\tvalue: 'gif',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: 'jpeg',\n\t\t\t\t\t\t\t\tvalue: 'jpeg',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: 'png',\n\t\t\t\t\t\t\t\tvalue: 'png',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: 'tiff',\n\t\t\t\t\t\t\t\tvalue: 'tiff',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: 'WebP',\n\t\t\t\t\t\t\t\tvalue: 'webp',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t\tdefault: 'jpeg',\n\t\t\t\t\t\tdescription: 'Set the output image format',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Quality',\n\t\t\t\t\t\tname: 'quality',\n\t\t\t\t\t\ttype: 'number',\n\t\t\t\t\t\ttypeOptions: {\n\t\t\t\t\t\t\tminValue: 0,\n\t\t\t\t\t\t\tmaxValue: 100,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tdefault: 100,\n\t\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\t\tformat: ['jpeg', 'png', 'tiff'],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\tdescription: 'Sets the jpeg|png|tiff compression level from 0 to 100 (best)',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t],\n\t};\n\n\tmethods = {\n\t\tloadOptions: {\n\t\t\tasync getFonts(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst files = await getSystemFonts();\n\t\t\t\tconst returnData: INodePropertyOptions[] = [];\n\n\t\t\t\tfiles.forEach((entry: string) => {\n\t\t\t\t\tconst pathParts = pathParse(entry);\n\t\t\t\t\tif (!pathParts.ext) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treturnData.push({\n\t\t\t\t\t\tname: pathParts.name,\n\t\t\t\t\t\tvalue: entry,\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\t\treturnData.sort((a, b) => {\n\t\t\t\t\tif (a.name < b.name) {\n\t\t\t\t\t\treturn -1;\n\t\t\t\t\t}\n\t\t\t\t\tif (a.name > b.name) {\n\t\t\t\t\t\treturn 1;\n\t\t\t\t\t}\n\t\t\t\t\treturn 0;\n\t\t\t\t});\n\n\t\t\t\treturn returnData;\n\t\t\t},\n\t\t},\n\t};\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t\tconst items = this.getInputData();\n\n\t\tconst returnData: INodeExecutionData[] = [];\n\t\tconst length = items.length;\n\t\tlet item: INodeExecutionData;\n\n\t\tfor (let itemIndex = 0; itemIndex < length; itemIndex++) {\n\t\t\ttry {\n\t\t\t\titem = items[itemIndex];\n\n\t\t\t\tconst operation = this.getNodeParameter('operation', itemIndex);\n\t\t\t\tconst dataPropertyName = this.getNodeParameter('dataPropertyName', itemIndex);\n\n\t\t\t\tconst options = this.getNodeParameter('options', itemIndex, {});\n\n\t\t\t\tconst cleanupFunctions: Array<() => void> = [];\n\n\t\t\t\tlet gmInstance: gm.State;\n\n\t\t\t\tconst requiredOperationParameters: {\n\t\t\t\t\t[key: string]: string[];\n\t\t\t\t} = {\n\t\t\t\t\tblur: ['blur', 'sigma'],\n\t\t\t\t\tborder: ['borderColor', 'borderWidth', 'borderHeight'],\n\t\t\t\t\tcreate: ['backgroundColor', 'height', 'width'],\n\t\t\t\t\tcrop: ['height', 'positionX', 'positionY', 'width'],\n\t\t\t\t\tcomposite: ['dataPropertyNameComposite', 'operator', 'positionX', 'positionY'],\n\t\t\t\t\tdraw: [\n\t\t\t\t\t\t'color',\n\t\t\t\t\t\t'cornerRadius',\n\t\t\t\t\t\t'endPositionX',\n\t\t\t\t\t\t'endPositionY',\n\t\t\t\t\t\t'primitive',\n\t\t\t\t\t\t'startPositionX',\n\t\t\t\t\t\t'startPositionY',\n\t\t\t\t\t],\n\t\t\t\t\tinformation: [],\n\t\t\t\t\tresize: ['height', 'resizeOption', 'width'],\n\t\t\t\t\trotate: ['backgroundColor', 'rotate'],\n\t\t\t\t\tshear: ['degreesX', 'degreesY'],\n\t\t\t\t\ttext: ['font', 'fontColor', 'fontSize', 'lineLength', 'positionX', 'positionY', 'text'],\n\t\t\t\t\ttransparent: ['color'],\n\t\t\t\t};\n\n\t\t\t\tlet operations: IDataObject[] = [];\n\t\t\t\tif (operation === 'multiStep') {\n\t\t\t\t\t// Operation parameters are already in the correct format\n\t\t\t\t\tconst operationsData = this.getNodeParameter('operations', itemIndex, {\n\t\t\t\t\t\toperations: [],\n\t\t\t\t\t}) as IDataObject;\n\t\t\t\t\toperations = operationsData.operations as IDataObject[];\n\t\t\t\t} else {\n\t\t\t\t\t// Operation parameters have to first get collected\n\t\t\t\t\tconst operationParameters: IDataObject = {};\n\t\t\t\t\trequiredOperationParameters[operation].forEach((parameterName) => {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\toperationParameters[parameterName] = this.getNodeParameter(parameterName, itemIndex);\n\t\t\t\t\t\t} catch (error) {}\n\t\t\t\t\t});\n\n\t\t\t\t\toperations = [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\toperation,\n\t\t\t\t\t\t\t...operationParameters,\n\t\t\t\t\t\t},\n\t\t\t\t\t];\n\t\t\t\t}\n\n\t\t\t\tif (operations[0].operation !== 'create') {\n\t\t\t\t\t// \"create\" generates a new image so does not require any incoming data.\n\t\t\t\t\tthis.helpers.assertBinaryData(itemIndex, dataPropertyName);\n\t\t\t\t\tconst binaryDataBuffer = await this.helpers.getBinaryDataBuffer(\n\t\t\t\t\t\titemIndex,\n\t\t\t\t\t\tdataPropertyName,\n\t\t\t\t\t);\n\t\t\t\t\tgmInstance = gm(binaryDataBuffer);\n\t\t\t\t\tgmInstance = gmInstance.background('transparent');\n\t\t\t\t}\n\n\t\t\t\tconst newItem: INodeExecutionData = {\n\t\t\t\t\tjson: item.json,\n\t\t\t\t\tbinary: {},\n\t\t\t\t\tpairedItem: {\n\t\t\t\t\t\titem: itemIndex,\n\t\t\t\t\t},\n\t\t\t\t};\n\n\t\t\t\tif (operation === 'information') {\n\t\t\t\t\t// Just return the information\n\t\t\t\t\tconst imageData = await new Promise<IDataObject>((resolve, reject) => {\n\t\t\t\t\t\tgmInstance = gmInstance.identify((error, data) => {\n\t\t\t\t\t\t\tif (error) {\n\t\t\t\t\t\t\t\treject(error);\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tresolve(data as unknown as IDataObject);\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\n\t\t\t\t\tnewItem.json = imageData;\n\t\t\t\t}\n\n\t\t\t\tfor (let i = 0; i < operations.length; i++) {\n\t\t\t\t\tconst operationData = operations[i];\n\t\t\t\t\tif (operationData.operation === 'blur') {\n\t\t\t\t\t\tgmInstance = gmInstance!.blur(\n\t\t\t\t\t\t\toperationData.blur as number,\n\t\t\t\t\t\t\toperationData.sigma as number,\n\t\t\t\t\t\t);\n\t\t\t\t\t} else if (operationData.operation === 'border') {\n\t\t\t\t\t\tgmInstance = gmInstance!\n\t\t\t\t\t\t\t.borderColor(operationData.borderColor as string)\n\t\t\t\t\t\t\t.border(operationData.borderWidth as number, operationData.borderHeight as number);\n\t\t\t\t\t} else if (operationData.operation === 'composite') {\n\t\t\t\t\t\tconst positionX = operationData.positionX as number;\n\t\t\t\t\t\tconst positionY = operationData.positionY as number;\n\t\t\t\t\t\tconst operator = operationData.operator as string;\n\n\t\t\t\t\t\tconst geometryString =\n\t\t\t\t\t\t\t(positionX >= 0 ? '+' : '') + positionX + (positionY >= 0 ? '+' : '') + positionY;\n\n\t\t\t\t\t\tconst binaryPropertyName = operationData.dataPropertyNameComposite as string;\n\t\t\t\t\t\tthis.helpers.assertBinaryData(itemIndex, binaryPropertyName);\n\t\t\t\t\t\tconst binaryDataBuffer = await this.helpers.getBinaryDataBuffer(\n\t\t\t\t\t\t\titemIndex,\n\t\t\t\t\t\t\tbinaryPropertyName,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tconst { path, cleanup } = await file();\n\t\t\t\t\t\tcleanupFunctions.push(cleanup);\n\t\t\t\t\t\tawait fsWriteFile(path, binaryDataBuffer);\n\n\t\t\t\t\t\tif (operations[0].operation === 'create') {\n\t\t\t\t\t\t\t// It seems like if the image gets created newly we have to create a new gm instance\n\t\t\t\t\t\t\t// else it fails for some reason\n\t\t\t\t\t\t\tgmInstance = gm(gmInstance!.stream('png'))\n\t\t\t\t\t\t\t\t.compose(operator)\n\t\t\t\t\t\t\t\t.geometry(geometryString)\n\t\t\t\t\t\t\t\t.composite(path);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tgmInstance = gmInstance!.compose(operator).geometry(geometryString).composite(path);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (operations.length !== i + 1) {\n\t\t\t\t\t\t\t// If there are other operations after the current one create a new gm instance\n\t\t\t\t\t\t\t// because else things do get messed up\n\t\t\t\t\t\t\tgmInstance = gm(gmInstance.stream());\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (operationData.operation === 'create') {\n\t\t\t\t\t\tgmInstance = gm(\n\t\t\t\t\t\t\toperationData.width as number,\n\t\t\t\t\t\t\toperationData.height as number,\n\t\t\t\t\t\t\toperationData.backgroundColor as string,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tif (!options.format) {\n\t\t\t\t\t\t\toptions.format = 'png';\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (operationData.operation === 'crop') {\n\t\t\t\t\t\tgmInstance = gmInstance!.crop(\n\t\t\t\t\t\t\toperationData.width as number,\n\t\t\t\t\t\t\toperationData.height as number,\n\t\t\t\t\t\t\toperationData.positionX as number,\n\t\t\t\t\t\t\toperationData.positionY as number,\n\t\t\t\t\t\t);\n\t\t\t\t\t} else if (operationData.operation === 'draw') {\n\t\t\t\t\t\tgmInstance = gmInstance!.fill(operationData.color as string);\n\n\t\t\t\t\t\tif (operationData.primitive === 'line') {\n\t\t\t\t\t\t\tgmInstance = gmInstance.drawLine(\n\t\t\t\t\t\t\t\toperationData.startPositionX as number,\n\t\t\t\t\t\t\t\toperationData.startPositionY as number,\n\t\t\t\t\t\t\t\toperationData.endPositionX as number,\n\t\t\t\t\t\t\t\toperationData.endPositionY as number,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else if (operationData.primitive === 'circle') {\n\t\t\t\t\t\t\tgmInstance = gmInstance.drawCircle(\n\t\t\t\t\t\t\t\toperationData.startPositionX as number,\n\t\t\t\t\t\t\t\toperationData.startPositionY as number,\n\t\t\t\t\t\t\t\toperationData.endPositionX as number,\n\t\t\t\t\t\t\t\toperationData.endPositionY as number,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else if (operationData.primitive === 'rectangle') {\n\t\t\t\t\t\t\tgmInstance = gmInstance.drawRectangle(\n\t\t\t\t\t\t\t\toperationData.startPositionX as number,\n\t\t\t\t\t\t\t\toperationData.startPositionY as number,\n\t\t\t\t\t\t\t\toperationData.endPositionX as number,\n\t\t\t\t\t\t\t\toperationData.endPositionY as number,\n\t\t\t\t\t\t\t\t(operationData.cornerRadius as number) || undefined,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (operationData.operation === 'resize') {\n\t\t\t\t\t\tconst resizeOption = operationData.resizeOption as string;\n\n\t\t\t\t\t\t// By default use \"maximumArea\"\n\t\t\t\t\t\tlet option: gm.ResizeOption = '@';\n\t\t\t\t\t\tif (resizeOption === 'ignoreAspectRatio') {\n\t\t\t\t\t\t\toption = '!';\n\t\t\t\t\t\t} else if (resizeOption === 'minimumArea') {\n\t\t\t\t\t\t\toption = '^';\n\t\t\t\t\t\t} else if (resizeOption === 'onlyIfSmaller') {\n\t\t\t\t\t\t\toption = '<';\n\t\t\t\t\t\t} else if (resizeOption === 'onlyIfLarger') {\n\t\t\t\t\t\t\toption = '>';\n\t\t\t\t\t\t} else if (resizeOption === 'percent') {\n\t\t\t\t\t\t\toption = '%';\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tgmInstance = gmInstance!.resize(\n\t\t\t\t\t\t\toperationData.width as number,\n\t\t\t\t\t\t\toperationData.height as number,\n\t\t\t\t\t\t\toption,\n\t\t\t\t\t\t);\n\t\t\t\t\t} else if (operationData.operation === 'rotate') {\n\t\t\t\t\t\tgmInstance = gmInstance!.rotate(\n\t\t\t\t\t\t\toperationData.backgroundColor as string,\n\t\t\t\t\t\t\toperationData.rotate as number,\n\t\t\t\t\t\t);\n\t\t\t\t\t} else if (operationData.operation === 'shear') {\n\t\t\t\t\t\tgmInstance = gmInstance!.shear(\n\t\t\t\t\t\t\toperationData.degreesX as number,\n\t\t\t\t\t\t\toperationData.degreesY as number,\n\t\t\t\t\t\t);\n\t\t\t\t\t} else if (operationData.operation === 'text') {\n\t\t\t\t\t\t// Split the text in multiple lines\n\t\t\t\t\t\tconst lines: string[] = [];\n\t\t\t\t\t\tlet currentLine = '';\n\t\t\t\t\t\t(operationData.text as string).split('\\n').forEach((textLine: string) => {\n\t\t\t\t\t\t\ttextLine.split(' ').forEach((textPart: string) => {\n\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\tcurrentLine.length + textPart.length + 1 >\n\t\t\t\t\t\t\t\t\t(operationData.lineLength as number)\n\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\tlines.push(currentLine.trim());\n\t\t\t\t\t\t\t\t\tcurrentLine = `${textPart} `;\n\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tcurrentLine += `${textPart} `;\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\tlines.push(currentLine.trim());\n\t\t\t\t\t\t\tcurrentLine = '';\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\t// Combine the lines to a single string\n\t\t\t\t\t\tconst renderText = lines.join('\\n');\n\n\t\t\t\t\t\tlet font = (options.font || operationData.font) as string | undefined;\n\t\t\t\t\t\tif (!font) {\n\t\t\t\t\t\t\tconst fonts = await getSystemFonts();\n\t\t\t\t\t\t\tfont = fonts.find((_font) => _font.includes('Arial.'));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (!font) {\n\t\t\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t\t\t'Default font not found. Select a font from the options.',\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tgmInstance = gmInstance!\n\t\t\t\t\t\t\t.fill(operationData.fontColor as string)\n\t\t\t\t\t\t\t.fontSize(operationData.fontSize as number)\n\t\t\t\t\t\t\t.font(font)\n\t\t\t\t\t\t\t.drawText(\n\t\t\t\t\t\t\t\toperationData.positionX as number,\n\t\t\t\t\t\t\t\toperationData.positionY as number,\n\t\t\t\t\t\t\t\trenderText,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t} else if (operationData.operation === 'transparent') {\n\t\t\t\t\t\tgmInstance = gmInstance!.transparent(operationData.color as string);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (item.binary !== undefined && newItem.binary) {\n\t\t\t\t\t// Create a shallow copy of the binary data so that the old\n\t\t\t\t\t// data references which do not get changed still stay behind\n\t\t\t\t\t// but the incoming data does not get changed.\n\t\t\t\t\tObject.assign(newItem.binary, item.binary);\n\t\t\t\t\t// Make a deep copy of the binary data we change\n\t\t\t\t\tif (newItem.binary[dataPropertyName]) {\n\t\t\t\t\t\tnewItem.binary[dataPropertyName] = deepCopy(newItem.binary[dataPropertyName]);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (newItem.binary![dataPropertyName] === undefined) {\n\t\t\t\t\tnewItem.binary![dataPropertyName] = {\n\t\t\t\t\t\tdata: '',\n\t\t\t\t\t\tmimeType: '',\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\tif (options.quality !== undefined) {\n\t\t\t\t\tgmInstance = gmInstance!.quality(options.quality as number);\n\t\t\t\t}\n\n\t\t\t\tif (options.format !== undefined) {\n\t\t\t\t\tgmInstance = gmInstance!.setFormat(options.format as string);\n\t\t\t\t\tnewItem.binary![dataPropertyName].fileExtension = options.format as string;\n\t\t\t\t\tnewItem.binary![dataPropertyName].mimeType = `image/${options.format}`;\n\t\t\t\t\tconst fileName = newItem.binary![dataPropertyName].fileName;\n\t\t\t\t\tif (fileName?.includes('.')) {\n\t\t\t\t\t\tnewItem.binary![dataPropertyName].fileName =\n\t\t\t\t\t\t\tfileName.split('.').slice(0, -1).join('.') + '.' + options.format;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (options.fileName !== undefined) {\n\t\t\t\t\tnewItem.binary![dataPropertyName].fileName = options.fileName as string;\n\t\t\t\t}\n\n\t\t\t\treturnData.push(\n\t\t\t\t\tawait new Promise<INodeExecutionData>((resolve, reject) => {\n\t\t\t\t\t\tgmInstance.toBuffer(async (error: Error | null, buffer: Buffer) => {\n\t\t\t\t\t\t\tcleanupFunctions.forEach(async (cleanup) => cleanup());\n\n\t\t\t\t\t\t\tif (error) {\n\t\t\t\t\t\t\t\treturn reject(error);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tconst binaryData = await this.helpers.prepareBinaryData(Buffer.from(buffer));\n\t\t\t\t\t\t\tnewItem.binary![dataPropertyName] = {\n\t\t\t\t\t\t\t\t...newItem.binary![dataPropertyName],\n\t\t\t\t\t\t\t\t...binaryData,\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\treturn resolve(newItem);\n\t\t\t\t\t\t});\n\t\t\t\t\t}),\n\t\t\t\t);\n\t\t\t} catch (error) {\n\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\treturnData.push({\n\t\t\t\t\t\tjson: {\n\t\t\t\t\t\t\terror: error.message,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tpairedItem: {\n\t\t\t\t\t\t\titem: itemIndex,\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\t\treturn [returnData];\n\t}\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAyC;AACzC,8BAA2B;AAC3B,gBAAe;AAWf,0BAAkE;AAClE,kBAAmC;AACnC,yBAAqB;AAErB,MAAM,iBAAyC;AAAA,EAC9C;AAAA,IACC,MAAM;AAAA,IACN,OAAO;AAAA,IACP,aAAa;AAAA,IACb,QAAQ;AAAA,EACT;AAAA,EACA;AAAA,IACC,MAAM;AAAA,IACN,OAAO;AAAA,IACP,aAAa;AAAA,IACb,QAAQ;AAAA,EACT;AAAA,EACA;AAAA,IACC,MAAM;AAAA,IACN,OAAO;AAAA,IACP,aAAa;AAAA,IACb,QAAQ;AAAA,EACT;AAAA,EACA;AAAA,IACC,MAAM;AAAA,IACN,OAAO;AAAA,IACP,aAAa;AAAA,IACb,QAAQ;AAAA,EACT;AAAA,EACA;AAAA,IACC,MAAM;AAAA,IACN,OAAO;AAAA,IACP,aAAa;AAAA,IACb,QAAQ;AAAA,EACT;AAAA,EACA;AAAA,IACC,MAAM;AAAA,IACN,OAAO;AAAA,IACP,aAAa;AAAA,IACb,QAAQ;AAAA,EACT;AAAA,EACA;AAAA,IACC,MAAM;AAAA,IACN,OAAO;AAAA,IACP,aAAa;AAAA,IACb,QAAQ;AAAA,EACT;AAAA,EACA;AAAA,IACC,MAAM;AAAA,IACN,OAAO;AAAA,IACP,aAAa;AAAA,IACb,QAAQ;AAAA,EACT;AAAA,EACA;AAAA,IACC,MAAM;AAAA,IACN,OAAO;AAAA,IACP,aAAa;AAAA,IACb,QAAQ;AAAA,EACT;AAAA,EACA;AAAA,IACC,MAAM;AAAA,IACN,OAAO;AAAA,IACP,aAAa;AAAA,IACb,QAAQ;AAAA,EACT;AAAA,EACA;AAAA,IACC,MAAM;AAAA,IACN,OAAO;AAAA,IACP,aAAa;AAAA,IACb,QAAQ;AAAA,EACT;AACD;AAEA,MAAM,uBAA0C;AAAA;AAAA;AAAA;AAAA,EAI/C;AAAA,IACC,aAAa;AAAA,IACb,MAAM;AAAA,IACN,MAAM;AAAA,IACN,SAAS;AAAA,IACT,aAAa;AAAA,MACZ,WAAW;AAAA,IACZ;AAAA,IACA,gBAAgB;AAAA,MACf,MAAM;AAAA,QACL,WAAW,CAAC,QAAQ;AAAA,MACrB;AAAA,IACD;AAAA,IACA,aAAa;AAAA,EACd;AAAA,EACA;AAAA,IACC,aAAa;AAAA,IACb,MAAM;AAAA,IACN,MAAM;AAAA,IACN,SAAS;AAAA,IACT,aAAa;AAAA,MACZ,UAAU;AAAA,IACX;AAAA,IACA,gBAAgB;AAAA,MACf,MAAM;AAAA,QACL,WAAW,CAAC,QAAQ;AAAA,MACrB;AAAA,IACD;AAAA,IACA,aAAa;AAAA,EACd;AAAA,EACA;AAAA,IACC,aAAa;AAAA,IACb,MAAM;AAAA,IACN,MAAM;AAAA,IACN,SAAS;AAAA,IACT,aAAa;AAAA,MACZ,UAAU;AAAA,IACX;AAAA,IACA,gBAAgB;AAAA,MACf,MAAM;AAAA,QACL,WAAW,CAAC,QAAQ;AAAA,MACrB;AAAA,IACD;AAAA,IACA,aAAa;AAAA,EACd;AAAA;AAAA;AAAA;AAAA,EAKA;AAAA,IACC,aAAa;AAAA,IACb,MAAM;AAAA,IACN,MAAM;AAAA,IACN,gBAAgB;AAAA,MACf,MAAM;AAAA,QACL,WAAW,CAAC,MAAM;AAAA,MACnB;AAAA,IACD;AAAA,IACA,SAAS;AAAA,MACR;AAAA,QACC,MAAM;AAAA,QACN,OAAO;AAAA,MACR;AAAA,MACA;AAAA,QACC,MAAM;AAAA,QACN,OAAO;AAAA,MACR;AAAA,MACA;AAAA,QACC,MAAM;AAAA,QACN,OAAO;AAAA,MACR;AAAA,IACD;AAAA,IACA,SAAS;AAAA,IACT,aAAa;AAAA,EACd;AAAA,EACA;AAAA,IACC,aAAa;AAAA,IACb,MAAM;AAAA,IACN,MAAM;AAAA,IACN,SAAS;AAAA,IACT,aAAa;AAAA,MACZ,WAAW;AAAA,IACZ;AAAA,IACA,gBAAgB;AAAA,MACf,MAAM;AAAA,QACL,WAAW,CAAC,MAAM;AAAA,MACnB;AAAA,IACD;AAAA,IACA,aAAa;AAAA,EACd;AAAA,EACA;AAAA,IACC,aAAa;AAAA,IACb,MAAM;AAAA,IACN,MAAM;AAAA,IACN,SAAS;AAAA,IACT,gBAAgB;AAAA,MACf,MAAM;AAAA,QACL,WAAW,CAAC,MAAM;AAAA,QAClB,WAAW,CAAC,UAAU,QAAQ,WAAW;AAAA,MAC1C;AAAA,IACD;AAAA,IACA,aAAa;AAAA,EACd;AAAA,EACA;AAAA,IACC,aAAa;AAAA,IACb,MAAM;AAAA,IACN,MAAM;AAAA,IACN,SAAS;AAAA,IACT,gBAAgB;AAAA,MACf,MAAM;AAAA,QACL,WAAW,CAAC,MAAM;AAAA,QAClB,WAAW,CAAC,UAAU,QAAQ,WAAW;AAAA,MAC1C;AAAA,IACD;AAAA,IACA,aAAa;AAAA,EACd;AAAA,EACA;AAAA,IACC,aAAa;AAAA,IACb,MAAM;AAAA,IACN,MAAM;AAAA,IACN,SAAS;AAAA,IACT,gBAAgB;AAAA,MACf,MAAM;AAAA,QACL,WAAW,CAAC,MAAM;AAAA,QAClB,WAAW,CAAC,UAAU,QAAQ,WAAW;AAAA,MAC1C;AAAA,IACD;AAAA,IACA,aAAa;AAAA,EACd;AAAA,EACA;AAAA,IACC,aAAa;AAAA,IACb,MAAM;AAAA,IACN,MAAM;AAAA,IACN,SAAS;AAAA,IACT,gBAAgB;AAAA,MACf,MAAM;AAAA,QACL,WAAW,CAAC,MAAM;AAAA,QAClB,WAAW,CAAC,UAAU,QAAQ,WAAW;AAAA,MAC1C;AAAA,IACD;AAAA,IACA,aAAa;AAAA,EACd;AAAA,EACA;AAAA,IACC,aAAa;AAAA,IACb,MAAM;AAAA,IACN,MAAM;AAAA,IACN,SAAS;AAAA,IACT,gBAAgB;AAAA,MACf,MAAM;AAAA,QACL,WAAW,CAAC,MAAM;AAAA,QAClB,WAAW,CAAC,WAAW;AAAA,MACxB;AAAA,IACD;AAAA,IACA,aAAa;AAAA,EACd;AAAA;AAAA;AAAA;AAAA,EAKA;AAAA,IACC,aAAa;AAAA,IACb,MAAM;AAAA,IACN,aAAa;AAAA,MACZ,MAAM;AAAA,IACP;AAAA,IACA,MAAM;AAAA,IACN,SAAS;AAAA,IACT,aAAa;AAAA,IACb,gBAAgB;AAAA,MACf,MAAM;AAAA,QACL,WAAW,CAAC,MAAM;AAAA,MACnB;AAAA,IACD;AAAA,IACA,aAAa;AAAA,EACd;AAAA,EACA;AAAA,IACC,aAAa;AAAA,IACb,MAAM;AAAA,IACN,MAAM;AAAA,IACN,SAAS;AAAA,IACT,gBAAgB;AAAA,MACf,MAAM;AAAA,QACL,WAAW,CAAC,MAAM;AAAA,MACnB;AAAA,IACD;AAAA,IACA,aAAa;AAAA,EACd;AAAA,EACA;AAAA,IACC,aAAa;AAAA,IACb,MAAM;AAAA,IACN,MAAM;AAAA,IACN,SAAS;AAAA,IACT,gBAAgB;AAAA,MACf,MAAM;AAAA,QACL,WAAW,CAAC,MAAM;AAAA,MACnB;AAAA,IACD;AAAA,IACA,aAAa;AAAA,EACd;AAAA,EACA;AAAA,IACC,aAAa;AAAA,IACb,MAAM;AAAA,IACN,MAAM;AAAA,IACN,SAAS;AAAA,IACT,gBAAgB;AAAA,MACf,MAAM;AAAA,QACL,WAAW,CAAC,MAAM;AAAA,MACnB;AAAA,IACD;AAAA,IACA,aAAa;AAAA,EACd;AAAA,EACA;AAAA,IACC,aAAa;AAAA,IACb,MAAM;AAAA,IACN,MAAM;AAAA,IACN,SAAS;AAAA,IACT,gBAAgB;AAAA,MACf,MAAM;AAAA,QACL,WAAW,CAAC,MAAM;AAAA,MACnB;AAAA,IACD;AAAA,IACA,aAAa;AAAA,EACd;AAAA,EACA;AAAA,IACC,aAAa;AAAA,IACb,MAAM;AAAA,IACN,MAAM;AAAA,IACN,aAAa;AAAA,MACZ,UAAU;AAAA,IACX;AAAA,IACA,SAAS;AAAA,IACT,gBAAgB;AAAA,MACf,MAAM;AAAA,QACL,WAAW,CAAC,MAAM;AAAA,MACnB;AAAA,IACD;AAAA,IACA,aAAa;AAAA,EACd;AAAA;AAAA;AAAA;AAAA,EAKA;AAAA,IACC,aAAa;AAAA,IACb,MAAM;AAAA,IACN,MAAM;AAAA,IACN,aAAa;AAAA,MACZ,UAAU;AAAA,MACV,UAAU;AAAA,IACX;AAAA,IACA,SAAS;AAAA,IACT,gBAAgB;AAAA,MACf,MAAM;AAAA,QACL,WAAW,CAAC,MAAM;AAAA,MACnB;AAAA,IACD;AAAA,IACA,aAAa;AAAA,EACd;AAAA,EACA;AAAA,IACC,aAAa;AAAA,IACb,MAAM;AAAA,IACN,MAAM;AAAA,IACN,aAAa;AAAA,MACZ,UAAU;AAAA,MACV,UAAU;AAAA,IACX;AAAA,IACA,SAAS;AAAA,IACT,gBAAgB;AAAA,MACf,MAAM;AAAA,QACL,WAAW,CAAC,MAAM;AAAA,MACnB;AAAA,IACD;AAAA,IACA,aAAa;AAAA,EACd;AAAA;AAAA;AAAA;AAAA,EAKA;AAAA,IACC,aAAa;AAAA,IACb,MAAM;AAAA,IACN,MAAM;AAAA,IACN,SAAS;AAAA,IACT,gBAAgB;AAAA,MACf,MAAM;AAAA,QACL,WAAW,CAAC,QAAQ;AAAA,MACrB;AAAA,IACD;AAAA,IACA,aAAa;AAAA,EACd;AAAA,EACA;AAAA,IACC,aAAa;AAAA,IACb,MAAM;AAAA,IACN,MAAM;AAAA,IACN,SAAS;AAAA,IACT,gBAAgB;AAAA,MACf,MAAM;AAAA,QACL,WAAW,CAAC,QAAQ;AAAA,MACrB;AAAA,IACD;AAAA,IACA,aAAa;AAAA,EACd;AAAA,EACA;AAAA,IACC,aAAa;AAAA,IACb,MAAM;AAAA,IACN,MAAM;AAAA,IACN,SAAS;AAAA,IACT,gBAAgB;AAAA,MACf,MAAM;AAAA,QACL,WAAW,CAAC,QAAQ;AAAA,MACrB;AAAA,IACD;AAAA,IACA,aAAa;AAAA,EACd;AAAA;AAAA;AAAA;AAAA,EAKA;AAAA,IACC,aAAa;AAAA,IACb,MAAM;AAAA,IACN,MAAM;AAAA,IACN,SAAS;AAAA,IACT,aAAa;AAAA,IACb,gBAAgB;AAAA,MACf,MAAM;AAAA,QACL,WAAW,CAAC,WAAW;AAAA,MACxB;AAAA,IACD;AAAA,IACA,aACC;AAAA,EACF;AAAA,EACA;AAAA,IACC,aAAa;AAAA,IACb,MAAM;AAAA,IACN,MAAM;AAAA,IACN,gBAAgB;AAAA,MACf,MAAM;AAAA,QACL,WAAW,CAAC,WAAW;AAAA,MACxaAAa;AAAA,EACd;AAAA,EACA;AAAA,IACC,aAAa;AAAA,IACb,MAAM;AAAA,IACN,MAAM;AAAA,IACN,SAAS;AAAA,IACT,gBAAgB;AAAA,MACf,MAAM;AAAA,QACL,WAAW,CAAC,WAAW;AAAA,MACxB;AAAA,IACD;AAAA,IACA,aAAa;AAAA,EACd;AAAA,EACA;AAAA,IACC,aAAa;AAAA,IACb,MAAM;AAAA,IACN,MAAM;AAAA,IACN,SAAS;AAAA,IACT,gBAAgB;AAAA,MACf,MAAM;AAAA,QACL,WAAW,CAAC,WAAW;AAAA,MACxB;AAAA,IACD;AAAA,IACA,aAAa;AAAA,EACd;AAAA;AAAA;AAAA;AAAA,EAKA;AAAA,IACC,aAAa;AAAA,IACb,MAAM;AAAA,IACN,MAAM;AAAA,IACN,SAAS;AAAA,IACT,gBAAgB;AAAA,MACf,MAAM;AAAA,QACL,WAAW,CAAC,MAAM;AAAA,MACnB;AAAA,IACD;AAAA,IACA,aAAa;AAAA,EACd;AAAA,EACA;AAAA,IACC,aAAa;AAAA,IACb,MAAM;AAAA,IACN,MAAM;AAAA,IACN,SAAS;AAAA,IACT,gBAAgB;AAAA,MACf,MAAM;AAAA,QACL,WAAW,CAAC,MAAM;AAAA,MACnB;AAAA,IACD;AAAA,IACA,aAAa;AAAA,EACd;AAAA,EACA;AAAA,IACC,aAAa;AAAA,IACb,MAAM;AAAA,IACN,MAAM;AAAA,IACN,SAAS;AAAA,IACT,gBAAgB;AAAA,MACf,MAAM;AAAA,QACL,WAAW,CAAC,MAAM;AAAA,MACnB;AAAA,IACD;AAAA,IACA,aAAa;AAAA,EACd;AAAA,EACA;AAAA,IACC,aAAa;AAAA,IACb,MAAM;AAAA,IACN,MAAM;AAAA,IACN,SAAS;AAAA,IACT,gBAAgB;AAAA,MACf,MAAM;AAAA,QACL,WAAW,CAAC,MAAM;AAAA,MACnB;AAAA,IACD;AAAA,IACA,aAAa;AAAA,EACd;AAAA;AAAA;AAAA;AAAA,EAKA;AAAA,IACC,aAAa;AAAA,IACb,MAAM;AAAA,IACN,MAAM;AAAA,IACN,SAAS;AAAA,IACT,gBAAgB;AAAA,MACf,MAAM;AAAA,QACL,WAAW,CAAC,QAAQ;AAAA,MACrB;AAAA,IACD;AAAA,IACA,aAAa;AAAA,EACd;AAAA,EACA;AAAA,IACC,aAAa;AAAA,IACb,MAAM;AAAA,IACN,MAAM;AAAA,IACN,SAAS;AAAA,IACT,gBAAgB;AAAA,MACf,MAAM;AAAA,QACL,WAAW,CAAC,QAAQ;AAAA,MACrB;AAAA,IACD;AAAA,IACA,aAAa;AAAA,EACd;AAAA,EACA;AAAA,IACC,aAAa;AAAA,IACb,MAAM;AAAA,IACN,MAAM;AAAA,IACN,SAAS;AAAA,MACR;AAAA,QACC,MAAM;AAAA,QACN,OAAO;AAAA,QACP,aAAa;AAAA,MACd;AAAA,MACA;AAAA,QACC,MAAM;AAAA,QACN,OAAO;AAAA,QACP,aAAa;AAAA,MACd;AAAA,MACA;AAAA,QACC,MAAM;AAAA,QACN,OAAO;AAAA,QACP,aAAa;AAAA,MACd;AAAA,MACA;AAAA,QACC,MAAM;AAAA,QACN,OAAO;AAAA,QACP,aAAa;AAAA,MACd;AAAA,MACA;AAAA,QACC,MAAM;AAAA,QACN,OAAO;AAAA,QACP,aAAa;AAAA,MACd;AAAA,MACA;AAAA,QACC,MAAM;AAAA,QACN,OAAO;AAAA,QACP,aAAa;AAAA,MACd;AAAA,IACD;AAAA,IACA,SAAS;AAAA,IACT,gBAAgB;AAAA,MACf,MAAM;AAAA,QACL,WAAW,CAAC,QAAQ;AAAA,MACrB;AAAA,IACD;AAAA,IACA,aAAa;AAAA,EACd;AAAA;AAAA;AAAA;AAAA,EAKA;AAAA,IACC,aAAa;AAAA,IACb,MAAM;AAAA,IACN,MAAM;AAAA,IACN,aAAa;AAAA,MACZ,UAAU;AAAA,MACV,UAAU;AAAA,IACX;AAAA,IACA,SAAS;AAAA,IACT,gBAAgB;AAAA,MACf,MAAM;AAAA,QACL,WAAW,CAAC,QAAQ;AAAA,MACrB;AAAA,IACD;AAAA,IACA,aAAa;AAAA,EACd;AAAA,EACA;AAAA,IACC,aAAa;AAAA,IACb,MAAM;AAAA,IACN,MAAM;AAAA,IACN,SAAS;AAAA,IACT,aAAa;AAAA,MACZ,WAAW;AAAA,IACZ;AAAA,IACA,gBAAgB;AAAA,MACf,MAAM;AAAA,QACL,WAAW,CAAC,QAAQ;AAAA,MACrB;AAAA,IACD;AAAA,IACA,aACC;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA;AAAA,IACC,aAAa;AAAA,IACb,MAAM;AAAA,IACN,MAAM;AAAA,IACN,SAAS;AAAA,IACT,gBAAgB;AAAA,MACf,MAAM;AAAA,QACL,WAAW,CAAC,OAAO;AAAA,MACpB;AAAA,IACD;AAAA,IACA,aAAa;AAAA,EACd;AAAA,EACA;AAAA,IACC,aAAa;AAAA,IACb,MAAM;AAAA,IACN,MAAM;AAAA,IACN,SAAS;AAAA,IACT,gBAAgB;AAAA,MACf,MAAM;AAAA,QACL,WAAW,CAAC,OAAO;AAAA,MACpB;AAAA,IACD;AAAA,IACA,aAAa;AAAA,EACd;AAAA;AAAA;AAAA;AAAA,EAKA;AAAA,IACC,aAAa;AAAA,IACb,MAAM;AAAA,IACN,MAAM;AAAA,IACN,SAAS;AAAA,IACT,gBAAgB;AAAA,MACf,MAAM;AAAA,QACL,WAAW,CAAC,aAAa;AAAA,MAC1B;AAAA,IACD;AAAA,IACA,aAAa;AAAA,EACd;AACD;AAEO,MAAM,UAA+B;AAAA,EAArC;AACN,uBAAoC;AAAA,MACnC,aAAa;AAAA,MACb,MAAM;AAAA,MACN,MAAM;AAAA,MACN,WAAW;AAAA,MACX,OAAO,CAAC,WAAW;AAAA,MACnB,SAAS;AAAA,MACT,aAAa;AAAA,MACb,UAAU;AAAA,QACT,MAAM;AAAA,QACN,OAAO;AAAA,MACR;AAAA,MACA,QAAQ,CAAC,wCAAoB,IAAI;AAAA,MACjC,SAAS,CAAC,wCAAoB,IAAI;AAAA,MAClC,YAAY;AAAA,QACX;AAAA,UACC,aAAa;AAAA,UACb,MAAM;AAAA,UACN,MAAM;AAAA,UACN,kBAAkB;AAAA,UAClB,SAAS;AAAA,YACR;AAAA,cACC,MAAM;AAAA,cACN,OAAO;AAAA,cACP,aAAa;AAAA,YACd;AAAA,YACA;AAAA,cACC,MAAM;AAAA,cACN,OAAO;AAAA,cACP,aAAa;AAAA,YACd;AAAA,YACA,GAAG;AAAA,UACJ,EAAE,KAAK,CAAC,GAAG,MAAM;AAChB,gBAAI,EAAE,KAAK,YAAY,IAAI,EAAE,KAAK,YAAY,GAAG;AAChD,qBAAO;AAAA,YACR;AACA,gBAAI,EAAE,KAAK,YAAY,IAAI,EAAE,KAAK,YAAY,GAAG;AAChD,qBAAO;AAAA,YACR;AACA,mBAAO;AAAA,UACR,CAAC;AAAA,UACD,SAAS;AAAA,QACV;AAAA,QACA;AAAA,UACC,aAAa;AAAA,UACb,MAAM;AAAA,UACN,MAAM;AAAA,UACN,SAAS;AAAA,UACT,aAAa;AAAA,QACd;AAAA;AAAA;AAAA;AAAA,QAKA;AAAA,UACC,aAAa;AAAA,UACb,MAAM;AAAA,UACN,aAAa;AAAA,UACb,MAAM;AAAA,UACN,aAAa;AAAA,YACZ,gBAAgB;AAAA,YAChB,UAAU;AAAA,UACX;AAAA,UACA,gBAAgB;AAAA,YACf,MAAM;AAAA,cACL,WAAW,CAAC,WAAW;AAAA,YACxB;AAAA,UACD;AAAA,UACA,aAAa;AAAA,UACb,SAAS,CAAC;AAAA,UACV,SAAS;AAAA,YACR;AAAA,cACC,MAAM;AAAA,cACN,aAAa;AAAA,cACb,QAAQ;AAAA,gBACP;AAAA,kBACC,aAAa;AAAA,kBACb,MAAM;AAAA,kBACN,MAAM;AAAA,kBACN,kBAAkB;AAAA,kBAClB,SAAS;AAAA,kBACT,SAAS;AAAA,gBACV;AAAA,gBACA,GAAG;AAAA,gBACH;AAAA,kBACC,aAAa;AAAA,kBACb,MAAM;AAAA,kBACN,MAAM;AAAA,kBACN,gBAAgB;AAAA,oBACf,MAAM;AAAA,sBACL,WAAW,CAAC,MAAM;AAAA,oBACnB;AAAA,kBACD;AAAA,kBACA,aAAa;AAAA,oBACZ,mBAAmB;AAAA,kBACpB;AAAA,kBACA,SAAS;AAAA,kBACT,aACC;AAAA,gBACF;AAAA,cACD;AAAA,YACD;AAAA,UACD;AAAA,QACD;AAAA,QAEA,GAAG;AAAA,QACH;AAAA,UACC,aAAa;AAAA,UACb,MAAM;AAAA,UACN,MAAM;AAAA,UACN,aAAa;AAAA,UACb,SAAS,CAAC;AAAA,UACV,gBAAgB;AAAA,YACf,MAAM;AAAA,cACL,WAAW,CAAC,aAAa;AAAA,YAC1B;AAAA,UACD;AAAA,UACA,SAAS;AAAA,YACR;AAAA,cACC,aAAa;AAAA,cACb,MAAM;AAAA,cACN,MAAM;AAAA,cACN,SAAS;AAAA,cACT,aAAa;AAAA,YACd;AAAA,YACA;AAAA,cACC,aAAa;AAAA,cACb,MAAM;AAAA,cACN,MAAM;AAAA,cACN,gBAAgB;AAAA,gBACf,MAAM;AAAA,kBACL,cAAc,CAAC,MAAM;AAAA,gBACtB;AAAA,cACD;AAAA,cACA,aAAa;AAAA,gBACZ,mBAAmB;AAAA,cACpB;AAAA,cACA,SAAS;AAAA,cACT,aACC;AAAA,YACF;AAAA,YACA;AAAA,cACC,aAAa;AAAA,cACb,MAAM;AAAA,cACN,MAAM;AAAA,cACN,SAAS;AAAA,gBACR;AAAA,kBACC,MAAM;AAAA,kBACN,OAAO;AAAA,gBACR;AAAA,gBACA;AAAA,kBACC,MAAM;AAAA,kBACN,OAAO;AAAA,gBACR;AAAA,gBACA;AAAA,kBACC,MAAM;AAAA,kBACN,OAAO;AAAA,gBACR;AAAA,gBACA;AAAA,kBACC,MAAM;AAAA,kBACN,OAAO;AAAA,gBACR;AAAA,gBACA;AAAA,kBACC,MAAM;AAAA,kBACN,OAAO;AAAA,gBACR;AAAA,gBACA;AAAA,kBACC,MAAM;AAAA,kBACN,OAAO;AAAA,gBACR;AAAA,cACD;AAAA,cACA,SAAS;AAAA,cACT,aAAa;AAAA,YACd;AAAA,YACA;AAAA,cACC,aAAa;AAAA,cACb,MAAM;AAAA,cACN,MAAM;AAAA,cACN,aAAa;AAAA,gBACZ,UAAU;AAAA,gBACV,UAAU;AAAA,cACX;AAAA,cACA,SAAS;AAAA,cACT,gBAAgB;AAAA,gBACf,MAAM;AAAA,kBACL,QAAQ,CAAC,QAAQ,OAAO,MAAM;AAAA,gBAC/B;AAAA,cACD;AAAA,cACA,aAAa;AAAA,YACd;AAAA,UACD;AAAA,QACD;AAAA,MACD;AAAA,IACD;AAEA,mBAAU;AAAA,MACT,aAAa;AAAA,QACZ,MAAM,WAAuE;AAC5E,gBAAM,QAAQ,UAAM,wBAAAA,SAAe;AACnC,gBAAM,aAAqC,CAAC;AAE5C,gBAAM,QAAQ,CAAC,UAAkB;AAChC,kBAAM,gBAAY,YAAAC,OAAU,KAAK;AACjC,gBAAI,CAAC,UAAU,KAAK;AACnB;AAAA,YACD;AAEA,uBAAW,KAAK;AAAA,cACf,MAAM,UAAU;AAAA,cAChB,OAAO;AAAA,YACR,CAAC;AAAA,UACF,CAAC;AAED,qBAAW,KAAK,CAAC,GAAG,MAAM;AACzB,gBAAI,EAAE,OAAO,EAAE,MAAM;AACpB,qBAAO;AAAA,YACR;AACA,gBAAI,EAAE,OAAO,EAAE,MAAM;AACpB,qBAAO;AAAA,YACR;AACA,mBAAO;AAAA,UACR,CAAC;AAED,iBAAO;AAAA,QACR;AAAA,MACD;AAAA,IACD;AAAA;AAAA,EAEA,MAAM,UAAkE;AACvE,UAAM,QAAQ,KAAK,aAAa;AAEhC,UAAM,aAAmC,CAAC;AAC1C,UAAM,SAAS,MAAM;AACrB,QAAI;AAEJ,aAAS,YAAY,GAAG,YAAY,QAAQ,aAAa;AACxD,UAAI;AACH,eAAO,MAAM,SAAS;AAEtB,cAAM,YAAY,KAAK,iBAAiB,aAAa,SAAS;AAC9D,cAAM,mBAAmB,KAAK,iBAAiB,oBAAoB,SAAS;AAE5E,cAAM,UAAU,KAAK,iBAAiB,WAAW,WAAW,CAAC,CAAC;AAE9D,cAAM,mBAAsC,CAAC;AAE7C,YAAI;AAEJ,cAAM,8BAEF;AAAA,UACH,MAAM,CAAC,QAAQ,OAAO;AAAA,UACtB,QAAQ,CAAC,eAAe,eAAe,cAAc;AAAA,UACrD,QAAQ,CAAC,mBAAmB,UAAU,OAAO;AAAA,UAC7C,MAAM,CAAC,UAAU,aAAa,aAAa,OAAO;AAAA,UAClD,WAAW,CAAC,6BAA6B,YAAY,aAAa,WAAW;AAAA,UAC7E,MAAM;AAAA,YACL;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,UACD;AAAA,UACA,aAAa,CAAC;AAAA,UACd,QAAQ,CAAC,UAAU,gBAAgB,OAAO;AAAA,UAC1C,QAAQ,CAAC,mBAAmB,QAAQ;AAAA,UACpC,OAAO,CAAC,YAAY,UAAU;AAAA,UAC9B,MAAM,CAAC,QAAQ,aAAa,YAAY,cAAc,aAAa,aAAa,MAAM;AAAA,UACtF,aAAa,CAAC,OAAO;AAAA,QACtB;AAEA,YAAI,aAA4B,CAAC;AACjC,YAAI,cAAc,aAAa;AAE9B,gBAAM,iBAAiB,KAAK,iBAAiB,cAAc,WAAW;AAAA,YACrE,YAAY,CAAC;AAAA,UACd,CAAC;AACD,uBAAa,eAAe;AAAA,QAC7B,OAAO;AAEN,gBAAM,sBAAmC,CAAC;AAC1C,sCAA4B,SAAS,EAAE,QAAQ,CAAC,kBAAkB;AACjE,gBAAI;AACH,kCAAoB,aAAa,IAAI,KAAK,iBAAiB,eAAe,SAAS;AAAA,YACpF,SAAS,OAAO;AAAA,YAAC;AAAA,UAClB,CAAC;AAED,uBAAa;AAAA,YACZ;AAAA,cACC;AAAA,cACA,GAAG;AAAA,YACJ;AAAA,UACD;AAAA,QACD;AAEA,YAAI,WAAW,CAAC,EAAE,cAAc,UAAU;AAEzC,eAAK,QAAQ,iBAAiB,WAAW,gBAAgB;AACzD,gBAAM,mBAAmB,MAAM,KAAK,QAAQ;AAAA,YAC3C;AAAA,YACA;AAAA,UACD;AACA,2BAAa,UAAAC,SAAG,gBAAgB;AAChC,uBAAa,WAAW,WAAW,aAAa;AAAA,QACjD;AAEA,cAAM,UAA8B;AAAA,UACnC,MAAM,KAAK;AAAA,UACX,QAAQ,CAAC;AAAA,UACT,YAAY;AAAA,YACX,MAAM;AAAA,UACP;AAAA,QACD;AAEA,YAAI,cAAc,eAAe;AAEhC,gBAAM,YAAY,MAAM,IAAI,QAAqB,CAAC,SAAS,WAAW;AACrE,yBAAa,WAAW,SAAS,CAAC,OAAO,SAAS;AACjD,kBAAI,OAAO;AACV,uBAAO,KAAK;AACZ;AAAA,cACD;AACA,sBAAQ,IAA8B;AAAA,YACvC,CAAC;AAAA,UACF,CAAC;AAED,kBAAQ,OAAO;AAAA,QAChB;AAEA,iBAAS,IAAI,GAAG,IAAI,WAAW,QAAQ,KAAK;AAC3C,gBAAM,gBAAgB,WAAW,CAAC;AAClC,cAAI,cAAc,cAAc,QAAQ;AACvC,yBAAa,WAAY;AAAA,cACxB,cAAc;AAAA,cACd,cAAc;AAAA,YACf;AAAA,UACD,WAAW,cAAc,cAAc,UAAU;AAChD,yBAAa,WACX,YAAY,cAAc,WAAqB,EAC/C,OAAO,cAAc,aAAuB,cAAc,YAAsB;AAAA,UACnF,WAAW,cAAc,cAAc,aAAa;AACnD,kBAAM,YAAY,cAAc;AAChC,kBAAM,YAAY,cAAc;AAChC,kBAAM,WAAW,cAAc;AAE/B,kBAAM,kBACJ,aAAa,IAAI,MAAM,MAAM,aAAa,aAAa,IAAI,MAAM,MAAM;AAEzE,kBAAM,qBAAqB,cAAc;AACzC,iBAAK,QAAQ,iBAAiB,WAAW,kBAAkB;AAC3D,kBAAM,mBAAmB,MAAM,KAAK,QAAQ;AAAA,cAC3C;AAAA,cACA;AAAA,YACD;AAEA,kBAAM,EAAE,MAAM,QAAQ,IAAI,UAAM,yBAAK;AACrC,6BAAiB,KAAK,OAAO;AAC7B,sBAAM,gBAAAC,WAAY,MAAM,gBAAgB;AAExC,gBAAI,WAAW,CAAC,EAAE,cAAc,UAAU;AAGzC,+BAAa,UAAAD,SAAG,WAAY,OAAO,KAAK,CAAC,EACvC,QAAQ,QAAQ,EAChB,SAAS,cAAc,EACvB,UAAU,IAAI;AAAA,YACjB,OAAO;AACN,2BAAa,WAAY,QAAQ,QAAQ,EAAE,SAAS,cAAc,EAAE,UAAU,IAAI;AAAA,YACnF;AAEA,gBAAI,WAAW,WAAW,IAAI,GAAG;AAGhC,+BAAa,UAAAA,SAAG,WAAW,OAAO,CAAC;AAAA,YACpC;AAAA,UACD,WAAW,cAAc,cAAc,UAAU;AAChD,6BAAa,UAAAA;AAAA,cACZ,cAAc;AAAA,cACd,cAAc;AAAA,cACd,cAAc;AAAA,YACf;AACA,gBAAI,CAAC,QAAQ,QAAQ;AACpB,sBAAQ,SAAS;AAAA,YAClB;AAAA,UACD,WAAW,cAAc,cAAc,QAAQ;AAC9C,yBAAa,WAAY;AAAA,cACxB,cAAc;AAAA,cACd,cAAc;AAAA,cACd,cAAc;AAAA,cACd,cAAc;AAAA,YACf;AAAA,UACD,WAAW,cAAc,cAAc,QAAQ;AAC9C,yBAAa,WAAY,KAAK,cAAc,KAAe;AAE3D,gBAAI,cAAc,cAAc,QAAQ;AACvC,2BAAa,WAAW;AAAA,gBACvB,cAAc;AAAA,gBACd,cAAc;AAAA,gBACd,cAAc;AAAA,gBACd,cAAc;AAAA,cACf;AAAA,YACD,WAAW,cAAc,cAAc,UAAU;AAChD,2BAAa,WAAW;AAAA,gBACvB,cAAc;AAAA,gBACd,cAAc;AAAA,gBACd,cAAc;AAAA,gBACd,cAAc;AAAA,cACf;AAAA,YACD,WAAW,cAAc,cAAc,aAAa;AACnD,2BAAa,WAAW;AAAA,gBACvB,cAAc;AAAA,gBACd,cAAc;AAAA,gBACd,cAAc;AAAA,gBACd,cAAc;AAAA,gBACb,cAAc,gBAA2B;AAAA,cAC3C;AAAA,YACD;AAAA,UACD,WAAW,cAAc,cAAc,UAAU;AAChD,kBAAM,eAAe,cAAc;AAGnC,gBAAI,SAA0B;AAC9B,gBAAI,iBAAiB,qBAAqB;AACzC,uBAAS;AAAA,YACV,WAAW,iBAAiB,eAAe;AAC1C,uBAAS;AAAA,YACV,WAAW,iBAAiB,iBAAiB;AAC5C,uBAAS;AAAA,YACV,WAAW,iBAAiB,gBAAgB;AAC3C,uBAAS;AAAA,YACV,WAAW,iBAAiB,WAAW;AACtC,uBAAS;AAAA,YACV;AAEA,yBAAa,WAAY;AAAA,cACxB,cAAc;AAAA,cACd,cAAc;AAAA,cACd;AAAA,YACD;AAAA,UACD,WAAW,cAAc,cAAc,UAAU;AAChD,yBAAa,WAAY;AAAA,cACxB,cAAc;AAAA,cACd,cAAc;AAAA,YACf;AAAA,UACD,WAAW,cAAc,cAAc,SAAS;AAC/C,yBAAa,WAAY;AAAA,cACxB,cAAc;AAAA,cACd,cAAc;AAAA,YACf;AAAA,UACD,WAAW,cAAc,cAAc,QAAQ;AAE9C,kBAAM,QAAkB,CAAC;AACzB,gBAAI,cAAc;AAClB,YAAC,cAAc,KAAgB,MAAM,IAAI,EAAE,QAAQ,CAAC,aAAqB;AACxE,uBAAS,MAAM,GAAG,EAAE,QAAQ,CAAC,aAAqB;AACjD,oBACC,YAAY,SAAS,SAAS,SAAS,IACtC,cAAc,YACd;AACD,wBAAM,KAAK,YAAY,KAAK,CAAC;AAC7B,gCAAc,GAAG,QAAQ;AACzB;AAAA,gBACD;AACA,+BAAe,GAAG,QAAQ;AAAA,cAC3B,CAAC;AAED,oBAAM,KAAK,YAAY,KAAK,CAAC;AAC7B,4BAAc;AAAA,YACf,CAAC;AAGD,kBAAM,aAAa,MAAM,KAAK,IAAI;AAElC,gBAAI,OAAQ,QAAQ,QAAQ,cAAc;AAC1C,gBAAI,CAAC,MAAM;AACV,oBAAM,QAAQ,UAAM,wBAAAF,SAAe;AACnC,qBAAO,MAAM,KAAK,CAAC,UAAU,MAAM,SAAS,QAAQ,CAAC;AAAA,YACtD;AAEA,gBAAI,CAAC,MAAM;AACV,oBAAM,IAAI;AAAA,gBACT,KAAK,QAAQ;AAAA,gBACb;AAAA,cACD;AAAA,YACD;AAEA,yBAAa,WACX,KAAK,cAAc,SAAmB,EACtC,SAAS,cAAc,QAAkB,EACzC,KAAK,IAAI,EACT;AAAA,cACA,cAAc;AAAA,cACd,cAAc;AAAA,cACd;AAAA,YACD;AAAA,UACF,WAAW,cAAc,cAAc,eAAe;AACrD,yBAAa,WAAY,YAAY,cAAc,KAAe;AAAA,UACnE;AAAA,QACD;AAEA,YAAI,KAAK,WAAW,UAAa,QAAQ,QAAQ;AAIhD,iBAAO,OAAO,QAAQ,QAAQ,KAAK,MAAM;AAEzC,cAAI,QAAQ,OAAO,gBAAgB,GAAG;AACrC,oBAAQ,OAAO,gBAAgB,QAAI,8BAAS,QAAQ,OAAO,gBAAgB,CAAC;AAAA,UAC7E;AAAA,QACD;AAEA,YAAI,QAAQ,OAAQ,gBAAgB,MAAM,QAAW;AACpD,kBAAQ,OAAQ,gBAAgB,IAAI;AAAA,YACnC,MAAM;AAAA,YACN,UAAU;AAAA,UACX;AAAA,QACD;AAEA,YAAI,QAAQ,YAAY,QAAW;AAClC,uBAAa,WAAY,QAAQ,QAAQ,OAAiB;AAAA,QAC3D;AAEA,YAAI,QAAQ,WAAW,QAAW;AACjC,uBAAa,WAAY,UAAU,QAAQ,MAAgB;AAC3D,kBAAQ,OAAQ,gBAAgB,EAAE,gBAAgB,QAAQ;AAC1D,kBAAQ,OAAQ,gBAAgB,EAAE,WAAW,SAAS,QAAQ,MAAM;AACpE,gBAAM,WAAW,QAAQ,OAAQ,gBAAgB,EAAE;AACnD,cAAI,UAAU,SAAS,GAAG,GAAG;AAC5B,oBAAQ,OAAQ,gBAAgB,EAAE,WACjC,SAAS,MAAM,GAAG,EAAE,MAAM,GAAG,EAAE,EAAE,KAAK,GAAG,IAAI,MAAM,QAAQ;AAAA,UAC7D;AAAA,QACD;AAEA,YAAI,QAAQ,aAAa,QAAW;AACnC,kBAAQ,OAAQ,gBAAgB,EAAE,WAAW,QAAQ;AAAA,QACtD;AAEA,mBAAW;AAAA,UACV,MAAM,IAAI,QAA4B,CAAC,SAAS,WAAW;AAC1D,uBAAW,SAAS,OAAO,OAAqB,WAAmB;AAClE,+BAAiB,QAAQ,OAAO,YAAY,QAAQ,CAAC;AAErD,kBAAI,OAAO;AACV,uBAAO,OAAO,KAAK;AAAA,cACpB;AAEA,oBAAM,aAAa,MAAM,KAAK,QAAQ,kBAAkB,OAAO,KAAK,MAAM,CAAC;AAC3E,sBAAQ,OAAQ,gBAAgB,IAAI;AAAA,gBACnC,GAAG,QAAQ,OAAQ,gBAAgB;AAAA,gBACnC,GAAG;AAAA,cACJ;AAEA,qBAAO,QAAQ,OAAO;AAAA,YACvB,CAAC;AAAA,UACF,CAAC;AAAA,QACF;AAAA,MACD,SAAS,OAAO;AACf,YAAI,KAAK,eAAe,GAAG;AAC1B,qBAAW,KAAK;AAAA,YACf,MAAM;AAAA,cACL,OAAO,MAAM;AAAA,YACd;AAAA,YACA,YAAY;AAAA,cACX,MAAM;AAAA,YACP;AAAA,UACD,CAAC;AACD;AAAA,QACD;AACA,cAAM;AAAA,MACP;AAAA,IACD;AACA,WAAO,CAAC,UAAU;AAAA,EACnB;AACD;","names":["getSystemFonts","pathParse","gm","fsWriteFile"]}