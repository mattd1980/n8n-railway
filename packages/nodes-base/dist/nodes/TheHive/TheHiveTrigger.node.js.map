{"version":3,"sources":["../../../nodes/TheHive/TheHiveTrigger.node.ts"],"sourcesContent":["import {\n\ttype IWebhookFunctions,\n\ttype IDataObject,\n\ttype IHookFunctions,\n\ttype INodeType,\n\ttype INodeTypeDescription,\n\ttype IWebhookResponseData,\n\tNodeConnectionTypes,\n} from 'n8n-workflow';\n\nimport { eventsDescription } from './descriptions/EventsDescription';\n\nexport class TheHiveTrigger implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'TheHive Trigger',\n\t\tname: 'theHiveTrigger',\n\t\ticon: 'file:thehive.svg',\n\t\tgroup: ['trigger'],\n\t\tversion: [1, 2],\n\t\tdescription: 'Starts the workflow when TheHive events occur',\n\t\tdefaults: {\n\t\t\tname: 'TheHive Trigger',\n\t\t},\n\t\tinputs: [],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\twebhooks: [\n\t\t\t{\n\t\t\t\tname: 'default',\n\t\t\t\thttpMethod: 'POST',\n\t\t\t\tresponseMode: 'onReceived',\n\t\t\t\tpath: 'webhook',\n\t\t\t},\n\t\t],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName:\n\t\t\t\t\t'You must set up the webhook in TheHive â€” instructions <a href=\"https://docs.n8n.io/integrations/builtin/trigger-nodes/n8n-nodes-base.thehivetrigger/#configure-a-webhook-in-thehive\" target=\"_blank\">here</a>',\n\t\t\t\tname: 'notice',\n\t\t\t\ttype: 'notice',\n\t\t\t\tdefault: '',\n\t\t\t},\n\t\t\t...eventsDescription,\n\t\t],\n\t};\n\n\twebhookMethods = {\n\t\tdefault: {\n\t\t\tasync checkExists(this: IHookFunctions): Promise<boolean> {\n\t\t\t\treturn true;\n\t\t\t},\n\t\t\tasync create(this: IHookFunctions): Promise<boolean> {\n\t\t\t\treturn true;\n\t\t\t},\n\t\t\tasync delete(this: IHookFunctions): Promise<boolean> {\n\t\t\t\treturn true;\n\t\t\t},\n\t\t},\n\t};\n\n\tasync webhook(this: IWebhookFunctions): Promise<IWebhookResponseData> {\n\t\t// Get the request body\n\t\tconst bodyData = this.getBodyData();\n\t\tconst events = this.getNodeParameter('events', []) as string[];\n\t\tif (!bodyData.operation || !bodyData.objectType) {\n\t\t\t// Don't start the workflow if mandatory fields are not specified\n\t\t\treturn {};\n\t\t}\n\n\t\t// Don't start the workflow if the event is not fired\n\t\t// Replace Creation with Create for TheHive 3 support\n\t\tconst operation = (bodyData.operation as string).replace('Creation', 'Create');\n\t\tconst event = `${(bodyData.objectType as string).toLowerCase()}_${operation.toLowerCase()}`;\n\n\t\tif (events.indexOf('*') === -1 && events.indexOf(event) === -1) {\n\t\t\treturn {};\n\t\t}\n\n\t\t// The data to return and so start the workflow with\n\t\tconst returnData: IDataObject[] = [];\n\t\treturnData.push({\n\t\t\tevent,\n\t\t\tbody: this.getBodyData(),\n\t\t\theaders: this.getHeaderData(),\n\t\t\tquery: this.getQueryData(),\n\t\t});\n\n\t\treturn {\n\t\t\tworkflowData: [this.helpers.returnJsonArray(returnData)],\n\t\t};\n\t}\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAQO;AAEP,+BAAkC;AAE3B,MAAM,eAAoC;AAAA,EAA1C;AACN,uBAAoC;AAAA,MACnC,aAAa;AAAA,MACb,MAAM;AAAA,MACN,MAAM;AAAA,MACN,OAAO,CAAC,SAAS;AAAA,MACjB,SAAS,CAAC,GAAG,CAAC;AAAA,MACd,aAAa;AAAA,MACb,UAAU;AAAA,QACT,MAAM;AAAA,MACP;AAAA,MACA,QAAQ,CAAC;AAAA,MACT,SAAS,CAAC,wCAAoB,IAAI;AAAA,MAClC,UAAU;AAAA,QACT;AAAA,UACC,MAAM;AAAA,UACN,YAAY;AAAA,UACZ,cAAc;AAAA,UACd,MAAM;AAAA,QACP;AAAA,MACD;AAAA,MACA,YAAY;AAAA,QACX;AAAA,UACC,aACC;AAAA,UACD,MAAM;AAAA,UACN,MAAM;AAAA,UACN,SAAS;AAAA,QACV;AAAA,QACA,GAAG;AAAA,MACJ;AAAA,IACD;AAEA,0BAAiB;AAAA,MAChB,SAAS;AAAA,QACR,MAAM,cAAoD;AACzD,iBAAO;AAAA,QACR;AAAA,QACA,MAAM,SAA+C;AACpD,iBAAO;AAAA,QACR;AAAA,QACA,MAAM,SAA+C;AACpD,iBAAO;AAAA,QACR;AAAA,MACD;AAAA,IACD;AAAA;AAAA,EAEA,MAAM,UAAgE;AAErE,UAAM,WAAW,KAAK,YAAY;AAClC,UAAM,SAAS,KAAK,iBAAiB,UAAU,CAAC,CAAC;AACjD,QAAI,CAAC,SAAS,aAAa,CAAC,SAAS,YAAY;AAEhD,aAAO,CAAC;AAAA,IACT;AAIA,UAAM,YAAa,SAAS,UAAqB,QAAQ,YAAY,QAAQ;AAC7E,UAAM,QAAQ,GAAI,SAAS,WAAsB,YAAY,CAAC,IAAI,UAAU,YAAY,CAAC;AAEzF,QAAI,OAAO,QAAQ,GAAG,MAAM,MAAM,OAAO,QAAQ,KAAK,MAAM,IAAI;AAC/D,aAAO,CAAC;AAAA,IACT;AAGA,UAAM,aAA4B,CAAC;AACnC,eAAW,KAAK;AAAA,MACf;AAAA,MACA,MAAM,KAAK,YAAY;AAAA,MACvB,SAAS,KAAK,cAAc;AAAA,MAC5B,OAAO,KAAK,aAAa;AAAA,IAC1B,CAAC;AAED,WAAO;AAAA,MACN,cAAc,CAAC,KAAK,QAAQ,gBAAgB,UAAU,CAAC;AAAA,IACxD;AAAA,EACD;AACD;","names":[]}