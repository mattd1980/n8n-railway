{"version":3,"sources":["../../../nodes/RenameKeys/RenameKeys.node.ts"],"sourcesContent":["import get from 'lodash/get';\nimport set from 'lodash/set';\nimport unset from 'lodash/unset';\nimport { NodeConnectionTypes, deepCopy } from 'n8n-workflow';\nimport type {\n\tIExecuteFunctions,\n\tIDataObject,\n\tINodeExecutionData,\n\tINodeType,\n\tINodeTypeDescription,\n} from 'n8n-workflow';\n\ninterface IRenameKey {\n\tcurrentKey: string;\n\tnewKey: string;\n}\n\nexport class RenameKeys implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'Rename Keys',\n\t\tname: 'renameKeys',\n\t\ticon: 'fa:edit',\n\t\ticonColor: 'crimson',\n\t\tgroup: ['transform'],\n\t\tversion: 1,\n\t\tdescription: 'Update item field names',\n\t\tdefaults: {\n\t\t\tname: 'Rename Keys',\n\t\t\tcolor: '#772244',\n\t\t},\n\t\tinputs: [NodeConnectionTypes.Main],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Keys',\n\t\t\t\tname: 'keys',\n\t\t\t\tplaceholder: 'Add new key',\n\t\t\t\tdescription: 'Adds a key which should be renamed',\n\t\t\t\ttype: 'fixedCollection',\n\t\t\t\ttypeOptions: {\n\t\t\t\t\tmultipleValues: true,\n\t\t\t\t\tsortable: true,\n\t\t\t\t},\n\t\t\t\tdefault: {},\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Key',\n\t\t\t\t\t\tname: 'key',\n\t\t\t\t\t\tvalues: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdisplayName: 'Current Key Name',\n\t\t\t\t\t\t\t\tname: 'currentKey',\n\t\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\t\t\tplaceholder: 'currentKey',\n\t\t\t\t\t\t\t\trequiresDataPath: 'single',\n\t\t\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t\t\t'The current name of the key. It is also possible to define deep keys by using dot-notation like for example: \"level1.level2.currentKey\".',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdisplayName: 'New Key Name',\n\t\t\t\t\t\t\t\tname: 'newKey',\n\t\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\t\t\tplaceholder: 'newKey',\n\t\t\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t\t\t'The name the key should be renamed to. It is also possible to define deep keys by using dot-notation like for example: \"level1.level2.newKey\".',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Additional Options',\n\t\t\t\tname: 'additionalOptions',\n\t\t\t\ttype: 'collection',\n\t\t\t\tdefault: {},\n\t\t\t\tplaceholder: 'Add option',\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Regex',\n\t\t\t\t\t\tname: 'regexReplacement',\n\t\t\t\t\t\tplaceholder: 'Add new regular expression',\n\t\t\t\t\t\tdescription: 'Adds a regular expressiond',\n\t\t\t\t\t\ttype: 'fixedCollection',\n\t\t\t\t\t\ttypeOptions: {\n\t\t\t\t\t\t\tmultipleValues: true,\n\t\t\t\t\t\t\tsortable: true,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tdefault: {},\n\t\t\t\t\t\toptions: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdisplayName: 'Replacement',\n\t\t\t\t\t\t\t\tname: 'replacements',\n\t\t\t\t\t\t\t\tvalues: [\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tdisplayName:\n\t\t\t\t\t\t\t\t\t\t\t'Be aware that by using regular expression previously renamed keys can be affected',\n\t\t\t\t\t\t\t\t\t\tname: 'regExNotice',\n\t\t\t\t\t\t\t\t\t\ttype: 'notice',\n\t\t\t\t\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tdisplayName: 'Regular Expression',\n\t\t\t\t\t\t\t\t\t\tname: 'searchRegex',\n\t\t\t\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\t\t\t\t\tplaceholder: 'e.g. [N-n]ame',\n\t\t\t\t\t\t\t\t\t\tdescription: 'Regex to match the key name',\n\t\t\t\t\t\t\t\t\t\thint: 'Learn more and test RegEx <a href=\"https://regex101.com/\">here</a>',\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tdisplayName: 'Replace With',\n\t\t\t\t\t\t\t\t\t\tname: 'replaceRegex',\n\t\t\t\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\t\t\t\t\tplaceholder: 'replacedName',\n\t\t\t\t\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t\t\t\t\t\"The name the key/s should be renamed to. It's possible to use regex captures e.g. $1, $2, ...\",\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tdisplayName: 'Options',\n\t\t\t\t\t\t\t\t\t\tname: 'options',\n\t\t\t\t\t\t\t\t\t\ttype: 'collection',\n\t\t\t\t\t\t\t\t\t\tdefault: {},\n\t\t\t\t\t\t\t\t\t\tplaceholder: 'Add Regex Option',\n\t\t\t\t\t\t\t\t\t\toptions: [\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tdisplayName: 'Case Insensitive',\n\t\t\t\t\t\t\t\t\t\t\t\tname: 'caseInsensitive',\n\t\t\t\t\t\t\t\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\t\t\t\t\t\t\t\tdescription: 'Whether to use case insensitive match',\n\t\t\t\t\t\t\t\t\t\t\t\tdefault: false,\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tdisplayName: 'Max Depth',\n\t\t\t\t\t\t\t\t\t\t\t\tname: 'depth',\n\t\t\t\t\t\t\t\t\t\t\t\ttype: 'number',\n\t\t\t\t\t\t\t\t\t\t\t\tdefault: -1,\n\t\t\t\t\t\t\t\t\t\t\t\tdescription: 'Maximum depth to replace keys',\n\t\t\t\t\t\t\t\t\t\t\t\thint: 'Specify number for depth level (-1 for unlimited, 0 for top level only)',\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t],\n\t};\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t\tconst items = this.getInputData();\n\n\t\tconst returnData: INodeExecutionData[] = [];\n\n\t\tlet item: INodeExecutionData;\n\t\tlet newItem: INodeExecutionData;\n\t\tlet renameKeys: IRenameKey[];\n\t\tlet value: any;\n\n\t\tconst renameKey = (key: IRenameKey) => {\n\t\t\tif (key.currentKey === '' || key.newKey === '' || key.currentKey === key.newKey) {\n\t\t\t\t// Ignore all which do not have all the values set or if the new key is equal to the current key\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvalue = get(item.json, key.currentKey);\n\t\t\tif (value === undefined) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tset(newItem.json, key.newKey, value);\n\n\t\t\tunset(newItem.json, key.currentKey);\n\t\t};\n\n\t\tconst regexReplaceKey = (replacement: IDataObject) => {\n\t\t\tconst { searchRegex, replaceRegex, options } = replacement;\n\t\t\tconst { depth, caseInsensitive } = options as IDataObject;\n\n\t\t\tconst flags = (caseInsensitive as boolean) ? 'i' : undefined;\n\n\t\t\tconst regex = new RegExp(searchRegex as string, flags);\n\n\t\t\tconst renameObjectKeys = (obj: IDataObject, objDepth: number) => {\n\t\t\t\tfor (const key in obj) {\n\t\t\t\t\tif (Array.isArray(obj)) {\n\t\t\t\t\t\t// Don't rename array object references\n\t\t\t\t\t\tif (objDepth !== 0) {\n\t\t\t\t\t\t\trenameObjectKeys(obj[key] as IDataObject, objDepth - 1);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (obj.hasOwnProperty(key)) {\n\t\t\t\t\t\tif (typeof obj[key] === 'object' && objDepth !== 0) {\n\t\t\t\t\t\t\trenameObjectKeys(obj[key] as IDataObject, objDepth - 1);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (key.match(regex)) {\n\t\t\t\t\t\t\tconst newKey = key.replace(regex, replaceRegex as string);\n\t\t\t\t\t\t\tif (newKey !== key) {\n\t\t\t\t\t\t\t\tobj[newKey] = obj[key];\n\t\t\t\t\t\t\t\tdelete obj[key];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn obj;\n\t\t\t};\n\t\t\tnewItem.json = renameObjectKeys(newItem.json, depth as number);\n\t\t};\n\t\tfor (let itemIndex = 0; itemIndex < items.length; itemIndex++) {\n\t\t\trenameKeys = this.getNodeParameter('keys.key', itemIndex, []) as IRenameKey[];\n\t\t\tconst regexReplacements = this.getNodeParameter(\n\t\t\t\t'additionalOptions.regexReplacement.replacements',\n\t\t\t\titemIndex,\n\t\t\t\t[],\n\t\t\t) as IDataObject[];\n\n\t\t\titem = items[itemIndex];\n\n\t\t\t// Copy the whole JSON data as data on any level can be renamed\n\t\t\tnewItem = {\n\t\t\t\tjson: deepCopy(item.json),\n\t\t\t\tpairedItem: {\n\t\t\t\t\titem: itemIndex,\n\t\t\t\t},\n\t\t\t};\n\n\t\t\tif (item.binary !== undefined) {\n\t\t\t\t// Reference binary data if any exists. We can reference it\n\t\t\t\t// as this nodes does not change it\n\t\t\t\tnewItem.binary = item.binary;\n\t\t\t}\n\n\t\t\trenameKeys.forEach(renameKey);\n\n\t\t\tregexReplacements.forEach(regexReplaceKey);\n\n\t\t\treturnData.push(newItem);\n\t\t}\n\n\t\treturn [returnData];\n\t}\n}\n"],"mappings":"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","names":["get","set","unset"]}