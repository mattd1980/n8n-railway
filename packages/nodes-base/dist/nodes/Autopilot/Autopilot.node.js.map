{"version":3,"sources":["../../../nodes/Autopilot/Autopilot.node.ts"],"sourcesContent":["import {\n\ttype IExecuteFunctions,\n\ttype IDataObject,\n\ttype ILoadOptionsFunctions,\n\ttype INodeExecutionData,\n\ttype INodePropertyOptions,\n\ttype INodeType,\n\ttype INodeTypeDescription,\n\ttype IHttpRequestMethods,\n\tNodeConnectionTypes,\n} from 'n8n-workflow';\n\nimport { contactFields, contactOperations } from './ContactDescription';\nimport { contactJourneyFields, contactJourneyOperations } from './ContactJourneyDescription';\nimport { contactListFields, contactListOperations } from './ContactListDescription';\nimport { autopilotApiRequest, autopilotApiRequestAllItems } from './GenericFunctions';\nimport { listFields, listOperations } from './ListDescription';\n\nexport class Autopilot implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'Autopilot',\n\t\tname: 'autopilot',\n\t\ticon: 'file:autopilot.svg',\n\t\tgroup: ['input'],\n\t\tversion: 1,\n\t\tsubtitle: '={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}',\n\t\tdescription: 'Consume Autopilot API',\n\t\tdefaults: {\n\t\t\tname: 'Autopilot',\n\t\t},\n\t\tusableAsTool: true,\n\t\tinputs: [NodeConnectionTypes.Main],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tcredentials: [\n\t\t\t{\n\t\t\t\tname: 'autopilotApi',\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Resource',\n\t\t\t\tname: 'resource',\n\t\t\t\ttype: 'options',\n\t\t\t\tnoDataExpression: true,\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Contact',\n\t\t\t\t\t\tvalue: 'contact',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Contact Journey',\n\t\t\t\t\t\tvalue: 'contactJourney',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Contact List',\n\t\t\t\t\t\tvalue: 'contactList',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'List',\n\t\t\t\t\t\tvalue: 'list',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'contact',\n\t\t\t},\n\n\t\t\t...contactOperations,\n\t\t\t...contactFields,\n\t\t\t...contactJourneyOperations,\n\t\t\t...contactJourneyFields,\n\t\t\t...contactListOperations,\n\t\t\t...contactListFields,\n\t\t\t...listOperations,\n\t\t\t...listFields,\n\t\t],\n\t};\n\n\tmethods = {\n\t\tloadOptions: {\n\t\t\tasync getCustomFields(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst returnData: INodePropertyOptions[] = [];\n\t\t\t\tconst customFields = await autopilotApiRequest.call(this, 'GET', '/contacts/custom_fields');\n\t\t\t\tfor (const customField of customFields) {\n\t\t\t\t\treturnData.push({\n\t\t\t\t\t\tname: customField.name,\n\t\t\t\t\t\tvalue: `${customField.name}-${customField.fieldType}`,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn returnData;\n\t\t\t},\n\t\t\tasync getLists(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst returnData: INodePropertyOptions[] = [];\n\t\t\t\tconst { lists } = await autopilotApiRequest.call(this, 'GET', '/lists');\n\t\t\t\tfor (const list of lists) {\n\t\t\t\t\treturnData.push({\n\t\t\t\t\t\tname: list.title,\n\t\t\t\t\t\tvalue: list.list_id,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn returnData;\n\t\t\t},\n\t\t\tasync getTriggers(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst returnData: INodePropertyOptions[] = [];\n\t\t\t\tconst { triggers } = await autopilotApiRequest.call(this, 'GET', '/triggers');\n\t\t\t\tfor (const trigger of triggers) {\n\t\t\t\t\treturnData.push({\n\t\t\t\t\t\tname: trigger.journey,\n\t\t\t\t\t\tvalue: trigger.trigger_id,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn returnData;\n\t\t\t},\n\t\t},\n\t};\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t\tconst items = this.getInputData();\n\t\tconst returnData: IDataObject[] = [];\n\t\tconst length = items.length;\n\t\tconst qs: IDataObject = {};\n\t\tlet responseData;\n\t\tconst resource = this.getNodeParameter('resource', 0);\n\t\tconst operation = this.getNodeParameter('operation', 0);\n\t\tfor (let i = 0; i < length; i++) {\n\t\t\ttry {\n\t\t\t\tif (resource === 'contact') {\n\t\t\t\t\tif (operation === 'upsert') {\n\t\t\t\t\t\tconst email = this.getNodeParameter('email', i) as string;\n\n\t\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i);\n\n\t\t\t\t\t\tconst body: IDataObject = {\n\t\t\t\t\t\t\tEmail: email,\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tObject.assign(body, additionalFields);\n\n\t\t\t\t\t\tif (body.customFieldsUi) {\n\t\t\t\t\t\t\tconst customFieldsValues = (body.customFieldsUi as IDataObject)\n\t\t\t\t\t\t\t\t.customFieldsValues as IDataObject[];\n\n\t\t\t\t\t\t\tbody.custom = {};\n\n\t\t\t\t\t\t\tfor (const customField of customFieldsValues) {\n\t\t\t\t\t\t\t\tconst [name, fieldType] = (customField.key as string).split('-');\n\n\t\t\t\t\t\t\t\tconst fieldName = name.replace(/\\s/g, '--');\n\n\t\t\t\t\t\t\t\t//@ts-ignore\n\t\t\t\t\t\t\t\tbody.custom[`${fieldType}--${fieldName}`] = customField.value;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdelete body.customFieldsUi;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (body.autopilotList) {\n\t\t\t\t\t\t\tbody._autopilot_list = body.autopilotList;\n\t\t\t\t\t\t\tdelete body.autopilotList;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (body.autopilotSessionId) {\n\t\t\t\t\t\t\tbody._autopilot_session_id = body.autopilotSessionId;\n\t\t\t\t\t\t\tdelete body.autopilotSessionId;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (body.newEmail) {\n\t\t\t\t\t\t\tbody._NewEmail = body.newEmail;\n\t\t\t\t\t\t\tdelete body.newEmail;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await autopilotApiRequest.call(this, 'POST', '/contact', {\n\t\t\t\t\t\t\tcontact: body,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\tif (operation === 'delete') {\n\t\t\t\t\t\tconst contactId = this.getNodeParameter('contactId', i) as string;\n\n\t\t\t\t\t\tresponseData = await autopilotApiRequest.call(this, 'DELETE', `/contact/${contactId}`);\n\n\t\t\t\t\t\tresponseData = { success: true };\n\t\t\t\t\t}\n\n\t\t\t\t\tif (operation === 'get') {\n\t\t\t\t\t\tconst contactId = this.getNodeParameter('contactId', i) as string;\n\n\t\t\t\t\t\tresponseData = await autopilotApiRequest.call(this, 'GET', `/contact/${contactId}`);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (operation === 'getAll') {\n\t\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', i);\n\n\t\t\t\t\t\tif (!returnAll) {\n\t\t\t\t\t\t\tqs.limit = this.getNodeParameter('limit', i);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresponseData = await autopilotApiRequestAllItems.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'contacts',\n\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t'/contacts',\n\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tif (!returnAll) {\n\t\t\t\t\t\t\tresponseData = responseData.splice(0, qs.limit);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (resource === 'contactJourney') {\n\t\t\t\t\tif (operation === 'add') {\n\t\t\t\t\t\tconst triggerId = this.getNodeParameter('triggerId', i) as string;\n\n\t\t\t\t\t\tconst contactId = this.getNodeParameter('contactId', i) as string;\n\n\t\t\t\t\t\tresponseData = await autopilotApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'POST',\n\t\t\t\t\t\t\t`/trigger/${triggerId}/contact/${contactId}`,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tresponseData = { success: true };\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (resource === 'contactList') {\n\t\t\t\t\tif (['add', 'remove', 'exist'].includes(operation)) {\n\t\t\t\t\t\tconst listId = this.getNodeParameter('listId', i) as string;\n\n\t\t\t\t\t\tconst contactId = this.getNodeParameter('contactId', i) as string;\n\n\t\t\t\t\t\tconst method: { [key: string]: IHttpRequestMethods } = {\n\t\t\t\t\t\t\tadd: 'POST',\n\t\t\t\t\t\t\tremove: 'DELETE',\n\t\t\t\t\t\t\texist: 'GET',\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tconst endpoint = `/list/${listId}/contact/${contactId}`;\n\n\t\t\t\t\t\tif (operation === 'exist') {\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tawait autopilotApiRequest.call(this, method[operation], endpoint);\n\t\t\t\t\t\t\t\tresponseData = { exist: true };\n\t\t\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t\t\tresponseData = { exist: false };\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (operation === 'add' || operation === 'remove') {\n\t\t\t\t\t\t\tresponseData = await autopilotApiRequest.call(this, method[operation], endpoint);\n\t\t\t\t\t\t\tresponseData.success = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (operation === 'getAll') {\n\t\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', i);\n\n\t\t\t\t\t\tconst listId = this.getNodeParameter('listId', i) as string;\n\n\t\t\t\t\t\tif (!returnAll) {\n\t\t\t\t\t\t\tqs.limit = this.getNodeParameter('limit', i);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresponseData = await autopilotApiRequestAllItems.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'contacts',\n\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t`/list/${listId}/contacts`,\n\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tif (!returnAll) {\n\t\t\t\t\t\t\tresponseData = responseData.splice(0, qs.limit);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (resource === 'list') {\n\t\t\t\t\tif (operation === 'create') {\n\t\t\t\t\t\tconst name = this.getNodeParameter('name', i) as string;\n\n\t\t\t\t\t\tconst body: IDataObject = {\n\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tresponseData = await autopilotApiRequest.call(this, 'POST', '/list', body);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (operation === 'getAll') {\n\t\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', i);\n\n\t\t\t\t\t\tif (!returnAll) {\n\t\t\t\t\t\t\tqs.limit = this.getNodeParameter('limit', i);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresponseData = await autopilotApiRequest.call(this, 'GET', '/lists');\n\n\t\t\t\t\t\tresponseData = responseData.lists;\n\n\t\t\t\t\t\tif (!returnAll) {\n\t\t\t\t\t\t\tresponseData = responseData.splice(0, qs.limit);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t);\n\t\t\t\treturnData.push(...executionData);\n\t\t\t} catch (error) {\n\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\tconst exectionErrorWithMetaData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t[{ json: { error: error.message } }],\n\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t);\n\t\t\t\t\tresponseData.push(...exectionErrorWithMetaData);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\t\treturn [returnData as INodeExecutionData[]];\n\t}\n}\n"],"mappings":"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","names":[]}