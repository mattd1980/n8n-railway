{"version":3,"sources":["../../../../nodes/Switch/V3/SwitchV3.node.ts"],"sourcesContent":["import set from 'lodash/set';\nimport type {\n\tIDataObject,\n\tIExecuteFunctions,\n\tILoadOptionsFunctions,\n\tINodeExecutionData,\n\tINodeParameters,\n\tINodePropertyOptions,\n\tINodeType,\n\tINodeTypeBaseDescription,\n\tINodeTypeDescription,\n} from 'n8n-workflow';\nimport { ApplicationError, NodeConnectionTypes, NodeOperationError } from 'n8n-workflow';\n\nimport { capitalize } from '@utils/utilities';\n\nimport { ENABLE_LESS_STRICT_TYPE_VALIDATION } from '../../../utils/constants';\nimport { looseTypeValidationProperty } from '../../../utils/descriptions';\nimport { getTypeValidationParameter, getTypeValidationStrictness } from '../../If/V2/utils';\n\nconst configuredOutputs = (parameters: INodeParameters) => {\n\tconst mode = parameters.mode as string;\n\n\tif (mode === 'expression') {\n\t\treturn Array.from({ length: parameters.numberOutputs as number }, (_, i) => ({\n\t\t\ttype: 'main',\n\t\t\tdisplayName: i.toString(),\n\t\t}));\n\t} else {\n\t\tconst rules = ((parameters.rules as IDataObject)?.values as IDataObject[]) ?? [];\n\t\tconst ruleOutputs = rules.map((rule, index) => {\n\t\t\treturn {\n\t\t\t\ttype: 'main',\n\t\t\t\tdisplayName: rule.outputKey || index.toString(),\n\t\t\t};\n\t\t});\n\t\tif ((parameters.options as IDataObject)?.fallbackOutput === 'extra') {\n\t\t\tconst renameFallbackOutput = (parameters.options as IDataObject)?.renameFallbackOutput;\n\t\t\truleOutputs.push({\n\t\t\t\ttype: 'main',\n\t\t\t\tdisplayName: renameFallbackOutput || 'Fallback',\n\t\t\t});\n\t\t}\n\t\treturn ruleOutputs;\n\t}\n};\n\nexport class SwitchV3 implements INodeType {\n\tdescription: INodeTypeDescription;\n\n\tconstructor(baseDescription: INodeTypeBaseDescription) {\n\t\tthis.description = {\n\t\t\t...baseDescription,\n\t\t\tsubtitle: `=mode: {{(${capitalize})($parameter[\"mode\"])}}`,\n\t\t\tversion: [3, 3.1, 3.2],\n\t\t\tdefaults: {\n\t\t\t\tname: 'Switch',\n\t\t\t\tcolor: '#506000',\n\t\t\t},\n\t\t\tinputs: [NodeConnectionTypes.Main],\n\t\t\toutputs: `={{(${configuredOutputs})($parameter)}}`,\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'Mode',\n\t\t\t\t\tname: 'mode',\n\t\t\t\t\ttype: 'options',\n\t\t\t\t\tnoDataExpression: true,\n\t\t\t\t\toptions: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'Rules',\n\t\t\t\t\t\t\tvalue: 'rules',\n\t\t\t\t\t\t\tdescription: 'Build a matching rule for each output',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'Expression',\n\t\t\t\t\t\t\tvalue: 'expression',\n\t\t\t\t\t\t\tdescription: 'Write an expression to return the output index',\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t\tdefault: 'rules',\n\t\t\t\t\tdescription: 'How data should be routed',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'Number of Outputs',\n\t\t\t\t\tname: 'numberOutputs',\n\t\t\t\t\ttype: 'number',\n\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\tmode: ['expression'],\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tdefault: 4,\n\t\t\t\t\tdescription: 'How many outputs to create',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'Output Index',\n\t\t\t\t\tname: 'output',\n\t\t\t\t\ttype: 'number',\n\t\t\t\t\tvalidateType: 'number',\n\t\t\t\t\thint: 'The index to route the item to, starts at 0',\n\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\tmode: ['expression'],\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t// eslint-disable-next-line n8n-nodes-base/node-param-default-wrong-for-number\n\t\t\t\t\tdefault: '={{}}',\n\t\t\t\t\tdescription:\n\t\t\t\t\t\t'The output index to send the input item to. Use an expression to calculate which input item should be routed to which output. The expression must return a number.',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'Routing Rules',\n\t\t\t\t\tname: 'rules',\n\t\t\t\t\tplaceholder: 'Add Routing Rule',\n\t\t\t\t\ttype: 'fixedCollection',\n\t\t\t\t\ttypeOptions: {\n\t\t\t\t\t\tmultipleValues: true,\n\t\t\t\t\t\tsortable: true,\n\t\t\t\t\t},\n\t\t\t\t\tdefault: {\n\t\t\t\t\t\tvalues: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tconditions: {\n\t\t\t\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\t\t\t\tcaseSensitive: true,\n\t\t\t\t\t\t\t\t\t\tleftValue: '',\n\t\t\t\t\t\t\t\t\t\ttypeValidation: 'strict',\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tconditions: [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tleftValue: '',\n\t\t\t\t\t\t\t\t\t\t\trightValue: '',\n\t\t\t\t\t\t\t\t\t\t\toperator: {\n\t\t\t\t\t\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\t\t\t\t\t\toperation: 'equals',\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\tcombinator: 'and',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\tmode: ['rules'],\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\toptions: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'values',\n\t\t\t\t\t\t\tdisplayName: 'Values',\n\t\t\t\t\t\t\tvalues: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tdisplayName: 'Conditions',\n\t\t\t\t\t\t\t\t\tname: 'conditions',\n\t\t\t\t\t\t\t\t\tplaceholder: 'Add Condition',\n\t\t\t\t\t\t\t\t\ttype: 'filter',\n\t\t\t\t\t\t\t\t\tdefault: {},\n\t\t\t\t\t\t\t\t\ttypeOptions: {\n\t\t\t\t\t\t\t\t\t\tmultipleValues: false,\n\t\t\t\t\t\t\t\t\t\tfilter: {\n\t\t\t\t\t\t\t\t\t\t\tcaseSensitive: '={{!$parameter.options.ignoreCase}}',\n\t\t\t\t\t\t\t\t\t\t\ttypeValidation: getTypeValidationStrictness(3.1),\n\t\t\t\t\t\t\t\t\t\t\tversion: '={{ $nodeVersion >= 3.2 ? 2 : 1 }}',\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tdisplayName: 'Rename Output',\n\t\t\t\t\t\t\t\t\tname: 'renameOutput',\n\t\t\t\t\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\t\t\t\t\tdefault: false,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tdisplayName: 'Output Name',\n\t\t\t\t\t\t\t\t\tname: 'outputKey',\n\t\t\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\t\t\t\tdescription: 'The label of output to which to send data to if rule matches',\n\t\t\t\t\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\t\t\t\t\trenameOutput: [true],\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t...looseTypeValidationProperty,\n\t\t\t\t\tdefault: false,\n\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\t'@version': [{ _cnd: { gte: 3.1 } }],\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'Options',\n\t\t\t\t\tname: 'options',\n\t\t\t\t\ttype: 'collection',\n\t\t\t\t\tplaceholder: 'Add option',\n\t\t\t\t\tdefault: {},\n\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\tmode: ['rules'],\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\toptions: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// eslint-disable-next-line n8n-nodes-base/node-param-display-name-wrong-for-dynamic-options\n\t\t\t\t\t\t\tdisplayName: 'Fallback Output',\n\t\t\t\t\t\t\tname: 'fallbackOutput',\n\t\t\t\t\t\t\ttype: 'options',\n\t\t\t\t\t\t\ttypeOptions: {\n\t\t\t\t\t\t\t\tloadOptionsDependsOn: ['rules.values', '/rules', '/rules.values'],\n\t\t\t\t\t\t\t\tloadOptionsMethod: 'getFallbackOutputOptions',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tdefault: 'none',\n\t\t\t\t\t\t\t// eslint-disable-next-line n8n-nodes-base/node-param-description-wrong-for-dynamic-options\n\t\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t\t'If no rule matches the item will be sent to this output, by default they will be ignored',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tdisplayName: 'Ignore Case',\n\t\t\t\t\t\t\tdescription: 'Whether to ignore letter case when evaluating conditions',\n\t\t\t\t\t\t\tname: 'ignoreCase',\n\t\t\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\t\t\tdefault: true,\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t...looseTypeValidationProperty,\n\t\t\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\t\t\t'@version': [{ _cnd: { lt: 3.1 } }],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tdisplayName: 'Rename Fallback Output',\n\t\t\t\t\t\t\tname: 'renameFallbackOutput',\n\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\tplaceholder: 'e.g. Fallback',\n\t\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\t\t\tfallbackOutput: ['extra'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// eslint-disable-next-line n8n-nodes-base/node-param-display-name-miscased\n\t\t\t\t\t\t\tdisplayName: 'Send data to all matching outputs',\n\t\t\t\t\t\t\tname: 'allMatchingOutputs',\n\t\t\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\t\t\tdefault: false,\n\t\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t\t'Whether to send data to all outputs meeting conditions (and not just the first one)',\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t],\n\t\t};\n\t}\n\n\tmethods = {\n\t\tloadOptions: {\n\t\t\tasync getFallbackOutputOptions(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst rules = (this.getCurrentNodeParameter('rules.values') as INodeParameters[]) ?? [];\n\n\t\t\t\tconst outputOptions: INodePropertyOptions[] = [\n\t\t\t\t\t{\n\t\t\t\t\t\t// eslint-disable-next-line n8n-nodes-base/node-param-display-name-miscased\n\t\t\t\t\t\tname: 'None (default)',\n\t\t\t\t\t\tvalue: 'none',\n\t\t\t\t\t\tdescription: 'Items will be ignored',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Extra Output',\n\t\t\t\t\t\tvalue: 'extra',\n\t\t\t\t\t\tdescription: 'Items will be sent to the extra, separate, output',\n\t\t\t\t\t},\n\t\t\t\t];\n\n\t\t\t\tfor (const [index, rule] of rules.entries()) {\n\t\t\t\t\toutputOptions.push({\n\t\t\t\t\t\tname: `Output ${rule.outputKey || index}`,\n\t\t\t\t\t\tvalue: index,\n\t\t\t\t\t\tdescription: `Items will be sent to the same output as when matched rule ${index + 1}`,\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\treturn outputOptions;\n\t\t\t},\n\t\t},\n\t};\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t\tlet returnData: INodeExecutionData[][] = [];\n\n\t\tconst items = this.getInputData();\n\t\tconst mode = this.getNodeParameter('mode', 0) as string;\n\n\t\tconst checkIndexRange = (returnDataLength: number, index: number, itemIndex = 0) => {\n\t\t\tif (Number(index) === returnDataLength) {\n\t\t\t\tthrow new NodeOperationError(this.getNode(), `The ouput ${index} is not allowed. `, {\n\t\t\t\t\titemIndex,\n\t\t\t\t\tdescription: `Output indexes are zero based, if you want to use the extra output use ${\n\t\t\t\t\t\tindex - 1\n\t\t\t\t\t}`,\n\t\t\t\t});\n\t\t\t}\n\t\t\tif (index < 0 || index > returnDataLength) {\n\t\t\t\tthrow new NodeOperationError(this.getNode(), `The ouput ${index} is not allowed`, {\n\t\t\t\t\titemIndex,\n\t\t\t\t\tdescription: `It has to be between 0 and ${returnDataLength - 1}`,\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\n\t\titemLoop: for (let itemIndex = 0; itemIndex < items.length; itemIndex++) {\n\t\t\ttry {\n\t\t\t\tconst item = items[itemIndex];\n\n\t\t\t\titem.pairedItem = { item: itemIndex };\n\n\t\t\t\tif (mode === 'expression') {\n\t\t\t\t\tconst numberOutputs = this.getNodeParameter('numberOutputs', itemIndex) as number;\n\t\t\t\t\tif (itemIndex === 0) {\n\t\t\t\t\t\treturnData = new Array(numberOutputs).fill(0).map(() => []);\n\t\t\t\t\t}\n\t\t\t\t\tconst outputIndex = this.getNodeParameter('output', itemIndex) as number;\n\t\t\t\t\tcheckIndexRange(returnData.length, outputIndex, itemIndex);\n\n\t\t\t\t\treturnData[outputIndex].push(item);\n\t\t\t\t} else if (mode === 'rules') {\n\t\t\t\t\tconst rules = this.getNodeParameter('rules.values', itemIndex, []) as INodeParameters[];\n\t\t\t\t\tif (!rules.length) continue;\n\t\t\t\t\tconst options = this.getNodeParameter('options', itemIndex, {});\n\t\t\t\t\tconst fallbackOutput = options.fallbackOutput;\n\n\t\t\t\t\tif (itemIndex === 0) {\n\t\t\t\t\t\treturnData = new Array(rules.length).fill(0).map(() => []);\n\n\t\t\t\t\t\tif (fallbackOutput === 'extra') {\n\t\t\t\t\t\t\treturnData.push([]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tlet matchFound = false;\n\t\t\t\t\tfor (const [ruleIndex, rule] of rules.entries()) {\n\t\t\t\t\t\tlet conditionPass;\n\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tconditionPass = this.getNodeParameter(\n\t\t\t\t\t\t\t\t`rules.values[${ruleIndex}].conditions`,\n\t\t\t\t\t\t\t\titemIndex,\n\t\t\t\t\t\t\t\tfalse,\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\textractValue: true,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t) as boolean;\n\t\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t!getTypeValidationParameter(3.1)(\n\t\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t\titemIndex,\n\t\t\t\t\t\t\t\t\toptions.looseTypeValidation as boolean,\n\t\t\t\t\t\t\t\t) &&\n\t\t\t\t\t\t\t\t!error.description\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\terror.description = ENABLE_LESS_STRICT_TYPE_VALIDATION;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tset(error, 'context.itemIndex', itemIndex);\n\t\t\t\t\t\t\tset(error, 'node', this.getNode());\n\t\t\t\t\t\t\tthrow error;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (conditionPass) {\n\t\t\t\t\t\t\tmatchFound = true;\n\t\t\t\t\t\t\tcheckIndexRange(returnData.length, rule.output as number, itemIndex);\n\t\t\t\t\t\t\treturnData[ruleIndex].push(item);\n\n\t\t\t\t\t\t\tif (!options.allMatchingOutputs) {\n\t\t\t\t\t\t\t\tcontinue itemLoop;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (fallbackOutput !== undefined && fallbackOutput !== 'none' && !matchFound) {\n\t\t\t\t\t\tif (fallbackOutput === 'extra') {\n\t\t\t\t\t\t\treturnData[returnData.length - 1].push(item);\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcheckIndexRange(returnData.length, fallbackOutput as number, itemIndex);\n\t\t\t\t\t\treturnData[fallbackOutput as number].push(item);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\treturnData[0].push({ json: { error: error.message } });\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (error instanceof NodeOperationError) {\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\n\t\t\t\tif (error instanceof ApplicationError) {\n\t\t\t\t\tset(error, 'context.itemIndex', itemIndex);\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\n\t\t\t\tthrow new NodeOperationError(this.getNode(), error, {\n\t\t\t\t\titemIndex,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (!returnData.length) return [[]];\n\n\t\treturn returnData;\n\t}\n}\n"],"mappings":"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","names":["set"]}