{"version":3,"sources":["../../../../nodes/Switch/V1/SwitchV1.node.ts"],"sourcesContent":["import type {\n\tIExecuteFunctions,\n\tINodeExecutionData,\n\tINodeParameters,\n\tINodeType,\n\tINodeTypeBaseDescription,\n\tINodeTypeDescription,\n\tNodeParameterValue,\n} from 'n8n-workflow';\nimport { NodeConnectionTypes, NodeOperationError } from 'n8n-workflow';\n\nexport class SwitchV1 implements INodeType {\n\tdescription: INodeTypeDescription;\n\n\tconstructor(baseDescription: INodeTypeBaseDescription) {\n\t\tthis.description = {\n\t\t\t...baseDescription,\n\t\t\tversion: [1],\n\t\t\tdefaults: {\n\t\t\t\tname: 'Switch',\n\t\t\t\tcolor: '#506000',\n\t\t\t},\n\t\t\tinputs: [NodeConnectionTypes.Main],\n\t\t\toutputs: [\n\t\t\t\tNodeConnectionTypes.Main,\n\t\t\t\tNodeConnectionTypes.Main,\n\t\t\t\tNodeConnectionTypes.Main,\n\t\t\t\tNodeConnectionTypes.Main,\n\t\t\t],\n\t\t\toutputNames: ['0', '1', '2', '3'],\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'Mode',\n\t\t\t\t\tname: 'mode',\n\t\t\t\t\ttype: 'options',\n\t\t\t\t\toptions: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'Expression',\n\t\t\t\t\t\t\tvalue: 'expression',\n\t\t\t\t\t\t\tdescription: 'Expression decides how to route data',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'Rules',\n\t\t\t\t\t\t\tvalue: 'rules',\n\t\t\t\t\t\t\tdescription: 'Rules decide how to route data',\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t\tdefault: 'rules',\n\t\t\t\t\tdescription: 'How data should be routed',\n\t\t\t\t},\n\n\t\t\t\t// ----------------------------------\n\t\t\t\t//         mode:expression\n\t\t\t\t// ----------------------------------\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'Output',\n\t\t\t\t\tname: 'output',\n\t\t\t\t\ttype: 'number',\n\t\t\t\t\ttypeOptions: {\n\t\t\t\t\t\tminValue: 0,\n\t\t\t\t\t\tmaxValue: 3,\n\t\t\t\t\t},\n\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\tmode: ['expression'],\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tdefault: 0,\n\t\t\t\t\tdescription: 'The index of output to which to send data to',\n\t\t\t\t},\n\n\t\t\t\t// ----------------------------------\n\t\t\t\t//         mode:rules\n\t\t\t\t// ----------------------------------\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'Data Type',\n\t\t\t\t\tname: 'dataType',\n\t\t\t\t\ttype: 'options',\n\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\tmode: ['rules'],\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\toptions: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'Boolean',\n\t\t\t\t\t\t\tvalue: 'boolean',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'Date & Time',\n\t\t\t\t\t\t\tvalue: 'dateTime',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'Number',\n\t\t\t\t\t\t\tvalue: 'number',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'String',\n\t\t\t\t\t\t\tvalue: 'string',\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t\tdefault: 'number',\n\t\t\t\t\tdescription: 'The type of data to route on',\n\t\t\t\t},\n\n\t\t\t\t// ----------------------------------\n\t\t\t\t//         dataType:boolean\n\t\t\t\t// ----------------------------------\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'Value 1',\n\t\t\t\t\tname: 'value1',\n\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\tdataType: ['boolean'],\n\t\t\t\t\t\t\tmode: ['rules'],\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tdefault: false,\n\t\t\t\t\t// eslint-disable-next-line n8n-nodes-base/node-param-description-boolean-without-whether\n\t\t\t\t\tdescription: 'The value to compare with the first one',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'Routing Rules',\n\t\t\t\t\tname: 'rules',\n\t\t\t\t\tplaceholder: 'Add Routing Rule',\n\t\t\t\t\ttype: 'fixedCollection',\n\t\t\t\t\ttypeOptions: {\n\t\t\t\t\t\tmultipleValues: true,\n\t\t\t\t\t},\n\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\tdataType: ['boolean'],\n\t\t\t\t\t\t\tmode: ['rules'],\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tdefault: {},\n\t\t\t\t\toptions: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'rules',\n\t\t\t\t\t\t\tdisplayName: 'Boolean',\n\t\t\t\t\t\t\tvalues: [\n\t\t\t\t\t\t\t\t// eslint-disable-next-line n8n-nodes-base/node-param-operation-without-no-data-expression\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tdisplayName: 'Operation',\n\t\t\t\t\t\t\t\t\tname: 'operation',\n\t\t\t\t\t\t\t\t\ttype: 'options',\n\t\t\t\t\t\t\t\t\toptions: [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tname: 'Equal',\n\t\t\t\t\t\t\t\t\t\t\tvalue: 'equal',\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tname: 'Not Equal',\n\t\t\t\t\t\t\t\t\t\t\tvalue: 'notEqual',\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\tdefault: 'equal',\n\t\t\t\t\t\t\t\t\tdescription: 'Operation to decide where the data should be mapped to',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tdisplayName: 'Value 2',\n\t\t\t\t\t\t\t\t\tname: 'value2',\n\t\t\t\t\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\t\t\t\t\tdefault: false,\n\t\t\t\t\t\t\t\t\t// eslint-disable-next-line n8n-nodes-base/node-param-description-boolean-without-whether\n\t\t\t\t\t\t\t\t\tdescription: 'The value to compare with the first one',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tdisplayName: 'Output',\n\t\t\t\t\t\t\t\t\tname: 'output',\n\t\t\t\t\t\t\t\t\ttype: 'number',\n\t\t\t\t\t\t\t\t\ttypeOptions: {\n\t\t\t\t\t\t\t\t\t\tminValue: 0,\n\t\t\t\t\t\t\t\t\t\tmaxValue: 3,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tdefault: 0,\n\t\t\t\t\t\t\t\t\tdescription: 'The index of output to which to send data to if rule matches',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\n\t\t\t\t// ----------------------------------\n\t\t\t\t//         dataType:dateTime\n\t\t\t\t// ----------------------------------\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'Value 1',\n\t\t\t\t\tname: 'value1',\n\t\t\t\t\ttype: 'dateTime',\n\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\tdataType: ['dateTime'],\n\t\t\t\t\t\t\tmode: ['rules'],\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tdefault: '',\n\t\t\t\t\tdescription: 'The value to compare with the second one',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'Routing Rules',\n\t\t\t\t\tname: 'rules',\n\t\t\t\t\tplaceholder: 'Add Routing Rule',\n\t\t\t\t\ttype: 'fixedCollection',\n\t\t\t\t\ttypeOptions: {\n\t\t\t\t\t\tmultipleValues: true,\n\t\t\t\t\t},\n\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\tdataType: ['dateTime'],\n\t\t\t\t\t\t\tmode: ['rules'],\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tdefault: {},\n\t\t\t\t\toptions: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'rules',\n\t\t\t\t\t\t\tdisplayName: 'Dates',\n\t\t\t\t\t\t\tvalues: [\n\t\t\t\t\t\t\t\t// eslint-disable-next-line n8n-nodes-base/node-param-operation-without-no-data-expression\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tdisplayName: 'Operation',\n\t\t\t\t\t\t\t\t\tname: 'operation',\n\t\t\t\t\t\t\t\t\ttype: 'options',\n\t\t\t\t\t\t\t\t\toptions: [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tname: 'Occurred After',\n\t\t\t\t\t\t\t\t\t\t\tvalue: 'after',\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tname: 'Occurred Before',\n\t\t\t\t\t\t\t\t\t\t\tvalue: 'before',\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\tdefault: 'after',\n\t\t\t\t\t\t\t\t\tdescription: 'Operation to decide where the data should be mapped to',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tdisplayName: 'Value 2',\n\t\t\t\t\t\t\t\t\tname: 'value2',\n\t\t\t\t\t\t\t\t\ttype: 'dateTime',\n\t\t\t\t\t\t\t\t\tdefault: 0,\n\t\t\t\t\t\t\t\t\tdescription: 'The value to compare with the first one',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tdisplayName: 'Output',\n\t\t\t\t\t\t\t\t\tname: 'output',\n\t\t\t\t\t\t\t\t\ttype: 'number',\n\t\t\t\t\t\t\t\t\ttypeOptions: {\n\t\t\t\t\t\t\t\t\t\tminValue: 0,\n\t\t\t\t\t\t\t\t\t\tmaxValue: 3,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tdefault: 0,\n\t\t\t\t\t\t\t\t\tdescription: 'The index of output to which to send data to if rule matches',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\n\t\t\t\t// ----------------------------------\n\t\t\t\t//         dataType:number\n\t\t\t\t// ----------------------------------\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'Value 1',\n\t\t\t\t\tname: 'value1',\n\t\t\t\t\ttype: 'number',\n\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\tdataType: ['number'],\n\t\t\t\t\t\t\tmode: ['rules'],\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tdefault: 0,\n\t\t\t\t\tdescription: 'The value to compare with the second one',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'Routing Rules',\n\t\t\t\t\tname: 'rules',\n\t\t\t\t\tplaceholder: 'Add Routing Rule',\n\t\t\t\t\ttype: 'fixedCollection',\n\t\t\t\t\ttypeOptions: {\n\t\t\t\t\t\tmultipleValues: true,\n\t\t\t\t\t},\n\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\tdataType: ['number'],\n\t\t\t\t\t\t\tmode: ['rules'],\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tdefault: {},\n\t\t\t\t\toptions: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'rules',\n\t\t\t\t\t\t\tdisplayName: 'Numbers',\n\t\t\t\t\t\t\tvalues: [\n\t\t\t\t\t\t\t\t// eslint-disable-next-line n8n-nodes-base/node-param-operation-without-no-data-expression\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tdisplayName: 'Operation',\n\t\t\t\t\t\t\t\t\tname: 'operation',\n\t\t\t\t\t\t\t\t\ttype: 'options',\n\t\t\t\t\t\t\t\t\t// eslint-disable-next-line n8n-nodes-base/node-param-options-type-unsorted-items\n\t\t\t\t\t\t\t\t\toptions: [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tname: 'Smaller',\n\t\t\t\t\t\t\t\t\t\t\tvalue: 'smaller',\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tname: 'Smaller Equal',\n\t\t\t\t\t\t\t\t\t\t\tvalue: 'smallerEqual',\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tname: 'Equal',\n\t\t\t\t\t\t\t\t\t\t\tvalue: 'equal',\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tname: 'Not Equal',\n\t\t\t\t\t\t\t\t\t\t\tvalue: 'notEqual',\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tname: 'Larger',\n\t\t\t\t\t\t\t\t\t\t\tvalue: 'larger',\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tname: 'Larger Equal',\n\t\t\t\t\t\t\t\t\t\t\tvalue: 'largerEqual',\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\tdefault: 'smaller',\n\t\t\t\t\t\t\t\t\tdescription: 'Operation to decide where the data should be mapped to',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tdisplayName: 'Value 2',\n\t\t\t\t\t\t\t\t\tname: 'value2',\n\t\t\t\t\t\t\t\t\ttype: 'number',\n\t\t\t\t\t\t\t\t\tdefault: 0,\n\t\t\t\t\t\t\t\t\tdescription: 'The value to compare with the first one',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tdisplayName: 'Output',\n\t\t\t\t\t\t\t\t\tname: 'output',\n\t\t\t\t\t\t\t\t\ttype: 'number',\n\t\t\t\t\t\t\t\t\ttypeOptions: {\n\t\t\t\t\t\t\t\t\t\tminValue: 0,\n\t\t\t\t\t\t\t\t\t\tmaxValue: 3,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tdefault: 0,\n\t\t\t\t\t\t\t\t\tdescription: 'The index of output to which to send data to if rule matches',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\n\t\t\t\t// ----------------------------------\n\t\t\t\t//         dataType:string\n\t\t\t\t// ----------------------------------\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'Value 1',\n\t\t\t\t\tname: 'value1',\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\tdataType: ['string'],\n\t\t\t\t\t\t\tmode: ['rules'],\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tdefault: '',\n\t\t\t\t\tdescription: 'The value to compare with the second one',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'Routing Rules',\n\t\t\t\t\tname: 'rules',\n\t\t\t\t\tplaceholder: 'Add Routing Rule',\n\t\t\t\t\ttype: 'fixedCollection',\n\t\t\t\t\ttypeOptions: {\n\t\t\t\t\t\tmultipleValues: true,\n\t\t\t\t\t},\n\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\tdataType: ['string'],\n\t\t\t\t\t\t\tmode: ['rules'],\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tdefault: {},\n\t\t\t\t\toptions: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'rules',\n\t\t\t\t\t\t\tdisplayName: 'Strings',\n\t\t\t\t\t\t\tvalues: [\n\t\t\t\t\t\t\t\t// eslint-disable-next-line n8n-nodes-base/node-param-operation-without-no-data-expression\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tdisplayName: 'Operation',\n\t\t\t\t\t\t\t\t\tname: 'operation',\n\t\t\t\t\t\t\t\t\ttype: 'options',\n\t\t\t\t\t\t\t\t\t// eslint-disable-next-line n8n-nodes-base/node-param-options-type-unsorted-items\n\t\t\t\t\t\t\t\t\toptions: [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tname: 'Contains',\n\t\t\t\t\t\t\t\t\t\t\tvalue: 'contains',\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tname: 'Not Contains',\n\t\t\t\t\t\t\t\t\t\t\tvalue: 'notContains',\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tname: 'Ends With',\n\t\t\t\t\t\t\t\t\t\t\tvalue: 'endsWith',\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tname: 'Not Ends With',\n\t\t\t\t\t\t\t\t\t\t\tvalue: 'notEndsWith',\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tname: 'Equal',\n\t\t\t\t\t\t\t\t\t\t\tvalue: 'equal',\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tname: 'Not Equal',\n\t\t\t\t\t\t\t\t\t\t\tvalue: 'notEqual',\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tname: 'Regex Match',\n\t\t\t\t\t\t\t\t\t\t\tvalue: 'regex',\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tname: 'Regex Not Match',\n\t\t\t\t\t\t\t\t\t\t\tvalue: 'notRegex',\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tname: 'Starts With',\n\t\t\t\t\t\t\t\t\t\t\tvalue: 'startsWith',\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tname: 'Not Starts With',\n\t\t\t\t\t\t\t\t\t\t\tvalue: 'notStartsWith',\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\tdefault: 'equal',\n\t\t\t\t\t\t\t\t\tdescription: 'Operation to decide where the data should be mapped to',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tdisplayName: 'Value 2',\n\t\t\t\t\t\t\t\t\tname: 'value2',\n\t\t\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\t\t\t\t\thide: {\n\t\t\t\t\t\t\t\t\t\t\toperation: ['regex', 'notRegex'],\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\t\t\t\tdescription: 'The value to compare with the first one',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tdisplayName: 'Regex',\n\t\t\t\t\t\t\t\t\tname: 'value2',\n\t\t\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\t\t\t\t\toperation: ['regex', 'notRegex'],\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\t\t\t\tplaceholder: '/text/i',\n\t\t\t\t\t\t\t\t\tdescription: 'The regex which has to match',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tdisplayName: 'Output',\n\t\t\t\t\t\t\t\t\tname: 'output',\n\t\t\t\t\t\t\t\t\ttype: 'number',\n\t\t\t\t\t\t\t\t\ttypeOptions: {\n\t\t\t\t\t\t\t\t\t\tminValue: 0,\n\t\t\t\t\t\t\t\t\t\tmaxValue: 3,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tdefault: 0,\n\t\t\t\t\t\t\t\t\tdescription: 'The index of output to which to send data to if rule matches',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'Fallback Output',\n\t\t\t\t\tname: 'fallbackOutput',\n\t\t\t\t\ttype: 'options',\n\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\tmode: ['rules'],\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t// eslint-disable-next-line n8n-nodes-base/node-param-options-type-unsorted-items\n\t\t\t\t\toptions: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'None',\n\t\t\t\t\t\t\tvalue: -1,\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: '0',\n\t\t\t\t\t\t\tvalue: 0,\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: '1',\n\t\t\t\t\t\t\tvalue: 1,\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: '2',\n\t\t\t\t\t\t\tvalue: 2,\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: '3',\n\t\t\t\t\t\t\tvalue: 3,\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t\tdefault: -1,\n\t\t\t\t\tdescription: 'The output to which to route all items which do not match any of the rules',\n\t\t\t\t},\n\t\t\t],\n\t\t};\n\t}\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t\tconst returnData: INodeExecutionData[][] = [[], [], [], []];\n\n\t\tconst items = this.getInputData();\n\n\t\tlet compareOperationResult: boolean;\n\t\tlet item: INodeExecutionData;\n\t\tlet mode: string;\n\t\tlet outputIndex: number;\n\t\tlet ruleData: INodeParameters;\n\n\t\t// The compare operations\n\t\tconst compareOperationFunctions: {\n\t\t\t[key: string]: (value1: NodeParameterValue, value2: NodeParameterValue) => boolean;\n\t\t} = {\n\t\t\tafter: (value1: NodeParameterValue, value2: NodeParameterValue) =>\n\t\t\t\t(value1 || 0) > (value2 || 0),\n\t\t\tbefore: (value1: NodeParameterValue, value2: NodeParameterValue) =>\n\t\t\t\t(value1 || 0) < (value2 || 0),\n\t\t\tcontains: (value1: NodeParameterValue, value2: NodeParameterValue) =>\n\t\t\t\t(value1 || '').toString().includes((value2 || '').toString()),\n\t\t\tnotContains: (value1: NodeParameterValue, value2: NodeParameterValue) =>\n\t\t\t\t!(value1 || '').toString().includes((value2 || '').toString()),\n\t\t\tendsWith: (value1: NodeParameterValue, value2: NodeParameterValue) =>\n\t\t\t\t(value1 as string).endsWith(value2 as string),\n\t\t\tnotEndsWith: (value1: NodeParameterValue, value2: NodeParameterValue) =>\n\t\t\t\t!(value1 as string).endsWith(value2 as string),\n\t\t\tequal: (value1: NodeParameterValue, value2: NodeParameterValue) => value1 === value2,\n\t\t\tnotEqual: (value1: NodeParameterValue, value2: NodeParameterValue) => value1 !== value2,\n\t\t\tlarger: (value1: NodeParameterValue, value2: NodeParameterValue) =>\n\t\t\t\t(value1 || 0) > (value2 || 0),\n\t\t\tlargerEqual: (value1: NodeParameterValue, value2: NodeParameterValue) =>\n\t\t\t\t(value1 || 0) >= (value2 || 0),\n\t\t\tsmaller: (value1: NodeParameterValue, value2: NodeParameterValue) =>\n\t\t\t\t(value1 || 0) < (value2 || 0),\n\t\t\tsmallerEqual: (value1: NodeParameterValue, value2: NodeParameterValue) =>\n\t\t\t\t(value1 || 0) <= (value2 || 0),\n\t\t\tstartsWith: (value1: NodeParameterValue, value2: NodeParameterValue) =>\n\t\t\t\t(value1 as string).startsWith(value2 as string),\n\t\t\tnotStartsWith: (value1: NodeParameterValue, value2: NodeParameterValue) =>\n\t\t\t\t!(value1 as string).startsWith(value2 as string),\n\t\t\tregex: (value1: NodeParameterValue, value2: NodeParameterValue) => {\n\t\t\t\tconst regexMatch = (value2 || '').toString().match(new RegExp('^/(.*?)/([gimusy]*)$'));\n\n\t\t\t\tlet regex: RegExp;\n\t\t\t\tif (!regexMatch) {\n\t\t\t\t\tregex = new RegExp((value2 || '').toString());\n\t\t\t\t} else if (regexMatch.length === 1) {\n\t\t\t\t\tregex = new RegExp(regexMatch[1]);\n\t\t\t\t} else {\n\t\t\t\t\tregex = new RegExp(regexMatch[1], regexMatch[2]);\n\t\t\t\t}\n\n\t\t\t\treturn !!(value1 || '').toString().match(regex);\n\t\t\t},\n\t\t\tnotRegex: (value1: NodeParameterValue, value2: NodeParameterValue) => {\n\t\t\t\tconst regexMatch = (value2 || '').toString().match(new RegExp('^/(.*?)/([gimusy]*)$'));\n\n\t\t\t\tlet regex: RegExp;\n\t\t\t\tif (!regexMatch) {\n\t\t\t\t\tregex = new RegExp((value2 || '').toString());\n\t\t\t\t} else if (regexMatch.length === 1) {\n\t\t\t\t\tregex = new RegExp(regexMatch[1]);\n\t\t\t\t} else {\n\t\t\t\t\tregex = new RegExp(regexMatch[1], regexMatch[2]);\n\t\t\t\t}\n\n\t\t\t\treturn !(value1 || '').toString().match(regex);\n\t\t\t},\n\t\t};\n\n\t\t// Converts the input data of a dateTime into a number for easy compare\n\t\tconst convertDateTime = (value: NodeParameterValue): number => {\n\t\t\tlet returnValue: number | undefined = undefined;\n\t\t\tif (typeof value === 'string') {\n\t\t\t\treturnValue = new Date(value).getTime();\n\t\t\t} else if (typeof value === 'number') {\n\t\t\t\treturnValue = value;\n\t\t\t}\n\t\t\tif ((value as unknown as object) instanceof Date) {\n\t\t\t\treturnValue = (value as unknown as Date).getTime();\n\t\t\t}\n\n\t\t\tif (returnValue === undefined || isNaN(returnValue)) {\n\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t`The value \"${value}\" is not a valid DateTime.`,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\treturn returnValue;\n\t\t};\n\n\t\tconst checkIndexRange = (index: number) => {\n\t\t\tif (index < 0 || index >= returnData.length) {\n\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t`The ouput ${index} is not allowed. It has to be between 0 and ${returnData.length - 1}!`,\n\t\t\t\t);\n\t\t\t}\n\t\t};\n\n\t\t// Iterate over all items to check to which output they should be routed to\n\t\titemLoop: for (let itemIndex = 0; itemIndex < items.length; itemIndex++) {\n\t\t\ttry {\n\t\t\t\titem = items[itemIndex];\n\t\t\t\tmode = this.getNodeParameter('mode', itemIndex) as string;\n\n\t\t\t\tif (mode === 'expression') {\n\t\t\t\t\t// One expression decides how to route item\n\n\t\t\t\t\toutputIndex = this.getNodeParameter('output', itemIndex) as number;\n\t\t\t\t\tcheckIndexRange(outputIndex);\n\n\t\t\t\t\treturnData[outputIndex].push(item);\n\t\t\t\t} else if (mode === 'rules') {\n\t\t\t\t\t// Rules decide how to route item\n\n\t\t\t\t\tconst dataType = this.getNodeParameter('dataType', 0) as string;\n\n\t\t\t\t\tlet value1 = this.getNodeParameter('value1', itemIndex) as NodeParameterValue;\n\t\t\t\t\tif (dataType === 'dateTime') {\n\t\t\t\t\t\tvalue1 = convertDateTime(value1);\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (ruleData of this.getNodeParameter(\n\t\t\t\t\t\t'rules.rules',\n\t\t\t\t\t\titemIndex,\n\t\t\t\t\t\t[],\n\t\t\t\t\t) as INodeParameters[]) {\n\t\t\t\t\t\t// Check if the values passes\n\n\t\t\t\t\t\tlet value2 = ruleData.value2 as NodeParameterValue;\n\t\t\t\t\t\tif (dataType === 'dateTime') {\n\t\t\t\t\t\t\tvalue2 = convertDateTime(value2);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcompareOperationResult = compareOperationFunctions[ruleData.operation as string](\n\t\t\t\t\t\t\tvalue1,\n\t\t\t\t\t\t\tvalue2,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tif (compareOperationResult) {\n\t\t\t\t\t\t\t// If rule matches add it to the correct output and continue with next item\n\t\t\t\t\t\t\tcheckIndexRange(ruleData.output as number);\n\t\t\t\t\t\t\treturnData[ruleData.output as number].push(item);\n\t\t\t\t\t\t\tcontinue itemLoop;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Check if a fallback output got defined and route accordingly\n\t\t\t\t\toutputIndex = this.getNodeParameter('fallbackOutput', itemIndex) as number;\n\t\t\t\t\tif (outputIndex !== -1) {\n\t\t\t\t\t\tcheckIndexRange(outputIndex);\n\t\t\t\t\t\treturnData[outputIndex].push(item);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\treturnData[0].push({ json: { error: error.message } });\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\n\t\treturn returnData;\n\t}\n}\n"],"mappings":"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","names":[]}