{"version":3,"sources":["../../../nodes/Mautic/MauticTrigger.node.ts"],"sourcesContent":["import {\n\ttype IHookFunctions,\n\ttype IWebhookFunctions,\n\ttype IDataObject,\n\ttype ILoadOptionsFunctions,\n\ttype INodePropertyOptions,\n\ttype INodeType,\n\ttype INodeTypeDescription,\n\ttype IWebhookResponseData,\n\tNodeConnectionTypes,\n} from 'n8n-workflow';\nimport { parse as urlParse } from 'url';\n\nimport { mauticApiRequest } from './GenericFunctions';\n\nexport class MauticTrigger implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'Mautic Trigger',\n\t\tname: 'mauticTrigger',\n\t\ticon: 'file:mautic.svg',\n\t\tgroup: ['trigger'],\n\t\tversion: 1,\n\t\tdescription: 'Handle Mautic events via webhooks',\n\t\tdefaults: {\n\t\t\tname: 'Mautic Trigger',\n\t\t},\n\t\tinputs: [],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tcredentials: [\n\t\t\t{\n\t\t\t\tname: 'mauticApi',\n\t\t\t\trequired: true,\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tauthentication: ['credentials'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'mauticOAuth2Api',\n\t\t\t\trequired: true,\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tauthentication: ['oAuth2'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t\twebhooks: [\n\t\t\t{\n\t\t\t\tname: 'default',\n\t\t\t\thttpMethod: 'POST',\n\t\t\t\tresponseMode: 'onReceived',\n\t\t\t\tpath: 'webhook',\n\t\t\t},\n\t\t],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Authentication',\n\t\t\t\tname: 'authentication',\n\t\t\t\ttype: 'options',\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Credentials',\n\t\t\t\t\t\tvalue: 'credentials',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'OAuth2',\n\t\t\t\t\t\tvalue: 'oAuth2',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'credentials',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Event Names or IDs',\n\t\t\t\tname: 'events',\n\t\t\t\ttype: 'multiOptions',\n\t\t\t\tdescription:\n\t\t\t\t\t'Choose from the list, or specify IDs using an <a href=\"https://docs.n8n.io/code/expressions/\">expression</a>',\n\t\t\t\trequired: true,\n\t\t\t\ttypeOptions: {\n\t\t\t\t\tloadOptionsMethod: 'getEvents',\n\t\t\t\t},\n\t\t\t\tdefault: [],\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Events Order',\n\t\t\t\tname: 'eventsOrder',\n\t\t\t\ttype: 'options',\n\t\t\t\tdefault: 'ASC',\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'ASC',\n\t\t\t\t\t\tvalue: 'ASC',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'DESC',\n\t\t\t\t\t\tvalue: 'DESC',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdescription: 'Order direction for queued events in one webhook. Can be “DESC” or “ASC”.',\n\t\t\t},\n\t\t],\n\t};\n\n\tmethods = {\n\t\tloadOptions: {\n\t\t\t// Get all the events to display them to user so that they can\n\t\t\t// select them easily\n\t\t\tasync getEvents(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst returnData: INodePropertyOptions[] = [];\n\t\t\t\tconst { triggers } = await mauticApiRequest.call(this, 'GET', '/hooks/triggers');\n\t\t\t\tfor (const [key, value] of Object.entries(triggers as IDataObject)) {\n\t\t\t\t\tconst eventId = key;\n\t\t\t\t\tconst eventName = (value as IDataObject).label as string;\n\t\t\t\t\tconst eventDecription = (value as IDataObject).description as string;\n\t\t\t\t\treturnData.push({\n\t\t\t\t\t\tname: eventName,\n\t\t\t\t\t\tvalue: eventId,\n\t\t\t\t\t\tdescription: eventDecription,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn returnData;\n\t\t\t},\n\t\t},\n\t};\n\n\twebhookMethods = {\n\t\tdefault: {\n\t\t\tasync checkExists(this: IHookFunctions): Promise<boolean> {\n\t\t\t\tconst webhookData = this.getWorkflowStaticData('node');\n\t\t\t\tif (webhookData.webhookId === undefined) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tconst endpoint = `/hooks/${webhookData.webhookId}`;\n\t\t\t\ttry {\n\t\t\t\t\tawait mauticApiRequest.call(this, 'GET', endpoint, {});\n\t\t\t\t} catch (error) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t},\n\t\t\tasync create(this: IHookFunctions): Promise<boolean> {\n\t\t\t\tconst webhookUrl = this.getNodeWebhookUrl('default') as string;\n\t\t\t\tconst webhookData = this.getWorkflowStaticData('node');\n\t\t\t\tconst events = this.getNodeParameter('events', 0) as string[];\n\t\t\t\tconst eventsOrder = this.getNodeParameter('eventsOrder', 0) as string;\n\t\t\t\tconst urlParts = urlParse(webhookUrl);\n\t\t\t\tconst body: IDataObject = {\n\t\t\t\t\tname: `n8n-webhook:${urlParts.path}`,\n\t\t\t\t\tdescription: 'n8n webhook',\n\t\t\t\t\twebhookUrl,\n\t\t\t\t\ttriggers: events,\n\t\t\t\t\teventsOrderbyDir: eventsOrder,\n\t\t\t\t\tisPublished: true,\n\t\t\t\t};\n\t\t\t\tconst { hook } = await mauticApiRequest.call(this, 'POST', '/hooks/new', body);\n\t\t\t\twebhookData.webhookId = hook.id;\n\t\t\t\treturn true;\n\t\t\t},\n\t\t\tasync delete(this: IHookFunctions): Promise<boolean> {\n\t\t\t\tconst webhookData = this.getWorkflowStaticData('node');\n\t\t\t\ttry {\n\t\t\t\t\tawait mauticApiRequest.call(this, 'DELETE', `/hooks/${webhookData.webhookId}/delete`);\n\t\t\t\t} catch (error) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tdelete webhookData.webhookId;\n\t\t\t\treturn true;\n\t\t\t},\n\t\t},\n\t};\n\n\tasync webhook(this: IWebhookFunctions): Promise<IWebhookResponseData> {\n\t\tconst req = this.getRequestObject();\n\t\treturn {\n\t\t\tworkflowData: [this.helpers.returnJsonArray(req.body as IDataObject)],\n\t\t};\n\t}\n}\n"],"mappings":"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","names":["urlParse"]}