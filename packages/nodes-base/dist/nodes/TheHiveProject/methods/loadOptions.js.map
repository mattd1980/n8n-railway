{"version":3,"sources":["../../../../nodes/TheHiveProject/methods/loadOptions.ts"],"sourcesContent":["import type { IDataObject, ILoadOptionsFunctions, INodePropertyOptions } from 'n8n-workflow';\n\nimport {\n\talertCommonFields,\n\tcaseCommonFields,\n\tobservableCommonFields,\n\ttaskCommonFields,\n} from '../helpers/constants';\nimport { theHiveApiRequest } from '../transport';\n\nexport async function loadResponders(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\tlet resource = this.getNodeParameter('resource') as string;\n\n\tlet resourceId = '';\n\n\tif (['case', 'alert', 'observable', 'log', 'task'].includes(resource)) {\n\t\tresourceId = this.getNodeParameter('id', '', { extractValue: true }) as string;\n\t} else {\n\t\tresourceId = this.getNodeParameter('id') as string;\n\t}\n\n\tswitch (resource) {\n\t\tcase 'observable':\n\t\t\tresource = 'case_artifact';\n\t\t\tbreak;\n\t\tcase 'task':\n\t\t\tresource = 'case_task';\n\t\t\tbreak;\n\t\tcase 'log':\n\t\t\tresource = 'case_task_log';\n\t\t\tbreak;\n\t}\n\n\tconst responders = await theHiveApiRequest.call(\n\t\tthis,\n\t\t'GET',\n\t\t`/connector/cortex/responder/${resource}/${resourceId}`,\n\t);\n\n\tconst returnData: INodePropertyOptions[] = [];\n\n\tfor (const responder of responders) {\n\t\treturnData.push({\n\t\t\tname: responder.name as string,\n\t\t\tvalue: responder.id,\n\t\t\tdescription: responder.description as string,\n\t\t});\n\t}\n\n\treturn returnData;\n}\n\nexport async function loadAnalyzers(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\tconst returnData: INodePropertyOptions[] = [];\n\n\tconst dataType = this.getNodeParameter('dataType') as string;\n\n\tconst requestResult = await theHiveApiRequest.call(\n\t\tthis,\n\t\t'GET',\n\t\t`/connector/cortex/analyzer/type/${dataType}`,\n\t);\n\n\tfor (const analyzer of requestResult) {\n\t\tfor (const cortexId of analyzer.cortexIds) {\n\t\t\treturnData.push({\n\t\t\t\tname: `[${cortexId}] ${analyzer.name}`,\n\t\t\t\tvalue: `${analyzer.id as string}::${cortexId as string}`,\n\t\t\t\tdescription: analyzer.description as string,\n\t\t\t});\n\t\t}\n\t}\n\n\treturn returnData;\n}\n\nexport async function loadCustomFields(\n\tthis: ILoadOptionsFunctions,\n): Promise<INodePropertyOptions[]> {\n\tconst requestResult = await theHiveApiRequest.call(this, 'GET', '/customField');\n\n\tconst returnData: INodePropertyOptions[] = [];\n\n\tfor (const field of requestResult) {\n\t\treturnData.push({\n\t\t\tname: `Custom Field: ${(field.displayName || field.name) as string}`,\n\t\t\tvalue: `customFields.${field.name}`,\n\t\t\t// description: `${field.type}: ${field.description}`,\n\t\t} as INodePropertyOptions);\n\t}\n\n\treturn returnData;\n}\n\nexport async function loadObservableTypes(\n\tthis: ILoadOptionsFunctions,\n): Promise<INodePropertyOptions[]> {\n\tconst returnData: INodePropertyOptions[] = [];\n\n\tconst body = {\n\t\tquery: [\n\t\t\t{\n\t\t\t\t_name: 'listObservableType',\n\t\t\t},\n\t\t],\n\t};\n\n\tconst response = await theHiveApiRequest.call(this, 'POST', '/v1/query', body);\n\n\tfor (const entry of response) {\n\t\treturnData.push({\n\t\t\tname: `${entry.name as string}${entry.isAttachment ? ' (attachment)' : ''}`,\n\t\t\tvalue: entry.name,\n\t\t});\n\t}\n\treturn returnData;\n}\nexport async function loadCaseAttachments(\n\tthis: ILoadOptionsFunctions,\n): Promise<INodePropertyOptions[]> {\n\tconst returnData: INodePropertyOptions[] = [];\n\tconst caseId = this.getNodeParameter('caseId', '', { extractValue: true }) as string;\n\n\tconst body = {\n\t\tquery: [\n\t\t\t{\n\t\t\t\t_name: 'getCase',\n\t\t\t\tidOrName: caseId,\n\t\t\t},\n\t\t\t{\n\t\t\t\t_name: 'attachments',\n\t\t\t},\n\t\t],\n\t};\n\n\tconst response = await theHiveApiRequest.call(this, 'POST', '/v1/query', body);\n\n\tfor (const entry of response) {\n\t\treturnData.push({\n\t\t\tname: entry.name as string,\n\t\t\tvalue: entry._id,\n\t\t\tdescription: `Content-Type: ${entry.contentType}`,\n\t\t});\n\t}\n\treturn returnData;\n}\n\nexport async function loadLogAttachments(\n\tthis: ILoadOptionsFunctions,\n): Promise<INodePropertyOptions[]> {\n\tconst returnData: INodePropertyOptions[] = [];\n\tconst logId = this.getNodeParameter('logId', '', { extractValue: true }) as string;\n\n\tconst body = {\n\t\tquery: [\n\t\t\t{\n\t\t\t\t_name: 'getLog',\n\t\t\t\tidOrName: logId,\n\t\t\t},\n\t\t],\n\t};\n\n\t// extract log object from array\n\tconst [response] = await theHiveApiRequest.call(this, 'POST', '/v1/query', body);\n\n\tfor (const entry of (response.attachments as IDataObject[]) || []) {\n\t\treturnData.push({\n\t\t\tname: entry.name as string,\n\t\t\tvalue: entry._id as string,\n\t\t\tdescription: `Content-Type: ${entry.contentType}`,\n\t\t});\n\t}\n\treturn returnData;\n}\n\nexport async function loadAlertStatus(\n\tthis: ILoadOptionsFunctions,\n): Promise<INodePropertyOptions[]> {\n\tconst returnData: INodePropertyOptions[] = [];\n\n\tconst body = {\n\t\tquery: [\n\t\t\t{\n\t\t\t\t_name: 'listAlertStatus',\n\t\t\t},\n\t\t],\n\t};\n\n\tconst response = await theHiveApiRequest.call(this, 'POST', '/v1/query', body);\n\n\tfor (const entry of response) {\n\t\treturnData.push({\n\t\t\tname: entry.value,\n\t\t\tvalue: entry.value,\n\t\t\tdescription: `Stage: ${entry.stage}`,\n\t\t});\n\t}\n\treturn returnData.sort((a, b) => a.name.localeCompare(b.name));\n}\n\nexport async function loadCaseStatus(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\tconst returnData: INodePropertyOptions[] = [];\n\n\tconst body = {\n\t\tquery: [\n\t\t\t{\n\t\t\t\t_name: 'listCaseStatus',\n\t\t\t},\n\t\t],\n\t};\n\n\tconst response = await theHiveApiRequest.call(this, 'POST', '/v1/query', body);\n\n\tfor (const entry of response) {\n\t\treturnData.push({\n\t\t\tname: entry.value,\n\t\t\tvalue: entry.value,\n\t\t\tdescription: `Stage: ${entry.stage}`,\n\t\t});\n\t}\n\treturn returnData.sort((a, b) => a.name.localeCompare(b.name));\n}\n\nexport async function loadCaseTemplate(\n\tthis: ILoadOptionsFunctions,\n): Promise<INodePropertyOptions[]> {\n\tconst returnData: INodePropertyOptions[] = [];\n\n\tconst body = {\n\t\tquery: [\n\t\t\t{\n\t\t\t\t_name: 'listCaseTemplate',\n\t\t\t},\n\t\t],\n\t};\n\n\tconst response = await theHiveApiRequest.call(this, 'POST', '/v1/query', body);\n\n\tfor (const entry of response) {\n\t\treturnData.push({\n\t\t\tname: entry.displayName || entry.name,\n\t\t\tvalue: entry.name,\n\t\t});\n\t}\n\treturn returnData;\n}\n\nexport async function loadUsers(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\tconst returnData: INodePropertyOptions[] = [];\n\n\tconst body = {\n\t\tquery: [\n\t\t\t{\n\t\t\t\t_name: 'listUser',\n\t\t\t},\n\t\t],\n\t};\n\n\tconst response = await theHiveApiRequest.call(this, 'POST', '/v1/query', body);\n\n\tfor (const entry of response) {\n\t\treturnData.push({\n\t\t\tname: entry.name,\n\t\t\tvalue: entry.login,\n\t\t});\n\t}\n\treturn returnData;\n}\n\nexport async function loadAlertFields(\n\tthis: ILoadOptionsFunctions,\n): Promise<INodePropertyOptions[]> {\n\tconst returnData: INodePropertyOptions[] = [];\n\n\tconst excludeFields = ['addTags', 'removeTags'];\n\n\tconst fields = alertCommonFields\n\t\t.filter((entry) => !excludeFields.includes(entry.id))\n\t\t.map((entry) => {\n\t\t\tconst field: INodePropertyOptions = {\n\t\t\t\tname: entry.displayName || entry.id,\n\t\t\t\tvalue: entry.id,\n\t\t\t};\n\n\t\t\treturn field;\n\t\t});\n\n\tconst customFields = await loadCustomFields.call(this);\n\n\treturnData.push(...fields, ...customFields);\n\treturn returnData;\n}\n\nexport async function loadCaseFields(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\tconst returnData: INodePropertyOptions[] = [];\n\n\tconst excludeFields = ['addTags', 'removeTags', 'taskRule', 'observableRule'];\n\n\tconst fields = caseCommonFields\n\t\t.filter((entry) => !excludeFields.includes(entry.id))\n\t\t.map((entry) => {\n\t\t\tconst field: INodePropertyOptions = {\n\t\t\t\tname: entry.displayName || entry.id,\n\t\t\t\tvalue: entry.id,\n\t\t\t};\n\n\t\t\treturn field;\n\t\t});\n\n\tconst customFields = await loadCustomFields.call(this);\n\n\treturnData.push(...fields, ...customFields);\n\treturn returnData;\n}\n\nexport async function loadObservableFields(\n\tthis: ILoadOptionsFunctions,\n): Promise<INodePropertyOptions[]> {\n\tconst returnData: INodePropertyOptions[] = [];\n\n\tconst excludeFields = ['addTags', 'removeTags', 'zipPassword'];\n\n\tconst fields = observableCommonFields\n\t\t.filter((entry) => !excludeFields.includes(entry.id))\n\t\t.map((entry) => {\n\t\t\tconst field: INodePropertyOptions = {\n\t\t\t\tname: entry.displayName || entry.id,\n\t\t\t\tvalue: entry.id,\n\t\t\t};\n\n\t\t\treturn field;\n\t\t});\n\n\treturnData.push(...fields);\n\treturn returnData;\n}\n\nexport async function loadTaskFields(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\tconst fields = taskCommonFields.map((entry) => {\n\t\tconst field: INodePropertyOptions = {\n\t\t\tname: entry.displayName || entry.id,\n\t\t\tvalue: entry.id,\n\t\t};\n\n\t\treturn field;\n\t});\n\n\treturn fields;\n}\n"],"mappings":"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","names":[]}