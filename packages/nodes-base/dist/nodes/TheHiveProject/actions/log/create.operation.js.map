{"version":3,"sources":["../../../../../nodes/TheHiveProject/actions/log/create.operation.ts"],"sourcesContent":["import type {\n\tIDataObject,\n\tIExecuteFunctions,\n\tINodeExecutionData,\n\tINodeProperties,\n} from 'n8n-workflow';\n\nimport { updateDisplayOptions, wrapData } from '@utils/utilities';\n\nimport { attachmentsUi, taskRLC } from '../../descriptions';\nimport { fixFieldType, prepareInputItem } from '../../helpers/utils';\nimport { theHiveApiRequest } from '../../transport';\n\nconst properties: INodeProperties[] = [\n\ttaskRLC,\n\t{\n\t\tdisplayName: 'Fields',\n\t\tname: 'logFields',\n\t\ttype: 'resourceMapper',\n\t\tdefault: {\n\t\t\tmappingMode: 'defineBelow',\n\t\t\tvalue: null,\n\t\t},\n\t\tnoDataExpression: true,\n\t\trequired: true,\n\t\ttypeOptions: {\n\t\t\tresourceMapper: {\n\t\t\t\tresourceMapperMethod: 'getLogFields',\n\t\t\t\tmode: 'add',\n\t\t\t\tvaluesLabel: 'Fields',\n\t\t\t},\n\t\t},\n\t},\n\tattachmentsUi,\n];\n\nconst displayOptions = {\n\tshow: {\n\t\tresource: ['log'],\n\t\toperation: ['create'],\n\t},\n};\n\nexport const description = updateDisplayOptions(displayOptions, properties);\n\nexport async function execute(\n\tthis: IExecuteFunctions,\n\ti: number,\n\titem: INodeExecutionData,\n): Promise<INodeExecutionData[]> {\n\tlet responseData: IDataObject | IDataObject[] = [];\n\tlet body: IDataObject = {};\n\n\tconst dataMode = this.getNodeParameter('logFields.mappingMode', i) as string;\n\tconst taskId = this.getNodeParameter('taskId', i, '', { extractValue: true }) as string;\n\n\tif (dataMode === 'autoMapInputData') {\n\t\tconst schema = this.getNodeParameter('logFields.schema', i) as IDataObject[];\n\t\tbody = prepareInputItem(item.json, schema, i);\n\t}\n\n\tif (dataMode === 'defineBelow') {\n\t\tconst logFields = this.getNodeParameter('logFields.value', i, []) as IDataObject;\n\t\tbody = logFields;\n\t}\n\n\tbody = fixFieldType(body);\n\n\tconst inputDataFields = (\n\t\tthis.getNodeParameter('attachmentsUi.values', i, []) as IDataObject[]\n\t).map((entry) => (entry.field as string).trim());\n\n\tif (inputDataFields.length) {\n\t\tconst binaries = [];\n\n\t\tfor (const inputDataField of inputDataFields) {\n\t\t\tconst binaryData = this.helpers.assertBinaryData(i, inputDataField);\n\t\t\tconst dataBuffer = await this.helpers.getBinaryDataBuffer(i, inputDataField);\n\n\t\t\tbinaries.push({\n\t\t\t\tvalue: dataBuffer,\n\t\t\t\toptions: {\n\t\t\t\t\tcontentType: binaryData.mimeType,\n\t\t\t\t\tfilename: binaryData.fileName,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\n\t\tresponseData = await theHiveApiRequest.call(\n\t\t\tthis,\n\t\t\t'POST',\n\t\t\t`/v1/task/${taskId}/log`,\n\t\t\tundefined,\n\t\t\tundefined,\n\t\t\tundefined,\n\t\t\t{\n\t\t\t\tHeaders: {\n\t\t\t\t\t'Content-Type': 'multipart/form-data',\n\t\t\t\t},\n\t\t\t\tformData: {\n\t\t\t\t\tattachments: binaries,\n\t\t\t\t\t_json: JSON.stringify(body),\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t} else {\n\t\tresponseData = await theHiveApiRequest.call(this, 'POST', `/v1/task/${taskId}/log`, body);\n\t}\n\n\tconst executionData = this.helpers.constructExecutionMetaData(wrapData(responseData), {\n\t\titemData: { item: i },\n\t});\n\n\treturn executionData;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA,uBAA+C;AAE/C,0BAAuC;AACvC,mBAA+C;AAC/C,uBAAkC;AAElC,MAAM,aAAgC;AAAA,EACrC;AAAA,EACA;AAAA,IACC,aAAa;AAAA,IACb,MAAM;AAAA,IACN,MAAM;AAAA,IACN,SAAS;AAAA,MACR,aAAa;AAAA,MACb,OAAO;AAAA,IACR;AAAA,IACA,kBAAkB;AAAA,IAClB,UAAU;AAAA,IACV,aAAa;AAAA,MACZ,gBAAgB;AAAA,QACf,sBAAsB;AAAA,QACtB,MAAM;AAAA,QACN,aAAa;AAAA,MACd;AAAA,IACD;AAAA,EACD;AAAA,EACA;AACD;AAEA,MAAM,iBAAiB;AAAA,EACtB,MAAM;AAAA,IACL,UAAU,CAAC,KAAK;AAAA,IAChB,WAAW,CAAC,QAAQ;AAAA,EACrB;AACD;AAEO,MAAM,kBAAc,uCAAqB,gBAAgB,UAAU;AAE1E,eAAsB,QAErB,GACA,MACgC;AAChC,MAAI,eAA4C,CAAC;AACjD,MAAI,OAAoB,CAAC;AAEzB,QAAM,WAAW,KAAK,iBAAiB,yBAAyB,CAAC;AACjE,QAAM,SAAS,KAAK,iBAAiB,UAAU,GAAG,IAAI,EAAE,cAAc,KAAK,CAAC;AAE5E,MAAI,aAAa,oBAAoB;AACpC,UAAM,SAAS,KAAK,iBAAiB,oBAAoB,CAAC;AAC1D,eAAO,+BAAiB,KAAK,MAAM,QAAQ,CAAC;AAAA,EAC7C;AAEA,MAAI,aAAa,eAAe;AAC/B,UAAM,YAAY,KAAK,iBAAiB,mBAAmB,GAAG,CAAC,CAAC;AAChE,WAAO;AAAA,EACR;AAEA,aAAO,2BAAa,IAAI;AAExB,QAAM,kBACL,KAAK,iBAAiB,wBAAwB,GAAG,CAAC,CAAC,EAClD,IAAI,CAAC,UAAW,MAAM,MAAiB,KAAK,CAAC;AAE/C,MAAI,gBAAgB,QAAQ;AAC3B,UAAM,WAAW,CAAC;AAElB,eAAW,kBAAkB,iBAAiB;AAC7C,YAAM,aAAa,KAAK,QAAQ,iBAAiB,GAAG,cAAc;AAClE,YAAM,aAAa,MAAM,KAAK,QAAQ,oBAAoB,GAAG,cAAc;AAE3E,eAAS,KAAK;AAAA,QACb,OAAO;AAAA,QACP,SAAS;AAAA,UACR,aAAa,WAAW;AAAA,UACxB,UAAU,WAAW;AAAA,QACtB;AAAA,MACD,CAAC;AAAA,IACF;AAEA,mBAAe,MAAM,mCAAkB;AAAA,MACtC;AAAA,MACA;AAAA,MACA,YAAY,MAAM;AAAA,MAClB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,QACC,SAAS;AAAA,UACR,gBAAgB;AAAA,QACjB;AAAA,QACA,UAAU;AAAA,UACT,aAAa;AAAA,UACb,OAAO,KAAK,UAAU,IAAI;AAAA,QAC3B;AAAA,MACD;AAAA,IACD;AAAA,EACD,OAAO;AACN,mBAAe,MAAM,mCAAkB,KAAK,MAAM,QAAQ,YAAY,MAAM,QAAQ,IAAI;AAAA,EACzF;AAEA,QAAM,gBAAgB,KAAK,QAAQ,+BAA2B,2BAAS,YAAY,GAAG;AAAA,IACrF,UAAU,EAAE,MAAM,EAAE;AAAA,EACrB,CAAC;AAED,SAAO;AACR;","names":[]}