{"version":3,"sources":["../../../../../nodes/TheHiveProject/actions/alert/executeResponder.operation.ts"],"sourcesContent":["import type {\n\tIDataObject,\n\tIExecuteFunctions,\n\tINodeExecutionData,\n\tINodeProperties,\n} from 'n8n-workflow';\n\nimport { updateDisplayOptions, wrapData } from '@utils/utilities';\n\nimport { alertRLC, responderOptions } from '../../descriptions';\nimport { theHiveApiRequest } from '../../transport';\n\nconst properties: INodeProperties[] = [{ ...alertRLC, name: 'id' }, responderOptions];\n\nconst displayOptions = {\n\tshow: {\n\t\tresource: ['alert'],\n\t\toperation: ['executeResponder'],\n\t},\n};\n\nexport const description = updateDisplayOptions(displayOptions, properties);\n\nexport async function execute(this: IExecuteFunctions, i: number): Promise<INodeExecutionData[]> {\n\tlet responseData: IDataObject | IDataObject[] = [];\n\n\tconst alertId = this.getNodeParameter('id', i, '', { extractValue: true }) as string;\n\tconst responderId = this.getNodeParameter('responder', i) as string;\n\tlet body: IDataObject;\n\tlet response;\n\tresponseData = [];\n\tbody = {\n\t\tresponderId,\n\t\tobjectId: alertId,\n\t\tobjectType: 'alert',\n\t};\n\tresponse = await theHiveApiRequest.call(this, 'POST', '/connector/cortex/action' as string, body);\n\tbody = {\n\t\tquery: [\n\t\t\t{\n\t\t\t\t_name: 'listAction',\n\t\t\t},\n\t\t\t{\n\t\t\t\t_name: 'filter',\n\t\t\t\t_and: [\n\t\t\t\t\t{\n\t\t\t\t\t\t_field: 'cortexId',\n\t\t\t\t\t\t_value: response.cortexId,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t_field: 'objectId',\n\t\t\t\t\t\t_value: response.objectId,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t_field: 'startDate',\n\t\t\t\t\t\t_value: response.startDate,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t],\n\t};\n\n\tconst qs: IDataObject = {};\n\n\tqs.name = 'log-actions';\n\n\tdo {\n\t\tresponse = await theHiveApiRequest.call(this, 'POST', '/v1/query', body, qs);\n\t} while (response.status === 'Waiting' || response.status === 'InProgress');\n\n\tresponseData = response;\n\n\tconst executionData = this.helpers.constructExecutionMetaData(wrapData(responseData), {\n\t\titemData: { item: i },\n\t});\n\n\treturn executionData;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA,uBAA+C;AAE/C,0BAA2C;AAC3C,uBAAkC;AAElC,MAAM,aAAgC,CAAC,EAAE,GAAG,8BAAU,MAAM,KAAK,GAAG,oCAAgB;AAEpF,MAAM,iBAAiB;AAAA,EACtB,MAAM;AAAA,IACL,UAAU,CAAC,OAAO;AAAA,IAClB,WAAW,CAAC,kBAAkB;AAAA,EAC/B;AACD;AAEO,MAAM,kBAAc,uCAAqB,gBAAgB,UAAU;AAE1E,eAAsB,QAAiC,GAA0C;AAChG,MAAI,eAA4C,CAAC;AAEjD,QAAM,UAAU,KAAK,iBAAiB,MAAM,GAAG,IAAI,EAAE,cAAc,KAAK,CAAC;AACzE,QAAM,cAAc,KAAK,iBAAiB,aAAa,CAAC;AACxD,MAAI;AACJ,MAAI;AACJ,iBAAe,CAAC;AAChB,SAAO;AAAA,IACN;AAAA,IACA,UAAU;AAAA,IACV,YAAY;AAAA,EACb;AACA,aAAW,MAAM,mCAAkB,KAAK,MAAM,QAAQ,4BAAsC,IAAI;AAChG,SAAO;AAAA,IACN,OAAO;AAAA,MACN;AAAA,QACC,OAAO;AAAA,MACR;AAAA,MACA;AAAA,QACC,OAAO;AAAA,QACP,MAAM;AAAA,UACL;AAAA,YACC,QAAQ;AAAA,YACR,QAAQ,SAAS;AAAA,UAClB;AAAA,UACA;AAAA,YACC,QAAQ;AAAA,YACR,QAAQ,SAAS;AAAA,UAClB;AAAA,UACA;AAAA,YACC,QAAQ;AAAA,YACR,QAAQ,SAAS;AAAA,UAClB;AAAA,QACD;AAAA,MACD;AAAA,IACD;AAAA,EACD;AAEA,QAAM,KAAkB,CAAC;AAEzB,KAAG,OAAO;AAEV,KAAG;AACF,eAAW,MAAM,mCAAkB,KAAK,MAAM,QAAQ,aAAa,MAAM,EAAE;AAAA,EAC5E,SAAS,SAAS,WAAW,aAAa,SAAS,WAAW;AAE9D,iBAAe;AAEf,QAAM,gBAAgB,KAAK,QAAQ,+BAA2B,2BAAS,YAAY,GAAG;AAAA,IACrF,UAAU,EAAE,MAAM,EAAE;AAAA,EACrB,CAAC;AAED,SAAO;AACR;","names":[]}