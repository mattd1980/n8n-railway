{"version":3,"sources":["../../../../../nodes/TheHiveProject/actions/observable/executeAnalyzer.operation.ts"],"sourcesContent":["import type {\n\tIDataObject,\n\tIExecuteFunctions,\n\tINodeExecutionData,\n\tINodeProperties,\n} from 'n8n-workflow';\n\nimport { updateDisplayOptions, wrapData } from '@utils/utilities';\n\nimport { observableRLC, observableTypeOptions } from '../../descriptions';\nimport { theHiveApiRequest } from '../../transport';\n\nconst properties: INodeProperties[] = [\n\tobservableRLC,\n\tobservableTypeOptions,\n\t{\n\t\tdisplayName: 'Analyzer Names or IDs',\n\t\tname: 'analyzers',\n\t\ttype: 'multiOptions',\n\t\tdescription:\n\t\t\t'Choose from the list, or specify IDs using an <a href=\"https://docs.n8n.io/code/expressions/\">expression</a>',\n\t\trequired: true,\n\t\tdefault: [],\n\t\ttypeOptions: {\n\t\t\tloadOptionsDependsOn: ['observableId.value', 'dataType'],\n\t\t\tloadOptionsMethod: 'loadAnalyzers',\n\t\t},\n\t\tdisplayOptions: {\n\t\t\thide: {\n\t\t\t\tid: [''],\n\t\t\t},\n\t\t},\n\t},\n];\n\nconst displayOptions = {\n\tshow: {\n\t\tresource: ['observable'],\n\t\toperation: ['executeAnalyzer'],\n\t},\n};\n\nexport const description = updateDisplayOptions(displayOptions, properties);\n\nexport async function execute(this: IExecuteFunctions, i: number): Promise<INodeExecutionData[]> {\n\tlet responseData: IDataObject = {};\n\n\tconst observableId = this.getNodeParameter('observableId', i, '', {\n\t\textractValue: true,\n\t}) as string;\n\n\tconst analyzers = (this.getNodeParameter('analyzers', i) as string[]).map((analyzer) => {\n\t\tconst parts = analyzer.split('::');\n\t\treturn {\n\t\t\tanalyzerId: parts[0],\n\t\t\tcortexId: parts[1],\n\t\t};\n\t});\n\tlet response: any;\n\tlet body: IDataObject;\n\n\tconst qs: IDataObject = {};\n\tfor (const analyzer of analyzers) {\n\t\tbody = {\n\t\t\t...analyzer,\n\t\t\tartifactId: observableId,\n\t\t};\n\t\t// execute the analyzer\n\t\tresponse = await theHiveApiRequest.call(\n\t\t\tthis,\n\t\t\t'POST',\n\t\t\t'/connector/cortex/job' as string,\n\t\t\tbody,\n\t\t\tqs,\n\t\t);\n\t\tconst jobId = response.id;\n\t\tqs.name = 'observable-jobs';\n\t\t// query the job result (including the report)\n\t\tdo {\n\t\t\tresponseData = await theHiveApiRequest.call(\n\t\t\t\tthis,\n\t\t\t\t'GET',\n\t\t\t\t`/connector/cortex/job/${jobId}`,\n\t\t\t\tbody,\n\t\t\t\tqs,\n\t\t\t);\n\t\t} while (responseData.status === 'Waiting' || responseData.status === 'InProgress');\n\t}\n\n\tconst executionData = this.helpers.constructExecutionMetaData(wrapData(responseData), {\n\t\titemData: { item: i },\n\t});\n\n\treturn executionData;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA,uBAA+C;AAE/C,0BAAqD;AACrD,uBAAkC;AAElC,MAAM,aAAgC;AAAA,EACrC;AAAA,EACA;AAAA,EACA;AAAA,IACC,aAAa;AAAA,IACb,MAAM;AAAA,IACN,MAAM;AAAA,IACN,aACC;AAAA,IACD,UAAU;AAAA,IACV,SAAS,CAAC;AAAA,IACV,aAAa;AAAA,MACZ,sBAAsB,CAAC,sBAAsB,UAAU;AAAA,MACvD,mBAAmB;AAAA,IACpB;AAAA,IACA,gBAAgB;AAAA,MACf,MAAM;AAAA,QACL,IAAI,CAAC,EAAE;AAAA,MACR;AAAA,IACD;AAAA,EACD;AACD;AAEA,MAAM,iBAAiB;AAAA,EACtB,MAAM;AAAA,IACL,UAAU,CAAC,YAAY;AAAA,IACvB,WAAW,CAAC,iBAAiB;AAAA,EAC9B;AACD;AAEO,MAAM,kBAAc,uCAAqB,gBAAgB,UAAU;AAE1E,eAAsB,QAAiC,GAA0C;AAChG,MAAI,eAA4B,CAAC;AAEjC,QAAM,eAAe,KAAK,iBAAiB,gBAAgB,GAAG,IAAI;AAAA,IACjE,cAAc;AAAA,EACf,CAAC;AAED,QAAM,YAAa,KAAK,iBAAiB,aAAa,CAAC,EAAe,IAAI,CAAC,aAAa;AACvF,UAAM,QAAQ,SAAS,MAAM,IAAI;AACjC,WAAO;AAAA,MACN,YAAY,MAAM,CAAC;AAAA,MACnB,UAAU,MAAM,CAAC;AAAA,IAClB;AAAA,EACD,CAAC;AACD,MAAI;AACJ,MAAI;AAEJ,QAAM,KAAkB,CAAC;AACzB,aAAW,YAAY,WAAW;AACjC,WAAO;AAAA,MACN,GAAG;AAAA,MACH,YAAY;AAAA,IACb;AAEA,eAAW,MAAM,mCAAkB;AAAA,MAClC;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACD;AACA,UAAM,QAAQ,SAAS;AACvB,OAAG,OAAO;AAEV,OAAG;AACF,qBAAe,MAAM,mCAAkB;AAAA,QACtC;AAAA,QACA;AAAA,QACA,yBAAyB,KAAK;AAAA,QAC9B;AAAA,QACA;AAAA,MACD;AAAA,IACD,SAAS,aAAa,WAAW,aAAa,aAAa,WAAW;AAAA,EACvE;AAEA,QAAM,gBAAgB,KAAK,QAAQ,+BAA2B,2BAAS,YAAY,GAAG;AAAA,IACrF,UAAU,EAAE,MAAM,EAAE;AAAA,EACrB,CAAC;AAED,SAAO;AACR;","names":[]}