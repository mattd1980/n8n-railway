{"version":3,"sources":["../../../nodes/PostHog/PostHog.node.ts"],"sourcesContent":["import moment from 'moment-timezone';\nimport type {\n\tIExecuteFunctions,\n\tIDataObject,\n\tINodeExecutionData,\n\tINodeType,\n\tINodeTypeDescription,\n} from 'n8n-workflow';\nimport { NodeConnectionTypes } from 'n8n-workflow';\n\nimport { aliasFields, aliasOperations } from './AliasDescription';\nimport { eventFields, eventOperations } from './EventDescription';\nimport type { IAlias, IEvent, IIdentity, ITrack } from './GenericFunctions';\nimport { posthogApiRequest } from './GenericFunctions';\nimport { identityFields, identityOperations } from './IdentityDescription';\nimport { trackFields, trackOperations } from './TrackDescription';\n\nexport class PostHog implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'PostHog',\n\t\tname: 'postHog',\n\t\ticon: 'file:postHog.svg',\n\t\tgroup: ['input'],\n\t\tversion: 1,\n\t\tsubtitle: '={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}',\n\t\tdescription: 'Consume PostHog API',\n\t\tdefaults: {\n\t\t\tname: 'PostHog',\n\t\t},\n\t\tusableAsTool: true,\n\t\tinputs: [NodeConnectionTypes.Main],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tcredentials: [\n\t\t\t{\n\t\t\t\tname: 'postHogApi',\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Resource',\n\t\t\t\tname: 'resource',\n\t\t\t\ttype: 'options',\n\t\t\t\tnoDataExpression: true,\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Alias',\n\t\t\t\t\t\tvalue: 'alias',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Event',\n\t\t\t\t\t\tvalue: 'event',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Identity',\n\t\t\t\t\t\tvalue: 'identity',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Track',\n\t\t\t\t\t\tvalue: 'track',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'event',\n\t\t\t},\n\t\t\t...aliasOperations,\n\t\t\t...aliasFields,\n\t\t\t...eventOperations,\n\t\t\t...eventFields,\n\t\t\t...identityOperations,\n\t\t\t...identityFields,\n\t\t\t...trackOperations,\n\t\t\t...trackFields,\n\t\t],\n\t};\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t\tconst items = this.getInputData();\n\t\tconst returnData: IDataObject[] = [];\n\t\tconst length = items.length;\n\t\tlet responseData;\n\t\tconst resource = this.getNodeParameter('resource', 0);\n\t\tconst operation = this.getNodeParameter('operation', 0);\n\n\t\tif (resource === 'alias') {\n\t\t\tif (operation === 'create') {\n\t\t\t\tfor (let i = 0; i < length; i++) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst distinctId = this.getNodeParameter('distinctId', i) as string;\n\n\t\t\t\t\t\tconst alias = this.getNodeParameter('alias', i) as string;\n\n\t\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i);\n\n\t\t\t\t\t\tconst context =\n\t\t\t\t\t\t\t((additionalFields.contextUi as IDataObject)?.contextValues as IDataObject[]) || [];\n\n\t\t\t\t\t\tconst event: IAlias = {\n\t\t\t\t\t\t\ttype: 'alias',\n\t\t\t\t\t\t\tevent: '$create_alias',\n\t\t\t\t\t\t\tcontext: context.reduce(\n\t\t\t\t\t\t\t\t(obj, value) => Object.assign(obj, { [`${value.key}`]: value.value }),\n\t\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\tproperties: {\n\t\t\t\t\t\t\t\tdistinct_id: distinctId,\n\t\t\t\t\t\t\t\talias,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tObject.assign(event, additionalFields);\n\n\t\t\t\t\t\tif (additionalFields.timestamp) {\n\t\t\t\t\t\t\tadditionalFields.timestamp = moment(\n\t\t\t\t\t\t\t\tadditionalFields.timestamp as string,\n\t\t\t\t\t\t\t).toISOString();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await posthogApiRequest.call(this, 'POST', '/batch', event);\n\n\t\t\t\t\t\treturnData.push(responseData as IDataObject);\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\t\t\treturnData.push({ error: error.message });\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow error;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (resource === 'event') {\n\t\t\tif (operation === 'create') {\n\t\t\t\ttry {\n\t\t\t\t\tconst events: IEvent[] = [];\n\t\t\t\t\tfor (let i = 0; i < length; i++) {\n\t\t\t\t\t\tconst eventName = this.getNodeParameter('eventName', i) as string;\n\n\t\t\t\t\t\tconst distinctId = this.getNodeParameter('distinctId', i) as string;\n\n\t\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i);\n\n\t\t\t\t\t\tconst properties =\n\t\t\t\t\t\t\t((additionalFields.propertiesUi as IDataObject)?.propertyValues as IDataObject[]) ||\n\t\t\t\t\t\t\t[];\n\n\t\t\t\t\t\tconst event: IEvent = {\n\t\t\t\t\t\t\tevent: eventName,\n\t\t\t\t\t\t\tproperties: properties.reduce(\n\t\t\t\t\t\t\t\t(obj, value) => Object.assign(obj, { [`${value.key}`]: value.value }),\n\t\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tevent.properties.distinct_id = distinctId;\n\n\t\t\t\t\t\tObject.assign(event, additionalFields);\n\n\t\t\t\t\t\tif (additionalFields.timestamp) {\n\t\t\t\t\t\t\tadditionalFields.timestamp = moment(\n\t\t\t\t\t\t\t\tadditionalFields.timestamp as string,\n\t\t\t\t\t\t\t).toISOString();\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//@ts-ignore\n\t\t\t\t\t\tdelete event.propertiesUi;\n\n\t\t\t\t\t\tevents.push(event);\n\t\t\t\t\t}\n\n\t\t\t\t\tresponseData = await posthogApiRequest.call(this, 'POST', '/capture', { batch: events });\n\n\t\t\t\t\treturnData.push(responseData as IDataObject);\n\t\t\t\t} catch (error) {\n\t\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\t\treturnData.push({ error: error.message });\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow error;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (resource === 'identity') {\n\t\t\tif (operation === 'create') {\n\t\t\t\tfor (let i = 0; i < length; i++) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst distinctId = this.getNodeParameter('distinctId', i) as string;\n\n\t\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i);\n\n\t\t\t\t\t\tconst properties =\n\t\t\t\t\t\t\t((additionalFields.propertiesUi as IDataObject)?.propertyValues as IDataObject[]) ||\n\t\t\t\t\t\t\t[];\n\n\t\t\t\t\t\tconst event: IIdentity = {\n\t\t\t\t\t\t\tevent: '$identify',\n\t\t\t\t\t\t\tproperties: properties.reduce(\n\t\t\t\t\t\t\t\t(obj, value) => Object.assign(obj, { [`${value.key}`]: value.value }),\n\t\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\tdistinct_id: distinctId,\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tObject.assign(event, additionalFields);\n\n\t\t\t\t\t\tif (additionalFields.timestamp) {\n\t\t\t\t\t\t\tadditionalFields.timestamp = moment(\n\t\t\t\t\t\t\t\tadditionalFields.timestamp as string,\n\t\t\t\t\t\t\t).toISOString();\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//@ts-ignore\n\t\t\t\t\t\tdelete event.propertiesUi;\n\n\t\t\t\t\t\tresponseData = await posthogApiRequest.call(this, 'POST', '/batch', event);\n\n\t\t\t\t\t\treturnData.push(responseData as IDataObject);\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\t\t\treturnData.push({ error: error.message });\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow error;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (resource === 'track') {\n\t\t\tif (operation === 'page' || operation === 'screen') {\n\t\t\t\tfor (let i = 0; i < length; i++) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst distinctId = this.getNodeParameter('distinctId', i) as string;\n\n\t\t\t\t\t\tconst name = this.getNodeParameter('name', i) as string;\n\n\t\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i);\n\n\t\t\t\t\t\tconst context =\n\t\t\t\t\t\t\t((additionalFields.contextUi as IDataObject)?.contextValues as IDataObject[]) || [];\n\n\t\t\t\t\t\tconst properties =\n\t\t\t\t\t\t\t((additionalFields.propertiesUi as IDataObject)?.propertyValues as IDataObject[]) ||\n\t\t\t\t\t\t\t[];\n\n\t\t\t\t\t\tconst event: ITrack = {\n\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\ttype: operation,\n\t\t\t\t\t\t\tevent: `$${operation}`,\n\t\t\t\t\t\t\tcontext: context.reduce(\n\t\t\t\t\t\t\t\t(obj, value) => Object.assign(obj, { [`${value.key}`]: value.value }),\n\t\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\tdistinct_id: distinctId,\n\t\t\t\t\t\t\tproperties: properties.reduce(\n\t\t\t\t\t\t\t\t(obj, value) => Object.assign(obj, { [`${value.key}`]: value.value }),\n\t\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tObject.assign(event, additionalFields);\n\n\t\t\t\t\t\tif (additionalFields.timestamp) {\n\t\t\t\t\t\t\tadditionalFields.timestamp = moment(\n\t\t\t\t\t\t\t\tadditionalFields.timestamp as string,\n\t\t\t\t\t\t\t).toISOString();\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//@ts-ignore\n\t\t\t\t\t\tdelete event.propertiesUi;\n\n\t\t\t\t\t\tresponseData = await posthogApiRequest.call(this, 'POST', '/batch', event);\n\n\t\t\t\t\t\treturnData.push(responseData as IDataObject);\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\t\t\treturnData.push({ error: error.message });\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow error;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn [this.helpers.returnJsonArray(returnData)];\n\t}\n}\n"],"mappings":"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","names":["moment"]}