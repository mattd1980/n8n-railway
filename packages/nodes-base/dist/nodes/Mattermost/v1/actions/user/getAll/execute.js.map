{"version":3,"sources":["../../../../../../../nodes/Mattermost/v1/actions/user/getAll/execute.ts"],"sourcesContent":["import { snakeCase } from 'change-case';\nimport type { IExecuteFunctions, IDataObject, INodeExecutionData } from 'n8n-workflow';\nimport { NodeOperationError } from 'n8n-workflow';\n\nimport { apiRequest, apiRequestAllItems } from '../../../transport';\n\nexport async function getAll(\n\tthis: IExecuteFunctions,\n\tindex: number,\n): Promise<INodeExecutionData[]> {\n\tconst returnAll = this.getNodeParameter('returnAll', index);\n\tconst additionalFields = this.getNodeParameter('additionalFields', index);\n\n\tconst qs = {} as IDataObject;\n\tconst requestMethod = 'GET';\n\tconst endpoint = '/users';\n\tconst body = {} as IDataObject;\n\n\tif (additionalFields.inTeam) {\n\t\tqs.in_team = additionalFields.inTeam;\n\t}\n\n\tif (additionalFields.notInTeam) {\n\t\tqs.not_in_team = additionalFields.notInTeam;\n\t}\n\n\tif (additionalFields.inChannel) {\n\t\tqs.in_channel = additionalFields.inChannel;\n\t}\n\n\tif (additionalFields.notInChannel) {\n\t\tqs.not_in_channel = additionalFields.notInChannel;\n\t}\n\n\tif (additionalFields.sort) {\n\t\tqs.sort = snakeCase(additionalFields.sort as string);\n\t}\n\n\tconst validRules = {\n\t\tinTeam: ['last_activity_at', 'created_at', 'username'],\n\t\tinChannel: ['status', 'username'],\n\t};\n\n\tif (additionalFields.sort) {\n\t\tif (additionalFields.inTeam !== undefined || additionalFields.inChannel !== undefined) {\n\t\t\tif (\n\t\t\t\tadditionalFields.inTeam !== undefined &&\n\t\t\t\t!validRules.inTeam.includes(snakeCase(additionalFields.sort as string))\n\t\t\t) {\n\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t`When In Team is set the only valid values for sorting are ${validRules.inTeam.join(\n\t\t\t\t\t\t',',\n\t\t\t\t\t)}`,\n\t\t\t\t\t{ itemIndex: index },\n\t\t\t\t);\n\t\t\t}\n\t\t\tif (\n\t\t\t\tadditionalFields.inChannel !== undefined &&\n\t\t\t\t!validRules.inChannel.includes(snakeCase(additionalFields.sort as string))\n\t\t\t) {\n\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t`When In Channel is set the only valid values for sorting are ${validRules.inChannel.join(\n\t\t\t\t\t\t',',\n\t\t\t\t\t)}`,\n\t\t\t\t\t{ itemIndex: index },\n\t\t\t\t);\n\t\t\t}\n\t\t\tif (additionalFields.inChannel === '' && additionalFields.sort !== 'username') {\n\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t'When sort is different than username In Channel must be set',\n\t\t\t\t\t{ itemIndex: index },\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (additionalFields.inTeam === '' && additionalFields.sort !== 'username') {\n\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t'When sort is different than username In Team must be set',\n\t\t\t\t\t{ itemIndex: index },\n\t\t\t\t);\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new NodeOperationError(\n\t\t\t\tthis.getNode(),\n\t\t\t\t\"When sort is defined either 'in team' or 'in channel' must be defined\",\n\t\t\t\t{ itemIndex: index },\n\t\t\t);\n\t\t}\n\t}\n\n\tif (additionalFields.sort === 'username') {\n\t\tqs.sort = '';\n\t}\n\n\tif (!returnAll) {\n\t\tqs.per_page = this.getNodeParameter('limit', index);\n\t}\n\n\tlet responseData;\n\n\tif (returnAll) {\n\t\tresponseData = await apiRequestAllItems.call(this, requestMethod, endpoint, body, qs);\n\t} else {\n\t\tresponseData = await apiRequest.call(this, requestMethod, endpoint, body, qs);\n\t}\n\n\treturn this.helpers.returnJsonArray(responseData as IDataObject[]);\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAA0B;AAE1B,0BAAmC;AAEnC,uBAA+C;AAE/C,eAAsB,OAErB,OACgC;AAChC,QAAM,YAAY,KAAK,iBAAiB,aAAa,KAAK;AAC1D,QAAM,mBAAmB,KAAK,iBAAiB,oBAAoB,KAAK;AAExE,QAAM,KAAK,CAAC;AACZ,QAAM,gBAAgB;AACtB,QAAM,WAAW;AACjB,QAAM,OAAO,CAAC;AAEd,MAAI,iBAAiB,QAAQ;AAC5B,OAAG,UAAU,iBAAiB;AAAA,EAC/B;AAEA,MAAI,iBAAiB,WAAW;AAC/B,OAAG,cAAc,iBAAiB;AAAA,EACnC;AAEA,MAAI,iBAAiB,WAAW;AAC/B,OAAG,aAAa,iBAAiB;AAAA,EAClC;AAEA,MAAI,iBAAiB,cAAc;AAClC,OAAG,iBAAiB,iBAAiB;AAAA,EACtC;AAEA,MAAI,iBAAiB,MAAM;AAC1B,OAAG,WAAO,8BAAU,iBAAiB,IAAc;AAAA,EACpD;AAEA,QAAM,aAAa;AAAA,IAClB,QAAQ,CAAC,oBAAoB,cAAc,UAAU;AAAA,IACrD,WAAW,CAAC,UAAU,UAAU;AAAA,EACjC;AAEA,MAAI,iBAAiB,MAAM;AAC1B,QAAI,iBAAiB,WAAW,UAAa,iBAAiB,cAAc,QAAW;AACtF,UACC,iBAAiB,WAAW,UAC5B,CAAC,WAAW,OAAO,aAAS,8BAAU,iBAAiB,IAAc,CAAC,GACrE;AACD,cAAM,IAAI;AAAA,UACT,KAAK,QAAQ;AAAA,UACb,6DAA6D,WAAW,OAAO;AAAA,YAC9E;AAAA,UACD,CAAC;AAAA,UACD,EAAE,WAAW,MAAM;AAAA,QACpB;AAAA,MACD;AACA,UACC,iBAAiB,cAAc,UAC/B,CAAC,WAAW,UAAU,aAAS,8BAAU,iBAAiB,IAAc,CAAC,GACxE;AACD,cAAM,IAAI;AAAA,UACT,KAAK,QAAQ;AAAA,UACb,gEAAgE,WAAW,UAAU;AAAA,YACpF;AAAA,UACD,CAAC;AAAA,UACD,EAAE,WAAW,MAAM;AAAA,QACpB;AAAA,MACD;AACA,UAAI,iBAAiB,cAAc,MAAM,iBAAiB,SAAS,YAAY;AAC9E,cAAM,IAAI;AAAA,UACT,KAAK,QAAQ;AAAA,UACb;AAAA,UACA,EAAE,WAAW,MAAM;AAAA,QACpB;AAAA,MACD;AAEA,UAAI,iBAAiB,WAAW,MAAM,iBAAiB,SAAS,YAAY;AAC3E,cAAM,IAAI;AAAA,UACT,KAAK,QAAQ;AAAA,UACb;AAAA,UACA,EAAE,WAAW,MAAM;AAAA,QACpB;AAAA,MACD;AAAA,IACD,OAAO;AACN,YAAM,IAAI;AAAA,QACT,KAAK,QAAQ;AAAA,QACb;AAAA,QACA,EAAE,WAAW,MAAM;AAAA,MACpB;AAAA,IACD;AAAA,EACD;AAEA,MAAI,iBAAiB,SAAS,YAAY;AACzC,OAAG,OAAO;AAAA,EACX;AAEA,MAAI,CAAC,WAAW;AACf,OAAG,WAAW,KAAK,iBAAiB,SAAS,KAAK;AAAA,EACnD;AAEA,MAAI;AAEJ,MAAI,WAAW;AACd,mBAAe,MAAM,oCAAmB,KAAK,MAAM,eAAe,UAAU,MAAM,EAAE;AAAA,EACrF,OAAO;AACN,mBAAe,MAAM,4BAAW,KAAK,MAAM,eAAe,UAAU,MAAM,EAAE;AAAA,EAC7E;AAEA,SAAO,KAAK,QAAQ,gBAAgB,YAA6B;AAClE;","names":[]}