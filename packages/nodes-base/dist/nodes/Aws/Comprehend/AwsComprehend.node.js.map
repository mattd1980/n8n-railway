{"version":3,"sources":["../../../../nodes/Aws/Comprehend/AwsComprehend.node.ts"],"sourcesContent":["import type {\n\tIExecuteFunctions,\n\tIDataObject,\n\tINodeExecutionData,\n\tINodeType,\n\tINodeTypeDescription,\n} from 'n8n-workflow';\nimport { NodeConnectionTypes } from 'n8n-workflow';\n\nimport { awsApiRequestREST } from './GenericFunctions';\n\nexport class AwsComprehend implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'AWS Comprehend',\n\t\tname: 'awsComprehend',\n\t\ticon: 'file:comprehend.svg',\n\t\tgroup: ['output'],\n\t\tversion: 1,\n\t\tsubtitle: '={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}',\n\t\tdescription: 'Sends data to Amazon Comprehend',\n\t\tdefaults: {\n\t\t\tname: 'AWS Comprehend',\n\t\t},\n\t\tinputs: [NodeConnectionTypes.Main],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tcredentials: [\n\t\t\t{\n\t\t\t\tname: 'aws',\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Resource',\n\t\t\t\tname: 'resource',\n\t\t\t\ttype: 'options',\n\t\t\t\tnoDataExpression: true,\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Text',\n\t\t\t\t\t\tvalue: 'text',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'text',\n\t\t\t\tdescription: 'The resource to perform',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Operation',\n\t\t\t\tname: 'operation',\n\t\t\t\ttype: 'options',\n\t\t\t\tnoDataExpression: true,\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Detect Dominant Language',\n\t\t\t\t\t\tvalue: 'detectDominantLanguage',\n\t\t\t\t\t\tdescription: 'Identify the dominant language',\n\t\t\t\t\t\taction: 'Identify the dominant language',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Detect Entities',\n\t\t\t\t\t\tvalue: 'detectEntities',\n\t\t\t\t\t\tdescription: 'Inspects text for named entities, and returns information about them',\n\t\t\t\t\t\taction: 'Inspect text for named entities, and returns information about them',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Detect Sentiment',\n\t\t\t\t\t\tvalue: 'detectSentiment',\n\t\t\t\t\t\tdescription: 'Analyse the sentiment of the text',\n\t\t\t\t\t\taction: 'Analyze the sentiment of the text',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'detectDominantLanguage',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Language Code',\n\t\t\t\tname: 'languageCode',\n\t\t\t\ttype: 'options',\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Arabic',\n\t\t\t\t\t\tvalue: 'ar',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Chinese',\n\t\t\t\t\t\tvalue: 'zh',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Chinese (T)',\n\t\t\t\t\t\tvalue: 'zh-TW',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'English',\n\t\t\t\t\t\tvalue: 'en',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'French',\n\t\t\t\t\t\tvalue: 'fr',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'German',\n\t\t\t\t\t\tvalue: 'de',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Hindi',\n\t\t\t\t\t\tvalue: 'hi',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Italian',\n\t\t\t\t\t\tvalue: 'it',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Japanese',\n\t\t\t\t\t\tvalue: 'ja',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Korean',\n\t\t\t\t\t\tvalue: 'ko',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Portuguese',\n\t\t\t\t\t\tvalue: 'pt',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Spanish',\n\t\t\t\t\t\tvalue: 'es',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'en',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tresource: ['text'],\n\t\t\t\t\t\toperation: ['detectSentiment', 'detectEntities'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdescription: 'The language code for text',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Text',\n\t\t\t\tname: 'text',\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: '',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tresource: ['text'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdescription: 'The text to send',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Simplify',\n\t\t\t\tname: 'simple',\n\t\t\t\ttype: 'boolean',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tresource: ['text'],\n\t\t\t\t\t\toperation: ['detectDominantLanguage'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdefault: true,\n\t\t\t\tdescription:\n\t\t\t\t\t'Whether to return a simplified version of the response instead of the raw data',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Additional Fields',\n\t\t\t\tname: 'additionalFields',\n\t\t\t\ttype: 'collection',\n\t\t\t\tplaceholder: 'Add Field',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tresource: ['text'],\n\t\t\t\t\t\toperation: ['detectEntities'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdefault: {},\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Endpoint Arn',\n\t\t\t\t\t\tname: 'endpointArn',\n\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t'The Amazon Resource Name of an endpoint that is associated with a custom entity recognition model',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t],\n\t};\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t\tconst items = this.getInputData();\n\t\tconst returnData: INodeExecutionData[] = [];\n\t\tlet responseData;\n\t\tconst resource = this.getNodeParameter('resource', 0);\n\t\tconst operation = this.getNodeParameter('operation', 0);\n\t\tfor (let i = 0; i < items.length; i++) {\n\t\t\ttry {\n\t\t\t\tif (resource === 'text') {\n\t\t\t\t\t//https://docs.aws.amazon.com/comprehend/latest/dg/API_DetectDominantLanguage.html\n\t\t\t\t\tif (operation === 'detectDominantLanguage') {\n\t\t\t\t\t\tconst text = this.getNodeParameter('text', i) as string;\n\t\t\t\t\t\tconst simple = this.getNodeParameter('simple', i) as boolean;\n\n\t\t\t\t\t\tconst body: IDataObject = {\n\t\t\t\t\t\t\tText: text,\n\t\t\t\t\t\t};\n\t\t\t\t\t\tconst action = 'Comprehend_20171127.DetectDominantLanguage';\n\t\t\t\t\t\tresponseData = await awsApiRequestREST.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'comprehend',\n\t\t\t\t\t\t\t'POST',\n\t\t\t\t\t\t\t'',\n\t\t\t\t\t\t\tJSON.stringify(body),\n\t\t\t\t\t\t\t{ 'x-amz-target': action, 'Content-Type': 'application/x-amz-json-1.1' },\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tif (simple) {\n\t\t\t\t\t\t\tresponseData = responseData.Languages.reduce(\n\t\t\t\t\t\t\t\t(accumulator: { [key: string]: number }, currentValue: IDataObject) => {\n\t\t\t\t\t\t\t\t\taccumulator[currentValue.LanguageCode as string] = currentValue.Score as number;\n\t\t\t\t\t\t\t\t\treturn accumulator;\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t//https://docs.aws.amazon.com/comprehend/latest/dg/API_DetectSentiment.html\n\t\t\t\t\tif (operation === 'detectSentiment') {\n\t\t\t\t\t\tconst action = 'Comprehend_20171127.DetectSentiment';\n\t\t\t\t\t\tconst text = this.getNodeParameter('text', i) as string;\n\t\t\t\t\t\tconst languageCode = this.getNodeParameter('languageCode', i) as string;\n\t\t\t\t\t\tconst body: IDataObject = {\n\t\t\t\t\t\t\tText: text,\n\t\t\t\t\t\t\tLanguageCode: languageCode,\n\t\t\t\t\t\t};\n\t\t\t\t\t\tresponseData = await awsApiRequestREST.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'comprehend',\n\t\t\t\t\t\t\t'POST',\n\t\t\t\t\t\t\t'',\n\t\t\t\t\t\t\tJSON.stringify(body),\n\t\t\t\t\t\t\t{ 'x-amz-target': action, 'Content-Type': 'application/x-amz-json-1.1' },\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\t//https://docs.aws.amazon.com/comprehend/latest/dg/API_DetectEntities.html\n\t\t\t\t\tif (operation === 'detectEntities') {\n\t\t\t\t\t\tconst action = 'Comprehend_20171127.DetectEntities';\n\t\t\t\t\t\tconst text = this.getNodeParameter('text', i) as string;\n\t\t\t\t\t\tconst languageCode = this.getNodeParameter('languageCode', i) as string;\n\t\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i);\n\n\t\t\t\t\t\tconst body: IDataObject = {\n\t\t\t\t\t\t\tText: text,\n\t\t\t\t\t\t\tLanguageCode: languageCode,\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tif (additionalFields.endpointArn) {\n\t\t\t\t\t\t\tbody.EndpointArn = additionalFields.endpointArn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await awsApiRequestREST.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'comprehend',\n\t\t\t\t\t\t\t'POST',\n\t\t\t\t\t\t\t'',\n\t\t\t\t\t\t\tJSON.stringify(body),\n\t\t\t\t\t\t\t{ 'x-amz-target': action, 'Content-Type': 'application/x-amz-json-1.1' },\n\t\t\t\t\t\t);\n\t\t\t\t\t\tresponseData = responseData.Entities;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\tthis.helpers.returnJsonArray(responseData),\n\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t);\n\t\t\t\treturnData.push(...executionData);\n\t\t\t} catch (error) {\n\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\tthis.helpers.returnJsonArray({ error: error.message }),\n\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t);\n\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\t\treturn [returnData];\n\t}\n}\n"],"mappings":"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","names":[]}