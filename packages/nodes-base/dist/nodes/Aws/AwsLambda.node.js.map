{"version":3,"sources":["../../../nodes/Aws/AwsLambda.node.ts"],"sourcesContent":["import type {\n\tIExecuteFunctions,\n\tIDataObject,\n\tILoadOptionsFunctions,\n\tINodeExecutionData,\n\tINodePropertyOptions,\n\tINodeType,\n\tINodeTypeDescription,\n\tJsonObject,\n} from 'n8n-workflow';\nimport { NodeConnectionTypes, NodeApiError } from 'n8n-workflow';\n\nimport { awsApiRequestREST } from './GenericFunctions';\n\nexport class AwsLambda implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'AWS Lambda',\n\t\tname: 'awsLambda',\n\t\ticon: 'file:lambda.svg',\n\t\tgroup: ['output'],\n\t\tversion: 1,\n\t\tsubtitle: '={{$parameter[\"function\"]}}',\n\t\tdescription: 'Invoke functions on AWS Lambda',\n\t\tdefaults: {\n\t\t\tname: 'AWS Lambda',\n\t\t},\n\t\tusableAsTool: true,\n\t\tinputs: [NodeConnectionTypes.Main],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tcredentials: [\n\t\t\t{\n\t\t\t\tname: 'aws',\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Operation',\n\t\t\t\tname: 'operation',\n\t\t\t\ttype: 'options',\n\t\t\t\tnoDataExpression: true,\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Invoke',\n\t\t\t\t\t\tvalue: 'invoke',\n\t\t\t\t\t\tdescription: 'Invoke a function',\n\t\t\t\t\t\taction: 'Invoke a function',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'invoke',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Function Name or ID',\n\t\t\t\tname: 'function',\n\t\t\t\ttype: 'options',\n\t\t\t\ttypeOptions: {\n\t\t\t\t\tloadOptionsMethod: 'getFunctions',\n\t\t\t\t},\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['invoke'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\toptions: [],\n\t\t\t\tdefault: '',\n\t\t\t\trequired: true,\n\t\t\t\tdescription:\n\t\t\t\t\t'The function you want to invoke. Choose from the list, or specify an ID using an <a href=\"https://docs.n8n.io/code/expressions/\">expression</a>.',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Qualifier',\n\t\t\t\tname: 'qualifier',\n\t\t\t\ttype: 'string',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['invoke'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\trequired: true,\n\t\t\t\tdefault: '$LATEST',\n\t\t\t\tdescription: 'Specify a version or alias to invoke a published version of the function',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Invocation Type',\n\t\t\t\tname: 'invocationType',\n\t\t\t\ttype: 'options',\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Wait for Results',\n\t\t\t\t\t\tvalue: 'RequestResponse',\n\t\t\t\t\t\tdescription: 'Invoke the function synchronously and wait for the response',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Continue Workflow',\n\t\t\t\t\t\tvalue: 'Event',\n\t\t\t\t\t\tdescription: 'Invoke the function and immediately continue the workflow',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['invoke'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdefault: 'RequestResponse',\n\t\t\t\tdescription: 'Specify if the workflow should wait for the function to return the results',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'JSON Input',\n\t\t\t\tname: 'payload',\n\t\t\t\ttype: 'string',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['invoke'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdefault: '',\n\t\t\t\tdescription: 'The JSON that you want to provide to your Lambda function as input',\n\t\t\t},\n\t\t],\n\t};\n\n\tmethods = {\n\t\tloadOptions: {\n\t\t\tasync getFunctions(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst returnData: INodePropertyOptions[] = [];\n\t\t\t\tconst data = await awsApiRequestREST.call(this, 'lambda', 'GET', '/2015-03-31/functions/');\n\n\t\t\t\tfor (const func of data.Functions!) {\n\t\t\t\t\treturnData.push({\n\t\t\t\t\t\tname: func.FunctionName as string,\n\t\t\t\t\t\tvalue: func.FunctionArn as string,\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tif (data.NextMarker) {\n\t\t\t\t\tlet marker: string = data.NextMarker;\n\t\t\t\t\twhile (true) {\n\t\t\t\t\t\tconst dataLoop = await awsApiRequestREST.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'lambda',\n\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t`/2015-03-31/functions/?MaxItems=50&Marker=${encodeURIComponent(marker)}`,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tfor (const func of dataLoop.Functions!) {\n\t\t\t\t\t\t\treturnData.push({\n\t\t\t\t\t\t\t\tname: func.FunctionName as string,\n\t\t\t\t\t\t\t\tvalue: func.FunctionArn as string,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (dataLoop.NextMarker) {\n\t\t\t\t\t\t\tmarker = dataLoop.NextMarker;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn returnData;\n\t\t\t},\n\t\t},\n\t};\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t\tconst items = this.getInputData();\n\t\tconst returnData: IDataObject[] = [];\n\n\t\tfor (let i = 0; i < items.length; i++) {\n\t\t\ttry {\n\t\t\t\tconst params = {\n\t\t\t\t\tFunctionName: this.getNodeParameter('function', i) as string,\n\t\t\t\t\tInvocationType: this.getNodeParameter('invocationType', i) as string,\n\t\t\t\t\tPayload: this.getNodeParameter('payload', i) as string,\n\t\t\t\t\tQualifier: this.getNodeParameter('qualifier', i) as string,\n\t\t\t\t};\n\n\t\t\t\tconst responseData = await awsApiRequestREST.call(\n\t\t\t\t\tthis,\n\t\t\t\t\t'lambda',\n\t\t\t\t\t'POST',\n\t\t\t\t\t`/2015-03-31/functions/${params.FunctionName}/invocations?Qualifier=${params.Qualifier}`,\n\t\t\t\t\tparams.Payload,\n\t\t\t\t\t{\n\t\t\t\t\t\t'X-Amz-Invocation-Type': params.InvocationType,\n\t\t\t\t\t\t'Content-Type': 'application/x-amz-json-1.0',\n\t\t\t\t\t},\n\t\t\t\t);\n\n\t\t\t\tif (responseData?.errorMessage !== undefined) {\n\t\t\t\t\tlet _errorMessage = responseData.errorMessage;\n\n\t\t\t\t\tif (responseData.stackTrace) {\n\t\t\t\t\t\t_errorMessage += `\\n\\nStack trace:\\n${responseData.stackTrace}`;\n\t\t\t\t\t}\n\n\t\t\t\t\tthrow new NodeApiError(this.getNode(), responseData as JsonObject);\n\t\t\t\t} else {\n\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\tthis.helpers.returnJsonArray({\n\t\t\t\t\t\t\tresult: responseData,\n\t\t\t\t\t\t}),\n\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t);\n\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\tthis.helpers.returnJsonArray({ error: (error as JsonObject).message }),\n\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t);\n\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\n\t\treturn [this.helpers.returnJsonArray(returnData)];\n\t}\n}\n"],"mappings":"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","names":[]}