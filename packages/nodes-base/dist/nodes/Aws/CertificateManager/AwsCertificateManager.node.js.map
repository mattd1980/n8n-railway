{"version":3,"sources":["../../../../nodes/Aws/CertificateManager/AwsCertificateManager.node.ts"],"sourcesContent":["import type {\n\tIExecuteFunctions,\n\tIDataObject,\n\tINodeExecutionData,\n\tINodeType,\n\tINodeTypeDescription,\n} from 'n8n-workflow';\nimport { NodeConnectionTypes } from 'n8n-workflow';\n\nimport { certificateFields, certificateOperations } from './CertificateDescription';\nimport { awsApiRequestAllItems, awsApiRequestREST } from './GenericFunctions';\n\nexport class AwsCertificateManager implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'AWS Certificate Manager',\n\t\tname: 'awsCertificateManager',\n\t\ticon: 'file:acm.svg',\n\t\tgroup: ['output'],\n\t\tversion: 1,\n\t\tsubtitle: '={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}',\n\t\tdescription: 'Sends data to AWS Certificate Manager',\n\t\tdefaults: {\n\t\t\tname: 'AWS Certificate Manager',\n\t\t},\n\t\tinputs: [NodeConnectionTypes.Main],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tcredentials: [\n\t\t\t{\n\t\t\t\tname: 'aws',\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Resource',\n\t\t\t\tname: 'resource',\n\t\t\t\ttype: 'options',\n\t\t\t\tnoDataExpression: true,\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Certificate',\n\t\t\t\t\t\tvalue: 'certificate',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'certificate',\n\t\t\t},\n\t\t\t// Certificate\n\t\t\t...certificateOperations,\n\t\t\t...certificateFields,\n\t\t],\n\t};\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t\tconst items = this.getInputData();\n\t\tconst returnData: IDataObject[] = [];\n\t\tconst qs: IDataObject = {};\n\t\tlet responseData;\n\t\tconst resource = this.getNodeParameter('resource', 0);\n\t\tconst operation = this.getNodeParameter('operation', 0);\n\t\tfor (let i = 0; i < items.length; i++) {\n\t\t\ttry {\n\t\t\t\tif (resource === 'certificate') {\n\t\t\t\t\t//https://docs.aws.amazon.com/acm/latest/APIReference/API_DeleteCertificate.html\n\t\t\t\t\tif (operation === 'delete') {\n\t\t\t\t\t\tconst certificateArn = this.getNodeParameter('certificateArn', i) as string;\n\n\t\t\t\t\t\tconst body: IDataObject = {\n\t\t\t\t\t\t\tCertificateArn: certificateArn,\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tresponseData = await awsApiRequestREST.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'acm',\n\t\t\t\t\t\t\t'POST',\n\t\t\t\t\t\t\t'',\n\t\t\t\t\t\t\tJSON.stringify(body),\n\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t'X-Amz-Target': 'CertificateManager.DeleteCertificate',\n\t\t\t\t\t\t\t\t'Content-Type': 'application/x-amz-json-1.1',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tresponseData = { success: true };\n\t\t\t\t\t}\n\n\t\t\t\t\t//https://docs.aws.amazon.com/acm/latest/APIReference/API_GetCertificate.html\n\t\t\t\t\tif (operation === 'get') {\n\t\t\t\t\t\tconst certificateArn = this.getNodeParameter('certificateArn', i) as string;\n\n\t\t\t\t\t\tconst body: IDataObject = {\n\t\t\t\t\t\t\tCertificateArn: certificateArn,\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tresponseData = await awsApiRequestREST.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'acm',\n\t\t\t\t\t\t\t'POST',\n\t\t\t\t\t\t\t'',\n\t\t\t\t\t\t\tJSON.stringify(body),\n\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t'X-Amz-Target': 'CertificateManager.GetCertificate',\n\t\t\t\t\t\t\t\t'Content-Type': 'application/x-amz-json-1.1',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\t//https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListObjectsV2.html\n\t\t\t\t\tif (operation === 'getMany') {\n\t\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', 0);\n\t\t\t\t\t\tconst options = this.getNodeParameter('options', i);\n\n\t\t\t\t\t\tconst body: { Includes: IDataObject; CertificateStatuses: string[]; MaxItems: number } =\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tCertificateStatuses: [],\n\t\t\t\t\t\t\t\tIncludes: {},\n\t\t\t\t\t\t\t\tMaxItems: 0,\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\tif (options.certificateStatuses) {\n\t\t\t\t\t\t\tbody.CertificateStatuses = options.certificateStatuses as string[];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (options.certificateStatuses) {\n\t\t\t\t\t\t\tbody.Includes.extendedKeyUsage = options.extendedKeyUsage as string[];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (options.keyTypes) {\n\t\t\t\t\t\t\tbody.Includes.keyTypes = options.keyTypes as string[];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (options.keyUsage) {\n\t\t\t\t\t\t\tbody.Includes.keyUsage = options.keyUsage as string[];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (returnAll) {\n\t\t\t\t\t\t\tresponseData = await awsApiRequestAllItems.call(\n\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t'CertificateSummaryList',\n\t\t\t\t\t\t\t\t'acm',\n\t\t\t\t\t\t\t\t'POST',\n\t\t\t\t\t\t\t\t'',\n\t\t\t\t\t\t\t\t'{}',\n\t\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t'X-Amz-Target': 'CertificateManager.ListCertificates',\n\t\t\t\t\t\t\t\t\t'Content-Type': 'application/x-amz-json-1.1',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tbody.MaxItems = this.getNodeParameter('limit', 0);\n\t\t\t\t\t\t\tresponseData = await awsApiRequestREST.call(\n\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t'acm',\n\t\t\t\t\t\t\t\t'POST',\n\t\t\t\t\t\t\t\t'',\n\t\t\t\t\t\t\t\tJSON.stringify(body),\n\t\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t'X-Amz-Target': 'CertificateManager.ListCertificates',\n\t\t\t\t\t\t\t\t\t'Content-Type': 'application/x-amz-json-1.1',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tresponseData = responseData.CertificateSummaryList;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t//https://docs.aws.amazon.com/acm/latest/APIReference/API_DescribeCertificate.html\n\t\t\t\t\tif (operation === 'getMetadata') {\n\t\t\t\t\t\tconst certificateArn = this.getNodeParameter('certificateArn', i) as string;\n\n\t\t\t\t\t\tconst body: IDataObject = {\n\t\t\t\t\t\t\tCertificateArn: certificateArn,\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tresponseData = await awsApiRequestREST.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'acm',\n\t\t\t\t\t\t\t'POST',\n\t\t\t\t\t\t\t'',\n\t\t\t\t\t\t\tJSON.stringify(body),\n\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t'X-Amz-Target': 'CertificateManager.DescribeCertificate',\n\t\t\t\t\t\t\t\t'Content-Type': 'application/x-amz-json-1.1',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tresponseData = responseData.Certificate;\n\t\t\t\t\t}\n\n\t\t\t\t\t//https://docs.aws.amazon.com/acm/latest/APIReference/API_RenewCertificate.html\n\t\t\t\t\tif (operation === 'renew') {\n\t\t\t\t\t\tconst certificateArn = this.getNodeParameter('certificateArn', i) as string;\n\n\t\t\t\t\t\tconst body: IDataObject = {\n\t\t\t\t\t\t\tCertificateArn: certificateArn,\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tresponseData = await awsApiRequestREST.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'acm',\n\t\t\t\t\t\t\t'POST',\n\t\t\t\t\t\t\t'',\n\t\t\t\t\t\t\tJSON.stringify(body),\n\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t'X-Amz-Target': 'CertificateManager.RenewCertificate',\n\t\t\t\t\t\t\t\t'Content-Type': 'application/x-amz-json-1.1',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tresponseData = { success: true };\n\t\t\t\t\t}\n\n\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject),\n\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t);\n\n\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\treturnData.push({ json: { error: error.message } });\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\n\t\treturn [returnData as INodeExecutionData[]];\n\t}\n}\n"],"mappings":"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","names":[]}