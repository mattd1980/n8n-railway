{"version":3,"sources":["../../../../../nodes/Aws/IAM/methods/listSearch.ts"],"sourcesContent":["import type {\n\tIDataObject,\n\tIExecuteSingleFunctions,\n\tIHttpRequestOptions,\n\tILoadOptionsFunctions,\n\tINodeListSearchItems,\n\tINodeListSearchResult,\n\tJsonObject,\n} from 'n8n-workflow';\nimport { NodeApiError } from 'n8n-workflow';\n\nimport { CURRENT_VERSION } from '../helpers/constants';\nimport type {\n\tGetAllGroupsResponseBody,\n\tGetAllUsersResponseBody,\n\tGetGroupResponseBody,\n} from '../helpers/types';\nimport { awsApiRequest } from '../transport';\n\nfunction formatSearchResults(\n\titems: IDataObject[],\n\tpropertyName: string,\n\tfilter?: string,\n): INodeListSearchItems[] {\n\treturn items\n\t\t.map((item) => ({\n\t\t\tname: String(item[propertyName] ?? ''),\n\t\t\tvalue: String(item[propertyName] ?? ''),\n\t\t}))\n\t\t.filter(({ name }) => !filter || name.includes(filter))\n\t\t.sort((a, b) => a.name.localeCompare(b.name));\n}\n\nexport async function searchUsers(\n\tthis: ILoadOptionsFunctions,\n\tfilter?: string,\n\tpaginationToken?: string,\n): Promise<INodeListSearchResult> {\n\tconst options: IHttpRequestOptions = {\n\t\tmethod: 'POST',\n\t\turl: '',\n\t\tbody: {\n\t\t\tAction: 'ListUsers',\n\t\t\tVersion: CURRENT_VERSION,\n\t\t\t...(paginationToken ? { Marker: paginationToken } : {}),\n\t\t},\n\t};\n\tconst responseData = (await awsApiRequest.call(this, options)) as GetAllUsersResponseBody;\n\n\tconst users = responseData.ListUsersResponse.ListUsersResult.Users || [];\n\tconst nextMarker = responseData.ListUsersResponse.ListUsersResult.IsTruncated\n\t\t? responseData.ListUsersResponse.ListUsersResult.Marker\n\t\t: undefined;\n\n\treturn {\n\t\tresults: formatSearchResults(users, 'UserName', filter),\n\t\tpaginationToken: nextMarker,\n\t};\n}\n\nexport async function searchGroups(\n\tthis: ILoadOptionsFunctions,\n\tfilter?: string,\n\tpaginationToken?: string,\n): Promise<INodeListSearchResult> {\n\tconst options: IHttpRequestOptions = {\n\t\tmethod: 'POST',\n\t\turl: '',\n\t\tbody: {\n\t\t\tAction: 'ListGroups',\n\t\t\tVersion: CURRENT_VERSION,\n\t\t\t...(paginationToken ? { Marker: paginationToken } : {}),\n\t\t},\n\t};\n\n\tconst responseData = (await awsApiRequest.call(this, options)) as GetAllGroupsResponseBody;\n\n\tconst groups = responseData.ListGroupsResponse.ListGroupsResult.Groups || [];\n\tconst nextMarker = responseData.ListGroupsResponse.ListGroupsResult.IsTruncated\n\t\t? responseData.ListGroupsResponse.ListGroupsResult.Marker\n\t\t: undefined;\n\n\treturn {\n\t\tresults: formatSearchResults(groups, 'GroupName', filter),\n\t\tpaginationToken: nextMarker,\n\t};\n}\n\nexport async function searchGroupsForUser(\n\tthis: ILoadOptionsFunctions | IExecuteSingleFunctions,\n\tfilter?: string,\n): Promise<INodeListSearchResult> {\n\tconst userName = this.getNodeParameter('user', undefined, { extractValue: true });\n\tlet allGroups: IDataObject[] = [];\n\tlet nextMarkerGroups: string | undefined;\n\tdo {\n\t\tconst options: IHttpRequestOptions = {\n\t\t\tmethod: 'POST',\n\t\t\turl: '',\n\t\t\tbody: {\n\t\t\t\tAction: 'ListGroups',\n\t\t\t\tVersion: CURRENT_VERSION,\n\t\t\t\t...(nextMarkerGroups ? { Marker: nextMarkerGroups } : {}),\n\t\t\t},\n\t\t};\n\n\t\tconst groupsData = (await awsApiRequest.call(this, options)) as GetAllGroupsResponseBody;\n\n\t\tconst groups = groupsData.ListGroupsResponse?.ListGroupsResult?.Groups || [];\n\t\tnextMarkerGroups = groupsData.ListGroupsResponse?.ListGroupsResult?.IsTruncated\n\t\t\t? groupsData.ListGroupsResponse?.ListGroupsResult?.Marker\n\t\t\t: undefined;\n\n\t\tallGroups = [...allGroups, ...groups];\n\t} while (nextMarkerGroups);\n\n\tif (allGroups.length === 0) {\n\t\treturn { results: [] };\n\t}\n\n\tconst groupCheckPromises = allGroups.map(async (group) => {\n\t\tconst groupName = group.GroupName as string;\n\t\tif (!groupName) {\n\t\t\treturn null;\n\t\t}\n\n\t\ttry {\n\t\t\tconst options: IHttpRequestOptions = {\n\t\t\t\tmethod: 'POST',\n\t\t\t\turl: '',\n\t\t\t\tbody: {\n\t\t\t\t\tAction: 'GetGroup',\n\t\t\t\t\tVersion: CURRENT_VERSION,\n\t\t\t\t\tGroupName: groupName,\n\t\t\t\t},\n\t\t\t};\n\n\t\t\tconst getGroupResponse = (await awsApiRequest.call(this, options)) as GetGroupResponseBody;\n\t\t\tconst groupResult = getGroupResponse?.GetGroupResponse?.GetGroupResult;\n\t\t\tconst userExists = groupResult?.Users?.some((user) => user.UserName === userName);\n\n\t\t\tif (userExists) {\n\t\t\t\treturn { UserName: userName, GroupName: groupName };\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tthrow new NodeApiError(this.getNode(), error as JsonObject, {\n\t\t\t\tmessage: `Failed to get group ${groupName}: ${error?.message ?? 'Unknown error'}`,\n\t\t\t});\n\t\t}\n\n\t\treturn null;\n\t});\n\n\tconst validUserGroups = (await Promise.all(groupCheckPromises)).filter(Boolean) as IDataObject[];\n\n\treturn {\n\t\tresults: formatSearchResults(validUserGroups, 'GroupName', filter),\n\t};\n}\n"],"mappings":"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","names":[]}