{"version":3,"sources":["../../../nodes/UnleashedSoftware/GenericFunctions.ts"],"sourcesContent":["import { createHmac } from 'crypto';\nimport type {\n\tIDataObject,\n\tIExecuteFunctions,\n\tIHookFunctions,\n\tILoadOptionsFunctions,\n\tJsonObject,\n\tIRequestOptions,\n\tIHttpRequestMethods,\n} from 'n8n-workflow';\nimport { NodeApiError } from 'n8n-workflow';\nimport qs from 'qs';\n\nexport async function unleashedApiRequest(\n\tthis: IHookFunctions | IExecuteFunctions | ILoadOptionsFunctions,\n\tmethod: IHttpRequestMethods,\n\tpath: string,\n\tbody: IDataObject = {},\n\tquery: IDataObject = {},\n\tpageNumber?: number,\n\theaders?: object,\n) {\n\tconst paginatedPath = pageNumber ? `/${path}/${pageNumber}` : `/${path}`;\n\n\tconst options: IRequestOptions = {\n\t\theaders: {\n\t\t\tAccept: 'application/json',\n\t\t\t'Content-Type': 'application/json',\n\t\t},\n\t\tmethod,\n\t\tqs: query,\n\t\tbody,\n\t\turl: `https://api.unleashedsoftware.com/${paginatedPath}`,\n\t\tjson: true,\n\t};\n\n\tif (Object.keys(body).length === 0) {\n\t\tdelete options.body;\n\t}\n\n\tconst credentials = await this.getCredentials('unleashedSoftwareApi');\n\n\tconst signature = createHmac('sha256', credentials.apiKey as string)\n\t\t.update(qs.stringify(query))\n\t\t.digest('base64');\n\n\toptions.headers = Object.assign({}, headers, {\n\t\t'api-auth-id': credentials.apiId,\n\t\t'api-auth-signature': signature,\n\t});\n\n\ttry {\n\t\treturn await this.helpers.request(options);\n\t} catch (error) {\n\t\tthrow new NodeApiError(this.getNode(), error as JsonObject);\n\t}\n}\n\nexport async function unleashedApiRequestAllItems(\n\tthis: IExecuteFunctions | ILoadOptionsFunctions,\n\tpropertyName: string,\n\tmethod: IHttpRequestMethods,\n\tendpoint: string,\n\tbody: IDataObject = {},\n\tquery: IDataObject = {},\n) {\n\tconst returnData: IDataObject[] = [];\n\tlet responseData;\n\tlet pageNumber = 1;\n\n\tquery.pageSize = 1000;\n\n\tdo {\n\t\tresponseData = await unleashedApiRequest.call(this, method, endpoint, body, query, pageNumber);\n\t\treturnData.push.apply(returnData, responseData[propertyName] as IDataObject[]);\n\t\tpageNumber++;\n\t} while (\n\t\t(responseData.Pagination.PageNumber as number) <\n\t\t(responseData.Pagination.NumberOfPages as number)\n\t);\n\treturn returnData;\n}\n\n//.NET code is serializing dates in the following format: \"/Date(1586833770780)/\"\n//which is useless on JS side and could not treated as a date for other nodes\n//so we need to convert all of the fields that has it.\n\nexport function convertNETDates(item: { [key: string]: any }) {\n\tObject.keys(item).forEach((path) => {\n\t\tconst type = typeof item[path] as string;\n\t\tif (type === 'string') {\n\t\t\tconst value = item[path] as string;\n\t\t\tconst a = /\\/Date\\((\\d*)\\)\\//.exec(value);\n\t\t\tif (a) {\n\t\t\t\titem[path] = new Date(+a[1]);\n\t\t\t}\n\t\t}\n\t\tif (type === 'object' && item[path]) {\n\t\t\tconvertNETDates(item[path] as IDataObject);\n\t\t}\n\t});\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAA2B;AAU3B,0BAA6B;AAC7B,gBAAe;AAEf,eAAsB,oBAErB,QACA,MACA,OAAoB,CAAC,GACrB,QAAqB,CAAC,GACtB,YACA,SACC;AACD,QAAM,gBAAgB,aAAa,IAAI,IAAI,IAAI,UAAU,KAAK,IAAI,IAAI;AAEtE,QAAM,UAA2B;AAAA,IAChC,SAAS;AAAA,MACR,QAAQ;AAAA,MACR,gBAAgB;AAAA,IACjB;AAAA,IACA;AAAA,IACA,IAAI;AAAA,IACJ;AAAA,IACA,KAAK,qCAAqC,aAAa;AAAA,IACvD,MAAM;AAAA,EACP;AAEA,MAAI,OAAO,KAAK,IAAI,EAAE,WAAW,GAAG;AACnC,WAAO,QAAQ;AAAA,EAChB;AAEA,QAAM,cAAc,MAAM,KAAK,eAAe,sBAAsB;AAEpE,QAAM,gBAAY,0BAAW,UAAU,YAAY,MAAgB,EACjE,OAAO,UAAAA,QAAG,UAAU,KAAK,CAAC,EAC1B,OAAO,QAAQ;AAEjB,UAAQ,UAAU,OAAO,OAAO,CAAC,GAAG,SAAS;AAAA,IAC5C,eAAe,YAAY;AAAA,IAC3B,sBAAsB;AAAA,EACvB,CAAC;AAED,MAAI;AACH,WAAO,MAAM,KAAK,QAAQ,QAAQ,OAAO;AAAA,EAC1C,SAAS,OAAO;AACf,UAAM,IAAI,iCAAa,KAAK,QAAQ,GAAG,KAAmB;AAAA,EAC3D;AACD;AAEA,eAAsB,4BAErB,cACA,QACA,UACA,OAAoB,CAAC,GACrB,QAAqB,CAAC,GACrB;AACD,QAAM,aAA4B,CAAC;AACnC,MAAI;AACJ,MAAI,aAAa;AAEjB,QAAM,WAAW;AAEjB,KAAG;AACF,mBAAe,MAAM,oBAAoB,KAAK,MAAM,QAAQ,UAAU,MAAM,OAAO,UAAU;AAC7F,eAAW,KAAK,MAAM,YAAY,aAAa,YAAY,CAAkB;AAC7E;AAAA,EACD,SACE,aAAa,WAAW,aACxB,aAAa,WAAW;AAE1B,SAAO;AACR;AAMO,SAAS,gBAAgB,MAA8B;AAC7D,SAAO,KAAK,IAAI,EAAE,QAAQ,CAAC,SAAS;AACnC,UAAM,OAAO,OAAO,KAAK,IAAI;AAC7B,QAAI,SAAS,UAAU;AACtB,YAAM,QAAQ,KAAK,IAAI;AACvB,YAAM,IAAI,oBAAoB,KAAK,KAAK;AACxC,UAAI,GAAG;AACN,aAAK,IAAI,IAAI,oBAAI,KAAK,CAAC,EAAE,CAAC,CAAC;AAAA,MAC5B;AAAA,IACD;AACA,QAAI,SAAS,YAAY,KAAK,IAAI,GAAG;AACpC,sBAAgB,KAAK,IAAI,CAAgB;AAAA,IAC1C;AAAA,EACD,CAAC;AACF;","names":["qs"]}