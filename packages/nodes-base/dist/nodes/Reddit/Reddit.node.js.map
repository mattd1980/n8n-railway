{"version":3,"sources":["../../../nodes/Reddit/Reddit.node.ts"],"sourcesContent":["import type {\n\tIExecuteFunctions,\n\tIDataObject,\n\tINodeExecutionData,\n\tINodeType,\n\tINodeTypeDescription,\n\tJsonObject,\n} from 'n8n-workflow';\nimport { NodeApiError, NodeConnectionTypes } from 'n8n-workflow';\n\nimport { handleListing, redditApiRequest } from './GenericFunctions';\nimport { postCommentFields, postCommentOperations } from './PostCommentDescription';\nimport { postFields, postOperations } from './PostDescription';\nimport { profileFields, profileOperations } from './ProfileDescription';\nimport { subredditFields, subredditOperations } from './SubredditDescription';\nimport { userFields, userOperations } from './UserDescription';\n\nexport class Reddit implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'Reddit',\n\t\tname: 'reddit',\n\t\ticon: 'file:reddit.svg',\n\t\tgroup: ['transform'],\n\t\tversion: 1,\n\t\tsubtitle: '={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}',\n\t\tdescription: 'Consume the Reddit API',\n\t\tdefaults: {\n\t\t\tname: 'Reddit',\n\t\t},\n\t\tusableAsTool: true,\n\t\tinputs: [NodeConnectionTypes.Main],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tcredentials: [\n\t\t\t{\n\t\t\t\tname: 'redditOAuth2Api',\n\t\t\t\trequired: true,\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tresource: ['postComment', 'post', 'profile'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Resource',\n\t\t\t\tname: 'resource',\n\t\t\t\ttype: 'options',\n\t\t\t\tnoDataExpression: true,\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Post',\n\t\t\t\t\t\tvalue: 'post',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Post Comment',\n\t\t\t\t\t\tvalue: 'postComment',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Profile',\n\t\t\t\t\t\tvalue: 'profile',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Subreddit',\n\t\t\t\t\t\tvalue: 'subreddit',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'User',\n\t\t\t\t\t\tvalue: 'user',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'post',\n\t\t\t},\n\t\t\t...postCommentOperations,\n\t\t\t...postCommentFields,\n\t\t\t...profileOperations,\n\t\t\t...profileFields,\n\t\t\t...subredditOperations,\n\t\t\t...subredditFields,\n\t\t\t...postOperations,\n\t\t\t...postFields,\n\t\t\t...userOperations,\n\t\t\t...userFields,\n\t\t],\n\t};\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t\tconst items = this.getInputData();\n\n\t\tconst resource = this.getNodeParameter('resource', 0);\n\t\tconst operation = this.getNodeParameter('operation', 0);\n\n\t\tlet responseData;\n\t\tconst returnData: INodeExecutionData[] = [];\n\n\t\tfor (let i = 0; i < items.length; i++) {\n\t\t\ttry {\n\t\t\t\t// *********************************************************************\n\t\t\t\t//         post\n\t\t\t\t// *********************************************************************\n\n\t\t\t\tif (resource === 'post') {\n\t\t\t\t\tif (operation === 'create') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//         post: create\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\t// https://www.reddit.com/dev/api/#POST_api_submit\n\n\t\t\t\t\t\tconst qs: IDataObject = {\n\t\t\t\t\t\t\ttitle: this.getNodeParameter('title', i),\n\t\t\t\t\t\t\tsr: this.getNodeParameter('subreddit', i),\n\t\t\t\t\t\t\tkind: this.getNodeParameter('kind', i),\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tqs.kind === 'self'\n\t\t\t\t\t\t\t? (qs.text = this.getNodeParameter('text', i))\n\t\t\t\t\t\t\t: (qs.url = this.getNodeParameter('url', i));\n\n\t\t\t\t\t\tif (qs.url) {\n\t\t\t\t\t\t\tqs.resubmit = this.getNodeParameter('resubmit', i);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await redditApiRequest.call(this, 'POST', 'api/submit', qs);\n\n\t\t\t\t\t\tresponseData = responseData.json.data;\n\t\t\t\t\t} else if (operation === 'delete') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//         post: delete\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\t// https://www.reddit.com/dev/api/#POST_api_del\n\n\t\t\t\t\t\tconst postTypePrefix = 't3_';\n\n\t\t\t\t\t\tconst qs: IDataObject = {\n\t\t\t\t\t\t\tid: postTypePrefix + (this.getNodeParameter('postId', i) as string),\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tawait redditApiRequest.call(this, 'POST', 'api/del', qs);\n\n\t\t\t\t\t\tresponseData = { success: true };\n\t\t\t\t\t} else if (operation === 'get') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//         post: get\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\tconst subreddit = this.getNodeParameter('subreddit', i);\n\t\t\t\t\t\tconst postId = this.getNodeParameter('postId', i) as string;\n\t\t\t\t\t\tconst endpoint = `r/${subreddit}/comments/${postId}.json`;\n\n\t\t\t\t\t\tresponseData = await redditApiRequest.call(this, 'GET', endpoint, {});\n\t\t\t\t\t\tresponseData = responseData[0].data.children[0].data;\n\t\t\t\t\t} else if (operation === 'getAll') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//         post: getAll\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\t// https://www.reddit.com/dev/api/#GET_hot\n\t\t\t\t\t\t// https://www.reddit.com/dev/api/#GET_new\n\t\t\t\t\t\t// https://www.reddit.com/dev/api/#GET_rising\n\t\t\t\t\t\t// https://www.reddit.com/dev/api/#GET_{sort}\n\n\t\t\t\t\t\tconst subreddit = this.getNodeParameter('subreddit', i);\n\t\t\t\t\t\tlet endpoint = `r/${subreddit}.json`;\n\n\t\t\t\t\t\tconst { category } = this.getNodeParameter('filters', i) as { category: string };\n\t\t\t\t\t\tif (category) {\n\t\t\t\t\t\t\tendpoint = `r/${subreddit}/${category}.json`;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await handleListing.call(this, i, endpoint);\n\t\t\t\t\t} else if (operation === 'search') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//         post: search\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\t// https://www.reddit.com/dev/api/#GET_search\n\n\t\t\t\t\t\tconst location = this.getNodeParameter('location', i);\n\n\t\t\t\t\t\tconst qs = {\n\t\t\t\t\t\t\tq: this.getNodeParameter('keyword', i),\n\t\t\t\t\t\t\trestrict_sr: location === 'subreddit',\n\t\t\t\t\t\t} as IDataObject;\n\n\t\t\t\t\t\tconst { sort } = this.getNodeParameter('additionalFields', i);\n\n\t\t\t\t\t\tif (sort) {\n\t\t\t\t\t\t\tqs.sort = sort;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tlet endpoint = '';\n\n\t\t\t\t\t\tif (location === 'allReddit') {\n\t\t\t\t\t\t\tendpoint = 'search.json';\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst subreddit = this.getNodeParameter('subreddit', i);\n\t\t\t\t\t\t\tendpoint = `r/${subreddit}/search.json`;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await handleListing.call(this, i, endpoint, qs);\n\n\t\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', 0);\n\n\t\t\t\t\t\tif (!returnAll) {\n\t\t\t\t\t\t\tconst limit = this.getNodeParameter('limit', 0);\n\t\t\t\t\t\t\tresponseData = responseData.splice(0, limit);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (resource === 'postComment') {\n\t\t\t\t\t// *********************************************************************\n\t\t\t\t\t//        postComment\n\t\t\t\t\t// *********************************************************************\n\n\t\t\t\t\tif (operation === 'create') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//        postComment: create\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\t// https://www.reddit.com/dev/api/#POST_api_comment\n\n\t\t\t\t\t\tconst postTypePrefix = 't3_';\n\n\t\t\t\t\t\tconst qs: IDataObject = {\n\t\t\t\t\t\t\ttext: this.getNodeParameter('commentText', i),\n\t\t\t\t\t\t\tthing_id: postTypePrefix + (this.getNodeParameter('postId', i) as string),\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tresponseData = await redditApiRequest.call(this, 'POST', 'api/comment', qs);\n\t\t\t\t\t\tresponseData = responseData.json.data.things[0].data;\n\t\t\t\t\t} else if (operation === 'getAll') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//        postComment: getAll\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\t// https://www.reddit.com/r/{subrreddit}/comments/{postId}.json\n\n\t\t\t\t\t\tconst subreddit = this.getNodeParameter('subreddit', i);\n\t\t\t\t\t\tconst postId = this.getNodeParameter('postId', i) as string;\n\t\t\t\t\t\tconst endpoint = `r/${subreddit}/comments/${postId}.json`;\n\n\t\t\t\t\t\tresponseData = await handleListing.call(this, i, endpoint);\n\t\t\t\t\t} else if (operation === 'delete') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//        postComment: delete\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\t// https://www.reddit.com/dev/api/#POST_api_del\n\n\t\t\t\t\t\tconst commentTypePrefix = 't1_';\n\n\t\t\t\t\t\tconst qs: IDataObject = {\n\t\t\t\t\t\t\tid: commentTypePrefix + (this.getNodeParameter('commentId', i) as string),\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tawait redditApiRequest.call(this, 'POST', 'api/del', qs);\n\n\t\t\t\t\t\tresponseData = { success: true };\n\t\t\t\t\t} else if (operation === 'reply') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//        postComment: reply\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\t// https://www.reddit.com/dev/api/#POST_api_comment\n\n\t\t\t\t\t\tconst commentTypePrefix = 't1_';\n\n\t\t\t\t\t\tconst qs: IDataObject = {\n\t\t\t\t\t\t\ttext: this.getNodeParameter('replyText', i),\n\t\t\t\t\t\t\tthing_id: commentTypePrefix + (this.getNodeParameter('commentId', i) as string),\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tresponseData = await redditApiRequest.call(this, 'POST', 'api/comment', qs);\n\t\t\t\t\t\tresponseData = responseData.json.data.things[0].data;\n\t\t\t\t\t}\n\t\t\t\t} else if (resource === 'profile') {\n\t\t\t\t\t// *********************************************************************\n\t\t\t\t\t//         profile\n\t\t\t\t\t// *********************************************************************\n\n\t\t\t\t\tif (operation === 'get') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//         profile: get\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\t// https://www.reddit.com/dev/api/#GET_api_v1_me\n\t\t\t\t\t\t// https://www.reddit.com/dev/api/#GET_api_v1_me_karma\n\t\t\t\t\t\t// https://www.reddit.com/dev/api/#GET_api_v1_me_prefs\n\t\t\t\t\t\t// https://www.reddit.com/dev/api/#GET_api_v1_me_trophies\n\t\t\t\t\t\t// https://www.reddit.com/dev/api/#GET_prefs_{where}\n\n\t\t\t\t\t\tconst endpoints: { [key: string]: string } = {\n\t\t\t\t\t\t\tidentity: 'me',\n\t\t\t\t\t\t\tblockedUsers: 'me/blocked',\n\t\t\t\t\t\t\tfriends: 'me/friends',\n\t\t\t\t\t\t\tkarma: 'me/karma',\n\t\t\t\t\t\t\tprefs: 'me/prefs',\n\t\t\t\t\t\t\ttrophies: 'me/trophies',\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tconst details = this.getNodeParameter('details', i) as string;\n\t\t\t\t\t\tconst endpoint = `api/v1/${endpoints[details]}`;\n\t\t\t\t\t\tlet username;\n\n\t\t\t\t\t\tif (details === 'saved') {\n\t\t\t\t\t\t\t({ name: username } = await redditApiRequest.call(this, 'GET', 'api/v1/me', {}));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData =\n\t\t\t\t\t\t\tdetails === 'saved'\n\t\t\t\t\t\t\t\t? await handleListing.call(this, i, `user/${username}/saved.json`)\n\t\t\t\t\t\t\t\t: await redditApiRequest.call(this, 'GET', endpoint, {});\n\n\t\t\t\t\t\tif (details === 'identity') {\n\t\t\t\t\t\t\tresponseData = responseData.features;\n\t\t\t\t\t\t} else if (details === 'friends') {\n\t\t\t\t\t\t\tresponseData = responseData.data.children;\n\t\t\t\t\t\t\tif (!responseData.length) {\n\t\t\t\t\t\t\t\tthrow new NodeApiError(this.getNode(), responseData as JsonObject);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (details === 'karma') {\n\t\t\t\t\t\t\tresponseData = responseData.data;\n\t\t\t\t\t\t\tif (!responseData.length) {\n\t\t\t\t\t\t\t\tthrow new NodeApiError(this.getNode(), responseData as JsonObject);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (details === 'trophies') {\n\t\t\t\t\t\t\tresponseData = responseData.data.trophies.map((trophy: IDataObject) => trophy.data);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (resource === 'subreddit') {\n\t\t\t\t\t// *********************************************************************\n\t\t\t\t\t//        subreddit\n\t\t\t\t\t// *********************************************************************\n\n\t\t\t\t\tif (operation === 'get') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//        subreddit: get\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\t// https://www.reddit.com/dev/api/#GET_r_{subreddit}_about\n\t\t\t\t\t\t// https://www.reddit.com/dev/api/#GET_r_{subreddit}_about_rules\n\n\t\t\t\t\t\tconst subreddit = this.getNodeParameter('subreddit', i);\n\t\t\t\t\t\tconst content = this.getNodeParameter('content', i) as string;\n\t\t\t\t\t\tconst endpoint = `r/${subreddit}/about/${content}.json`;\n\n\t\t\t\t\t\tresponseData = await redditApiRequest.call(this, 'GET', endpoint, {});\n\n\t\t\t\t\t\tif (content === 'rules') {\n\t\t\t\t\t\t\tresponseData = responseData.rules;\n\t\t\t\t\t\t} else if (content === 'about') {\n\t\t\t\t\t\t\tresponseData = responseData.data;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (operation === 'getAll') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//        subreddit: getAll\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\t// https://www.reddit.com/dev/api/#GET_api_trending_subreddits\n\t\t\t\t\t\t// https://www.reddit.com/dev/api/#POST_api_search_subreddits\n\t\t\t\t\t\t// https://www.reddit.com/r/subreddits.json\n\n\t\t\t\t\t\tconst filters = this.getNodeParameter('filters', i);\n\n\t\t\t\t\t\tif (filters.trending) {\n\t\t\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', 0);\n\t\t\t\t\t\t\tconst endpoint = 'api/trending_subreddits.json';\n\t\t\t\t\t\t\tresponseData = await redditApiRequest.call(this, 'GET', endpoint, {});\n\t\t\t\t\t\t\tresponseData = responseData.subreddit_names.map((name: string) => ({ name }));\n\t\t\t\t\t\t\tif (!returnAll) {\n\t\t\t\t\t\t\t\tconst limit = this.getNodeParameter('limit', 0);\n\t\t\t\t\t\t\t\tresponseData = responseData.splice(0, limit);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (filters.keyword) {\n\t\t\t\t\t\t\tconst qs: IDataObject = {};\n\t\t\t\t\t\t\tqs.query = filters.keyword;\n\n\t\t\t\t\t\t\tconst endpoint = 'api/search_subreddits.json';\n\t\t\t\t\t\t\tresponseData = await redditApiRequest.call(this, 'POST', endpoint, qs);\n\n\t\t\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', 0);\n\n\t\t\t\t\t\t\tif (!returnAll) {\n\t\t\t\t\t\t\t\tconst limit = this.getNodeParameter('limit', 0);\n\t\t\t\t\t\t\t\tresponseData = responseData.subreddits.splice(0, limit);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst endpoint = 'r/subreddits.json';\n\t\t\t\t\t\t\tresponseData = await handleListing.call(this, i, endpoint);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (resource === 'user') {\n\t\t\t\t\t// *********************************************************************\n\t\t\t\t\t//           user\n\t\t\t\t\t// *********************************************************************\n\n\t\t\t\t\tif (operation === 'get') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//           user: get\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\t// https://www.reddit.com/dev/api/#GET_user_{username}_{where}\n\n\t\t\t\t\t\tconst username = this.getNodeParameter('username', i) as string;\n\t\t\t\t\t\tconst details = this.getNodeParameter('details', i) as string;\n\t\t\t\t\t\tconst endpoint = `user/${username}/${details}.json`;\n\n\t\t\t\t\t\tresponseData =\n\t\t\t\t\t\t\tdetails === 'about'\n\t\t\t\t\t\t\t\t? await redditApiRequest.call(this, 'GET', endpoint, {})\n\t\t\t\t\t\t\t\t: await handleListing.call(this, i, endpoint);\n\n\t\t\t\t\t\tif (details === 'about') {\n\t\t\t\t\t\t\tresponseData = responseData.data;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\tthis.helpers.returnJsonArray(responseData as JsonObject),\n\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t);\n\n\t\t\t\treturnData.push(...executionData);\n\t\t\t} catch (error) {\n\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\tconst executionErrorData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\tthis.helpers.returnJsonArray({ error: error.message }),\n\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t);\n\t\t\t\t\treturnData.push(...executionErrorData);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\n\t\treturn [returnData];\n\t}\n}\n"],"mappings":"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","names":[]}