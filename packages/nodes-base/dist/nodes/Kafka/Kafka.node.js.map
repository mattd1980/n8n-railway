{"version":3,"sources":["../../../nodes/Kafka/Kafka.node.ts"],"sourcesContent":["import { SchemaRegistry } from '@kafkajs/confluent-schema-registry';\nimport type { KafkaConfig, SASLOptions, TopicMessages } from 'kafkajs';\nimport { CompressionTypes, Kafka as apacheKafka } from 'kafkajs';\nimport type {\n\tIExecuteFunctions,\n\tICredentialDataDecryptedObject,\n\tICredentialsDecrypted,\n\tICredentialTestFunctions,\n\tIDataObject,\n\tINodeCredentialTestResult,\n\tINodeExecutionData,\n\tINodeType,\n\tINodeTypeDescription,\n} from 'n8n-workflow';\nimport { ApplicationError, NodeConnectionTypes, NodeOperationError } from 'n8n-workflow';\n\nimport { generatePairedItemData } from '../../utils/utilities';\n\nexport class Kafka implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'Kafka',\n\t\tname: 'kafka',\n\t\ticon: { light: 'file:kafka.svg', dark: 'file:kafka.dark.svg' },\n\t\tgroup: ['transform'],\n\t\tversion: 1,\n\t\tdescription: 'Sends messages to a Kafka topic',\n\t\tdefaults: {\n\t\t\tname: 'Kafka',\n\t\t},\n\t\tusableAsTool: true,\n\t\tinputs: [NodeConnectionTypes.Main],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tcredentials: [\n\t\t\t{\n\t\t\t\tname: 'kafka',\n\t\t\t\trequired: true,\n\t\t\t\ttestedBy: 'kafkaConnectionTest',\n\t\t\t},\n\t\t],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Topic',\n\t\t\t\tname: 'topic',\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: '',\n\t\t\t\tplaceholder: 'topic-name',\n\t\t\t\tdescription: 'Name of the queue of topic to publish to',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Send Input Data',\n\t\t\t\tname: 'sendInputData',\n\t\t\t\ttype: 'boolean',\n\t\t\t\tdefault: true,\n\t\t\t\tdescription: 'Whether to send the data the node receives as JSON to Kafka',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Message',\n\t\t\t\tname: 'message',\n\t\t\t\ttype: 'string',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tsendInputData: [false],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdefault: '',\n\t\t\t\tdescription: 'The message to be sent',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'JSON Parameters',\n\t\t\t\tname: 'jsonParameters',\n\t\t\t\ttype: 'boolean',\n\t\t\t\tdefault: false,\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Use Schema Registry',\n\t\t\t\tname: 'useSchemaRegistry',\n\t\t\t\ttype: 'boolean',\n\t\t\t\tdefault: false,\n\t\t\t\tdescription: 'Whether to use Confluent Schema Registry',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Schema Registry URL',\n\t\t\t\tname: 'schemaRegistryUrl',\n\t\t\t\ttype: 'string',\n\t\t\t\trequired: true,\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tuseSchemaRegistry: [true],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tplaceholder: 'https://schema-registry-domain:8081',\n\t\t\t\tdefault: '',\n\t\t\t\tdescription: 'URL of the schema registry',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Use Key',\n\t\t\t\tname: 'useKey',\n\t\t\t\ttype: 'boolean',\n\t\t\t\tdefault: false,\n\t\t\t\tdescription: 'Whether to use a message key',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Key',\n\t\t\t\tname: 'key',\n\t\t\t\ttype: 'string',\n\t\t\t\trequired: true,\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tuseKey: [true],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tplaceholder: '',\n\t\t\t\tdefault: '',\n\t\t\t\tdescription: 'The message key',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Event Name',\n\t\t\t\tname: 'eventName',\n\t\t\t\ttype: 'string',\n\t\t\t\trequired: true,\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tuseSchemaRegistry: [true],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdefault: '',\n\t\t\t\tdescription: 'Namespace and Name of Schema in Schema Registry (namespace.name)',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Headers',\n\t\t\t\tname: 'headersUi',\n\t\t\t\tplaceholder: 'Add Header',\n\t\t\t\ttype: 'fixedCollection',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tjsonParameters: [false],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\ttypeOptions: {\n\t\t\t\t\tmultipleValues: true,\n\t\t\t\t},\n\t\t\t\tdefault: {},\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'headerValues',\n\t\t\t\t\t\tdisplayName: 'Header',\n\t\t\t\t\t\tvalues: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdisplayName: 'Key',\n\t\t\t\t\t\t\t\tname: 'key',\n\t\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdisplayName: 'Value',\n\t\t\t\t\t\t\t\tname: 'value',\n\t\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Headers (JSON)',\n\t\t\t\tname: 'headerParametersJson',\n\t\t\t\ttype: 'json',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tjsonParameters: [true],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdefault: '',\n\t\t\t\tdescription: 'Header parameters as JSON (flat object)',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Options',\n\t\t\t\tname: 'options',\n\t\t\t\ttype: 'collection',\n\t\t\t\tdefault: {},\n\t\t\t\tplaceholder: 'Add option',\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Acks',\n\t\t\t\t\t\tname: 'acks',\n\t\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\t\tdefault: false,\n\t\t\t\t\t\tdescription: 'Whether or not producer must wait for acknowledgement from all replicas',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Compression',\n\t\t\t\t\t\tname: 'compression',\n\t\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\t\tdefault: false,\n\t\t\t\t\t\tdescription: 'Whether to send the data in a compressed format using the GZIP codec',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Timeout',\n\t\t\t\t\t\tname: 'timeout',\n\t\t\t\t\t\ttype: 'number',\n\t\t\t\t\t\tdefault: 30000,\n\t\t\t\t\t\tdescription: 'The time to await a response in ms',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t],\n\t};\n\n\tmethods = {\n\t\tcredentialTest: {\n\t\t\tasync kafkaConnectionTest(\n\t\t\t\tthis: ICredentialTestFunctions,\n\t\t\t\tcredential: ICredentialsDecrypted,\n\t\t\t): Promise<INodeCredentialTestResult> {\n\t\t\t\tconst credentials = credential.data as ICredentialDataDecryptedObject;\n\t\t\t\ttry {\n\t\t\t\t\tconst brokers = ((credentials.brokers as string) || '')\n\t\t\t\t\t\t.split(',')\n\t\t\t\t\t\t.map((item) => item.trim());\n\n\t\t\t\t\tconst clientId = credentials.clientId as string;\n\n\t\t\t\t\tconst ssl = credentials.ssl as boolean;\n\n\t\t\t\t\tconst config: KafkaConfig = {\n\t\t\t\t\t\tclientId,\n\t\t\t\t\t\tbrokers,\n\t\t\t\t\t\tssl,\n\t\t\t\t\t};\n\t\t\t\t\tif (credentials.authentication === true) {\n\t\t\t\t\t\tif (!(credentials.username && credentials.password)) {\n\t\t\t\t\t\t\tthrow new ApplicationError('Username and password are required for authentication', {\n\t\t\t\t\t\t\t\tlevel: 'warning',\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconfig.sasl = {\n\t\t\t\t\t\t\tusername: credentials.username as string,\n\t\t\t\t\t\t\tpassword: credentials.password as string,\n\t\t\t\t\t\t\tmechanism: credentials.saslMechanism as string,\n\t\t\t\t\t\t} as SASLOptions;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst kafka = new apacheKafka(config);\n\n\t\t\t\t\tawait kafka.admin().connect();\n\t\t\t\t\tawait kafka.admin().disconnect();\n\t\t\t\t\treturn {\n\t\t\t\t\t\tstatus: 'OK',\n\t\t\t\t\t\tmessage: 'Authentication successful',\n\t\t\t\t\t};\n\t\t\t\t} catch (error) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tstatus: 'Error',\n\t\t\t\t\t\tmessage: error.message,\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t},\n\t\t},\n\t};\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t\tconst items = this.getInputData();\n\t\tconst itemData = generatePairedItemData(items.length);\n\n\t\tconst length = items.length;\n\n\t\tconst topicMessages: TopicMessages[] = [];\n\n\t\tlet responseData: IDataObject[];\n\n\t\ttry {\n\t\t\tconst options = this.getNodeParameter('options', 0);\n\t\t\tconst sendInputData = this.getNodeParameter('sendInputData', 0) as boolean;\n\n\t\t\tconst useSchemaRegistry = this.getNodeParameter('useSchemaRegistry', 0) as boolean;\n\n\t\t\tconst timeout = options.timeout as number;\n\n\t\t\tlet compression = CompressionTypes.None;\n\n\t\t\tconst acks = options.acks === true ? 1 : 0;\n\n\t\t\tif (options.compression === true) {\n\t\t\t\tcompression = CompressionTypes.GZIP;\n\t\t\t}\n\n\t\t\tconst credentials = await this.getCredentials('kafka');\n\n\t\t\tconst brokers = ((credentials.brokers as string) || '').split(',').map((item) => item.trim());\n\n\t\t\tconst clientId = credentials.clientId as string;\n\n\t\t\tconst ssl = credentials.ssl as boolean;\n\n\t\t\tconst config: KafkaConfig = {\n\t\t\t\tclientId,\n\t\t\t\tbrokers,\n\t\t\t\tssl,\n\t\t\t};\n\n\t\t\tif (credentials.authentication === true) {\n\t\t\t\tif (!(credentials.username && credentials.password)) {\n\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t'Username and password are required for authentication',\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tconfig.sasl = {\n\t\t\t\t\tusername: credentials.username as string,\n\t\t\t\t\tpassword: credentials.password as string,\n\t\t\t\t\tmechanism: credentials.saslMechanism as string,\n\t\t\t\t} as SASLOptions;\n\t\t\t}\n\n\t\t\tconst kafka = new apacheKafka(config);\n\n\t\t\tconst producer = kafka.producer();\n\n\t\t\tawait producer.connect();\n\n\t\t\tlet message: string | Buffer;\n\n\t\t\tfor (let i = 0; i < length; i++) {\n\t\t\t\tif (sendInputData) {\n\t\t\t\t\tmessage = JSON.stringify(items[i].json);\n\t\t\t\t} else {\n\t\t\t\t\tmessage = this.getNodeParameter('message', i) as string;\n\t\t\t\t}\n\n\t\t\t\tif (useSchemaRegistry) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst schemaRegistryUrl = this.getNodeParameter('schemaRegistryUrl', 0) as string;\n\t\t\t\t\t\tconst eventName = this.getNodeParameter('eventName', 0) as string;\n\n\t\t\t\t\t\tconst registry = new SchemaRegistry({ host: schemaRegistryUrl });\n\t\t\t\t\t\tconst id = await registry.getLatestSchemaId(eventName);\n\n\t\t\t\t\t\tmessage = await registry.encode(id, JSON.parse(message));\n\t\t\t\t\t} catch (exception) {\n\t\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t\t'Verify your Schema Registry configuration',\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst topic = this.getNodeParameter('topic', i) as string;\n\n\t\t\t\tconst jsonParameters = this.getNodeParameter('jsonParameters', i);\n\n\t\t\t\tconst useKey = this.getNodeParameter('useKey', i) as boolean;\n\n\t\t\t\tconst key = useKey ? (this.getNodeParameter('key', i) as string) : null;\n\n\t\t\t\tlet headers;\n\n\t\t\t\tif (jsonParameters) {\n\t\t\t\t\theaders = this.getNodeParameter('headerParametersJson', i) as string;\n\t\t\t\t\ttry {\n\t\t\t\t\t\theaders = JSON.parse(headers);\n\t\t\t\t\t} catch (exception) {\n\t\t\t\t\t\tthrow new NodeOperationError(this.getNode(), 'Headers must be a valid json');\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tconst values = (this.getNodeParameter('headersUi', i) as IDataObject)\n\t\t\t\t\t\t.headerValues as IDataObject[];\n\t\t\t\t\theaders = {};\n\t\t\t\t\tif (values !== undefined) {\n\t\t\t\t\t\tfor (const value of values) {\n\t\t\t\t\t\t\t//@ts-ignore\n\t\t\t\t\t\t\theaders[value.key] = value.value;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\ttopicMessages.push({\n\t\t\t\t\ttopic,\n\t\t\t\t\tmessages: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvalue: message,\n\t\t\t\t\t\t\theaders,\n\t\t\t\t\t\t\tkey,\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tresponseData = await producer.sendBatch({\n\t\t\t\ttopicMessages,\n\t\t\t\ttimeout,\n\t\t\t\tcompression,\n\t\t\t\tacks,\n\t\t\t});\n\n\t\t\tif (responseData.length === 0) {\n\t\t\t\tresponseData.push({\n\t\t\t\t\tsuccess: true,\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tawait producer.disconnect();\n\n\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\tthis.helpers.returnJsonArray(responseData),\n\t\t\t\t{ itemData },\n\t\t\t);\n\n\t\t\treturn [executionData];\n\t\t} catch (error) {\n\t\t\tif (this.continueOnFail()) {\n\t\t\t\treturn [[{ json: { error: error.message }, pairedItem: itemData }]];\n\t\t\t} else {\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\t}\n}\n"],"mappings":"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","names":["apacheKafka"]}