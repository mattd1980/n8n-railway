{"version":3,"sources":["../../../nodes/Ftp/Ftp.node.ts"],"sourcesContent":["import { createWriteStream } from 'fs';\nimport { BINARY_ENCODING, NodeApiError, NodeConnectionTypes } from 'n8n-workflow';\nimport type {\n\tICredentialDataDecryptedObject,\n\tICredentialsDecrypted,\n\tICredentialTestFunctions,\n\tIDataObject,\n\tIExecuteFunctions,\n\tINodeCredentialTestResult,\n\tINodeExecutionData,\n\tINodeType,\n\tINodeTypeDescription,\n\tJsonObject,\n} from 'n8n-workflow';\nimport { basename, dirname } from 'path';\nimport ftpClient from 'promise-ftp';\nimport sftpClient from 'ssh2-sftp-client';\nimport type { Readable } from 'stream';\nimport { pipeline } from 'stream/promises';\nimport { file as tmpFile } from 'tmp-promise';\n\nimport { formatPrivateKey, generatePairedItemData } from '@utils/utilities';\n\ninterface ReturnFtpItem {\n\ttype: string;\n\tname: string;\n\tsize: number;\n\taccessTime: Date;\n\tmodifyTime: Date;\n\trights: {\n\t\tuser: string;\n\t\tgroup: string;\n\t\tother: string;\n\t};\n\towner: string | number;\n\tgroup: string | number;\n\ttarget: string;\n\tsticky?: boolean;\n\tpath: string;\n}\n\nasync function callRecursiveList(\n\tpath: string,\n\tclient: sftpClient | ftpClient,\n\tnormalizeFunction: (\n\t\tinput: ftpClient.ListingElement & sftpClient.FileInfo,\n\t\tpath: string,\n\t\trecursive?: boolean,\n\t) => void,\n) {\n\tconst pathArray: string[] = [path];\n\tlet currentPath = path;\n\tconst directoryItems: sftpClient.FileInfo[] = [];\n\tlet index = 0;\n\n\tconst prepareAndNormalize = (item: sftpClient.FileInfo) => {\n\t\tif (pathArray[index].endsWith('/')) {\n\t\t\tcurrentPath = `${pathArray[index]}${item.name}`;\n\t\t} else {\n\t\t\tcurrentPath = `${pathArray[index]}/${item.name}`;\n\t\t}\n\n\t\t// Is directory\n\t\tif (item.type === 'd') {\n\t\t\t// ignore . and .. to prevent infinite loop\n\t\t\tif (item.name === '.' || item.name === '..') {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tpathArray.push(currentPath);\n\t\t}\n\n\t\tnormalizeFunction(item as ftpClient.ListingElement & sftpClient.FileInfo, currentPath, true);\n\t\tdirectoryItems.push(item);\n\t};\n\n\tdo {\n\t\tconst returnData: sftpClient.FileInfo[] | Array<string | ftpClient.ListingElement> =\n\t\t\tawait client.list(pathArray[index]);\n\n\t\t// @ts-ignore\n\t\treturnData.map(prepareAndNormalize);\n\t\tindex++;\n\t} while (index <= pathArray.length - 1);\n\n\treturn directoryItems;\n}\n\nasync function recursivelyCreateSftpDirs(sftp: sftpClient, path: string) {\n\tconst dirPath = dirname(path);\n\tconst dirExists = await sftp.exists(dirPath);\n\n\tif (!dirExists) {\n\t\tawait sftp.mkdir(dirPath, true);\n\t}\n}\n\nfunction normalizeSFtpItem(input: sftpClient.FileInfo, path: string, recursive = false) {\n\tconst item = input as unknown as ReturnFtpItem;\n\titem.accessTime = new Date(input.accessTime);\n\titem.modifyTime = new Date(input.modifyTime);\n\titem.path = !recursive ? `${path}${path.endsWith('/') ? '' : '/'}${item.name}` : path;\n}\n\nfunction normalizeFtpItem(input: ftpClient.ListingElement, path: string, recursive = false) {\n\tconst item = input as unknown as ReturnFtpItem;\n\titem.modifyTime = input.date;\n\titem.path = !recursive ? `${path}${path.endsWith('/') ? '' : '/'}${item.name}` : path;\n\t//@ts-ignore\n\titem.date = undefined;\n}\n\nexport class Ftp implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'FTP',\n\t\tname: 'ftp',\n\t\ticon: 'fa:server',\n\t\ticonColor: 'dark-blue',\n\t\tgroup: ['input'],\n\t\tversion: 1,\n\t\tsubtitle: '={{$parameter[\"protocol\"] + \": \" + $parameter[\"operation\"]}}',\n\t\tdescription: 'Transfer files via FTP or SFTP',\n\t\tdefaults: {\n\t\t\tname: 'FTP',\n\t\t\tcolor: '#303050',\n\t\t},\n\t\tinputs: [NodeConnectionTypes.Main],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tcredentials: [\n\t\t\t{\n\t\t\t\t// nodelinter-ignore-next-line\n\t\t\t\tname: 'ftp',\n\t\t\t\trequired: true,\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tprotocol: ['ftp'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\ttestedBy: 'ftpConnectionTest',\n\t\t\t},\n\t\t\t{\n\t\t\t\t// nodelinter-ignore-next-line\n\t\t\t\tname: 'sftp',\n\t\t\t\trequired: true,\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tprotocol: ['sftp'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\ttestedBy: 'sftpConnectionTest',\n\t\t\t},\n\t\t],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Protocol',\n\t\t\t\tname: 'protocol',\n\t\t\t\ttype: 'options',\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'FTP',\n\t\t\t\t\t\tvalue: 'ftp',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'SFTP',\n\t\t\t\t\t\tvalue: 'sftp',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'ftp',\n\t\t\t\tdescription: 'File transfer protocol',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Operation',\n\t\t\t\tname: 'operation',\n\t\t\t\ttype: 'options',\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Delete',\n\t\t\t\t\t\tvalue: 'delete',\n\t\t\t\t\t\tdescription: 'Delete a file/folder',\n\t\t\t\t\t\taction: 'Delete a file or folder',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Download',\n\t\t\t\t\t\tvalue: 'download',\n\t\t\t\t\t\tdescription: 'Download a file',\n\t\t\t\t\t\taction: 'Download a file',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'List',\n\t\t\t\t\t\tvalue: 'list',\n\t\t\t\t\t\tdescription: 'List folder content',\n\t\t\t\t\t\taction: 'List folder content',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Rename',\n\t\t\t\t\t\tvalue: 'rename',\n\t\t\t\t\t\tdescription: 'Rename/move oldPath to newPath',\n\t\t\t\t\t\taction: 'Rename / move a file or folder',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Upload',\n\t\t\t\t\t\tvalue: 'upload',\n\t\t\t\t\t\tdescription: 'Upload a file',\n\t\t\t\t\t\taction: 'Upload a file',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'download',\n\t\t\t\tnoDataExpression: true,\n\t\t\t},\n\n\t\t\t// ----------------------------------\n\t\t\t//         delete\n\t\t\t// ----------------------------------\n\t\t\t{\n\t\t\t\tdisplayName: 'Path',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['delete'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tname: 'path',\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: '',\n\t\t\t\tdescription: 'The file path of the file to delete. Has to contain the full path.',\n\t\t\t\tplaceholder: 'e.g. /public/documents/file-to-delete.txt',\n\t\t\t\trequired: true,\n\t\t\t},\n\n\t\t\t{\n\t\t\t\tdisplayName: 'Options',\n\t\t\t\tname: 'options',\n\t\t\t\ttype: 'collection',\n\t\t\t\tplaceholder: 'Add option',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['delete'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdefault: {},\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Folder',\n\t\t\t\t\t\tname: 'folder',\n\t\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\t\tdefault: false,\n\t\t\t\t\t\tdescription: 'Whether folders can be deleted',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Recursive',\n\t\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\t\tfolder: [true],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\tname: 'recursive',\n\t\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\t\tdefault: false,\n\t\t\t\t\t\tdescription: 'Whether to remove all files and directories in target directory',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\n\t\t\t// ----------------------------------\n\t\t\t//         download\n\t\t\t// ----------------------------------\n\t\t\t{\n\t\t\t\tdisplayName: 'Path',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['download'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tname: 'path',\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: '',\n\t\t\t\tdescription: 'The file path of the file to download. Has to contain the full path.',\n\t\t\t\tplaceholder: 'e.g. /public/documents/file-to-download.txt',\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Put Output File in Field',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['download'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tname: 'binaryPropertyName',\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: 'data',\n\t\t\t\thint: 'The name of the output binary field to put the file in',\n\t\t\t\trequired: true,\n\t\t\t},\n\n\t\t\t// ----------------------------------\n\t\t\t//         rename\n\t\t\t// ----------------------------------\n\t\t\t{\n\t\t\t\tdisplayName: 'Old Path',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['rename'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tname: 'oldPath',\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: '',\n\t\t\t\tplaceholder: 'e.g. /public/documents/old-file.txt',\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'New Path',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['rename'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tname: 'newPath',\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: '',\n\t\t\t\tplaceholder: 'e.g. /public/documents/new-file.txt',\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Options',\n\t\t\t\tname: 'options',\n\t\t\t\ttype: 'collection',\n\t\t\t\tplaceholder: 'Add Field',\n\t\t\t\tdefault: {},\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['rename'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Create Directories',\n\t\t\t\t\t\tname: 'createDirectories',\n\t\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\t\tdefault: false,\n\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t'Whether to recursively create destination directory when renaming an existing file or folder',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\n\t\t\t// ----------------------------------\n\t\t\t//         upload\n\t\t\t// ----------------------------------\n\t\t\t{\n\t\t\t\tdisplayName: 'Path',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['upload'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tname: 'path',\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: '',\n\t\t\t\tdescription: 'The file path of the file to upload. Has to contain the full path.',\n\t\t\t\tplaceholder: 'e.g. /public/documents/file-to-upload.txt',\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Binary File',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['upload'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tname: 'binaryData',\n\t\t\t\ttype: 'boolean',\n\t\t\t\tdefault: true,\n\t\t\t\t// eslint-disable-next-line n8n-nodes-base/node-param-description-boolean-without-whether\n\t\t\t\tdescription: 'The text content of the file to upload',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Input Binary Field',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['upload'],\n\t\t\t\t\t\tbinaryData: [true],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tname: 'binaryPropertyName',\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: 'data',\n\t\t\t\thint: 'The name of the input binary field containing the file to be written',\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'File Content',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['upload'],\n\t\t\t\t\t\tbinaryData: [false],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tname: 'fileContent',\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: '',\n\t\t\t\tdescription: 'The text content of the file to upload',\n\t\t\t},\n\n\t\t\t// ----------------------------------\n\t\t\t//         list\n\t\t\t// ----------------------------------\n\t\t\t{\n\t\t\t\tdisplayName: 'Path',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['list'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tname: 'path',\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: '/',\n\t\t\t\tplaceholder: 'e.g. /public/folder',\n\t\t\t\tdescription: 'Path of directory to list contents of',\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Recursive',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['list'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tname: 'recursive',\n\t\t\t\ttype: 'boolean',\n\t\t\t\tdefault: false,\n\t\t\t\tdescription:\n\t\t\t\t\t'Whether to return object representing all directories / objects recursively found within SFTP server',\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t],\n\t};\n\n\tmethods = {\n\t\tcredentialTest: {\n\t\t\tasync ftpConnectionTest(\n\t\t\t\tthis: ICredentialTestFunctions,\n\t\t\t\tcredential: ICredentialsDecrypted,\n\t\t\t): Promise<INodeCredentialTestResult> {\n\t\t\t\tconst credentials = credential.data as ICredentialDataDecryptedObject;\n\t\t\t\tconst ftp = new ftpClient();\n\t\t\t\ttry {\n\t\t\t\t\tawait ftp.connect({\n\t\t\t\t\t\thost: credentials.host as string,\n\t\t\t\t\t\tport: credentials.port as number,\n\t\t\t\t\t\tuser: credentials.username as string,\n\t\t\t\t\t\tpassword: credentials.password as string,\n\t\t\t\t\t});\n\t\t\t\t} catch (error) {\n\t\t\t\t\tawait ftp.end();\n\t\t\t\t\treturn {\n\t\t\t\t\t\tstatus: 'Error',\n\t\t\t\t\t\tmessage: error.message,\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tawait ftp.end();\n\t\t\t\treturn {\n\t\t\t\t\tstatus: 'OK',\n\t\t\t\t\tmessage: 'Connection successful!',\n\t\t\t\t};\n\t\t\t},\n\t\t\tasync sftpConnectionTest(\n\t\t\t\tthis: ICredentialTestFunctions,\n\t\t\t\tcredential: ICredentialsDecrypted,\n\t\t\t): Promise<INodeCredentialTestResult> {\n\t\t\t\tconst credentials = credential.data as ICredentialDataDecryptedObject;\n\t\t\t\tconst sftp = new sftpClient();\n\t\t\t\ttry {\n\t\t\t\t\tif (credentials.privateKey) {\n\t\t\t\t\t\tawait sftp.connect({\n\t\t\t\t\t\t\thost: credentials.host as string,\n\t\t\t\t\t\t\tport: credentials.port as number,\n\t\t\t\t\t\t\tusername: credentials.username as string,\n\t\t\t\t\t\t\tpassword: (credentials.password as string) || undefined,\n\t\t\t\t\t\t\tprivateKey: formatPrivateKey(credentials.privateKey as string),\n\t\t\t\t\t\t\tpassphrase: credentials.passphrase as string | undefined,\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tawait sftp.connect({\n\t\t\t\t\t\t\thost: credentials.host as string,\n\t\t\t\t\t\t\tport: credentials.port as number,\n\t\t\t\t\t\t\tusername: credentials.username as string,\n\t\t\t\t\t\t\tpassword: credentials.password as string,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\tawait sftp.end();\n\t\t\t\t\treturn {\n\t\t\t\t\t\tstatus: 'Error',\n\t\t\t\t\t\tmessage: error.message,\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tawait sftp.end();\n\t\t\t\treturn {\n\t\t\t\t\tstatus: 'OK',\n\t\t\t\t\tmessage: 'Connection successful!',\n\t\t\t\t};\n\t\t\t},\n\t\t},\n\t};\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t\tconst items = this.getInputData();\n\t\tlet returnItems: INodeExecutionData[] = [];\n\t\tconst operation = this.getNodeParameter('operation', 0);\n\n\t\tlet credentials: ICredentialDataDecryptedObject | undefined = undefined;\n\t\tconst protocol = this.getNodeParameter('protocol', 0) as string;\n\n\t\tif (protocol === 'sftp') {\n\t\t\tcredentials = await this.getCredentials<ICredentialDataDecryptedObject>('sftp');\n\t\t} else {\n\t\t\tcredentials = await this.getCredentials<ICredentialDataDecryptedObject>('ftp');\n\t\t}\n\t\tlet ftp: ftpClient;\n\t\tlet sftp: sftpClient;\n\n\t\ttry {\n\t\t\ttry {\n\t\t\t\tif (protocol === 'sftp') {\n\t\t\t\t\tsftp = new sftpClient();\n\t\t\t\t\tif (credentials.privateKey) {\n\t\t\t\t\t\tawait sftp.connect({\n\t\t\t\t\t\t\thost: credentials.host as string,\n\t\t\t\t\t\t\tport: credentials.port as number,\n\t\t\t\t\t\t\tusername: credentials.username as string,\n\t\t\t\t\t\t\tpassword: (credentials.password as string) || undefined,\n\t\t\t\t\t\t\tprivateKey: formatPrivateKey(credentials.privateKey as string),\n\t\t\t\t\t\t\tpassphrase: credentials.passphrase as string | undefined,\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tawait sftp.connect({\n\t\t\t\t\t\t\thost: credentials.host as string,\n\t\t\t\t\t\t\tport: credentials.port as number,\n\t\t\t\t\t\t\tusername: credentials.username as string,\n\t\t\t\t\t\t\tpassword: credentials.password as string,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tftp = new ftpClient();\n\t\t\t\t\tawait ftp.connect({\n\t\t\t\t\t\thost: credentials.host as string,\n\t\t\t\t\t\tport: credentials.port as number,\n\t\t\t\t\t\tuser: credentials.username as string,\n\t\t\t\t\t\tpassword: credentials.password as string,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\tconst pairedItem = generatePairedItemData(items.length);\n\n\t\t\t\t\treturn [[{ json: { error: error.message }, pairedItem }]];\n\t\t\t\t}\n\t\t\t\tthrow error;\n\t\t\t}\n\n\t\t\tfor (let i = 0; i < items.length; i++) {\n\t\t\t\ttry {\n\t\t\t\t\tconst newItem: INodeExecutionData = {\n\t\t\t\t\t\tjson: items[i].json,\n\t\t\t\t\t\tbinary: {},\n\t\t\t\t\t\tpairedItem: items[i].pairedItem,\n\t\t\t\t\t};\n\n\t\t\t\t\tif (items[i].binary !== undefined && newItem.binary) {\n\t\t\t\t\t\t// Create a shallow copy of the binary data so that the old\n\t\t\t\t\t\t// data references which do not get changed still stay behind\n\t\t\t\t\t\t// but the incoming data does not get changed.\n\t\t\t\t\t\tObject.assign(newItem.binary, items[i].binary);\n\t\t\t\t\t}\n\n\t\t\t\t\titems[i] = newItem;\n\n\t\t\t\t\tif (protocol === 'sftp') {\n\t\t\t\t\t\tif (operation === 'list') {\n\t\t\t\t\t\t\tconst path = this.getNodeParameter('path', i) as string;\n\n\t\t\t\t\t\t\tconst recursive = this.getNodeParameter('recursive', i) as boolean;\n\n\t\t\t\t\t\t\tlet responseData: sftpClient.FileInfo[];\n\t\t\t\t\t\t\tif (recursive) {\n\t\t\t\t\t\t\t\tresponseData = await callRecursiveList(path, sftp!, normalizeSFtpItem);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tresponseData = await sftp!.list(path);\n\t\t\t\t\t\t\t\tresponseData.forEach((item) => normalizeSFtpItem(item, path));\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as unknown as IDataObject[]),\n\t\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\treturnItems = returnItems.concat(executionData);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (operation === 'delete') {\n\t\t\t\t\t\t\tconst path = this.getNodeParameter('path', i) as string;\n\t\t\t\t\t\t\tconst options = this.getNodeParameter('options', i);\n\n\t\t\t\t\t\t\tif (options.folder === true) {\n\t\t\t\t\t\t\t\tawait sftp!.rmdir(path, !!options.recursive);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tawait sftp!.delete(path);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\t\t[{ json: { success: true } }],\n\t\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\treturnItems = returnItems.concat(executionData);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (operation === 'rename') {\n\t\t\t\t\t\t\tconst oldPath = this.getNodeParameter('oldPath', i) as string;\n\t\t\t\t\t\t\tconst { createDirectories = false } = this.getNodeParameter('options', i) as {\n\t\t\t\t\t\t\t\tcreateDirectories: boolean;\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tconst newPath = this.getNodeParameter('newPath', i) as string;\n\n\t\t\t\t\t\t\tif (createDirectories) {\n\t\t\t\t\t\t\t\tawait recursivelyCreateSftpDirs(sftp!, newPath);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tawait sftp!.rename(oldPath, newPath);\n\t\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\t\t[{ json: { success: true } }],\n\t\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\treturnItems = returnItems.concat(executionData);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (operation === 'download') {\n\t\t\t\t\t\t\tconst path = this.getNodeParameter('path', i) as string;\n\t\t\t\t\t\t\tconst binaryFile = await tmpFile({ prefix: 'n8n-sftp-' });\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tawait sftp!.get(path, createWriteStream(binaryFile.path));\n\n\t\t\t\t\t\t\t\tconst dataPropertyNameDownload = this.getNodeParameter('binaryPropertyName', i);\n\t\t\t\t\t\t\t\tconst remoteFilePath = this.getNodeParameter('path', i) as string;\n\n\t\t\t\t\t\t\t\titems[i].binary![dataPropertyNameDownload] = await this.nodeHelpers.copyBinaryFile(\n\t\t\t\t\t\t\t\t\tbinaryFile.path,\n\t\t\t\t\t\t\t\t\tbasename(remoteFilePath),\n\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\t\t\tthis.helpers.returnJsonArray(items[i]),\n\t\t\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\treturnItems = returnItems.concat(executionData);\n\t\t\t\t\t\t\t} finally {\n\t\t\t\t\t\t\t\tawait binaryFile.cleanup();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (operation === 'upload') {\n\t\t\t\t\t\t\tconst remotePath = this.getNodeParameter('path', i) as string;\n\t\t\t\t\t\t\tawait recursivelyCreateSftpDirs(sftp!, remotePath);\n\n\t\t\t\t\t\t\tif (this.getNodeParameter('binaryData', i)) {\n\t\t\t\t\t\t\t\tconst binaryPropertyName = this.getNodeParameter('binaryPropertyName', i);\n\t\t\t\t\t\t\t\tconst binaryData = this.helpers.assertBinaryData(i, binaryPropertyName);\n\n\t\t\t\t\t\t\t\tlet uploadData: Buffer | Readable;\n\t\t\t\t\t\t\t\tif (binaryData.id) {\n\t\t\t\t\t\t\t\t\tuploadData = await this.helpers.getBinaryStream(binaryData.id);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tuploadData = Buffer.from(binaryData.data, BINARY_ENCODING);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tawait sftp!.put(uploadData, remotePath);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t// Is text file\n\t\t\t\t\t\t\t\tconst buffer = Buffer.from(\n\t\t\t\t\t\t\t\t\tthis.getNodeParameter('fileContent', i) as string,\n\t\t\t\t\t\t\t\t\t'utf8',\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tawait sftp!.put(buffer, remotePath);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\t\tthis.helpers.returnJsonArray(items[i]),\n\t\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\treturnItems = returnItems.concat(executionData);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (protocol === 'ftp') {\n\t\t\t\t\t\tif (operation === 'list') {\n\t\t\t\t\t\t\tconst path = this.getNodeParameter('path', i) as string;\n\n\t\t\t\t\t\t\tconst recursive = this.getNodeParameter('recursive', i) as boolean;\n\n\t\t\t\t\t\t\tlet responseData;\n\t\t\t\t\t\t\tif (recursive) {\n\t\t\t\t\t\t\t\tresponseData = await callRecursiveList(path, ftp!, normalizeFtpItem);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tresponseData = await ftp!.list(path);\n\t\t\t\t\t\t\t\tresponseData.forEach((item) =>\n\t\t\t\t\t\t\t\t\tnormalizeFtpItem(item as ftpClient.ListingElement, path),\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as unknown as IDataObject[]),\n\t\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\treturnItems = returnItems.concat(executionData);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (operation === 'delete') {\n\t\t\t\t\t\t\tconst path = this.getNodeParameter('path', i) as string;\n\t\t\t\t\t\t\tconst options = this.getNodeParameter('options', i);\n\n\t\t\t\t\t\t\tif (options.folder === true) {\n\t\t\t\t\t\t\t\tawait ftp!.rmdir(path, !!options.recursive);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tawait ftp!.delete(path);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\t\t[{ json: { success: true } }],\n\t\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\treturnItems = returnItems.concat(executionData);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (operation === 'download') {\n\t\t\t\t\t\t\tconst path = this.getNodeParameter('path', i) as string;\n\t\t\t\t\t\t\tconst binaryFile = await tmpFile({ prefix: 'n8n-sftp-' });\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tconst stream = await ftp!.get(path);\n\t\t\t\t\t\t\t\tawait pipeline(stream, createWriteStream(binaryFile.path));\n\n\t\t\t\t\t\t\t\tconst dataPropertyNameDownload = this.getNodeParameter('binaryPropertyName', i);\n\t\t\t\t\t\t\t\tconst remoteFilePath = this.getNodeParameter('path', i) as string;\n\n\t\t\t\t\t\t\t\titems[i].binary![dataPropertyNameDownload] = await this.nodeHelpers.copyBinaryFile(\n\t\t\t\t\t\t\t\t\tbinaryFile.path,\n\t\t\t\t\t\t\t\t\tbasename(remoteFilePath),\n\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\t\t\tthis.helpers.returnJsonArray(items[i]),\n\t\t\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\treturnItems = returnItems.concat(executionData);\n\t\t\t\t\t\t\t} finally {\n\t\t\t\t\t\t\t\tawait binaryFile.cleanup();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (operation === 'rename') {\n\t\t\t\t\t\t\tconst oldPath = this.getNodeParameter('oldPath', i) as string;\n\t\t\t\t\t\t\tconst newPath = this.getNodeParameter('newPath', i) as string;\n\t\t\t\t\t\t\tconst options = this.getNodeParameter('options', i);\n\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tawait ftp!.rename(oldPath, newPath);\n\t\t\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t\t\tif ([451, 550].includes(error.code) && options.createDirectories) {\n\t\t\t\t\t\t\t\t\tconst dirPath = newPath.replace(basename(newPath), '');\n\t\t\t\t\t\t\t\t\tawait ftp!.mkdir(dirPath, true);\n\t\t\t\t\t\t\t\t\tawait ftp!.rename(oldPath, newPath);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tthrow new NodeApiError(this.getNode(), error as JsonObject);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\t\t[{ json: { success: true } }],\n\t\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\treturnItems = returnItems.concat(executionData);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (operation === 'upload') {\n\t\t\t\t\t\t\tconst remotePath = this.getNodeParameter('path', i) as string;\n\t\t\t\t\t\t\tconst fileName = basename(remotePath);\n\t\t\t\t\t\t\tconst dirPath = remotePath.replace(fileName, '');\n\n\t\t\t\t\t\t\tif (this.getNodeParameter('binaryData', i)) {\n\t\t\t\t\t\t\t\tconst binaryPropertyName = this.getNodeParameter('binaryPropertyName', i);\n\t\t\t\t\t\t\t\tconst binaryData = this.helpers.assertBinaryData(i, binaryPropertyName);\n\n\t\t\t\t\t\t\t\tlet uploadData: Buffer | Readable;\n\t\t\t\t\t\t\t\tif (binaryData.id) {\n\t\t\t\t\t\t\t\t\tuploadData = await this.helpers.getBinaryStream(binaryData.id);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tuploadData = Buffer.from(binaryData.data, BINARY_ENCODING);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\tawait ftp!.put(uploadData, remotePath);\n\t\t\t\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t\t\t\tif (error.code === 553) {\n\t\t\t\t\t\t\t\t\t\t// Create directory\n\t\t\t\t\t\t\t\t\t\tawait ftp!.mkdir(dirPath, true);\n\t\t\t\t\t\t\t\t\t\tawait ftp!.put(uploadData, remotePath);\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tthrow new NodeApiError(this.getNode(), error as JsonObject);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t// Is text file\n\t\t\t\t\t\t\t\tconst buffer = Buffer.from(\n\t\t\t\t\t\t\t\t\tthis.getNodeParameter('fileContent', i) as string,\n\t\t\t\t\t\t\t\t\t'utf8',\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\tawait ftp!.put(buffer, remotePath);\n\t\t\t\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t\t\t\tif (error.code === 553) {\n\t\t\t\t\t\t\t\t\t\t// Create directory\n\t\t\t\t\t\t\t\t\t\tawait ftp!.mkdir(dirPath, true);\n\t\t\t\t\t\t\t\t\t\tawait ftp!.put(buffer, remotePath);\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tthrow new NodeApiError(this.getNode(), error as JsonObject);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\t\tthis.helpers.returnJsonArray(items[i]),\n\t\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\treturnItems = returnItems.concat(executionData);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\t\treturnItems.push({ json: { error: error.message }, pairedItem: { item: i } });\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (protocol === 'sftp') {\n\t\t\t\tawait sftp!.end();\n\t\t\t} else {\n\t\t\t\tawait ftp!.end();\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tif (protocol === 'sftp') {\n\t\t\t\tawait sftp!.end();\n\t\t\t} else {\n\t\t\t\tawait ftp!.end();\n\t\t\t}\n\t\t\tthrow error;\n\t\t}\n\n\t\treturn [returnItems];\n\t}\n}\n"],"mappings":"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","names":["ftpClient","sftpClient","tmpFile"]}