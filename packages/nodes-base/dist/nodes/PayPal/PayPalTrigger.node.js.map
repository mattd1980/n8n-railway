{"version":3,"sources":["../../../nodes/PayPal/PayPalTrigger.node.ts"],"sourcesContent":["import type {\n\tIHookFunctions,\n\tIWebhookFunctions,\n\tIDataObject,\n\tILoadOptionsFunctions,\n\tINodePropertyOptions,\n\tINodeType,\n\tINodeTypeDescription,\n\tIWebhookResponseData,\n\tJsonObject,\n} from 'n8n-workflow';\nimport { NodeApiError, NodeConnectionTypes } from 'n8n-workflow';\n\nimport { payPalApiRequest, upperFist } from './GenericFunctions';\n\nexport class PayPalTrigger implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'PayPal Trigger',\n\t\tname: 'payPalTrigger',\n\t\ticon: 'file:paypal.svg',\n\t\tgroup: ['trigger'],\n\t\tversion: 1,\n\t\tdescription: 'Handle PayPal events via webhooks',\n\t\tdefaults: {\n\t\t\tname: 'PayPal Trigger',\n\t\t},\n\t\tinputs: [],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tcredentials: [\n\t\t\t{\n\t\t\t\tname: 'payPalApi',\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t],\n\t\twebhooks: [\n\t\t\t{\n\t\t\t\tname: 'default',\n\t\t\t\thttpMethod: 'POST',\n\t\t\t\tresponseMode: 'onReceived',\n\t\t\t\tpath: 'webhook',\n\t\t\t},\n\t\t],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Event Names or IDs',\n\t\t\t\tname: 'events',\n\t\t\t\ttype: 'multiOptions',\n\t\t\t\trequired: true,\n\t\t\t\tdefault: [],\n\t\t\t\tdescription:\n\t\t\t\t\t'The event to listen to. Choose from the list, or specify IDs using an <a href=\"https://docs.n8n.io/code/expressions/\">expression</a>.',\n\t\t\t\ttypeOptions: {\n\t\t\t\t\tloadOptionsMethod: 'getEvents',\n\t\t\t\t},\n\t\t\t\toptions: [],\n\t\t\t},\n\t\t],\n\t};\n\n\tmethods = {\n\t\tloadOptions: {\n\t\t\t// Get all the events types to display them to user so that they can\n\t\t\t// select them easily\n\t\t\tasync getEvents(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst returnData: INodePropertyOptions[] = [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: '*',\n\t\t\t\t\t\tvalue: '*',\n\t\t\t\t\t\tdescription: 'Any time any event is triggered (Wildcard Event)',\n\t\t\t\t\t},\n\t\t\t\t];\n\t\t\t\tlet events;\n\t\t\t\ttry {\n\t\t\t\t\tconst endpoint = '/notifications/webhooks-event-types';\n\t\t\t\t\tevents = await payPalApiRequest.call(this, endpoint, 'GET');\n\t\t\t\t} catch (error) {\n\t\t\t\t\tthrow new NodeApiError(this.getNode(), error as JsonObject);\n\t\t\t\t}\n\t\t\t\tfor (const event of events.event_types) {\n\t\t\t\t\tconst eventName = upperFist(event.name as string);\n\t\t\t\t\tconst eventId = event.name;\n\t\t\t\t\tconst eventDescription = event.description;\n\n\t\t\t\t\treturnData.push({\n\t\t\t\t\t\tname: eventName,\n\t\t\t\t\t\tvalue: eventId,\n\t\t\t\t\t\tdescription: eventDescription,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn returnData;\n\t\t\t},\n\t\t},\n\t};\n\n\twebhookMethods = {\n\t\tdefault: {\n\t\t\tasync checkExists(this: IHookFunctions): Promise<boolean> {\n\t\t\t\tconst webhookData = this.getWorkflowStaticData('node');\n\t\t\t\tif (webhookData.webhookId === undefined) {\n\t\t\t\t\t// No webhook id is set so no webhook can exist\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tconst endpoint = `/notifications/webhooks/${webhookData.webhookId}`;\n\t\t\t\ttry {\n\t\t\t\t\tawait payPalApiRequest.call(this, endpoint, 'GET');\n\t\t\t\t} catch (error) {\n\t\t\t\t\tif (error.response && error.response.name === 'INVALID_RESOURCE_ID') {\n\t\t\t\t\t\t// Webhook does not exist\n\t\t\t\t\t\tdelete webhookData.webhookId;\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\tthrow new NodeApiError(this.getNode(), error as JsonObject);\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t},\n\n\t\t\tasync create(this: IHookFunctions): Promise<boolean> {\n\t\t\t\tconst webhookUrl = this.getNodeWebhookUrl('default');\n\t\t\t\tconst events = this.getNodeParameter('events', []) as string[];\n\t\t\t\tconst body = {\n\t\t\t\t\turl: webhookUrl,\n\t\t\t\t\tevent_types: events.map((event) => {\n\t\t\t\t\t\treturn { name: event };\n\t\t\t\t\t}),\n\t\t\t\t};\n\t\t\t\tconst endpoint = '/notifications/webhooks';\n\t\t\t\tconst webhook = await payPalApiRequest.call(this, endpoint, 'POST', body);\n\n\t\t\t\tif (webhook.id === undefined) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tconst webhookData = this.getWorkflowStaticData('node');\n\t\t\t\twebhookData.webhookId = webhook.id as string;\n\t\t\t\treturn true;\n\t\t\t},\n\n\t\t\tasync delete(this: IHookFunctions): Promise<boolean> {\n\t\t\t\tconst webhookData = this.getWorkflowStaticData('node');\n\t\t\t\tif (webhookData.webhookId !== undefined) {\n\t\t\t\t\tconst endpoint = `/notifications/webhooks/${webhookData.webhookId}`;\n\t\t\t\t\ttry {\n\t\t\t\t\t\tawait payPalApiRequest.call(this, endpoint, 'DELETE', {});\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\tdelete webhookData.webhookId;\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t},\n\t\t},\n\t};\n\n\tasync webhook(this: IWebhookFunctions): Promise<IWebhookResponseData> {\n\t\tconst webhookData = this.getWorkflowStaticData('node');\n\t\tconst bodyData = this.getBodyData();\n\t\tconst req = this.getRequestObject();\n\t\tconst headerData = this.getHeaderData() as IDataObject;\n\t\tconst endpoint = '/notifications/verify-webhook-signature';\n\n\t\tconst { env } = await this.getCredentials<{ env: string }>('payPalApi');\n\n\t\t// if sanbox omit verification\n\t\tif (env === 'sanbox') {\n\t\t\treturn {\n\t\t\t\tworkflowData: [this.helpers.returnJsonArray(req.body as IDataObject)],\n\t\t\t};\n\t\t}\n\n\t\tif (\n\t\t\theaderData['paypal-auth-algo'] !== undefined &&\n\t\t\theaderData['paypal-cert-url'] !== undefined &&\n\t\t\theaderData['paypal-transmission-id'] !== undefined &&\n\t\t\theaderData['paypal-transmission-sig'] !== undefined &&\n\t\t\theaderData['paypal-transmission-time'] !== undefined\n\t\t) {\n\t\t\tconst body = {\n\t\t\t\tauth_algo: headerData['paypal-auth-algo'],\n\t\t\t\tcert_url: headerData['paypal-cert-url'],\n\t\t\t\ttransmission_id: headerData['paypal-transmission-id'],\n\t\t\t\ttransmission_sig: headerData['paypal-transmission-sig'],\n\t\t\t\ttransmission_time: headerData['paypal-transmission-time'],\n\t\t\t\twebhook_id: webhookData.webhookId,\n\t\t\t\twebhook_event: bodyData,\n\t\t\t};\n\t\t\tconst webhook = await payPalApiRequest.call(this, endpoint, 'POST', body);\n\t\t\tif (webhook.verification_status !== 'SUCCESS') {\n\t\t\t\treturn {};\n\t\t\t}\n\t\t} else {\n\t\t\treturn {};\n\t\t}\n\t\treturn {\n\t\t\tworkflowData: [this.helpers.returnJsonArray(req.body as IDataObject)],\n\t\t};\n\t}\n}\n"],"mappings":"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","names":[]}