{"version":3,"sources":["../../../nodes/PayPal/PayPal.node.ts"],"sourcesContent":["import type {\n\tIExecuteFunctions,\n\tICredentialsDecrypted,\n\tICredentialTestFunctions,\n\tIDataObject,\n\tINodeCredentialTestResult,\n\tINodeExecutionData,\n\tINodeType,\n\tINodeTypeDescription,\n\tIRequestOptions,\n} from 'n8n-workflow';\nimport { NodeConnectionTypes, NodeOperationError } from 'n8n-workflow';\n\nimport { payPalApiRequest, payPalApiRequestAllItems, validateJSON } from './GenericFunctions';\nimport {\n\tpayoutFields,\n\tpayoutItemFields,\n\tpayoutItemOperations,\n\tpayoutOperations,\n} from './PaymentDescription';\nimport type {\n\tIAmount,\n\tIItem,\n\tIPaymentBatch,\n\tISenderBatchHeader,\n\tRecipientType,\n\tRecipientWallet,\n} from './PaymentInteface';\n\nexport class PayPal implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'PayPal',\n\t\tname: 'payPal',\n\t\ticon: 'file:paypal.svg',\n\t\tgroup: ['output'],\n\t\tversion: 1,\n\t\tsubtitle: '={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}',\n\t\tdescription: 'Consume PayPal API',\n\t\tdefaults: {\n\t\t\tname: 'PayPal',\n\t\t},\n\t\tinputs: [NodeConnectionTypes.Main],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tcredentials: [\n\t\t\t{\n\t\t\t\tname: 'payPalApi',\n\t\t\t\trequired: true,\n\t\t\t\ttestedBy: 'payPalApiTest',\n\t\t\t},\n\t\t],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Resource',\n\t\t\t\tname: 'resource',\n\t\t\t\ttype: 'options',\n\t\t\t\tnoDataExpression: true,\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Payout',\n\t\t\t\t\t\tvalue: 'payout',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Payout Item',\n\t\t\t\t\t\tvalue: 'payoutItem',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'payout',\n\t\t\t},\n\n\t\t\t// Payout\n\t\t\t...payoutOperations,\n\t\t\t...payoutItemOperations,\n\t\t\t...payoutFields,\n\t\t\t...payoutItemFields,\n\t\t],\n\t};\n\n\tmethods = {\n\t\tcredentialTest: {\n\t\t\tasync payPalApiTest(\n\t\t\t\tthis: ICredentialTestFunctions,\n\t\t\t\tcredential: ICredentialsDecrypted,\n\t\t\t): Promise<INodeCredentialTestResult> {\n\t\t\t\tconst credentials = credential.data;\n\t\t\t\tconst clientId = credentials!.clientId;\n\t\t\t\tconst clientSecret = credentials!.secret;\n\t\t\t\tconst environment = credentials!.env;\n\n\t\t\t\tif (!clientId || !clientSecret || !environment) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tstatus: 'Error',\n\t\t\t\t\t\tmessage: 'Connection details not valid: missing credentials',\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\tlet baseUrl = '';\n\t\t\t\tif (environment !== 'live') {\n\t\t\t\t\tbaseUrl = 'https://api-m.sandbox.paypal.com';\n\t\t\t\t} else {\n\t\t\t\t\tbaseUrl = 'https://api-m.paypal.com';\n\t\t\t\t}\n\n\t\t\t\tconst base64Key = Buffer.from(`${clientId}:${clientSecret}`).toString('base64');\n\n\t\t\t\tconst options: IRequestOptions = {\n\t\t\t\t\theaders: {\n\t\t\t\t\t\tAuthorization: `Basic ${base64Key}`,\n\t\t\t\t\t},\n\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\turi: `${baseUrl}/v1/oauth2/token`,\n\t\t\t\t\tform: {\n\t\t\t\t\t\tgrant_type: 'client_credentials',\n\t\t\t\t\t},\n\t\t\t\t};\n\n\t\t\t\ttry {\n\t\t\t\t\tawait this.helpers.request(options);\n\t\t\t\t\treturn {\n\t\t\t\t\t\tstatus: 'OK',\n\t\t\t\t\t\tmessage: 'Authentication successful!',\n\t\t\t\t\t};\n\t\t\t\t} catch (error) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tstatus: 'Error',\n\t\t\t\t\t\tmessage: `Connection details not valid: ${error.message}`,\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t},\n\t\t},\n\t};\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t\tconst items = this.getInputData();\n\t\tconst returnData: INodeExecutionData[] = [];\n\t\tconst length = items.length;\n\t\tlet responseData;\n\t\tconst qs: IDataObject = {};\n\n\t\tconst resource = this.getNodeParameter('resource', 0);\n\t\tconst operation = this.getNodeParameter('operation', 0);\n\n\t\tfor (let i = 0; i < length; i++) {\n\t\t\ttry {\n\t\t\t\tif (resource === 'payout') {\n\t\t\t\t\tif (operation === 'create') {\n\t\t\t\t\t\tconst body: IPaymentBatch = {};\n\t\t\t\t\t\tconst header: ISenderBatchHeader = {};\n\t\t\t\t\t\tconst jsonActive = this.getNodeParameter('jsonParameters', i);\n\t\t\t\t\t\tconst senderBatchId = this.getNodeParameter('senderBatchId', i) as string;\n\t\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i);\n\t\t\t\t\t\theader.sender_batch_id = senderBatchId;\n\t\t\t\t\t\tif (additionalFields.emailSubject) {\n\t\t\t\t\t\t\theader.email_subject = additionalFields.emailSubject as string;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (additionalFields.emailMessage) {\n\t\t\t\t\t\t\theader.email_message = additionalFields.emailMessage as string;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (additionalFields.note) {\n\t\t\t\t\t\t\theader.note = additionalFields.note as string;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbody.sender_batch_header = header;\n\t\t\t\t\t\tif (!jsonActive) {\n\t\t\t\t\t\t\tconst payoutItems: IItem[] = [];\n\t\t\t\t\t\t\tconst itemsValues = (this.getNodeParameter('itemsUi', i) as IDataObject)\n\t\t\t\t\t\t\t\t.itemsValues as IDataObject[];\n\t\t\t\t\t\t\tif (itemsValues && itemsValues.length > 0) {\n\t\t\t\t\t\t\t\titemsValues.forEach((o) => {\n\t\t\t\t\t\t\t\t\tconst payoutItem: IItem = {};\n\t\t\t\t\t\t\t\t\tconst amount: IAmount = {};\n\t\t\t\t\t\t\t\t\tamount.currency = o.currency as string;\n\t\t\t\t\t\t\t\t\tamount.value = parseFloat(o.amount as string);\n\t\t\t\t\t\t\t\t\tpayoutItem.amount = amount;\n\t\t\t\t\t\t\t\t\tpayoutItem.note = (o.note as string) || '';\n\t\t\t\t\t\t\t\t\tpayoutItem.receiver = o.receiverValue as string;\n\t\t\t\t\t\t\t\t\tpayoutItem.recipient_type = o.recipientType as RecipientType;\n\t\t\t\t\t\t\t\t\tpayoutItem.recipient_wallet = o.recipientWallet as RecipientWallet;\n\t\t\t\t\t\t\t\t\tpayoutItem.sender_item_id = (o.senderItemId as string) || '';\n\t\t\t\t\t\t\t\t\tpayoutItems.push(payoutItem);\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\tbody.items = payoutItems;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthrow new NodeOperationError(this.getNode(), 'You must have at least one item.', {\n\t\t\t\t\t\t\t\t\titemIndex: i,\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst itemsJson = validateJSON(this.getNodeParameter('itemsJson', i) as string);\n\t\t\t\t\t\t\tbody.items = itemsJson;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresponseData = await payPalApiRequest.call(this, '/payments/payouts', 'POST', body);\n\t\t\t\t\t}\n\t\t\t\t\tif (operation === 'get') {\n\t\t\t\t\t\tconst payoutBatchId = this.getNodeParameter('payoutBatchId', i) as string;\n\t\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', 0);\n\t\t\t\t\t\tif (returnAll) {\n\t\t\t\t\t\t\tresponseData = await payPalApiRequestAllItems.call(\n\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t'items',\n\t\t\t\t\t\t\t\t`/payments/payouts/${payoutBatchId}`,\n\t\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tqs.page_size = this.getNodeParameter('limit', i);\n\t\t\t\t\t\t\tresponseData = await payPalApiRequest.call(\n\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t`/payments/payouts/${payoutBatchId}`,\n\t\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tresponseData = responseData.items;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (resource === 'payoutItem') {\n\t\t\t\t\tif (operation === 'get') {\n\t\t\t\t\t\tconst payoutItemId = this.getNodeParameter('payoutItemId', i) as string;\n\t\t\t\t\t\tresponseData = await payPalApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t`/payments/payouts-item/${payoutItemId}`,\n\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tif (operation === 'cancel') {\n\t\t\t\t\t\tconst payoutItemId = this.getNodeParameter('payoutItemId', i) as string;\n\t\t\t\t\t\tresponseData = await payPalApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t`/payments/payouts-item/${payoutItemId}/cancel`,\n\t\t\t\t\t\t\t'POST',\n\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t);\n\n\t\t\t\treturnData.push(...executionData);\n\t\t\t} catch (error) {\n\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\tconst executionErrorData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\tthis.helpers.returnJsonArray({ error: error.message }),\n\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t);\n\t\t\t\t\treturnData.push(...executionErrorData);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\t\treturn [returnData];\n\t}\n}\n"],"mappings":"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","names":[]}