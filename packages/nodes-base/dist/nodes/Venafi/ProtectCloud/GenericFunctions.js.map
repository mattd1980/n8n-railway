{"version":3,"sources":["../../../../nodes/Venafi/ProtectCloud/GenericFunctions.ts"],"sourcesContent":["import * as nacl_factory from 'js-nacl';\nimport get from 'lodash/get';\nimport type {\n\tIExecuteFunctions,\n\tILoadOptionsFunctions,\n\tIDataObject,\n\tIHookFunctions,\n\tJsonObject,\n\tIHttpRequestMethods,\n\tIRequestOptions,\n} from 'n8n-workflow';\nimport { NodeApiError } from 'n8n-workflow';\n\nexport async function venafiApiRequest(\n\tthis: IExecuteFunctions | ILoadOptionsFunctions | IHookFunctions,\n\tmethod: IHttpRequestMethods,\n\tresource: string,\n\tbody = {},\n\tqs: IDataObject = {},\n\toption: IDataObject = {},\n): Promise<any> {\n\tconst operation = this.getNodeParameter('operation', 0);\n\tconst credentials = await this.getCredentials('venafiTlsProtectCloudApi');\n\n\tconst region = credentials.region ?? 'cloud';\n\n\tconst options: IRequestOptions = {\n\t\theaders: {\n\t\t\tAccept: 'application/json',\n\t\t\t'content-type': 'application/json',\n\t\t},\n\t\tmethod,\n\t\tbody,\n\t\tqs,\n\t\turi: `https://api.venafi.${region}${resource}`,\n\t\tjson: true,\n\t};\n\n\tif (Object.keys(option).length) {\n\t\tObject.assign(options, option);\n\t}\n\n\t// For cert download we don't need any headers\n\t// If we remove for everything the key fetch fails\n\tif (operation === 'download') {\n\t\t// We need content-type for keystore\n\t\tif (!resource.endsWith('keystore')) {\n\t\t\tdelete options.headers!.Accept;\n\t\t\tdelete options.headers!['content-type'];\n\t\t}\n\t}\n\n\ttry {\n\t\tif (Object.keys(body).length === 0) {\n\t\t\tdelete options.body;\n\t\t}\n\t\treturn await this.helpers.requestWithAuthentication.call(\n\t\t\tthis,\n\t\t\t'venafiTlsProtectCloudApi',\n\t\t\toptions,\n\t\t);\n\t} catch (error) {\n\t\tthrow new NodeApiError(this.getNode(), error as JsonObject);\n\t}\n}\n\nexport async function venafiApiRequestAllItems(\n\tthis: IExecuteFunctions | ILoadOptionsFunctions,\n\tpropertyName: string,\n\tmethod: IHttpRequestMethods,\n\tendpoint: string,\n\n\tbody: IDataObject = {},\n\tquery: IDataObject = {},\n) {\n\tconst returnData: IDataObject[] = [];\n\n\tlet responseData;\n\n\tdo {\n\t\tresponseData = await venafiApiRequest.call(this, method, endpoint, body, query);\n\t\tendpoint = get(responseData, '_links[0].Next');\n\t\treturnData.push.apply(returnData, responseData[propertyName] as IDataObject[]);\n\t} while (responseData._links?.[0].Next);\n\n\treturn returnData;\n}\n\nexport async function encryptPassphrase(\n\tthis: IExecuteFunctions | ILoadOptionsFunctions,\n\tcertificateId: string,\n\tpassphrase: string,\n\tstorePassphrase: string,\n) {\n\tlet dekHash = '';\n\tconst dekResponse = await venafiApiRequest.call(\n\t\tthis,\n\t\t'GET',\n\t\t`/outagedetection/v1/certificates/${certificateId}`,\n\t);\n\n\tif (dekResponse.dekHash) {\n\t\tdekHash = dekResponse.dekHash;\n\t}\n\n\tlet pubKey = '';\n\tconst pubKeyResponse = await venafiApiRequest.call(\n\t\tthis,\n\t\t'GET',\n\t\t`/v1/edgeencryptionkeys/${dekHash}`,\n\t);\n\n\tif (pubKeyResponse.key) {\n\t\tpubKey = pubKeyResponse.key;\n\t}\n\n\tlet encryptedKeyPass = '';\n\tlet encryptedKeyStorePass = '';\n\n\tconst promise = async () => {\n\t\treturn await new Promise((resolve, reject) => {\n\t\t\tnacl_factory.instantiate((nacl: any) => {\n\t\t\t\ttry {\n\t\t\t\t\tconst passphraseUTF8 = nacl.encode_utf8(passphrase) as string;\n\t\t\t\t\tconst keyPassBuffer = nacl.crypto_box_seal(passphraseUTF8, Buffer.from(pubKey, 'base64'));\n\t\t\t\t\tencryptedKeyPass = Buffer.from(keyPassBuffer as Buffer).toString('base64');\n\n\t\t\t\t\tconst storePassphraseUTF8 = nacl.encode_utf8(storePassphrase) as string;\n\t\t\t\t\tconst keyStorePassBuffer = nacl.crypto_box_seal(\n\t\t\t\t\t\tstorePassphraseUTF8,\n\t\t\t\t\t\tBuffer.from(pubKey, 'base64'),\n\t\t\t\t\t);\n\t\t\t\t\tencryptedKeyStorePass = Buffer.from(keyStorePassBuffer as Buffer).toString('base64');\n\n\t\t\t\t\treturn resolve([encryptedKeyPass, encryptedKeyStorePass]);\n\t\t\t\t} catch (error) {\n\t\t\t\t\treturn reject(error);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t};\n\treturn await promise();\n}\n"],"mappings":"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","names":["get"]}