{"version":3,"sources":["../../../nodes/Gitlab/GitlabTrigger.node.ts"],"sourcesContent":["import type {\n\tIHookFunctions,\n\tIWebhookFunctions,\n\tIDataObject,\n\tINodeType,\n\tINodeTypeDescription,\n\tIWebhookResponseData,\n\tJsonObject,\n} from 'n8n-workflow';\nimport { NodeConnectionTypes, NodeApiError } from 'n8n-workflow';\n\nimport { gitlabApiRequest } from './GenericFunctions';\n\nconst GITLAB_EVENTS = [\n\t{\n\t\tname: 'Comment',\n\t\tvalue: 'note',\n\t\tdescription:\n\t\t\t'Triggered when a new comment is made on commits, merge requests, issues, and code snippets',\n\t},\n\t{\n\t\tname: 'Confidential Issues',\n\t\tvalue: 'confidential_issues',\n\t\tdescription: \"Triggered on confidential issues' events\",\n\t},\n\t{\n\t\tname: 'Confidential Comments',\n\t\tvalue: 'confidential_note',\n\t\tdescription: 'Triggered when a confidential comment is made',\n\t},\n\t{\n\t\tname: 'Deployments',\n\t\tvalue: 'deployment',\n\t\tdescription: 'Triggered when a deployment starts/succeeds/fails/is cancelled',\n\t},\n\t{\n\t\tname: 'Issue',\n\t\tvalue: 'issues',\n\t\tdescription:\n\t\t\t'Triggered when a new issue is created or an existing issue was updated/closed/reopened',\n\t},\n\t{\n\t\tname: 'Job',\n\t\tvalue: 'job',\n\t\tdescription: 'Triggered on status change of a job',\n\t},\n\t{\n\t\tname: 'Merge Request',\n\t\tvalue: 'merge_requests',\n\t\tdescription:\n\t\t\t'Triggered when a new merge request is created, an existing merge request was updated/merged/closed or a commit is added in the source branch',\n\t},\n\t{\n\t\tname: 'Pipeline',\n\t\tvalue: 'pipeline',\n\t\tdescription: 'Triggered on status change of Pipeline',\n\t},\n\t{\n\t\tname: 'Push',\n\t\tvalue: 'push',\n\t\tdescription: 'Triggered when you push to the repository except when pushing tags',\n\t},\n\t{\n\t\tname: 'Release',\n\t\tvalue: 'releases',\n\t\tdescription: 'Release events are triggered when a release is created or updated',\n\t},\n\t{\n\t\tname: 'Tag',\n\t\tvalue: 'tag_push',\n\t\tdescription: 'Triggered when you create (or delete) tags to the repository',\n\t},\n\t{\n\t\tname: 'Wiki Page',\n\t\tvalue: 'wiki_page',\n\t\tdescription: 'Triggered when a wiki page is created, updated or deleted',\n\t},\n];\n\nexport class GitlabTrigger implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'GitLab Trigger',\n\t\tname: 'gitlabTrigger',\n\t\ticon: 'file:gitlab.svg',\n\t\tgroup: ['trigger'],\n\t\tversion: 1,\n\t\tsubtitle:\n\t\t\t'={{$parameter[\"owner\"] + \"/\" + $parameter[\"repository\"] + \": \" + $parameter[\"events\"].join(\", \")}}',\n\t\tdescription: 'Starts the workflow when GitLab events occur',\n\t\tdefaults: {\n\t\t\tname: 'GitLab Trigger',\n\t\t},\n\t\tinputs: [],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tcredentials: [\n\t\t\t{\n\t\t\t\tname: 'gitlabApi',\n\t\t\t\trequired: true,\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tauthentication: ['accessToken'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'gitlabOAuth2Api',\n\t\t\t\trequired: true,\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tauthentication: ['oAuth2'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t\twebhooks: [\n\t\t\t{\n\t\t\t\tname: 'default',\n\t\t\t\thttpMethod: 'POST',\n\t\t\t\tresponseMode: 'onReceived',\n\t\t\t\tpath: 'webhook',\n\t\t\t},\n\t\t],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Authentication',\n\t\t\t\tname: 'authentication',\n\t\t\t\ttype: 'options',\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Access Token',\n\t\t\t\t\t\tvalue: 'accessToken',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'OAuth2',\n\t\t\t\t\t\tvalue: 'oAuth2',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'accessToken',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Repository Owner',\n\t\t\t\tname: 'owner',\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: '',\n\t\t\t\trequired: true,\n\t\t\t\tplaceholder: 'n8n-io',\n\t\t\t\tdescription: 'Owner of the repository',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Repository Name',\n\t\t\t\tname: 'repository',\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: '',\n\t\t\t\trequired: true,\n\t\t\t\tplaceholder: 'n8n',\n\t\t\t\tdescription: 'The name of the repository',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Events',\n\t\t\t\tname: 'events',\n\t\t\t\ttype: 'multiOptions',\n\t\t\t\toptions: [\n\t\t\t\t\t...GITLAB_EVENTS,\n\t\t\t\t\t{\n\t\t\t\t\t\tname: '*',\n\t\t\t\t\t\tvalue: '*',\n\t\t\t\t\t\tdescription: 'Any time any event is triggered (Wildcard Event)',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\trequired: true,\n\t\t\t\tdefault: [],\n\t\t\t\tdescription: 'The events to listen to',\n\t\t\t},\n\t\t],\n\t};\n\n\twebhookMethods = {\n\t\tdefault: {\n\t\t\tasync checkExists(this: IHookFunctions): Promise<boolean> {\n\t\t\t\tconst webhookData = this.getWorkflowStaticData('node');\n\n\t\t\t\tif (webhookData.webhookId === undefined) {\n\t\t\t\t\t// No webhook id is set so no webhook can exist\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t// Webhook got created before so check if it still exists\n\t\t\t\tconst owner = this.getNodeParameter('owner') as string;\n\t\t\t\tconst repository = this.getNodeParameter('repository') as string;\n\n\t\t\t\tconst path = `${owner}/${repository}`.replace(/\\//g, '%2F');\n\n\t\t\t\tconst endpoint = `/projects/${path}/hooks/${webhookData.webhookId}`;\n\n\t\t\t\ttry {\n\t\t\t\t\tawait gitlabApiRequest.call(this, 'GET', endpoint, {});\n\t\t\t\t} catch (error) {\n\t\t\t\t\tif (error.cause.httpCode === '404' || error.description.includes('404')) {\n\t\t\t\t\t\t// Webhook does not exist\n\t\t\t\t\t\tdelete webhookData.webhookId;\n\t\t\t\t\t\tdelete webhookData.webhookEvents;\n\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Some error occured\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\n\t\t\t\t// If it did not error then the webhook exists\n\t\t\t\treturn true;\n\t\t\t},\n\t\t\t/**\n\t\t\t * Gitlab API - Add project hook:\n\t\t\t * \thttps://docs.gitlab.com/ee/api/projects.html#add-project-hook\n\t\t\t */\n\t\t\tasync create(this: IHookFunctions): Promise<boolean> {\n\t\t\t\tconst webhookUrl = this.getNodeWebhookUrl('default');\n\n\t\t\t\tconst owner = this.getNodeParameter('owner') as string;\n\t\t\t\tconst repository = this.getNodeParameter('repository') as string;\n\n\t\t\t\tlet eventsArray = this.getNodeParameter('events', []) as string[];\n\t\t\t\tif (eventsArray.includes('*')) {\n\t\t\t\t\teventsArray = GITLAB_EVENTS.map((e) => e.value);\n\t\t\t\t}\n\n\t\t\t\tconst events: { [key: string]: boolean } = {};\n\t\t\t\tfor (const e of eventsArray) {\n\t\t\t\t\tevents[`${e}_events`] = true;\n\t\t\t\t}\n\n\t\t\t\t// gitlab set the push_events to true when the field it's not sent.\n\t\t\t\t// set it to false when it's not picked by the user.\n\t\t\t\tif (events.push_events === undefined) {\n\t\t\t\t\tevents.push_events = false;\n\t\t\t\t}\n\n\t\t\t\tconst path = `${owner}/${repository}`.replace(/\\//g, '%2F');\n\n\t\t\t\tconst endpoint = `/projects/${path}/hooks`;\n\n\t\t\t\tconst body = {\n\t\t\t\t\turl: webhookUrl,\n\t\t\t\t\t...events,\n\t\t\t\t\tenable_ssl_verification: false,\n\t\t\t\t};\n\n\t\t\t\tlet responseData;\n\t\t\t\ttry {\n\t\t\t\t\tresponseData = await gitlabApiRequest.call(this, 'POST', endpoint, body);\n\t\t\t\t} catch (error) {\n\t\t\t\t\tthrow new NodeApiError(this.getNode(), error as JsonObject);\n\t\t\t\t}\n\n\t\t\t\tif (responseData.id === undefined) {\n\t\t\t\t\t// Required data is missing so was not successful\n\t\t\t\t\tthrow new NodeApiError(this.getNode(), responseData as JsonObject, {\n\t\t\t\t\t\tmessage: 'GitLab webhook creation response did not contain the expected data.',\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tconst webhookData = this.getWorkflowStaticData('node');\n\t\t\t\twebhookData.webhookId = responseData.id as string;\n\t\t\t\twebhookData.webhookEvents = eventsArray;\n\n\t\t\t\treturn true;\n\t\t\t},\n\t\t\tasync delete(this: IHookFunctions): Promise<boolean> {\n\t\t\t\tconst webhookData = this.getWorkflowStaticData('node');\n\n\t\t\t\tif (webhookData.webhookId !== undefined) {\n\t\t\t\t\tconst owner = this.getNodeParameter('owner') as string;\n\t\t\t\t\tconst repository = this.getNodeParameter('repository') as string;\n\n\t\t\t\t\tconst path = `${owner}/${repository}`.replace(/\\//g, '%2F');\n\n\t\t\t\t\tconst endpoint = `/projects/${path}/hooks/${webhookData.webhookId}`;\n\t\t\t\t\tconst body = {};\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tawait gitlabApiRequest.call(this, 'DELETE', endpoint, body);\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Remove from the static workflow data so that it is clear\n\t\t\t\t\t// that no webhooks are registered anymore\n\t\t\t\t\tdelete webhookData.webhookId;\n\t\t\t\t\tdelete webhookData.webhookEvents;\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\t\t\t},\n\t\t},\n\t};\n\n\tasync webhook(this: IWebhookFunctions): Promise<IWebhookResponseData> {\n\t\tconst bodyData = this.getBodyData();\n\n\t\tconst returnData: IDataObject[] = [];\n\n\t\treturnData.push({\n\t\t\tbody: bodyData,\n\t\t\theaders: this.getHeaderData(),\n\t\t\tquery: this.getQueryData(),\n\t\t});\n\n\t\treturn {\n\t\t\tworkflowData: [this.helpers.returnJsonArray(returnData)],\n\t\t};\n\t}\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AASA,0BAAkD;AAElD,8BAAiC;AAEjC,MAAM,gBAAgB;AAAA,EACrB;AAAA,IACC,MAAM;AAAA,IACN,OAAO;AAAA,IACP,aACC;AAAA,EACF;AAAA,EACA;AAAA,IACC,MAAM;AAAA,IACN,OAAO;AAAA,IACP,aAAa;AAAA,EACd;AAAA,EACA;AAAA,IACC,MAAM;AAAA,IACN,OAAO;AAAA,IACP,aAAa;AAAA,EACd;AAAA,EACA;AAAA,IACC,MAAM;AAAA,IACN,OAAO;AAAA,IACP,aAAa;AAAA,EACd;AAAA,EACA;AAAA,IACC,MAAM;AAAA,IACN,OAAO;AAAA,IACP,aACC;AAAA,EACF;AAAA,EACA;AAAA,IACC,MAAM;AAAA,IACN,OAAO;AAAA,IACP,aAAa;AAAA,EACd;AAAA,EACA;AAAA,IACC,MAAM;AAAA,IACN,OAAO;AAAA,IACP,aACC;AAAA,EACF;AAAA,EACA;AAAA,IACC,MAAM;AAAA,IACN,OAAO;AAAA,IACP,aAAa;AAAA,EACd;AAAA,EACA;AAAA,IACC,MAAM;AAAA,IACN,OAAO;AAAA,IACP,aAAa;AAAA,EACd;AAAA,EACA;AAAA,IACC,MAAM;AAAA,IACN,OAAO;AAAA,IACP,aAAa;AAAA,EACd;AAAA,EACA;AAAA,IACC,MAAM;AAAA,IACN,OAAO;AAAA,IACP,aAAa;AAAA,EACd;AAAA,EACA;AAAA,IACC,MAAM;AAAA,IACN,OAAO;AAAA,IACP,aAAa;AAAA,EACd;AACD;AAEO,MAAM,cAAmC;AAAA,EAAzC;AACN,uBAAoC;AAAA,MACnC,aAAa;AAAA,MACb,MAAM;AAAA,MACN,MAAM;AAAA,MACN,OAAO,CAAC,SAAS;AAAA,MACjB,SAAS;AAAA,MACT,UACC;AAAA,MACD,aAAa;AAAA,MACb,UAAU;AAAA,QACT,MAAM;AAAA,MACP;AAAA,MACA,QAAQ,CAAC;AAAA,MACT,SAAS,CAAC,wCAAoB,IAAI;AAAA,MAClC,aAAa;AAAA,QACZ;AAAA,UACC,MAAM;AAAA,UACN,UAAU;AAAA,UACV,gBAAgB;AAAA,YACf,MAAM;AAAA,cACL,gBAAgB,CAAC,aAAa;AAAA,YAC/B;AAAA,UACD;AAAA,QACD;AAAA,QACA;AAAA,UACC,MAAM;AAAA,UACN,UAAU;AAAA,UACV,gBAAgB;AAAA,YACf,MAAM;AAAA,cACL,gBAAgB,CAAC,QAAQ;AAAA,YAC1B;AAAA,UACD;AAAA,QACD;AAAA,MACD;AAAA,MACA,UAAU;AAAA,QACT;AAAA,UACC,MAAM;AAAA,UACN,YAAY;AAAA,UACZ,cAAc;AAAA,UACd,MAAM;AAAA,QACP;AAAA,MACD;AAAA,MACA,YAAY;AAAA,QACX;AAAA,UACC,aAAa;AAAA,UACb,MAAM;AAAA,UACN,MAAM;AAAA,UACN,SAAS;AAAA,YACR;AAAA,cACC,MAAM;AAAA,cACN,OAAO;AAAA,YACR;AAAA,YACA;AAAA,cACC,MAAM;AAAA,cACN,OAAO;AAAA,YACR;AAAA,UACD;AAAA,UACA,SAAS;AAAA,QACV;AAAA,QACA;AAAA,UACC,aAAa;AAAA,UACb,MAAM;AAAA,UACN,MAAM;AAAA,UACN,SAAS;AAAA,UACT,UAAU;AAAA,UACV,aAAa;AAAA,UACb,aAAa;AAAA,QACd;AAAA,QACA;AAAA,UACC,aAAa;AAAA,UACb,MAAM;AAAA,UACN,MAAM;AAAA,UACN,SAAS;AAAA,UACT,UAAU;AAAA,UACV,aAAa;AAAA,UACb,aAAa;AAAA,QACd;AAAA,QACA;AAAA,UACC,aAAa;AAAA,UACb,MAAM;AAAA,UACN,MAAM;AAAA,UACN,SAAS;AAAA,YACR,GAAG;AAAA,YACH;AAAA,cACC,MAAM;AAAA,cACN,OAAO;AAAA,cACP,aAAa;AAAA,YACd;AAAA,UACD;AAAA,UACA,UAAU;AAAA,UACV,SAAS,CAAC;AAAA,UACV,aAAa;AAAA,QACd;AAAA,MACD;AAAA,IACD;AAEA,0BAAiB;AAAA,MAChB,SAAS;AAAA,QACR,MAAM,cAAoD;AACzD,gBAAM,cAAc,KAAK,sBAAsB,MAAM;AAErD,cAAI,YAAY,cAAc,QAAW;AAExC,mBAAO;AAAA,UACR;AAGA,gBAAM,QAAQ,KAAK,iBAAiB,OAAO;AAC3C,gBAAM,aAAa,KAAK,iBAAiB,YAAY;AAErD,gBAAM,OAAO,GAAG,KAAK,IAAI,UAAU,GAAG,QAAQ,OAAO,KAAK;AAE1D,gBAAM,WAAW,aAAa,IAAI,UAAU,YAAY,SAAS;AAEjE,cAAI;AACH,kBAAM,yCAAiB,KAAK,MAAM,OAAO,UAAU,CAAC,CAAC;AAAA,UACtD,SAAS,OAAO;AACf,gBAAI,MAAM,MAAM,aAAa,SAAS,MAAM,YAAY,SAAS,KAAK,GAAG;AAExE,qBAAO,YAAY;AACnB,qBAAO,YAAY;AAEnB,qBAAO;AAAA,YACR;AAGA,kBAAM;AAAA,UACP;AAGA,iBAAO;AAAA,QACR;AAAA;AAAA;AAAA;AAAA;AAAA,QAKA,MAAM,SAA+C;AACpD,gBAAM,aAAa,KAAK,kBAAkB,SAAS;AAEnD,gBAAM,QAAQ,KAAK,iBAAiB,OAAO;AAC3C,gBAAM,aAAa,KAAK,iBAAiB,YAAY;AAErD,cAAI,cAAc,KAAK,iBAAiB,UAAU,CAAC,CAAC;AACpD,cAAI,YAAY,SAAS,GAAG,GAAG;AAC9B,0BAAc,cAAc,IAAI,CAAC,MAAM,EAAE,KAAK;AAAA,UAC/C;AAEA,gBAAM,SAAqC,CAAC;AAC5C,qBAAW,KAAK,aAAa;AAC5B,mBAAO,GAAG,CAAC,SAAS,IAAI;AAAA,UACzB;AAIA,cAAI,OAAO,gBAAgB,QAAW;AACrC,mBAAO,cAAc;AAAA,UACtB;AAEA,gBAAM,OAAO,GAAG,KAAK,IAAI,UAAU,GAAG,QAAQ,OAAO,KAAK;AAE1D,gBAAM,WAAW,aAAa,IAAI;AAElC,gBAAM,OAAO;AAAA,YACZ,KAAK;AAAA,YACL,GAAG;AAAA,YACH,yBAAyB;AAAA,UAC1B;AAEA,cAAI;AACJ,cAAI;AACH,2BAAe,MAAM,yCAAiB,KAAK,MAAM,QAAQ,UAAU,IAAI;AAAA,UACxE,SAAS,OAAO;AACf,kBAAM,IAAI,iCAAa,KAAK,QAAQ,GAAG,KAAmB;AAAA,UAC3D;AAEA,cAAI,aAAa,OAAO,QAAW;AAElC,kBAAM,IAAI,iCAAa,KAAK,QAAQ,GAAG,cAA4B;AAAA,cAClE,SAAS;AAAA,YACV,CAAC;AAAA,UACF;AAEA,gBAAM,cAAc,KAAK,sBAAsB,MAAM;AACrD,sBAAY,YAAY,aAAa;AACrC,sBAAY,gBAAgB;AAE5B,iBAAO;AAAA,QACR;AAAA,QACA,MAAM,SAA+C;AACpD,gBAAM,cAAc,KAAK,sBAAsB,MAAM;AAErD,cAAI,YAAY,cAAc,QAAW;AACxC,kBAAM,QAAQ,KAAK,iBAAiB,OAAO;AAC3C,kBAAM,aAAa,KAAK,iBAAiB,YAAY;AAErD,kBAAM,OAAO,GAAG,KAAK,IAAI,UAAU,GAAG,QAAQ,OAAO,KAAK;AAE1D,kBAAM,WAAW,aAAa,IAAI,UAAU,YAAY,SAAS;AACjE,kBAAM,OAAO,CAAC;AAEd,gBAAI;AACH,oBAAM,yCAAiB,KAAK,MAAM,UAAU,UAAU,IAAI;AAAA,YAC3D,SAAS,OAAO;AACf,qBAAO;AAAA,YACR;AAIA,mBAAO,YAAY;AACnB,mBAAO,YAAY;AAAA,UACpB;AAEA,iBAAO;AAAA,QACR;AAAA,MACD;AAAA,IACD;AAAA;AAAA,EAEA,MAAM,UAAgE;AACrE,UAAM,WAAW,KAAK,YAAY;AAElC,UAAM,aAA4B,CAAC;AAEnC,eAAW,KAAK;AAAA,MACf,MAAM;AAAA,MACN,SAAS,KAAK,cAAc;AAAA,MAC5B,OAAO,KAAK,aAAa;AAAA,IAC1B,CAAC;AAED,WAAO;AAAA,MACN,cAAc,CAAC,KAAK,QAAQ,gBAAgB,UAAU,CAAC;AAAA,IACxD;AAAA,EACD;AACD;","names":[]}