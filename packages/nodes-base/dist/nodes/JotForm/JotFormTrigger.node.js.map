{"version":3,"sources":["../../../nodes/JotForm/JotFormTrigger.node.ts"],"sourcesContent":["import type {\n\tIHookFunctions,\n\tIWebhookFunctions,\n\tIDataObject,\n\tILoadOptionsFunctions,\n\tINodePropertyOptions,\n\tINodeType,\n\tINodeTypeDescription,\n\tIWebhookResponseData,\n\tMultiPartFormData,\n} from 'n8n-workflow';\nimport { NodeConnectionTypes, jsonParse } from 'n8n-workflow';\n\nimport { jotformApiRequest } from './GenericFunctions';\n\ninterface IQuestionData {\n\tname: string;\n\ttext: string;\n}\n\nexport class JotFormTrigger implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'JotForm Trigger',\n\t\tname: 'jotFormTrigger',\n\t\t// eslint-disable-next-line n8n-nodes-base/node-class-description-icon-not-svg\n\t\ticon: 'file:jotform.png',\n\t\tgroup: ['trigger'],\n\t\tversion: 1,\n\t\tdescription: 'Handle JotForm events via webhooks',\n\t\tdefaults: {\n\t\t\tname: 'JotForm Trigger',\n\t\t},\n\t\tinputs: [],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tcredentials: [\n\t\t\t{\n\t\t\t\tname: 'jotFormApi',\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t],\n\t\twebhooks: [\n\t\t\t{\n\t\t\t\tname: 'default',\n\t\t\t\thttpMethod: 'POST',\n\t\t\t\tresponseMode: 'onReceived',\n\t\t\t\tpath: 'webhook',\n\t\t\t},\n\t\t],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Form Name or ID',\n\t\t\t\tname: 'form',\n\t\t\t\ttype: 'options',\n\t\t\t\trequired: true,\n\t\t\t\ttypeOptions: {\n\t\t\t\t\tloadOptionsMethod: 'getForms',\n\t\t\t\t},\n\t\t\t\tdefault: '',\n\t\t\t\tdescription:\n\t\t\t\t\t'Choose from the list, or specify an ID using an <a href=\"https://docs.n8n.io/code/expressions/\">expression</a>',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Resolve Data',\n\t\t\t\tname: 'resolveData',\n\t\t\t\ttype: 'boolean',\n\t\t\t\tdefault: true,\n\t\t\t\t// eslint-disable-next-line n8n-nodes-base/node-param-description-boolean-without-whether\n\t\t\t\tdescription:\n\t\t\t\t\t'By default does the webhook-data use internal keys instead of the names. If this option gets activated, it will resolve the keys automatically to the actual names.',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Only Answers',\n\t\t\t\tname: 'onlyAnswers',\n\t\t\t\ttype: 'boolean',\n\t\t\t\tdefault: true,\n\t\t\t\tdescription: 'Whether to return only the answers of the form and not any of the other data',\n\t\t\t},\n\t\t],\n\t};\n\n\tmethods = {\n\t\tloadOptions: {\n\t\t\t// Get all the available forms to display them to user so that they can\n\t\t\t// select them easily\n\t\t\tasync getForms(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst returnData: INodePropertyOptions[] = [];\n\t\t\t\tconst qs: IDataObject = {\n\t\t\t\t\tlimit: 1000,\n\t\t\t\t};\n\t\t\t\tconst forms = await jotformApiRequest.call(this, 'GET', '/user/forms', {}, qs);\n\n\t\t\t\tif (!Array.isArray(forms?.content)) return [];\n\n\t\t\t\tfor (const form of forms.content) {\n\t\t\t\t\tconst formName = form.title;\n\t\t\t\t\tconst formId = form.id;\n\t\t\t\t\treturnData.push({\n\t\t\t\t\t\tname: formName,\n\t\t\t\t\t\tvalue: formId,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn returnData;\n\t\t\t},\n\t\t},\n\t};\n\n\twebhookMethods = {\n\t\tdefault: {\n\t\t\tasync checkExists(this: IHookFunctions): Promise<boolean> {\n\t\t\t\tconst webhookData = this.getWorkflowStaticData('node');\n\t\t\t\tconst formId = this.getNodeParameter('form') as string;\n\t\t\t\tconst endpoint = `/form/${formId}/webhooks`;\n\n\t\t\t\ttry {\n\t\t\t\t\tconst responseData = await jotformApiRequest.call(this, 'GET', endpoint);\n\n\t\t\t\t\tconst webhookUrls = Object.values(responseData.content as IDataObject);\n\t\t\t\t\tconst webhookUrl = this.getNodeWebhookUrl('default');\n\t\t\t\t\tif (!webhookUrls.includes(webhookUrl)) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst webhookIds = Object.keys(responseData.content as IDataObject);\n\t\t\t\t\twebhookData.webhookId = webhookIds[webhookUrls.indexOf(webhookUrl)];\n\t\t\t\t} catch (error) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t},\n\t\t\tasync create(this: IHookFunctions): Promise<boolean> {\n\t\t\t\tconst webhookUrl = this.getNodeWebhookUrl('default');\n\t\t\t\tconst webhookData = this.getWorkflowStaticData('node');\n\t\t\t\tconst formId = this.getNodeParameter('form') as string;\n\t\t\t\tconst endpoint = `/form/${formId}/webhooks`;\n\t\t\t\tconst body: IDataObject = {\n\t\t\t\t\twebhookURL: webhookUrl,\n\t\t\t\t};\n\t\t\t\tconst { content } = await jotformApiRequest.call(this, 'POST', endpoint, body);\n\t\t\t\twebhookData.webhookId = Object.keys(content as IDataObject)[0];\n\t\t\t\treturn true;\n\t\t\t},\n\t\t\tasync delete(this: IHookFunctions): Promise<boolean> {\n\t\t\t\tlet responseData;\n\t\t\t\tconst webhookData = this.getWorkflowStaticData('node');\n\t\t\t\tconst formId = this.getNodeParameter('form') as string;\n\t\t\t\tconst endpoint = `/form/${formId}/webhooks/${webhookData.webhookId}`;\n\t\t\t\ttry {\n\t\t\t\t\tresponseData = await jotformApiRequest.call(this, 'DELETE', endpoint);\n\t\t\t\t} catch (error) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tif (responseData.message !== 'success') {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tdelete webhookData.webhookId;\n\t\t\t\treturn true;\n\t\t\t},\n\t\t},\n\t};\n\n\tasync webhook(this: IWebhookFunctions): Promise<IWebhookResponseData> {\n\t\tconst req = this.getRequestObject() as MultiPartFormData.Request;\n\t\tconst formId = this.getNodeParameter('form') as string;\n\t\tconst resolveData = this.getNodeParameter('resolveData', false) as boolean;\n\t\tconst onlyAnswers = this.getNodeParameter('onlyAnswers', false) as boolean;\n\n\t\tconst { data } = req.body;\n\n\t\tconst rawRequest = jsonParse<any>(data.rawRequest as string);\n\t\tdata.rawRequest = rawRequest;\n\n\t\tlet returnData: IDataObject;\n\t\tif (!resolveData) {\n\t\t\tif (onlyAnswers) {\n\t\t\t\treturnData = data.rawRequest as unknown as IDataObject;\n\t\t\t} else {\n\t\t\t\treturnData = data;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tworkflowData: [this.helpers.returnJsonArray(returnData)],\n\t\t\t};\n\t\t}\n\n\t\t// Resolve the data by requesting the information via API\n\t\tconst endpoint = `/form/${formId}/questions`;\n\t\tconst responseData = await jotformApiRequest.call(this, 'GET', endpoint, {});\n\n\t\t// Create a dictionary to resolve the keys\n\t\tconst questionNames: IDataObject = {};\n\t\tfor (const question of Object.values<IQuestionData>(responseData.content as IQuestionData[])) {\n\t\t\tquestionNames[question.name] = question.text;\n\t\t}\n\n\t\t// Resolve the keys\n\t\tlet questionKey: string;\n\t\tconst questionsData: IDataObject = {};\n\t\tfor (const key of Object.keys(rawRequest as IDataObject)) {\n\t\t\tif (!key.includes('_')) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tquestionKey = key.split('_').slice(1).join('_');\n\t\t\tif (questionNames[questionKey] === undefined) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tquestionsData[questionNames[questionKey] as string] = rawRequest[key];\n\t\t}\n\n\t\tif (onlyAnswers) {\n\t\t\treturnData = questionsData as unknown as IDataObject;\n\t\t} else {\n\t\t\t// @ts-ignore\n\t\t\tdata.rawRequest = questionsData;\n\t\t\treturnData = data;\n\t\t}\n\n\t\treturn {\n\t\t\tworkflowData: [this.helpers.returnJsonArray(returnData)],\n\t\t};\n\t}\n}\n"],"mappings":"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","names":[]}