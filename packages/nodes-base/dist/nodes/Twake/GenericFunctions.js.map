{"version":3,"sources":["../../../nodes/Twake/GenericFunctions.ts"],"sourcesContent":["import type {\n\tIDataObject,\n\tIExecuteFunctions,\n\tIHookFunctions,\n\tIHttpRequestMethods,\n\tILoadOptionsFunctions,\n\tIRequestOptions,\n} from 'n8n-workflow';\n\n/**\n * Make an API request to Twake\n *\n */\nexport async function twakeApiRequest(\n\tthis: IHookFunctions | IExecuteFunctions | ILoadOptionsFunctions,\n\tmethod: IHttpRequestMethods,\n\tresource: string,\n\tbody: object,\n\tquery?: IDataObject,\n\turi?: string,\n) {\n\tconst options: IRequestOptions = {\n\t\theaders: {},\n\t\tmethod,\n\t\tbody,\n\t\tqs: query,\n\t\turi: uri || `https://plugins.twake.app/plugins/n8n${resource}`,\n\t\tjson: true,\n\t};\n\n\t// if (authenticationMethod === 'cloud') {\n\t// } else {\n\t// \tconst credentials = await this.getCredentials('twakeServerApi');\n\t// \toptions.auth = { user: credentials!.publicId as string, pass: credentials!.privateApiKey as string };\n\t// \toptions.uri = `${credentials!.hostUrl}/api/v1${resource}`;\n\t// }\n\n\treturn await this.helpers.requestWithAuthentication.call(this, 'twakeCloudApi', options);\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA,eAAsB,gBAErB,QACA,UACA,MACA,OACA,KACC;AACD,QAAM,UAA2B;AAAA,IAChC,SAAS,CAAC;AAAA,IACV;AAAA,IACA;AAAA,IACA,IAAI;AAAA,IACJ,KAAK,OAAO,wCAAwC,QAAQ;AAAA,IAC5D,MAAM;AAAA,EACP;AASA,SAAO,MAAM,KAAK,QAAQ,0BAA0B,KAAK,MAAM,iBAAiB,OAAO;AACxF;","names":[]}