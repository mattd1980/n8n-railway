{"version":3,"sources":["../../../nodes/Phantombuster/GenericFunctions.ts"],"sourcesContent":["import type {\n\tJsonObject,\n\tIDataObject,\n\tIExecuteFunctions,\n\tILoadOptionsFunctions,\n\tIHttpRequestMethods,\n\tIRequestOptions,\n} from 'n8n-workflow';\nimport { NodeApiError, NodeOperationError } from 'n8n-workflow';\n\nexport async function phantombusterApiRequest(\n\tthis: IExecuteFunctions | ILoadOptionsFunctions,\n\tmethod: IHttpRequestMethods,\n\tpath: string,\n\n\tbody: any = {},\n\tqs: IDataObject = {},\n\t_option = {},\n): Promise<any> {\n\tconst options: IRequestOptions = {\n\t\theaders: {},\n\t\tmethod,\n\t\tbody,\n\t\tqs,\n\t\turi: `https://api.phantombuster.com/api/v2${path}`,\n\t\tjson: true,\n\t};\n\ttry {\n\t\tif (Object.keys(body as IDataObject).length === 0) {\n\t\t\tdelete options.body;\n\t\t}\n\t\treturn await this.helpers.requestWithAuthentication.call(this, 'phantombusterApi', options);\n\t} catch (error) {\n\t\tthrow new NodeApiError(this.getNode(), error as JsonObject);\n\t}\n}\n\nexport function validateJSON(self: IExecuteFunctions, json: string | undefined, name: string) {\n\tlet result;\n\ttry {\n\t\tresult = JSON.parse(json!);\n\t} catch (exception) {\n\t\tthrow new NodeOperationError(self.getNode(), `${name} must provide a valid JSON`);\n\t}\n\treturn result;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA,0BAAiD;AAEjD,eAAsB,wBAErB,QACA,MAEA,OAAY,CAAC,GACb,KAAkB,CAAC,GACnB,UAAU,CAAC,GACI;AACf,QAAM,UAA2B;AAAA,IAChC,SAAS,CAAC;AAAA,IACV;AAAA,IACA;AAAA,IACA;AAAA,IACA,KAAK,uCAAuC,IAAI;AAAA,IAChD,MAAM;AAAA,EACP;AACA,MAAI;AACH,QAAI,OAAO,KAAK,IAAmB,EAAE,WAAW,GAAG;AAClD,aAAO,QAAQ;AAAA,IAChB;AACA,WAAO,MAAM,KAAK,QAAQ,0BAA0B,KAAK,MAAM,oBAAoB,OAAO;AAAA,EAC3F,SAAS,OAAO;AACf,UAAM,IAAI,iCAAa,KAAK,QAAQ,GAAG,KAAmB;AAAA,EAC3D;AACD;AAEO,SAAS,aAAa,MAAyB,MAA0B,MAAc;AAC7F,MAAI;AACJ,MAAI;AACH,aAAS,KAAK,MAAM,IAAK;AAAA,EAC1B,SAAS,WAAW;AACnB,UAAM,IAAI,uCAAmB,KAAK,QAAQ,GAAG,GAAG,IAAI,4BAA4B;AAAA,EACjF;AACA,SAAO;AACR;","names":[]}