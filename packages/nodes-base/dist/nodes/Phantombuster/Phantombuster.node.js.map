{"version":3,"sources":["../../../nodes/Phantombuster/Phantombuster.node.ts"],"sourcesContent":["import {\n\ttype IExecuteFunctions,\n\ttype IDataObject,\n\ttype ILoadOptionsFunctions,\n\ttype INodeExecutionData,\n\ttype INodePropertyOptions,\n\ttype INodeType,\n\ttype INodeTypeDescription,\n\tNodeConnectionTypes,\n} from 'n8n-workflow';\n\nimport { agentFields, agentOperations } from './AgentDescription';\nimport { phantombusterApiRequest, validateJSON } from './GenericFunctions';\n\n// import {\n// \tsentenceCase,\n// } from 'change-case';\n\nexport class Phantombuster implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'Phantombuster',\n\t\tname: 'phantombuster',\n\t\t// eslint-disable-next-line n8n-nodes-base/node-class-description-icon-not-svg\n\t\ticon: 'file:phantombuster.png',\n\t\tgroup: ['input'],\n\t\tversion: 1,\n\t\tsubtitle: '={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}',\n\t\tdescription: 'Consume Phantombuster API',\n\t\tdefaults: {\n\t\t\tname: 'Phantombuster',\n\t\t},\n\t\tusableAsTool: true,\n\t\tinputs: [NodeConnectionTypes.Main],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tcredentials: [\n\t\t\t{\n\t\t\t\tname: 'phantombusterApi',\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Resource',\n\t\t\t\tname: 'resource',\n\t\t\t\ttype: 'options',\n\t\t\t\tnoDataExpression: true,\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Agent',\n\t\t\t\t\t\tvalue: 'agent',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'agent',\n\t\t\t},\n\t\t\t...agentOperations,\n\t\t\t...agentFields,\n\t\t],\n\t};\n\n\tmethods = {\n\t\tloadOptions: {\n\t\t\tasync getAgents(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst returnData: INodePropertyOptions[] = [];\n\n\t\t\t\tconst responseData = await phantombusterApiRequest.call(this, 'GET', '/agents/fetch-all');\n\n\t\t\t\tfor (const item of responseData) {\n\t\t\t\t\treturnData.push({\n\t\t\t\t\t\tname: item.name,\n\t\t\t\t\t\tvalue: item.id,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn returnData;\n\t\t\t},\n\n\t\t\t// Get all the arguments to display them to user so that they can\n\t\t\t// select them easily\n\t\t\t// async getArguments(\n\t\t\t// \tthis: ILoadOptionsFunctions,\n\t\t\t// ): Promise<INodePropertyOptions[]> {\n\t\t\t// \tconst returnData: INodePropertyOptions[] = [];\n\t\t\t// \tconst agentId = this.getCurrentNodeParameter('agentId') as string;\n\n\t\t\t// \tconst { argument } = await phantombusterApiRequest.call(\n\t\t\t// \t\tthis,\n\t\t\t// \t\t'GET',\n\t\t\t// \t\t'/agents/fetch',\n\t\t\t// \t\t{},\n\t\t\t// \t\t{ id: agentId },\n\t\t\t// \t);\n\n\t\t\t// \tfor (const key of Object.keys(JSON.parse(argument))) {\n\t\t\t// \t\treturnData.push({\n\t\t\t// \t\t\tname: sentenceCase(key),\n\t\t\t// \t\t\tvalue: key,\n\t\t\t// \t\t});\n\t\t\t// \t}\n\t\t\t// \treturn returnData;\n\t\t\t// },\n\t\t},\n\t};\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t\tconst items = this.getInputData();\n\t\tconst returnData: INodeExecutionData[] = [];\n\t\tconst length = items.length;\n\t\tconst qs: IDataObject = {};\n\t\tlet responseData;\n\t\tconst resource = this.getNodeParameter('resource', 0);\n\t\tconst operation = this.getNodeParameter('operation', 0);\n\t\tfor (let i = 0; i < length; i++) {\n\t\t\ttry {\n\t\t\t\tif (resource === 'agent') {\n\t\t\t\t\t//https://hub.phantombuster.com/reference#post_agents-delete-1\n\t\t\t\t\tif (operation === 'delete') {\n\t\t\t\t\t\tconst agentId = this.getNodeParameter('agentId', i) as string;\n\n\t\t\t\t\t\tresponseData = await phantombusterApiRequest.call(this, 'POST', '/agents/delete', {\n\t\t\t\t\t\t\tid: agentId,\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tresponseData = { success: true };\n\t\t\t\t\t}\n\t\t\t\t\t//https://hub.phantombuster.com/reference#get_agents-fetch-1\n\t\t\t\t\tif (operation === 'get') {\n\t\t\t\t\t\tconst agentId = this.getNodeParameter('agentId', i) as string;\n\n\t\t\t\t\t\tresponseData = await phantombusterApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t'/agents/fetch',\n\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t{ id: agentId },\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\t//https://hub.phantombuster.com/reference#get_agents-fetch-output-1\n\t\t\t\t\tif (operation === 'getOutput') {\n\t\t\t\t\t\tconst agentId = this.getNodeParameter('agentId', i) as string;\n\n\t\t\t\t\t\tconst resolveData = this.getNodeParameter('resolveData', i);\n\n\t\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i);\n\n\t\t\t\t\t\tObject.assign(qs, additionalFields);\n\n\t\t\t\t\t\tqs.id = agentId;\n\n\t\t\t\t\t\tresponseData = await phantombusterApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t'/agents/fetch-output',\n\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tif (resolveData) {\n\t\t\t\t\t\t\tconst { resultObject } = await phantombusterApiRequest.call(\n\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t\t'/containers/fetch-result-object',\n\t\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t\t{ id: responseData.containerId },\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tif (resultObject === null) {\n\t\t\t\t\t\t\t\tresponseData = {};\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tresponseData = JSON.parse(resultObject as string);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t//https://api.phantombuster.com/api/v2/agents/fetch-all\n\t\t\t\t\tif (operation === 'getAll') {\n\t\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', i);\n\n\t\t\t\t\t\tresponseData = await phantombusterApiRequest.call(this, 'GET', '/agents/fetch-all');\n\n\t\t\t\t\t\tif (!returnAll) {\n\t\t\t\t\t\t\tconst limit = this.getNodeParameter('limit', 0);\n\t\t\t\t\t\t\tresponseData = responseData.splice(0, limit);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t//https://hub.phantombuster.com/reference#post_agents-launch-1\n\t\t\t\t\tif (operation === 'launch') {\n\t\t\t\t\t\tconst agentId = this.getNodeParameter('agentId', i) as string;\n\n\t\t\t\t\t\tconst jsonParameters = this.getNodeParameter('jsonParameters', i);\n\n\t\t\t\t\t\tconst resolveData = this.getNodeParameter('resolveData', i);\n\n\t\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i);\n\n\t\t\t\t\t\tconst body: IDataObject = {\n\t\t\t\t\t\t\tid: agentId,\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tif (jsonParameters) {\n\t\t\t\t\t\t\tif (additionalFields.argumentsJson) {\n\t\t\t\t\t\t\t\tbody.arguments = validateJSON(\n\t\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t\tadditionalFields.argumentsJson as string,\n\t\t\t\t\t\t\t\t\t'Arguments',\n\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\tdelete additionalFields.argumentsJson;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (additionalFields.bonusArgumentJson) {\n\t\t\t\t\t\t\t\tbody.bonusArgument = validateJSON(\n\t\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t\tadditionalFields.bonusArgumentJson as string,\n\t\t\t\t\t\t\t\t\t'Bonus Argument',\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tdelete additionalFields.bonusArgumentJson;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst argumentParameters =\n\t\t\t\t\t\t\t\t((additionalFields.argumentsUi as IDataObject)?.argumentValues as IDataObject[]) ||\n\t\t\t\t\t\t\t\t[];\n\t\t\t\t\t\t\tbody.arguments = argumentParameters.reduce((object, currentValue) => {\n\t\t\t\t\t\t\t\tobject[currentValue.key as string] = currentValue.value;\n\t\t\t\t\t\t\t\treturn object;\n\t\t\t\t\t\t\t}, {});\n\t\t\t\t\t\t\tdelete additionalFields.argumentsUi;\n\n\t\t\t\t\t\t\tconst bonusParameters =\n\t\t\t\t\t\t\t\t((additionalFields.bonusArgumentUi as IDataObject)\n\t\t\t\t\t\t\t\t\t?.bonusArgumentValue as IDataObject[]) || [];\n\t\t\t\t\t\t\tbody.bonusArgument = bonusParameters.reduce((object, currentValue) => {\n\t\t\t\t\t\t\t\tobject[currentValue.key as string] = currentValue.value;\n\t\t\t\t\t\t\t\treturn object;\n\t\t\t\t\t\t\t}, {});\n\t\t\t\t\t\t\tdelete additionalFields.bonusArgumentUi;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tObject.assign(body, additionalFields);\n\n\t\t\t\t\t\tresponseData = await phantombusterApiRequest.call(this, 'POST', '/agents/launch', body);\n\n\t\t\t\t\t\tif (resolveData) {\n\t\t\t\t\t\t\tresponseData = await phantombusterApiRequest.call(\n\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t\t'/containers/fetch',\n\t\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t\t{ id: responseData.containerId },\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t);\n\t\t\t\treturnData.push(...executionData);\n\t\t\t} catch (error) {\n\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\tthis.helpers.returnJsonArray({ error: error.message }),\n\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t);\n\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\t\treturn [returnData];\n\t}\n}\n"],"mappings":"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","names":[]}