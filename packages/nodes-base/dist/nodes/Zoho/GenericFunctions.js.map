{"version":3,"sources":["../../../nodes/Zoho/GenericFunctions.ts"],"sourcesContent":["import flow from 'lodash/flow';\nimport sortBy from 'lodash/sortBy';\nimport type {\n\tIExecuteFunctions,\n\tIHookFunctions,\n\tIDataObject,\n\tILoadOptionsFunctions,\n\tJsonObject,\n\tIHttpRequestMethods,\n\tIRequestOptions,\n} from 'n8n-workflow';\nimport { NodeApiError, NodeOperationError } from 'n8n-workflow';\n\nimport type {\n\tAllFields,\n\tCamelCaseResource,\n\tDateType,\n\tGetAllFilterOptions,\n\tIdType,\n\tLoadedFields,\n\tLoadedLayouts,\n\tLocationType,\n\tNameType,\n\tProductDetails,\n\tResourceItems,\n\tSnakeCaseResource,\n\tZohoOAuth2ApiCredentials,\n} from './types';\n\nexport function throwOnErrorStatus(\n\tthis: IExecuteFunctions | IHookFunctions | ILoadOptionsFunctions,\n\tresponseData: {\n\t\tdata?: Array<{ status: string; message: string }>;\n\t},\n) {\n\tif (responseData?.data?.[0].status === 'error') {\n\t\tthrow new NodeOperationError(this.getNode(), responseData as Error);\n\t}\n}\n\nexport async function zohoApiRequest(\n\tthis: IExecuteFunctions | IHookFunctions | ILoadOptionsFunctions,\n\tmethod: IHttpRequestMethods,\n\tendpoint: string,\n\tbody: IDataObject = {},\n\tqs: IDataObject = {},\n\turi?: string,\n) {\n\tconst { oauthTokenData } = await this.getCredentials<ZohoOAuth2ApiCredentials>('zohoOAuth2Api');\n\n\tconst options: IRequestOptions = {\n\t\tbody: {\n\t\t\tdata: [body],\n\t\t},\n\t\tmethod,\n\t\tqs,\n\t\turi: uri || `${oauthTokenData.api_domain}/crm/v2${endpoint}`,\n\t\tjson: true,\n\t};\n\n\tif (!Object.keys(body).length) {\n\t\tdelete options.body;\n\t}\n\n\tif (!Object.keys(qs).length) {\n\t\tdelete options.qs;\n\t}\n\n\ttry {\n\t\tconst responseData = await this.helpers.requestOAuth2?.call(this, 'zohoOAuth2Api', options);\n\t\tif (responseData === undefined) return [];\n\t\tthrowOnErrorStatus.call(this, responseData as IDataObject);\n\n\t\treturn responseData;\n\t} catch (error) {\n\t\tconst args = error.cause?.data\n\t\t\t? {\n\t\t\t\t\tmessage: error.cause.data.message || 'The Zoho API returned an error.',\n\t\t\t\t\tdescription: JSON.stringify(error.cause.data, null, 2),\n\t\t\t\t}\n\t\t\t: undefined;\n\t\tthrow new NodeApiError(this.getNode(), error as JsonObject, args);\n\t}\n}\n\n/**\n * Make an authenticated API request to Zoho CRM API and return all items.\n */\nexport async function zohoApiRequestAllItems(\n\tthis: IHookFunctions | IExecuteFunctions | ILoadOptionsFunctions,\n\tmethod: IHttpRequestMethods,\n\tendpoint: string,\n\tbody: IDataObject = {},\n\tqs: IDataObject = {},\n) {\n\tconst returnData: IDataObject[] = [];\n\n\tlet responseData;\n\tqs.per_page = 200;\n\tqs.page = 1;\n\n\tdo {\n\t\tresponseData = await zohoApiRequest.call(this, method, endpoint, body, qs);\n\t\tif (Array.isArray(responseData) && !responseData.length) return returnData;\n\t\treturnData.push(...(responseData.data as IDataObject[]));\n\t\tqs.page++;\n\t} while (responseData.info.more_records !== undefined && responseData.info.more_records === true);\n\n\treturn returnData;\n}\n\n/**\n * Handle a Zoho CRM API listing by returning all items or up to a limit.\n */\nexport async function handleListing(\n\tthis: IExecuteFunctions,\n\tmethod: IHttpRequestMethods,\n\tendpoint: string,\n\tbody: IDataObject = {},\n\tqs: IDataObject = {},\n) {\n\tconst returnAll = this.getNodeParameter('returnAll', 0);\n\n\tif (returnAll) {\n\t\treturn await zohoApiRequestAllItems.call(this, method, endpoint, body, qs);\n\t}\n\n\tconst responseData = await zohoApiRequestAllItems.call(this, method, endpoint, body, qs);\n\tconst limit = this.getNodeParameter('limit', 0);\n\n\treturn responseData.slice(0, limit);\n}\n\nexport function throwOnEmptyUpdate(this: IExecuteFunctions, resource: CamelCaseResource) {\n\tthrow new NodeOperationError(\n\t\tthis.getNode(),\n\t\t`Please enter at least one field to update for the ${resource}.`,\n\t);\n}\n\nexport function throwOnMissingProducts(\n\tthis: IExecuteFunctions,\n\tresource: CamelCaseResource,\n\tproductDetails: ProductDetails,\n) {\n\tif (!productDetails.length) {\n\t\tthrow new NodeOperationError(\n\t\t\tthis.getNode(),\n\t\t\t`Please enter at least one product for the ${resource}.`,\n\t\t);\n\t}\n}\n\n// ----------------------------------------\n//        required field adjusters\n// ----------------------------------------\n\n/**\n * Create a copy of an object without a specific property.\n */\nconst omit = (propertyToOmit: string, { [propertyToOmit]: _, ...remainingObject }) =>\n\tremainingObject;\n\n/**\n * Place a product ID at a nested position in a product details field.\n */\nexport const adjustProductDetails = (productDetails: ProductDetails, operation?: string) => {\n\treturn productDetails.map((p) => {\n\t\tconst adjustedProduct = {\n\t\t\tproduct: { id: p.id },\n\t\t\tquantity: p.quantity || 1,\n\t\t};\n\n\t\tif (operation === 'upsert') {\n\t\t\treturn { ...adjustedProduct, ...omit('id', p) };\n\t\t} else {\n\t\t\treturn { ...adjustedProduct, ...omit('product', p) };\n\t\t}\n\t});\n};\n\n// ----------------------------------------\n//        additional field adjusters\n// ----------------------------------------\n\n/**\n * Place a product ID at a nested position in a product details field.\n *\n * Only for updating products from Invoice, Purchase Order, Quote, and Sales Order.\n */\nexport const adjustProductDetailsOnUpdate = (allFields: AllFields) => {\n\tif (!allFields.Product_Details) return allFields;\n\n\treturn allFields.Product_Details.map((p) => {\n\t\treturn {\n\t\t\t...omit('product', p),\n\t\t\tproduct: { id: p.id },\n\t\t\tquantity: p.quantity || 1,\n\t\t};\n\t});\n};\n\n/**\n * Place a location field's contents at the top level of the payload.\n */\nconst adjustLocationFields = (locationType: LocationType) => (allFields: AllFields) => {\n\tconst locationField = allFields[locationType];\n\n\tif (!locationField) return allFields;\n\n\treturn {\n\t\t...omit(locationType, allFields),\n\t\t...locationField.address_fields,\n\t};\n};\n\nconst adjustAddressFields = adjustLocationFields('Address');\nconst adjustBillingAddressFields = adjustLocationFields('Billing_Address');\nconst adjustMailingAddressFields = adjustLocationFields('Mailing_Address');\nconst adjustShippingAddressFields = adjustLocationFields('Shipping_Address');\nconst adjustOtherAddressFields = adjustLocationFields('Other_Address');\n\n/**\n * Remove from a date field the timestamp set by the datepicker.\n */\nconst adjustDateField = (dateType: DateType) => (allFields: AllFields) => {\n\tconst dateField = allFields[dateType];\n\n\tif (!dateField) return allFields;\n\n\tallFields[dateType] = dateField.split('T')[0];\n\n\treturn allFields;\n};\n\nconst adjustDateOfBirthField = adjustDateField('Date_of_Birth');\nconst adjustClosingDateField = adjustDateField('Closing_Date');\nconst adjustInvoiceDateField = adjustDateField('Invoice_Date');\nconst adjustDueDateField = adjustDateField('Due_Date');\nconst adjustPurchaseOrderDateField = adjustDateField('PO_Date');\nconst adjustValidTillField = adjustDateField('Valid_Till');\n\n/**\n * Place an ID field's value nested inside the payload.\n */\nconst adjustIdField = (idType: IdType, nameProperty: NameType) => (allFields: AllFields) => {\n\tconst idValue = allFields[idType];\n\n\tif (!idValue) return allFields;\n\n\treturn {\n\t\t...omit(idType, allFields),\n\t\t[nameProperty]: { id: idValue },\n\t};\n};\n\nconst adjustAccountIdField = adjustIdField('accountId', 'Account_Name');\nconst adjustContactIdField = adjustIdField('contactId', 'Full_Name');\nconst adjustDealIdField = adjustIdField('dealId', 'Deal_Name');\n\nconst adjustCustomFields = (allFields: AllFields) => {\n\tconst { customFields, ...rest } = allFields;\n\n\tif (!customFields?.customFields.length) return allFields;\n\n\treturn customFields.customFields.reduce((acc, cur) => {\n\t\tacc[cur.fieldId] = cur.value;\n\t\treturn acc;\n\t}, rest);\n};\n\n// ----------------------------------------\n//           payload adjusters\n// ----------------------------------------\n\nexport const adjustAccountPayload = flow(\n\tadjustBillingAddressFields,\n\tadjustShippingAddressFields,\n\tadjustCustomFields,\n);\n\nexport const adjustContactPayload = flow(\n\tadjustMailingAddressFields,\n\tadjustOtherAddressFields,\n\tadjustDateOfBirthField,\n\tadjustCustomFields,\n);\n\nexport const adjustDealPayload = flow(adjustClosingDateField, adjustCustomFields);\n\nexport const adjustInvoicePayload = flow(\n\tadjustBillingAddressFields,\n\tadjustShippingAddressFields,\n\tadjustInvoiceDateField,\n\tadjustDueDateField,\n\tadjustAccountIdField,\n\tadjustCustomFields,\n);\n\nexport const adjustInvoicePayloadOnUpdate = flow(\n\tadjustInvoicePayload,\n\tadjustProductDetailsOnUpdate,\n);\n\nexport const adjustLeadPayload = flow(adjustAddressFields, adjustCustomFields);\n\nexport const adjustPurchaseOrderPayload = flow(\n\tadjustBillingAddressFields,\n\tadjustShippingAddressFields,\n\tadjustDueDateField,\n\tadjustPurchaseOrderDateField,\n\tadjustCustomFields,\n);\n\nexport const adjustQuotePayload = flow(\n\tadjustBillingAddressFields,\n\tadjustShippingAddressFields,\n\tadjustValidTillField,\n\tadjustCustomFields,\n);\n\nexport const adjustSalesOrderPayload = flow(\n\tadjustBillingAddressFields,\n\tadjustShippingAddressFields,\n\tadjustDueDateField,\n\tadjustAccountIdField,\n\tadjustContactIdField,\n\tadjustDealIdField,\n\tadjustCustomFields,\n);\n\nexport const adjustVendorPayload = flow(adjustAddressFields, adjustCustomFields);\n\nexport const adjustProductPayload = adjustCustomFields;\n\n// ----------------------------------------\n//               helpers\n// ----------------------------------------\n\n/**\n * Convert items in a Zoho CRM API response into n8n load options.\n */\nexport const toLoadOptions = (items: ResourceItems, nameProperty: NameType) =>\n\titems.map((item) => ({ name: item[nameProperty], value: item.id }));\n\nexport function getModuleName(resource: string) {\n\tconst map: { [key: string]: string } = {\n\t\taccount: 'Accounts',\n\t\tcontact: 'Contacts',\n\t\tdeal: 'Deals',\n\t\tinvoice: 'Invoices',\n\t\tlead: 'Leads',\n\t\tproduct: 'Products',\n\t\tpurchaseOrder: 'Purchase_Orders',\n\t\tsalesOrder: 'Sales_Orders',\n\t\tvendor: 'Vendors',\n\t\tquote: 'Quotes',\n\t};\n\n\treturn map[resource];\n}\n\n/**\n * Retrieve all fields for a resource, sorted alphabetically.\n */\nexport async function getFields(\n\tthis: ILoadOptionsFunctions,\n\tresource: SnakeCaseResource,\n\t{ onlyCustom } = { onlyCustom: false },\n) {\n\tconst qs = { module: getModuleName(resource) };\n\n\tlet { fields } = (await zohoApiRequest.call(\n\t\tthis,\n\t\t'GET',\n\t\t'/settings/fields',\n\t\t{},\n\t\tqs,\n\t)) as LoadedFields;\n\n\tif (onlyCustom) {\n\t\tfields = fields.filter(({ custom_field }) => custom_field);\n\t}\n\n\tconst options = fields.map(({ field_label, api_name }) => ({\n\t\tname: field_label,\n\t\tvalue: api_name,\n\t}));\n\n\treturn sortBy(options, (o) => o.name);\n}\n\nexport const capitalizeInitial = (str: string) => str[0].toUpperCase() + str.slice(1);\n\nfunction getSectionApiName(resource: string) {\n\tif (resource === 'purchaseOrder') return 'Purchase Order Information';\n\tif (resource === 'salesOrder') return 'Sales Order Information';\n\n\treturn `${capitalizeInitial(resource)} Information`;\n}\n\nexport async function getPicklistOptions(\n\tthis: ILoadOptionsFunctions,\n\tresource: string,\n\ttargetField: string,\n) {\n\tconst qs = { module: getModuleName(resource) };\n\tconst responseData = (await zohoApiRequest.call(\n\t\tthis,\n\t\t'GET',\n\t\t'/settings/layouts',\n\t\t{},\n\t\tqs,\n\t)) as LoadedLayouts;\n\n\tconst pickListOptions = responseData.layouts[0].sections\n\t\t.find((section) => section.api_name === getSectionApiName(resource))\n\t\t?.fields.find((f) => f.api_name === targetField)?.pick_list_values;\n\n\tif (!pickListOptions) return [];\n\n\treturn pickListOptions.map((option) => ({\n\t\tname: option.display_value,\n\t\tvalue: option.actual_value,\n\t}));\n}\n\n/**\n * Add filter options to a query string object.\n */\nexport const addGetAllFilterOptions = (qs: IDataObject, options: GetAllFilterOptions) => {\n\tif (Object.keys(options).length) {\n\t\tconst { fields, ...rest } = options;\n\t\tObject.assign(qs, fields && { fields: fields.join(',') }, rest);\n\t}\n};\n"],"mappings":"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","names":["flow","sortBy"]}