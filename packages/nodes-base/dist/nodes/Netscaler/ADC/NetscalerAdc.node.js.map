{"version":3,"sources":["../../../../nodes/Netscaler/ADC/NetscalerAdc.node.ts"],"sourcesContent":["/* eslint-disable n8n-nodes-base/node-filename-against-convention */\nimport {\n\tNodeConnectionTypes,\n\ttype IDataObject,\n\ttype IExecuteFunctions,\n\ttype INodeExecutionData,\n\ttype INodeType,\n\ttype INodeTypeDescription,\n\ttype JsonObject,\n} from 'n8n-workflow';\n\nimport { certificateDescription } from './CertificateDescription';\nimport { fileDescription } from './FileDescription';\nimport { netscalerADCApiRequest } from './GenericFunctions';\n\nexport class NetscalerAdc implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'Netscaler ADC',\n\t\t// This prevents a breaking change\n\t\tname: 'citrixAdc',\n\t\ticon: { light: 'file:netscaler.svg', dark: 'file:netscaler.dark.svg' },\n\t\tgroup: ['output'],\n\t\tversion: 1,\n\t\tsubtitle: '={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}',\n\t\tdescription: 'Consume Netscaler ADC API',\n\t\tdefaults: {\n\t\t\tname: 'Netscaler ADC',\n\t\t},\n\t\tcredentials: [\n\t\t\t{\n\t\t\t\tname: 'citrixAdcApi',\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t],\n\t\tinputs: [NodeConnectionTypes.Main],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Resource',\n\t\t\t\tname: 'resource',\n\t\t\t\ttype: 'options',\n\t\t\t\tnoDataExpression: true,\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Certificate',\n\t\t\t\t\t\tvalue: 'certificate',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'File',\n\t\t\t\t\t\tvalue: 'file',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'file',\n\t\t\t},\n\t\t\t...certificateDescription,\n\t\t\t...fileDescription,\n\t\t],\n\t};\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t\tconst items = this.getInputData();\n\t\tconst returnData: IDataObject[] = [];\n\t\tconst resource = this.getNodeParameter('resource', 0);\n\t\tconst operation = this.getNodeParameter('operation', 0);\n\t\tlet responseData: IDataObject | IDataObject[] = {};\n\n\t\tfor (let i = 0; i < items.length; i++) {\n\t\t\ttry {\n\t\t\t\tif (resource === 'file') {\n\t\t\t\t\tif (operation === 'upload') {\n\t\t\t\t\t\tconst fileLocation = this.getNodeParameter('fileLocation', i) as string;\n\t\t\t\t\t\tconst binaryProperty = this.getNodeParameter('binaryProperty', i);\n\t\t\t\t\t\tconst options = this.getNodeParameter('options', i);\n\t\t\t\t\t\tconst endpoint = '/config/systemfile';\n\n\t\t\t\t\t\tconst binaryData = this.helpers.assertBinaryData(i, binaryProperty);\n\t\t\t\t\t\tconst buffer = await this.helpers.getBinaryDataBuffer(i, binaryProperty);\n\n\t\t\t\t\t\tconst body = {\n\t\t\t\t\t\t\tsystemfile: {\n\t\t\t\t\t\t\t\tfilename: binaryData.fileName,\n\t\t\t\t\t\t\t\tfilecontent: Buffer.from(buffer).toString('base64'),\n\t\t\t\t\t\t\t\tfilelocation: fileLocation,\n\t\t\t\t\t\t\t\tfileencoding: 'BASE64',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tif (options.fileName) {\n\t\t\t\t\t\t\tbody.systemfile.filename = options.fileName as string;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tawait netscalerADCApiRequest.call(this, 'POST', endpoint, body);\n\t\t\t\t\t\tresponseData = { success: true };\n\t\t\t\t\t}\n\t\t\t\t\tif (operation === 'delete') {\n\t\t\t\t\t\tconst fileName = this.getNodeParameter('fileName', i) as string;\n\t\t\t\t\t\tconst fileLocation = this.getNodeParameter('fileLocation', i) as string;\n\n\t\t\t\t\t\tconst endpoint = `/config/systemfile?args=filename:${fileName},filelocation:${encodeURIComponent(\n\t\t\t\t\t\t\tfileLocation,\n\t\t\t\t\t\t)}`;\n\n\t\t\t\t\t\tawait netscalerADCApiRequest.call(this, 'DELETE', endpoint);\n\t\t\t\t\t\tresponseData = { success: true };\n\t\t\t\t\t}\n\t\t\t\t\tif (operation === 'download') {\n\t\t\t\t\t\tconst fileName = this.getNodeParameter('fileName', i) as string;\n\t\t\t\t\t\tconst fileLocation = this.getNodeParameter('fileLocation', i) as string;\n\t\t\t\t\t\tconst binaryProperty = this.getNodeParameter('binaryProperty', i);\n\n\t\t\t\t\t\tconst endpoint = `/config/systemfile?args=filename:${fileName},filelocation:${encodeURIComponent(\n\t\t\t\t\t\t\tfileLocation,\n\t\t\t\t\t\t)}`;\n\n\t\t\t\t\t\tconst { systemfile } = await netscalerADCApiRequest.call(this, 'GET', endpoint);\n\n\t\t\t\t\t\tconst file = systemfile[0];\n\n\t\t\t\t\t\tconst binaryData = await this.helpers.prepareBinaryData(\n\t\t\t\t\t\t\tBuffer.from(file.filecontent as string, 'base64'),\n\t\t\t\t\t\t\tfile.filename as string,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tresponseData = {\n\t\t\t\t\t\t\tjson: file,\n\t\t\t\t\t\t\tbinary: {\n\t\t\t\t\t\t\t\t[binaryProperty]: binaryData,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (resource === 'certificate') {\n\t\t\t\t\tif (operation === 'create') {\n\t\t\t\t\t\tconst certificateFileName = this.getNodeParameter('certificateFileName', i) as string;\n\t\t\t\t\t\tconst certificateFormat = this.getNodeParameter('certificateFormat', i) as string;\n\t\t\t\t\t\tconst certificateType = this.getNodeParameter('certificateType', i) as string;\n\t\t\t\t\t\tconst certificateRequestFileName = this.getNodeParameter(\n\t\t\t\t\t\t\t'certificateRequestFileName',\n\t\t\t\t\t\t\ti,\n\t\t\t\t\t\t) as string;\n\t\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i, {});\n\n\t\t\t\t\t\tlet body: IDataObject = {\n\t\t\t\t\t\t\treqfile: certificateRequestFileName,\n\t\t\t\t\t\t\tcertfile: certificateFileName,\n\t\t\t\t\t\t\tcertform: certificateFormat,\n\t\t\t\t\t\t\tcertType: certificateType,\n\t\t\t\t\t\t\t...additionalFields,\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tif (certificateType === 'ROOT_CERT') {\n\t\t\t\t\t\t\tconst privateKeyFileName = this.getNodeParameter('privateKeyFileName', i) as string;\n\t\t\t\t\t\t\tbody = {\n\t\t\t\t\t\t\t\t...body,\n\t\t\t\t\t\t\t\tkeyfile: privateKeyFileName,\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst caCertificateFileName = this.getNodeParameter(\n\t\t\t\t\t\t\t\t'caCertificateFileName',\n\t\t\t\t\t\t\t\ti,\n\t\t\t\t\t\t\t) as string;\n\t\t\t\t\t\t\tconst caCertificateFileFormat = this.getNodeParameter(\n\t\t\t\t\t\t\t\t'caCertificateFileFormat',\n\t\t\t\t\t\t\t\ti,\n\t\t\t\t\t\t\t) as string;\n\t\t\t\t\t\t\tconst caPrivateKeyFileFormat = this.getNodeParameter(\n\t\t\t\t\t\t\t\t'caPrivateKeyFileFormat',\n\t\t\t\t\t\t\t\ti,\n\t\t\t\t\t\t\t) as string;\n\t\t\t\t\t\t\tconst caPrivateKeyFileName = this.getNodeParameter(\n\t\t\t\t\t\t\t\t'caPrivateKeyFileName',\n\t\t\t\t\t\t\t\ti,\n\t\t\t\t\t\t\t) as string;\n\t\t\t\t\t\t\tconst caSerialFileNumber = this.getNodeParameter('caSerialFileNumber', i) as string;\n\n\t\t\t\t\t\t\tbody = {\n\t\t\t\t\t\t\t\t...body,\n\t\t\t\t\t\t\t\tcacert: caCertificateFileName,\n\t\t\t\t\t\t\t\tcacertform: caCertificateFileFormat,\n\t\t\t\t\t\t\t\tcakey: caPrivateKeyFileName,\n\t\t\t\t\t\t\t\tcakeyform: caPrivateKeyFileFormat,\n\t\t\t\t\t\t\t\tcaserial: caSerialFileNumber,\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst endpoint = '/config/sslcert?action=create';\n\n\t\t\t\t\t\tawait netscalerADCApiRequest.call(this, 'POST', endpoint, { sslcert: body });\n\n\t\t\t\t\t\tresponseData = { success: true };\n\t\t\t\t\t}\n\n\t\t\t\t\tif (operation === 'install') {\n\t\t\t\t\t\tconst certificateKeyPairName = this.getNodeParameter(\n\t\t\t\t\t\t\t'certificateKeyPairName',\n\t\t\t\t\t\t\ti,\n\t\t\t\t\t\t) as string;\n\t\t\t\t\t\tconst certificateFileName = this.getNodeParameter('certificateFileName', i) as string;\n\t\t\t\t\t\tconst privateKeyFileName = this.getNodeParameter('privateKeyFileName', i) as string;\n\t\t\t\t\t\tconst certificateFormat = this.getNodeParameter('certificateFormat', i) as string;\n\t\t\t\t\t\tconst notifyExpiration = this.getNodeParameter('notifyExpiration', i) as boolean;\n\t\t\t\t\t\tconst body: IDataObject = {\n\t\t\t\t\t\t\tcert: certificateFileName,\n\t\t\t\t\t\t\tcertkey: certificateKeyPairName,\n\t\t\t\t\t\t\tkey: privateKeyFileName,\n\t\t\t\t\t\t\tinform: certificateFormat,\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tif (certificateFormat === 'PEM') {\n\t\t\t\t\t\t\tconst password = this.getNodeParameter('password', i) as string;\n\t\t\t\t\t\t\tconst certificateBundle = this.getNodeParameter('certificateBundle', i) as boolean;\n\t\t\t\t\t\t\tObject.assign(body, {\n\t\t\t\t\t\t\t\tpassplain: password,\n\t\t\t\t\t\t\t\tbundle: certificateBundle ? 'YES' : 'NO',\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (notifyExpiration) {\n\t\t\t\t\t\t\tconst notificationPeriod = this.getNodeParameter('notificationPeriod', i) as number;\n\t\t\t\t\t\t\tObject.assign(body, {\n\t\t\t\t\t\t\t\texpirymonitor: 'ENABLED',\n\t\t\t\t\t\t\t\tnotificationperiod: notificationPeriod,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst endpoint = '/config/sslcertkey';\n\n\t\t\t\t\t\tawait netscalerADCApiRequest.call(this, 'POST', endpoint, { sslcertkey: body });\n\n\t\t\t\t\t\tresponseData = { success: true };\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturnData.push(\n\t\t\t\t\t...this.helpers.constructExecutionMetaData(this.helpers.returnJsonArray(responseData), {\n\t\t\t\t\t\titemData: { item: i },\n\t\t\t\t\t}),\n\t\t\t\t);\n\t\t\t} catch (error) {\n\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\treturnData.push({ error: (error as JsonObject).toString() });\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\n\t\treturn [returnData as INodeExecutionData[]];\n\t}\n}\n"],"mappings":"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","names":[]}