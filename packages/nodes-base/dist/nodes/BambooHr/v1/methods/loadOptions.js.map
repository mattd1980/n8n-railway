{"version":3,"sources":["../../../../../nodes/BambooHr/v1/methods/loadOptions.ts"],"sourcesContent":["import type { IDataObject, ILoadOptionsFunctions, INodePropertyOptions } from 'n8n-workflow';\n\nimport { apiRequest } from '../transport';\n\n// Get all the available channels\nexport async function getTimeOffTypeID(\n\tthis: ILoadOptionsFunctions,\n): Promise<INodePropertyOptions[]> {\n\tconst returnData: INodePropertyOptions[] = [];\n\tconst body: IDataObject = {};\n\tconst requestMethod = 'GET';\n\tconst endPoint = 'meta/time_off/types';\n\n\tconst response = await apiRequest.call(this, requestMethod, endPoint, body);\n\tconst timeOffTypeIds = response.body.timeOffTypes;\n\n\tfor (const item of timeOffTypeIds) {\n\t\treturnData.push({\n\t\t\tname: item.name,\n\t\t\tvalue: item.id,\n\t\t});\n\t}\n\treturn returnData;\n}\n\n//@ts-ignore\nconst sort = (a, b) => {\n\tif (a.name.toLocaleLowerCase() < b.name.toLocaleLowerCase()) {\n\t\treturn -1;\n\t}\n\tif (a.name.toLocaleLowerCase() > b.name.toLocaleLowerCase()) {\n\t\treturn 1;\n\t}\n\treturn 0;\n};\n\nexport async function getCompanyFileCategories(\n\tthis: ILoadOptionsFunctions,\n): Promise<INodePropertyOptions[]> {\n\tconst returnData: INodePropertyOptions[] = [];\n\tconst body: IDataObject = {};\n\tconst requestMethod = 'GET';\n\tconst endPoint = 'files/view/';\n\n\tconst response = await apiRequest.call(this, requestMethod, endPoint, body);\n\tconst categories = response.categories;\n\n\tfor (const category of categories) {\n\t\treturnData.push({\n\t\t\tname: category.name,\n\t\t\tvalue: category.id,\n\t\t});\n\t}\n\n\treturnData.sort(sort);\n\n\treturn returnData;\n}\n\nexport async function getEmployeeDocumentCategories(\n\tthis: ILoadOptionsFunctions,\n): Promise<INodePropertyOptions[]> {\n\tconst returnData: INodePropertyOptions[] = [];\n\tconst body: IDataObject = {};\n\tconst requestMethod = 'GET';\n\tconst id = this.getCurrentNodeParameter('employeeId') as string;\n\n\tconst endPoint = `employees/${id}/files/view/`;\n\n\tconst response = await apiRequest.call(this, requestMethod, endPoint, body);\n\tconst categories = response.categories;\n\n\tfor (const category of categories) {\n\t\treturnData.push({\n\t\t\tname: category.name,\n\t\t\tvalue: category.id,\n\t\t});\n\t}\n\n\treturnData.sort(sort);\n\n\treturn returnData;\n}\n\nexport async function getEmployeeLocations(\n\tthis: ILoadOptionsFunctions,\n): Promise<INodePropertyOptions[]> {\n\tconst returnData: INodePropertyOptions[] = [];\n\tconst body: IDataObject = {};\n\tconst requestMethod = 'GET';\n\tconst endPoint = 'meta/lists/';\n\n\t//do not request all data?\n\tconst fields = (await apiRequest.call(this, requestMethod, endPoint, body, {})) as [\n\t\t{ fieldId: number; options: [{ id: number; name: string }] },\n\t];\n\n\tconst options = fields.filter((field) => field.fieldId === 18)[0].options;\n\n\tfor (const option of options) {\n\t\treturnData.push({\n\t\t\tname: option.name,\n\t\t\tvalue: option.id,\n\t\t});\n\t}\n\n\treturnData.sort(sort);\n\n\treturn returnData;\n}\n\nexport async function getDepartments(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\tconst returnData: INodePropertyOptions[] = [];\n\tconst body: IDataObject = {};\n\tconst requestMethod = 'GET';\n\tconst endPoint = 'meta/lists/';\n\n\t//do not request all data?\n\tconst fields = (await apiRequest.call(this, requestMethod, endPoint, body, {})) as [\n\t\t{ fieldId: number; options: [{ id: number; name: string }] },\n\t];\n\n\tconst options = fields.filter((field) => field.fieldId === 4)[0].options;\n\n\tfor (const option of options) {\n\t\treturnData.push({\n\t\t\tname: option.name,\n\t\t\tvalue: option.id,\n\t\t});\n\t}\n\n\treturnData.sort(sort);\n\n\treturn returnData;\n}\n\nexport async function getDivisions(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\tconst returnData: INodePropertyOptions[] = [];\n\tconst body: IDataObject = {};\n\tconst requestMethod = 'GET';\n\tconst endPoint = 'meta/lists/';\n\n\t//do not request all data?\n\tconst fields = (await apiRequest.call(this, requestMethod, endPoint, body, {})) as [\n\t\t{ fieldId: number; options: [{ id: number; name: string }] },\n\t];\n\n\tconst options = fields.filter((field) => field.fieldId === 1355)[0].options;\n\n\tfor (const option of options) {\n\t\treturnData.push({\n\t\t\tname: option.name,\n\t\t\tvalue: option.id,\n\t\t});\n\t}\n\n\treturnData.sort(sort);\n\n\treturn returnData;\n}\n\nexport async function getEmployeeFields(\n\tthis: ILoadOptionsFunctions,\n): Promise<INodePropertyOptions[]> {\n\tconst returnData: INodePropertyOptions[] = [];\n\tconst body: IDataObject = {};\n\tconst requestMethod = 'GET';\n\tconst endPoint = 'employees/directory';\n\n\tconst { fields } = await apiRequest.call(this, requestMethod, endPoint, body);\n\n\tfor (const field of fields) {\n\t\treturnData.push({\n\t\t\tname: field.name || field.id,\n\t\t\tvalue: field.id,\n\t\t});\n\t}\n\n\treturnData.sort(sort);\n\n\treturnData.unshift({\n\t\tname: '[All]',\n\t\tvalue: 'all',\n\t});\n\n\treturn returnData;\n}\n"],"mappings":"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","names":[]}