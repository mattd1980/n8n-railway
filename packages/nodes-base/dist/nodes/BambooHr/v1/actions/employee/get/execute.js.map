{"version":3,"sources":["../../../../../../../nodes/BambooHr/v1/actions/employee/get/execute.ts"],"sourcesContent":["import type { IExecuteFunctions, IDataObject, INodeExecutionData } from 'n8n-workflow';\n\nimport { apiRequest } from '../../../transport';\n\nexport async function get(this: IExecuteFunctions, index: number): Promise<INodeExecutionData[]> {\n\tconst body: IDataObject = {};\n\tconst requestMethod = 'GET';\n\n\t//meta data\n\tconst id = this.getNodeParameter('employeeId', index) as string;\n\n\t//query parameters\n\tlet fields = this.getNodeParameter('options.fields', index, ['all']) as string[];\n\n\tif (fields.includes('all')) {\n\t\tconst { fields: allFields } = await apiRequest.call(\n\t\t\tthis,\n\t\t\trequestMethod,\n\t\t\t'employees/directory',\n\t\t\tbody,\n\t\t);\n\t\tfields = allFields.map((field: IDataObject) => field.id);\n\t}\n\n\t//endpoint\n\tconst endpoint = `employees/${id}?fields=${fields}`;\n\n\t//response\n\tconst responseData = await apiRequest.call(this, requestMethod, endpoint, body);\n\n\t//return\n\treturn this.helpers.returnJsonArray(responseData as IDataObject[]);\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,uBAA2B;AAE3B,eAAsB,IAA6B,OAA8C;AAChG,QAAM,OAAoB,CAAC;AAC3B,QAAM,gBAAgB;AAGtB,QAAM,KAAK,KAAK,iBAAiB,cAAc,KAAK;AAGpD,MAAI,SAAS,KAAK,iBAAiB,kBAAkB,OAAO,CAAC,KAAK,CAAC;AAEnE,MAAI,OAAO,SAAS,KAAK,GAAG;AAC3B,UAAM,EAAE,QAAQ,UAAU,IAAI,MAAM,4BAAW;AAAA,MAC9C;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACD;AACA,aAAS,UAAU,IAAI,CAAC,UAAuB,MAAM,EAAE;AAAA,EACxD;AAGA,QAAM,WAAW,aAAa,EAAE,WAAW,MAAM;AAGjD,QAAM,eAAe,MAAM,4BAAW,KAAK,MAAM,eAAe,UAAU,IAAI;AAG9E,SAAO,KAAK,QAAQ,gBAAgB,YAA6B;AAClE;","names":[]}