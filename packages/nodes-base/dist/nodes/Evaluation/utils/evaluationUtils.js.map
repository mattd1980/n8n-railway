{"version":3,"sources":["../../../../nodes/Evaluation/utils/evaluationUtils.ts"],"sourcesContent":["import { NodeOperationError, UserError } from 'n8n-workflow';\nimport type {\n\tFieldType,\n\tINodeParameters,\n\tAssignmentCollectionValue,\n\tIDataObject,\n\tIExecuteFunctions,\n\tINodeExecutionData,\n} from 'n8n-workflow';\n\nimport { getGoogleSheet, getSheet } from './evaluationTriggerUtils';\nimport { composeReturnItem, validateEntry } from '../../Set/v2/helpers/utils';\n\nexport async function setOutput(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\tconst evaluationNode = this.getNode();\n\tconst parentNodes = this.getParentNodes(evaluationNode.name);\n\n\tconst evalTrigger = parentNodes.find((node) => node.type === 'n8n-nodes-base.evaluationTrigger');\n\tconst evalTriggerOutput = evalTrigger\n\t\t? this.evaluateExpression(`{{ $('${evalTrigger?.name}').isExecuted }}`, 0)\n\t\t: undefined;\n\n\tif (!evalTrigger || !evalTriggerOutput) {\n\t\tthis.addExecutionHints({\n\t\t\tmessage: \"No outputs were set since the execution didn't start from an evaluation trigger\",\n\t\t\tlocation: 'outputPane',\n\t\t});\n\t\treturn [this.getInputData()];\n\t}\n\n\tconst outputFields = this.getNodeParameter('outputs.values', 0, []) as Array<{\n\t\toutputName: string;\n\t\toutputValue: string;\n\t}>;\n\n\tif (outputFields.length === 0) {\n\t\tthrow new UserError('No outputs to set', {\n\t\t\tdescription: 'Add outputs to write back to the Google Sheet using the ‘Add Output’ button',\n\t\t});\n\t}\n\n\tconst googleSheetInstance = getGoogleSheet.call(this);\n\tconst googleSheet = await getSheet.call(this, googleSheetInstance);\n\n\tconst evaluationTrigger = this.evaluateExpression(\n\t\t`{{ $('${evalTrigger.name}').first().json }}`,\n\t\t0,\n\t) as IDataObject;\n\n\tconst rowNumber =\n\t\tevaluationTrigger.row_number === 'row_number' ? 1 : evaluationTrigger.row_number;\n\n\tconst columnNames = Object.keys(evaluationTrigger).filter(\n\t\t(key) => key !== 'row_number' && key !== '_rowsLeft',\n\t);\n\n\toutputFields.forEach(({ outputName }) => {\n\t\tif (!columnNames.includes(outputName)) {\n\t\t\tcolumnNames.push(outputName);\n\t\t}\n\t});\n\n\tawait googleSheetInstance.updateRows(\n\t\tgoogleSheet.title,\n\t\t[columnNames],\n\t\t'RAW', // default value for Value Input Mode\n\t\t1, // header row\n\t);\n\n\tconst outputs = outputFields.reduce((acc, { outputName, outputValue }) => {\n\t\tacc[outputName] = outputValue;\n\t\treturn acc;\n\t}, {} as IDataObject);\n\n\tconst preparedData = googleSheetInstance.prepareDataForUpdatingByRowNumber(\n\t\t[\n\t\t\t{\n\t\t\t\trow_number: rowNumber,\n\t\t\t\t...outputs,\n\t\t\t},\n\t\t],\n\t\t`${googleSheet.title}!A:Z`,\n\t\t[columnNames],\n\t);\n\n\tawait googleSheetInstance.batchUpdate(\n\t\tpreparedData.updateData,\n\t\t'RAW', // default value for Value Input Mode\n\t);\n\n\treturn [this.getInputData()];\n}\n\nexport async function setMetrics(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\tconst items = this.getInputData();\n\tconst metrics: INodeExecutionData[] = [];\n\n\tfor (let i = 0; i < items.length; i++) {\n\t\tconst dataToSave = this.getNodeParameter('metrics', i, {}) as AssignmentCollectionValue;\n\n\t\tconst newItem: INodeExecutionData = {\n\t\t\tjson: {},\n\t\t\tpairedItem: { item: i },\n\t\t};\n\t\tconst newData = Object.fromEntries(\n\t\t\t(dataToSave?.assignments ?? []).map((assignment) => {\n\t\t\t\tconst assignmentValue =\n\t\t\t\t\ttypeof assignment.value === 'number' ? assignment.value : Number(assignment.value);\n\n\t\t\t\tif (isNaN(assignmentValue)) {\n\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t`Value for '${assignment.name}' isn't a number`,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tdescription: `It’s currently '${assignment.value}'. Metrics must be numeric.`,\n\t\t\t\t\t\t},\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tif (!assignment.name || isNaN(assignmentValue)) {\n\t\t\t\t\tthrow new NodeOperationError(this.getNode(), 'Metric name missing', {\n\t\t\t\t\t\tdescription: 'Make sure each metric you define has a name',\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tconst { name, value } = validateEntry(\n\t\t\t\t\tassignment.name,\n\t\t\t\t\tassignment.type as FieldType,\n\t\t\t\t\tassignmentValue,\n\t\t\t\t\tthis.getNode(),\n\t\t\t\t\ti,\n\t\t\t\t\tfalse,\n\t\t\t\t\t1,\n\t\t\t\t);\n\n\t\t\t\treturn [name, value];\n\t\t\t}),\n\t\t);\n\n\t\tconst returnItem = composeReturnItem.call(\n\t\t\tthis,\n\t\t\ti,\n\t\t\tnewItem,\n\t\t\tnewData,\n\t\t\t{ dotNotation: false, include: 'none' },\n\t\t\t1,\n\t\t);\n\t\tmetrics.push(returnItem);\n\t}\n\n\treturn [metrics];\n}\n\nexport async function checkIfEvaluating(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\tconst evaluationExecutionResult: INodeExecutionData[] = [];\n\tconst normalExecutionResult: INodeExecutionData[] = [];\n\n\tconst evaluationNode = this.getNode();\n\tconst parentNodes = this.getParentNodes(evaluationNode.name);\n\n\tconst evalTrigger = parentNodes.find((node) => node.type === 'n8n-nodes-base.evaluationTrigger');\n\tconst evalTriggerOutput = evalTrigger\n\t\t? this.evaluateExpression(`{{ $('${evalTrigger?.name}').isExecuted }}`, 0)\n\t\t: undefined;\n\n\tif (evalTriggerOutput) {\n\t\treturn [this.getInputData(), normalExecutionResult];\n\t} else {\n\t\treturn [evaluationExecutionResult, this.getInputData()];\n\t}\n}\n\nexport function setOutputs(parameters: INodeParameters) {\n\tif (parameters.operation === 'checkIfEvaluating') {\n\t\treturn [\n\t\t\t{ type: 'main', displayName: 'Evaluation' },\n\t\t\t{ type: 'main', displayName: 'Normal' },\n\t\t];\n\t}\n\n\treturn [{ type: 'main' }];\n}\n"],"mappings":"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","names":[]}