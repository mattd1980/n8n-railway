{"version":3,"sources":["../../../nodes/Netlify/NetlifyTrigger.node.ts"],"sourcesContent":["import { snakeCase } from 'change-case';\nimport type {\n\tIHookFunctions,\n\tIWebhookFunctions,\n\tIDataObject,\n\tILoadOptionsFunctions,\n\tINodePropertyOptions,\n\tINodeType,\n\tINodeTypeDescription,\n\tIWebhookResponseData,\n} from 'n8n-workflow';\nimport { NodeConnectionTypes } from 'n8n-workflow';\n\nimport { netlifyApiRequest } from './GenericFunctions';\n\nexport class NetlifyTrigger implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'Netlify Trigger',\n\t\tname: 'netlifyTrigger',\n\t\ticon: 'file:netlify.svg',\n\t\tgroup: ['trigger'],\n\t\tversion: 1,\n\t\tsubtitle: '={{$parameter[\"event\"]}}',\n\t\tdescription: 'Handle netlify events via webhooks',\n\t\tdefaults: {\n\t\t\tname: 'Netlify Trigger',\n\t\t},\n\t\tinputs: [],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tcredentials: [\n\t\t\t{\n\t\t\t\tname: 'netlifyApi',\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t],\n\t\twebhooks: [\n\t\t\t{\n\t\t\t\tname: 'default',\n\t\t\t\thttpMethod: 'POST',\n\t\t\t\tresponseMode: 'onReceived',\n\t\t\t\tpath: 'webhook',\n\t\t\t},\n\t\t],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Site Name or ID',\n\t\t\t\tname: 'siteId',\n\t\t\t\trequired: true,\n\t\t\t\ttype: 'options',\n\t\t\t\tdefault: '',\n\t\t\t\ttypeOptions: {\n\t\t\t\t\tloadOptionsMethod: 'getSites',\n\t\t\t\t},\n\t\t\t\tdescription:\n\t\t\t\t\t'Select the Site ID. Choose from the list, or specify an ID using an <a href=\"https://docs.n8n.io/code/expressions/\">expression</a>.',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Event',\n\t\t\t\tname: 'event',\n\t\t\t\ttype: 'options',\n\t\t\t\trequired: true,\n\t\t\t\tdefault: '',\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Deploy Building',\n\t\t\t\t\t\tvalue: 'deployBuilding',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Deploy Failed',\n\t\t\t\t\t\tvalue: 'deployFailed',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Deploy Created',\n\t\t\t\t\t\tvalue: 'deployCreated',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Form Submitted',\n\t\t\t\t\t\tvalue: 'submissionCreated',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Form Name or ID',\n\t\t\t\tname: 'formId',\n\t\t\t\ttype: 'options',\n\t\t\t\trequired: true,\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tevent: ['submissionCreated'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdefault: '',\n\t\t\t\ttypeOptions: {\n\t\t\t\t\tloadOptionsMethod: 'getForms',\n\t\t\t\t},\n\t\t\t\tdescription:\n\t\t\t\t\t'Select a form. Choose from the list, or specify an ID using an <a href=\"https://docs.n8n.io/code/expressions/\">expression</a>.',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Simplify',\n\t\t\t\tname: 'simple',\n\t\t\t\ttype: 'boolean',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tevent: ['submissionCreated'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdefault: true,\n\t\t\t\tdescription:\n\t\t\t\t\t'Whether to return a simplified version of the response instead of the raw data',\n\t\t\t},\n\t\t],\n\t};\n\n\twebhookMethods = {\n\t\tdefault: {\n\t\t\tasync checkExists(this: IHookFunctions): Promise<boolean> {\n\t\t\t\tconst qs: IDataObject = {};\n\t\t\t\tconst webhookData = this.getWorkflowStaticData('node');\n\t\t\t\tconst webhookUrl = this.getNodeWebhookUrl('default');\n\t\t\t\tconst event = this.getNodeParameter('event') as string;\n\t\t\t\tqs.site_id = this.getNodeParameter('siteId') as string;\n\t\t\t\tconst webhooks = await netlifyApiRequest.call(this, 'GET', '/hooks', {}, qs);\n\t\t\t\tfor (const webhook of webhooks) {\n\t\t\t\t\tif (webhook.type === 'url') {\n\t\t\t\t\t\tif (webhook.data.url === webhookUrl && webhook.event === snakeCase(event)) {\n\t\t\t\t\t\t\twebhookData.webhookId = webhook.id;\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t},\n\t\t\tasync create(this: IHookFunctions): Promise<boolean> {\n\t\t\t\t//TODO - implement missing events\n\t\t\t\t// alL posible events can be found doing a GET /hooks/types\n\t\t\t\tconst webhookUrl = this.getNodeWebhookUrl('default');\n\t\t\t\tconst webhookData = this.getWorkflowStaticData('node');\n\t\t\t\tconst event = this.getNodeParameter('event') as string;\n\t\t\t\tconst body: IDataObject = {\n\t\t\t\t\tevent: snakeCase(event),\n\t\t\t\t\tdata: {\n\t\t\t\t\t\turl: webhookUrl,\n\t\t\t\t\t},\n\t\t\t\t\tsite_id: this.getNodeParameter('siteId') as string,\n\t\t\t\t};\n\t\t\t\tconst formId = this.getNodeParameter('formId', '*') as string;\n\t\t\t\tif (event === 'submissionCreated' && formId !== '*') {\n\t\t\t\t\tbody.form_id = this.getNodeParameter('formId') as string;\n\t\t\t\t}\n\t\t\t\tconst webhook = await netlifyApiRequest.call(this, 'POST', '/hooks', body);\n\t\t\t\twebhookData.webhookId = webhook.id;\n\t\t\t\treturn true;\n\t\t\t},\n\t\t\tasync delete(this: IHookFunctions): Promise<boolean> {\n\t\t\t\tconst webhookData = this.getWorkflowStaticData('node');\n\t\t\t\ttry {\n\t\t\t\t\tawait netlifyApiRequest.call(this, 'DELETE', `/hooks/${webhookData.webhookId}`);\n\t\t\t\t} catch (error) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tdelete webhookData.webhookId;\n\t\t\t\treturn true;\n\t\t\t},\n\t\t},\n\t};\n\n\tmethods = {\n\t\tloadOptions: {\n\t\t\tasync getSites(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst returnData: INodePropertyOptions[] = [];\n\t\t\t\tconst sites = await netlifyApiRequest.call(this, 'GET', '/sites');\n\t\t\t\tfor (const site of sites) {\n\t\t\t\t\treturnData.push({\n\t\t\t\t\t\tname: site.name,\n\t\t\t\t\t\tvalue: site.site_id,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn returnData;\n\t\t\t},\n\n\t\t\tasync getForms(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst returnData: INodePropertyOptions[] = [];\n\t\t\t\tconst siteId = this.getNodeParameter('siteId');\n\t\t\t\tconst forms = await netlifyApiRequest.call(this, 'GET', `/sites/${siteId}/forms`);\n\t\t\t\tfor (const form of forms) {\n\t\t\t\t\treturnData.push({\n\t\t\t\t\t\tname: form.name,\n\t\t\t\t\t\tvalue: form.id,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturnData.unshift({ name: '[All Forms]', value: '*' });\n\t\t\t\treturn returnData;\n\t\t\t},\n\t\t},\n\t};\n\n\tasync webhook(this: IWebhookFunctions): Promise<IWebhookResponseData> {\n\t\tconst req = this.getRequestObject();\n\t\tconst simple = this.getNodeParameter('simple', false) as boolean;\n\t\tconst event = this.getNodeParameter('event') as string;\n\t\tlet response = req.body;\n\n\t\tif (simple && event === 'submissionCreated') {\n\t\t\tresponse = response.data;\n\t\t}\n\n\t\treturn {\n\t\t\tworkflowData: [this.helpers.returnJsonArray(response as IDataObject)],\n\t\t};\n\t}\n}\n"],"mappings":"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","names":[]}