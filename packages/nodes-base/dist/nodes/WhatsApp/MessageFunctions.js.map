{"version":3,"sources":["../../../nodes/WhatsApp/MessageFunctions.ts"],"sourcesContent":["import set from 'lodash/set';\nimport type {\n\tIDataObject,\n\tIExecuteSingleFunctions,\n\tIHttpRequestOptions,\n\tIN8nHttpFullResponse,\n\tINodeExecutionData,\n\tJsonObject,\n} from 'n8n-workflow';\nimport { NodeApiError } from 'n8n-workflow';\n\nimport { getUploadFormData } from './MediaFunctions';\n\ninterface WhatsAppApiError {\n\terror: {\n\t\tmessage: string;\n\t\ttype: string;\n\t\tcode: number;\n\t\tfbtrace_id: string;\n\t};\n}\n\nexport async function addTemplateComponents(\n\tthis: IExecuteSingleFunctions,\n\trequestOptions: IHttpRequestOptions,\n) {\n\tconst params = this.getNodeParameter('templateParameters') as IDataObject;\n\tif (!params?.parameter) {\n\t\treturn requestOptions;\n\t}\n\tconst components = [\n\t\t{\n\t\t\ttype: 'body',\n\t\t\tparameters: params.parameter,\n\t\t},\n\t];\n\tif (!requestOptions.body) {\n\t\trequestOptions.body = {};\n\t}\n\tset(requestOptions.body as IDataObject, 'template.components', components);\n\treturn requestOptions;\n}\n\nexport async function setType(this: IExecuteSingleFunctions, requestOptions: IHttpRequestOptions) {\n\tconst operation = this.getNodeParameter('operation') as string;\n\tconst messageType = this.getNodeParameter('messageType', null) as string | null;\n\tlet actualType = messageType;\n\n\tif (operation === 'sendTemplate') {\n\t\tactualType = 'template';\n\t}\n\n\tif (requestOptions.body) {\n\t\tObject.assign(requestOptions.body, { type: actualType });\n\t}\n\n\treturn requestOptions;\n}\n\nexport async function mediaUploadFromItem(\n\tthis: IExecuteSingleFunctions,\n\trequestOptions: IHttpRequestOptions,\n) {\n\tconst uploadData = await getUploadFormData.call(this);\n\n\tconst phoneNumberId = this.getNodeParameter('phoneNumberId') as string;\n\n\tconst result = (await this.helpers.httpRequestWithAuthentication.call(this, 'whatsAppApi', {\n\t\turl: `/${phoneNumberId}/media`,\n\t\tbaseURL: requestOptions.baseURL,\n\t\tmethod: 'POST',\n\t\tbody: uploadData.formData,\n\t})) as IDataObject;\n\n\tconst operation = this.getNodeParameter('messageType') as string;\n\tif (!requestOptions.body) {\n\t\trequestOptions.body = {};\n\t}\n\tset(requestOptions.body as IDataObject, [operation, 'id'], result.id);\n\tif (operation === 'document') {\n\t\tset(requestOptions.body as IDataObject, [operation, 'filename'], uploadData.fileName);\n\t}\n\n\treturn requestOptions;\n}\n\nexport async function templateInfo(\n\tthis: IExecuteSingleFunctions,\n\trequestOptions: IHttpRequestOptions,\n): Promise<IHttpRequestOptions> {\n\tconst template = this.getNodeParameter('template') as string;\n\tconst [name, language] = template.split('|');\n\tif (!requestOptions.body) {\n\t\trequestOptions.body = {};\n\t}\n\tset(requestOptions.body as IDataObject, 'template.name', name);\n\tset(requestOptions.body as IDataObject, 'template.language.code', language);\n\treturn requestOptions;\n}\n\nexport async function componentsRequest(\n\tthis: IExecuteSingleFunctions,\n\trequestOptions: IHttpRequestOptions,\n): Promise<IHttpRequestOptions> {\n\tconst components = this.getNodeParameter('components') as IDataObject;\n\tconst componentsRet: object[] = [];\n\n\tif (!components?.component) {\n\t\treturn requestOptions;\n\t}\n\n\tfor (const component of components.component as IDataObject[]) {\n\t\tconst comp: IDataObject = {\n\t\t\ttype: component.type,\n\t\t};\n\n\t\tif (component.type === 'body') {\n\t\t\tcomp.parameters = (\n\t\t\t\t((component.bodyParameters as IDataObject).parameter as IDataObject[]) || []\n\t\t\t).map((i: IDataObject) => {\n\t\t\t\tif (i.type === 'text') {\n\t\t\t\t\treturn i;\n\t\t\t\t} else if (i.type === 'currency') {\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttype: 'currency',\n\t\t\t\t\t\tcurrency: {\n\t\t\t\t\t\t\tcode: i.code,\n\t\t\t\t\t\t\tfallback_value: i.fallback_value,\n\t\t\t\t\t\t\tamount_1000: (i.amount_1000 as number) * 1000,\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\t\t\t\t} else if (i.type === 'date_time') {\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttype: 'date_time',\n\t\t\t\t\t\tdate_time: {\n\t\t\t\t\t\t\tfallback_value: i.date_time,\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t});\n\t\t} else if (component.type === 'button') {\n\t\t\tcomp.index = component.index?.toString();\n\t\t\tcomp.sub_type = component.sub_type;\n\t\t\tcomp.parameters = [(component.buttonParameters as IDataObject).parameter];\n\t\t} else if (component.type === 'header') {\n\t\t\tcomp.parameters = (\n\t\t\t\t(component.headerParameters as IDataObject).parameter as IDataObject[]\n\t\t\t).map((i: IDataObject) => {\n\t\t\t\tif (i.type === 'image') {\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttype: 'image',\n\t\t\t\t\t\timage: {\n\t\t\t\t\t\t\tlink: i.imageLink,\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\treturn i;\n\t\t\t});\n\t\t}\n\t\tcomponentsRet.push(comp);\n\t}\n\n\tif (!requestOptions.body) {\n\t\trequestOptions.body = {};\n\t}\n\n\tset(requestOptions.body as IDataObject, 'template.components', componentsRet);\n\n\treturn requestOptions;\n}\n\nexport const sanitizePhoneNumber = (phoneNumber: string) => phoneNumber.replace(/[\\-\\(\\)\\+]/g, '');\n\nexport async function cleanPhoneNumber(\n\tthis: IExecuteSingleFunctions,\n\trequestOptions: IHttpRequestOptions,\n): Promise<IHttpRequestOptions> {\n\tconst phoneNumber = sanitizePhoneNumber(this.getNodeParameter('recipientPhoneNumber') as string);\n\n\tif (!requestOptions.body) {\n\t\trequestOptions.body = {};\n\t}\n\n\tset(requestOptions.body as IDataObject, 'to', phoneNumber);\n\n\treturn requestOptions;\n}\n\nexport async function sendErrorPostReceive(\n\tthis: IExecuteSingleFunctions,\n\tdata: INodeExecutionData[],\n\tresponse: IN8nHttpFullResponse,\n): Promise<INodeExecutionData[]> {\n\tif (response.statusCode === 500) {\n\t\tthrow new NodeApiError(\n\t\t\tthis.getNode(),\n\t\t\t{},\n\t\t\t{\n\t\t\t\tmessage: 'Sending failed',\n\t\t\t\tdescription:\n\t\t\t\t\t'If youâ€™re sending to a new test number, try sending a message to it from within the Meta developer portal first.',\n\t\t\t\thttpCode: '500',\n\t\t\t},\n\t\t);\n\t} else if (response.statusCode === 400) {\n\t\tconst error = { ...(response.body as WhatsAppApiError).error };\n\t\terror.message = error.message.replace(/^\\(#\\d+\\) /, '');\n\t\tconst messageType = this.getNodeParameter('messageType', 'media');\n\t\tif (error.message.endsWith('is not a valid whatsapp business account media attachment ID')) {\n\t\t\tthrow new NodeApiError(\n\t\t\t\tthis.getNode(),\n\t\t\t\t{ error },\n\t\t\t\t{\n\t\t\t\t\tmessage: `Invalid ${messageType} ID`,\n\t\t\t\t\tdescription: error.message,\n\t\t\t\t\thttpCode: '400',\n\t\t\t\t},\n\t\t\t);\n\t\t} else if (error.message.endsWith('is not a valid URI.')) {\n\t\t\tthrow new NodeApiError(\n\t\t\t\tthis.getNode(),\n\t\t\t\t{ error },\n\t\t\t\t{\n\t\t\t\t\tmessage: `Invalid ${messageType} URL`,\n\t\t\t\t\tdescription: error.message,\n\t\t\t\t\thttpCode: '400',\n\t\t\t\t},\n\t\t\t);\n\t\t}\n\t\tthrow new NodeApiError(\n\t\t\tthis.getNode(),\n\t\t\t{ ...(response as unknown as JsonObject), body: { error } },\n\t\t\t{},\n\t\t);\n\t} else if (response.statusCode > 399) {\n\t\tthrow new NodeApiError(this.getNode(), response as unknown as JsonObject);\n\t}\n\treturn data;\n}\n"],"mappings":"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","names":["set"]}