{"version":3,"sources":["../../../../nodes/EmailSend/v2/send.operation.ts"],"sourcesContent":["import type {\n\tIDataObject,\n\tIExecuteFunctions,\n\tINodeExecutionData,\n\tINodeProperties,\n\tJsonObject,\n} from 'n8n-workflow';\nimport { NodeApiError } from 'n8n-workflow';\n\nimport { createUtmCampaignLink, updateDisplayOptions } from '@utils/utilities';\n\nimport { fromEmailProperty, toEmailProperty } from './descriptions';\nimport { configureTransport, type EmailSendOptions } from './utils';\nimport { appendAttributionOption } from '../../../utils/descriptions';\n\nconst properties: INodeProperties[] = [\n\t// TODO: Add choice for text as text or html  (maybe also from name)\n\tfromEmailProperty,\n\ttoEmailProperty,\n\n\t{\n\t\tdisplayName: 'Subject',\n\t\tname: 'subject',\n\t\ttype: 'string',\n\t\tdefault: '',\n\t\tplaceholder: 'My subject line',\n\t\tdescription: 'Subject line of the email',\n\t},\n\t{\n\t\tdisplayName: 'Email Format',\n\t\tname: 'emailFormat',\n\t\ttype: 'options',\n\t\toptions: [\n\t\t\t{\n\t\t\t\tname: 'Text',\n\t\t\t\tvalue: 'text',\n\t\t\t\tdescription: 'Send email as plain text',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'HTML',\n\t\t\t\tvalue: 'html',\n\t\t\t\tdescription: 'Send email as HTML',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Both',\n\t\t\t\tvalue: 'both',\n\t\t\t\tdescription: \"Send both formats, recipient's client selects version to display\",\n\t\t\t},\n\t\t],\n\t\tdefault: 'html',\n\t\tdisplayOptions: {\n\t\t\thide: {\n\t\t\t\t'@version': [2],\n\t\t\t},\n\t\t},\n\t},\n\t{\n\t\tdisplayName: 'Email Format',\n\t\tname: 'emailFormat',\n\t\ttype: 'options',\n\t\toptions: [\n\t\t\t{\n\t\t\t\tname: 'Text',\n\t\t\t\tvalue: 'text',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'HTML',\n\t\t\t\tvalue: 'html',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Both',\n\t\t\t\tvalue: 'both',\n\t\t\t},\n\t\t],\n\t\tdefault: 'text',\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\t'@version': [2],\n\t\t\t},\n\t\t},\n\t},\n\t{\n\t\tdisplayName: 'Text',\n\t\tname: 'text',\n\t\ttype: 'string',\n\t\ttypeOptions: {\n\t\t\trows: 5,\n\t\t},\n\t\tdefault: '',\n\t\tdescription: 'Plain text message of email',\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\temailFormat: ['text', 'both'],\n\t\t\t},\n\t\t},\n\t},\n\t{\n\t\tdisplayName: 'HTML',\n\t\tname: 'html',\n\t\ttype: 'string',\n\t\ttypeOptions: {\n\t\t\trows: 5,\n\t\t},\n\t\tdefault: '',\n\t\tdescription: 'HTML text message of email',\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\temailFormat: ['html', 'both'],\n\t\t\t},\n\t\t},\n\t},\n\t{\n\t\tdisplayName: 'Options',\n\t\tname: 'options',\n\t\ttype: 'collection',\n\t\tplaceholder: 'Add option',\n\t\tdefault: {},\n\t\toptions: [\n\t\t\t{\n\t\t\t\t...appendAttributionOption,\n\t\t\t\tdescription:\n\t\t\t\t\t'Whether to include the phrase “This email was sent automatically with n8n” to the end of the email',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Attachments',\n\t\t\t\tname: 'attachments',\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: '',\n\t\t\t\tdescription:\n\t\t\t\t\t'Name of the binary properties that contain data to add to email as attachment. Multiple ones can be comma-separated. Reference embedded images or other content within the body of an email message, e.g. &lt;img src=\"cid:image_1\"&gt;',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'CC Email',\n\t\t\t\tname: 'ccEmail',\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: '',\n\t\t\t\tplaceholder: 'cc@example.com',\n\t\t\t\tdescription: 'Email address of CC recipient',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'BCC Email',\n\t\t\t\tname: 'bccEmail',\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: '',\n\t\t\t\tplaceholder: 'bcc@example.com',\n\t\t\t\tdescription: 'Email address of BCC recipient',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Ignore SSL Issues (Insecure)',\n\t\t\t\tname: 'allowUnauthorizedCerts',\n\t\t\t\ttype: 'boolean',\n\t\t\t\tdefault: false,\n\t\t\t\tdescription: 'Whether to connect even if SSL certificate validation is not possible',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Reply To',\n\t\t\t\tname: 'replyTo',\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: '',\n\t\t\t\tplaceholder: 'info@example.com',\n\t\t\t\tdescription: 'The email address to send the reply to',\n\t\t\t},\n\t\t],\n\t},\n];\n\nconst displayOptions = {\n\tshow: {\n\t\tresource: ['email'],\n\t\toperation: ['send'],\n\t},\n};\n\nexport const description = updateDisplayOptions(displayOptions, properties);\n\nexport async function execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\tconst items = this.getInputData();\n\tconst nodeVersion = this.getNode().typeVersion;\n\tconst instanceId = this.getInstanceId();\n\tconst credentials = await this.getCredentials('smtp');\n\n\tconst returnData: INodeExecutionData[] = [];\n\tlet item: INodeExecutionData;\n\n\tfor (let itemIndex = 0; itemIndex < items.length; itemIndex++) {\n\t\ttry {\n\t\t\titem = items[itemIndex];\n\n\t\t\tconst fromEmail = this.getNodeParameter('fromEmail', itemIndex) as string;\n\t\t\tconst toEmail = this.getNodeParameter('toEmail', itemIndex) as string;\n\t\t\tconst subject = this.getNodeParameter('subject', itemIndex) as string;\n\t\t\tconst emailFormat = this.getNodeParameter('emailFormat', itemIndex) as string;\n\t\t\tconst options = this.getNodeParameter('options', itemIndex, {}) as EmailSendOptions;\n\n\t\t\tconst transporter = configureTransport(credentials, options);\n\n\t\t\tconst mailOptions: IDataObject = {\n\t\t\t\tfrom: fromEmail,\n\t\t\t\tto: toEmail,\n\t\t\t\tcc: options.ccEmail,\n\t\t\t\tbcc: options.bccEmail,\n\t\t\t\tsubject,\n\t\t\t\treplyTo: options.replyTo,\n\t\t\t};\n\n\t\t\tif (emailFormat === 'text' || emailFormat === 'both') {\n\t\t\t\tmailOptions.text = this.getNodeParameter('text', itemIndex, '');\n\t\t\t}\n\n\t\t\tif (emailFormat === 'html' || emailFormat === 'both') {\n\t\t\t\tmailOptions.html = this.getNodeParameter('html', itemIndex, '');\n\t\t\t}\n\n\t\t\tlet appendAttribution = options.appendAttribution;\n\t\t\tif (appendAttribution === undefined) {\n\t\t\t\tappendAttribution = nodeVersion >= 2.1;\n\t\t\t}\n\n\t\t\tif (appendAttribution) {\n\t\t\t\tconst attributionText = 'This email was sent automatically with ';\n\t\t\t\tconst link = createUtmCampaignLink('n8n-nodes-base.emailSend', instanceId);\n\t\t\t\tif (emailFormat === 'html' || (emailFormat === 'both' && mailOptions.html)) {\n\t\t\t\t\tmailOptions.html = `\n\t\t\t\t\t${mailOptions.html}\n\t\t\t\t\t<br>\n\t\t\t\t\t<br>\n\t\t\t\t\t---\n\t\t\t\t\t<br>\n\t\t\t\t\t<em>${attributionText}<a href=\"${link}\" target=\"_blank\">n8n</a></em>\n\t\t\t\t\t`;\n\t\t\t\t} else {\n\t\t\t\t\tmailOptions.text = `${mailOptions.text}\\n\\n---\\n${attributionText}n8n\\n${'https://n8n.io'}`;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (options.attachments && item.binary) {\n\t\t\t\tconst attachments = [];\n\t\t\t\tconst attachmentProperties: string[] = options.attachments\n\t\t\t\t\t.split(',')\n\t\t\t\t\t.map((propertyName) => {\n\t\t\t\t\t\treturn propertyName.trim();\n\t\t\t\t\t});\n\n\t\t\t\tfor (const propertyName of attachmentProperties) {\n\t\t\t\t\tconst binaryData = this.helpers.assertBinaryData(itemIndex, propertyName);\n\t\t\t\t\tattachments.push({\n\t\t\t\t\t\tfilename: binaryData.fileName || 'unknown',\n\t\t\t\t\t\tcontent: await this.helpers.getBinaryDataBuffer(itemIndex, propertyName),\n\t\t\t\t\t\tcid: propertyName,\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tif (attachments.length) {\n\t\t\t\t\tmailOptions.attachments = attachments;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst info = await transporter.sendMail(mailOptions);\n\n\t\t\treturnData.push({\n\t\t\t\tjson: info as unknown as IDataObject,\n\t\t\t\tpairedItem: {\n\t\t\t\t\titem: itemIndex,\n\t\t\t\t},\n\t\t\t});\n\t\t} catch (error) {\n\t\t\tif (this.continueOnFail()) {\n\t\t\t\treturnData.push({\n\t\t\t\t\tjson: {\n\t\t\t\t\t\terror: error.message,\n\t\t\t\t\t},\n\t\t\t\t\tpairedItem: {\n\t\t\t\t\t\titem: itemIndex,\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tdelete error.cert;\n\t\t\tthrow new NodeApiError(this.getNode(), error as JsonObject);\n\t\t}\n\t}\n\n\treturn [returnData];\n}\n"],"mappings":"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","names":["import_descriptions"]}