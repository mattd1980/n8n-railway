{"version":3,"sources":["../../../nodes/Copper/GenericFunctions.ts"],"sourcesContent":["import { createHash } from 'crypto';\nimport flow from 'lodash/flow';\nimport omit from 'lodash/omit';\nimport type {\n\tICredentialDataDecryptedObject,\n\tIDataObject,\n\tIExecuteFunctions,\n\tIHookFunctions,\n\tIHttpRequestMethods,\n\tILoadOptionsFunctions,\n\tIHttpRequestOptions,\n\tIWebhookFunctions,\n\tJsonObject,\n} from 'n8n-workflow';\nimport { NodeApiError } from 'n8n-workflow';\n\nimport type {\n\tAddressFixedCollection,\n\tEmailFixedCollection,\n\tEmailsFixedCollection,\n\tPhoneNumbersFixedCollection,\n} from './utils/types';\n\n/**\n * Make an authenticated API request to Copper.\n */\nexport async function copperApiRequest(\n\tthis: IHookFunctions | IExecuteFunctions | ILoadOptionsFunctions | IWebhookFunctions,\n\tmethod: IHttpRequestMethods,\n\tresource: string,\n\tbody: IDataObject = {},\n\tqs: IDataObject = {},\n\turi = '',\n\toption: IDataObject = {},\n) {\n\tlet options: IHttpRequestOptions = {\n\t\theaders: {\n\t\t\t'Content-Type': 'application/json',\n\t\t},\n\t\tmethod,\n\t\tqs,\n\t\tbody,\n\t\turl: uri || `https://api.copper.com/developer_api/v1${resource}`,\n\t\tjson: true,\n\t};\n\n\toptions = Object.assign({}, options, option);\n\n\tif (!Object.keys(qs).length) {\n\t\tdelete options.qs;\n\t}\n\n\tif (Object.keys(options.body as IDataObject).length === 0) {\n\t\tdelete options.body;\n\t}\n\n\ttry {\n\t\treturn await this.helpers.requestWithAuthentication.call(this, 'copperApi', options);\n\t} catch (error) {\n\t\tthrow new NodeApiError(this.getNode(), error as JsonObject);\n\t}\n}\n\n/**\n * Creates a secret from the credentials\n *\n */\nexport function getAutomaticSecret(credentials: ICredentialDataDecryptedObject) {\n\tconst data = `${credentials.email},${credentials.apiKey}`;\n\treturn createHash('md5').update(data).digest('hex');\n}\n\nexport function adjustAddress(fixedCollection: AddressFixedCollection) {\n\tif (!fixedCollection.address) return fixedCollection;\n\n\tconst adjusted: { address?: object } = omit(fixedCollection, ['address']);\n\n\tif (fixedCollection.address) {\n\t\tadjusted.address = fixedCollection.address.addressFields;\n\t}\n\n\treturn adjusted;\n}\n\nexport function adjustPhoneNumbers(fixedCollection: PhoneNumbersFixedCollection) {\n\tif (!fixedCollection.phone_numbers) return fixedCollection;\n\n\tconst adjusted: { phone_numbers?: object } = omit(fixedCollection, ['phone_numbers']);\n\n\tif (fixedCollection.phone_numbers) {\n\t\tadjusted.phone_numbers = fixedCollection.phone_numbers.phoneFields;\n\t}\n\n\treturn adjusted;\n}\n\nexport function adjustEmails(fixedCollection: EmailsFixedCollection) {\n\tif (!fixedCollection.emails) return fixedCollection;\n\n\tconst adjusted: { emails?: object } = omit(fixedCollection, ['emails']);\n\n\tif (fixedCollection.emails) {\n\t\tadjusted.emails = fixedCollection.emails.emailFields;\n\t}\n\n\treturn adjusted;\n}\n\nexport function adjustProjectIds(fields: { project_ids?: string }) {\n\tif (!fields.project_ids) return fields;\n\n\tconst adjusted: { project_ids?: string[] } = omit(fields, ['project_ids']);\n\n\tadjusted.project_ids = fields.project_ids.includes(',')\n\t\t? fields.project_ids.split(',')\n\t\t: [fields.project_ids];\n\n\treturn adjusted;\n}\n\nexport function adjustEmail(fixedCollection: EmailFixedCollection) {\n\tif (!fixedCollection.email) return fixedCollection;\n\n\tconst adjusted: { email?: object } = omit(fixedCollection, ['email']);\n\n\tif (fixedCollection.email) {\n\t\tadjusted.email = fixedCollection.email.emailFields;\n\t}\n\n\treturn adjusted;\n}\n\nexport const adjustCompanyFields = flow(adjustAddress, adjustPhoneNumbers);\nexport const adjustLeadFields = flow(adjustCompanyFields, adjustEmail);\nexport const adjustPersonFields = flow(adjustCompanyFields, adjustEmails);\nexport const adjustTaskFields = flow(adjustLeadFields, adjustProjectIds);\n\n/**\n * Make an authenticated API request to Copper and return all items.\n */\nexport async function copperApiRequestAllItems(\n\tthis: IHookFunctions | ILoadOptionsFunctions | IExecuteFunctions,\n\tmethod: IHttpRequestMethods,\n\tresource: string,\n\tbody: IDataObject = {},\n\tqs: IDataObject = {},\n\turi = '',\n\toption: IDataObject = {},\n) {\n\tlet responseData;\n\tqs.page_size = 200;\n\tlet totalItems = 0;\n\tconst returnData: IDataObject[] = [];\n\n\tdo {\n\t\tresponseData = await copperApiRequest.call(this, method, resource, body, qs, uri, option);\n\t\ttotalItems = responseData.headers['x-pw-total'];\n\t\treturnData.push(...(responseData.body as IDataObject[]));\n\t} while (totalItems > returnData.length);\n\n\treturn returnData;\n}\n\n/**\n * Handle a Copper listing by returning all items or up to a limit.\n */\nexport async function handleListing(\n\tthis: IExecuteFunctions,\n\tmethod: IHttpRequestMethods,\n\tendpoint: string,\n\tqs: IDataObject = {},\n\tbody: IDataObject = {},\n\turi = '',\n) {\n\tconst returnAll = this.getNodeParameter('returnAll', 0);\n\n\tconst option = { resolveWithFullResponse: true };\n\n\tif (returnAll) {\n\t\treturn await copperApiRequestAllItems.call(this, method, endpoint, body, qs, uri, option);\n\t}\n\n\tconst limit = this.getNodeParameter('limit', 0);\n\tconst responseData = await copperApiRequestAllItems.call(\n\t\tthis,\n\t\tmethod,\n\t\tendpoint,\n\t\tbody,\n\t\tqs,\n\t\turi,\n\t\toption,\n\t);\n\treturn responseData.slice(0, limit);\n}\n"],"mappings":"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","names":["omit","flow"]}