{"version":3,"sources":["../../../nodes/Mailchimp/MailchimpTrigger.node.ts"],"sourcesContent":["import type {\n\tIDataObject,\n\tIHookFunctions,\n\tIWebhookFunctions,\n\tILoadOptionsFunctions,\n\tINodePropertyOptions,\n\tINodeType,\n\tINodeTypeDescription,\n\tIWebhookResponseData,\n\tJsonObject,\n} from 'n8n-workflow';\nimport { NodeApiError, NodeConnectionTypes } from 'n8n-workflow';\n\nimport { mailchimpApiRequest } from './GenericFunctions';\n\nexport class MailchimpTrigger implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'Mailchimp Trigger',\n\t\tname: 'mailchimpTrigger',\n\t\ticon: { light: 'file:mailchimp.svg', dark: 'file:mailchimp.dark.svg' },\n\t\tgroup: ['trigger'],\n\t\tversion: 1,\n\t\tdescription: 'Handle Mailchimp events via webhooks',\n\t\tdefaults: {\n\t\t\tname: 'Mailchimp Trigger',\n\t\t},\n\t\tinputs: [],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tcredentials: [\n\t\t\t{\n\t\t\t\tname: 'mailchimpApi',\n\t\t\t\trequired: true,\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tauthentication: ['apiKey'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'mailchimpOAuth2Api',\n\t\t\t\trequired: true,\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tauthentication: ['oAuth2'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t\twebhooks: [\n\t\t\t{\n\t\t\t\tname: 'setup',\n\t\t\t\thttpMethod: 'GET',\n\t\t\t\tresponseMode: 'onReceived',\n\t\t\t\tpath: 'webhook',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'default',\n\t\t\t\thttpMethod: 'POST',\n\t\t\t\tresponseMode: 'onReceived',\n\t\t\t\tpath: 'webhook',\n\t\t\t},\n\t\t],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Authentication',\n\t\t\t\tname: 'authentication',\n\t\t\t\ttype: 'options',\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'API Key',\n\t\t\t\t\t\tvalue: 'apiKey',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'OAuth2',\n\t\t\t\t\t\tvalue: 'oAuth2',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'apiKey',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'List Name or ID',\n\t\t\t\tname: 'list',\n\t\t\t\ttype: 'options',\n\t\t\t\trequired: true,\n\t\t\t\tdefault: '',\n\t\t\t\tdescription:\n\t\t\t\t\t'The list that is gonna fire the event. Choose from the list, or specify an ID using an <a href=\"https://docs.n8n.io/code/expressions/\">expression</a>.',\n\t\t\t\ttypeOptions: {\n\t\t\t\t\tloadOptionsMethod: 'getLists',\n\t\t\t\t},\n\t\t\t\toptions: [],\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Events',\n\t\t\t\tname: 'events',\n\t\t\t\ttype: 'multiOptions',\n\t\t\t\trequired: true,\n\t\t\t\tdefault: [],\n\t\t\t\tdescription: 'The events that can trigger the webhook and whether they are enabled',\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Campaign Sent',\n\t\t\t\t\t\tvalue: 'campaign',\n\t\t\t\t\t\tdescription: 'Whether the webhook is triggered when a campaign is sent or cancelled',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Cleaned',\n\t\t\t\t\t\tvalue: 'cleaned',\n\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t\"Whether the webhook is triggered when a subscriber's email address is cleaned from the list\",\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Email Address Updated',\n\t\t\t\t\t\tvalue: 'upemail',\n\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t\"Whether the webhook is triggered when a subscriber's email address is changed\",\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Profile Updated',\n\t\t\t\t\t\tvalue: 'profile',\n\t\t\t\t\t\tdescription: \"Whether the webhook is triggered when a subscriber's profile is updated\",\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Subscribe',\n\t\t\t\t\t\tvalue: 'subscribe',\n\t\t\t\t\t\tdescription: 'Whether the webhook is triggered when a list subscriber is added',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Unsubscribe',\n\t\t\t\t\t\tvalue: 'unsubscribe',\n\t\t\t\t\t\tdescription: 'Whether the webhook is triggered when a list member unsubscribes',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Sources',\n\t\t\t\tname: 'sources',\n\t\t\t\ttype: 'multiOptions',\n\t\t\t\trequired: true,\n\t\t\t\tdefault: [],\n\t\t\t\tdescription:\n\t\t\t\t\t'The possible sources of any events that can trigger the webhook and whether they are enabled',\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'User',\n\t\t\t\t\t\tvalue: 'user',\n\t\t\t\t\t\tdescription: 'Whether the webhook is triggered by subscriber-initiated actions',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Admin',\n\t\t\t\t\t\tvalue: 'admin',\n\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t'Whether the webhook is triggered by admin-initiated actions in the web interface',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'API',\n\t\t\t\t\t\tvalue: 'api',\n\t\t\t\t\t\tdescription: 'Whether the webhook is triggered by actions initiated via the API',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t],\n\t};\n\n\tmethods = {\n\t\tloadOptions: {\n\t\t\t// Get all the available lists to display them to user so that they can\n\t\t\t// select them easily\n\t\t\tasync getLists(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst returnData: INodePropertyOptions[] = [];\n\t\t\t\tconst response = await mailchimpApiRequest.call(this, '/lists', 'GET');\n\t\t\t\tconst lists = response.lists;\n\t\t\t\tfor (const list of lists) {\n\t\t\t\t\tconst listName = list.name;\n\t\t\t\t\tconst listId = list.id;\n\n\t\t\t\t\treturnData.push({\n\t\t\t\t\t\tname: listName,\n\t\t\t\t\t\tvalue: listId,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn returnData;\n\t\t\t},\n\t\t},\n\t};\n\n\twebhookMethods = {\n\t\tdefault: {\n\t\t\tasync checkExists(this: IHookFunctions): Promise<boolean> {\n\t\t\t\tconst webhookData = this.getWorkflowStaticData('node');\n\t\t\t\tconst listId = this.getNodeParameter('list') as string;\n\t\t\t\tif (webhookData.webhookId === undefined) {\n\t\t\t\t\t// No webhook id is set so no webhook can exist\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tconst endpoint = `/lists/${listId}/webhooks/${webhookData.webhookId}`;\n\t\t\t\ttry {\n\t\t\t\t\tawait mailchimpApiRequest.call(this, endpoint, 'GET');\n\t\t\t\t} catch (error) {\n\t\t\t\t\tif (\n\t\t\t\t\t\terror instanceof NodeApiError &&\n\t\t\t\t\t\terror.cause &&\n\t\t\t\t\t\t'isAxiosError' in error.cause &&\n\t\t\t\t\t\t'statusCode' in error.cause\n\t\t\t\t\t) {\n\t\t\t\t\t\tif (error.cause.statusCode === 404) {\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow error;\n\t\t\t\t\t}\n\t\t\t\t\tthrow new NodeApiError(this.getNode(), error as JsonObject);\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t},\n\n\t\t\tasync create(this: IHookFunctions): Promise<boolean> {\n\t\t\t\tconst webhookUrl = this.getNodeWebhookUrl('default');\n\t\t\t\tconst listId = this.getNodeParameter('list') as string;\n\t\t\t\tconst events = this.getNodeParameter('events', []) as string[];\n\t\t\t\tconst sources = this.getNodeParameter('sources', []) as string[];\n\t\t\t\tconst body = {\n\t\t\t\t\turl: webhookUrl,\n\t\t\t\t\tevents: events.reduce((object, currentValue) => {\n\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\tobject[currentValue] = true;\n\t\t\t\t\t\treturn object;\n\t\t\t\t\t}, {}),\n\t\t\t\t\tsources: sources.reduce((object, currentValue) => {\n\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\tobject[currentValue] = true;\n\t\t\t\t\t\treturn object;\n\t\t\t\t\t}, {}),\n\t\t\t\t};\n\t\t\t\tconst endpoint = `/lists/${listId}/webhooks`;\n\t\t\t\tconst webhook = await mailchimpApiRequest.call(this, endpoint, 'POST', body);\n\t\t\t\tif (webhook.id === undefined) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tconst webhookData = this.getWorkflowStaticData('node');\n\t\t\t\twebhookData.webhookId = webhook.id as string;\n\t\t\t\twebhookData.events = events;\n\t\t\t\twebhookData.sources = sources;\n\t\t\t\treturn true;\n\t\t\t},\n\n\t\t\tasync delete(this: IHookFunctions): Promise<boolean> {\n\t\t\t\tconst webhookData = this.getWorkflowStaticData('node');\n\t\t\t\tconst listId = this.getNodeParameter('list') as string;\n\t\t\t\tif (webhookData.webhookId !== undefined) {\n\t\t\t\t\tconst endpoint = `/lists/${listId}/webhooks/${webhookData.webhookId}`;\n\t\t\t\t\ttry {\n\t\t\t\t\t\tawait mailchimpApiRequest.call(this, endpoint, 'DELETE', {});\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\tdelete webhookData.webhookId;\n\t\t\t\t\tdelete webhookData.events;\n\t\t\t\t\tdelete webhookData.sources;\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t},\n\t\t},\n\t};\n\n\tasync webhook(this: IWebhookFunctions): Promise<IWebhookResponseData> {\n\t\tconst webhookData = this.getWorkflowStaticData('node');\n\t\tconst webhookName = this.getWebhookName();\n\t\tif (webhookName === 'setup') {\n\t\t\t// Is a create webhook confirmation request\n\t\t\tconst res = this.getResponseObject();\n\t\t\tres.status(200).end();\n\t\t\treturn {\n\t\t\t\tnoWebhookResponse: true,\n\t\t\t};\n\t\t}\n\t\tconst req = this.getRequestObject();\n\t\tif (req.body.id !== webhookData.id) {\n\t\t\treturn {};\n\t\t}\n\n\t\tif (\n\t\t\t// @ts-ignore\n\t\t\t!webhookData.events.includes(req.body.type) &&\n\t\t\t// @ts-ignore\n\t\t\t!webhookData.sources.includes(req.body.type)\n\t\t) {\n\t\t\treturn {};\n\t\t}\n\t\treturn {\n\t\t\tworkflowData: [this.helpers.returnJsonArray(req.body as IDataObject)],\n\t\t};\n\t}\n}\n"],"mappings":"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","names":[]}