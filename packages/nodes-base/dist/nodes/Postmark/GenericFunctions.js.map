{"version":3,"sources":["../../../nodes/Postmark/GenericFunctions.ts"],"sourcesContent":["import type {\n\tIExecuteFunctions,\n\tILoadOptionsFunctions,\n\tIDataObject,\n\tIHookFunctions,\n\tIWebhookFunctions,\n\tJsonObject,\n\tIHttpRequestMethods,\n\tIRequestOptions,\n} from 'n8n-workflow';\nimport { NodeApiError } from 'n8n-workflow';\n\nexport async function postmarkApiRequest(\n\tthis: IExecuteFunctions | IWebhookFunctions | IHookFunctions | ILoadOptionsFunctions,\n\tmethod: IHttpRequestMethods,\n\tendpoint: string,\n\n\tbody: any = {},\n\toption: IDataObject = {},\n): Promise<any> {\n\tlet options: IRequestOptions = {\n\t\theaders: {\n\t\t\t'Content-Type': 'application/json',\n\t\t\tAccept: 'application/json',\n\t\t},\n\t\tmethod,\n\t\tbody,\n\t\turi: 'https://api.postmarkapp.com' + endpoint,\n\t\tjson: true,\n\t};\n\tif (Object.keys(body as IDataObject).length === 0) {\n\t\tdelete options.body;\n\t}\n\toptions = Object.assign({}, options, option);\n\n\ttry {\n\t\treturn await this.helpers.requestWithAuthentication.call(this, 'postmarkApi', options);\n\t} catch (error) {\n\t\tthrow new NodeApiError(this.getNode(), error as JsonObject);\n\t}\n}\n\nexport function convertTriggerObjectToStringArray(webhookObject: any): string[] {\n\tconst triggers = webhookObject.Triggers;\n\tconst webhookEvents: string[] = [];\n\n\t// Translate Webhook trigger settings to string array\n\tif (triggers.Open.Enabled) {\n\t\twebhookEvents.push('open');\n\t}\n\tif (triggers.Open.PostFirstOpenOnly) {\n\t\twebhookEvents.push('firstOpen');\n\t}\n\tif (triggers.Click.Enabled) {\n\t\twebhookEvents.push('click');\n\t}\n\tif (triggers.Delivery.Enabled) {\n\t\twebhookEvents.push('delivery');\n\t}\n\tif (triggers.Bounce.Enabled) {\n\t\twebhookEvents.push('bounce');\n\t}\n\tif (triggers.Bounce.IncludeContent) {\n\t\twebhookEvents.push('includeContent');\n\t}\n\tif (triggers.SpamComplaint.Enabled) {\n\t\twebhookEvents.push('spamComplaint');\n\t}\n\tif (triggers.SpamComplaint.IncludeContent) {\n\t\tif (!webhookEvents.includes('IncludeContent')) {\n\t\t\twebhookEvents.push('includeContent');\n\t\t}\n\t}\n\tif (triggers.SubscriptionChange.Enabled) {\n\t\twebhookEvents.push('subscriptionChange');\n\t}\n\n\treturn webhookEvents;\n}\n\nexport function eventExists(currentEvents: string[], webhookEvents: string[]) {\n\tfor (const currentEvent of currentEvents) {\n\t\tif (!webhookEvents.includes(currentEvent)) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA,0BAA6B;AAE7B,eAAsB,mBAErB,QACA,UAEA,OAAY,CAAC,GACb,SAAsB,CAAC,GACR;AACf,MAAI,UAA2B;AAAA,IAC9B,SAAS;AAAA,MACR,gBAAgB;AAAA,MAChB,QAAQ;AAAA,IACT;AAAA,IACA;AAAA,IACA;AAAA,IACA,KAAK,gCAAgC;AAAA,IACrC,MAAM;AAAA,EACP;AACA,MAAI,OAAO,KAAK,IAAmB,EAAE,WAAW,GAAG;AAClD,WAAO,QAAQ;AAAA,EAChB;AACA,YAAU,OAAO,OAAO,CAAC,GAAG,SAAS,MAAM;AAE3C,MAAI;AACH,WAAO,MAAM,KAAK,QAAQ,0BAA0B,KAAK,MAAM,eAAe,OAAO;AAAA,EACtF,SAAS,OAAO;AACf,UAAM,IAAI,iCAAa,KAAK,QAAQ,GAAG,KAAmB;AAAA,EAC3D;AACD;AAEO,SAAS,kCAAkC,eAA8B;AAC/E,QAAM,WAAW,cAAc;AAC/B,QAAM,gBAA0B,CAAC;AAGjC,MAAI,SAAS,KAAK,SAAS;AAC1B,kBAAc,KAAK,MAAM;AAAA,EAC1B;AACA,MAAI,SAAS,KAAK,mBAAmB;AACpC,kBAAc,KAAK,WAAW;AAAA,EAC/B;AACA,MAAI,SAAS,MAAM,SAAS;AAC3B,kBAAc,KAAK,OAAO;AAAA,EAC3B;AACA,MAAI,SAAS,SAAS,SAAS;AAC9B,kBAAc,KAAK,UAAU;AAAA,EAC9B;AACA,MAAI,SAAS,OAAO,SAAS;AAC5B,kBAAc,KAAK,QAAQ;AAAA,EAC5B;AACA,MAAI,SAAS,OAAO,gBAAgB;AACnC,kBAAc,KAAK,gBAAgB;AAAA,EACpC;AACA,MAAI,SAAS,cAAc,SAAS;AACnC,kBAAc,KAAK,eAAe;AAAA,EACnC;AACA,MAAI,SAAS,cAAc,gBAAgB;AAC1C,QAAI,CAAC,cAAc,SAAS,gBAAgB,GAAG;AAC9C,oBAAc,KAAK,gBAAgB;AAAA,IACpC;AAAA,EACD;AACA,MAAI,SAAS,mBAAmB,SAAS;AACxC,kBAAc,KAAK,oBAAoB;AAAA,EACxC;AAEA,SAAO;AACR;AAEO,SAAS,YAAY,eAAyB,eAAyB;AAC7E,aAAW,gBAAgB,eAAe;AACzC,QAAI,CAAC,cAAc,SAAS,YAAY,GAAG;AAC1C,aAAO;AAAA,IACR;AAAA,EACD;AACA,SAAO;AACR;","names":[]}