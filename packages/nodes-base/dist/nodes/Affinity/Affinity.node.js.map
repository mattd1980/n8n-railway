{"version":3,"sources":["../../../nodes/Affinity/Affinity.node.ts"],"sourcesContent":["import type {\n\tIExecuteFunctions,\n\tIDataObject,\n\tILoadOptionsFunctions,\n\tINodeExecutionData,\n\tINodePropertyOptions,\n\tINodeType,\n\tINodeTypeDescription,\n} from 'n8n-workflow';\nimport { NodeConnectionTypes } from 'n8n-workflow';\n\nimport { affinityApiRequest, affinityApiRequestAllItems } from './GenericFunctions';\nimport { listFields, listOperations } from './ListDescription';\nimport { listEntryFields, listEntryOperations } from './ListEntryDescription';\nimport { organizationFields, organizationOperations } from './OrganizationDescription';\nimport type { IOrganization } from './OrganizationInterface';\nimport { personFields, personOperations } from './PersonDescription';\nimport type { IPerson } from './PersonInterface';\n\nexport class Affinity implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'Affinity',\n\t\tname: 'affinity',\n\t\ticon: { light: 'file:affinity.svg', dark: 'file:affinity.dark.svg' },\n\t\tgroup: ['output'],\n\t\tversion: 1,\n\t\tsubtitle: '={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}',\n\t\tdescription: 'Consume Affinity API',\n\t\tdefaults: {\n\t\t\tname: 'Affinity',\n\t\t},\n\t\tusableAsTool: true,\n\t\tinputs: [NodeConnectionTypes.Main],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tcredentials: [\n\t\t\t{\n\t\t\t\tname: 'affinityApi',\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Resource',\n\t\t\t\tname: 'resource',\n\t\t\t\ttype: 'options',\n\t\t\t\tnoDataExpression: true,\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'List',\n\t\t\t\t\t\tvalue: 'list',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'List Entry',\n\t\t\t\t\t\tvalue: 'listEntry',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Organization',\n\t\t\t\t\t\tvalue: 'organization',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Person',\n\t\t\t\t\t\tvalue: 'person',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'organization',\n\t\t\t},\n\t\t\t...listOperations,\n\t\t\t...listFields,\n\t\t\t...listEntryOperations,\n\t\t\t...listEntryFields,\n\t\t\t...organizationOperations,\n\t\t\t...organizationFields,\n\t\t\t...personOperations,\n\t\t\t...personFields,\n\t\t],\n\t};\n\n\tmethods = {\n\t\tloadOptions: {\n\t\t\t// Get all the available organizations to display them to user so that they can\n\t\t\t// select them easily\n\t\t\tasync getOrganizations(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst returnData: INodePropertyOptions[] = [];\n\t\t\t\tconst organizations = await affinityApiRequestAllItems.call(\n\t\t\t\t\tthis,\n\t\t\t\t\t'organizations',\n\t\t\t\t\t'GET',\n\t\t\t\t\t'/organizations',\n\t\t\t\t\t{},\n\t\t\t\t);\n\t\t\t\tfor (const organization of organizations) {\n\t\t\t\t\tconst organizationName = organization.name;\n\t\t\t\t\tconst organizationId = organization.id;\n\t\t\t\t\treturnData.push({\n\t\t\t\t\t\tname: organizationName,\n\t\t\t\t\t\tvalue: organizationId,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn returnData;\n\t\t\t},\n\t\t\t// Get all the available persons to display them to user so that they can\n\t\t\t// select them easily\n\t\t\tasync getPersons(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst returnData: INodePropertyOptions[] = [];\n\t\t\t\tconst persons = await affinityApiRequestAllItems.call(\n\t\t\t\t\tthis,\n\t\t\t\t\t'persons',\n\t\t\t\t\t'GET',\n\t\t\t\t\t'/persons',\n\t\t\t\t\t{},\n\t\t\t\t);\n\t\t\t\tfor (const person of persons) {\n\t\t\t\t\tlet personName = `${person.first_name} ${person.last_name}`;\n\t\t\t\t\tif (person.primary_email !== null) {\n\t\t\t\t\t\tpersonName += ` (${person.primary_email})`;\n\t\t\t\t\t}\n\t\t\t\t\tconst personId = person.id;\n\t\t\t\t\treturnData.push({\n\t\t\t\t\t\tname: personName,\n\t\t\t\t\t\tvalue: personId,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn returnData;\n\t\t\t},\n\t\t\t// Get all the available lists to display them to user so that they can\n\t\t\t// select them easily\n\t\t\tasync getLists(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst returnData: INodePropertyOptions[] = [];\n\t\t\t\tconst lists = await affinityApiRequest.call(this, 'GET', '/lists');\n\t\t\t\tfor (const list of lists) {\n\t\t\t\t\treturnData.push({\n\t\t\t\t\t\tname: list.name,\n\t\t\t\t\t\tvalue: list.id,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn returnData;\n\t\t\t},\n\t\t},\n\t};\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t\tconst items = this.getInputData();\n\t\tconst returnData: INodeExecutionData[] = [];\n\t\tconst length = items.length;\n\t\tlet responseData;\n\t\tconst qs: IDataObject = {};\n\t\tconst resource = this.getNodeParameter('resource', 0);\n\t\tconst operation = this.getNodeParameter('operation', 0);\n\t\tfor (let i = 0; i < length; i++) {\n\t\t\ttry {\n\t\t\t\tif (resource === 'list') {\n\t\t\t\t\t//https://api-docs.affinity.co/#get-a-specific-list\n\t\t\t\t\tif (operation === 'get') {\n\t\t\t\t\t\tconst listId = this.getNodeParameter('listId', i) as string;\n\t\t\t\t\t\tresponseData = await affinityApiRequest.call(this, 'GET', `/lists/${listId}`, {}, qs);\n\t\t\t\t\t}\n\t\t\t\t\t//https://api-docs.affinity.co/#get-all-lists\n\t\t\t\t\tif (operation === 'getAll') {\n\t\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', i);\n\t\t\t\t\t\tresponseData = await affinityApiRequest.call(this, 'GET', '/lists', {}, qs);\n\t\t\t\t\t\tif (!returnAll) {\n\t\t\t\t\t\t\tconst limit = this.getNodeParameter('limit', i);\n\t\t\t\t\t\t\tresponseData = responseData.splice(0, limit);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (resource === 'listEntry') {\n\t\t\t\t\t//https://api-docs.affinity.co/#create-a-new-list-entry\n\t\t\t\t\tif (operation === 'create') {\n\t\t\t\t\t\tconst listId = this.getNodeParameter('listId', i) as string;\n\t\t\t\t\t\tconst entityId = this.getNodeParameter('entityId', i) as string;\n\t\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i);\n\t\t\t\t\t\tconst body: IDataObject = {\n\t\t\t\t\t\t\tentity_id: parseInt(entityId, 10),\n\t\t\t\t\t\t};\n\t\t\t\t\t\tObject.assign(body, additionalFields);\n\t\t\t\t\t\tresponseData = await affinityApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'POST',\n\t\t\t\t\t\t\t`/lists/${listId}/list-entries`,\n\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\t//https://api-docs.affinity.co/#get-a-specific-list-entry\n\t\t\t\t\tif (operation === 'get') {\n\t\t\t\t\t\tconst listId = this.getNodeParameter('listId', i) as string;\n\t\t\t\t\t\tconst listEntryId = this.getNodeParameter('listEntryId', i) as string;\n\t\t\t\t\t\tresponseData = await affinityApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t`/lists/${listId}/list-entries/${listEntryId}`,\n\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\t//https://api-docs.affinity.co/#get-all-list-entries\n\t\t\t\t\tif (operation === 'getAll') {\n\t\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', i);\n\t\t\t\t\t\tconst listId = this.getNodeParameter('listId', i) as string;\n\t\t\t\t\t\tif (returnAll) {\n\t\t\t\t\t\t\tresponseData = await affinityApiRequestAllItems.call(\n\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t'list_entries',\n\t\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t\t`/lists/${listId}/list-entries`,\n\t\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tqs.page_size = this.getNodeParameter('limit', i);\n\t\t\t\t\t\t\tresponseData = await affinityApiRequest.call(\n\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t\t`/lists/${listId}/list-entries`,\n\t\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tresponseData = responseData.list_entries;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t//https://api-docs.affinity.co/#delete-a-specific-list-entry\n\t\t\t\t\tif (operation === 'delete') {\n\t\t\t\t\t\tconst listId = this.getNodeParameter('listId', i) as string;\n\t\t\t\t\t\tconst listEntryId = this.getNodeParameter('listEntryId', i) as string;\n\t\t\t\t\t\tresponseData = await affinityApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'DELETE',\n\t\t\t\t\t\t\t`/lists/${listId}/list-entries/${listEntryId}`,\n\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (resource === 'person') {\n\t\t\t\t\t//https://api-docs.affinity.co/#create-a-new-person\n\t\t\t\t\tif (operation === 'create') {\n\t\t\t\t\t\tconst firstName = this.getNodeParameter('firstName', i) as string;\n\t\t\t\t\t\tconst lastName = this.getNodeParameter('lastName', i) as string;\n\t\t\t\t\t\tconst emails = this.getNodeParameter('emails', i) as string[];\n\t\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i);\n\t\t\t\t\t\tconst body: IPerson = {\n\t\t\t\t\t\t\tfirst_name: firstName,\n\t\t\t\t\t\t\tlast_name: lastName,\n\t\t\t\t\t\t\temails,\n\t\t\t\t\t\t};\n\t\t\t\t\t\tif (additionalFields.organizations) {\n\t\t\t\t\t\t\tbody.organization_ids = additionalFields.organizations as number[];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresponseData = await affinityApiRequest.call(this, 'POST', '/persons', body);\n\t\t\t\t\t}\n\t\t\t\t\t//https://api-docs.affinity.co/#update-a-person\n\t\t\t\t\tif (operation === 'update') {\n\t\t\t\t\t\tconst personId = this.getNodeParameter('personId', i) as number;\n\t\t\t\t\t\tconst updateFields = this.getNodeParameter('updateFields', i);\n\t\t\t\t\t\tconst emails = this.getNodeParameter('emails', i) as string[];\n\t\t\t\t\t\tconst body: IPerson = {\n\t\t\t\t\t\t\temails,\n\t\t\t\t\t\t};\n\t\t\t\t\t\tif (updateFields.firstName) {\n\t\t\t\t\t\t\tbody.first_name = updateFields.firstName as string;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (updateFields.lastName) {\n\t\t\t\t\t\t\tbody.last_name = updateFields.lastName as string;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (updateFields.organizations) {\n\t\t\t\t\t\t\tbody.organization_ids = updateFields.organizations as number[];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresponseData = await affinityApiRequest.call(this, 'PUT', `/persons/${personId}`, body);\n\t\t\t\t\t}\n\t\t\t\t\t//https://api-docs.affinity.co/#get-a-specific-person\n\t\t\t\t\tif (operation === 'get') {\n\t\t\t\t\t\tconst personId = this.getNodeParameter('personId', i) as number;\n\t\t\t\t\t\tconst options = this.getNodeParameter('options', i);\n\t\t\t\t\t\tif (options.withInteractionDates) {\n\t\t\t\t\t\t\tqs.with_interaction_dates = options.withInteractionDates as boolean;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresponseData = await affinityApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t`/persons/${personId}`,\n\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\t//https://api-docs.affinity.co/#search-for-persons\n\t\t\t\t\tif (operation === 'getAll') {\n\t\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', i);\n\t\t\t\t\t\tconst options = this.getNodeParameter('options', i);\n\t\t\t\t\t\tif (options.term) {\n\t\t\t\t\t\t\tqs.term = options.term as string;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (options.withInteractionDates) {\n\t\t\t\t\t\t\tqs.with_interaction_dates = options.withInteractionDates as boolean;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (returnAll) {\n\t\t\t\t\t\t\tresponseData = await affinityApiRequestAllItems.call(\n\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t'persons',\n\t\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t\t'/persons',\n\t\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tqs.page_size = this.getNodeParameter('limit', i);\n\t\t\t\t\t\t\tresponseData = await affinityApiRequest.call(this, 'GET', '/persons', {}, qs);\n\t\t\t\t\t\t\tresponseData = responseData.persons;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t//https://api-docs.affinity.co/#delete-a-person\n\t\t\t\t\tif (operation === 'delete') {\n\t\t\t\t\t\tconst personId = this.getNodeParameter('personId', i) as number;\n\t\t\t\t\t\tresponseData = await affinityApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'DELETE',\n\t\t\t\t\t\t\t`/persons/${personId}`,\n\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (resource === 'organization') {\n\t\t\t\t\t//https://api-docs.affinity.co/#create-a-new-organization\n\t\t\t\t\tif (operation === 'create') {\n\t\t\t\t\t\tconst name = this.getNodeParameter('name', i) as string;\n\t\t\t\t\t\tconst domain = this.getNodeParameter('domain', i) as string;\n\t\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i);\n\t\t\t\t\t\tconst body: IOrganization = {\n\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\tdomain,\n\t\t\t\t\t\t};\n\t\t\t\t\t\tif (additionalFields.persons) {\n\t\t\t\t\t\t\tbody.person_ids = additionalFields.persons as number[];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresponseData = await affinityApiRequest.call(this, 'POST', '/organizations', body);\n\t\t\t\t\t}\n\t\t\t\t\t//https://api-docs.affinity.co/#update-an-organization\n\t\t\t\t\tif (operation === 'update') {\n\t\t\t\t\t\tconst organizationId = this.getNodeParameter('organizationId', i) as number;\n\t\t\t\t\t\tconst updateFields = this.getNodeParameter('updateFields', i);\n\t\t\t\t\t\tconst body: IOrganization = {};\n\t\t\t\t\t\tif (updateFields.name) {\n\t\t\t\t\t\t\tbody.name = updateFields.name as string;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (updateFields.domain) {\n\t\t\t\t\t\t\tbody.domain = updateFields.domain as string;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (updateFields.persons) {\n\t\t\t\t\t\t\tbody.person_ids = updateFields.persons as number[];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresponseData = await affinityApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'PUT',\n\t\t\t\t\t\t\t`/organizations/${organizationId}`,\n\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\t//https://api-docs.affinity.co/#get-a-specific-organization\n\t\t\t\t\tif (operation === 'get') {\n\t\t\t\t\t\tconst organizationId = this.getNodeParameter('organizationId', i) as number;\n\t\t\t\t\t\tconst options = this.getNodeParameter('options', i);\n\t\t\t\t\t\tif (options.withInteractionDates) {\n\t\t\t\t\t\t\tqs.with_interaction_dates = options.withInteractionDates as boolean;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresponseData = await affinityApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t`/organizations/${organizationId}`,\n\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\t//https://api-docs.affinity.co/#search-for-organizations\n\t\t\t\t\tif (operation === 'getAll') {\n\t\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', i);\n\t\t\t\t\t\tconst options = this.getNodeParameter('options', i);\n\t\t\t\t\t\tif (options.term) {\n\t\t\t\t\t\t\tqs.term = options.term as string;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (options.withInteractionDates) {\n\t\t\t\t\t\t\tqs.with_interaction_dates = options.withInteractionDates as boolean;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (returnAll) {\n\t\t\t\t\t\t\tresponseData = await affinityApiRequestAllItems.call(\n\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t'organizations',\n\t\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t\t'/organizations',\n\t\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tqs.page_size = this.getNodeParameter('limit', i);\n\t\t\t\t\t\t\tresponseData = await affinityApiRequest.call(this, 'GET', '/organizations', {}, qs);\n\t\t\t\t\t\t\tresponseData = responseData.organizations;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t//https://api-docs.affinity.co/#delete-an-organization\n\t\t\t\t\tif (operation === 'delete') {\n\t\t\t\t\t\tconst organizationId = this.getNodeParameter('organizationId', i) as number;\n\t\t\t\t\t\tresponseData = await affinityApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'DELETE',\n\t\t\t\t\t\t\t`/organizations/${organizationId}`,\n\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t);\n\n\t\t\t\treturnData.push(...executionData);\n\t\t\t} catch (error) {\n\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\tconst executionErrorData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\tthis.helpers.returnJsonArray({ error: error.message }),\n\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t);\n\t\t\t\t\treturnData.push(...executionErrorData);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\n\t\treturn [returnData];\n\t}\n}\n"],"mappings":"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","names":[]}