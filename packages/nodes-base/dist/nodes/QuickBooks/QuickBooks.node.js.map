{"version":3,"sources":["../../../nodes/QuickBooks/QuickBooks.node.ts"],"sourcesContent":["/* eslint-disable n8n-nodes-base/node-filename-against-convention */\nimport { capitalCase } from 'change-case';\nimport isEmpty from 'lodash/isEmpty';\nimport type {\n\tIExecuteFunctions,\n\tIDataObject,\n\tILoadOptionsFunctions,\n\tINodeExecutionData,\n\tINodeType,\n\tINodeTypeDescription,\n} from 'n8n-workflow';\nimport { NodeConnectionTypes, NodeOperationError } from 'n8n-workflow';\n\nimport {\n\tbillFields,\n\tbillOperations,\n\tcustomerFields,\n\tcustomerOperations,\n\temployeeFields,\n\temployeeOperations,\n\testimateFields,\n\testimateOperations,\n\tinvoiceFields,\n\tinvoiceOperations,\n\titemFields,\n\titemOperations,\n\tpaymentFields,\n\tpaymentOperations,\n\tpurchaseFields,\n\tpurchaseOperations,\n\ttransactionFields,\n\ttransactionOperations,\n\tvendorFields,\n\tvendorOperations,\n} from './descriptions';\nimport {\n\tadjustTransactionDates,\n\tgetRefAndSyncToken,\n\tgetSyncToken,\n\thandleBinaryData,\n\thandleListing,\n\tloadResource,\n\tpopulateFields,\n\tprocessLines,\n\tquickBooksApiRequest,\n\tsimplifyTransactionReport,\n} from './GenericFunctions';\nimport type { QuickBooksOAuth2Credentials, TransactionFields, TransactionReport } from './types';\n\nexport class QuickBooks implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'QuickBooks Online',\n\t\tname: 'quickbooks',\n\t\ticon: 'file:quickbooks.svg',\n\t\tgroup: ['transform'],\n\t\tversion: 1,\n\t\tsubtitle: '={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}',\n\t\tdescription: 'Consume the QuickBooks Online API',\n\t\tdefaults: {\n\t\t\tname: 'QuickBooks Online',\n\t\t},\n\t\tusableAsTool: true,\n\t\tinputs: [NodeConnectionTypes.Main],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tcredentials: [\n\t\t\t{\n\t\t\t\tname: 'quickBooksOAuth2Api',\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Resource',\n\t\t\t\tname: 'resource',\n\t\t\t\ttype: 'options',\n\t\t\t\tnoDataExpression: true,\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Bill',\n\t\t\t\t\t\tvalue: 'bill',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Customer',\n\t\t\t\t\t\tvalue: 'customer',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Employee',\n\t\t\t\t\t\tvalue: 'employee',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Estimate',\n\t\t\t\t\t\tvalue: 'estimate',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Invoice',\n\t\t\t\t\t\tvalue: 'invoice',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Item',\n\t\t\t\t\t\tvalue: 'item',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Payment',\n\t\t\t\t\t\tvalue: 'payment',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Purchase',\n\t\t\t\t\t\tvalue: 'purchase',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Transaction',\n\t\t\t\t\t\tvalue: 'transaction',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Vendor',\n\t\t\t\t\t\tvalue: 'vendor',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'customer',\n\t\t\t},\n\t\t\t...billOperations,\n\t\t\t...billFields,\n\t\t\t...customerOperations,\n\t\t\t...customerFields,\n\t\t\t...employeeOperations,\n\t\t\t...employeeFields,\n\t\t\t...estimateOperations,\n\t\t\t...estimateFields,\n\t\t\t...invoiceOperations,\n\t\t\t...invoiceFields,\n\t\t\t...itemOperations,\n\t\t\t...itemFields,\n\t\t\t...paymentOperations,\n\t\t\t...paymentFields,\n\t\t\t...purchaseOperations,\n\t\t\t...purchaseFields,\n\t\t\t...transactionOperations,\n\t\t\t...transactionFields,\n\t\t\t...vendorOperations,\n\t\t\t...vendorFields,\n\t\t],\n\t};\n\n\tmethods = {\n\t\tloadOptions: {\n\t\t\tasync getCustomers(this: ILoadOptionsFunctions) {\n\t\t\t\treturn await loadResource.call(this, 'customer');\n\t\t\t},\n\n\t\t\tasync getCustomFields(this: ILoadOptionsFunctions) {\n\t\t\t\treturn await loadResource.call(this, 'preferences');\n\t\t\t},\n\n\t\t\tasync getDepartments(this: ILoadOptionsFunctions) {\n\t\t\t\treturn await loadResource.call(this, 'department');\n\t\t\t},\n\n\t\t\tasync getItems(this: ILoadOptionsFunctions) {\n\t\t\t\treturn await loadResource.call(this, 'item');\n\t\t\t},\n\n\t\t\tasync getMemos(this: ILoadOptionsFunctions) {\n\t\t\t\treturn await loadResource.call(this, 'CreditMemo');\n\t\t\t},\n\n\t\t\tasync getPurchases(this: ILoadOptionsFunctions) {\n\t\t\t\treturn await loadResource.call(this, 'purchase');\n\t\t\t},\n\n\t\t\tasync getTaxCodeRefs(this: ILoadOptionsFunctions) {\n\t\t\t\treturn await loadResource.call(this, 'TaxCode');\n\t\t\t},\n\n\t\t\tasync getTerms(this: ILoadOptionsFunctions) {\n\t\t\t\treturn await loadResource.call(this, 'Term');\n\t\t\t},\n\n\t\t\tasync getVendors(this: ILoadOptionsFunctions) {\n\t\t\t\treturn await loadResource.call(this, 'vendor');\n\t\t\t},\n\t\t},\n\t};\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t\tconst items = this.getInputData();\n\n\t\tconst resource = this.getNodeParameter('resource', 0);\n\t\tconst operation = this.getNodeParameter('operation', 0);\n\n\t\tlet responseData;\n\t\tconst returnData: INodeExecutionData[] = [];\n\n\t\tconst { oauthTokenData } =\n\t\t\tawait this.getCredentials<QuickBooksOAuth2Credentials>('quickBooksOAuth2Api');\n\t\tconst companyId = oauthTokenData.callbackQueryString.realmId;\n\n\t\tfor (let i = 0; i < items.length; i++) {\n\t\t\ttry {\n\t\t\t\tif (resource === 'bill') {\n\t\t\t\t\t// *********************************************************************\n\t\t\t\t\t//                            bill\n\t\t\t\t\t// *********************************************************************\n\n\t\t\t\t\t// https://developer.intuit.com/app/developer/qbo/docs/api/accounting/most-commonly-used/bill\n\n\t\t\t\t\tif (operation === 'create') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//         bill: create\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\tconst lines = this.getNodeParameter('Line', i) as IDataObject[];\n\n\t\t\t\t\t\tif (!lines.length) {\n\t\t\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t\t\t`Please enter at least one line for the ${resource}.`,\n\t\t\t\t\t\t\t\t{ itemIndex: i },\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tlines.some(\n\t\t\t\t\t\t\t\t(line) =>\n\t\t\t\t\t\t\t\t\tline.DetailType === undefined ||\n\t\t\t\t\t\t\t\t\tline.Amount === undefined ||\n\t\t\t\t\t\t\t\t\tline.Description === undefined,\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t\t\t'Please enter detail type, amount and description for every line.',\n\t\t\t\t\t\t\t\t{ itemIndex: i },\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tlines.forEach((line) => {\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\tline.DetailType === 'AccountBasedExpenseLineDetail' &&\n\t\t\t\t\t\t\t\tline.accountId === undefined\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t\t\t\t'Please enter an account ID for the associated line.',\n\t\t\t\t\t\t\t\t\t{ itemIndex: i },\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t} else if (\n\t\t\t\t\t\t\t\tline.DetailType === 'ItemBasedExpenseLineDetail' &&\n\t\t\t\t\t\t\t\tline.itemId === undefined\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t\t\t\t'Please enter an item ID for the associated line.',\n\t\t\t\t\t\t\t\t\t{ itemIndex: i },\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tlet body = {\n\t\t\t\t\t\t\tVendorRef: {\n\t\t\t\t\t\t\t\tvalue: this.getNodeParameter('VendorRef', i),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t} as IDataObject;\n\n\t\t\t\t\t\tbody.Line = processLines.call(this, lines, resource);\n\n\t\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i);\n\n\t\t\t\t\t\tbody = populateFields.call(this, body, additionalFields, resource);\n\n\t\t\t\t\t\tconst endpoint = `/v3/company/${companyId}/${resource}`;\n\t\t\t\t\t\tresponseData = await quickBooksApiRequest.call(this, 'POST', endpoint, {}, body);\n\t\t\t\t\t\tresponseData = responseData[capitalCase(resource)];\n\t\t\t\t\t} else if (operation === 'delete') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//         bill: delete\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\tconst qs = {\n\t\t\t\t\t\t\toperation: 'delete',\n\t\t\t\t\t\t} as IDataObject;\n\n\t\t\t\t\t\tconst body = {\n\t\t\t\t\t\t\tId: this.getNodeParameter('billId', i),\n\t\t\t\t\t\t\tSyncToken: await getSyncToken.call(this, i, companyId, resource),\n\t\t\t\t\t\t} as IDataObject;\n\n\t\t\t\t\t\tconst endpoint = `/v3/company/${companyId}/${resource}`;\n\t\t\t\t\t\tresponseData = await quickBooksApiRequest.call(this, 'POST', endpoint, qs, body);\n\t\t\t\t\t\tresponseData = responseData[capitalCase(resource)];\n\t\t\t\t\t} else if (operation === 'get') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//         bill: get\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\tconst billId = this.getNodeParameter('billId', i);\n\t\t\t\t\t\tconst endpoint = `/v3/company/${companyId}/${resource}/${billId}`;\n\t\t\t\t\t\tresponseData = await quickBooksApiRequest.call(this, 'GET', endpoint, {}, {});\n\t\t\t\t\t\tresponseData = responseData[capitalCase(resource)];\n\t\t\t\t\t} else if (operation === 'getAll') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//         bill: getAll\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\tconst endpoint = `/v3/company/${companyId}/query`;\n\t\t\t\t\t\tresponseData = await handleListing.call(this, i, endpoint, resource);\n\t\t\t\t\t} else if (operation === 'update') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//         bill: update\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\tconst { ref, syncToken } = await getRefAndSyncToken.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\ti,\n\t\t\t\t\t\t\tcompanyId,\n\t\t\t\t\t\t\tresource,\n\t\t\t\t\t\t\t'VendorRef',\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tlet body = {\n\t\t\t\t\t\t\tId: this.getNodeParameter('billId', i),\n\t\t\t\t\t\t\tSyncToken: syncToken,\n\t\t\t\t\t\t\tsparse: true,\n\t\t\t\t\t\t\tVendorRef: {\n\t\t\t\t\t\t\t\tname: ref.name,\n\t\t\t\t\t\t\t\tvalue: ref.value,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t} as IDataObject;\n\n\t\t\t\t\t\tconst updateFields = this.getNodeParameter('updateFields', i);\n\n\t\t\t\t\t\tif (isEmpty(updateFields)) {\n\t\t\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t\t\t`Please enter at least one field to update for the ${resource}.`,\n\t\t\t\t\t\t\t\t{ itemIndex: i },\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbody = populateFields.call(this, body, updateFields, resource);\n\n\t\t\t\t\t\tconst endpoint = `/v3/company/${companyId}/${resource}`;\n\t\t\t\t\t\tresponseData = await quickBooksApiRequest.call(this, 'POST', endpoint, {}, body);\n\t\t\t\t\t\tresponseData = responseData[capitalCase(resource)];\n\t\t\t\t\t}\n\t\t\t\t} else if (resource === 'customer') {\n\t\t\t\t\t// *********************************************************************\n\t\t\t\t\t//                            customer\n\t\t\t\t\t// *********************************************************************\n\n\t\t\t\t\t// https://developer.intuit.com/app/developer/qbo/docs/api/accounting/most-commonly-used/customer\n\n\t\t\t\t\tif (operation === 'create') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//         customer: create\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\tlet body = {\n\t\t\t\t\t\t\tDisplayName: this.getNodeParameter('displayName', i),\n\t\t\t\t\t\t} as IDataObject;\n\n\t\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i);\n\n\t\t\t\t\t\tbody = populateFields.call(this, body, additionalFields, resource);\n\n\t\t\t\t\t\tconst endpoint = `/v3/company/${companyId}/${resource}`;\n\t\t\t\t\t\tresponseData = await quickBooksApiRequest.call(this, 'POST', endpoint, {}, body);\n\t\t\t\t\t\tresponseData = responseData[capitalCase(resource)];\n\t\t\t\t\t} else if (operation === 'get') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//         customer: get\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\tconst customerId = this.getNodeParameter('customerId', i);\n\t\t\t\t\t\tconst endpoint = `/v3/company/${companyId}/${resource}/${customerId}`;\n\t\t\t\t\t\tresponseData = await quickBooksApiRequest.call(this, 'GET', endpoint, {}, {});\n\t\t\t\t\t\tresponseData = responseData[capitalCase(resource)];\n\t\t\t\t\t} else if (operation === 'getAll') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//         customer: getAll\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\tconst endpoint = `/v3/company/${companyId}/query`;\n\t\t\t\t\t\tresponseData = await handleListing.call(this, i, endpoint, resource);\n\t\t\t\t\t} else if (operation === 'update') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//         customer: update\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\tlet body = {\n\t\t\t\t\t\t\tId: this.getNodeParameter('customerId', i),\n\t\t\t\t\t\t\tSyncToken: await getSyncToken.call(this, i, companyId, resource),\n\t\t\t\t\t\t\tsparse: true,\n\t\t\t\t\t\t} as IDataObject;\n\n\t\t\t\t\t\tconst updateFields = this.getNodeParameter('updateFields', i);\n\n\t\t\t\t\t\tif (isEmpty(updateFields)) {\n\t\t\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t\t\t`Please enter at least one field to update for the ${resource}.`,\n\t\t\t\t\t\t\t\t{ itemIndex: i },\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbody = populateFields.call(this, body, updateFields, resource);\n\n\t\t\t\t\t\tconst endpoint = `/v3/company/${companyId}/${resource}`;\n\t\t\t\t\t\tresponseData = await quickBooksApiRequest.call(this, 'POST', endpoint, {}, body);\n\t\t\t\t\t\tresponseData = responseData[capitalCase(resource)];\n\t\t\t\t\t}\n\t\t\t\t} else if (resource === 'employee') {\n\t\t\t\t\t// *********************************************************************\n\t\t\t\t\t//                            employee\n\t\t\t\t\t// *********************************************************************\n\n\t\t\t\t\tif (operation === 'create') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//         employee: create\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\tlet body = {\n\t\t\t\t\t\t\tFamilyName: this.getNodeParameter('FamilyName', i),\n\t\t\t\t\t\t\tGivenName: this.getNodeParameter('GivenName', i),\n\t\t\t\t\t\t} as IDataObject;\n\n\t\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i);\n\n\t\t\t\t\t\tbody = populateFields.call(this, body, additionalFields, resource);\n\n\t\t\t\t\t\tconst endpoint = `/v3/company/${companyId}/${resource}`;\n\t\t\t\t\t\tresponseData = await quickBooksApiRequest.call(this, 'POST', endpoint, {}, body);\n\t\t\t\t\t\tresponseData = responseData[capitalCase(resource)];\n\t\t\t\t\t} else if (operation === 'get') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//         employee: get\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\tconst employeeId = this.getNodeParameter('employeeId', i);\n\t\t\t\t\t\tconst endpoint = `/v3/company/${companyId}/${resource}/${employeeId}`;\n\t\t\t\t\t\tresponseData = await quickBooksApiRequest.call(this, 'GET', endpoint, {}, {});\n\t\t\t\t\t\tresponseData = responseData[capitalCase(resource)];\n\t\t\t\t\t} else if (operation === 'getAll') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//         employee: getAll\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\tconst endpoint = `/v3/company/${companyId}/query`;\n\t\t\t\t\t\tresponseData = await handleListing.call(this, i, endpoint, resource);\n\t\t\t\t\t} else if (operation === 'update') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//         employee: update\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\tlet body = {\n\t\t\t\t\t\t\tId: this.getNodeParameter('employeeId', i),\n\t\t\t\t\t\t\tSyncToken: await getSyncToken.call(this, i, companyId, resource),\n\t\t\t\t\t\t\tsparse: true,\n\t\t\t\t\t\t} as IDataObject;\n\n\t\t\t\t\t\tconst updateFields = this.getNodeParameter('updateFields', i);\n\n\t\t\t\t\t\tif (isEmpty(updateFields)) {\n\t\t\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t\t\t`Please enter at least one field to update for the ${resource}.`,\n\t\t\t\t\t\t\t\t{ itemIndex: i },\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbody = populateFields.call(this, body, updateFields, resource);\n\n\t\t\t\t\t\tconst endpoint = `/v3/company/${companyId}/${resource}`;\n\t\t\t\t\t\tresponseData = await quickBooksApiRequest.call(this, 'POST', endpoint, {}, body);\n\t\t\t\t\t\tresponseData = responseData[capitalCase(resource)];\n\t\t\t\t\t}\n\t\t\t\t} else if (resource === 'estimate') {\n\t\t\t\t\t// *********************************************************************\n\t\t\t\t\t//                            estimate\n\t\t\t\t\t// *********************************************************************\n\n\t\t\t\t\t// https://developer.intuit.com/app/developer/qbo/docs/api/accounting/most-commonly-used/estimate\n\n\t\t\t\t\tif (operation === 'create') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//         estimate: create\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\tconst lines = this.getNodeParameter('Line', i) as IDataObject[];\n\n\t\t\t\t\t\tif (!lines.length) {\n\t\t\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t\t\t`Please enter at least one line for the ${resource}.`,\n\t\t\t\t\t\t\t\t{ itemIndex: i },\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tlines.some(\n\t\t\t\t\t\t\t\t(line) =>\n\t\t\t\t\t\t\t\t\tline.DetailType === undefined ||\n\t\t\t\t\t\t\t\t\tline.Amount === undefined ||\n\t\t\t\t\t\t\t\t\tline.Description === undefined,\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t\t\t'Please enter detail type, amount and description for every line.',\n\t\t\t\t\t\t\t\t{ itemIndex: i },\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tlines.forEach((line) => {\n\t\t\t\t\t\t\tif (line.DetailType === 'SalesItemLineDetail' && line.itemId === undefined) {\n\t\t\t\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t\t\t\t'Please enter an item ID for the associated line.',\n\t\t\t\t\t\t\t\t\t{ itemIndex: i },\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tlet body = {\n\t\t\t\t\t\t\tCustomerRef: {\n\t\t\t\t\t\t\t\tvalue: this.getNodeParameter('CustomerRef', i),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t} as IDataObject;\n\n\t\t\t\t\t\tbody.Line = processLines.call(this, lines, resource);\n\t\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i);\n\n\t\t\t\t\t\tbody = populateFields.call(this, body, additionalFields, resource);\n\n\t\t\t\t\t\tconst endpoint = `/v3/company/${companyId}/${resource}`;\n\t\t\t\t\t\tresponseData = await quickBooksApiRequest.call(this, 'POST', endpoint, {}, body);\n\t\t\t\t\t\tresponseData = responseData[capitalCase(resource)];\n\t\t\t\t\t} else if (operation === 'delete') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//         estimate: delete\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\tconst qs = {\n\t\t\t\t\t\t\toperation: 'delete',\n\t\t\t\t\t\t} as IDataObject;\n\n\t\t\t\t\t\tconst body = {\n\t\t\t\t\t\t\tId: this.getNodeParameter('estimateId', i),\n\t\t\t\t\t\t\tSyncToken: await getSyncToken.call(this, i, companyId, resource),\n\t\t\t\t\t\t} as IDataObject;\n\n\t\t\t\t\t\tconst endpoint = `/v3/company/${companyId}/${resource}`;\n\t\t\t\t\t\tresponseData = await quickBooksApiRequest.call(this, 'POST', endpoint, qs, body);\n\t\t\t\t\t\tresponseData = responseData[capitalCase(resource)];\n\t\t\t\t\t} else if (operation === 'get') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//         estimate: get\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\tconst estimateId = this.getNodeParameter('estimateId', i) as string;\n\t\t\t\t\t\tconst download = this.getNodeParameter('download', i);\n\n\t\t\t\t\t\tif (download) {\n\t\t\t\t\t\t\tresponseData = await handleBinaryData.call(\n\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\titems,\n\t\t\t\t\t\t\t\ti,\n\t\t\t\t\t\t\t\tcompanyId,\n\t\t\t\t\t\t\t\tresource,\n\t\t\t\t\t\t\t\testimateId,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst endpoint = `/v3/company/${companyId}/${resource}/${estimateId}`;\n\t\t\t\t\t\t\tresponseData = await quickBooksApiRequest.call(this, 'GET', endpoint, {}, {});\n\t\t\t\t\t\t\tresponseData = responseData[capitalCase(resource)];\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (operation === 'getAll') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//         estimate: getAll\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\tconst endpoint = `/v3/company/${companyId}/query`;\n\t\t\t\t\t\tresponseData = await handleListing.call(this, i, endpoint, resource);\n\t\t\t\t\t} else if (operation === 'send') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//         estimate: send\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\tconst estimateId = this.getNodeParameter('estimateId', i) as string;\n\n\t\t\t\t\t\tconst qs = {\n\t\t\t\t\t\t\tsendTo: this.getNodeParameter('email', i) as string,\n\t\t\t\t\t\t} as IDataObject;\n\n\t\t\t\t\t\tconst endpoint = `/v3/company/${companyId}/${resource}/${estimateId}/send`;\n\t\t\t\t\t\tresponseData = await quickBooksApiRequest.call(this, 'POST', endpoint, qs, {});\n\t\t\t\t\t\tresponseData = responseData[capitalCase(resource)];\n\t\t\t\t\t} else if (operation === 'update') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//         estimate: update\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\tconst { ref, syncToken } = await getRefAndSyncToken.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\ti,\n\t\t\t\t\t\t\tcompanyId,\n\t\t\t\t\t\t\tresource,\n\t\t\t\t\t\t\t'CustomerRef',\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tlet body = {\n\t\t\t\t\t\t\tId: this.getNodeParameter('estimateId', i),\n\t\t\t\t\t\t\tSyncToken: syncToken,\n\t\t\t\t\t\t\tsparse: true,\n\t\t\t\t\t\t\tCustomerRef: {\n\t\t\t\t\t\t\t\tname: ref.name,\n\t\t\t\t\t\t\t\tvalue: ref.value,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t} as IDataObject;\n\n\t\t\t\t\t\tconst updateFields = this.getNodeParameter('updateFields', i);\n\n\t\t\t\t\t\tif (isEmpty(updateFields)) {\n\t\t\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t\t\t`Please enter at least one field to update for the ${resource}.`,\n\t\t\t\t\t\t\t\t{ itemIndex: i },\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbody = populateFields.call(this, body, updateFields, resource);\n\n\t\t\t\t\t\tconst endpoint = `/v3/company/${companyId}/${resource}`;\n\t\t\t\t\t\tresponseData = await quickBooksApiRequest.call(this, 'POST', endpoint, {}, body);\n\t\t\t\t\t\tresponseData = responseData[capitalCase(resource)];\n\t\t\t\t\t}\n\t\t\t\t} else if (resource === 'invoice') {\n\t\t\t\t\t// *********************************************************************\n\t\t\t\t\t//                            invoice\n\t\t\t\t\t// *********************************************************************\n\n\t\t\t\t\t// https://developer.intuit.com/app/developer/qbo/docs/api/accounting/most-commonly-used/invoice\n\n\t\t\t\t\tif (operation === 'create') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//         invoice: create\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\tconst lines = this.getNodeParameter('Line', i) as IDataObject[];\n\n\t\t\t\t\t\tif (!lines.length) {\n\t\t\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t\t\t`Please enter at least one line for the ${resource}.`,\n\t\t\t\t\t\t\t\t{ itemIndex: i },\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tlines.some(\n\t\t\t\t\t\t\t\t(line) =>\n\t\t\t\t\t\t\t\t\tline.DetailType === undefined ||\n\t\t\t\t\t\t\t\t\tline.Amount === undefined ||\n\t\t\t\t\t\t\t\t\tline.Description === undefined,\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t\t\t'Please enter detail type, amount and description for every line.',\n\t\t\t\t\t\t\t\t{ itemIndex: i },\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tlines.forEach((line) => {\n\t\t\t\t\t\t\tif (line.DetailType === 'SalesItemLineDetail' && line.itemId === undefined) {\n\t\t\t\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t\t\t\t'Please enter an item ID for the associated line.',\n\t\t\t\t\t\t\t\t\t{ itemIndex: i },\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tlet body = {\n\t\t\t\t\t\t\tCustomerRef: {\n\t\t\t\t\t\t\t\tvalue: this.getNodeParameter('CustomerRef', i),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t} as IDataObject;\n\n\t\t\t\t\t\tbody.Line = processLines.call(this, lines, resource);\n\n\t\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i);\n\n\t\t\t\t\t\tbody = populateFields.call(this, body, additionalFields, resource);\n\n\t\t\t\t\t\tconst endpoint = `/v3/company/${companyId}/${resource}`;\n\t\t\t\t\t\tresponseData = await quickBooksApiRequest.call(this, 'POST', endpoint, {}, body);\n\t\t\t\t\t\tresponseData = responseData[capitalCase(resource)];\n\t\t\t\t\t} else if (operation === 'delete') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//         invoice: delete\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\tconst qs = {\n\t\t\t\t\t\t\toperation: 'delete',\n\t\t\t\t\t\t} as IDataObject;\n\n\t\t\t\t\t\tconst body = {\n\t\t\t\t\t\t\tId: this.getNodeParameter('invoiceId', i),\n\t\t\t\t\t\t\tSyncToken: await getSyncToken.call(this, i, companyId, resource),\n\t\t\t\t\t\t} as IDataObject;\n\n\t\t\t\t\t\tconst endpoint = `/v3/company/${companyId}/${resource}`;\n\t\t\t\t\t\tresponseData = await quickBooksApiRequest.call(this, 'POST', endpoint, qs, body);\n\t\t\t\t\t\tresponseData = responseData[capitalCase(resource)];\n\t\t\t\t\t} else if (operation === 'get') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//         invoice: get\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\tconst invoiceId = this.getNodeParameter('invoiceId', i) as string;\n\t\t\t\t\t\tconst download = this.getNodeParameter('download', i);\n\n\t\t\t\t\t\tif (download) {\n\t\t\t\t\t\t\tresponseData = await handleBinaryData.call(\n\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\titems,\n\t\t\t\t\t\t\t\ti,\n\t\t\t\t\t\t\t\tcompanyId,\n\t\t\t\t\t\t\t\tresource,\n\t\t\t\t\t\t\t\tinvoiceId,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst endpoint = `/v3/company/${companyId}/${resource}/${invoiceId}`;\n\t\t\t\t\t\t\tresponseData = await quickBooksApiRequest.call(this, 'GET', endpoint, {}, {});\n\t\t\t\t\t\t\tresponseData = responseData[capitalCase(resource)];\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (operation === 'getAll') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//         invoice: getAll\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\tconst endpoint = `/v3/company/${companyId}/query`;\n\t\t\t\t\t\tresponseData = await handleListing.call(this, i, endpoint, resource);\n\t\t\t\t\t} else if (operation === 'send') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//         invoice: send\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\tconst invoiceId = this.getNodeParameter('invoiceId', i) as string;\n\n\t\t\t\t\t\tconst qs = {\n\t\t\t\t\t\t\tsendTo: this.getNodeParameter('email', i) as string,\n\t\t\t\t\t\t} as IDataObject;\n\n\t\t\t\t\t\tconst endpoint = `/v3/company/${companyId}/${resource}/${invoiceId}/send`;\n\t\t\t\t\t\tresponseData = await quickBooksApiRequest.call(this, 'POST', endpoint, qs, {});\n\t\t\t\t\t\tresponseData = responseData[capitalCase(resource)];\n\t\t\t\t\t} else if (operation === 'update') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//         invoice: update\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\tconst { ref, syncToken } = await getRefAndSyncToken.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\ti,\n\t\t\t\t\t\t\tcompanyId,\n\t\t\t\t\t\t\tresource,\n\t\t\t\t\t\t\t'CustomerRef',\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tlet body = {\n\t\t\t\t\t\t\tId: this.getNodeParameter('invoiceId', i),\n\t\t\t\t\t\t\tSyncToken: syncToken,\n\t\t\t\t\t\t\tsparse: true,\n\t\t\t\t\t\t\tCustomerRef: {\n\t\t\t\t\t\t\t\tname: ref.name,\n\t\t\t\t\t\t\t\tvalue: ref.value,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t} as IDataObject;\n\n\t\t\t\t\t\tconst updateFields = this.getNodeParameter('updateFields', i);\n\n\t\t\t\t\t\tif (isEmpty(updateFields)) {\n\t\t\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t\t\t`Please enter at least one field to update for the ${resource}.`,\n\t\t\t\t\t\t\t\t{ itemIndex: i },\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbody = populateFields.call(this, body, updateFields, resource);\n\n\t\t\t\t\t\tconst endpoint = `/v3/company/${companyId}/${resource}`;\n\t\t\t\t\t\tresponseData = await quickBooksApiRequest.call(this, 'POST', endpoint, {}, body);\n\t\t\t\t\t\tresponseData = responseData[capitalCase(resource)];\n\t\t\t\t\t} else if (operation === 'void') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//         invoice: void\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\tconst qs = {\n\t\t\t\t\t\t\tId: this.getNodeParameter('invoiceId', i),\n\t\t\t\t\t\t\tSyncToken: await getSyncToken.call(this, i, companyId, resource),\n\t\t\t\t\t\t\toperation: 'void',\n\t\t\t\t\t\t} as IDataObject;\n\n\t\t\t\t\t\tconst endpoint = `/v3/company/${companyId}/${resource}`;\n\t\t\t\t\t\tresponseData = await quickBooksApiRequest.call(this, 'POST', endpoint, qs, {});\n\t\t\t\t\t\tresponseData = responseData[capitalCase(resource)];\n\t\t\t\t\t}\n\t\t\t\t} else if (resource === 'item') {\n\t\t\t\t\t// *********************************************************************\n\t\t\t\t\t//                            item\n\t\t\t\t\t// *********************************************************************\n\n\t\t\t\t\t// https://developer.intuit.com/app/developer/qbo/docs/api/accounting/most-commonly-used/item\n\n\t\t\t\t\tif (operation === 'get') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//         item: get\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\tconst item = this.getNodeParameter('itemId', i);\n\t\t\t\t\t\tconst endpoint = `/v3/company/${companyId}/${resource}/${item}`;\n\t\t\t\t\t\tresponseData = await quickBooksApiRequest.call(this, 'GET', endpoint, {}, {});\n\t\t\t\t\t\tresponseData = responseData[capitalCase(resource)];\n\t\t\t\t\t} else if (operation === 'getAll') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//         item: getAll\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\tconst endpoint = `/v3/company/${companyId}/query`;\n\t\t\t\t\t\tresponseData = await handleListing.call(this, i, endpoint, resource);\n\t\t\t\t\t}\n\t\t\t\t} else if (resource === 'payment') {\n\t\t\t\t\t// *********************************************************************\n\t\t\t\t\t//                            payment\n\t\t\t\t\t// *********************************************************************\n\n\t\t\t\t\t// https://developer.intuit.com/app/developer/qbo/docs/api/accounting/most-commonly-used/payment\n\n\t\t\t\t\tif (operation === 'create') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//         payment: create\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\tlet body = {\n\t\t\t\t\t\t\tCustomerRef: {\n\t\t\t\t\t\t\t\tvalue: this.getNodeParameter('CustomerRef', i),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tTotalAmt: this.getNodeParameter('TotalAmt', i),\n\t\t\t\t\t\t} as IDataObject;\n\n\t\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i);\n\n\t\t\t\t\t\tbody = populateFields.call(this, body, additionalFields, resource);\n\n\t\t\t\t\t\tconst endpoint = `/v3/company/${companyId}/${resource}`;\n\t\t\t\t\t\tresponseData = await quickBooksApiRequest.call(this, 'POST', endpoint, {}, body);\n\t\t\t\t\t\tresponseData = responseData[capitalCase(resource)];\n\t\t\t\t\t} else if (operation === 'delete') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//         payment: delete\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\tconst qs = {\n\t\t\t\t\t\t\toperation: 'delete',\n\t\t\t\t\t\t} as IDataObject;\n\n\t\t\t\t\t\tconst body = {\n\t\t\t\t\t\t\tId: this.getNodeParameter('paymentId', i),\n\t\t\t\t\t\t\tSyncToken: await getSyncToken.call(this, i, companyId, resource),\n\t\t\t\t\t\t} as IDataObject;\n\n\t\t\t\t\t\tconst endpoint = `/v3/company/${companyId}/${resource}`;\n\t\t\t\t\t\tresponseData = await quickBooksApiRequest.call(this, 'POST', endpoint, qs, body);\n\t\t\t\t\t\tresponseData = responseData[capitalCase(resource)];\n\t\t\t\t\t} else if (operation === 'get') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//         payment: get\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\tconst paymentId = this.getNodeParameter('paymentId', i) as string;\n\t\t\t\t\t\tconst download = this.getNodeParameter('download', i);\n\n\t\t\t\t\t\tif (download) {\n\t\t\t\t\t\t\tresponseData = await handleBinaryData.call(\n\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\titems,\n\t\t\t\t\t\t\t\ti,\n\t\t\t\t\t\t\t\tcompanyId,\n\t\t\t\t\t\t\t\tresource,\n\t\t\t\t\t\t\t\tpaymentId,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst endpoint = `/v3/company/${companyId}/${resource}/${paymentId}`;\n\t\t\t\t\t\t\tresponseData = await quickBooksApiRequest.call(this, 'GET', endpoint, {}, {});\n\t\t\t\t\t\t\tresponseData = responseData[capitalCase(resource)];\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (operation === 'getAll') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//         payment: getAll\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\tconst endpoint = `/v3/company/${companyId}/query`;\n\t\t\t\t\t\tresponseData = await handleListing.call(this, i, endpoint, resource);\n\t\t\t\t\t} else if (operation === 'send') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//         payment: send\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\tconst paymentId = this.getNodeParameter('paymentId', i) as string;\n\n\t\t\t\t\t\tconst qs = {\n\t\t\t\t\t\t\tsendTo: this.getNodeParameter('email', i) as string,\n\t\t\t\t\t\t} as IDataObject;\n\n\t\t\t\t\t\tconst endpoint = `/v3/company/${companyId}/${resource}/${paymentId}/send`;\n\t\t\t\t\t\tresponseData = await quickBooksApiRequest.call(this, 'POST', endpoint, qs, {});\n\t\t\t\t\t\tresponseData = responseData[capitalCase(resource)];\n\t\t\t\t\t} else if (operation === 'update') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//         payment: update\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\tconst { ref, syncToken } = await getRefAndSyncToken.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\ti,\n\t\t\t\t\t\t\tcompanyId,\n\t\t\t\t\t\t\tresource,\n\t\t\t\t\t\t\t'CustomerRef',\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tlet body = {\n\t\t\t\t\t\t\tId: this.getNodeParameter('paymentId', i),\n\t\t\t\t\t\t\tSyncToken: syncToken,\n\t\t\t\t\t\t\tsparse: true,\n\t\t\t\t\t\t\tCustomerRef: {\n\t\t\t\t\t\t\t\tname: ref.name,\n\t\t\t\t\t\t\t\tvalue: ref.value,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t} as IDataObject;\n\n\t\t\t\t\t\tconst updateFields = this.getNodeParameter('updateFields', i);\n\n\t\t\t\t\t\tif (isEmpty(updateFields)) {\n\t\t\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t\t\t`Please enter at least one field to update for the ${resource}.`,\n\t\t\t\t\t\t\t\t{ itemIndex: i },\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbody = populateFields.call(this, body, updateFields, resource);\n\n\t\t\t\t\t\tconst endpoint = `/v3/company/${companyId}/${resource}`;\n\t\t\t\t\t\tresponseData = await quickBooksApiRequest.call(this, 'POST', endpoint, {}, body);\n\t\t\t\t\t\tresponseData = responseData[capitalCase(resource)];\n\t\t\t\t\t} else if (operation === 'void') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//         payment: void\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\tconst qs = {\n\t\t\t\t\t\t\tId: this.getNodeParameter('paymentId', i),\n\t\t\t\t\t\t\tSyncToken: await getSyncToken.call(this, i, companyId, resource),\n\t\t\t\t\t\t\toperation: 'void',\n\t\t\t\t\t\t} as IDataObject;\n\n\t\t\t\t\t\tconst endpoint = `/v3/company/${companyId}/${resource}`;\n\t\t\t\t\t\tresponseData = await quickBooksApiRequest.call(this, 'POST', endpoint, qs, {});\n\t\t\t\t\t\tresponseData = responseData[capitalCase(resource)];\n\t\t\t\t\t}\n\t\t\t\t} else if (resource === 'purchase') {\n\t\t\t\t\t// *********************************************************************\n\t\t\t\t\t//                            purchase\n\t\t\t\t\t// *********************************************************************\n\n\t\t\t\t\t// https://developer.intuit.com/app/developer/qbo/docs/api/accounting/all-entities/purchase\n\n\t\t\t\t\tif (operation === 'get') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//         purchase: get\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\tconst purchaseId = this.getNodeParameter('purchaseId', i);\n\t\t\t\t\t\tconst endpoint = `/v3/company/${companyId}/${resource}/${purchaseId}`;\n\t\t\t\t\t\tresponseData = await quickBooksApiRequest.call(this, 'GET', endpoint, {}, {});\n\t\t\t\t\t\tresponseData = responseData[capitalCase(resource)];\n\t\t\t\t\t} else if (operation === 'getAll') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//         purchase: getAll\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\tconst endpoint = `/v3/company/${companyId}/query`;\n\t\t\t\t\t\tresponseData = await handleListing.call(this, i, endpoint, resource);\n\t\t\t\t\t}\n\t\t\t\t} else if (resource === 'transaction') {\n\t\t\t\t\t// *********************************************************************\n\t\t\t\t\t//                            transaction\n\t\t\t\t\t// *********************************************************************\n\n\t\t\t\t\t// https://developer.intuit.com/app/developer/qbo/docs/api/accounting/all-entities/transactionlist\n\n\t\t\t\t\tif (operation === 'getReport') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//        transaction: getReport\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\tconst { columns, memo, term, customer, vendor, ...rest } = this.getNodeParameter(\n\t\t\t\t\t\t\t'filters',\n\t\t\t\t\t\t\ti,\n\t\t\t\t\t\t) as TransactionFields;\n\n\t\t\t\t\t\tlet qs = { ...rest };\n\n\t\t\t\t\t\tif (columns?.length) {\n\t\t\t\t\t\t\tqs.columns = columns.join(',');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (memo?.length) {\n\t\t\t\t\t\t\tqs.memo = memo.join(',');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (term?.length) {\n\t\t\t\t\t\t\tqs.term = term.join(',');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (customer?.length) {\n\t\t\t\t\t\t\tqs.customer = customer.join(',');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (vendor?.length) {\n\t\t\t\t\t\t\tqs.vendor = vendor.join(',');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tqs = adjustTransactionDates(qs);\n\n\t\t\t\t\t\tconst endpoint = `/v3/company/${companyId}/reports/TransactionList`;\n\t\t\t\t\t\tresponseData = await quickBooksApiRequest.call(this, 'GET', endpoint, qs, {});\n\n\t\t\t\t\t\tconst simplifyResponse = this.getNodeParameter('simple', i, true) as boolean;\n\n\t\t\t\t\t\tif (!Object.keys(responseData?.Rows as IDataObject).length) {\n\t\t\t\t\t\t\tresponseData = [];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (simplifyResponse && !Array.isArray(responseData)) {\n\t\t\t\t\t\t\tresponseData = simplifyTransactionReport(responseData as TransactionReport);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (resource === 'vendor') {\n\t\t\t\t\t// *********************************************************************\n\t\t\t\t\t//                            vendor\n\t\t\t\t\t// *********************************************************************\n\n\t\t\t\t\t// https://developer.intuit.com/app/developer/qbo/docs/api/accounting/most-commonly-used/vendor\n\n\t\t\t\t\tif (operation === 'create') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//         vendor: create\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\tlet body = {\n\t\t\t\t\t\t\tDisplayName: this.getNodeParameter('displayName', i),\n\t\t\t\t\t\t} as IDataObject;\n\n\t\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i);\n\n\t\t\t\t\t\tbody = populateFields.call(this, body, additionalFields, resource);\n\n\t\t\t\t\t\tconst endpoint = `/v3/company/${companyId}/${resource}`;\n\t\t\t\t\t\tresponseData = await quickBooksApiRequest.call(this, 'POST', endpoint, {}, body);\n\t\t\t\t\t\tresponseData = responseData[capitalCase(resource)];\n\t\t\t\t\t} else if (operation === 'get') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//         vendor: get\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\tconst vendorId = this.getNodeParameter('vendorId', i);\n\t\t\t\t\t\tconst endpoint = `/v3/company/${companyId}/${resource}/${vendorId}`;\n\t\t\t\t\t\tresponseData = await quickBooksApiRequest.call(this, 'GET', endpoint, {}, {});\n\t\t\t\t\t\tresponseData = responseData[capitalCase(resource)];\n\t\t\t\t\t} else if (operation === 'getAll') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//         vendor: getAll\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\tconst endpoint = `/v3/company/${companyId}/query`;\n\t\t\t\t\t\tresponseData = await handleListing.call(this, i, endpoint, resource);\n\t\t\t\t\t} else if (operation === 'update') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//         vendor: update\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\tlet body = {\n\t\t\t\t\t\t\tId: this.getNodeParameter('vendorId', i),\n\t\t\t\t\t\t\tSyncToken: await getSyncToken.call(this, i, companyId, resource),\n\t\t\t\t\t\t\tsparse: true,\n\t\t\t\t\t\t} as IDataObject;\n\n\t\t\t\t\t\tconst updateFields = this.getNodeParameter('updateFields', i);\n\n\t\t\t\t\t\tif (isEmpty(updateFields)) {\n\t\t\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t\t\t`Please enter at least one field to update for the ${resource}.`,\n\t\t\t\t\t\t\t\t{ itemIndex: i },\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbody = populateFields.call(this, body, updateFields, resource);\n\n\t\t\t\t\t\tconst endpoint = `/v3/company/${companyId}/${resource}`;\n\t\t\t\t\t\tresponseData = await quickBooksApiRequest.call(this, 'POST', endpoint, {}, body);\n\t\t\t\t\t\tresponseData = responseData[capitalCase(resource)];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\tconst download = this.getNodeParameter('download', 0, false);\n\t\t\t\t\tif (\n\t\t\t\t\t\t['invoice', 'estimate', 'payment'].includes(resource) &&\n\t\t\t\t\t\t['get'].includes(operation) &&\n\t\t\t\t\t\tdownload\n\t\t\t\t\t) {\n\t\t\t\t\t\t// in this case responseDate? === items\n\t\t\t\t\t\tif (!responseData) {\n\t\t\t\t\t\t\titems[i].json = { error: error.message };\n\t\t\t\t\t\t\tresponseData = items;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresponseData[i].json = { error: error.message };\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst executionErrorData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray({ error: error.message }),\n\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturnData.push(...executionErrorData);\n\t\t\t\t\t}\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject),\n\t\t\t\t{ itemData: { item: i } },\n\t\t\t);\n\n\t\t\treturnData.push(...executionData);\n\t\t}\n\n\t\tconst download = this.getNodeParameter('download', 0, false);\n\n\t\tif (\n\t\t\t['invoice', 'estimate', 'payment'].includes(resource) &&\n\t\t\t['get'].includes(operation) &&\n\t\t\tdownload\n\t\t) {\n\t\t\treturn [responseData as INodeExecutionData[]];\n\t\t} else {\n\t\t\treturn [returnData];\n\t\t}\n\t}\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,yBAA4B;AAC5B,qBAAoB;AASpB,0BAAwD;AAExD,0BAqBO;AACP,8BAWO;AAGA,MAAM,WAAgC;AAAA,EAAtC;AACN,uBAAoC;AAAA,MACnC,aAAa;AAAA,MACb,MAAM;AAAA,MACN,MAAM;AAAA,MACN,OAAO,CAAC,WAAW;AAAA,MACnB,SAAS;AAAA,MACT,UAAU;AAAA,MACV,aAAa;AAAA,MACb,UAAU;AAAA,QACT,MAAM;AAAA,MACP;AAAA,MACA,cAAc;AAAA,MACd,QAAQ,CAAC,wCAAoB,IAAI;AAAA,MACjC,SAAS,CAAC,wCAAoB,IAAI;AAAA,MAClC,aAAa;AAAA,QACZ;AAAA,UACC,MAAM;AAAA,UACN,UAAU;AAAA,QACX;AAAA,MACD;AAAA,MACA,YAAY;AAAA,QACX;AAAA,UACC,aAAa;AAAA,UACb,MAAM;AAAA,UACN,MAAM;AAAA,UACN,kBAAkB;AAAA,UAClB,SAAS;AAAA,YACR;AAAA,cACC,MAAM;AAAA,cACN,OAAO;AAAA,YACR;AAAA,YACA;AAAA,cACC,MAAM;AAAA,cACN,OAAO;AAAA,YACR;AAAA,YACA;AAAA,cACC,MAAM;AAAA,cACN,OAAO;AAAA,YACR;AAAA,YACA;AAAA,cACC,MAAM;AAAA,cACN,OAAO;AAAA,YACR;AAAA,YACA;AAAA,cACC,MAAM;AAAA,cACN,OAAO;AAAA,YACR;AAAA,YACA;AAAA,cACC,MAAM;AAAA,cACN,OAAO;AAAA,YACR;AAAA,YACA;AAAA,cACC,MAAM;AAAA,cACN,OAAO;AAAA,YACR;AAAA,YACA;AAAA,cACC,MAAM;AAAA,cACN,OAAO;AAAA,YACR;AAAA,YACA;AAAA,cACC,MAAM;AAAA,cACN,OAAO;AAAA,YACR;AAAA,YACA;AAAA,cACC,MAAM;AAAA,cACN,OAAO;AAAA,YACR;AAAA,UACD;AAAA,UACA,SAAS;AAAA,QACV;AAAA,QACA,GAAG;AAAA,QACH,GAAG;AAAA,QACH,GAAG;AAAA,QACH,GAAG;AAAA,QACH,GAAG;AAAA,QACH,GAAG;AAAA,QACH,GAAG;AAAA,QACH,GAAG;AAAA,QACH,GAAG;AAAA,QACH,GAAG;AAAA,QACH,GAAG;AAAA,QACH,GAAG;AAAA,QACH,GAAG;AAAA,QACH,GAAG;AAAA,QACH,GAAG;AAAA,QACH,GAAG;AAAA,QACH,GAAG;AAAA,QACH,GAAG;AAAA,QACH,GAAG;AAAA,QACH,GAAG;AAAA,MACJ;AAAA,IACD;AAEA,mBAAU;AAAA,MACT,aAAa;AAAA,QACZ,MAAM,eAA0C;AAC/C,iBAAO,MAAM,qCAAa,KAAK,MAAM,UAAU;AAAA,QAChD;AAAA,QAEA,MAAM,kBAA6C;AAClD,iBAAO,MAAM,qCAAa,KAAK,MAAM,aAAa;AAAA,QACnD;AAAA,QAEA,MAAM,iBAA4C;AACjD,iBAAO,MAAM,qCAAa,KAAK,MAAM,YAAY;AAAA,QAClD;AAAA,QAEA,MAAM,WAAsC;AAC3C,iBAAO,MAAM,qCAAa,KAAK,MAAM,MAAM;AAAA,QAC5C;AAAA,QAEA,MAAM,WAAsC;AAC3C,iBAAO,MAAM,qCAAa,KAAK,MAAM,YAAY;AAAA,QAClD;AAAA,QAEA,MAAM,eAA0C;AAC/C,iBAAO,MAAM,qCAAa,KAAK,MAAM,UAAU;AAAA,QAChD;AAAA,QAEA,MAAM,iBAA4C;AACjD,iBAAO,MAAM,qCAAa,KAAK,MAAM,SAAS;AAAA,QAC/C;AAAA,QAEA,MAAM,WAAsC;AAC3C,iBAAO,MAAM,qCAAa,KAAK,MAAM,MAAM;AAAA,QAC5C;AAAA,QAEA,MAAM,aAAwC;AAC7C,iBAAO,MAAM,qCAAa,KAAK,MAAM,QAAQ;AAAA,QAC9C;AAAA,MACD;AAAA,IACD;AAAA;AAAA,EAEA,MAAM,UAAkE;AACvE,UAAM,QAAQ,KAAK,aAAa;AAEhC,UAAM,WAAW,KAAK,iBAAiB,YAAY,CAAC;AACpD,UAAM,YAAY,KAAK,iBAAiB,aAAa,CAAC;AAEtD,QAAI;AACJ,UAAM,aAAmC,CAAC;AAE1C,UAAM,EAAE,eAAe,IACtB,MAAM,KAAK,eAA4C,qBAAqB;AAC7E,UAAM,YAAY,eAAe,oBAAoB;AAErD,aAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACtC,UAAI;AACH,YAAI,aAAa,QAAQ;AAOxB,cAAI,cAAc,UAAU;AAK3B,kBAAM,QAAQ,KAAK,iBAAiB,QAAQ,CAAC;AAE7C,gBAAI,CAAC,MAAM,QAAQ;AAClB,oBAAM,IAAI;AAAA,gBACT,KAAK,QAAQ;AAAA,gBACb,0CAA0C,QAAQ;AAAA,gBAClD,EAAE,WAAW,EAAE;AAAA,cAChB;AAAA,YACD;AAEA,gBACC,MAAM;AAAA,cACL,CAAC,SACA,KAAK,eAAe,UACpB,KAAK,WAAW,UAChB,KAAK,gBAAgB;AAAA,YACvB,GACC;AACD,oBAAM,IAAI;AAAA,gBACT,KAAK,QAAQ;AAAA,gBACb;AAAA,gBACA,EAAE,WAAW,EAAE;AAAA,cAChB;AAAA,YACD;AAEA,kBAAM,QAAQ,CAAC,SAAS;AACvB,kBACC,KAAK,eAAe,mCACpB,KAAK,cAAc,QAClB;AACD,sBAAM,IAAI;AAAA,kBACT,KAAK,QAAQ;AAAA,kBACb;AAAA,kBACA,EAAE,WAAW,EAAE;AAAA,gBAChB;AAAA,cACD,WACC,KAAK,eAAe,gCACpB,KAAK,WAAW,QACf;AACD,sBAAM,IAAI;AAAA,kBACT,KAAK,QAAQ;AAAA,kBACb;AAAA,kBACA,EAAE,WAAW,EAAE;AAAA,gBAChB;AAAA,cACD;AAAA,YACD,CAAC;AAED,gBAAI,OAAO;AAAA,cACV,WAAW;AAAA,gBACV,OAAO,KAAK,iBAAiB,aAAa,CAAC;AAAA,cAC5C;AAAA,YACD;AAEA,iBAAK,OAAO,qCAAa,KAAK,MAAM,OAAO,QAAQ;AAEnD,kBAAM,mBAAmB,KAAK,iBAAiB,oBAAoB,CAAC;AAEpE,mBAAO,uCAAe,KAAK,MAAM,MAAM,kBAAkB,QAAQ;AAEjE,kBAAM,WAAW,eAAe,SAAS,IAAI,QAAQ;AACrD,2BAAe,MAAM,6CAAqB,KAAK,MAAM,QAAQ,UAAU,CAAC,GAAG,IAAI;AAC/E,2BAAe,iBAAa,gCAAY,QAAQ,CAAC;AAAA,UAClD,WAAW,cAAc,UAAU;AAKlC,kBAAM,KAAK;AAAA,cACV,WAAW;AAAA,YACZ;AAEA,kBAAM,OAAO;AAAA,cACZ,IAAI,KAAK,iBAAiB,UAAU,CAAC;AAAA,cACrC,WAAW,MAAM,qCAAa,KAAK,MAAM,GAAG,WAAW,QAAQ;AAAA,YAChE;AAEA,kBAAM,WAAW,eAAe,SAAS,IAAI,QAAQ;AACrD,2BAAe,MAAM,6CAAqB,KAAK,MAAM,QAAQ,UAAU,IAAI,IAAI;AAC/E,2BAAe,iBAAa,gCAAY,QAAQ,CAAC;AAAA,UAClD,WAAW,cAAc,OAAO;AAK/B,kBAAM,SAAS,KAAK,iBAAiB,UAAU,CAAC;AAChD,kBAAM,WAAW,eAAe,SAAS,IAAI,QAAQ,IAAI,MAAM;AAC/D,2BAAe,MAAM,6CAAqB,KAAK,MAAM,OAAO,UAAU,CAAC,GAAG,CAAC,CAAC;AAC5E,2BAAe,iBAAa,gCAAY,QAAQ,CAAC;AAAA,UAClD,WAAW,cAAc,UAAU;AAKlC,kBAAM,WAAW,eAAe,SAAS;AACzC,2BAAe,MAAM,sCAAc,KAAK,MAAM,GAAG,UAAU,QAAQ;AAAA,UACpE,WAAW,cAAc,UAAU;AAKlC,kBAAM,EAAE,KAAK,UAAU,IAAI,MAAM,2CAAmB;AAAA,cACnD;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,YACD;AAEA,gBAAI,OAAO;AAAA,cACV,IAAI,KAAK,iBAAiB,UAAU,CAAC;AAAA,cACrC,WAAW;AAAA,cACX,QAAQ;AAAA,cACR,WAAW;AAAA,gBACV,MAAM,IAAI;AAAA,gBACV,OAAO,IAAI;AAAA,cACZ;AAAA,YACD;AAEA,kBAAM,eAAe,KAAK,iBAAiB,gBAAgB,CAAC;AAE5D,oBAAI,eAAAA,SAAQ,YAAY,GAAG;AAC1B,oBAAM,IAAI;AAAA,gBACT,KAAK,QAAQ;AAAA,gBACb,qDAAqD,QAAQ;AAAA,gBAC7D,EAAE,WAAW,EAAE;AAAA,cAChB;AAAA,YACD;AAEA,mBAAO,uCAAe,KAAK,MAAM,MAAM,cAAc,QAAQ;AAE7D,kBAAM,WAAW,eAAe,SAAS,IAAI,QAAQ;AACrD,2BAAe,MAAM,6CAAqB,KAAK,MAAM,QAAQ,UAAU,CAAC,GAAG,IAAI;AAC/E,2BAAe,iBAAa,gCAAY,QAAQ,CAAC;AAAA,UAClD;AAAA,QACD,WAAW,aAAa,YAAY;AAOnC,cAAI,cAAc,UAAU;AAK3B,gBAAI,OAAO;AAAA,cACV,aAAa,KAAK,iBAAiB,eAAe,CAAC;AAAA,YACpD;AAEA,kBAAM,mBAAmB,KAAK,iBAAiB,oBAAoB,CAAC;AAEpE,mBAAO,uCAAe,KAAK,MAAM,MAAM,kBAAkB,QAAQ;AAEjE,kBAAM,WAAW,eAAe,SAAS,IAAI,QAAQ;AACrD,2BAAe,MAAM,6CAAqB,KAAK,MAAM,QAAQ,UAAU,CAAC,GAAG,IAAI;AAC/E,2BAAe,iBAAa,gCAAY,QAAQ,CAAC;AAAA,UAClD,WAAW,cAAc,OAAO;AAK/B,kBAAM,aAAa,KAAK,iBAAiB,cAAc,CAAC;AACxD,kBAAM,WAAW,eAAe,SAAS,IAAI,QAAQ,IAAI,UAAU;AACnE,2BAAe,MAAM,6CAAqB,KAAK,MAAM,OAAO,UAAU,CAAC,GAAG,CAAC,CAAC;AAC5E,2BAAe,iBAAa,gCAAY,QAAQ,CAAC;AAAA,UAClD,WAAW,cAAc,UAAU;AAKlC,kBAAM,WAAW,eAAe,SAAS;AACzC,2BAAe,MAAM,sCAAc,KAAK,MAAM,GAAG,UAAU,QAAQ;AAAA,UACpE,WAAW,cAAc,UAAU;AAKlC,gBAAI,OAAO;AAAA,cACV,IAAI,KAAK,iBAAiB,cAAc,CAAC;AAAA,cACzC,WAAW,MAAM,qCAAa,KAAK,MAAM,GAAG,WAAW,QAAQ;AAAA,cAC/D,QAAQ;AAAA,YACT;AAEA,kBAAM,eAAe,KAAK,iBAAiB,gBAAgB,CAAC;AAE5D,oBAAI,eAAAA,SAAQ,YAAY,GAAG;AAC1B,oBAAM,IAAI;AAAA,gBACT,KAAK,QAAQ;AAAA,gBACb,qDAAqD,QAAQ;AAAA,gBAC7D,EAAE,WAAW,EAAE;AAAA,cAChB;AAAA,YACD;AAEA,mBAAO,uCAAe,KAAK,MAAM,MAAM,cAAc,QAAQ;AAE7D,kBAAM,WAAW,eAAe,SAAS,IAAI,QAAQ;AACrD,2BAAe,MAAM,6CAAqB,KAAK,MAAM,QAAQ,UAAU,CAAC,GAAG,IAAI;AAC/E,2BAAe,iBAAa,gCAAY,QAAQ,CAAC;AAAA,UAClD;AAAA,QACD,WAAW,aAAa,YAAY;AAKnC,cAAI,cAAc,UAAU;AAK3B,gBAAI,OAAO;AAAA,cACV,YAAY,KAAK,iBAAiB,cAAc,CAAC;AAAA,cACjD,WAAW,KAAK,iBAAiB,aAAa,CAAC;AAAA,YAChD;AAEA,kBAAM,mBAAmB,KAAK,iBAAiB,oBAAoB,CAAC;AAEpE,mBAAO,uCAAe,KAAK,MAAM,MAAM,kBAAkB,QAAQ;AAEjE,kBAAM,WAAW,eAAe,SAAS,IAAI,QAAQ;AACrD,2BAAe,MAAM,6CAAqB,KAAK,MAAM,QAAQ,UAAU,CAAC,GAAG,IAAI;AAC/E,2BAAe,iBAAa,gCAAY,QAAQ,CAAC;AAAA,UAClD,WAAW,cAAc,OAAO;AAK/B,kBAAM,aAAa,KAAK,iBAAiB,cAAc,CAAC;AACxD,kBAAM,WAAW,eAAe,SAAS,IAAI,QAAQ,IAAI,UAAU;AACnE,2BAAe,MAAM,6CAAqB,KAAK,MAAM,OAAO,UAAU,CAAC,GAAG,CAAC,CAAC;AAC5E,2BAAe,iBAAa,gCAAY,QAAQ,CAAC;AAAA,UAClD,WAAW,cAAc,UAAU;AAKlC,kBAAM,WAAW,eAAe,SAAS;AACzC,2BAAe,MAAM,sCAAc,KAAK,MAAM,GAAG,UAAU,QAAQ;AAAA,UACpE,WAAW,cAAc,UAAU;AAKlC,gBAAI,OAAO;AAAA,cACV,IAAI,KAAK,iBAAiB,cAAc,CAAC;AAAA,cACzC,WAAW,MAAM,qCAAa,KAAK,MAAM,GAAG,WAAW,QAAQ;AAAA,cAC/D,QAAQ;AAAA,YACT;AAEA,kBAAM,eAAe,KAAK,iBAAiB,gBAAgB,CAAC;AAE5D,oBAAI,eAAAA,SAAQ,YAAY,GAAG;AAC1B,oBAAM,IAAI;AAAA,gBACT,KAAK,QAAQ;AAAA,gBACb,qDAAqD,QAAQ;AAAA,gBAC7D,EAAE,WAAW,EAAE;AAAA,cAChB;AAAA,YACD;AAEA,mBAAO,uCAAe,KAAK,MAAM,MAAM,cAAc,QAAQ;AAE7D,kBAAM,WAAW,eAAe,SAAS,IAAI,QAAQ;AACrD,2BAAe,MAAM,6CAAqB,KAAK,MAAM,QAAQ,UAAU,CAAC,GAAG,IAAI;AAC/E,2BAAe,iBAAa,gCAAY,QAAQ,CAAC;AAAA,UAClD;AAAA,QACD,WAAW,aAAa,YAAY;AAOnC,cAAI,cAAc,UAAU;AAK3B,kBAAM,QAAQ,KAAK,iBAAiB,QAAQ,CAAC;AAE7C,gBAAI,CAAC,MAAM,QAAQ;AAClB,oBAAM,IAAI;AAAA,gBACT,KAAK,QAAQ;AAAA,gBACb,0CAA0C,QAAQ;AAAA,gBAClD,EAAE,WAAW,EAAE;AAAA,cAChB;AAAA,YACD;AAEA,gBACC,MAAM;AAAA,cACL,CAAC,SACA,KAAK,eAAe,UACpB,KAAK,WAAW,UAChB,KAAK,gBAAgB;AAAA,YACvB,GACC;AACD,oBAAM,IAAI;AAAA,gBACT,KAAK,QAAQ;AAAA,gBACb;AAAA,gBACA,EAAE,WAAW,EAAE;AAAA,cAChB;AAAA,YACD;AAEA,kBAAM,QAAQ,CAAC,SAAS;AACvB,kBAAI,KAAK,eAAe,yBAAyB,KAAK,WAAW,QAAW;AAC3E,sBAAM,IAAI;AAAA,kBACT,KAAK,QAAQ;AAAA,kBACb;AAAA,kBACA,EAAE,WAAW,EAAE;AAAA,gBAChB;AAAA,cACD;AAAA,YACD,CAAC;AAED,gBAAI,OAAO;AAAA,cACV,aAAa;AAAA,gBACZ,OAAO,KAAK,iBAAiB,eAAe,CAAC;AAAA,cAC9C;AAAA,YACD;AAEA,iBAAK,OAAO,qCAAa,KAAK,MAAM,OAAO,QAAQ;AACnD,kBAAM,mBAAmB,KAAK,iBAAiB,oBAAoB,CAAC;AAEpE,mBAAO,uCAAe,KAAK,MAAM,MAAM,kBAAkB,QAAQ;AAEjE,kBAAM,WAAW,eAAe,SAAS,IAAI,QAAQ;AACrD,2BAAe,MAAM,6CAAqB,KAAK,MAAM,QAAQ,UAAU,CAAC,GAAG,IAAI;AAC/E,2BAAe,iBAAa,gCAAY,QAAQ,CAAC;AAAA,UAClD,WAAW,cAAc,UAAU;AAKlC,kBAAM,KAAK;AAAA,cACV,WAAW;AAAA,YACZ;AAEA,kBAAM,OAAO;AAAA,cACZ,IAAI,KAAK,iBAAiB,cAAc,CAAC;AAAA,cACzC,WAAW,MAAM,qCAAa,KAAK,MAAM,GAAG,WAAW,QAAQ;AAAA,YAChE;AAEA,kBAAM,WAAW,eAAe,SAAS,IAAI,QAAQ;AACrD,2BAAe,MAAM,6CAAqB,KAAK,MAAM,QAAQ,UAAU,IAAI,IAAI;AAC/E,2BAAe,iBAAa,gCAAY,QAAQ,CAAC;AAAA,UAClD,WAAW,cAAc,OAAO;AAK/B,kBAAM,aAAa,KAAK,iBAAiB,cAAc,CAAC;AACxD,kBAAMC,YAAW,KAAK,iBAAiB,YAAY,CAAC;AAEpD,gBAAIA,WAAU;AACb,6BAAe,MAAM,yCAAiB;AAAA,gBACrC;AAAA,gBACA;AAAA,gBACA;AAAA,gBACA;AAAA,gBACA;AAAA,gBACA;AAAA,cACD;AAAA,YACD,OAAO;AACN,oBAAM,WAAW,eAAe,SAAS,IAAI,QAAQ,IAAI,UAAU;AACnE,6BAAe,MAAM,6CAAqB,KAAK,MAAM,OAAO,UAAU,CAAC,GAAG,CAAC,CAAC;AAC5E,6BAAe,iBAAa,gCAAY,QAAQ,CAAC;AAAA,YAClD;AAAA,UACD,WAAW,cAAc,UAAU;AAKlC,kBAAM,WAAW,eAAe,SAAS;AACzC,2BAAe,MAAM,sCAAc,KAAK,MAAM,GAAG,UAAU,QAAQ;AAAA,UACpE,WAAW,cAAc,QAAQ;AAKhC,kBAAM,aAAa,KAAK,iBAAiB,cAAc,CAAC;AAExD,kBAAM,KAAK;AAAA,cACV,QAAQ,KAAK,iBAAiB,SAAS,CAAC;AAAA,YACzC;AAEA,kBAAM,WAAW,eAAe,SAAS,IAAI,QAAQ,IAAI,UAAU;AACnE,2BAAe,MAAM,6CAAqB,KAAK,MAAM,QAAQ,UAAU,IAAI,CAAC,CAAC;AAC7E,2BAAe,iBAAa,gCAAY,QAAQ,CAAC;AAAA,UAClD,WAAW,cAAc,UAAU;AAKlC,kBAAM,EAAE,KAAK,UAAU,IAAI,MAAM,2CAAmB;AAAA,cACnD;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,YACD;AAEA,gBAAI,OAAO;AAAA,cACV,IAAI,KAAK,iBAAiB,cAAc,CAAC;AAAA,cACzC,WAAW;AAAA,cACX,QAAQ;AAAA,cACR,aAAa;AAAA,gBACZ,MAAM,IAAI;AAAA,gBACV,OAAO,IAAI;AAAA,cACZ;AAAA,YACD;AAEA,kBAAM,eAAe,KAAK,iBAAiB,gBAAgB,CAAC;AAE5D,oBAAI,eAAAD,SAAQ,YAAY,GAAG;AAC1B,oBAAM,IAAI;AAAA,gBACT,KAAK,QAAQ;AAAA,gBACb,qDAAqD,QAAQ;AAAA,gBAC7D,EAAE,WAAW,EAAE;AAAA,cAChB;AAAA,YACD;AAEA,mBAAO,uCAAe,KAAK,MAAM,MAAM,cAAc,QAAQ;AAE7D,kBAAM,WAAW,eAAe,SAAS,IAAI,QAAQ;AACrD,2BAAe,MAAM,6CAAqB,KAAK,MAAM,QAAQ,UAAU,CAAC,GAAG,IAAI;AAC/E,2BAAe,iBAAa,gCAAY,QAAQ,CAAC;AAAA,UAClD;AAAA,QACD,WAAW,aAAa,WAAW;AAOlC,cAAI,cAAc,UAAU;AAK3B,kBAAM,QAAQ,KAAK,iBAAiB,QAAQ,CAAC;AAE7C,gBAAI,CAAC,MAAM,QAAQ;AAClB,oBAAM,IAAI;AAAA,gBACT,KAAK,QAAQ;AAAA,gBACb,0CAA0C,QAAQ;AAAA,gBAClD,EAAE,WAAW,EAAE;AAAA,cAChB;AAAA,YACD;AAEA,gBACC,MAAM;AAAA,cACL,CAAC,SACA,KAAK,eAAe,UACpB,KAAK,WAAW,UAChB,KAAK,gBAAgB;AAAA,YACvB,GACC;AACD,oBAAM,IAAI;AAAA,gBACT,KAAK,QAAQ;AAAA,gBACb;AAAA,gBACA,EAAE,WAAW,EAAE;AAAA,cAChB;AAAA,YACD;AAEA,kBAAM,QAAQ,CAAC,SAAS;AACvB,kBAAI,KAAK,eAAe,yBAAyB,KAAK,WAAW,QAAW;AAC3E,sBAAM,IAAI;AAAA,kBACT,KAAK,QAAQ;AAAA,kBACb;AAAA,kBACA,EAAE,WAAW,EAAE;AAAA,gBAChB;AAAA,cACD;AAAA,YACD,CAAC;AAED,gBAAI,OAAO;AAAA,cACV,aAAa;AAAA,gBACZ,OAAO,KAAK,iBAAiB,eAAe,CAAC;AAAA,cAC9C;AAAA,YACD;AAEA,iBAAK,OAAO,qCAAa,KAAK,MAAM,OAAO,QAAQ;AAEnD,kBAAM,mBAAmB,KAAK,iBAAiB,oBAAoB,CAAC;AAEpE,mBAAO,uCAAe,KAAK,MAAM,MAAM,kBAAkB,QAAQ;AAEjE,kBAAM,WAAW,eAAe,SAAS,IAAI,QAAQ;AACrD,2BAAe,MAAM,6CAAqB,KAAK,MAAM,QAAQ,UAAU,CAAC,GAAG,IAAI;AAC/E,2BAAe,iBAAa,gCAAY,QAAQ,CAAC;AAAA,UAClD,WAAW,cAAc,UAAU;AAKlC,kBAAM,KAAK;AAAA,cACV,WAAW;AAAA,YACZ;AAEA,kBAAM,OAAO;AAAA,cACZ,IAAI,KAAK,iBAAiB,aAAa,CAAC;AAAA,cACxC,WAAW,MAAM,qCAAa,KAAK,MAAM,GAAG,WAAW,QAAQ;AAAA,YAChE;AAEA,kBAAM,WAAW,eAAe,SAAS,IAAI,QAAQ;AACrD,2BAAe,MAAM,6CAAqB,KAAK,MAAM,QAAQ,UAAU,IAAI,IAAI;AAC/E,2BAAe,iBAAa,gCAAY,QAAQ,CAAC;AAAA,UAClD,WAAW,cAAc,OAAO;AAK/B,kBAAM,YAAY,KAAK,iBAAiB,aAAa,CAAC;AACtD,kBAAMC,YAAW,KAAK,iBAAiB,YAAY,CAAC;AAEpD,gBAAIA,WAAU;AACb,6BAAe,MAAM,yCAAiB;AAAA,gBACrC;AAAA,gBACA;AAAA,gBACA;AAAA,gBACA;AAAA,gBACA;AAAA,gBACA;AAAA,cACD;AAAA,YACD,OAAO;AACN,oBAAM,WAAW,eAAe,SAAS,IAAI,QAAQ,IAAI,SAAS;AAClE,6BAAe,MAAM,6CAAqB,KAAK,MAAM,OAAO,UAAU,CAAC,GAAG,CAAC,CAAC;AAC5E,6BAAe,iBAAa,gCAAY,QAAQ,CAAC;AAAA,YAClD;AAAA,UACD,WAAW,cAAc,UAAU;AAKlC,kBAAM,WAAW,eAAe,SAAS;AACzC,2BAAe,MAAM,sCAAc,KAAK,MAAM,GAAG,UAAU,QAAQ;AAAA,UACpE,WAAW,cAAc,QAAQ;AAKhC,kBAAM,YAAY,KAAK,iBAAiB,aAAa,CAAC;AAEtD,kBAAM,KAAK;AAAA,cACV,QAAQ,KAAK,iBAAiB,SAAS,CAAC;AAAA,YACzC;AAEA,kBAAM,WAAW,eAAe,SAAS,IAAI,QAAQ,IAAI,SAAS;AAClE,2BAAe,MAAM,6CAAqB,KAAK,MAAM,QAAQ,UAAU,IAAI,CAAC,CAAC;AAC7E,2BAAe,iBAAa,gCAAY,QAAQ,CAAC;AAAA,UAClD,WAAW,cAAc,UAAU;AAKlC,kBAAM,EAAE,KAAK,UAAU,IAAI,MAAM,2CAAmB;AAAA,cACnD;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,YACD;AAEA,gBAAI,OAAO;AAAA,cACV,IAAI,KAAK,iBAAiB,aAAa,CAAC;AAAA,cACxC,WAAW;AAAA,cACX,QAAQ;AAAA,cACR,aAAa;AAAA,gBACZ,MAAM,IAAI;AAAA,gBACV,OAAO,IAAI;AAAA,cACZ;AAAA,YACD;AAEA,kBAAM,eAAe,KAAK,iBAAiB,gBAAgB,CAAC;AAE5D,oBAAI,eAAAD,SAAQ,YAAY,GAAG;AAC1B,oBAAM,IAAI;AAAA,gBACT,KAAK,QAAQ;AAAA,gBACb,qDAAqD,QAAQ;AAAA,gBAC7D,EAAE,WAAW,EAAE;AAAA,cAChB;AAAA,YACD;AAEA,mBAAO,uCAAe,KAAK,MAAM,MAAM,cAAc,QAAQ;AAE7D,kBAAM,WAAW,eAAe,SAAS,IAAI,QAAQ;AACrD,2BAAe,MAAM,6CAAqB,KAAK,MAAM,QAAQ,UAAU,CAAC,GAAG,IAAI;AAC/E,2BAAe,iBAAa,gCAAY,QAAQ,CAAC;AAAA,UAClD,WAAW,cAAc,QAAQ;AAKhC,kBAAM,KAAK;AAAA,cACV,IAAI,KAAK,iBAAiB,aAAa,CAAC;AAAA,cACxC,WAAW,MAAM,qCAAa,KAAK,MAAM,GAAG,WAAW,QAAQ;AAAA,cAC/D,WAAW;AAAA,YACZ;AAEA,kBAAM,WAAW,eAAe,SAAS,IAAI,QAAQ;AACrD,2BAAe,MAAM,6CAAqB,KAAK,MAAM,QAAQ,UAAU,IAAI,CAAC,CAAC;AAC7E,2BAAe,iBAAa,gCAAY,QAAQ,CAAC;AAAA,UAClD;AAAA,QACD,WAAW,aAAa,QAAQ;AAO/B,cAAI,cAAc,OAAO;AAKxB,kBAAM,OAAO,KAAK,iBAAiB,UAAU,CAAC;AAC9C,kBAAM,WAAW,eAAe,SAAS,IAAI,QAAQ,IAAI,IAAI;AAC7D,2BAAe,MAAM,6CAAqB,KAAK,MAAM,OAAO,UAAU,CAAC,GAAG,CAAC,CAAC;AAC5E,2BAAe,iBAAa,gCAAY,QAAQ,CAAC;AAAA,UAClD,WAAW,cAAc,UAAU;AAKlC,kBAAM,WAAW,eAAe,SAAS;AACzC,2BAAe,MAAM,sCAAc,KAAK,MAAM,GAAG,UAAU,QAAQ;AAAA,UACpE;AAAA,QACD,WAAW,aAAa,WAAW;AAOlC,cAAI,cAAc,UAAU;AAK3B,gBAAI,OAAO;AAAA,cACV,aAAa;AAAA,gBACZ,OAAO,KAAK,iBAAiB,eAAe,CAAC;AAAA,cAC9C;AAAA,cACA,UAAU,KAAK,iBAAiB,YAAY,CAAC;AAAA,YAC9C;AAEA,kBAAM,mBAAmB,KAAK,iBAAiB,oBAAoB,CAAC;AAEpE,mBAAO,uCAAe,KAAK,MAAM,MAAM,kBAAkB,QAAQ;AAEjE,kBAAM,WAAW,eAAe,SAAS,IAAI,QAAQ;AACrD,2BAAe,MAAM,6CAAqB,KAAK,MAAM,QAAQ,UAAU,CAAC,GAAG,IAAI;AAC/E,2BAAe,iBAAa,gCAAY,QAAQ,CAAC;AAAA,UAClD,WAAW,cAAc,UAAU;AAKlC,kBAAM,KAAK;AAAA,cACV,WAAW;AAAA,YACZ;AAEA,kBAAM,OAAO;AAAA,cACZ,IAAI,KAAK,iBAAiB,aAAa,CAAC;AAAA,cACxC,WAAW,MAAM,qCAAa,KAAK,MAAM,GAAG,WAAW,QAAQ;AAAA,YAChE;AAEA,kBAAM,WAAW,eAAe,SAAS,IAAI,QAAQ;AACrD,2BAAe,MAAM,6CAAqB,KAAK,MAAM,QAAQ,UAAU,IAAI,IAAI;AAC/E,2BAAe,iBAAa,gCAAY,QAAQ,CAAC;AAAA,UAClD,WAAW,cAAc,OAAO;AAK/B,kBAAM,YAAY,KAAK,iBAAiB,aAAa,CAAC;AACtD,kBAAMC,YAAW,KAAK,iBAAiB,YAAY,CAAC;AAEpD,gBAAIA,WAAU;AACb,6BAAe,MAAM,yCAAiB;AAAA,gBACrC;AAAA,gBACA;AAAA,gBACA;AAAA,gBACA;AAAA,gBACA;AAAA,gBACA;AAAA,cACD;AAAA,YACD,OAAO;AACN,oBAAM,WAAW,eAAe,SAAS,IAAI,QAAQ,IAAI,SAAS;AAClE,6BAAe,MAAM,6CAAqB,KAAK,MAAM,OAAO,UAAU,CAAC,GAAG,CAAC,CAAC;AAC5E,6BAAe,iBAAa,gCAAY,QAAQ,CAAC;AAAA,YAClD;AAAA,UACD,WAAW,cAAc,UAAU;AAKlC,kBAAM,WAAW,eAAe,SAAS;AACzC,2BAAe,MAAM,sCAAc,KAAK,MAAM,GAAG,UAAU,QAAQ;AAAA,UACpE,WAAW,cAAc,QAAQ;AAKhC,kBAAM,YAAY,KAAK,iBAAiB,aAAa,CAAC;AAEtD,kBAAM,KAAK;AAAA,cACV,QAAQ,KAAK,iBAAiB,SAAS,CAAC;AAAA,YACzC;AAEA,kBAAM,WAAW,eAAe,SAAS,IAAI,QAAQ,IAAI,SAAS;AAClE,2BAAe,MAAM,6CAAqB,KAAK,MAAM,QAAQ,UAAU,IAAI,CAAC,CAAC;AAC7E,2BAAe,iBAAa,gCAAY,QAAQ,CAAC;AAAA,UAClD,WAAW,cAAc,UAAU;AAKlC,kBAAM,EAAE,KAAK,UAAU,IAAI,MAAM,2CAAmB;AAAA,cACnD;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,YACD;AAEA,gBAAI,OAAO;AAAA,cACV,IAAI,KAAK,iBAAiB,aAAa,CAAC;AAAA,cACxC,WAAW;AAAA,cACX,QAAQ;AAAA,cACR,aAAa;AAAA,gBACZ,MAAM,IAAI;AAAA,gBACV,OAAO,IAAI;AAAA,cACZ;AAAA,YACD;AAEA,kBAAM,eAAe,KAAK,iBAAiB,gBAAgB,CAAC;AAE5D,oBAAI,eAAAD,SAAQ,YAAY,GAAG;AAC1B,oBAAM,IAAI;AAAA,gBACT,KAAK,QAAQ;AAAA,gBACb,qDAAqD,QAAQ;AAAA,gBAC7D,EAAE,WAAW,EAAE;AAAA,cAChB;AAAA,YACD;AAEA,mBAAO,uCAAe,KAAK,MAAM,MAAM,cAAc,QAAQ;AAE7D,kBAAM,WAAW,eAAe,SAAS,IAAI,QAAQ;AACrD,2BAAe,MAAM,6CAAqB,KAAK,MAAM,QAAQ,UAAU,CAAC,GAAG,IAAI;AAC/E,2BAAe,iBAAa,gCAAY,QAAQ,CAAC;AAAA,UAClD,WAAW,cAAc,QAAQ;AAKhC,kBAAM,KAAK;AAAA,cACV,IAAI,KAAK,iBAAiB,aAAa,CAAC;AAAA,cACxC,WAAW,MAAM,qCAAa,KAAK,MAAM,GAAG,WAAW,QAAQ;AAAA,cAC/D,WAAW;AAAA,YACZ;AAEA,kBAAM,WAAW,eAAe,SAAS,IAAI,QAAQ;AACrD,2BAAe,MAAM,6CAAqB,KAAK,MAAM,QAAQ,UAAU,IAAI,CAAC,CAAC;AAC7E,2BAAe,iBAAa,gCAAY,QAAQ,CAAC;AAAA,UAClD;AAAA,QACD,WAAW,aAAa,YAAY;AAOnC,cAAI,cAAc,OAAO;AAKxB,kBAAM,aAAa,KAAK,iBAAiB,cAAc,CAAC;AACxD,kBAAM,WAAW,eAAe,SAAS,IAAI,QAAQ,IAAI,UAAU;AACnE,2BAAe,MAAM,6CAAqB,KAAK,MAAM,OAAO,UAAU,CAAC,GAAG,CAAC,CAAC;AAC5E,2BAAe,iBAAa,gCAAY,QAAQ,CAAC;AAAA,UAClD,WAAW,cAAc,UAAU;AAKlC,kBAAM,WAAW,eAAe,SAAS;AACzC,2BAAe,MAAM,sCAAc,KAAK,MAAM,GAAG,UAAU,QAAQ;AAAA,UACpE;AAAA,QACD,WAAW,aAAa,eAAe;AAOtC,cAAI,cAAc,aAAa;AAK9B,kBAAM,EAAE,SAAS,MAAM,MAAM,UAAU,QAAQ,GAAG,KAAK,IAAI,KAAK;AAAA,cAC/D;AAAA,cACA;AAAA,YACD;AAEA,gBAAI,KAAK,EAAE,GAAG,KAAK;AAEnB,gBAAI,SAAS,QAAQ;AACpB,iBAAG,UAAU,QAAQ,KAAK,GAAG;AAAA,YAC9B;AAEA,gBAAI,MAAM,QAAQ;AACjB,iBAAG,OAAO,KAAK,KAAK,GAAG;AAAA,YACxB;AAEA,gBAAI,MAAM,QAAQ;AACjB,iBAAG,OAAO,KAAK,KAAK,GAAG;AAAA,YACxB;AAEA,gBAAI,UAAU,QAAQ;AACrB,iBAAG,WAAW,SAAS,KAAK,GAAG;AAAA,YAChC;AAEA,gBAAI,QAAQ,QAAQ;AACnB,iBAAG,SAAS,OAAO,KAAK,GAAG;AAAA,YAC5B;AAEA,qBAAK,gDAAuB,EAAE;AAE9B,kBAAM,WAAW,eAAe,SAAS;AACzC,2BAAe,MAAM,6CAAqB,KAAK,MAAM,OAAO,UAAU,IAAI,CAAC,CAAC;AAE5E,kBAAM,mBAAmB,KAAK,iBAAiB,UAAU,GAAG,IAAI;AAEhE,gBAAI,CAAC,OAAO,KAAK,cAAc,IAAmB,EAAE,QAAQ;AAC3D,6BAAe,CAAC;AAAA,YACjB;AAEA,gBAAI,oBAAoB,CAAC,MAAM,QAAQ,YAAY,GAAG;AACrD,iCAAe,mDAA0B,YAAiC;AAAA,YAC3E;AAAA,UACD;AAAA,QACD,WAAW,aAAa,UAAU;AAOjC,cAAI,cAAc,UAAU;AAK3B,gBAAI,OAAO;AAAA,cACV,aAAa,KAAK,iBAAiB,eAAe,CAAC;AAAA,YACpD;AAEA,kBAAM,mBAAmB,KAAK,iBAAiB,oBAAoB,CAAC;AAEpE,mBAAO,uCAAe,KAAK,MAAM,MAAM,kBAAkB,QAAQ;AAEjE,kBAAM,WAAW,eAAe,SAAS,IAAI,QAAQ;AACrD,2BAAe,MAAM,6CAAqB,KAAK,MAAM,QAAQ,UAAU,CAAC,GAAG,IAAI;AAC/E,2BAAe,iBAAa,gCAAY,QAAQ,CAAC;AAAA,UAClD,WAAW,cAAc,OAAO;AAK/B,kBAAM,WAAW,KAAK,iBAAiB,YAAY,CAAC;AACpD,kBAAM,WAAW,eAAe,SAAS,IAAI,QAAQ,IAAI,QAAQ;AACjE,2BAAe,MAAM,6CAAqB,KAAK,MAAM,OAAO,UAAU,CAAC,GAAG,CAAC,CAAC;AAC5E,2BAAe,iBAAa,gCAAY,QAAQ,CAAC;AAAA,UAClD,WAAW,cAAc,UAAU;AAKlC,kBAAM,WAAW,eAAe,SAAS;AACzC,2BAAe,MAAM,sCAAc,KAAK,MAAM,GAAG,UAAU,QAAQ;AAAA,UACpE,WAAW,cAAc,UAAU;AAKlC,gBAAI,OAAO;AAAA,cACV,IAAI,KAAK,iBAAiB,YAAY,CAAC;AAAA,cACvC,WAAW,MAAM,qCAAa,KAAK,MAAM,GAAG,WAAW,QAAQ;AAAA,cAC/D,QAAQ;AAAA,YACT;AAEA,kBAAM,eAAe,KAAK,iBAAiB,gBAAgB,CAAC;AAE5D,oBAAI,eAAAA,SAAQ,YAAY,GAAG;AAC1B,oBAAM,IAAI;AAAA,gBACT,KAAK,QAAQ;AAAA,gBACb,qDAAqD,QAAQ;AAAA,gBAC7D,EAAE,WAAW,EAAE;AAAA,cAChB;AAAA,YACD;AAEA,mBAAO,uCAAe,KAAK,MAAM,MAAM,cAAc,QAAQ;AAE7D,kBAAM,WAAW,eAAe,SAAS,IAAI,QAAQ;AACrD,2BAAe,MAAM,6CAAqB,KAAK,MAAM,QAAQ,UAAU,CAAC,GAAG,IAAI;AAC/E,2BAAe,iBAAa,gCAAY,QAAQ,CAAC;AAAA,UAClD;AAAA,QACD;AAAA,MACD,SAAS,OAAO;AACf,YAAI,KAAK,eAAe,GAAG;AAC1B,gBAAMC,YAAW,KAAK,iBAAiB,YAAY,GAAG,KAAK;AAC3D,cACC,CAAC,WAAW,YAAY,SAAS,EAAE,SAAS,QAAQ,KACpD,CAAC,KAAK,EAAE,SAAS,SAAS,KAC1BA,WACC;AAED,gBAAI,CAAC,cAAc;AAClB,oBAAM,CAAC,EAAE,OAAO,EAAE,OAAO,MAAM,QAAQ;AACvC,6BAAe;AAAA,YAChB,OAAO;AACN,2BAAa,CAAC,EAAE,OAAO,EAAE,OAAO,MAAM,QAAQ;AAAA,YAC/C;AAAA,UACD,OAAO;AACN,kBAAM,qBAAqB,KAAK,QAAQ;AAAA,cACvC,KAAK,QAAQ,gBAAgB,EAAE,OAAO,MAAM,QAAQ,CAAC;AAAA,cACrD,EAAE,UAAU,EAAE,MAAM,EAAE,EAAE;AAAA,YACzB;AACA,uBAAW,KAAK,GAAG,kBAAkB;AAAA,UACtC;AACA;AAAA,QACD;AACA,cAAM;AAAA,MACP;AACA,YAAM,gBAAgB,KAAK,QAAQ;AAAA,QAClC,KAAK,QAAQ,gBAAgB,YAA2B;AAAA,QACxD,EAAE,UAAU,EAAE,MAAM,EAAE,EAAE;AAAA,MACzB;AAEA,iBAAW,KAAK,GAAG,aAAa;AAAA,IACjC;AAEA,UAAM,WAAW,KAAK,iBAAiB,YAAY,GAAG,KAAK;AAE3D,QACC,CAAC,WAAW,YAAY,SAAS,EAAE,SAAS,QAAQ,KACpD,CAAC,KAAK,EAAE,SAAS,SAAS,KAC1B,UACC;AACD,aAAO,CAAC,YAAoC;AAAA,IAC7C,OAAO;AACN,aAAO,CAAC,UAAU;AAAA,IACnB;AAAA,EACD;AACD;","names":["isEmpty","download"]}