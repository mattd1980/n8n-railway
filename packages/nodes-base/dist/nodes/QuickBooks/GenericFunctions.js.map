{"version":3,"sources":["../../../nodes/QuickBooks/GenericFunctions.ts"],"sourcesContent":["import { capitalCase } from 'change-case';\nimport omit from 'lodash/omit';\nimport pickBy from 'lodash/pickBy';\nimport { NodeApiError } from 'n8n-workflow';\nimport type {\n\tIDataObject,\n\tIExecuteFunctions,\n\tIHookFunctions,\n\tIHttpRequestMethods,\n\tILoadOptionsFunctions,\n\tINodeExecutionData,\n\tINodePropertyOptions,\n\tIRequestOptions,\n\tJsonObject,\n} from 'n8n-workflow';\n\nimport type { CustomField, GeneralAddress, Ref } from './descriptions/Shared.interface';\nimport type { DateFieldsUi, Option, QuickBooksOAuth2Credentials, TransactionReport } from './types';\n\n/**\n * Make an authenticated API request to QuickBooks.\n */\nexport async function quickBooksApiRequest(\n\tthis: IHookFunctions | IExecuteFunctions | ILoadOptionsFunctions,\n\tmethod: IHttpRequestMethods,\n\tendpoint: string,\n\tqs: IDataObject,\n\tbody: IDataObject,\n\toption: IDataObject = {},\n): Promise<any> {\n\tconst resource = this.getNodeParameter('resource', 0) as string;\n\tconst operation = this.getNodeParameter('operation', 0) as string;\n\n\tlet isDownload = false;\n\n\tif (['estimate', 'invoice', 'payment'].includes(resource) && operation === 'get') {\n\t\tisDownload = this.getNodeParameter('download', 0) as boolean;\n\t}\n\n\tconst productionUrl = 'https://quickbooks.api.intuit.com';\n\tconst sandboxUrl = 'https://sandbox-quickbooks.api.intuit.com';\n\n\tconst credentials = await this.getCredentials<QuickBooksOAuth2Credentials>('quickBooksOAuth2Api');\n\n\tconst options: IRequestOptions = {\n\t\theaders: {\n\t\t\t'user-agent': 'n8n',\n\t\t},\n\t\tmethod,\n\t\turi: `${credentials.environment === 'sandbox' ? sandboxUrl : productionUrl}${endpoint}`,\n\t\tqs,\n\t\tbody,\n\t\tjson: !isDownload,\n\t};\n\n\tif (!Object.keys(body).length) {\n\t\tdelete options.body;\n\t}\n\n\tif (!Object.keys(qs).length) {\n\t\tdelete options.qs;\n\t}\n\n\tif (Object.keys(option)) {\n\t\tObject.assign(options, option);\n\t}\n\n\tif (isDownload) {\n\t\toptions.headers!.Accept = 'application/pdf';\n\t}\n\n\tif (resource === 'invoice' && operation === 'send') {\n\t\toptions.headers!['Content-Type'] = 'application/octet-stream';\n\t}\n\n\tif (\n\t\t(resource === 'invoice' && (operation === 'void' || operation === 'delete')) ||\n\t\t(resource === 'payment' && (operation === 'void' || operation === 'delete'))\n\t) {\n\t\toptions.headers!['Content-Type'] = 'application/json';\n\t}\n\n\ttry {\n\t\treturn await this.helpers.requestOAuth2.call(this, 'quickBooksOAuth2Api', options);\n\t} catch (error) {\n\t\tthrow new NodeApiError(this.getNode(), error as JsonObject);\n\t}\n}\n\nasync function getCount(\n\tthis: IHookFunctions | IExecuteFunctions | ILoadOptionsFunctions,\n\tmethod: IHttpRequestMethods,\n\tendpoint: string,\n\tqs: IDataObject,\n): Promise<any> {\n\tconst responseData = await quickBooksApiRequest.call(this, method, endpoint, qs, {});\n\n\treturn responseData.QueryResponse.totalCount;\n}\n\n/**\n * Make an authenticated API request to QuickBooks and return all results.\n */\nexport async function quickBooksApiRequestAllItems(\n\tthis: IHookFunctions | IExecuteFunctions | ILoadOptionsFunctions,\n\tmethod: IHttpRequestMethods,\n\tendpoint: string,\n\tqs: IDataObject,\n\tbody: IDataObject,\n\tresource: string,\n): Promise<any> {\n\tlet responseData;\n\tlet startPosition = 1;\n\tconst maxResults = 1000;\n\tconst returnData: IDataObject[] = [];\n\n\tconst maxCountQuery = {\n\t\tquery: `SELECT COUNT(*) FROM ${resource}`,\n\t} as IDataObject;\n\n\tconst maxCount = await getCount.call(this, method, endpoint, maxCountQuery);\n\n\tconst originalQuery = qs.query as string;\n\n\tdo {\n\t\tqs.query = `${originalQuery} MAXRESULTS ${maxResults} STARTPOSITION ${startPosition}`;\n\t\tresponseData = await quickBooksApiRequest.call(this, method, endpoint, qs, body);\n\t\ttry {\n\t\t\tconst nonResource = originalQuery.split(' ')?.pop();\n\t\t\tif (nonResource === 'CreditMemo' || nonResource === 'Term' || nonResource === 'TaxCode') {\n\t\t\t\treturnData.push(...(responseData.QueryResponse[nonResource] as IDataObject[]));\n\t\t\t} else {\n\t\t\t\treturnData.push(...(responseData.QueryResponse[capitalCase(resource)] as IDataObject[]));\n\t\t\t}\n\t\t} catch (error) {\n\t\t\treturn [];\n\t\t}\n\n\t\tstartPosition += maxResults;\n\t} while (maxCount > returnData.length);\n\n\treturn returnData;\n}\n\n/**\n * Handles a QuickBooks listing by returning all items or up to a limit.\n */\nexport async function handleListing(\n\tthis: IExecuteFunctions,\n\ti: number,\n\tendpoint: string,\n\tresource: string,\n): Promise<any> {\n\tlet responseData;\n\n\tconst qs = {\n\t\tquery: `SELECT * FROM ${resource}`,\n\t} as IDataObject;\n\n\tconst returnAll = this.getNodeParameter('returnAll', i);\n\n\tconst filters = this.getNodeParameter('filters', i);\n\tif (filters.query) {\n\t\tqs.query += ` ${filters.query}`;\n\t}\n\n\tif (returnAll) {\n\t\treturn await quickBooksApiRequestAllItems.call(this, 'GET', endpoint, qs, {}, resource);\n\t} else {\n\t\tconst limit = this.getNodeParameter('limit', i);\n\t\tqs.query += ` MAXRESULTS ${limit}`;\n\t\tresponseData = await quickBooksApiRequest.call(this, 'GET', endpoint, qs, {});\n\t\tresponseData = responseData.QueryResponse[capitalCase(resource)];\n\t\treturn responseData;\n\t}\n}\n\n/**\n * Get the SyncToken required for delete and void operations in QuickBooks.\n */\nexport async function getSyncToken(\n\tthis: IExecuteFunctions,\n\ti: number,\n\tcompanyId: string,\n\tresource: string,\n) {\n\tconst resourceId = this.getNodeParameter(`${resource}Id`, i);\n\tconst getEndpoint = `/v3/company/${companyId}/${resource}/${resourceId}`;\n\tconst propertyName = capitalCase(resource);\n\tconst {\n\t\t[propertyName]: { SyncToken },\n\t} = await quickBooksApiRequest.call(this, 'GET', getEndpoint, {}, {});\n\n\treturn SyncToken;\n}\n\n/**\n * Get the reference and SyncToken required for update operations in QuickBooks.\n */\nexport async function getRefAndSyncToken(\n\tthis: IExecuteFunctions,\n\ti: number,\n\tcompanyId: string,\n\tresource: string,\n\tref: string,\n) {\n\tconst resourceId = this.getNodeParameter(`${resource}Id`, i);\n\tconst endpoint = `/v3/company/${companyId}/${resource}/${resourceId}`;\n\tconst responseData = await quickBooksApiRequest.call(this, 'GET', endpoint, {}, {});\n\n\treturn {\n\t\tref: responseData[capitalCase(resource)][ref],\n\t\tsyncToken: responseData[capitalCase(resource)].SyncToken,\n\t};\n}\n\n/**\n * Populate node items with binary data.\n */\nexport async function handleBinaryData(\n\tthis: IExecuteFunctions,\n\titems: INodeExecutionData[],\n\ti: number,\n\tcompanyId: string,\n\tresource: string,\n\tresourceId: string,\n) {\n\tconst binaryProperty = this.getNodeParameter('binaryProperty', i);\n\tconst fileName = this.getNodeParameter('fileName', i) as string;\n\tconst endpoint = `/v3/company/${companyId}/${resource}/${resourceId}/pdf`;\n\tconst data = await quickBooksApiRequest.call(this, 'GET', endpoint, {}, {}, { encoding: null });\n\n\titems[i].binary = items[i].binary ?? {};\n\titems[i].binary[binaryProperty] = await this.helpers.prepareBinaryData(data as Buffer);\n\titems[i].binary[binaryProperty].fileName = fileName;\n\titems[i].binary[binaryProperty].fileExtension = 'pdf';\n\n\treturn items;\n}\n\nexport async function loadResource(this: ILoadOptionsFunctions, resource: string) {\n\tconst returnData: INodePropertyOptions[] = [];\n\n\tconst qs = {\n\t\tquery: `SELECT * FROM ${resource}`,\n\t} as IDataObject;\n\n\tconst {\n\t\toauthTokenData: {\n\t\t\tcallbackQueryString: { realmId },\n\t\t},\n\t} = await this.getCredentials<QuickBooksOAuth2Credentials>('quickBooksOAuth2Api');\n\tconst endpoint = `/v3/company/${realmId}/query`;\n\n\tconst resourceItems = await quickBooksApiRequestAllItems.call(\n\t\tthis,\n\t\t'GET',\n\t\tendpoint,\n\t\tqs,\n\t\t{},\n\t\tresource,\n\t);\n\n\tif (resource === 'preferences') {\n\t\tconst {\n\t\t\tSalesFormsPrefs: { CustomField },\n\t\t} = resourceItems[0];\n\t\tconst customFields = CustomField[1].CustomField;\n\t\tfor (const customField of customFields) {\n\t\t\tconst length = customField.Name.length;\n\t\t\treturnData.push({\n\t\t\t\tname: customField.StringValue,\n\t\t\t\tvalue: customField.Name.charAt(length - 1),\n\t\t\t});\n\t\t}\n\t\treturn returnData;\n\t}\n\n\tresourceItems.forEach((resourceItem: { DisplayName: string; Name: string; Id: string }) => {\n\t\treturnData.push({\n\t\t\tname: resourceItem.DisplayName || resourceItem.Name || `Memo ${resourceItem.Id}`,\n\t\t\tvalue: resourceItem.Id,\n\t\t});\n\t});\n\n\treturn returnData;\n}\n\n/**\n * Populate the `Line` property in a request body.\n */\nexport function processLines(this: IExecuteFunctions, lines: IDataObject[], resource: string) {\n\tlines.forEach((line) => {\n\t\tif (resource === 'bill') {\n\t\t\tif (line.DetailType === 'AccountBasedExpenseLineDetail') {\n\t\t\t\tline.AccountBasedExpenseLineDetail = {\n\t\t\t\t\tAccountRef: {\n\t\t\t\t\t\tvalue: line.accountId,\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t\tdelete line.accountId;\n\t\t\t} else if (line.DetailType === 'ItemBasedExpenseLineDetail') {\n\t\t\t\tline.ItemBasedExpenseLineDetail = {\n\t\t\t\t\tItemRef: {\n\t\t\t\t\t\tvalue: line.itemId,\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t\tdelete line.itemId;\n\t\t\t}\n\t\t} else if (resource === 'estimate') {\n\t\t\tif (line.DetailType === 'SalesItemLineDetail') {\n\t\t\t\tline.SalesItemLineDetail = {\n\t\t\t\t\tItemRef: {\n\t\t\t\t\t\tvalue: line.itemId,\n\t\t\t\t\t},\n\t\t\t\t\tTaxCodeRef: {\n\t\t\t\t\t\tvalue: line.TaxCodeRef,\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t\tdelete line.itemId;\n\t\t\t\tdelete line.TaxCodeRef;\n\t\t\t}\n\t\t} else if (resource === 'invoice') {\n\t\t\tif (line.DetailType === 'SalesItemLineDetail') {\n\t\t\t\tline.SalesItemLineDetail = {\n\t\t\t\t\tItemRef: {\n\t\t\t\t\t\tvalue: line.itemId,\n\t\t\t\t\t},\n\t\t\t\t\tTaxCodeRef: {\n\t\t\t\t\t\tvalue: line.TaxCodeRef,\n\t\t\t\t\t},\n\t\t\t\t\tQty: line.Qty,\n\t\t\t\t};\n\t\t\t\tif (line.Qty === undefined) {\n\t\t\t\t\tdelete (line.SalesItemLineDetail as IDataObject).Qty;\n\t\t\t\t}\n\t\t\t\tdelete line.itemId;\n\t\t\t\tdelete line.TaxCodeRef;\n\t\t\t\tdelete line.Qty;\n\t\t\t}\n\t\t}\n\t});\n\n\treturn lines;\n}\n\n/**\n * Populate update fields or additional fields into a request body.\n */\nexport function populateFields(\n\tthis: IExecuteFunctions,\n\tbody: IDataObject,\n\tfields: IDataObject,\n\tresource: string,\n) {\n\tObject.entries(fields).forEach(([key, value]) => {\n\t\tif (resource === 'bill') {\n\t\t\tif (key.endsWith('Ref')) {\n\t\t\t\tconst { details } = value as { details: Ref };\n\t\t\t\tbody[key] = {\n\t\t\t\t\tname: details.name,\n\t\t\t\t\tvalue: details.value,\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tbody[key] = value;\n\t\t\t}\n\t\t} else if (['customer', 'employee', 'vendor'].includes(resource)) {\n\t\t\tif (key === 'BillAddr') {\n\t\t\t\tconst { details } = value as { details: GeneralAddress };\n\t\t\t\tbody.BillAddr = pickBy(details, (detail) => detail !== '');\n\t\t\t} else if (key === 'PrimaryEmailAddr') {\n\t\t\t\tbody.PrimaryEmailAddr = {\n\t\t\t\t\tAddress: value,\n\t\t\t\t};\n\t\t\t} else if (key === 'PrimaryPhone') {\n\t\t\t\tbody.PrimaryPhone = {\n\t\t\t\t\tFreeFormNumber: value,\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tbody[key] = value;\n\t\t\t}\n\t\t} else if (resource === 'estimate' || resource === 'invoice') {\n\t\t\tif (key === 'BillAddr' || key === 'ShipAddr') {\n\t\t\t\tconst { details } = value as { details: GeneralAddress };\n\t\t\t\tbody[key] = pickBy(details, (detail) => detail !== '');\n\t\t\t} else if (key === 'BillEmail') {\n\t\t\t\tbody.BillEmail = {\n\t\t\t\t\tAddress: value,\n\t\t\t\t};\n\t\t\t} else if (key === 'CustomFields') {\n\t\t\t\tconst { Field } = value as { Field: CustomField[] };\n\t\t\t\tbody.CustomField = Field;\n\t\t\t\tconst length = (body.CustomField as CustomField[]).length;\n\t\t\t\tfor (let i = 0; i < length; i++) {\n\t\t\t\t\t//@ts-ignore\n\t\t\t\t\tbody.CustomField[i].Type = 'StringType';\n\t\t\t\t}\n\t\t\t} else if (key === 'CustomerMemo') {\n\t\t\t\tbody.CustomerMemo = {\n\t\t\t\t\tvalue,\n\t\t\t\t};\n\t\t\t} else if (key.endsWith('Ref')) {\n\t\t\t\tconst { details } = value as { details: Ref };\n\t\t\t\tbody[key] = {\n\t\t\t\t\tname: details.name,\n\t\t\t\t\tvalue: details.value,\n\t\t\t\t};\n\t\t\t} else if (key === 'TotalTax') {\n\t\t\t\tbody.TxnTaxDetail = {\n\t\t\t\t\tTotalTax: value,\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tbody[key] = value;\n\t\t\t}\n\t\t} else if (resource === 'payment') {\n\t\t\tbody[key] = value;\n\t\t}\n\t});\n\treturn body;\n}\n\nexport const toOptions = (option: string) => ({ name: option, value: option });\n\nexport const splitPascalCase = (word: string) => {\n\treturn word.match(/($[a-z])|[A-Z][^A-Z]+/g)!.join(' ');\n};\n\nexport const toDisplayName = ({ name, value }: Option): INodePropertyOptions => {\n\treturn { name: splitPascalCase(name), value };\n};\n\nexport function adjustTransactionDates(transactionFields: IDataObject & DateFieldsUi): IDataObject {\n\tconst dateFieldKeys = [\n\t\t'dateRangeCustom',\n\t\t'dateRangeDueCustom',\n\t\t'dateRangeModificationCustom',\n\t\t'dateRangeCreationCustom',\n\t] as const;\n\n\tif (dateFieldKeys.every((dateField) => !transactionFields[dateField])) {\n\t\treturn transactionFields;\n\t}\n\n\tlet adjusted = omit(transactionFields, dateFieldKeys) as IDataObject;\n\n\tdateFieldKeys.forEach((dateFieldKey) => {\n\t\tconst dateField = transactionFields[dateFieldKey];\n\n\t\tif (dateField) {\n\t\t\tObject.entries(dateField[`${dateFieldKey}Properties`]).map(\n\t\t\t\t([key, value]) => (dateField[`${dateFieldKey}Properties`][key] = value.split('T')[0]),\n\t\t\t);\n\n\t\t\tadjusted = {\n\t\t\t\t...adjusted,\n\t\t\t\t...dateField[`${dateFieldKey}Properties`],\n\t\t\t};\n\t\t}\n\t});\n\n\treturn adjusted;\n}\n\nexport function simplifyTransactionReport(transactionReport: TransactionReport) {\n\tconst columns = transactionReport.Columns.Column.map((column) => column.ColType);\n\tconst rows = transactionReport.Rows.Row.map((row) => row.ColData.map((i) => i.value));\n\n\tconst simplified = [];\n\tfor (const row of rows) {\n\t\tconst transaction: { [key: string]: string } = {};\n\t\tfor (let i = 0; i < row.length; i++) {\n\t\t\ttransaction[columns[i]] = row[i];\n\t\t}\n\t\tsimplified.push(transaction);\n\t}\n\n\treturn simplified;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAA4B;AAC5B,kBAAiB;AACjB,oBAAmB;AACnB,0BAA6B;AAmB7B,eAAsB,qBAErB,QACA,UACA,IACA,MACA,SAAsB,CAAC,GACR;AACf,QAAM,WAAW,KAAK,iBAAiB,YAAY,CAAC;AACpD,QAAM,YAAY,KAAK,iBAAiB,aAAa,CAAC;AAEtD,MAAI,aAAa;AAEjB,MAAI,CAAC,YAAY,WAAW,SAAS,EAAE,SAAS,QAAQ,KAAK,cAAc,OAAO;AACjF,iBAAa,KAAK,iBAAiB,YAAY,CAAC;AAAA,EACjD;AAEA,QAAM,gBAAgB;AACtB,QAAM,aAAa;AAEnB,QAAM,cAAc,MAAM,KAAK,eAA4C,qBAAqB;AAEhG,QAAM,UAA2B;AAAA,IAChC,SAAS;AAAA,MACR,cAAc;AAAA,IACf;AAAA,IACA;AAAA,IACA,KAAK,GAAG,YAAY,gBAAgB,YAAY,aAAa,aAAa,GAAG,QAAQ;AAAA,IACrF;AAAA,IACA;AAAA,IACA,MAAM,CAAC;AAAA,EACR;AAEA,MAAI,CAAC,OAAO,KAAK,IAAI,EAAE,QAAQ;AAC9B,WAAO,QAAQ;AAAA,EAChB;AAEA,MAAI,CAAC,OAAO,KAAK,EAAE,EAAE,QAAQ;AAC5B,WAAO,QAAQ;AAAA,EAChB;AAEA,MAAI,OAAO,KAAK,MAAM,GAAG;AACxB,WAAO,OAAO,SAAS,MAAM;AAAA,EAC9B;AAEA,MAAI,YAAY;AACf,YAAQ,QAAS,SAAS;AAAA,EAC3B;AAEA,MAAI,aAAa,aAAa,cAAc,QAAQ;AACnD,YAAQ,QAAS,cAAc,IAAI;AAAA,EACpC;AAEA,MACE,aAAa,cAAc,cAAc,UAAU,cAAc,aACjE,aAAa,cAAc,cAAc,UAAU,cAAc,WACjE;AACD,YAAQ,QAAS,cAAc,IAAI;AAAA,EACpC;AAEA,MAAI;AACH,WAAO,MAAM,KAAK,QAAQ,cAAc,KAAK,MAAM,uBAAuB,OAAO;AAAA,EAClF,SAAS,OAAO;AACf,UAAM,IAAI,iCAAa,KAAK,QAAQ,GAAG,KAAmB;AAAA,EAC3D;AACD;AAEA,eAAe,SAEd,QACA,UACA,IACe;AACf,QAAM,eAAe,MAAM,qBAAqB,KAAK,MAAM,QAAQ,UAAU,IAAI,CAAC,CAAC;AAEnF,SAAO,aAAa,cAAc;AACnC;AAKA,eAAsB,6BAErB,QACA,UACA,IACA,MACA,UACe;AACf,MAAI;AACJ,MAAI,gBAAgB;AACpB,QAAM,aAAa;AACnB,QAAM,aAA4B,CAAC;AAEnC,QAAM,gBAAgB;AAAA,IACrB,OAAO,wBAAwB,QAAQ;AAAA,EACxC;AAEA,QAAM,WAAW,MAAM,SAAS,KAAK,MAAM,QAAQ,UAAU,aAAa;AAE1E,QAAM,gBAAgB,GAAG;AAEzB,KAAG;AACF,OAAG,QAAQ,GAAG,aAAa,eAAe,UAAU,kBAAkB,aAAa;AACnF,mBAAe,MAAM,qBAAqB,KAAK,MAAM,QAAQ,UAAU,IAAI,IAAI;AAC/E,QAAI;AACH,YAAM,cAAc,cAAc,MAAM,GAAG,GAAG,IAAI;AAClD,UAAI,gBAAgB,gBAAgB,gBAAgB,UAAU,gBAAgB,WAAW;AACxF,mBAAW,KAAK,GAAI,aAAa,cAAc,WAAW,CAAmB;AAAA,MAC9E,OAAO;AACN,mBAAW,KAAK,GAAI,aAAa,kBAAc,gCAAY,QAAQ,CAAC,CAAmB;AAAA,MACxF;AAAA,IACD,SAAS,OAAO;AACf,aAAO,CAAC;AAAA,IACT;AAEA,qBAAiB;AAAA,EAClB,SAAS,WAAW,WAAW;AAE/B,SAAO;AACR;AAKA,eAAsB,cAErB,GACA,UACA,UACe;AACf,MAAI;AAEJ,QAAM,KAAK;AAAA,IACV,OAAO,iBAAiB,QAAQ;AAAA,EACjC;AAEA,QAAM,YAAY,KAAK,iBAAiB,aAAa,CAAC;AAEtD,QAAM,UAAU,KAAK,iBAAiB,WAAW,CAAC;AAClD,MAAI,QAAQ,OAAO;AAClB,OAAG,SAAS,IAAI,QAAQ,KAAK;AAAA,EAC9B;AAEA,MAAI,WAAW;AACd,WAAO,MAAM,6BAA6B,KAAK,MAAM,OAAO,UAAU,IAAI,CAAC,GAAG,QAAQ;AAAA,EACvF,OAAO;AACN,UAAM,QAAQ,KAAK,iBAAiB,SAAS,CAAC;AAC9C,OAAG,SAAS,eAAe,KAAK;AAChC,mBAAe,MAAM,qBAAqB,KAAK,MAAM,OAAO,UAAU,IAAI,CAAC,CAAC;AAC5E,mBAAe,aAAa,kBAAc,gCAAY,QAAQ,CAAC;AAC/D,WAAO;AAAA,EACR;AACD;AAKA,eAAsB,aAErB,GACA,WACA,UACC;AACD,QAAM,aAAa,KAAK,iBAAiB,GAAG,QAAQ,MAAM,CAAC;AAC3D,QAAM,cAAc,eAAe,SAAS,IAAI,QAAQ,IAAI,UAAU;AACtE,QAAM,mBAAe,gCAAY,QAAQ;AACzC,QAAM;AAAA,IACL,CAAC,YAAY,GAAG,EAAE,UAAU;AAAA,EAC7B,IAAI,MAAM,qBAAqB,KAAK,MAAM,OAAO,aAAa,CAAC,GAAG,CAAC,CAAC;AAEpE,SAAO;AACR;AAKA,eAAsB,mBAErB,GACA,WACA,UACA,KACC;AACD,QAAM,aAAa,KAAK,iBAAiB,GAAG,QAAQ,MAAM,CAAC;AAC3D,QAAM,WAAW,eAAe,SAAS,IAAI,QAAQ,IAAI,UAAU;AACnE,QAAM,eAAe,MAAM,qBAAqB,KAAK,MAAM,OAAO,UAAU,CAAC,GAAG,CAAC,CAAC;AAElF,SAAO;AAAA,IACN,KAAK,iBAAa,gCAAY,QAAQ,CAAC,EAAE,GAAG;AAAA,IAC5C,WAAW,iBAAa,gCAAY,QAAQ,CAAC,EAAE;AAAA,EAChD;AACD;AAKA,eAAsB,iBAErB,OACA,GACA,WACA,UACA,YACC;AACD,QAAM,iBAAiB,KAAK,iBAAiB,kBAAkB,CAAC;AAChE,QAAM,WAAW,KAAK,iBAAiB,YAAY,CAAC;AACpD,QAAM,WAAW,eAAe,SAAS,IAAI,QAAQ,IAAI,UAAU;AACnE,QAAM,OAAO,MAAM,qBAAqB,KAAK,MAAM,OAAO,UAAU,CAAC,GAAG,CAAC,GAAG,EAAE,UAAU,KAAK,CAAC;AAE9F,QAAM,CAAC,EAAE,SAAS,MAAM,CAAC,EAAE,UAAU,CAAC;AACtC,QAAM,CAAC,EAAE,OAAO,cAAc,IAAI,MAAM,KAAK,QAAQ,kBAAkB,IAAc;AACrF,QAAM,CAAC,EAAE,OAAO,cAAc,EAAE,WAAW;AAC3C,QAAM,CAAC,EAAE,OAAO,cAAc,EAAE,gBAAgB;AAEhD,SAAO;AACR;AAEA,eAAsB,aAA0C,UAAkB;AACjF,QAAM,aAAqC,CAAC;AAE5C,QAAM,KAAK;AAAA,IACV,OAAO,iBAAiB,QAAQ;AAAA,EACjC;AAEA,QAAM;AAAA,IACL,gBAAgB;AAAA,MACf,qBAAqB,EAAE,QAAQ;AAAA,IAChC;AAAA,EACD,IAAI,MAAM,KAAK,eAA4C,qBAAqB;AAChF,QAAM,WAAW,eAAe,OAAO;AAEvC,QAAM,gBAAgB,MAAM,6BAA6B;AAAA,IACxD;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,CAAC;AAAA,IACD;AAAA,EACD;AAEA,MAAI,aAAa,eAAe;AAC/B,UAAM;AAAA,MACL,iBAAiB,EAAE,YAAY;AAAA,IAChC,IAAI,cAAc,CAAC;AACnB,UAAM,eAAe,YAAY,CAAC,EAAE;AACpC,eAAW,eAAe,cAAc;AACvC,YAAM,SAAS,YAAY,KAAK;AAChC,iBAAW,KAAK;AAAA,QACf,MAAM,YAAY;AAAA,QAClB,OAAO,YAAY,KAAK,OAAO,SAAS,CAAC;AAAA,MAC1C,CAAC;AAAA,IACF;AACA,WAAO;AAAA,EACR;AAEA,gBAAc,QAAQ,CAAC,iBAAoE;AAC1F,eAAW,KAAK;AAAA,MACf,MAAM,aAAa,eAAe,aAAa,QAAQ,QAAQ,aAAa,EAAE;AAAA,MAC9E,OAAO,aAAa;AAAA,IACrB,CAAC;AAAA,EACF,CAAC;AAED,SAAO;AACR;AAKO,SAAS,aAAsC,OAAsB,UAAkB;AAC7F,QAAM,QAAQ,CAAC,SAAS;AACvB,QAAI,aAAa,QAAQ;AACxB,UAAI,KAAK,eAAe,iCAAiC;AACxD,aAAK,gCAAgC;AAAA,UACpC,YAAY;AAAA,YACX,OAAO,KAAK;AAAA,UACb;AAAA,QACD;AACA,eAAO,KAAK;AAAA,MACb,WAAW,KAAK,eAAe,8BAA8B;AAC5D,aAAK,6BAA6B;AAAA,UACjC,SAAS;AAAA,YACR,OAAO,KAAK;AAAA,UACb;AAAA,QACD;AACA,eAAO,KAAK;AAAA,MACb;AAAA,IACD,WAAW,aAAa,YAAY;AACnC,UAAI,KAAK,eAAe,uBAAuB;AAC9C,aAAK,sBAAsB;AAAA,UAC1B,SAAS;AAAA,YACR,OAAO,KAAK;AAAA,UACb;AAAA,UACA,YAAY;AAAA,YACX,OAAO,KAAK;AAAA,UACb;AAAA,QACD;AACA,eAAO,KAAK;AACZ,eAAO,KAAK;AAAA,MACb;AAAA,IACD,WAAW,aAAa,WAAW;AAClC,UAAI,KAAK,eAAe,uBAAuB;AAC9C,aAAK,sBAAsB;AAAA,UAC1B,SAAS;AAAA,YACR,OAAO,KAAK;AAAA,UACb;AAAA,UACA,YAAY;AAAA,YACX,OAAO,KAAK;AAAA,UACb;AAAA,UACA,KAAK,KAAK;AAAA,QACX;AACA,YAAI,KAAK,QAAQ,QAAW;AAC3B,iBAAQ,KAAK,oBAAoC;AAAA,QAClD;AACA,eAAO,KAAK;AACZ,eAAO,KAAK;AACZ,eAAO,KAAK;AAAA,MACb;AAAA,IACD;AAAA,EACD,CAAC;AAED,SAAO;AACR;AAKO,SAAS,eAEf,MACA,QACA,UACC;AACD,SAAO,QAAQ,MAAM,EAAE,QAAQ,CAAC,CAAC,KAAK,KAAK,MAAM;AAChD,QAAI,aAAa,QAAQ;AACxB,UAAI,IAAI,SAAS,KAAK,GAAG;AACxB,cAAM,EAAE,QAAQ,IAAI;AACpB,aAAK,GAAG,IAAI;AAAA,UACX,MAAM,QAAQ;AAAA,UACd,OAAO,QAAQ;AAAA,QAChB;AAAA,MACD,OAAO;AACN,aAAK,GAAG,IAAI;AAAA,MACb;AAAA,IACD,WAAW,CAAC,YAAY,YAAY,QAAQ,EAAE,SAAS,QAAQ,GAAG;AACjE,UAAI,QAAQ,YAAY;AACvB,cAAM,EAAE,QAAQ,IAAI;AACpB,aAAK,eAAW,cAAAA,SAAO,SAAS,CAAC,WAAW,WAAW,EAAE;AAAA,MAC1D,WAAW,QAAQ,oBAAoB;AACtC,aAAK,mBAAmB;AAAA,UACvB,SAAS;AAAA,QACV;AAAA,MACD,WAAW,QAAQ,gBAAgB;AAClC,aAAK,eAAe;AAAA,UACnB,gBAAgB;AAAA,QACjB;AAAA,MACD,OAAO;AACN,aAAK,GAAG,IAAI;AAAA,MACb;AAAA,IACD,WAAW,aAAa,cAAc,aAAa,WAAW;AAC7D,UAAI,QAAQ,cAAc,QAAQ,YAAY;AAC7C,cAAM,EAAE,QAAQ,IAAI;AACpB,aAAK,GAAG,QAAI,cAAAA,SAAO,SAAS,CAAC,WAAW,WAAW,EAAE;AAAA,MACtD,WAAW,QAAQ,aAAa;AAC/B,aAAK,YAAY;AAAA,UAChB,SAAS;AAAA,QACV;AAAA,MACD,WAAW,QAAQ,gBAAgB;AAClC,cAAM,EAAE,MAAM,IAAI;AAClB,aAAK,cAAc;AACnB,cAAM,SAAU,KAAK,YAA8B;AACnD,iBAAS,IAAI,GAAG,IAAI,QAAQ,KAAK;AAEhC,eAAK,YAAY,CAAC,EAAE,OAAO;AAAA,QAC5B;AAAA,MACD,WAAW,QAAQ,gBAAgB;AAClC,aAAK,eAAe;AAAA,UACnB;AAAA,QACD;AAAA,MACD,WAAW,IAAI,SAAS,KAAK,GAAG;AAC/B,cAAM,EAAE,QAAQ,IAAI;AACpB,aAAK,GAAG,IAAI;AAAA,UACX,MAAM,QAAQ;AAAA,UACd,OAAO,QAAQ;AAAA,QAChB;AAAA,MACD,WAAW,QAAQ,YAAY;AAC9B,aAAK,eAAe;AAAA,UACnB,UAAU;AAAA,QACX;AAAA,MACD,OAAO;AACN,aAAK,GAAG,IAAI;AAAA,MACb;AAAA,IACD,WAAW,aAAa,WAAW;AAClC,WAAK,GAAG,IAAI;AAAA,IACb;AAAA,EACD,CAAC;AACD,SAAO;AACR;AAEO,MAAM,YAAY,CAAC,YAAoB,EAAE,MAAM,QAAQ,OAAO,OAAO;AAErE,MAAM,kBAAkB,CAAC,SAAiB;AAChD,SAAO,KAAK,MAAM,wBAAwB,EAAG,KAAK,GAAG;AACtD;AAEO,MAAM,gBAAgB,CAAC,EAAE,MAAM,MAAM,MAAoC;AAC/E,SAAO,EAAE,MAAM,gBAAgB,IAAI,GAAG,MAAM;AAC7C;AAEO,SAAS,uBAAuB,mBAA4D;AAClG,QAAM,gBAAgB;AAAA,IACrB;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACD;AAEA,MAAI,cAAc,MAAM,CAAC,cAAc,CAAC,kBAAkB,SAAS,CAAC,GAAG;AACtE,WAAO;AAAA,EACR;AAEA,MAAI,eAAW,YAAAC,SAAK,mBAAmB,aAAa;AAEpD,gBAAc,QAAQ,CAAC,iBAAiB;AACvC,UAAM,YAAY,kBAAkB,YAAY;AAEhD,QAAI,WAAW;AACd,aAAO,QAAQ,UAAU,GAAG,YAAY,YAAY,CAAC,EAAE;AAAA,QACtD,CAAC,CAAC,KAAK,KAAK,MAAO,UAAU,GAAG,YAAY,YAAY,EAAE,GAAG,IAAI,MAAM,MAAM,GAAG,EAAE,CAAC;AAAA,MACpF;AAEA,iBAAW;AAAA,QACV,GAAG;AAAA,QACH,GAAG,UAAU,GAAG,YAAY,YAAY;AAAA,MACzC;AAAA,IACD;AAAA,EACD,CAAC;AAED,SAAO;AACR;AAEO,SAAS,0BAA0B,mBAAsC;AAC/E,QAAM,UAAU,kBAAkB,QAAQ,OAAO,IAAI,CAAC,WAAW,OAAO,OAAO;AAC/E,QAAM,OAAO,kBAAkB,KAAK,IAAI,IAAI,CAAC,QAAQ,IAAI,QAAQ,IAAI,CAAC,MAAM,EAAE,KAAK,CAAC;AAEpF,QAAM,aAAa,CAAC;AACpB,aAAW,OAAO,MAAM;AACvB,UAAM,cAAyC,CAAC;AAChD,aAAS,IAAI,GAAG,IAAI,IAAI,QAAQ,KAAK;AACpC,kBAAY,QAAQ,CAAC,CAAC,IAAI,IAAI,CAAC;AAAA,IAChC;AACA,eAAW,KAAK,WAAW;AAAA,EAC5B;AAEA,SAAO;AACR;","names":["pickBy","omit"]}