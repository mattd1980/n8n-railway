{"version":3,"sources":["../../../nodes/Automizy/Automizy.node.ts"],"sourcesContent":["import {\n\ttype IExecuteFunctions,\n\ttype IDataObject,\n\ttype ILoadOptionsFunctions,\n\ttype INodeExecutionData,\n\ttype INodePropertyOptions,\n\ttype INodeType,\n\ttype INodeTypeDescription,\n\ttype NodeExecutionWithMetadata,\n\tNodeConnectionTypes,\n} from 'n8n-workflow';\n\nimport { contactFields, contactOperations } from './ContactDescription';\nimport { automizyApiRequest, automizyApiRequestAllItems } from './GenericFunctions';\nimport { listFields, listOperations } from './ListDescription';\n\nexport class Automizy implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'Automizy',\n\t\tname: 'automizy',\n\t\t// eslint-disable-next-line n8n-nodes-base/node-class-description-icon-not-svg\n\t\ticon: 'file:automizy.png',\n\t\tgroup: ['input'],\n\t\tversion: 1,\n\t\tsubtitle: '={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}',\n\t\tdescription: 'Consume Automizy API',\n\t\tdefaults: {\n\t\t\tname: 'Automizy',\n\t\t},\n\t\tinputs: [NodeConnectionTypes.Main],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\thidden: true,\n\t\tcredentials: [\n\t\t\t{\n\t\t\t\tname: 'automizyApi',\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName:\n\t\t\t\t\t'This service may no longer exist and will be removed from n8n in a future release.',\n\t\t\t\tname: 'deprecated',\n\t\t\t\ttype: 'notice',\n\t\t\t\tdefault: '',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Resource',\n\t\t\t\tname: 'resource',\n\t\t\t\ttype: 'options',\n\t\t\t\tnoDataExpression: true,\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Contact',\n\t\t\t\t\t\tvalue: 'contact',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'List',\n\t\t\t\t\t\tvalue: 'list',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'contact',\n\t\t\t},\n\n\t\t\t...contactOperations,\n\t\t\t...contactFields,\n\n\t\t\t...listOperations,\n\t\t\t...listFields,\n\t\t],\n\t};\n\n\tmethods = {\n\t\tloadOptions: {\n\t\t\t// Get all the tags to display them to user so that they can\n\t\t\t// select them easily\n\t\t\tasync getLists(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst returnData: INodePropertyOptions[] = [];\n\t\t\t\tconst lists = await automizyApiRequestAllItems.call(\n\t\t\t\t\tthis,\n\t\t\t\t\t'smartLists',\n\t\t\t\t\t'GET',\n\t\t\t\t\t'/smart-lists',\n\t\t\t\t);\n\t\t\t\tfor (const list of lists) {\n\t\t\t\t\treturnData.push({\n\t\t\t\t\t\tname: list.name,\n\t\t\t\t\t\tvalue: list.id,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn returnData;\n\t\t\t},\n\t\t\tasync getTags(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst returnData: INodePropertyOptions[] = [];\n\t\t\t\tconst tags = await automizyApiRequestAllItems.call(\n\t\t\t\t\tthis,\n\t\t\t\t\t'contactTags',\n\t\t\t\t\t'GET',\n\t\t\t\t\t'/contacts/tag-manager',\n\t\t\t\t);\n\t\t\t\tfor (const tag of tags) {\n\t\t\t\t\treturnData.push({\n\t\t\t\t\t\tname: tag.name,\n\t\t\t\t\t\tvalue: tag.name,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn returnData;\n\t\t\t},\n\t\t\tasync getCustomFields(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst returnData: INodePropertyOptions[] = [];\n\t\t\t\tconst customFields = await automizyApiRequestAllItems.call(\n\t\t\t\t\tthis,\n\t\t\t\t\t'customFields',\n\t\t\t\t\t'GET',\n\t\t\t\t\t'/custom-fields',\n\t\t\t\t);\n\t\t\t\tfor (const customField of customFields) {\n\t\t\t\t\treturnData.push({\n\t\t\t\t\t\tname: customField.name,\n\t\t\t\t\t\tvalue: customField.id,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn returnData;\n\t\t\t},\n\t\t},\n\t};\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t\tconst items = this.getInputData();\n\t\tconst returnData: INodeExecutionData[] = [];\n\t\tconst length = items.length;\n\t\tconst qs: IDataObject = {};\n\t\tlet responseData;\n\t\tconst resource = this.getNodeParameter('resource', 0);\n\t\tconst operation = this.getNodeParameter('operation', 0);\n\t\tfor (let i = 0; i < length; i++) {\n\t\t\tif (resource === 'contact') {\n\t\t\t\tif (operation === 'create') {\n\t\t\t\t\tconst listId = this.getNodeParameter('listId', i) as string;\n\n\t\t\t\t\tconst email = this.getNodeParameter('email', i) as string;\n\n\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i);\n\n\t\t\t\t\tconst body: IDataObject = {\n\t\t\t\t\t\temail,\n\t\t\t\t\t};\n\n\t\t\t\t\tObject.assign(body, additionalFields);\n\n\t\t\t\t\tif (body.customFieldsUi) {\n\t\t\t\t\t\tconst customFieldsValues = (body.customFieldsUi as IDataObject)\n\t\t\t\t\t\t\t.customFieldsValues as IDataObject[];\n\n\t\t\t\t\t\tbody.customFields = {};\n\n\t\t\t\t\t\tfor (const customField of customFieldsValues) {\n\t\t\t\t\t\t\t//@ts-ignore\n\t\t\t\t\t\t\tbody.customFields[customField.key] = customField.value;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tdelete body.customFieldsUi;\n\t\t\t\t\t}\n\n\t\t\t\t\tresponseData = await automizyApiRequest.call(\n\t\t\t\t\t\tthis,\n\t\t\t\t\t\t'POST',\n\t\t\t\t\t\t`/smart-lists/${listId}/contacts`,\n\t\t\t\t\t\tbody,\n\t\t\t\t\t);\n\t\t\t\t\tresponseData = responseData.contacts;\n\t\t\t\t\tresponseData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tif (operation === 'delete') {\n\t\t\t\t\tconst contactId = this.getNodeParameter('contactId', i) as string;\n\n\t\t\t\t\tresponseData = await automizyApiRequest.call(this, 'DELETE', `/contacts/${contactId}`);\n\n\t\t\t\t\tresponseData = { success: true };\n\t\t\t\t\tresponseData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData),\n\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tif (operation === 'get') {\n\t\t\t\t\tconst contactId = this.getNodeParameter('contactId', i) as string;\n\n\t\t\t\t\tresponseData = await automizyApiRequest.call(this, 'GET', `/contacts/${contactId}`);\n\t\t\t\t\tresponseData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tif (operation === 'getAll') {\n\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', i);\n\n\t\t\t\t\tconst listId = this.getNodeParameter('listId', i) as string;\n\n\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i);\n\n\t\t\t\t\tif (additionalFields.direction && additionalFields.sortBy) {\n\t\t\t\t\t\tqs.order = `${additionalFields.sortBy}:${additionalFields.direction}`;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (additionalFields.fields) {\n\t\t\t\t\t\tqs.fields = additionalFields.fields;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (returnAll) {\n\t\t\t\t\t\tresponseData = await automizyApiRequestAllItems.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'contacts',\n\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t`/smart-lists/${listId}/contacts`,\n\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tqs.limit = this.getNodeParameter('limit', i);\n\n\t\t\t\t\t\tresponseData = await automizyApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t`/smart-lists/${listId}/contacts`,\n\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tresponseData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tif (operation === 'update') {\n\t\t\t\t\tconst email = this.getNodeParameter('email', i) as string;\n\n\t\t\t\t\tconst updateFields = this.getNodeParameter('updateFields', i);\n\n\t\t\t\t\tconst body: IDataObject = {};\n\n\t\t\t\t\tObject.assign(body, updateFields);\n\n\t\t\t\t\tif (body.customFieldsUi) {\n\t\t\t\t\t\tconst customFieldsValues = (body.customFieldsUi as IDataObject)\n\t\t\t\t\t\t\t.customFieldsValues as IDataObject[];\n\n\t\t\t\t\t\tbody.customFields = {};\n\n\t\t\t\t\t\tfor (const customField of customFieldsValues) {\n\t\t\t\t\t\t\t//@ts-ignore\n\t\t\t\t\t\t\tbody.customFields[customField.key] = customField.value;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tdelete body.customFieldsUi;\n\t\t\t\t\t}\n\n\t\t\t\t\tresponseData = await automizyApiRequest.call(this, 'PATCH', `/contacts/${email}`, body);\n\t\t\t\t\tresponseData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (resource === 'list') {\n\t\t\t\tif (operation === 'create') {\n\t\t\t\t\tconst name = this.getNodeParameter('name', i) as string;\n\n\t\t\t\t\tconst body: IDataObject = {\n\t\t\t\t\t\tname,\n\t\t\t\t\t};\n\n\t\t\t\t\tresponseData = await automizyApiRequest.call(this, 'POST', '/smart-lists', body);\n\t\t\t\t\tresponseData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tif (operation === 'delete') {\n\t\t\t\t\tconst listId = this.getNodeParameter('listId', i) as string;\n\n\t\t\t\t\tresponseData = await automizyApiRequest.call(this, 'DELETE', `/smart-lists/${listId}`);\n\n\t\t\t\t\tresponseData = { success: true };\n\t\t\t\t\tresponseData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData),\n\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tif (operation === 'get') {\n\t\t\t\t\tconst listId = this.getNodeParameter('listId', i) as string;\n\n\t\t\t\t\tresponseData = await automizyApiRequest.call(this, 'GET', `/smart-lists/${listId}`);\n\t\t\t\t\tresponseData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tif (operation === 'getAll') {\n\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', i);\n\n\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i);\n\n\t\t\t\t\tif (additionalFields.direction && additionalFields.sortBy) {\n\t\t\t\t\t\tqs.order = `${additionalFields.sortBy}:${additionalFields.direction}`;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (additionalFields.fields) {\n\t\t\t\t\t\tqs.fields = additionalFields.fields;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (returnAll) {\n\t\t\t\t\t\tresponseData = await automizyApiRequestAllItems.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'smartLists',\n\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t'/smart-lists',\n\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tqs.limit = this.getNodeParameter('limit', i);\n\n\t\t\t\t\t\tresponseData = await automizyApiRequest.call(this, 'GET', '/smart-lists', {}, qs);\n\n\t\t\t\t\t\tresponseData = responseData.smartLists;\n\t\t\t\t\t}\n\n\t\t\t\t\tresponseData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tif (operation === 'update') {\n\t\t\t\t\tconst listId = this.getNodeParameter('listId', i) as string;\n\n\t\t\t\t\tconst name = this.getNodeParameter('name', i) as string;\n\n\t\t\t\t\tconst body: IDataObject = {\n\t\t\t\t\t\tname,\n\t\t\t\t\t};\n\n\t\t\t\t\tresponseData = await automizyApiRequest.call(\n\t\t\t\t\t\tthis,\n\t\t\t\t\t\t'PATCH',\n\t\t\t\t\t\t`/smart-lists/${listId}`,\n\t\t\t\t\t\tbody,\n\t\t\t\t\t);\n\n\t\t\t\t\tresponseData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturnData.push(...(responseData as NodeExecutionWithMetadata[]));\n\n\t\treturn [returnData];\n\t}\n}\n"],"mappings":"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","names":[]}