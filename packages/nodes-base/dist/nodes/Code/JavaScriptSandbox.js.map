{"version":3,"sources":["../../../nodes/Code/JavaScriptSandbox.ts"],"sourcesContent":["import { NodeVM, makeResolverFromLegacyOptions, type Resolver } from '@n8n/vm2';\nimport type { IExecuteFunctions, INodeExecutionData } from 'n8n-workflow';\n\nimport { ExecutionError } from './ExecutionError';\nimport {\n\tmapItemNotDefinedErrorIfNeededForRunForEach,\n\tmapItemsNotDefinedErrorIfNeededForRunForAll,\n\tvalidateNoDisallowedMethodsInRunForEach,\n} from './JsCodeValidator';\nimport type { SandboxContext } from './Sandbox';\nimport { Sandbox } from './Sandbox';\nimport { ValidationError } from './ValidationError';\n\nconst { NODE_FUNCTION_ALLOW_BUILTIN: builtIn, NODE_FUNCTION_ALLOW_EXTERNAL: external } =\n\tprocess.env;\n\nexport const vmResolver = makeResolverFromLegacyOptions({\n\texternal: external\n\t\t? {\n\t\t\t\tmodules: external.split(','),\n\t\t\t\ttransitive: false,\n\t\t\t}\n\t\t: false,\n\tbuiltin: builtIn?.split(',') ?? [],\n});\n\nexport class JavaScriptSandbox extends Sandbox {\n\tprivate readonly vm: NodeVM;\n\n\tconstructor(\n\t\tcontext: SandboxContext,\n\t\tprivate jsCode: string,\n\t\thelpers: IExecuteFunctions['helpers'],\n\t\toptions?: { resolver?: Resolver },\n\t) {\n\t\tsuper(\n\t\t\t{\n\t\t\t\tobject: {\n\t\t\t\t\tsingular: 'object',\n\t\t\t\t\tplural: 'objects',\n\t\t\t\t},\n\t\t\t},\n\t\t\thelpers,\n\t\t);\n\t\tthis.vm = new NodeVM({\n\t\t\tconsole: 'redirect',\n\t\t\tsandbox: context,\n\t\t\trequire: options?.resolver ?? vmResolver,\n\t\t\twasm: false,\n\t\t});\n\n\t\tthis.vm.on('console.log', (...args: unknown[]) => this.emit('output', ...args));\n\t}\n\n\tasync runCode<T = unknown>(): Promise<T> {\n\t\tconst script = `module.exports = async function() {${this.jsCode}\\n}()`;\n\t\ttry {\n\t\t\tconst executionResult = (await this.vm.run(script, __dirname)) as T;\n\t\t\treturn executionResult;\n\t\t} catch (error) {\n\t\t\tthrow new ExecutionError(error);\n\t\t}\n\t}\n\n\tasync runCodeAllItems(options?: {\n\t\tmultiOutput?: boolean;\n\t}): Promise<INodeExecutionData[] | INodeExecutionData[][]> {\n\t\tconst script = `module.exports = async function() {${this.jsCode}\\n}()`;\n\n\t\tlet executionResult: INodeExecutionData | INodeExecutionData[] | INodeExecutionData[][];\n\n\t\ttry {\n\t\t\texecutionResult = await this.vm.run(script, __dirname);\n\t\t} catch (error) {\n\t\t\t// anticipate user expecting `items` to pre-exist as in Function Item node\n\t\t\tmapItemsNotDefinedErrorIfNeededForRunForAll(this.jsCode, error);\n\n\t\t\tthrow new ExecutionError(error);\n\t\t}\n\n\t\tif (executionResult === null) return [];\n\n\t\tif (options?.multiOutput === true) {\n\t\t\t// Check if executionResult is an array of arrays\n\t\t\tif (!Array.isArray(executionResult) || executionResult.some((item) => !Array.isArray(item))) {\n\t\t\t\tthrow new ValidationError({\n\t\t\t\t\tmessage: \"The code doesn't return an array of arrays\",\n\t\t\t\t\tdescription:\n\t\t\t\t\t\t'Please return an array of arrays. One array for the different outputs and one for the different items that get returned.',\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn executionResult.map((data) => {\n\t\t\t\treturn this.validateRunCodeAllItems(data);\n\t\t\t});\n\t\t}\n\n\t\treturn this.validateRunCodeAllItems(\n\t\t\texecutionResult as INodeExecutionData | INodeExecutionData[],\n\t\t);\n\t}\n\n\tasync runCodeEachItem(itemIndex: number): Promise<INodeExecutionData | undefined> {\n\t\tconst script = `module.exports = async function() {${this.jsCode}\\n}()`;\n\n\t\tvalidateNoDisallowedMethodsInRunForEach(this.jsCode, itemIndex);\n\n\t\tlet executionResult: INodeExecutionData;\n\n\t\ttry {\n\t\t\texecutionResult = await this.vm.run(script, __dirname);\n\t\t} catch (error) {\n\t\t\t// anticipate user expecting `item` to pre-exist as in Function Item node\n\t\t\tmapItemNotDefinedErrorIfNeededForRunForEach(this.jsCode, error);\n\n\t\t\tthrow new ExecutionError(error, itemIndex);\n\t\t}\n\n\t\tif (executionResult === null) return undefined;\n\n\t\treturn this.validateRunCodeEachItem(executionResult, itemIndex);\n\t}\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAqE;AAGrE,4BAA+B;AAC/B,6BAIO;AAEP,qBAAwB;AACxB,6BAAgC;AAEhC,MAAM,EAAE,6BAA6B,SAAS,8BAA8B,SAAS,IACpF,QAAQ;AAEF,MAAM,iBAAa,0CAA8B;AAAA,EACvD,UAAU,WACP;AAAA,IACA,SAAS,SAAS,MAAM,GAAG;AAAA,IAC3B,YAAY;AAAA,EACb,IACC;AAAA,EACH,SAAS,SAAS,MAAM,GAAG,KAAK,CAAC;AAClC,CAAC;AAEM,MAAM,0BAA0B,uBAAQ;AAAA,EAG9C,YACC,SACQ,QACR,SACA,SACC;AACD;AAAA,MACC;AAAA,QACC,QAAQ;AAAA,UACP,UAAU;AAAA,UACV,QAAQ;AAAA,QACT;AAAA,MACD;AAAA,MACA;AAAA,IACD;AAZQ;AAaR,SAAK,KAAK,IAAI,kBAAO;AAAA,MACpB,SAAS;AAAA,MACT,SAAS;AAAA,MACT,SAAS,SAAS,YAAY;AAAA,MAC9B,MAAM;AAAA,IACP,CAAC;AAED,SAAK,GAAG,GAAG,eAAe,IAAI,SAAoB,KAAK,KAAK,UAAU,GAAG,IAAI,CAAC;AAAA,EAC/E;AAAA,EAEA,MAAM,UAAmC;AACxC,UAAM,SAAS,sCAAsC,KAAK,MAAM;AAAA;AAChE,QAAI;AACH,YAAM,kBAAmB,MAAM,KAAK,GAAG,IAAI,QAAQ,SAAS;AAC5D,aAAO;AAAA,IACR,SAAS,OAAO;AACf,YAAM,IAAI,qCAAe,KAAK;AAAA,IAC/B;AAAA,EACD;AAAA,EAEA,MAAM,gBAAgB,SAEqC;AAC1D,UAAM,SAAS,sCAAsC,KAAK,MAAM;AAAA;AAEhE,QAAI;AAEJ,QAAI;AACH,wBAAkB,MAAM,KAAK,GAAG,IAAI,QAAQ,SAAS;AAAA,IACtD,SAAS,OAAO;AAEf,8EAA4C,KAAK,QAAQ,KAAK;AAE9D,YAAM,IAAI,qCAAe,KAAK;AAAA,IAC/B;AAEA,QAAI,oBAAoB,KAAM,QAAO,CAAC;AAEtC,QAAI,SAAS,gBAAgB,MAAM;AAElC,UAAI,CAAC,MAAM,QAAQ,eAAe,KAAK,gBAAgB,KAAK,CAAC,SAAS,CAAC,MAAM,QAAQ,IAAI,CAAC,GAAG;AAC5F,cAAM,IAAI,uCAAgB;AAAA,UACzB,SAAS;AAAA,UACT,aACC;AAAA,QACF,CAAC;AAAA,MACF;AAEA,aAAO,gBAAgB,IAAI,CAAC,SAAS;AACpC,eAAO,KAAK,wBAAwB,IAAI;AAAA,MACzC,CAAC;AAAA,IACF;AAEA,WAAO,KAAK;AAAA,MACX;AAAA,IACD;AAAA,EACD;AAAA,EAEA,MAAM,gBAAgB,WAA4D;AACjF,UAAM,SAAS,sCAAsC,KAAK,MAAM;AAAA;AAEhE,wEAAwC,KAAK,QAAQ,SAAS;AAE9D,QAAI;AAEJ,QAAI;AACH,wBAAkB,MAAM,KAAK,GAAG,IAAI,QAAQ,SAAS;AAAA,IACtD,SAAS,OAAO;AAEf,8EAA4C,KAAK,QAAQ,KAAK;AAE9D,YAAM,IAAI,qCAAe,OAAO,SAAS;AAAA,IAC1C;AAEA,QAAI,oBAAoB,KAAM,QAAO;AAErC,WAAO,KAAK,wBAAwB,iBAAiB,SAAS;AAAA,EAC/D;AACD;","names":[]}