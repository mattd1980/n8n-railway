{"version":3,"sources":["../../../nodes/Code/ExecutionError.ts"],"sourcesContent":["import { ApplicationError } from 'n8n-workflow';\n\nexport class ExecutionError extends ApplicationError {\n\tdescription: string | null = null;\n\n\titemIndex: number | undefined = undefined;\n\n\tcontext: { itemIndex: number } | undefined = undefined;\n\n\tstack = '';\n\n\tlineNumber: number | undefined = undefined;\n\n\tconstructor(error: Error & { stack?: string }, itemIndex?: number) {\n\t\tsuper(error.message);\n\t\tthis.itemIndex = itemIndex;\n\n\t\tif (this.itemIndex !== undefined) {\n\t\t\tthis.context = { itemIndex: this.itemIndex };\n\t\t}\n\n\t\tthis.stack = error.stack ?? '';\n\n\t\tthis.populateFromStack();\n\t}\n\n\t/**\n\t * Populate error `message` and `description` from error `stack`.\n\t */\n\tprivate populateFromStack() {\n\t\tconst stackRows = this.stack.split('\\n');\n\n\t\tif (stackRows.length === 0) {\n\t\t\tthis.message = 'Unknown error';\n\t\t}\n\n\t\tconst messageRow = stackRows.find((line) => line.includes('Error:'));\n\t\tconst lineNumberRow = stackRows.find((line) => line.includes('Code:'));\n\t\tconst lineNumberDisplay = this.toLineNumberDisplay(lineNumberRow);\n\n\t\tif (!messageRow) {\n\t\t\tthis.message = `Unknown error ${lineNumberDisplay}`;\n\t\t\treturn;\n\t\t}\n\n\t\tconst [errorDetails, errorType] = this.toErrorDetailsAndType(messageRow);\n\n\t\tif (errorType) this.description = errorType;\n\n\t\tif (!errorDetails) {\n\t\t\tthis.message = `Unknown error ${lineNumberDisplay}`;\n\t\t\treturn;\n\t\t}\n\n\t\tthis.message = `${errorDetails} ${lineNumberDisplay}`;\n\t}\n\n\tprivate toLineNumberDisplay(lineNumberRow?: string) {\n\t\tconst errorLineNumberMatch = lineNumberRow?.match(/Code:(?<lineNumber>\\d+)/);\n\n\t\tif (!errorLineNumberMatch?.groups?.lineNumber) return null;\n\n\t\tconst lineNumber = errorLineNumberMatch.groups.lineNumber;\n\n\t\tthis.lineNumber = Number(lineNumber);\n\n\t\tif (!lineNumber) return '';\n\n\t\treturn this.itemIndex === undefined\n\t\t\t? `[line ${lineNumber}]`\n\t\t\t: `[line ${lineNumber}, for item ${this.itemIndex}]`;\n\t}\n\n\tprivate toErrorDetailsAndType(messageRow?: string) {\n\t\tif (!messageRow) return [null, null];\n\n\t\tconst [errorDetails, errorType] = messageRow\n\t\t\t.split(':')\n\t\t\t.reverse()\n\t\t\t.map((i) => i.trim());\n\n\t\treturn [errorDetails, errorType === 'Error' ? null : errorType];\n\t}\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAiC;AAE1B,MAAM,uBAAuB,qCAAiB;AAAA,EAWpD,YAAY,OAAmC,WAAoB;AAClE,UAAM,MAAM,OAAO;AAXpB,uBAA6B;AAE7B,qBAAgC;AAEhC,mBAA6C;AAE7C,iBAAQ;AAER,sBAAiC;AAIhC,SAAK,YAAY;AAEjB,QAAI,KAAK,cAAc,QAAW;AACjC,WAAK,UAAU,EAAE,WAAW,KAAK,UAAU;AAAA,IAC5C;AAEA,SAAK,QAAQ,MAAM,SAAS;AAE5B,SAAK,kBAAkB;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA,EAKQ,oBAAoB;AAC3B,UAAM,YAAY,KAAK,MAAM,MAAM,IAAI;AAEvC,QAAI,UAAU,WAAW,GAAG;AAC3B,WAAK,UAAU;AAAA,IAChB;AAEA,UAAM,aAAa,UAAU,KAAK,CAAC,SAAS,KAAK,SAAS,QAAQ,CAAC;AACnE,UAAM,gBAAgB,UAAU,KAAK,CAAC,SAAS,KAAK,SAAS,OAAO,CAAC;AACrE,UAAM,oBAAoB,KAAK,oBAAoB,aAAa;AAEhE,QAAI,CAAC,YAAY;AAChB,WAAK,UAAU,iBAAiB,iBAAiB;AACjD;AAAA,IACD;AAEA,UAAM,CAAC,cAAc,SAAS,IAAI,KAAK,sBAAsB,UAAU;AAEvE,QAAI,UAAW,MAAK,cAAc;AAElC,QAAI,CAAC,cAAc;AAClB,WAAK,UAAU,iBAAiB,iBAAiB;AACjD;AAAA,IACD;AAEA,SAAK,UAAU,GAAG,YAAY,IAAI,iBAAiB;AAAA,EACpD;AAAA,EAEQ,oBAAoB,eAAwB;AACnD,UAAM,uBAAuB,eAAe,MAAM,yBAAyB;AAE3E,QAAI,CAAC,sBAAsB,QAAQ,WAAY,QAAO;AAEtD,UAAM,aAAa,qBAAqB,OAAO;AAE/C,SAAK,aAAa,OAAO,UAAU;AAEnC,QAAI,CAAC,WAAY,QAAO;AAExB,WAAO,KAAK,cAAc,SACvB,SAAS,UAAU,MACnB,SAAS,UAAU,cAAc,KAAK,SAAS;AAAA,EACnD;AAAA,EAEQ,sBAAsB,YAAqB;AAClD,QAAI,CAAC,WAAY,QAAO,CAAC,MAAM,IAAI;AAEnC,UAAM,CAAC,cAAc,SAAS,IAAI,WAChC,MAAM,GAAG,EACT,QAAQ,EACR,IAAI,CAAC,MAAM,EAAE,KAAK,CAAC;AAErB,WAAO,CAAC,cAAc,cAAc,UAAU,OAAO,SAAS;AAAA,EAC/D;AACD;","names":[]}