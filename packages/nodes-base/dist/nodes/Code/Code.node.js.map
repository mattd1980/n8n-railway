{"version":3,"sources":["../../../nodes/Code/Code.node.ts"],"sourcesContent":["import { TaskRunnersConfig } from '@n8n/config';\nimport { Container } from '@n8n/di';\nimport set from 'lodash/set';\nimport {\n\tNodeConnectionTypes,\n\ttype CodeExecutionMode,\n\ttype CodeNodeEditorLanguage,\n\ttype IExecuteFunctions,\n\ttype INodeExecutionData,\n\ttype INodeType,\n\ttype INodeTypeDescription,\n} from 'n8n-workflow';\n\nimport { javascriptCodeDescription } from './descriptions/JavascriptCodeDescription';\nimport { pythonCodeDescription } from './descriptions/PythonCodeDescription';\nimport { JavaScriptSandbox } from './JavaScriptSandbox';\nimport { JsTaskRunnerSandbox } from './JsTaskRunnerSandbox';\nimport { PythonSandbox } from './PythonSandbox';\nimport { getSandboxContext } from './Sandbox';\nimport { addPostExecutionWarning, standardizeOutput } from './utils';\n\nconst { CODE_ENABLE_STDOUT } = process.env;\n\nexport class Code implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'Code',\n\t\tname: 'code',\n\t\ticon: 'file:code.svg',\n\t\tgroup: ['transform'],\n\t\tversion: [1, 2],\n\t\tdefaultVersion: 2,\n\t\tdescription: 'Run custom JavaScript or Python code',\n\t\tdefaults: {\n\t\t\tname: 'Code',\n\t\t},\n\t\tinputs: [NodeConnectionTypes.Main],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tparameterPane: 'wide',\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Mode',\n\t\t\t\tname: 'mode',\n\t\t\t\ttype: 'options',\n\t\t\t\tnoDataExpression: true,\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Run Once for All Items',\n\t\t\t\t\t\tvalue: 'runOnceForAllItems',\n\t\t\t\t\t\tdescription: 'Run this code only once, no matter how many input items there are',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Run Once for Each Item',\n\t\t\t\t\t\tvalue: 'runOnceForEachItem',\n\t\t\t\t\t\tdescription: 'Run this code as many times as there are input items',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'runOnceForAllItems',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Language',\n\t\t\t\tname: 'language',\n\t\t\t\ttype: 'options',\n\t\t\t\tnoDataExpression: true,\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\t'@version': [2],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'JavaScript',\n\t\t\t\t\t\tvalue: 'javaScript',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Python (Beta)',\n\t\t\t\t\t\tvalue: 'python',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'javaScript',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Language',\n\t\t\t\tname: 'language',\n\t\t\t\ttype: 'hidden',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\t'@version': [1],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdefault: 'javaScript',\n\t\t\t},\n\n\t\t\t...javascriptCodeDescription,\n\t\t\t...pythonCodeDescription,\n\t\t],\n\t};\n\n\tasync execute(this: IExecuteFunctions) {\n\t\tconst runnersConfig = Container.get(TaskRunnersConfig);\n\n\t\tconst nodeMode = this.getNodeParameter('mode', 0) as CodeExecutionMode;\n\t\tconst workflowMode = this.getMode();\n\n\t\tconst node = this.getNode();\n\t\tconst language: CodeNodeEditorLanguage =\n\t\t\tnode.typeVersion === 2\n\t\t\t\t? (this.getNodeParameter('language', 0) as CodeNodeEditorLanguage)\n\t\t\t\t: 'javaScript';\n\t\tconst codeParameterName = language === 'python' ? 'pythonCode' : 'jsCode';\n\n\t\tif (runnersConfig.enabled && language === 'javaScript') {\n\t\t\tconst code = this.getNodeParameter(codeParameterName, 0) as string;\n\t\t\tconst sandbox = new JsTaskRunnerSandbox(code, nodeMode, workflowMode, this);\n\t\t\tconst numInputItems = this.getInputData().length;\n\n\t\t\treturn nodeMode === 'runOnceForAllItems'\n\t\t\t\t? [await sandbox.runCodeAllItems()]\n\t\t\t\t: [await sandbox.runCodeForEachItem(numInputItems)];\n\t\t}\n\n\t\tconst getSandbox = (index = 0) => {\n\t\t\tconst code = this.getNodeParameter(codeParameterName, index) as string;\n\n\t\t\tconst context = getSandboxContext.call(this, index);\n\t\t\tif (nodeMode === 'runOnceForAllItems') {\n\t\t\t\tcontext.items = context.$input.all();\n\t\t\t} else {\n\t\t\t\tcontext.item = context.$input.item;\n\t\t\t}\n\n\t\t\tconst Sandbox = language === 'python' ? PythonSandbox : JavaScriptSandbox;\n\t\t\tconst sandbox = new Sandbox(context, code, this.helpers);\n\t\t\tsandbox.on(\n\t\t\t\t'output',\n\t\t\t\tworkflowMode === 'manual'\n\t\t\t\t\t? this.sendMessageToUI.bind(this)\n\t\t\t\t\t: CODE_ENABLE_STDOUT === 'true'\n\t\t\t\t\t\t? (...args) =>\n\t\t\t\t\t\t\t\tconsole.log(`[Workflow \"${this.getWorkflow().id}\"][Node \"${node.name}\"]`, ...args)\n\t\t\t\t\t\t: () => {},\n\t\t\t);\n\t\t\treturn sandbox;\n\t\t};\n\n\t\tconst inputDataItems = this.getInputData();\n\n\t\t// ----------------------------------\n\t\t//        runOnceForAllItems\n\t\t// ----------------------------------\n\n\t\tif (nodeMode === 'runOnceForAllItems') {\n\t\t\tconst sandbox = getSandbox();\n\t\t\tlet items: INodeExecutionData[];\n\t\t\ttry {\n\t\t\t\titems = (await sandbox.runCodeAllItems()) as INodeExecutionData[];\n\t\t\t} catch (error) {\n\t\t\t\tif (!this.continueOnFail()) {\n\t\t\t\t\tset(error, 'node', node);\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\t\t\t\titems = [{ json: { error: error.message } }];\n\t\t\t}\n\n\t\t\tfor (const item of items) {\n\t\t\t\tstandardizeOutput(item.json);\n\t\t\t}\n\n\t\t\taddPostExecutionWarning(this, items, inputDataItems?.length);\n\t\t\treturn [items];\n\t\t}\n\n\t\t// ----------------------------------\n\t\t//        runOnceForEachItem\n\t\t// ----------------------------------\n\n\t\tconst returnData: INodeExecutionData[] = [];\n\n\t\tfor (let index = 0; index < inputDataItems.length; index++) {\n\t\t\tconst sandbox = getSandbox(index);\n\t\t\tlet result: INodeExecutionData | undefined;\n\t\t\ttry {\n\t\t\t\tresult = await sandbox.runCodeEachItem(index);\n\t\t\t} catch (error) {\n\t\t\t\tif (!this.continueOnFail()) {\n\t\t\t\t\tset(error, 'node', node);\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\t\t\t\treturnData.push({\n\t\t\t\t\tjson: { error: error.message },\n\t\t\t\t\tpairedItem: {\n\t\t\t\t\t\titem: index,\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (result) {\n\t\t\t\treturnData.push({\n\t\t\t\t\tjson: standardizeOutput(result.json),\n\t\t\t\t\tpairedItem: { item: index },\n\t\t\t\t\t...(result.binary && { binary: result.binary }),\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\taddPostExecutionWarning(this, returnData, inputDataItems?.length);\n\t\treturn [returnData];\n\t}\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAkC;AAClC,gBAA0B;AAC1B,iBAAgB;AAChB,0BAQO;AAEP,uCAA0C;AAC1C,mCAAsC;AACtC,+BAAkC;AAClC,iCAAoC;AACpC,2BAA8B;AAC9B,qBAAkC;AAClC,mBAA2D;AAE3D,MAAM,EAAE,mBAAmB,IAAI,QAAQ;AAEhC,MAAM,KAA0B;AAAA,EAAhC;AACN,uBAAoC;AAAA,MACnC,aAAa;AAAA,MACb,MAAM;AAAA,MACN,MAAM;AAAA,MACN,OAAO,CAAC,WAAW;AAAA,MACnB,SAAS,CAAC,GAAG,CAAC;AAAA,MACd,gBAAgB;AAAA,MAChB,aAAa;AAAA,MACb,UAAU;AAAA,QACT,MAAM;AAAA,MACP;AAAA,MACA,QAAQ,CAAC,wCAAoB,IAAI;AAAA,MACjC,SAAS,CAAC,wCAAoB,IAAI;AAAA,MAClC,eAAe;AAAA,MACf,YAAY;AAAA,QACX;AAAA,UACC,aAAa;AAAA,UACb,MAAM;AAAA,UACN,MAAM;AAAA,UACN,kBAAkB;AAAA,UAClB,SAAS;AAAA,YACR;AAAA,cACC,MAAM;AAAA,cACN,OAAO;AAAA,cACP,aAAa;AAAA,YACd;AAAA,YACA;AAAA,cACC,MAAM;AAAA,cACN,OAAO;AAAA,cACP,aAAa;AAAA,YACd;AAAA,UACD;AAAA,UACA,SAAS;AAAA,QACV;AAAA,QACA;AAAA,UACC,aAAa;AAAA,UACb,MAAM;AAAA,UACN,MAAM;AAAA,UACN,kBAAkB;AAAA,UAClB,gBAAgB;AAAA,YACf,MAAM;AAAA,cACL,YAAY,CAAC,CAAC;AAAA,YACf;AAAA,UACD;AAAA,UACA,SAAS;AAAA,YACR;AAAA,cACC,MAAM;AAAA,cACN,OAAO;AAAA,YACR;AAAA,YACA;AAAA,cACC,MAAM;AAAA,cACN,OAAO;AAAA,YACR;AAAA,UACD;AAAA,UACA,SAAS;AAAA,QACV;AAAA,QACA;AAAA,UACC,aAAa;AAAA,UACb,MAAM;AAAA,UACN,MAAM;AAAA,UACN,gBAAgB;AAAA,YACf,MAAM;AAAA,cACL,YAAY,CAAC,CAAC;AAAA,YACf;AAAA,UACD;AAAA,UACA,SAAS;AAAA,QACV;AAAA,QAEA,GAAG;AAAA,QACH,GAAG;AAAA,MACJ;AAAA,IACD;AAAA;AAAA,EAEA,MAAM,UAAiC;AACtC,UAAM,gBAAgB,oBAAU,IAAI,+BAAiB;AAErD,UAAM,WAAW,KAAK,iBAAiB,QAAQ,CAAC;AAChD,UAAM,eAAe,KAAK,QAAQ;AAElC,UAAM,OAAO,KAAK,QAAQ;AAC1B,UAAM,WACL,KAAK,gBAAgB,IACjB,KAAK,iBAAiB,YAAY,CAAC,IACpC;AACJ,UAAM,oBAAoB,aAAa,WAAW,eAAe;AAEjE,QAAI,cAAc,WAAW,aAAa,cAAc;AACvD,YAAM,OAAO,KAAK,iBAAiB,mBAAmB,CAAC;AACvD,YAAM,UAAU,IAAI,+CAAoB,MAAM,UAAU,cAAc,IAAI;AAC1E,YAAM,gBAAgB,KAAK,aAAa,EAAE;AAE1C,aAAO,aAAa,uBACjB,CAAC,MAAM,QAAQ,gBAAgB,CAAC,IAChC,CAAC,MAAM,QAAQ,mBAAmB,aAAa,CAAC;AAAA,IACpD;AAEA,UAAM,aAAa,CAAC,QAAQ,MAAM;AACjC,YAAM,OAAO,KAAK,iBAAiB,mBAAmB,KAAK;AAE3D,YAAM,UAAU,iCAAkB,KAAK,MAAM,KAAK;AAClD,UAAI,aAAa,sBAAsB;AACtC,gBAAQ,QAAQ,QAAQ,OAAO,IAAI;AAAA,MACpC,OAAO;AACN,gBAAQ,OAAO,QAAQ,OAAO;AAAA,MAC/B;AAEA,YAAM,UAAU,aAAa,WAAW,qCAAgB;AACxD,YAAM,UAAU,IAAI,QAAQ,SAAS,MAAM,KAAK,OAAO;AACvD,cAAQ;AAAA,QACP;AAAA,QACA,iBAAiB,WACd,KAAK,gBAAgB,KAAK,IAAI,IAC9B,uBAAuB,SACtB,IAAI,SACJ,QAAQ,IAAI,cAAc,KAAK,YAAY,EAAE,EAAE,YAAY,KAAK,IAAI,MAAM,GAAG,IAAI,IACjF,MAAM;AAAA,QAAC;AAAA,MACZ;AACA,aAAO;AAAA,IACR;AAEA,UAAM,iBAAiB,KAAK,aAAa;AAMzC,QAAI,aAAa,sBAAsB;AACtC,YAAM,UAAU,WAAW;AAC3B,UAAI;AACJ,UAAI;AACH,gBAAS,MAAM,QAAQ,gBAAgB;AAAA,MACxC,SAAS,OAAO;AACf,YAAI,CAAC,KAAK,eAAe,GAAG;AAC3B,yBAAAA,SAAI,OAAO,QAAQ,IAAI;AACvB,gBAAM;AAAA,QACP;AACA,gBAAQ,CAAC,EAAE,MAAM,EAAE,OAAO,MAAM,QAAQ,EAAE,CAAC;AAAA,MAC5C;AAEA,iBAAW,QAAQ,OAAO;AACzB,4CAAkB,KAAK,IAAI;AAAA,MAC5B;AAEA,gDAAwB,MAAM,OAAO,gBAAgB,MAAM;AAC3D,aAAO,CAAC,KAAK;AAAA,IACd;AAMA,UAAM,aAAmC,CAAC;AAE1C,aAAS,QAAQ,GAAG,QAAQ,eAAe,QAAQ,SAAS;AAC3D,YAAM,UAAU,WAAW,KAAK;AAChC,UAAI;AACJ,UAAI;AACH,iBAAS,MAAM,QAAQ,gBAAgB,KAAK;AAAA,MAC7C,SAAS,OAAO;AACf,YAAI,CAAC,KAAK,eAAe,GAAG;AAC3B,yBAAAA,SAAI,OAAO,QAAQ,IAAI;AACvB,gBAAM;AAAA,QACP;AACA,mBAAW,KAAK;AAAA,UACf,MAAM,EAAE,OAAO,MAAM,QAAQ;AAAA,UAC7B,YAAY;AAAA,YACX,MAAM;AAAA,UACP;AAAA,QACD,CAAC;AAAA,MACF;AAEA,UAAI,QAAQ;AACX,mBAAW,KAAK;AAAA,UACf,UAAM,gCAAkB,OAAO,IAAI;AAAA,UACnC,YAAY,EAAE,MAAM,MAAM;AAAA,UAC1B,GAAI,OAAO,UAAU,EAAE,QAAQ,OAAO,OAAO;AAAA,QAC9C,CAAC;AAAA,MACF;AAAA,IACD;AAEA,8CAAwB,MAAM,YAAY,gBAAgB,MAAM;AAChE,WAAO,CAAC,UAAU;AAAA,EACnB;AACD;","names":["set"]}