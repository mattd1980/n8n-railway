{"version":3,"sources":["../../../nodes/Code/PythonSandbox.ts"],"sourcesContent":["import { ApplicationError, type IExecuteFunctions, type INodeExecutionData } from 'n8n-workflow';\nimport type { PyDict } from 'pyodide/ffi';\n\nimport { LoadPyodide } from './Pyodide';\nimport type { SandboxContext } from './Sandbox';\nimport { Sandbox } from './Sandbox';\n\ntype PythonSandboxContext = {\n\t[K in keyof SandboxContext as K extends `$${infer I}` ? `_${I}` : K]: SandboxContext[K];\n};\n\ntype PyodideError = Error & { type: string };\n\nconst envAccessBlocked = process.env.N8N_BLOCK_ENV_ACCESS_IN_NODE === 'true';\n\nexport class PythonSandbox extends Sandbox {\n\tprivate readonly context: PythonSandboxContext;\n\n\tconstructor(\n\t\tcontext: SandboxContext,\n\t\tprivate pythonCode: string,\n\t\thelpers: IExecuteFunctions['helpers'],\n\t) {\n\t\tsuper(\n\t\t\t{\n\t\t\t\tobject: {\n\t\t\t\t\tsingular: 'dictionary',\n\t\t\t\t\tplural: 'dictionaries',\n\t\t\t\t},\n\t\t\t},\n\t\t\thelpers,\n\t\t);\n\t\t// Since python doesn't allow variable names starting with `$`,\n\t\t// rename them to all to start with `_` instead\n\t\tthis.context = Object.keys(context).reduce((acc, key) => {\n\t\t\tacc[key.startsWith('$') ? key.replace(/^\\$/, '_') : key] = context[key];\n\t\t\treturn acc;\n\t\t}, {} as PythonSandboxContext);\n\t}\n\n\tasync runCode<T = unknown>(): Promise<T> {\n\t\treturn await this.runCodeInPython<T>();\n\t}\n\n\tasync runCodeAllItems() {\n\t\tconst executionResult = await this.runCodeInPython<INodeExecutionData[]>();\n\t\treturn this.validateRunCodeAllItems(executionResult);\n\t}\n\n\tasync runCodeEachItem(itemIndex: number) {\n\t\tconst executionResult = await this.runCodeInPython<INodeExecutionData>();\n\t\treturn this.validateRunCodeEachItem(executionResult, itemIndex);\n\t}\n\n\tprivate async runCodeInPython<T>() {\n\t\tconst packageCacheDir = this.helpers.getStoragePath();\n\t\tconst pyodide = await LoadPyodide(packageCacheDir);\n\n\t\tlet executionResult;\n\t\ttry {\n\t\t\tawait pyodide.runPythonAsync('jsproxy_typedict[0] = type(Object.new().as_object_map())');\n\n\t\t\tawait pyodide.loadPackagesFromImports(this.pythonCode);\n\n\t\t\tconst dict = pyodide.globals.get('dict');\n\t\t\tconst globalsDict: PyDict = dict();\n\t\t\tfor (const key of Object.keys(this.context)) {\n\t\t\t\tif ((key === '_env' && envAccessBlocked) || key === '_node') continue;\n\t\t\t\tconst value = this.context[key];\n\t\t\t\tglobalsDict.set(key, value);\n\t\t\t}\n\n\t\t\tpyodide.setStdout({ batched: (str) => this.emit('output', str) });\n\n\t\t\tconst runCode = `\nasync def __main():\n${this.pythonCode\n\t.split('\\n')\n\t.map((line) => '  ' + line)\n\t.join('\\n')}\nawait __main()`;\n\t\t\texecutionResult = await pyodide.runPythonAsync(runCode, { globals: globalsDict });\n\t\t\tglobalsDict.destroy();\n\t\t} catch (error) {\n\t\t\tthrow this.getPrettyError(error as PyodideError);\n\t\t}\n\n\t\tif (executionResult?.toJs) {\n\t\t\treturn executionResult.toJs({\n\t\t\t\tdict_converter: Object.fromEntries,\n\t\t\t\tcreate_proxies: false,\n\t\t\t}) as T;\n\t\t}\n\n\t\treturn executionResult as T;\n\t}\n\n\tprivate getPrettyError(error: PyodideError): Error {\n\t\tconst errorTypeIndex = error.message.indexOf(error.type);\n\t\tif (errorTypeIndex !== -1) {\n\t\t\treturn new ApplicationError(error.message.slice(errorTypeIndex), {\n\t\t\t\tlevel: ['TypeError', 'AttributeError'].includes(error.type) ? 'warning' : 'error',\n\t\t\t});\n\t\t}\n\n\t\treturn error;\n\t}\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAkF;AAGlF,qBAA4B;AAE5B,qBAAwB;AAQxB,MAAM,mBAAmB,QAAQ,IAAI,iCAAiC;AAE/D,MAAM,sBAAsB,uBAAQ;AAAA,EAG1C,YACC,SACQ,YACR,SACC;AACD;AAAA,MACC;AAAA,QACC,QAAQ;AAAA,UACP,UAAU;AAAA,UACV,QAAQ;AAAA,QACT;AAAA,MACD;AAAA,MACA;AAAA,IACD;AAXQ;AAcR,SAAK,UAAU,OAAO,KAAK,OAAO,EAAE,OAAO,CAAC,KAAK,QAAQ;AACxD,UAAI,IAAI,WAAW,GAAG,IAAI,IAAI,QAAQ,OAAO,GAAG,IAAI,GAAG,IAAI,QAAQ,GAAG;AACtE,aAAO;AAAA,IACR,GAAG,CAAC,CAAyB;AAAA,EAC9B;AAAA,EAEA,MAAM,UAAmC;AACxC,WAAO,MAAM,KAAK,gBAAmB;AAAA,EACtC;AAAA,EAEA,MAAM,kBAAkB;AACvB,UAAM,kBAAkB,MAAM,KAAK,gBAAsC;AACzE,WAAO,KAAK,wBAAwB,eAAe;AAAA,EACpD;AAAA,EAEA,MAAM,gBAAgB,WAAmB;AACxC,UAAM,kBAAkB,MAAM,KAAK,gBAAoC;AACvE,WAAO,KAAK,wBAAwB,iBAAiB,SAAS;AAAA,EAC/D;AAAA,EAEA,MAAc,kBAAqB;AAClC,UAAM,kBAAkB,KAAK,QAAQ,eAAe;AACpD,UAAM,UAAU,UAAM,4BAAY,eAAe;AAEjD,QAAI;AACJ,QAAI;AACH,YAAM,QAAQ,eAAe,0DAA0D;AAEvF,YAAM,QAAQ,wBAAwB,KAAK,UAAU;AAErD,YAAM,OAAO,QAAQ,QAAQ,IAAI,MAAM;AACvC,YAAM,cAAsB,KAAK;AACjC,iBAAW,OAAO,OAAO,KAAK,KAAK,OAAO,GAAG;AAC5C,YAAK,QAAQ,UAAU,oBAAqB,QAAQ,QAAS;AAC7D,cAAM,QAAQ,KAAK,QAAQ,GAAG;AAC9B,oBAAY,IAAI,KAAK,KAAK;AAAA,MAC3B;AAEA,cAAQ,UAAU,EAAE,SAAS,CAAC,QAAQ,KAAK,KAAK,UAAU,GAAG,EAAE,CAAC;AAEhE,YAAM,UAAU;AAAA;AAAA,EAEjB,KAAK,WACL,MAAM,IAAI,EACV,IAAI,CAAC,SAAS,OAAO,IAAI,EACzB,KAAK,IAAI,CAAC;AAAA;AAET,wBAAkB,MAAM,QAAQ,eAAe,SAAS,EAAE,SAAS,YAAY,CAAC;AAChF,kBAAY,QAAQ;AAAA,IACrB,SAAS,OAAO;AACf,YAAM,KAAK,eAAe,KAAqB;AAAA,IAChD;AAEA,QAAI,iBAAiB,MAAM;AAC1B,aAAO,gBAAgB,KAAK;AAAA,QAC3B,gBAAgB,OAAO;AAAA,QACvB,gBAAgB;AAAA,MACjB,CAAC;AAAA,IACF;AAEA,WAAO;AAAA,EACR;AAAA,EAEQ,eAAe,OAA4B;AAClD,UAAM,iBAAiB,MAAM,QAAQ,QAAQ,MAAM,IAAI;AACvD,QAAI,mBAAmB,IAAI;AAC1B,aAAO,IAAI,qCAAiB,MAAM,QAAQ,MAAM,cAAc,GAAG;AAAA,QAChE,OAAO,CAAC,aAAa,gBAAgB,EAAE,SAAS,MAAM,IAAI,IAAI,YAAY;AAAA,MAC3E,CAAC;AAAA,IACF;AAEA,WAAO;AAAA,EACR;AACD;","names":[]}