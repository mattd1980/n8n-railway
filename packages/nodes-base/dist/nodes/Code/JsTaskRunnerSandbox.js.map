{"version":3,"sources":["../../../nodes/Code/JsTaskRunnerSandbox.ts"],"sourcesContent":["import {\n\tApplicationError,\n\ttype CodeExecutionMode,\n\ttype IExecuteFunctions,\n\ttype INodeExecutionData,\n\ttype WorkflowExecuteMode,\n} from 'n8n-workflow';\n\nimport { isWrappableError, WrappedExecutionError } from './errors/WrappedExecutionError';\nimport { validateNoDisallowedMethodsInRunForEach } from './JsCodeValidator';\n\n/**\n * JS Code execution sandbox that executes the JS code using task runner.\n */\nexport class JsTaskRunnerSandbox {\n\tconstructor(\n\t\tprivate readonly jsCode: string,\n\t\tprivate readonly nodeMode: CodeExecutionMode,\n\t\tprivate readonly workflowMode: WorkflowExecuteMode,\n\t\tprivate readonly executeFunctions: IExecuteFunctions,\n\t\tprivate readonly chunkSize = 1000,\n\t) {}\n\n\tasync runCodeAllItems(): Promise<INodeExecutionData[]> {\n\t\tconst itemIndex = 0;\n\n\t\tconst executionResult = await this.executeFunctions.startJob<INodeExecutionData[]>(\n\t\t\t'javascript',\n\t\t\t{\n\t\t\t\tcode: this.jsCode,\n\t\t\t\tnodeMode: this.nodeMode,\n\t\t\t\tworkflowMode: this.workflowMode,\n\t\t\t\tcontinueOnFail: this.executeFunctions.continueOnFail(),\n\t\t\t},\n\t\t\titemIndex,\n\t\t);\n\n\t\treturn executionResult.ok\n\t\t\t? executionResult.result\n\t\t\t: this.throwExecutionError(executionResult.error);\n\t}\n\n\tasync runCodeForEachItem(numInputItems: number): Promise<INodeExecutionData[]> {\n\t\tvalidateNoDisallowedMethodsInRunForEach(this.jsCode, 0);\n\n\t\tconst itemIndex = 0;\n\t\tconst chunks = this.chunkInputItems(numInputItems);\n\t\tlet executionResults: INodeExecutionData[] = [];\n\n\t\tfor (const chunk of chunks) {\n\t\t\tconst executionResult = await this.executeFunctions.startJob<INodeExecutionData[]>(\n\t\t\t\t'javascript',\n\t\t\t\t{\n\t\t\t\t\tcode: this.jsCode,\n\t\t\t\t\tnodeMode: this.nodeMode,\n\t\t\t\t\tworkflowMode: this.workflowMode,\n\t\t\t\t\tcontinueOnFail: this.executeFunctions.continueOnFail(),\n\t\t\t\t\tchunk: {\n\t\t\t\t\t\tstartIndex: chunk.startIdx,\n\t\t\t\t\t\tcount: chunk.count,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\titemIndex,\n\t\t\t);\n\n\t\t\tif (!executionResult.ok) {\n\t\t\t\treturn this.throwExecutionError(executionResult.error);\n\t\t\t}\n\n\t\t\texecutionResults = executionResults.concat(executionResult.result);\n\t\t}\n\n\t\treturn executionResults;\n\t}\n\n\tprivate throwExecutionError(error: unknown): never {\n\t\tif (error instanceof Error) {\n\t\t\tthrow error;\n\t\t} else if (isWrappableError(error)) {\n\t\t\t// The error coming from task runner is not an instance of error,\n\t\t\t// so we need to wrap it in an error instance.\n\t\t\tthrow new WrappedExecutionError(error);\n\t\t}\n\n\t\tthrow new ApplicationError(`Unknown error: ${JSON.stringify(error)}`);\n\t}\n\n\t/** Chunks the input items into chunks of 1000 items each */\n\tprivate chunkInputItems(numInputItems: number) {\n\t\tconst numChunks = Math.ceil(numInputItems / this.chunkSize);\n\t\tconst chunks = [];\n\n\t\tfor (let i = 0; i < numChunks; i++) {\n\t\t\tconst startIdx = i * this.chunkSize;\n\t\t\tconst isLastChunk = i === numChunks - 1;\n\t\t\tconst count = isLastChunk ? numInputItems - startIdx : this.chunkSize;\n\t\t\tchunks.push({\n\t\t\t\tstartIdx,\n\t\t\t\tcount,\n\t\t\t});\n\t\t}\n\n\t\treturn chunks;\n\t}\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAMO;AAEP,mCAAwD;AACxD,6BAAwD;AAKjD,MAAM,oBAAoB;AAAA,EAChC,YACkB,QACA,UACA,cACA,kBACA,YAAY,KAC5B;AALgB;AACA;AACA;AACA;AACA;AAAA,EACf;AAAA,EAEH,MAAM,kBAAiD;AACtD,UAAM,YAAY;AAElB,UAAM,kBAAkB,MAAM,KAAK,iBAAiB;AAAA,MACnD;AAAA,MACA;AAAA,QACC,MAAM,KAAK;AAAA,QACX,UAAU,KAAK;AAAA,QACf,cAAc,KAAK;AAAA,QACnB,gBAAgB,KAAK,iBAAiB,eAAe;AAAA,MACtD;AAAA,MACA;AAAA,IACD;AAEA,WAAO,gBAAgB,KACpB,gBAAgB,SAChB,KAAK,oBAAoB,gBAAgB,KAAK;AAAA,EAClD;AAAA,EAEA,MAAM,mBAAmB,eAAsD;AAC9E,wEAAwC,KAAK,QAAQ,CAAC;AAEtD,UAAM,YAAY;AAClB,UAAM,SAAS,KAAK,gBAAgB,aAAa;AACjD,QAAI,mBAAyC,CAAC;AAE9C,eAAW,SAAS,QAAQ;AAC3B,YAAM,kBAAkB,MAAM,KAAK,iBAAiB;AAAA,QACnD;AAAA,QACA;AAAA,UACC,MAAM,KAAK;AAAA,UACX,UAAU,KAAK;AAAA,UACf,cAAc,KAAK;AAAA,UACnB,gBAAgB,KAAK,iBAAiB,eAAe;AAAA,UACrD,OAAO;AAAA,YACN,YAAY,MAAM;AAAA,YAClB,OAAO,MAAM;AAAA,UACd;AAAA,QACD;AAAA,QACA;AAAA,MACD;AAEA,UAAI,CAAC,gBAAgB,IAAI;AACxB,eAAO,KAAK,oBAAoB,gBAAgB,KAAK;AAAA,MACtD;AAEA,yBAAmB,iBAAiB,OAAO,gBAAgB,MAAM;AAAA,IAClE;AAEA,WAAO;AAAA,EACR;AAAA,EAEQ,oBAAoB,OAAuB;AAClD,QAAI,iBAAiB,OAAO;AAC3B,YAAM;AAAA,IACP,eAAW,+CAAiB,KAAK,GAAG;AAGnC,YAAM,IAAI,mDAAsB,KAAK;AAAA,IACtC;AAEA,UAAM,IAAI,qCAAiB,kBAAkB,KAAK,UAAU,KAAK,CAAC,EAAE;AAAA,EACrE;AAAA;AAAA,EAGQ,gBAAgB,eAAuB;AAC9C,UAAM,YAAY,KAAK,KAAK,gBAAgB,KAAK,SAAS;AAC1D,UAAM,SAAS,CAAC;AAEhB,aAAS,IAAI,GAAG,IAAI,WAAW,KAAK;AACnC,YAAM,WAAW,IAAI,KAAK;AAC1B,YAAM,cAAc,MAAM,YAAY;AACtC,YAAM,QAAQ,cAAc,gBAAgB,WAAW,KAAK;AAC5D,aAAO,KAAK;AAAA,QACX;AAAA,QACA;AAAA,MACD,CAAC;AAAA,IACF;AAEA,WAAO;AAAA,EACR;AACD;","names":[]}