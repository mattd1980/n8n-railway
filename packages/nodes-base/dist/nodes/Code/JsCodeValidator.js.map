{"version":3,"sources":["../../../nodes/Code/JsCodeValidator.ts"],"sourcesContent":["import { ValidationError } from './ValidationError';\n\n/**\n * Validates that no disallowed methods are used in the\n * runCodeForEachItem JS code. Throws `ValidationError` if\n * a disallowed method is found.\n */\nexport function validateNoDisallowedMethodsInRunForEach(code: string, itemIndex: number) {\n\tconst match = code.match(/\\$input\\.(?<disallowedMethod>first|last|all|itemMatching)/);\n\n\tif (match?.groups?.disallowedMethod) {\n\t\tconst { disallowedMethod } = match.groups;\n\n\t\tconst lineNumber =\n\t\t\tcode.split('\\n').findIndex((line) => {\n\t\t\t\tline = line.trimStart();\n\t\t\t\treturn (\n\t\t\t\t\tline.includes(disallowedMethod) &&\n\t\t\t\t\t!line.startsWith('//') &&\n\t\t\t\t\t!line.startsWith('/*') &&\n\t\t\t\t\t!line.startsWith('*')\n\t\t\t\t);\n\t\t\t}) + 1;\n\n\t\tconst disallowedMethodFound = lineNumber !== 0;\n\n\t\tif (disallowedMethodFound) {\n\t\t\tthrow new ValidationError({\n\t\t\t\tmessage: `Can't use .${disallowedMethod}() here`,\n\t\t\t\tdescription: \"This is only available in 'Run Once for All Items' mode\",\n\t\t\t\titemIndex,\n\t\t\t\tlineNumber,\n\t\t\t});\n\t\t}\n\t}\n}\n\n/**\n * Checks if the error message indicates that `items` is not defined and\n * modifies the error message to suggest using `$input.all()`.\n */\nexport function mapItemsNotDefinedErrorIfNeededForRunForAll(code: string, error: Error) {\n\t// anticipate user expecting `items` to pre-exist as in Function Item node\n\tif (error.message === 'items is not defined' && !/(let|const|var) +items +=/.test(code)) {\n\t\tconst quoted = error.message.replace('items', '`items`');\n\t\terror.message = quoted + '. Did you mean `$input.all()`?';\n\t}\n}\n\n/**\n * Maps the \"item is not defined\" error message to provide a more helpful suggestion\n * for users who may expect `items` to pre-exist\n */\nexport function mapItemNotDefinedErrorIfNeededForRunForEach(code: string, error: Error) {\n\t// anticipate user expecting `items` to pre-exist as in Function Item node\n\tif (error.message === 'item is not defined' && !/(let|const|var) +item +=/.test(code)) {\n\t\tconst quoted = error.message.replace('item', '`item`');\n\t\terror.message = quoted + '. Did you mean `$input.item.json`?';\n\t}\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAAgC;AAOzB,SAAS,wCAAwC,MAAc,WAAmB;AACxF,QAAM,QAAQ,KAAK,MAAM,2DAA2D;AAEpF,MAAI,OAAO,QAAQ,kBAAkB;AACpC,UAAM,EAAE,iBAAiB,IAAI,MAAM;AAEnC,UAAM,aACL,KAAK,MAAM,IAAI,EAAE,UAAU,CAAC,SAAS;AACpC,aAAO,KAAK,UAAU;AACtB,aACC,KAAK,SAAS,gBAAgB,KAC9B,CAAC,KAAK,WAAW,IAAI,KACrB,CAAC,KAAK,WAAW,IAAI,KACrB,CAAC,KAAK,WAAW,GAAG;AAAA,IAEtB,CAAC,IAAI;AAEN,UAAM,wBAAwB,eAAe;AAE7C,QAAI,uBAAuB;AAC1B,YAAM,IAAI,uCAAgB;AAAA,QACzB,SAAS,cAAc,gBAAgB;AAAA,QACvC,aAAa;AAAA,QACb;AAAA,QACA;AAAA,MACD,CAAC;AAAA,IACF;AAAA,EACD;AACD;AAMO,SAAS,4CAA4C,MAAc,OAAc;AAEvF,MAAI,MAAM,YAAY,0BAA0B,CAAC,4BAA4B,KAAK,IAAI,GAAG;AACxF,UAAM,SAAS,MAAM,QAAQ,QAAQ,SAAS,SAAS;AACvD,UAAM,UAAU,SAAS;AAAA,EAC1B;AACD;AAMO,SAAS,4CAA4C,MAAc,OAAc;AAEvF,MAAI,MAAM,YAAY,yBAAyB,CAAC,2BAA2B,KAAK,IAAI,GAAG;AACtF,UAAM,SAAS,MAAM,QAAQ,QAAQ,QAAQ,QAAQ;AACrD,UAAM,UAAU,SAAS;AAAA,EAC1B;AACD;","names":[]}