{"version":3,"sources":["../../../../nodes/ItemLists/V1/summarize.operation.ts"],"sourcesContent":["import get from 'lodash/get';\nimport type {\n\tGenericValue,\n\tIDataObject,\n\tIExecuteFunctions,\n\tINodeExecutionData,\n\tINodeProperties,\n} from 'n8n-workflow';\nimport { NodeOperationError } from 'n8n-workflow';\n\ntype AggregationType =\n\t| 'append'\n\t| 'average'\n\t| 'concatenate'\n\t| 'count'\n\t| 'countUnique'\n\t| 'max'\n\t| 'min'\n\t| 'sum';\n\ntype Aggregation = {\n\taggregation: AggregationType;\n\tfield: string;\n\tincludeEmpty?: boolean;\n\tseparateBy?: string;\n\tcustomSeparator?: string;\n};\n\ntype Aggregations = Aggregation[];\n\nconst AggregationDisplayNames = {\n\tappend: 'appended_',\n\taverage: 'average_',\n\tconcatenate: 'concatenated_',\n\tcount: 'count_',\n\tcountUnique: 'unique_count_',\n\tmax: 'max_',\n\tmin: 'min_',\n\tsum: 'sum_',\n};\n\nconst NUMERICAL_AGGREGATIONS = ['average', 'max', 'min', 'sum'];\n\ntype SummarizeOptions = {\n\tdisableDotNotation?: boolean;\n\toutputFormat?: 'separateItems' | 'singleItem';\n\tskipEmptySplitFields?: boolean;\n};\n\ntype ValueGetterFn = (\n\titem: IDataObject,\n\tfield: string,\n) => IDataObject | IDataObject[] | GenericValue | GenericValue[];\n\nexport const description: INodeProperties[] = [\n\t{\n\t\tdisplayName: 'Fields to Summarize',\n\t\tname: 'fieldsToSummarize',\n\t\ttype: 'fixedCollection',\n\t\tplaceholder: 'Add Field',\n\t\tdefault: { values: [{ aggregation: 'count', field: '' }] },\n\t\ttypeOptions: {\n\t\t\tmultipleValues: true,\n\t\t},\n\t\toptions: [\n\t\t\t{\n\t\t\t\tdisplayName: '',\n\t\t\t\tname: 'values',\n\t\t\t\tvalues: [\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Aggregation',\n\t\t\t\t\t\tname: 'aggregation',\n\t\t\t\t\t\ttype: 'options',\n\t\t\t\t\t\toptions: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: 'Append',\n\t\t\t\t\t\t\t\tvalue: 'append',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: 'Average',\n\t\t\t\t\t\t\t\tvalue: 'average',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: 'Concatenate',\n\t\t\t\t\t\t\t\tvalue: 'concatenate',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: 'Count',\n\t\t\t\t\t\t\t\tvalue: 'count',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: 'Count Unique',\n\t\t\t\t\t\t\t\tvalue: 'countUnique',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: 'Max',\n\t\t\t\t\t\t\t\tvalue: 'max',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: 'Min',\n\t\t\t\t\t\t\t\tvalue: 'min',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: 'Sum',\n\t\t\t\t\t\t\t\tvalue: 'sum',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t\tdefault: 'count',\n\t\t\t\t\t\tdescription: 'How to combine the values of the field you want to summarize',\n\t\t\t\t\t},\n\t\t\t\t\t//field repeated to have different descriptions for different aggregations --------------------------------\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Field',\n\t\t\t\t\t\tname: 'field',\n\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\tdescription: 'The name of an input field that you want to summarize',\n\t\t\t\t\t\tplaceholder: 'e.g. cost',\n\t\t\t\t\t\thint: ' Enter the field name as text',\n\t\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\t\thide: {\n\t\t\t\t\t\t\t\taggregation: [...NUMERICAL_AGGREGATIONS, 'countUnique', 'count'],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\trequiresDataPath: 'single',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Field',\n\t\t\t\t\t\tname: 'field',\n\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t'The name of an input field that you want to summarize. The field should contain numerical values; null, undefined, empty strings would be ignored.',\n\t\t\t\t\t\tplaceholder: 'e.g. cost',\n\t\t\t\t\t\thint: ' Enter the field name as text',\n\t\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\t\taggregation: NUMERICAL_AGGREGATIONS,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\trequiresDataPath: 'single',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Field',\n\t\t\t\t\t\tname: 'field',\n\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t'The name of an input field that you want to summarize; null, undefined, empty strings would be ignored',\n\t\t\t\t\t\tplaceholder: 'e.g. cost',\n\t\t\t\t\t\thint: ' Enter the field name as text',\n\t\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\t\taggregation: ['countUnique', 'count'],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\trequiresDataPath: 'single',\n\t\t\t\t\t},\n\t\t\t\t\t// ----------------------------------------------------------------------------------------------------------\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Include Empty Values',\n\t\t\t\t\t\tname: 'includeEmpty',\n\t\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\t\tdefault: false,\n\t\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\t\taggregation: ['append', 'concatenate'],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Separator',\n\t\t\t\t\t\tname: 'separateBy',\n\t\t\t\t\t\ttype: 'options',\n\t\t\t\t\t\tdefault: ',',\n\t\t\t\t\t\t// eslint-disable-next-line n8n-nodes-base/node-param-options-type-unsorted-items\n\t\t\t\t\t\toptions: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: 'Comma',\n\t\t\t\t\t\t\t\tvalue: ',',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: 'Comma and Space',\n\t\t\t\t\t\t\t\tvalue: ', ',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: 'New Line',\n\t\t\t\t\t\t\t\tvalue: '\\n',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: 'None',\n\t\t\t\t\t\t\t\tvalue: '',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: 'Space',\n\t\t\t\t\t\t\t\tvalue: ' ',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: 'Other',\n\t\t\t\t\t\t\t\tvalue: 'other',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t\thint: 'What to insert between values',\n\t\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\t\taggregation: ['concatenate'],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Custom Separator',\n\t\t\t\t\t\tname: 'customSeparator',\n\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\t\taggregation: ['concatenate'],\n\t\t\t\t\t\t\t\tseparateBy: ['other'],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t],\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tresource: ['itemList'],\n\t\t\t\toperation: ['summarize'],\n\t\t\t},\n\t\t},\n\t},\n\t// fieldsToSplitBy repeated to have different displayName for singleItem and separateItems -----------------------------\n\t{\n\t\tdisplayName: 'Fields to Split By',\n\t\tname: 'fieldsToSplitBy',\n\t\ttype: 'string',\n\t\tplaceholder: 'e.g. country, city',\n\t\tdefault: '',\n\t\tdescription: 'The name of the input fields that you want to split the summary by',\n\t\thint: 'Enter the name of the fields as text (separated by commas)',\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tresource: ['itemList'],\n\t\t\t\toperation: ['summarize'],\n\t\t\t},\n\t\t\thide: {\n\t\t\t\t'/options.outputFormat': ['singleItem'],\n\t\t\t},\n\t\t},\n\t\trequiresDataPath: 'multiple',\n\t},\n\t{\n\t\tdisplayName: 'Fields to Group By',\n\t\tname: 'fieldsToSplitBy',\n\t\ttype: 'string',\n\t\tplaceholder: 'e.g. country, city',\n\t\tdefault: '',\n\t\tdescription: 'The name of the input fields that you want to split the summary by',\n\t\thint: 'Enter the name of the fields as text (separated by commas)',\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tresource: ['itemList'],\n\t\t\t\toperation: ['summarize'],\n\t\t\t\t'/options.outputFormat': ['singleItem'],\n\t\t\t},\n\t\t},\n\t\trequiresDataPath: 'multiple',\n\t},\n\t// ----------------------------------------------------------------------------------------------------------\n\t{\n\t\tdisplayName: 'Options',\n\t\tname: 'options',\n\t\ttype: 'collection',\n\t\tplaceholder: 'Add option',\n\t\tdefault: {},\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tresource: ['itemList'],\n\t\t\t\toperation: ['summarize'],\n\t\t\t},\n\t\t},\n\t\toptions: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Disable Dot Notation',\n\t\t\t\tname: 'disableDotNotation',\n\t\t\t\ttype: 'boolean',\n\t\t\t\tdefault: false,\n\t\t\t\tdescription:\n\t\t\t\t\t'Whether to disallow referencing child fields using `parent.child` in the field name',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Output Format',\n\t\t\t\tname: 'outputFormat',\n\t\t\t\ttype: 'options',\n\t\t\t\tdefault: 'separateItems',\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Each Split in a Separate Item',\n\t\t\t\t\t\tvalue: 'separateItems',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'All Splits in a Single Item',\n\t\t\t\t\t\tvalue: 'singleItem',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\t// eslint-disable-next-line n8n-nodes-base/node-param-display-name-miscased\n\t\t\t\tdisplayName: 'Ignore items without valid fields to group by',\n\t\t\t\tname: 'skipEmptySplitFields',\n\t\t\t\ttype: 'boolean',\n\t\t\t\tdefault: false,\n\t\t\t},\n\t\t],\n\t},\n];\n\nfunction isEmpty<T>(value: T) {\n\treturn value === undefined || value === null || value === '';\n}\n\nconst fieldValueGetter = (disableDotNotation?: boolean) => {\n\tif (disableDotNotation) {\n\t\treturn (item: IDataObject, field: string) => item[field];\n\t} else {\n\t\treturn (item: IDataObject, field: string) => get(item, field);\n\t}\n};\n\nfunction checkIfFieldExists(\n\tthis: IExecuteFunctions,\n\titems: IDataObject[],\n\taggregations: Aggregations,\n\tgetValue: ValueGetterFn,\n) {\n\tfor (const aggregation of aggregations) {\n\t\tif (aggregation.field === '') {\n\t\t\tcontinue;\n\t\t}\n\t\tconst exist = items.some((item) => getValue(item, aggregation.field) !== undefined);\n\t\tif (!exist) {\n\t\t\tthrow new NodeOperationError(\n\t\t\t\tthis.getNode(),\n\t\t\t\t`The field '${aggregation.field}' does not exist in any items`,\n\t\t\t);\n\t\t}\n\t}\n}\n\nfunction aggregate(items: IDataObject[], entry: Aggregation, getValue: ValueGetterFn) {\n\tconst { aggregation, field } = entry;\n\tlet data = [...items];\n\n\tif (NUMERICAL_AGGREGATIONS.includes(aggregation)) {\n\t\tdata = data.filter(\n\t\t\t(item) => typeof getValue(item, field) === 'number' && !isEmpty(getValue(item, field)),\n\t\t);\n\t}\n\n\tswitch (aggregation) {\n\t\t//combine operations\n\t\tcase 'append':\n\t\t\tif (!entry.includeEmpty) {\n\t\t\t\tdata = data.filter((item) => !isEmpty(getValue(item, field)));\n\t\t\t}\n\t\t\treturn data.map((item) => getValue(item, field));\n\t\tcase 'concatenate':\n\t\t\tconst separateBy = entry.separateBy === 'other' ? entry.customSeparator : entry.separateBy;\n\t\t\tif (!entry.includeEmpty) {\n\t\t\t\tdata = data.filter((item) => !isEmpty(getValue(item, field)));\n\t\t\t}\n\t\t\treturn data\n\t\t\t\t.map((item) => {\n\t\t\t\t\tlet value = getValue(item, field);\n\t\t\t\t\tif (typeof value === 'object') {\n\t\t\t\t\t\tvalue = JSON.stringify(value);\n\t\t\t\t\t}\n\t\t\t\t\tif (typeof value === 'undefined') {\n\t\t\t\t\t\tvalue = 'undefined';\n\t\t\t\t\t}\n\n\t\t\t\t\treturn value;\n\t\t\t\t})\n\t\t\t\t.join(separateBy);\n\n\t\t//numerical operations\n\t\tcase 'average':\n\t\t\treturn (\n\t\t\t\tdata.reduce((acc, item) => {\n\t\t\t\t\treturn acc + (getValue(item, field) as number);\n\t\t\t\t}, 0) / data.length\n\t\t\t);\n\t\tcase 'sum':\n\t\t\treturn data.reduce((acc, item) => {\n\t\t\t\treturn acc + (getValue(item, field) as number);\n\t\t\t}, 0);\n\t\tcase 'min':\n\t\t\treturn Math.min(\n\t\t\t\t...(data.map((item) => {\n\t\t\t\t\treturn getValue(item, field);\n\t\t\t\t}) as number[]),\n\t\t\t);\n\t\tcase 'max':\n\t\t\treturn Math.max(\n\t\t\t\t...(data.map((item) => {\n\t\t\t\t\treturn getValue(item, field);\n\t\t\t\t}) as number[]),\n\t\t\t);\n\n\t\t//count operations\n\t\tcase 'countUnique':\n\t\t\treturn new Set(data.map((item) => getValue(item, field)).filter((item) => !isEmpty(item)))\n\t\t\t\t.size;\n\t\tdefault:\n\t\t\t//count by default\n\t\t\treturn data.filter((item) => !isEmpty(getValue(item, field))).length;\n\t}\n}\n\nfunction aggregateData(\n\tdata: IDataObject[],\n\tfieldsToSummarize: Aggregations,\n\toptions: SummarizeOptions,\n\tgetValue: ValueGetterFn,\n) {\n\tconst returnData = fieldsToSummarize.reduce((acc, aggregation) => {\n\t\tacc[`${AggregationDisplayNames[aggregation.aggregation]}${aggregation.field}`] = aggregate(\n\t\t\tdata,\n\t\t\taggregation,\n\t\t\tgetValue,\n\t\t);\n\t\treturn acc;\n\t}, {} as IDataObject);\n\tif (options.outputFormat === 'singleItem') {\n\t\treturn returnData;\n\t} else {\n\t\treturn { ...returnData, pairedItems: data.map((item) => item._itemIndex as number) };\n\t}\n}\n\nfunction splitData(\n\tsplitKeys: string[],\n\tdata: IDataObject[],\n\tfieldsToSummarize: Aggregations,\n\toptions: SummarizeOptions,\n\tgetValue: ValueGetterFn,\n) {\n\tif (!splitKeys || splitKeys.length === 0) {\n\t\treturn aggregateData(data, fieldsToSummarize, options, getValue);\n\t}\n\n\tconst [firstSplitKey, ...restSplitKeys] = splitKeys;\n\n\tconst groupedData = data.reduce((acc, item) => {\n\t\tlet keyValuee = getValue(item, firstSplitKey) as string;\n\n\t\tif (typeof keyValuee === 'object') {\n\t\t\tkeyValuee = JSON.stringify(keyValuee);\n\t\t}\n\n\t\tif (options.skipEmptySplitFields && typeof keyValuee !== 'number' && !keyValuee) {\n\t\t\treturn acc;\n\t\t}\n\n\t\tif (acc[keyValuee] === undefined) {\n\t\t\tacc[keyValuee] = [item];\n\t\t} else {\n\t\t\t(acc[keyValuee] as IDataObject[]).push(item);\n\t\t}\n\t\treturn acc;\n\t}, {} as IDataObject);\n\n\treturn Object.keys(groupedData).reduce((acc, key) => {\n\t\tconst value = groupedData[key] as IDataObject[];\n\t\tacc[key] = splitData(restSplitKeys, value, fieldsToSummarize, options, getValue);\n\t\treturn acc;\n\t}, {} as IDataObject);\n}\n\nfunction aggregationToArray(\n\taggregationResult: IDataObject,\n\tfieldsToSplitBy: string[],\n\tpreviousStage: IDataObject = {},\n) {\n\tconst returnData: IDataObject[] = [];\n\n\tconst splitFieldName = fieldsToSplitBy[0];\n\tconst isNext = fieldsToSplitBy[1];\n\n\tif (isNext === undefined) {\n\t\tfor (const fieldName of Object.keys(aggregationResult)) {\n\t\t\treturnData.push({\n\t\t\t\t...previousStage,\n\t\t\t\t[splitFieldName]: fieldName,\n\t\t\t\t...(aggregationResult[fieldName] as IDataObject),\n\t\t\t});\n\t\t}\n\t\treturn returnData;\n\t} else {\n\t\tfor (const key of Object.keys(aggregationResult)) {\n\t\t\treturnData.push(\n\t\t\t\t...aggregationToArray(aggregationResult[key] as IDataObject, fieldsToSplitBy.slice(1), {\n\t\t\t\t\t...previousStage,\n\t\t\t\t\t[splitFieldName]: key,\n\t\t\t\t}),\n\t\t\t);\n\t\t}\n\t\treturn returnData;\n\t}\n}\n\nexport async function execute(\n\tthis: IExecuteFunctions,\n\titems: INodeExecutionData[],\n): Promise<INodeExecutionData[][]> {\n\tconst newItems = items.map(({ json }, i) => ({ ...json, _itemIndex: i }));\n\n\tconst options = this.getNodeParameter('options', 0, {}) as SummarizeOptions;\n\n\tconst fieldsToSplitBy = (this.getNodeParameter('fieldsToSplitBy', 0, '') as string)\n\t\t.split(',')\n\t\t.map((field) => field.trim())\n\t\t.filter((field) => field);\n\n\tconst fieldsToSummarize = this.getNodeParameter(\n\t\t'fieldsToSummarize.values',\n\t\t0,\n\t\t[],\n\t) as Aggregations;\n\n\tif (fieldsToSummarize.filter((aggregation) => aggregation.field !== '').length === 0) {\n\t\tthrow new NodeOperationError(\n\t\t\tthis.getNode(),\n\t\t\t\"You need to add at least one aggregation to 'Fields to Summarize' with non empty 'Field'\",\n\t\t);\n\t}\n\n\tconst getValue = fieldValueGetter(options.disableDotNotation);\n\n\tcheckIfFieldExists.call(this, newItems, fieldsToSummarize, getValue);\n\n\tconst aggregationResult = splitData(\n\t\tfieldsToSplitBy,\n\t\tnewItems,\n\t\tfieldsToSummarize,\n\t\toptions,\n\t\tgetValue,\n\t);\n\n\tif (options.outputFormat === 'singleItem') {\n\t\tconst executionData: INodeExecutionData = {\n\t\t\tjson: aggregationResult,\n\t\t\tpairedItem: newItems.map((_v, index) => ({\n\t\t\t\titem: index,\n\t\t\t})),\n\t\t};\n\t\treturn [[executionData]];\n\t} else {\n\t\tif (!fieldsToSplitBy.length) {\n\t\t\tconst { pairedItems, ...json } = aggregationResult;\n\t\t\tconst executionData: INodeExecutionData = {\n\t\t\t\tjson,\n\t\t\t\tpairedItem: ((pairedItems as number[]) || []).map((index: number) => ({\n\t\t\t\t\titem: index,\n\t\t\t\t})),\n\t\t\t};\n\t\t\treturn [[executionData]];\n\t\t}\n\t\tconst returnData = aggregationToArray(aggregationResult, fieldsToSplitBy);\n\t\tconst executionData = returnData.map((item) => {\n\t\t\tconst { pairedItems, ...json } = item;\n\t\t\treturn {\n\t\t\t\tjson,\n\t\t\t\tpairedItem: ((pairedItems as number[]) || []).map((index: number) => ({\n\t\t\t\t\titem: index,\n\t\t\t\t})),\n\t\t\t};\n\t\t});\n\t\treturn [executionData];\n\t}\n}\n"],"mappings":"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","names":["get","executionData"]}