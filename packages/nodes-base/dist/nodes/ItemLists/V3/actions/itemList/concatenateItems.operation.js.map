{"version":3,"sources":["../../../../../../nodes/ItemLists/V3/actions/itemList/concatenateItems.operation.ts"],"sourcesContent":["import get from 'lodash/get';\nimport isEmpty from 'lodash/isEmpty';\nimport set from 'lodash/set';\nimport type {\n\tIDataObject,\n\tIExecuteFunctions,\n\tINodeExecutionData,\n\tINodeProperties,\n\tIPairedItemData,\n} from 'n8n-workflow';\nimport { NodeOperationError } from 'n8n-workflow';\n\nimport { updateDisplayOptions } from '@utils/utilities';\n\nimport { addBinariesToItem, prepareFieldsArray } from '../../helpers/utils';\nimport { disableDotNotationBoolean } from '../common.descriptions';\n\nconst properties: INodeProperties[] = [\n\t{\n\t\tdisplayName: 'Aggregate',\n\t\tname: 'aggregate',\n\t\ttype: 'options',\n\t\tdefault: 'aggregateIndividualFields',\n\t\toptions: [\n\t\t\t{\n\t\t\t\tname: 'Individual Fields',\n\t\t\t\tvalue: 'aggregateIndividualFields',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'All Item Data (Into a Single List)',\n\t\t\t\tvalue: 'aggregateAllItemData',\n\t\t\t},\n\t\t],\n\t},\n\t{\n\t\tdisplayName: 'Fields To Aggregate',\n\t\tname: 'fieldsToAggregate',\n\t\ttype: 'fixedCollection',\n\t\ttypeOptions: {\n\t\t\tmultipleValues: true,\n\t\t},\n\t\tplaceholder: 'Add Field To Aggregate',\n\t\tdefault: { fieldToAggregate: [{ fieldToAggregate: '', renameField: false }] },\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\taggregate: ['aggregateIndividualFields'],\n\t\t\t},\n\t\t},\n\t\toptions: [\n\t\t\t{\n\t\t\t\tdisplayName: '',\n\t\t\t\tname: 'fieldToAggregate',\n\t\t\t\tvalues: [\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Input Field Name',\n\t\t\t\t\t\tname: 'fieldToAggregate',\n\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\tdescription: 'The name of a field in the input items to aggregate together',\n\t\t\t\t\t\t// eslint-disable-next-line n8n-nodes-base/node-param-placeholder-miscased-id\n\t\t\t\t\t\tplaceholder: 'e.g. id',\n\t\t\t\t\t\thint: ' Enter the field name as text',\n\t\t\t\t\t\trequiresDataPath: 'single',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Rename Field',\n\t\t\t\t\t\tname: 'renameField',\n\t\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\t\tdefault: false,\n\t\t\t\t\t\tdescription: 'Whether to give the field a different name in the output',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Output Field Name',\n\t\t\t\t\t\tname: 'outputFieldName',\n\t\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\t\trenameField: [true],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t'The name of the field to put the aggregated data in. Leave blank to use the input field name.',\n\t\t\t\t\t\trequiresDataPath: 'single',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t],\n\t},\n\t{\n\t\tdisplayName: 'Put Output in Field',\n\t\tname: 'destinationFieldName',\n\t\ttype: 'string',\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\taggregate: ['aggregateAllItemData'],\n\t\t\t},\n\t\t},\n\t\tdefault: 'data',\n\t\tdescription: 'The name of the output field to put the data in',\n\t},\n\t{\n\t\tdisplayName: 'Include',\n\t\tname: 'include',\n\t\ttype: 'options',\n\t\tdefault: 'allFields',\n\t\toptions: [\n\t\t\t{\n\t\t\t\tname: 'All Fields',\n\t\t\t\tvalue: 'allFields',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Specified Fields',\n\t\t\t\tvalue: 'specifiedFields',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'All Fields Except',\n\t\t\t\tvalue: 'allFieldsExcept',\n\t\t\t},\n\t\t],\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\taggregate: ['aggregateAllItemData'],\n\t\t\t},\n\t\t},\n\t},\n\t{\n\t\tdisplayName: 'Fields To Exclude',\n\t\tname: 'fieldsToExclude',\n\t\ttype: 'string',\n\t\tplaceholder: 'e.g. email, name',\n\t\tdefault: '',\n\t\trequiresDataPath: 'multiple',\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\taggregate: ['aggregateAllItemData'],\n\t\t\t\tinclude: ['allFieldsExcept'],\n\t\t\t},\n\t\t},\n\t},\n\t{\n\t\tdisplayName: 'Fields To Include',\n\t\tname: 'fieldsToInclude',\n\t\ttype: 'string',\n\t\tplaceholder: 'e.g. email, name',\n\t\tdefault: '',\n\t\trequiresDataPath: 'multiple',\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\taggregate: ['aggregateAllItemData'],\n\t\t\t\tinclude: ['specifiedFields'],\n\t\t\t},\n\t\t},\n\t},\n\t{\n\t\tdisplayName: 'Options',\n\t\tname: 'options',\n\t\ttype: 'collection',\n\t\tplaceholder: 'Add Field',\n\t\tdefault: {},\n\t\toptions: [\n\t\t\t{\n\t\t\t\t...disableDotNotationBoolean,\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\thide: {\n\t\t\t\t\t\t'/aggregate': ['aggregateAllItemData'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Merge Lists',\n\t\t\t\tname: 'mergeLists',\n\t\t\t\ttype: 'boolean',\n\t\t\t\tdefault: false,\n\t\t\t\tdescription:\n\t\t\t\t\t'Whether to merge the output into a single flat list (rather than a list of lists), if the field to aggregate is a list',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\thide: {\n\t\t\t\t\t\t'/aggregate': ['aggregateAllItemData'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Include Binaries',\n\t\t\t\tname: 'includeBinaries',\n\t\t\t\ttype: 'boolean',\n\t\t\t\tdefault: false,\n\t\t\t\tdescription: 'Whether to include the binary data in the new item',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Keep Only Unique Binaries',\n\t\t\t\tname: 'keepOnlyUnique',\n\t\t\t\ttype: 'boolean',\n\t\t\t\tdefault: false,\n\t\t\t\tdescription:\n\t\t\t\t\t'Whether to keep only unique binaries by comparing mime types, file types, file sizes and file extensions',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tincludeBinaries: [true],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Keep Missing And Null Values',\n\t\t\t\tname: 'keepMissing',\n\t\t\t\ttype: 'boolean',\n\t\t\t\tdefault: false,\n\t\t\t\tdescription:\n\t\t\t\t\t'Whether to add a null entry to the aggregated list when there is a missing or null value',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\thide: {\n\t\t\t\t\t\t'/aggregate': ['aggregateAllItemData'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t},\n];\n\nconst displayOptions = {\n\tshow: {\n\t\tresource: ['itemList'],\n\t\toperation: ['concatenateItems'],\n\t},\n};\n\nexport const description = updateDisplayOptions(displayOptions, properties);\n\nexport async function execute(\n\tthis: IExecuteFunctions,\n\titems: INodeExecutionData[],\n): Promise<INodeExecutionData[]> {\n\tlet returnData: INodeExecutionData = { json: {}, pairedItem: [] };\n\n\tconst aggregate = this.getNodeParameter('aggregate', 0, '') as string;\n\n\tif (aggregate === 'aggregateIndividualFields') {\n\t\tconst disableDotNotation = this.getNodeParameter(\n\t\t\t'options.disableDotNotation',\n\t\t\t0,\n\t\t\tfalse,\n\t\t) as boolean;\n\t\tconst mergeLists = this.getNodeParameter('options.mergeLists', 0, false) as boolean;\n\t\tconst fieldsToAggregate = this.getNodeParameter(\n\t\t\t'fieldsToAggregate.fieldToAggregate',\n\t\t\t0,\n\t\t\t[],\n\t\t) as [{ fieldToAggregate: string; renameField: boolean; outputFieldName: string }];\n\t\tconst keepMissing = this.getNodeParameter('options.keepMissing', 0, false) as boolean;\n\n\t\tif (!fieldsToAggregate.length) {\n\t\t\tthrow new NodeOperationError(this.getNode(), 'No fields specified', {\n\t\t\t\tdescription: 'Please add a field to aggregate',\n\t\t\t});\n\t\t}\n\n\t\tconst newItem: INodeExecutionData = {\n\t\t\tjson: {},\n\t\t\tpairedItem: Array.from({ length: items.length }, (_, i) => i).map((index) => {\n\t\t\t\treturn {\n\t\t\t\t\titem: index,\n\t\t\t\t};\n\t\t\t}),\n\t\t};\n\n\t\tconst values: { [key: string]: any } = {};\n\t\tconst outputFields: string[] = [];\n\n\t\tfor (const { fieldToAggregate, outputFieldName, renameField } of fieldsToAggregate) {\n\t\t\tconst field = renameField ? outputFieldName : fieldToAggregate;\n\n\t\t\tif (outputFields.includes(field)) {\n\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t`The '${field}' output field is used more than once`,\n\t\t\t\t\t{ description: 'Please make sure each output field name is unique' },\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\toutputFields.push(field);\n\t\t\t}\n\n\t\t\tconst getFieldToAggregate = () =>\n\t\t\t\t!disableDotNotation && fieldToAggregate.includes('.')\n\t\t\t\t\t? fieldToAggregate.split('.').pop()\n\t\t\t\t\t: fieldToAggregate;\n\n\t\t\tconst _outputFieldName = outputFieldName\n\t\t\t\t? outputFieldName\n\t\t\t\t: (getFieldToAggregate() as string);\n\n\t\t\tif (fieldToAggregate !== '') {\n\t\t\t\tvalues[_outputFieldName] = [];\n\t\t\t\tfor (let i = 0; i < items.length; i++) {\n\t\t\t\t\tif (!disableDotNotation) {\n\t\t\t\t\t\tlet value = get(items[i].json, fieldToAggregate);\n\n\t\t\t\t\t\tif (!keepMissing) {\n\t\t\t\t\t\t\tif (Array.isArray(value)) {\n\t\t\t\t\t\t\t\tvalue = value.filter((entry) => entry !== null);\n\t\t\t\t\t\t\t} else if (value === null || value === undefined) {\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (Array.isArray(value) && mergeLists) {\n\t\t\t\t\t\t\tvalues[_outputFieldName].push(...value);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tvalues[_outputFieldName].push(value);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlet value = items[i].json[fieldToAggregate];\n\n\t\t\t\t\t\tif (!keepMissing) {\n\t\t\t\t\t\t\tif (Array.isArray(value)) {\n\t\t\t\t\t\t\t\tvalue = value.filter((entry) => entry !== null);\n\t\t\t\t\t\t\t} else if (value === null || value === undefined) {\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (Array.isArray(value) && mergeLists) {\n\t\t\t\t\t\t\tvalues[_outputFieldName].push(...value);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tvalues[_outputFieldName].push(value);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor (const key of Object.keys(values)) {\n\t\t\tif (!disableDotNotation) {\n\t\t\t\tset(newItem.json, key, values[key]);\n\t\t\t} else {\n\t\t\t\tnewItem.json[key] = values[key];\n\t\t\t}\n\t\t}\n\n\t\treturnData = newItem;\n\t} else {\n\t\tlet newItems: IDataObject[] = items.map((item) => item.json);\n\t\tlet pairedItem: IPairedItemData[] = [];\n\t\tconst destinationFieldName = this.getNodeParameter('destinationFieldName', 0) as string;\n\n\t\tconst fieldsToExclude = prepareFieldsArray(\n\t\t\tthis.getNodeParameter('fieldsToExclude', 0, '') as string,\n\t\t\t'Fields To Exclude',\n\t\t);\n\n\t\tconst fieldsToInclude = prepareFieldsArray(\n\t\t\tthis.getNodeParameter('fieldsToInclude', 0, '') as string,\n\t\t\t'Fields To Include',\n\t\t);\n\n\t\tif (fieldsToExclude.length || fieldsToInclude.length) {\n\t\t\tnewItems = newItems.reduce((acc, item, index) => {\n\t\t\t\tconst newItem: IDataObject = {};\n\t\t\t\tlet outputFields = Object.keys(item);\n\n\t\t\t\tif (fieldsToExclude.length) {\n\t\t\t\t\toutputFields = outputFields.filter((key) => !fieldsToExclude.includes(key));\n\t\t\t\t}\n\t\t\t\tif (fieldsToInclude.length) {\n\t\t\t\t\toutputFields = outputFields.filter((key) =>\n\t\t\t\t\t\tfieldsToInclude.length ? fieldsToInclude.includes(key) : true,\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\toutputFields.forEach((key) => {\n\t\t\t\t\tnewItem[key] = item[key];\n\t\t\t\t});\n\n\t\t\t\tif (isEmpty(newItem)) {\n\t\t\t\t\treturn acc;\n\t\t\t\t}\n\n\t\t\t\tpairedItem.push({ item: index });\n\t\t\t\treturn acc.concat([newItem]);\n\t\t\t}, [] as IDataObject[]);\n\t\t} else {\n\t\t\tpairedItem = Array.from({ length: newItems.length }, (_, item) => ({\n\t\t\t\titem,\n\t\t\t}));\n\t\t}\n\n\t\tconst output: INodeExecutionData = { json: { [destinationFieldName]: newItems }, pairedItem };\n\n\t\treturnData = output;\n\t}\n\n\tconst includeBinaries = this.getNodeParameter('options.includeBinaries', 0, false) as boolean;\n\n\tif (includeBinaries) {\n\t\tconst pairedItems = (returnData.pairedItem || []) as IPairedItemData[];\n\n\t\tconst aggregatedItems = pairedItems.map((item) => {\n\t\t\treturn items[item.item];\n\t\t});\n\n\t\tconst keepOnlyUnique = this.getNodeParameter('options.keepOnlyUnique', 0, false) as boolean;\n\n\t\taddBinariesToItem(returnData, aggregatedItems, keepOnlyUnique);\n\t}\n\n\treturn [returnData];\n}\n"],"mappings":"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","names":["get","set","isEmpty"]}