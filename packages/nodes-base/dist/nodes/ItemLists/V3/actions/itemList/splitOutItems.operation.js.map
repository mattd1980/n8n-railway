{"version":3,"sources":["../../../../../../nodes/ItemLists/V3/actions/itemList/splitOutItems.operation.ts"],"sourcesContent":["import get from 'lodash/get';\nimport unset from 'lodash/unset';\nimport type {\n\tIBinaryData,\n\tIDataObject,\n\tIExecuteFunctions,\n\tINodeExecutionData,\n\tINodeProperties,\n} from 'n8n-workflow';\nimport { deepCopy, NodeOperationError } from 'n8n-workflow';\n\nimport { updateDisplayOptions } from '@utils/utilities';\n\nimport { prepareFieldsArray } from '../../helpers/utils';\nimport { disableDotNotationBoolean } from '../common.descriptions';\n\nconst properties: INodeProperties[] = [\n\t{\n\t\tdisplayName: 'Fields To Split Out',\n\t\tname: 'fieldToSplitOut',\n\t\ttype: 'string',\n\t\tdefault: '',\n\t\trequired: true,\n\t\tplaceholder: 'Drag fields from the left or type their names',\n\t\tdescription:\n\t\t\t'The name of the input fields to break out into separate items. Separate multiple field names by commas. For binary data, use $binary.',\n\t\trequiresDataPath: 'multiple',\n\t},\n\t{\n\t\tdisplayName: 'Include',\n\t\tname: 'include',\n\t\ttype: 'options',\n\t\toptions: [\n\t\t\t{\n\t\t\t\tname: 'No Other Fields',\n\t\t\t\tvalue: 'noOtherFields',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'All Other Fields',\n\t\t\t\tvalue: 'allOtherFields',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Selected Other Fields',\n\t\t\t\tvalue: 'selectedOtherFields',\n\t\t\t},\n\t\t],\n\t\tdefault: 'noOtherFields',\n\t\tdescription: 'Whether to copy any other fields into the new items',\n\t},\n\t{\n\t\tdisplayName: 'Fields To Include',\n\t\tname: 'fieldsToInclude',\n\t\ttype: 'string',\n\t\tplaceholder: 'e.g. email, name',\n\t\trequiresDataPath: 'multiple',\n\t\tdescription: 'Fields in the input items to aggregate together',\n\t\tdefault: '',\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tinclude: ['selectedOtherFields'],\n\t\t\t},\n\t\t},\n\t},\n\t{\n\t\tdisplayName: 'Options',\n\t\tname: 'options',\n\t\ttype: 'collection',\n\t\tplaceholder: 'Add Field',\n\t\tdefault: {},\n\t\toptions: [\n\t\t\tdisableDotNotationBoolean,\n\t\t\t{\n\t\t\t\tdisplayName: 'Destination Field Name',\n\t\t\t\tname: 'destinationFieldName',\n\t\t\t\ttype: 'string',\n\t\t\t\trequiresDataPath: 'multiple',\n\t\t\t\tdefault: '',\n\t\t\t\tdescription: 'The field in the output under which to put the split field contents',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Include Binary',\n\t\t\t\tname: 'includeBinary',\n\t\t\t\ttype: 'boolean',\n\t\t\t\tdefault: false,\n\t\t\t\tdescription: 'Whether to include the binary data in the new items',\n\t\t\t},\n\t\t],\n\t},\n];\n\nconst displayOptions = {\n\tshow: {\n\t\tresource: ['itemList'],\n\t\toperation: ['splitOutItems'],\n\t},\n};\n\nexport const description = updateDisplayOptions(displayOptions, properties);\n\nexport async function execute(\n\tthis: IExecuteFunctions,\n\titems: INodeExecutionData[],\n): Promise<INodeExecutionData[]> {\n\tconst returnData: INodeExecutionData[] = [];\n\n\tfor (let i = 0; i < items.length; i++) {\n\t\tconst fieldsToSplitOut = (this.getNodeParameter('fieldToSplitOut', i) as string)\n\t\t\t.split(',')\n\t\t\t.map((field) => field.trim().replace(/^\\$json\\./, ''));\n\n\t\tconst options = this.getNodeParameter('options', i, {});\n\n\t\tconst disableDotNotation = options.disableDotNotation as boolean;\n\n\t\tconst destinationFields = ((options.destinationFieldName as string) || '')\n\t\t\t.split(',')\n\t\t\t.filter((field) => field.trim() !== '')\n\t\t\t.map((field) => field.trim());\n\n\t\tif (destinationFields.length && destinationFields.length !== fieldsToSplitOut.length) {\n\t\t\tthrow new NodeOperationError(\n\t\t\t\tthis.getNode(),\n\t\t\t\t'If multiple fields to split out are given, the same number of destination fields must be given',\n\t\t\t);\n\t\t}\n\n\t\tconst include = this.getNodeParameter('include', i) as\n\t\t\t| 'selectedOtherFields'\n\t\t\t| 'allOtherFields'\n\t\t\t| 'noOtherFields';\n\n\t\tconst multiSplit = fieldsToSplitOut.length > 1;\n\n\t\tconst item = { ...items[i].json };\n\t\tconst splited: INodeExecutionData[] = [];\n\t\tfor (const [entryIndex, fieldToSplitOut] of fieldsToSplitOut.entries()) {\n\t\t\tconst destinationFieldName = destinationFields[entryIndex] || '';\n\n\t\t\tlet entityToSplit: IDataObject[] = [];\n\n\t\t\tif (fieldToSplitOut === '$binary') {\n\t\t\t\tentityToSplit = Object.entries(items[i].binary || {}).map(([key, value]) => ({\n\t\t\t\t\t[key]: value,\n\t\t\t\t}));\n\t\t\t} else {\n\t\t\t\tif (!disableDotNotation) {\n\t\t\t\t\tentityToSplit = get(item, fieldToSplitOut) as IDataObject[];\n\t\t\t\t} else {\n\t\t\t\t\tentityToSplit = item[fieldToSplitOut] as IDataObject[];\n\t\t\t\t}\n\n\t\t\t\tif (entityToSplit === undefined) {\n\t\t\t\t\tentityToSplit = [];\n\t\t\t\t}\n\n\t\t\t\tif (typeof entityToSplit !== 'object' || entityToSplit === null) {\n\t\t\t\t\tentityToSplit = [entityToSplit];\n\t\t\t\t}\n\n\t\t\t\tif (!Array.isArray(entityToSplit)) {\n\t\t\t\t\tentityToSplit = Object.values(entityToSplit);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (const [elementIndex, element] of entityToSplit.entries()) {\n\t\t\t\tif (splited[elementIndex] === undefined) {\n\t\t\t\t\tsplited[elementIndex] = { json: {}, pairedItem: { item: i } };\n\t\t\t\t}\n\n\t\t\t\tconst fieldName = destinationFieldName || fieldToSplitOut;\n\n\t\t\t\tif (fieldToSplitOut === '$binary') {\n\t\t\t\t\tif (splited[elementIndex].binary === undefined) {\n\t\t\t\t\t\tsplited[elementIndex].binary = {};\n\t\t\t\t\t}\n\t\t\t\t\tsplited[elementIndex].binary[Object.keys(element)[0]] = Object.values(\n\t\t\t\t\t\telement,\n\t\t\t\t\t)[0] as IBinaryData;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (typeof element === 'object' && element !== null && include === 'noOtherFields') {\n\t\t\t\t\tif (destinationFieldName === '' && !multiSplit) {\n\t\t\t\t\t\tsplited[elementIndex] = {\n\t\t\t\t\t\t\tjson: { ...splited[elementIndex].json, ...element },\n\t\t\t\t\t\t\tpairedItem: { item: i },\n\t\t\t\t\t\t};\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsplited[elementIndex].json[fieldName] = element;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tsplited[elementIndex].json[fieldName] = element;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor (const splitEntry of splited) {\n\t\t\tlet newItem: INodeExecutionData = splitEntry;\n\n\t\t\tif (include === 'allOtherFields') {\n\t\t\t\tconst itemCopy = deepCopy(item);\n\t\t\t\tfor (const fieldToSplitOut of fieldsToSplitOut) {\n\t\t\t\t\tif (!disableDotNotation) {\n\t\t\t\t\t\tunset(itemCopy, fieldToSplitOut);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdelete itemCopy[fieldToSplitOut];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tnewItem.json = { ...itemCopy, ...splitEntry.json };\n\t\t\t}\n\n\t\t\tif (include === 'selectedOtherFields') {\n\t\t\t\tconst fieldsToInclude = prepareFieldsArray(\n\t\t\t\t\tthis.getNodeParameter('fieldsToInclude', i, '') as string,\n\t\t\t\t\t'Fields To Include',\n\t\t\t\t);\n\n\t\t\t\tif (!fieldsToInclude.length) {\n\t\t\t\t\tthrow new NodeOperationError(this.getNode(), 'No fields specified', {\n\t\t\t\t\t\tdescription: 'Please add a field to include',\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tfor (const field of fieldsToInclude) {\n\t\t\t\t\tif (!disableDotNotation) {\n\t\t\t\t\t\tsplitEntry.json[field] = get(item, field);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsplitEntry.json[field] = item[field];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tnewItem = splitEntry;\n\t\t\t}\n\n\t\t\tconst includeBinary = options.includeBinary as boolean;\n\n\t\t\tif (includeBinary) {\n\t\t\t\tif (items[i].binary && !newItem.binary) {\n\t\t\t\t\tnewItem.binary = items[i].binary;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturnData.push(newItem);\n\t\t}\n\t}\n\n\treturn returnData;\n}\n"],"mappings":"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","names":["get","unset"]}