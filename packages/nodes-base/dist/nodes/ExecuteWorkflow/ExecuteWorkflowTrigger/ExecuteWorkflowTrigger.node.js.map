{"version":3,"sources":["../../../../nodes/ExecuteWorkflow/ExecuteWorkflowTrigger/ExecuteWorkflowTrigger.node.ts"],"sourcesContent":["import _ from 'lodash';\nimport {\n\ttype INodeExecutionData,\n\tNodeConnectionTypes,\n\ttype IExecuteFunctions,\n\ttype INodeType,\n\ttype INodeTypeDescription,\n} from 'n8n-workflow';\n\nimport {\n\tINPUT_SOURCE,\n\tWORKFLOW_INPUTS,\n\tJSON_EXAMPLE,\n\tVALUES,\n\tTYPE_OPTIONS,\n\tPASSTHROUGH,\n\tFALLBACK_DEFAULT_VALUE,\n} from '../../../utils/workflowInputsResourceMapping/constants';\nimport { getFieldEntries } from '../../../utils/workflowInputsResourceMapping/GenericFunctions';\n\nexport class ExecuteWorkflowTrigger implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'Execute Workflow Trigger',\n\t\tname: 'executeWorkflowTrigger',\n\t\ticon: 'fa:sign-out-alt',\n\t\tgroup: ['trigger'],\n\t\tversion: [1, 1.1],\n\t\tdescription:\n\t\t\t'Helpers for calling other n8n workflows. Used for designing modular, microservice-like workflows.',\n\t\teventTriggerDescription: '',\n\t\tmaxNodes: 1,\n\t\tdefaults: {\n\t\t\tname: 'When Executed by Another Workflow',\n\t\t\tcolor: '#ff6d5a',\n\t\t},\n\t\tinputs: [],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\thints: [\n\t\t\t{\n\t\t\t\tmessage:\n\t\t\t\t\t\"This workflow isn't set to accept any input data. Fill out the workflow input schema or change the workflow to accept any data passed to it.\",\n\t\t\t\t// This condition checks if we have no input fields, which gets a bit awkward:\n\t\t\t\t// For WORKFLOW_INPUTS: keys() only contains `VALUES` if at least one value is provided\n\t\t\t\t// For JSON_EXAMPLE: We remove all whitespace and check if we're left with an empty object. Note that we already error if the example is not valid JSON\n\t\t\t\tdisplayCondition:\n\t\t\t\t\t`={{$parameter['${INPUT_SOURCE}'] === '${WORKFLOW_INPUTS}' && !$parameter['${WORKFLOW_INPUTS}'].keys().length ` +\n\t\t\t\t\t`|| $parameter['${INPUT_SOURCE}'] === '${JSON_EXAMPLE}' && $parameter['${JSON_EXAMPLE}'].toString().replaceAll(' ', '').replaceAll('\\\\n', '') === '{}' }}`,\n\t\t\t\twhenToDisplay: 'always',\n\t\t\t\tlocation: 'ndv',\n\t\t\t},\n\t\t],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Events',\n\t\t\t\tname: 'events',\n\t\t\t\ttype: 'hidden',\n\t\t\t\tnoDataExpression: true,\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Workflow Call',\n\t\t\t\t\t\tvalue: 'worklfow_call',\n\t\t\t\t\t\tdescription: 'When executed by another workflow using Execute Workflow Trigger',\n\t\t\t\t\t\taction: 'When executed by Another Workflow',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'worklfow_call',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName:\n\t\t\t\t\t\"When an ‘execute workflow’ node calls this workflow, the execution starts here. Any data passed into the 'execute workflow' node will be output by this node.\",\n\t\t\t\tname: 'notice',\n\t\t\t\ttype: 'notice',\n\t\t\t\tdefault: '',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: { '@version': [{ _cnd: { eq: 1 } }] },\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'This node is out of date. Please upgrade by removing it and adding a new one',\n\t\t\t\tname: 'outdatedVersionWarning',\n\t\t\t\ttype: 'notice',\n\t\t\t\tdisplayOptions: { show: { '@version': [{ _cnd: { eq: 1 } }] } },\n\t\t\t\tdefault: '',\n\t\t\t},\n\t\t\t{\n\t\t\t\t// eslint-disable-next-line n8n-nodes-base/node-param-display-name-miscased\n\t\t\t\tdisplayName: 'Input data mode',\n\t\t\t\tname: INPUT_SOURCE,\n\t\t\t\ttype: 'options',\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\t// eslint-disable-next-line n8n-nodes-base/node-param-display-name-miscased\n\t\t\t\t\t\tname: 'Define using fields below',\n\t\t\t\t\t\tvalue: WORKFLOW_INPUTS,\n\t\t\t\t\t\tdescription: 'Provide input fields via UI',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t// eslint-disable-next-line n8n-nodes-base/node-param-display-name-miscased\n\t\t\t\t\t\tname: 'Define using JSON example',\n\t\t\t\t\t\tvalue: JSON_EXAMPLE,\n\t\t\t\t\t\tdescription: 'Generate a schema from an example JSON object',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t// eslint-disable-next-line n8n-nodes-base/node-param-display-name-miscased\n\t\t\t\t\t\tname: 'Accept all data',\n\t\t\t\t\t\tvalue: PASSTHROUGH,\n\t\t\t\t\t\tdescription: 'Use all incoming data from the parent workflow',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: WORKFLOW_INPUTS,\n\t\t\t\tnoDataExpression: true,\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: { '@version': [{ _cnd: { gte: 1.1 } }] },\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName:\n\t\t\t\t\t'Provide an example object to infer fields and their types.<br>To allow any type for a given field, set the value to null.',\n\t\t\t\tname: `${JSON_EXAMPLE}_notice`,\n\t\t\t\ttype: 'notice',\n\t\t\t\tdefault: '',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: { '@version': [{ _cnd: { gte: 1.1 } }], inputSource: [JSON_EXAMPLE] },\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'JSON Example',\n\t\t\t\tname: JSON_EXAMPLE,\n\t\t\t\ttype: 'json',\n\t\t\t\tdefault: JSON.stringify(\n\t\t\t\t\t{\n\t\t\t\t\t\taField: 'a string',\n\t\t\t\t\t\taNumber: 123,\n\t\t\t\t\t\tthisFieldAcceptsAnyType: null,\n\t\t\t\t\t\tanArray: [],\n\t\t\t\t\t},\n\t\t\t\t\tnull,\n\t\t\t\t\t2,\n\t\t\t\t),\n\t\t\t\tnoDataExpression: true,\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: { '@version': [{ _cnd: { gte: 1.1 } }], inputSource: [JSON_EXAMPLE] },\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Workflow Input Schema',\n\t\t\t\tname: WORKFLOW_INPUTS,\n\t\t\t\tplaceholder: 'Add field',\n\t\t\t\ttype: 'fixedCollection',\n\t\t\t\tdescription:\n\t\t\t\t\t'Define expected input fields. If no inputs are provided, all data from the calling workflow will be passed through.',\n\t\t\t\ttypeOptions: {\n\t\t\t\t\tmultipleValues: true,\n\t\t\t\t\tsortable: true,\n\t\t\t\t\tminRequiredFields: 1,\n\t\t\t\t},\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: { '@version': [{ _cnd: { gte: 1.1 } }], inputSource: [WORKFLOW_INPUTS] },\n\t\t\t\t},\n\t\t\t\tdefault: {},\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: VALUES,\n\t\t\t\t\t\tdisplayName: 'Values',\n\t\t\t\t\t\tvalues: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdisplayName: 'Name',\n\t\t\t\t\t\t\t\tname: 'name',\n\t\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\t\t\tplaceholder: 'e.g. fieldName',\n\t\t\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t\t\t'A unique name for this workflow input, used to reference it from another workflows',\n\t\t\t\t\t\t\t\trequired: true,\n\t\t\t\t\t\t\t\tnoDataExpression: true,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdisplayName: 'Type',\n\t\t\t\t\t\t\t\tname: 'type',\n\t\t\t\t\t\t\t\ttype: 'options',\n\t\t\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t\t\t\"Expected data type for this input value. Determines how this field's values are stored, validated, and displayed.\",\n\t\t\t\t\t\t\t\toptions: TYPE_OPTIONS,\n\t\t\t\t\t\t\t\trequired: true,\n\t\t\t\t\t\t\t\tdefault: 'string',\n\t\t\t\t\t\t\t\tnoDataExpression: true,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t],\n\t};\n\n\tasync execute(this: IExecuteFunctions) {\n\t\tconst inputData = this.getInputData();\n\t\tconst inputSource = this.getNodeParameter(INPUT_SOURCE, 0, PASSTHROUGH) as string;\n\n\t\t// Note on the data we receive from ExecuteWorkflow caller:\n\t\t//\n\t\t// The ExecuteWorkflow node typechecks all fields explicitly provided by the user here via the resourceMapper\n\t\t// and removes all fields that are in the schema, but `removed` in the resourceMapper.\n\t\t//\n\t\t// In passthrough and legacy node versions, inputData will line up since the resourceMapper is empty,\n\t\t// in which case all input is passed through.\n\t\t// In other cases we will already have matching types and fields provided by the resource mapper,\n\t\t// so we just need to be permissive on this end,\n\t\t// while ensuring we provide default values for fields in our schema, which are removed in the resourceMapper.\n\n\t\tif (inputSource === PASSTHROUGH) {\n\t\t\treturn [inputData];\n\t\t} else {\n\t\t\tconst newParams = getFieldEntries(this);\n\t\t\tconst newKeys = new Set(newParams.fields.map((x) => x.name));\n\t\t\tconst itemsInSchema: INodeExecutionData[] = inputData.map(({ json, binary }, index) => ({\n\t\t\t\tjson: {\n\t\t\t\t\t...Object.fromEntries(newParams.fields.map((x) => [x.name, FALLBACK_DEFAULT_VALUE])),\n\t\t\t\t\t// Need to trim to the expected schema to support legacy Execute Workflow callers passing through all their data\n\t\t\t\t\t// which we do not want to expose past this node.\n\t\t\t\t\t..._.pickBy(json, (_value, key) => newKeys.has(key)),\n\t\t\t\t},\n\t\t\t\tindex,\n\t\t\t\tbinary,\n\t\t\t}));\n\n\t\t\treturn [itemsInSchema];\n\t\t}\n\t}\n}\n"],"mappings":"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","names":["_"]}