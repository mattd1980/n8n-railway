{"version":3,"sources":["../../../../../nodes/ExecuteWorkflow/ExecuteWorkflow/methods/localResourceMapping.ts"],"sourcesContent":["import type { ILocalLoadOptionsFunctions, ResourceMapperFields } from 'n8n-workflow';\n\nimport { loadWorkflowInputMappings } from '@utils/workflowInputsResourceMapping/GenericFunctions';\n\nexport async function loadSubWorkflowInputs(\n\tthis: ILocalLoadOptionsFunctions,\n): Promise<ResourceMapperFields> {\n\tconst { fields, dataMode, subworkflowInfo } = await loadWorkflowInputMappings.bind(this)();\n\tlet emptyFieldsNotice: string | undefined;\n\tif (fields.length === 0) {\n\t\tconst { triggerId, workflowId } = subworkflowInfo ?? {};\n\t\tconst path = (workflowId ?? '') + (triggerId ? `/${triggerId.slice(0, 6)}` : '');\n\t\tconst subworkflowLink = workflowId\n\t\t\t? `<a href=\"/workflow/${path}\" target=\"_blank\">sub-workflow’s trigger</a>`\n\t\t\t: 'sub-workflow’s trigger';\n\n\t\tswitch (dataMode) {\n\t\t\tcase 'passthrough':\n\t\t\t\temptyFieldsNotice = `This sub-workflow will consume all input data passed to it. You can define specific expected input in the ${subworkflowLink}.`;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\temptyFieldsNotice = `The sub-workflow isn't set up to accept any inputs. Change this in the ${subworkflowLink}.`;\n\t\t\t\tbreak;\n\t\t}\n\t}\n\treturn { fields, emptyFieldsNotice };\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,8BAA0C;AAE1C,eAAsB,wBAEW;AAChC,QAAM,EAAE,QAAQ,UAAU,gBAAgB,IAAI,MAAM,kDAA0B,KAAK,IAAI,EAAE;AACzF,MAAI;AACJ,MAAI,OAAO,WAAW,GAAG;AACxB,UAAM,EAAE,WAAW,WAAW,IAAI,mBAAmB,CAAC;AACtD,UAAM,QAAQ,cAAc,OAAO,YAAY,IAAI,UAAU,MAAM,GAAG,CAAC,CAAC,KAAK;AAC7E,UAAM,kBAAkB,aACrB,sBAAsB,IAAI,sDAC1B;AAEH,YAAQ,UAAU;AAAA,MACjB,KAAK;AACJ,4BAAoB,6GAA6G,eAAe;AAChJ;AAAA,MACD;AACC,4BAAoB,0EAA0E,eAAe;AAC7G;AAAA,IACF;AAAA,EACD;AACA,SAAO,EAAE,QAAQ,kBAAkB;AACpC;","names":[]}