{"version":3,"sources":["../../../../nodes/SeaTable/v1/SeaTableV1.node.ts"],"sourcesContent":["import type {\n\tIExecuteFunctions,\n\tIDataObject,\n\tILoadOptionsFunctions,\n\tINodeExecutionData,\n\tINodePropertyOptions,\n\tINodeType,\n\tINodeTypeDescription,\n\tINodeTypeBaseDescription,\n} from 'n8n-workflow';\nimport { NodeOperationError } from 'n8n-workflow';\n\nimport {\n\tgetTableColumns,\n\tgetTableViews,\n\trowExport,\n\trowFormatColumns,\n\trowMapKeyToName,\n\tseaTableApiRequest,\n\tsetableApiRequestAllItems,\n\tsplit,\n\tupdateAble,\n} from './GenericFunctions';\nimport type { ICtx, IRow, IRowObject } from './Interfaces';\nimport { versionDescription } from './SeaTable.node';\nimport type { TColumnsUiValues, TColumnValue } from './types';\n\nexport class SeaTableV1 implements INodeType {\n\tdescription: INodeTypeDescription;\n\n\tconstructor(baseDescription: INodeTypeBaseDescription) {\n\t\tthis.description = {\n\t\t\t...baseDescription,\n\t\t\t...versionDescription,\n\t\t};\n\t}\n\n\tmethods = {\n\t\tloadOptions: {\n\t\t\tasync getTableNames(this: ILoadOptionsFunctions) {\n\t\t\t\tconst returnData: INodePropertyOptions[] = [];\n\t\t\t\tconst {\n\t\t\t\t\tmetadata: { tables },\n\t\t\t\t} = await seaTableApiRequest.call(\n\t\t\t\t\tthis,\n\t\t\t\t\t{},\n\t\t\t\t\t'GET',\n\t\t\t\t\t'/dtable-server/api/v1/dtables/{{dtable_uuid}}/metadata/',\n\t\t\t\t);\n\t\t\t\tfor (const table of tables) {\n\t\t\t\t\treturnData.push({\n\t\t\t\t\t\tname: table.name,\n\t\t\t\t\t\tvalue: table.name,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn returnData;\n\t\t\t},\n\t\t\tasync getTableIds(this: ILoadOptionsFunctions) {\n\t\t\t\tconst returnData: INodePropertyOptions[] = [];\n\t\t\t\tconst {\n\t\t\t\t\tmetadata: { tables },\n\t\t\t\t} = await seaTableApiRequest.call(\n\t\t\t\t\tthis,\n\t\t\t\t\t{},\n\t\t\t\t\t'GET',\n\t\t\t\t\t'/dtable-server/api/v1/dtables/{{dtable_uuid}}/metadata/',\n\t\t\t\t);\n\t\t\t\tfor (const table of tables) {\n\t\t\t\t\treturnData.push({\n\t\t\t\t\t\tname: table.name,\n\t\t\t\t\t\tvalue: table._id,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn returnData;\n\t\t\t},\n\n\t\t\tasync getTableUpdateAbleColumns(this: ILoadOptionsFunctions) {\n\t\t\t\tconst tableName = this.getNodeParameter('tableName') as string;\n\t\t\t\tconst columns = await getTableColumns.call(this, tableName);\n\t\t\t\treturn columns\n\t\t\t\t\t.filter((column) => column.editable)\n\t\t\t\t\t.map((column) => ({ name: column.name, value: column.name }));\n\t\t\t},\n\t\t\tasync getAllSortableColumns(this: ILoadOptionsFunctions) {\n\t\t\t\tconst tableName = this.getNodeParameter('tableName') as string;\n\t\t\t\tconst columns = await getTableColumns.call(this, tableName);\n\t\t\t\treturn columns\n\t\t\t\t\t.filter(\n\t\t\t\t\t\t(column) =>\n\t\t\t\t\t\t\t!['file', 'image', 'url', 'collaborator', 'long-text'].includes(column.type),\n\t\t\t\t\t)\n\t\t\t\t\t.map((column) => ({ name: column.name, value: column.name }));\n\t\t\t},\n\t\t\tasync getViews(this: ILoadOptionsFunctions) {\n\t\t\t\tconst tableName = this.getNodeParameter('tableName') as string;\n\t\t\t\tconst views = await getTableViews.call(this, tableName);\n\t\t\t\treturn views.map((view) => ({ name: view.name, value: view.name }));\n\t\t\t},\n\t\t},\n\t};\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t\tconst items = this.getInputData();\n\t\tconst returnData: INodeExecutionData[] = [];\n\t\tlet responseData;\n\n\t\tconst resource = this.getNodeParameter('resource', 0);\n\t\tconst operation = this.getNodeParameter('operation', 0);\n\n\t\tconst body: IDataObject = {};\n\t\tconst qs: IDataObject = {};\n\t\tconst ctx: ICtx = {};\n\n\t\tif (resource === 'row') {\n\t\t\tif (operation === 'create') {\n\t\t\t\t// ----------------------------------\n\t\t\t\t//         row:create\n\t\t\t\t// ----------------------------------\n\n\t\t\t\tconst tableName = this.getNodeParameter('tableName', 0) as string;\n\t\t\t\tconst tableColumns = await getTableColumns.call(this, tableName);\n\n\t\t\t\tbody.table_name = tableName;\n\n\t\t\t\tconst fieldsToSend = this.getNodeParameter('fieldsToSend', 0) as\n\t\t\t\t\t| 'defineBelow'\n\t\t\t\t\t| 'autoMapInputData';\n\t\t\t\tlet rowInput: IRowObject = {};\n\n\t\t\t\tfor (let i = 0; i < items.length; i++) {\n\t\t\t\t\trowInput = {} as IRowObject;\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (fieldsToSend === 'autoMapInputData') {\n\t\t\t\t\t\t\tconst incomingKeys = Object.keys(items[i].json);\n\t\t\t\t\t\t\tconst inputDataToIgnore = split(\n\t\t\t\t\t\t\t\tthis.getNodeParameter('inputsToIgnore', i, '') as string,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tfor (const key of incomingKeys) {\n\t\t\t\t\t\t\t\tif (inputDataToIgnore.includes(key)) continue;\n\t\t\t\t\t\t\t\trowInput[key] = items[i].json[key] as TColumnValue;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst columns = this.getNodeParameter(\n\t\t\t\t\t\t\t\t'columnsUi.columnValues',\n\t\t\t\t\t\t\t\ti,\n\t\t\t\t\t\t\t\t[],\n\t\t\t\t\t\t\t) as TColumnsUiValues;\n\t\t\t\t\t\t\tfor (const column of columns) {\n\t\t\t\t\t\t\t\trowInput[column.columnName] = column.columnValue;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbody.row = rowExport(rowInput, updateAble(tableColumns));\n\n\t\t\t\t\t\tresponseData = await seaTableApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\tctx,\n\t\t\t\t\t\t\t'POST',\n\t\t\t\t\t\t\t'/dtable-server/api/v1/dtables/{{dtable_uuid}}/rows/',\n\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tconst { _id: insertId } = responseData;\n\t\t\t\t\t\tif (insertId === undefined) {\n\t\t\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t\t\t'SeaTable: No identity after appending row.',\n\t\t\t\t\t\t\t\t{ itemIndex: i },\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst newRowInsertData = rowMapKeyToName(responseData as IRow, tableColumns);\n\n\t\t\t\t\t\tqs.table_name = tableName;\n\t\t\t\t\t\tqs.convert = true;\n\t\t\t\t\t\tconst newRow = await seaTableApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\tctx,\n\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t`/dtable-server/api/v1/dtables/{{dtable_uuid}}/rows/${encodeURIComponent(\n\t\t\t\t\t\t\t\tinsertId as string,\n\t\t\t\t\t\t\t)}/`,\n\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tif (newRow._id === undefined) {\n\t\t\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t\t\t'SeaTable: No identity for appended row.',\n\t\t\t\t\t\t\t\t{ itemIndex: i },\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst row = rowFormatColumns(\n\t\t\t\t\t\t\t{ ...newRowInsertData, ...(newRow as IRow) },\n\t\t\t\t\t\t\ttableColumns.map(({ name }) => name).concat(['_id', '_ctime', '_mtime']),\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray(row),\n\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\t\t\tconst executionErrorData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\t\tthis.helpers.returnJsonArray({ error: error.message }),\n\t\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\treturnData.push(...executionErrorData);\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow error;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (operation === 'get') {\n\t\t\t\tfor (let i = 0; i < items.length; i++) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst tableId = this.getNodeParameter('tableId', 0) as string;\n\t\t\t\t\t\tconst rowId = this.getNodeParameter('rowId', i) as string;\n\t\t\t\t\t\tconst response = (await seaTableApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\tctx,\n\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t`/dtable-server/api/v1/dtables/{{dtable_uuid}}/rows/${rowId}`,\n\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t{ table_id: tableId, convert: true },\n\t\t\t\t\t\t)) as IDataObject;\n\n\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray(response),\n\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\t\t\tconst executionErrorData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\t\tthis.helpers.returnJsonArray({ error: error.message }),\n\t\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\treturnData.push(...executionErrorData);\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow error;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (operation === 'getAll') {\n\t\t\t\t// ----------------------------------\n\t\t\t\t//         row:getAll\n\t\t\t\t// ----------------------------------\n\n\t\t\t\tconst tableName = this.getNodeParameter('tableName', 0) as string;\n\t\t\t\tconst tableColumns = await getTableColumns.call(this, tableName);\n\n\t\t\t\tfor (let i = 0; i < items.length; i++) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst endpoint = '/dtable-server/api/v1/dtables/{{dtable_uuid}}/rows/';\n\t\t\t\t\t\tqs.table_name = tableName;\n\t\t\t\t\t\tconst filters = this.getNodeParameter('filters', i);\n\t\t\t\t\t\tconst options = this.getNodeParameter('options', i);\n\t\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', 0);\n\n\t\t\t\t\t\tObject.assign(qs, filters, options);\n\n\t\t\t\t\t\tif (qs.convert_link_id === false) {\n\t\t\t\t\t\t\tdelete qs.convert_link_id;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (returnAll) {\n\t\t\t\t\t\t\tresponseData = await setableApiRequestAllItems.call(\n\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\tctx,\n\t\t\t\t\t\t\t\t'rows',\n\t\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t\tendpoint,\n\t\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tqs.limit = this.getNodeParameter('limit', 0);\n\t\t\t\t\t\t\tresponseData = await seaTableApiRequest.call(this, ctx, 'GET', endpoint, body, qs);\n\t\t\t\t\t\t\tresponseData = responseData.rows;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst rows = responseData.map((row: IRow) =>\n\t\t\t\t\t\t\trowFormatColumns(\n\t\t\t\t\t\t\t\t{ ...row },\n\t\t\t\t\t\t\t\ttableColumns.map(({ name }) => name).concat(['_id', '_ctime', '_mtime']),\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray(rows as IDataObject[]),\n\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\t\t\tconst executionErrorData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\t\tthis.helpers.returnJsonArray({ error: error.message }),\n\t\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\treturnData.push(...executionErrorData);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow error;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (operation === 'delete') {\n\t\t\t\tfor (let i = 0; i < items.length; i++) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst tableName = this.getNodeParameter('tableName', 0) as string;\n\t\t\t\t\t\tconst rowId = this.getNodeParameter('rowId', i) as string;\n\t\t\t\t\t\tconst requestBody: IDataObject = {\n\t\t\t\t\t\t\ttable_name: tableName,\n\t\t\t\t\t\t\trow_id: rowId,\n\t\t\t\t\t\t};\n\t\t\t\t\t\tconst response = (await seaTableApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\tctx,\n\t\t\t\t\t\t\t'DELETE',\n\t\t\t\t\t\t\t'/dtable-server/api/v1/dtables/{{dtable_uuid}}/rows/',\n\t\t\t\t\t\t\trequestBody,\n\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t)) as IDataObject;\n\n\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray(response),\n\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\t\t\tconst executionErrorData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\t\tthis.helpers.returnJsonArray({ error: error.message }),\n\t\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\treturnData.push(...executionErrorData);\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow error;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (operation === 'update') {\n\t\t\t\t// ----------------------------------\n\t\t\t\t//         row:update\n\t\t\t\t// ----------------------------------\n\n\t\t\t\tconst tableName = this.getNodeParameter('tableName', 0) as string;\n\t\t\t\tconst tableColumns = await getTableColumns.call(this, tableName);\n\n\t\t\t\tbody.table_name = tableName;\n\n\t\t\t\tconst fieldsToSend = this.getNodeParameter('fieldsToSend', 0) as\n\t\t\t\t\t| 'defineBelow'\n\t\t\t\t\t| 'autoMapInputData';\n\t\t\t\tlet rowInput: IRowObject = {};\n\n\t\t\t\tfor (let i = 0; i < items.length; i++) {\n\t\t\t\t\tconst rowId = this.getNodeParameter('rowId', i) as string;\n\t\t\t\t\trowInput = {} as IRowObject;\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (fieldsToSend === 'autoMapInputData') {\n\t\t\t\t\t\t\tconst incomingKeys = Object.keys(items[i].json);\n\t\t\t\t\t\t\tconst inputDataToIgnore = split(\n\t\t\t\t\t\t\t\tthis.getNodeParameter('inputsToIgnore', i, '') as string,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tfor (const key of incomingKeys) {\n\t\t\t\t\t\t\t\tif (inputDataToIgnore.includes(key)) continue;\n\t\t\t\t\t\t\t\trowInput[key] = items[i].json[key] as TColumnValue;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst columns = this.getNodeParameter(\n\t\t\t\t\t\t\t\t'columnsUi.columnValues',\n\t\t\t\t\t\t\t\ti,\n\t\t\t\t\t\t\t\t[],\n\t\t\t\t\t\t\t) as TColumnsUiValues;\n\t\t\t\t\t\t\tfor (const column of columns) {\n\t\t\t\t\t\t\t\trowInput[column.columnName] = column.columnValue;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbody.row = rowExport(rowInput, updateAble(tableColumns));\n\t\t\t\t\t\tbody.table_name = tableName;\n\t\t\t\t\t\tbody.row_id = rowId;\n\t\t\t\t\t\tresponseData = await seaTableApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\tctx,\n\t\t\t\t\t\t\t'PUT',\n\t\t\t\t\t\t\t'/dtable-server/api/v1/dtables/{{dtable_uuid}}/rows/',\n\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray({ _id: rowId, ...(responseData as IDataObject) }),\n\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\t\t\tconst executionErrorData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\t\tthis.helpers.returnJsonArray({ error: error.message }),\n\t\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\treturnData.push(...executionErrorData);\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow error;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthrow new NodeOperationError(this.getNode(), `The operation \"${operation}\" is not known!`);\n\t\t\t}\n\t\t}\n\t\treturn [returnData];\n\t}\n}\n"],"mappings":"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","names":[]}