{"version":3,"sources":["../../../../../../nodes/SeaTable/v2/actions/row/get.operation.ts"],"sourcesContent":["import {\n\ttype IDataObject,\n\ttype INodeExecutionData,\n\ttype INodeProperties,\n\ttype IExecuteFunctions,\n\tupdateDisplayOptions,\n} from 'n8n-workflow';\n\nimport {\n\tseaTableApiRequest,\n\tenrichColumns,\n\tsimplify_new,\n\tgetBaseCollaborators,\n} from '../../GenericFunctions';\nimport type { IRowResponse, IDtableMetadataColumn } from '../Interfaces';\n\nexport const properties: INodeProperties[] = [\n\t{\n\t\tdisplayName: 'Options',\n\t\tname: 'options',\n\t\ttype: 'collection',\n\t\tplaceholder: 'Add Option',\n\t\tdefault: {},\n\t\toptions: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Simplify',\n\t\t\t\tname: 'simple',\n\t\t\t\ttype: 'boolean',\n\t\t\t\tdefault: true,\n\t\t\t\tdescription:\n\t\t\t\t\t'Whether to return a simplified version of the response instead of the raw data',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Return Column Names',\n\t\t\t\tname: 'convert',\n\t\t\t\ttype: 'boolean',\n\t\t\t\tdefault: true,\n\t\t\t\tdescription: 'Whether to return the column keys (false) or the column names (true)',\n\t\t\t},\n\t\t],\n\t},\n];\n\nconst displayOptions = {\n\tshow: {\n\t\tresource: ['row'],\n\t\toperation: ['get'],\n\t},\n};\n\nexport const description = updateDisplayOptions(displayOptions, properties);\n\nexport async function execute(\n\tthis: IExecuteFunctions,\n\tindex: number,\n): Promise<INodeExecutionData[]> {\n\t// get parameters\n\tconst tableName = this.getNodeParameter('tableName', index) as string;\n\tconst rowId = this.getNodeParameter('rowId', index) as string;\n\tconst options = this.getNodeParameter('options', index);\n\n\t// get collaborators\n\tconst collaborators = await getBaseCollaborators.call(this);\n\n\t// get rows\n\tconst sqlResult = (await seaTableApiRequest.call(\n\t\tthis,\n\t\t{},\n\t\t'POST',\n\t\t'/api-gateway/api/v2/dtables/{{dtable_uuid}}/sql/',\n\t\t{\n\t\t\tsql: `SELECT * FROM \\`${tableName}\\` WHERE _id = '${rowId}'`,\n\t\t\tconvert_keys: options.convert ?? true,\n\t\t},\n\t)) as IRowResponse;\n\tconst metadata = sqlResult.metadata as IDtableMetadataColumn[];\n\tconst rows = sqlResult.results;\n\n\t// hide columns like button\n\trows.map((row) => enrichColumns(row, metadata, collaborators));\n\tconst simple = options.simple ?? true;\n\t// remove columns starting with _ if simple;\n\tif (simple) {\n\t\trows.map((row) => simplify_new(row));\n\t}\n\n\treturn this.helpers.returnJsonArray(rows as IDataObject[]);\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAMO;AAEP,8BAKO;AAGA,MAAM,aAAgC;AAAA,EAC5C;AAAA,IACC,aAAa;AAAA,IACb,MAAM;AAAA,IACN,MAAM;AAAA,IACN,aAAa;AAAA,IACb,SAAS,CAAC;AAAA,IACV,SAAS;AAAA,MACR;AAAA,QACC,aAAa;AAAA,QACb,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,QACT,aACC;AAAA,MACF;AAAA,MACA;AAAA,QACC,aAAa;AAAA,QACb,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,QACT,aAAa;AAAA,MACd;AAAA,IACD;AAAA,EACD;AACD;AAEA,MAAM,iBAAiB;AAAA,EACtB,MAAM;AAAA,IACL,UAAU,CAAC,KAAK;AAAA,IAChB,WAAW,CAAC,KAAK;AAAA,EAClB;AACD;AAEO,MAAM,kBAAc,0CAAqB,gBAAgB,UAAU;AAE1E,eAAsB,QAErB,OACgC;AAEhC,QAAM,YAAY,KAAK,iBAAiB,aAAa,KAAK;AAC1D,QAAM,QAAQ,KAAK,iBAAiB,SAAS,KAAK;AAClD,QAAM,UAAU,KAAK,iBAAiB,WAAW,KAAK;AAGtD,QAAM,gBAAgB,MAAM,6CAAqB,KAAK,IAAI;AAG1D,QAAM,YAAa,MAAM,2CAAmB;AAAA,IAC3C;AAAA,IACA,CAAC;AAAA,IACD;AAAA,IACA;AAAA,IACA;AAAA,MACC,KAAK,mBAAmB,SAAS,mBAAmB,KAAK;AAAA,MACzD,cAAc,QAAQ,WAAW;AAAA,IAClC;AAAA,EACD;AACA,QAAM,WAAW,UAAU;AAC3B,QAAM,OAAO,UAAU;AAGvB,OAAK,IAAI,CAAC,YAAQ,uCAAc,KAAK,UAAU,aAAa,CAAC;AAC7D,QAAM,SAAS,QAAQ,UAAU;AAEjC,MAAI,QAAQ;AACX,SAAK,IAAI,CAAC,YAAQ,sCAAa,GAAG,CAAC;AAAA,EACpC;AAEA,SAAO,KAAK,QAAQ,gBAAgB,IAAqB;AAC1D;","names":[]}