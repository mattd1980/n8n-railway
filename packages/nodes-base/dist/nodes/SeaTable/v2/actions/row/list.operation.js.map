{"version":3,"sources":["../../../../../../nodes/SeaTable/v2/actions/row/list.operation.ts"],"sourcesContent":["import {\n\ttype IDataObject,\n\ttype INodeExecutionData,\n\ttype INodeProperties,\n\ttype IExecuteFunctions,\n\tupdateDisplayOptions,\n} from 'n8n-workflow';\n\nimport {\n\tseaTableApiRequest,\n\tenrichColumns,\n\tsimplify_new,\n\tgetBaseCollaborators,\n} from '../../GenericFunctions';\nimport type { IRow } from '../Interfaces';\n\nexport const properties: INodeProperties[] = [\n\t{\n\t\t// eslint-disable-next-line n8n-nodes-base/node-param-display-name-wrong-for-dynamic-options\n\t\tdisplayName: 'View Name',\n\t\tname: 'viewName',\n\t\ttype: 'options',\n\t\ttypeOptions: {\n\t\t\tloadOptionsDependsOn: ['tableName'],\n\t\t\tloadOptionsMethod: 'getTableViews',\n\t\t},\n\t\tdefault: '',\n\t\t// eslint-disable-next-line n8n-nodes-base/node-param-description-wrong-for-dynamic-options\n\t\tdescription:\n\t\t\t'The name of SeaTable view to access, or specify by using an expression. Provide it in the way \"col.name:::col.type\".',\n\t},\n\t{\n\t\tdisplayName: 'Options',\n\t\tname: 'options',\n\t\ttype: 'collection',\n\t\tplaceholder: 'Add Option',\n\t\tdefault: {},\n\t\toptions: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Simplify',\n\t\t\t\tname: 'simple',\n\t\t\t\ttype: 'boolean',\n\t\t\t\tdefault: true,\n\t\t\t\tdescription:\n\t\t\t\t\t'Whether to return a simplified version of the response instead of the raw data',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Return Column Names',\n\t\t\t\tname: 'convert',\n\t\t\t\ttype: 'boolean',\n\t\t\t\tdefault: true,\n\t\t\t\tdescription: 'Whether to return the column keys (false) or the column names (true)',\n\t\t\t},\n\t\t],\n\t},\n];\n\nconst displayOptions = {\n\tshow: {\n\t\tresource: ['row'],\n\t\toperation: ['list'],\n\t},\n};\n\nexport const description = updateDisplayOptions(displayOptions, properties);\n\nexport async function execute(\n\tthis: IExecuteFunctions,\n\tindex: number,\n): Promise<INodeExecutionData[]> {\n\t// get parameters\n\tconst tableName = this.getNodeParameter('tableName', index) as string;\n\tconst viewName = this.getNodeParameter('viewName', index) as string;\n\tconst options = this.getNodeParameter('options', index);\n\n\t// get collaborators\n\tconst collaborators = await getBaseCollaborators.call(this);\n\n\t// get rows\n\tconst requestMeta = await seaTableApiRequest.call(\n\t\tthis,\n\t\t{},\n\t\t'GET',\n\t\t'/api-gateway/api/v2/dtables/{{dtable_uuid}}/metadata/',\n\t);\n\n\tconst requestRows = await seaTableApiRequest.call(\n\t\tthis,\n\t\t{},\n\t\t'GET',\n\t\t'/api-gateway/api/v2/dtables/{{dtable_uuid}}/rows/',\n\t\t{},\n\t\t{\n\t\t\ttable_name: tableName,\n\t\t\tview_name: viewName,\n\t\t\tlimit: 1000,\n\t\t\tconvert_keys: options.convert ?? true,\n\t\t},\n\t);\n\n\tconst metadata =\n\t\trequestMeta.metadata.tables.find((table: { name: string }) => table.name === tableName)\n\t\t\t?.columns ?? [];\n\tconst rows = requestRows.rows as IRow[];\n\n\t// hide columns like button\n\trows.map((row) => enrichColumns(row, metadata, collaborators));\n\n\tconst simple = options.simple ?? true;\n\t// remove columns starting with _ if simple;\n\tif (simple) {\n\t\trows.map((row) => simplify_new(row));\n\t}\n\n\treturn this.helpers.returnJsonArray(rows as IDataObject[]);\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAMO;AAEP,8BAKO;AAGA,MAAM,aAAgC;AAAA,EAC5C;AAAA;AAAA,IAEC,aAAa;AAAA,IACb,MAAM;AAAA,IACN,MAAM;AAAA,IACN,aAAa;AAAA,MACZ,sBAAsB,CAAC,WAAW;AAAA,MAClC,mBAAmB;AAAA,IACpB;AAAA,IACA,SAAS;AAAA;AAAA,IAET,aACC;AAAA,EACF;AAAA,EACA;AAAA,IACC,aAAa;AAAA,IACb,MAAM;AAAA,IACN,MAAM;AAAA,IACN,aAAa;AAAA,IACb,SAAS,CAAC;AAAA,IACV,SAAS;AAAA,MACR;AAAA,QACC,aAAa;AAAA,QACb,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,QACT,aACC;AAAA,MACF;AAAA,MACA;AAAA,QACC,aAAa;AAAA,QACb,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,QACT,aAAa;AAAA,MACd;AAAA,IACD;AAAA,EACD;AACD;AAEA,MAAM,iBAAiB;AAAA,EACtB,MAAM;AAAA,IACL,UAAU,CAAC,KAAK;AAAA,IAChB,WAAW,CAAC,MAAM;AAAA,EACnB;AACD;AAEO,MAAM,kBAAc,0CAAqB,gBAAgB,UAAU;AAE1E,eAAsB,QAErB,OACgC;AAEhC,QAAM,YAAY,KAAK,iBAAiB,aAAa,KAAK;AAC1D,QAAM,WAAW,KAAK,iBAAiB,YAAY,KAAK;AACxD,QAAM,UAAU,KAAK,iBAAiB,WAAW,KAAK;AAGtD,QAAM,gBAAgB,MAAM,6CAAqB,KAAK,IAAI;AAG1D,QAAM,cAAc,MAAM,2CAAmB;AAAA,IAC5C;AAAA,IACA,CAAC;AAAA,IACD;AAAA,IACA;AAAA,EACD;AAEA,QAAM,cAAc,MAAM,2CAAmB;AAAA,IAC5C;AAAA,IACA,CAAC;AAAA,IACD;AAAA,IACA;AAAA,IACA,CAAC;AAAA,IACD;AAAA,MACC,YAAY;AAAA,MACZ,WAAW;AAAA,MACX,OAAO;AAAA,MACP,cAAc,QAAQ,WAAW;AAAA,IAClC;AAAA,EACD;AAEA,QAAM,WACL,YAAY,SAAS,OAAO,KAAK,CAAC,UAA4B,MAAM,SAAS,SAAS,GACnF,WAAW,CAAC;AAChB,QAAM,OAAO,YAAY;AAGzB,OAAK,IAAI,CAAC,YAAQ,uCAAc,KAAK,UAAU,aAAa,CAAC;AAE7D,QAAM,SAAS,QAAQ,UAAU;AAEjC,MAAI,QAAQ;AACX,SAAK,IAAI,CAAC,YAAQ,sCAAa,GAAG,CAAC;AAAA,EACpC;AAEA,SAAO,KAAK,QAAQ,gBAAgB,IAAqB;AAC1D;","names":[]}