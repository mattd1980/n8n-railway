{"version":3,"sources":["../../../../nodes/SeaTable/v2/SeaTableTriggerV2.node.ts"],"sourcesContent":["import moment from 'moment-timezone';\nimport {\n\ttype IPollFunctions,\n\ttype INodeExecutionData,\n\ttype INodeType,\n\ttype INodeTypeDescription,\n\tNodeConnectionTypes,\n\ttype INodeTypeBaseDescription,\n\ttype IDataObject,\n} from 'n8n-workflow';\n\nimport type {\n\tICtx,\n\tIRow,\n\tIRowResponse,\n\tIGetMetadataResult,\n\tIGetRowsResult,\n\tIDtableMetadataColumn,\n\tICollaborator,\n\tICollaboratorsResult,\n\tIColumnDigitalSignature,\n} from './actions/Interfaces';\nimport { seaTableApiRequest, simplify_new, enrichColumns } from './GenericFunctions';\nimport { loadOptions } from './methods';\n\nexport class SeaTableTriggerV2 implements INodeType {\n\tdescription: INodeTypeDescription;\n\n\tconstructor(baseDescription: INodeTypeBaseDescription) {\n\t\tthis.description = {\n\t\t\t...baseDescription,\n\t\t\tversion: 2,\n\t\t\tsubtitle: '={{$parameter[\"event\"]}}',\n\t\t\tdefaults: {\n\t\t\t\tname: 'SeaTable Trigger',\n\t\t\t},\n\t\t\tcredentials: [\n\t\t\t\t{\n\t\t\t\t\tname: 'seaTableApi',\n\t\t\t\t\trequired: true,\n\t\t\t\t},\n\t\t\t],\n\t\t\tpolling: true,\n\t\t\tinputs: [],\n\t\t\toutputs: [NodeConnectionTypes.Main],\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'Event',\n\t\t\t\t\tname: 'event',\n\t\t\t\t\ttype: 'options',\n\t\t\t\t\toptions: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'New Row',\n\t\t\t\t\t\t\tvalue: 'newRow',\n\t\t\t\t\t\t\tdescription: 'Trigger on newly created rows',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'New or Updated Row',\n\t\t\t\t\t\t\tvalue: 'updatedRow',\n\t\t\t\t\t\t\tdescription: 'Trigger has recently created or modified rows',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'New Signature',\n\t\t\t\t\t\t\tvalue: 'newAsset',\n\t\t\t\t\t\t\tdescription: 'Trigger on new signatures',\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t\tdefault: 'newRow',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t// eslint-disable-next-line n8n-nodes-base/node-param-display-name-wrong-for-dynamic-options\n\t\t\t\t\tdisplayName: 'Table Name',\n\t\t\t\t\tname: 'tableName',\n\t\t\t\t\ttype: 'options',\n\t\t\t\t\trequired: true,\n\t\t\t\t\ttypeOptions: {\n\t\t\t\t\t\tloadOptionsMethod: 'getTableNames',\n\t\t\t\t\t},\n\t\t\t\t\tdefault: '',\n\t\t\t\t\t// eslint-disable-next-line n8n-nodes-base/node-param-description-wrong-for-dynamic-options\n\t\t\t\t\tdescription:\n\t\t\t\t\t\t'The name of SeaTable table to access. Choose from the list, or specify the name using an <a href=\"https://docs.n8n.io/code-examples/expressions/\">expression</a>.',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t// eslint-disable-next-line n8n-nodes-base/node-param-display-name-wrong-for-dynamic-options\n\t\t\t\t\tdisplayName: 'View Name',\n\t\t\t\t\tname: 'viewName',\n\t\t\t\t\ttype: 'options',\n\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\tevent: ['newRow', 'updatedRow'],\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\ttypeOptions: {\n\t\t\t\t\t\tloadOptionsDependsOn: ['tableName'],\n\t\t\t\t\t\tloadOptionsMethod: 'getTableViews',\n\t\t\t\t\t},\n\t\t\t\t\tdefault: '',\n\t\t\t\t\t// eslint-disable-next-line n8n-nodes-base/node-param-description-wrong-for-dynamic-options\n\t\t\t\t\tdescription:\n\t\t\t\t\t\t'The name of SeaTable view to access. Choose from the list, or specify the name using an <a href=\"https://docs.n8n.io/code-examples/expressions/\">expression</a>.',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t// eslint-disable-next-line n8n-nodes-base/node-param-display-name-wrong-for-dynamic-options\n\t\t\t\t\tdisplayName: 'Signature Column',\n\t\t\t\t\tname: 'assetColumn',\n\t\t\t\t\ttype: 'options',\n\t\t\t\t\trequired: true,\n\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\tevent: ['newAsset'],\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\ttypeOptions: {\n\t\t\t\t\t\tloadOptionsDependsOn: ['tableName'],\n\t\t\t\t\t\tloadOptionsMethod: 'getSignatureColumns',\n\t\t\t\t\t},\n\t\t\t\t\tdefault: '',\n\t\t\t\t\t// eslint-disable-next-line n8n-nodes-base/node-param-description-wrong-for-dynamic-options\n\t\t\t\t\tdescription:\n\t\t\t\t\t\t'Select the digital-signature column that should be tracked. Choose from the list, or specify the name using an <a href=\"https://docs.n8n.io/code-examples/expressions/\">expression</a>.',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'Options',\n\t\t\t\t\tname: 'options',\n\t\t\t\t\ttype: 'collection',\n\t\t\t\t\tplaceholder: 'Add Option',\n\t\t\t\t\tdefault: {},\n\t\t\t\t\toptions: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tdisplayName: 'Simplify',\n\t\t\t\t\t\t\tname: 'simple',\n\t\t\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\t\t\tdefault: true,\n\t\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t\t'Whether to return a simplified version of the response instead of the raw data',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tdisplayName: 'Return Column Names',\n\t\t\t\t\t\t\tname: 'convert',\n\t\t\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\t\t\tdefault: true,\n\t\t\t\t\t\t\tdescription: 'Whether to return the column keys (false) or the column names (true)',\n\t\t\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\t\t\t'/event': ['newRow', 'updatedRow'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tdisplayName: '\"Fetch Test Event\" returns max. three items of the last hour.',\n\t\t\t\t\tname: 'notice',\n\t\t\t\t\ttype: 'notice',\n\t\t\t\t\tdefault: '',\n\t\t\t\t},\n\t\t\t],\n\t\t};\n\t}\n\n\tmethods = { loadOptions };\n\n\tasync poll(this: IPollFunctions): Promise<INodeExecutionData[][] | null> {\n\t\tconst webhookData = this.getWorkflowStaticData('node');\n\t\tconst event = this.getNodeParameter('event') as string;\n\t\tconst tableName = this.getNodeParameter('tableName') as string;\n\t\tconst viewName = (event !== 'newAsset' ? this.getNodeParameter('viewName') : '') as string;\n\t\tconst assetColumn = (\n\t\t\tevent === 'newAsset' ? this.getNodeParameter('assetColumn') : ''\n\t\t) as string;\n\t\tconst options = this.getNodeParameter('options') as IDataObject;\n\n\t\tconst ctx: ICtx = {};\n\n\t\tconst startDate =\n\t\t\tthis.getMode() === 'manual'\n\t\t\t\t? moment().utc().subtract(1, 'h').format()\n\t\t\t\t: (webhookData.lastTimeChecked as string);\n\t\tconst endDate = (webhookData.lastTimeChecked = moment().utc().format());\n\n\t\tconst filterField = event === 'newRow' ? '_ctime' : '_mtime';\n\n\t\tlet requestMeta: IGetMetadataResult;\n\t\tlet requestRows: IGetRowsResult;\n\t\tlet metadata: IDtableMetadataColumn[] = [];\n\t\tlet rows: IRow[];\n\t\tlet sqlResult: IRowResponse;\n\n\t\tconst limit = this.getMode() === 'manual' ? 3 : 1000;\n\n\t\t// New Signature\n\t\tif (event === 'newAsset') {\n\t\t\tconst endpoint = '/api-gateway/api/v2/dtables/{{dtable_uuid}}/sql';\n\t\t\tsqlResult = await seaTableApiRequest.call(this, ctx, 'POST', endpoint, {\n\t\t\t\tsql: `SELECT _id, _ctime, _mtime, \\`${assetColumn}\\` FROM ${tableName} WHERE \\`${assetColumn}\\` IS NOT NULL ORDER BY _mtime DESC LIMIT ${limit}`,\n\t\t\t\tconvert_keys: options.convert ?? true,\n\t\t\t});\n\n\t\t\tmetadata = sqlResult.metadata as IDtableMetadataColumn[];\n\t\t\tconst columnType = metadata.find((obj) => obj.name == assetColumn);\n\t\t\tconst assetColumnType = columnType?.type || null;\n\n\t\t\t// remove unwanted entries\n\t\t\trows = sqlResult.results.filter((obj) => new Date(obj._mtime) > new Date(startDate));\n\n\t\t\t// split the objects into new lines (not necessary for digital-sign)\n\t\t\tconst newRows: any = [];\n\t\t\tfor (const row of rows) {\n\t\t\t\tif (assetColumnType === 'digital-sign') {\n\t\t\t\t\tconst signature = (row[assetColumn] as IColumnDigitalSignature) || [];\n\t\t\t\t\tif (signature.sign_time) {\n\t\t\t\t\t\tif (new Date(signature.sign_time) > new Date(startDate)) {\n\t\t\t\t\t\t\tnewRows.push(signature);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// View => use getRows.\n\t\telse if (viewName || viewName === '') {\n\t\t\trequestMeta = await seaTableApiRequest.call(\n\t\t\t\tthis,\n\t\t\t\tctx,\n\t\t\t\t'GET',\n\t\t\t\t'/api-gateway/api/v2/dtables/{{dtable_uuid}}/metadata/',\n\t\t\t);\n\t\t\trequestRows = await seaTableApiRequest.call(\n\t\t\t\tthis,\n\t\t\t\tctx,\n\t\t\t\t'GET',\n\t\t\t\t'/api-gateway/api/v2/dtables/{{dtable_uuid}}/rows/',\n\t\t\t\t{},\n\t\t\t\t{\n\t\t\t\t\ttable_name: tableName,\n\t\t\t\t\tview_name: viewName,\n\t\t\t\t\tlimit,\n\t\t\t\t\tconvert_keys: options.convert ?? true,\n\t\t\t\t},\n\t\t\t);\n\n\t\t\tmetadata =\n\t\t\t\trequestMeta.metadata.tables.find((table) => table.name === tableName)?.columns ?? [];\n\n\t\t\t// remove unwanted rows that are too old (compare startDate with _ctime or _mtime)\n\t\t\tif (this.getMode() === 'manual') {\n\t\t\t\trows = requestRows.rows;\n\t\t\t} else {\n\t\t\t\trows = requestRows.rows.filter((obj) => new Date(obj[filterField]) > new Date(startDate));\n\t\t\t}\n\t\t} else {\n\t\t\tconst endpoint = '/api-gateway/api/v2/dtables/{{dtable_uuid}}/sql';\n\t\t\tconst sqlQuery = `SELECT * FROM \\`${tableName}\\` WHERE ${filterField} BETWEEN \"${moment(\n\t\t\t\tstartDate,\n\t\t\t).format('YYYY-MM-D HH:mm:ss')}\" AND \"${moment(endDate).format(\n\t\t\t\t'YYYY-MM-D HH:mm:ss',\n\t\t\t)}\" ORDER BY ${filterField} DESC LIMIT ${limit}`;\n\t\t\tsqlResult = await seaTableApiRequest.call(this, ctx, 'POST', endpoint, {\n\t\t\t\tsql: sqlQuery,\n\t\t\t\tconvert_keys: options.convert ?? true,\n\t\t\t});\n\t\t\tmetadata = sqlResult.metadata as IDtableMetadataColumn[];\n\t\t\trows = sqlResult.results;\n\t\t}\n\n\t\tconst collaboratorsResult: ICollaboratorsResult = await seaTableApiRequest.call(\n\t\t\tthis,\n\t\t\tctx,\n\t\t\t'GET',\n\t\t\t'/api-gateway/api/v2/dtables/{{dtable_uuid}}/related-users/',\n\t\t);\n\t\tconst collaborators: ICollaborator[] = collaboratorsResult.user_list || [];\n\n\t\tif (Array.isArray(rows) && rows.length > 0) {\n\t\t\tconst simple = options.simple ?? true;\n\t\t\t// remove columns starting with _ if simple;\n\t\t\tif (simple) {\n\t\t\t\trows = rows.map((row) => simplify_new(row));\n\t\t\t}\n\n\t\t\t// enrich column types like {collaborator, creator, last_modifier}, {image, file}\n\t\t\t// remove button column from rows\n\t\t\trows = rows.map((row) => enrichColumns(row, metadata, collaborators));\n\n\t\t\t// prepare for final output\n\t\t\treturn [this.helpers.returnJsonArray(rows)];\n\t\t}\n\n\t\treturn null;\n\t}\n}\n"],"mappings":"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","names":["moment"]}