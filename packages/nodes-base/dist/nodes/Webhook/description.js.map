{"version":3,"sources":["../../../nodes/Webhook/description.ts"],"sourcesContent":["import type { INodeProperties, INodeTypeDescription, IWebhookDescription } from 'n8n-workflow';\n\nimport { getResponseCode, getResponseData } from './utils';\n\nexport const defaultWebhookDescription: IWebhookDescription = {\n\tname: 'default',\n\thttpMethod: '={{$parameter[\"httpMethod\"] || \"GET\"}}',\n\tisFullPath: true,\n\tresponseCode: `={{(${getResponseCode})($parameter)}}`,\n\tresponseMode: '={{$parameter[\"responseMode\"]}}',\n\tresponseData: `={{(${getResponseData})($parameter)}}`,\n\tresponseBinaryPropertyName: '={{$parameter[\"responseBinaryPropertyName\"]}}',\n\tresponseContentType: '={{$parameter[\"options\"][\"responseContentType\"]}}',\n\tresponsePropertyName: '={{$parameter[\"options\"][\"responsePropertyName\"]}}',\n\tresponseHeaders: '={{$parameter[\"options\"][\"responseHeaders\"]}}',\n\tpath: '={{$parameter[\"path\"]}}',\n};\n\nexport const credentialsProperty = (\n\tpropertyName = 'authentication',\n): INodeTypeDescription['credentials'] => [\n\t{\n\t\tname: 'httpBasicAuth',\n\t\trequired: true,\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\t[propertyName]: ['basicAuth'],\n\t\t\t},\n\t\t},\n\t},\n\t{\n\t\tname: 'httpHeaderAuth',\n\t\trequired: true,\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\t[propertyName]: ['headerAuth'],\n\t\t\t},\n\t\t},\n\t},\n\t{\n\t\tname: 'jwtAuth',\n\t\trequired: true,\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\t[propertyName]: ['jwtAuth'],\n\t\t\t},\n\t\t},\n\t},\n];\n\nexport const authenticationProperty = (propertyName = 'authentication'): INodeProperties => ({\n\tdisplayName: 'Authentication',\n\tname: propertyName,\n\ttype: 'options',\n\toptions: [\n\t\t{\n\t\t\tname: 'Basic Auth',\n\t\t\tvalue: 'basicAuth',\n\t\t},\n\t\t{\n\t\t\tname: 'Header Auth',\n\t\t\tvalue: 'headerAuth',\n\t\t},\n\t\t{\n\t\t\tname: 'JWT Auth',\n\t\t\tvalue: 'jwtAuth',\n\t\t},\n\t\t{\n\t\t\tname: 'None',\n\t\t\tvalue: 'none',\n\t\t},\n\t],\n\tdefault: 'none',\n\tdescription: 'The way to authenticate',\n});\n\nexport const httpMethodsProperty: INodeProperties = {\n\tdisplayName: 'HTTP Method',\n\tname: 'httpMethod',\n\ttype: 'options',\n\toptions: [\n\t\t{\n\t\t\tname: 'DELETE',\n\t\t\tvalue: 'DELETE',\n\t\t},\n\t\t{\n\t\t\tname: 'GET',\n\t\t\tvalue: 'GET',\n\t\t},\n\t\t{\n\t\t\tname: 'HEAD',\n\t\t\tvalue: 'HEAD',\n\t\t},\n\t\t{\n\t\t\tname: 'PATCH',\n\t\t\tvalue: 'PATCH',\n\t\t},\n\t\t{\n\t\t\tname: 'POST',\n\t\t\tvalue: 'POST',\n\t\t},\n\t\t{\n\t\t\tname: 'PUT',\n\t\t\tvalue: 'PUT',\n\t\t},\n\t],\n\tdefault: 'GET',\n\tdescription: 'The HTTP method to listen to',\n};\n\nexport const responseCodeProperty: INodeProperties = {\n\tdisplayName: 'Response Code',\n\tname: 'responseCode',\n\ttype: 'number',\n\tdisplayOptions: {\n\t\thide: {\n\t\t\tresponseMode: ['responseNode'],\n\t\t},\n\t},\n\ttypeOptions: {\n\t\tminValue: 100,\n\t\tmaxValue: 599,\n\t},\n\tdefault: 200,\n\tdescription: 'The HTTP Response code to return',\n};\n\nexport const responseModeProperty: INodeProperties = {\n\tdisplayName: 'Respond',\n\tname: 'responseMode',\n\ttype: 'options',\n\toptions: [\n\t\t{\n\t\t\tname: 'Immediately',\n\t\t\tvalue: 'onReceived',\n\t\t\tdescription: 'As soon as this node executes',\n\t\t},\n\t\t{\n\t\t\tname: 'When Last Node Finishes',\n\t\t\tvalue: 'lastNode',\n\t\t\tdescription: 'Returns data of the last-executed node',\n\t\t},\n\t\t{\n\t\t\tname: \"Using 'Respond to Webhook' Node\",\n\t\t\tvalue: 'responseNode',\n\t\t\tdescription: 'Response defined in that node',\n\t\t},\n\t],\n\tdefault: 'onReceived',\n\tdescription: 'When and how to respond to the webhook',\n};\n\nexport const responseDataProperty: INodeProperties = {\n\tdisplayName: 'Response Data',\n\tname: 'responseData',\n\ttype: 'options',\n\tdisplayOptions: {\n\t\tshow: {\n\t\t\tresponseMode: ['lastNode'],\n\t\t},\n\t},\n\toptions: [\n\t\t{\n\t\t\tname: 'All Entries',\n\t\t\tvalue: 'allEntries',\n\t\t\tdescription: 'Returns all the entries of the last node. Always returns an array.',\n\t\t},\n\t\t{\n\t\t\tname: 'First Entry JSON',\n\t\t\tvalue: 'firstEntryJson',\n\t\t\tdescription:\n\t\t\t\t'Returns the JSON data of the first entry of the last node. Always returns a JSON object.',\n\t\t},\n\t\t{\n\t\t\tname: 'First Entry Binary',\n\t\t\tvalue: 'firstEntryBinary',\n\t\t\tdescription:\n\t\t\t\t'Returns the binary data of the first entry of the last node. Always returns a binary file.',\n\t\t},\n\t\t{\n\t\t\tname: 'No Response Body',\n\t\t\tvalue: 'noData',\n\t\t\tdescription: 'Returns without a body',\n\t\t},\n\t],\n\tdefault: 'firstEntryJson',\n\tdescription:\n\t\t'What data should be returned. If it should return all items as an array or only the first item as object.',\n};\n\nexport const responseBinaryPropertyNameProperty: INodeProperties = {\n\tdisplayName: 'Property Name',\n\tname: 'responseBinaryPropertyName',\n\ttype: 'string',\n\trequired: true,\n\tdefault: 'data',\n\tdisplayOptions: {\n\t\tshow: {\n\t\t\tresponseData: ['firstEntryBinary'],\n\t\t},\n\t},\n\tdescription: 'Name of the binary property to return',\n};\n\nexport const optionsProperty: INodeProperties = {\n\tdisplayName: 'Options',\n\tname: 'options',\n\ttype: 'collection',\n\tplaceholder: 'Add option',\n\tdefault: {},\n\toptions: [\n\t\t{\n\t\t\tdisplayName: 'Binary File',\n\t\t\tname: 'binaryData',\n\t\t\ttype: 'boolean',\n\t\t\tdisplayOptions: {\n\t\t\t\tshow: {\n\t\t\t\t\t'/httpMethod': ['PATCH', 'PUT', 'POST'],\n\t\t\t\t\t'@version': [1],\n\t\t\t\t},\n\t\t\t},\n\t\t\tdefault: false,\n\t\t\tdescription: 'Whether the webhook will receive binary data',\n\t\t},\n\t\t{\n\t\t\tdisplayName: 'Put Output File in Field',\n\t\t\tname: 'binaryPropertyName',\n\t\t\ttype: 'string',\n\t\t\tdefault: 'data',\n\t\t\tdisplayOptions: {\n\t\t\t\tshow: {\n\t\t\t\t\tbinaryData: [true],\n\t\t\t\t\t'@version': [1],\n\t\t\t\t},\n\t\t\t},\n\t\t\thint: 'The name of the output binary field to put the file in',\n\t\t\tdescription:\n\t\t\t\t'If the data gets received via \"Form-Data Multipart\" it will be the prefix and a number starting with 0 will be attached to it',\n\t\t},\n\t\t{\n\t\t\tdisplayName: 'Field Name for Binary Data',\n\t\t\tname: 'binaryPropertyName',\n\t\t\ttype: 'string',\n\t\t\tdefault: 'data',\n\t\t\tdisplayOptions: {\n\t\t\t\thide: {\n\t\t\t\t\t'@version': [1],\n\t\t\t\t},\n\t\t\t},\n\t\t\tdescription:\n\t\t\t\t'The name of the output field to put any binary file data in. Only relevant if binary data is received.',\n\t\t},\n\t\t{\n\t\t\tdisplayName: 'Ignore Bots',\n\t\t\tname: 'ignoreBots',\n\t\t\ttype: 'boolean',\n\t\t\tdefault: false,\n\t\t\tdescription: 'Whether to ignore requests from bots like link previewers and web crawlers',\n\t\t},\n\t\t{\n\t\t\tdisplayName: 'IP(s) Whitelist',\n\t\t\tname: 'ipWhitelist',\n\t\t\ttype: 'string',\n\t\t\tplaceholder: 'e.g. 127.0.0.1',\n\t\t\tdefault: '',\n\t\t\tdescription: 'Comma-separated list of allowed IP addresses. Leave empty to allow all IPs.',\n\t\t},\n\t\t{\n\t\t\tdisplayName: 'No Response Body',\n\t\t\tname: 'noResponseBody',\n\t\t\ttype: 'boolean',\n\t\t\tdefault: false,\n\t\t\tdescription: 'Whether to send any body in the response',\n\t\t\tdisplayOptions: {\n\t\t\t\thide: {\n\t\t\t\t\trawBody: [true],\n\t\t\t\t},\n\t\t\t\tshow: {\n\t\t\t\t\t'/responseMode': ['onReceived'],\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tdisplayName: 'Raw Body',\n\t\t\tname: 'rawBody',\n\t\t\ttype: 'boolean',\n\t\t\tdisplayOptions: {\n\t\t\t\tshow: {\n\t\t\t\t\t'@version': [1],\n\t\t\t\t},\n\t\t\t\thide: {\n\t\t\t\t\tbinaryData: [true],\n\t\t\t\t\tnoResponseBody: [true],\n\t\t\t\t},\n\t\t\t},\n\t\t\tdefault: false,\n\t\t\t// eslint-disable-next-line n8n-nodes-base/node-param-description-boolean-without-whether\n\t\t\tdescription: 'Raw body (binary)',\n\t\t},\n\t\t{\n\t\t\tdisplayName: 'Raw Body',\n\t\t\tname: 'rawBody',\n\t\t\ttype: 'boolean',\n\t\t\tdisplayOptions: {\n\t\t\t\thide: {\n\t\t\t\t\tnoResponseBody: [true],\n\t\t\t\t\t'@version': [1],\n\t\t\t\t},\n\t\t\t},\n\t\t\tdefault: false,\n\t\t\tdescription: 'Whether to return the raw body',\n\t\t},\n\t\t{\n\t\t\tdisplayName: 'Response Data',\n\t\t\tname: 'responseData',\n\t\t\ttype: 'string',\n\t\t\tdisplayOptions: {\n\t\t\t\tshow: {\n\t\t\t\t\t'/responseMode': ['onReceived'],\n\t\t\t\t},\n\t\t\t\thide: {\n\t\t\t\t\tnoResponseBody: [true],\n\t\t\t\t},\n\t\t\t},\n\t\t\tdefault: '',\n\t\t\tplaceholder: 'success',\n\t\t\tdescription: 'Custom response data to send',\n\t\t},\n\t\t{\n\t\t\tdisplayName: 'Response Content-Type',\n\t\t\tname: 'responseContentType',\n\t\t\ttype: 'string',\n\t\t\tdisplayOptions: {\n\t\t\t\tshow: {\n\t\t\t\t\t'/responseData': ['firstEntryJson'],\n\t\t\t\t\t'/responseMode': ['lastNode'],\n\t\t\t\t},\n\t\t\t},\n\t\t\tdefault: '',\n\t\t\tplaceholder: 'application/xml',\n\t\t\t// eslint-disable-next-line n8n-nodes-base/node-param-description-miscased-json\n\t\t\tdescription:\n\t\t\t\t'Set a custom content-type to return if another one as the \"application/json\" should be returned',\n\t\t},\n\t\t{\n\t\t\tdisplayName: 'Response Headers',\n\t\t\tname: 'responseHeaders',\n\t\t\tplaceholder: 'Add Response Header',\n\t\t\tdescription: 'Add headers to the webhook response',\n\t\t\ttype: 'fixedCollection',\n\t\t\ttypeOptions: {\n\t\t\t\tmultipleValues: true,\n\t\t\t},\n\t\t\tdefault: {},\n\t\t\toptions: [\n\t\t\t\t{\n\t\t\t\t\tname: 'entries',\n\t\t\t\t\tdisplayName: 'Entries',\n\t\t\t\t\tvalues: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tdisplayName: 'Name',\n\t\t\t\t\t\t\tname: 'name',\n\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\t\tdescription: 'Name of the header',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tdisplayName: 'Value',\n\t\t\t\t\t\t\tname: 'value',\n\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\t\tdescription: 'Value of the header',\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t],\n\t\t},\n\t\t{\n\t\t\tdisplayName: 'Property Name',\n\t\t\tname: 'responsePropertyName',\n\t\t\ttype: 'string',\n\t\t\tdisplayOptions: {\n\t\t\t\tshow: {\n\t\t\t\t\t'/responseData': ['firstEntryJson'],\n\t\t\t\t\t'/responseMode': ['lastNode'],\n\t\t\t\t},\n\t\t\t},\n\t\t\tdefault: 'data',\n\t\t\tdescription: 'Name of the property to return the data of instead of the whole JSON',\n\t\t},\n\t],\n};\n\nexport const responseCodeSelector: INodeProperties = {\n\tdisplayName: 'Response Code',\n\tname: 'responseCode',\n\ttype: 'options',\n\toptions: [\n\t\t{ name: '200', value: 200, description: 'OK - Request has succeeded' },\n\t\t{ name: '201', value: 201, description: 'Created - Request has been fulfilled' },\n\t\t{ name: '204', value: 204, description: 'No Content - Request processed, no content returned' },\n\t\t{\n\t\t\tname: '301',\n\t\t\tvalue: 301,\n\t\t\tdescription: 'Moved Permanently - Requested resource moved permanently',\n\t\t},\n\t\t{ name: '302', value: 302, description: 'Found - Requested resource moved temporarily' },\n\t\t{ name: '304', value: 304, description: 'Not Modified - Resource has not been modified' },\n\t\t{ name: '400', value: 400, description: 'Bad Request - Request could not be understood' },\n\t\t{ name: '401', value: 401, description: 'Unauthorized - Request requires user authentication' },\n\t\t{\n\t\t\tname: '403',\n\t\t\tvalue: 403,\n\t\t\tdescription: 'Forbidden - Server understood, but refuses to fulfill',\n\t\t},\n\t\t{ name: '404', value: 404, description: 'Not Found - Server has not found a match' },\n\t\t{\n\t\t\tname: 'Custom Code',\n\t\t\tvalue: 'customCode',\n\t\t\tdescription: 'Write any HTTP code',\n\t\t},\n\t],\n\tdefault: 200,\n\tdescription: 'The HTTP response code to return',\n};\n\nexport const responseCodeOption: INodeProperties = {\n\tdisplayName: 'Response Code',\n\tname: 'responseCode',\n\tplaceholder: 'Add Response Code',\n\ttype: 'fixedCollection',\n\tdefault: {\n\t\tvalues: {\n\t\t\tresponseCode: 200,\n\t\t},\n\t},\n\toptions: [\n\t\t{\n\t\t\tname: 'values',\n\t\t\tdisplayName: 'Values',\n\t\t\tvalues: [\n\t\t\t\tresponseCodeSelector,\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'Code',\n\t\t\t\t\tname: 'customCode',\n\t\t\t\t\ttype: 'number',\n\t\t\t\t\tdefault: 200,\n\t\t\t\t\tplaceholder: 'e.g. 400',\n\t\t\t\t\ttypeOptions: {\n\t\t\t\t\t\tminValue: 100,\n\t\t\t\t\t},\n\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\tresponseCode: ['customCode'],\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t],\n\t\t},\n\t],\n\tdisplayOptions: {\n\t\tshow: {\n\t\t\t'@version': [{ _cnd: { gte: 2 } }],\n\t\t},\n\t\thide: {\n\t\t\t'/responseMode': ['responseNode'],\n\t\t},\n\t},\n};\n"],"mappings":"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","names":[]}