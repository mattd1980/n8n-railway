{"version":3,"sources":["../../../nodes/Postgres/PostgresTrigger.functions.ts"],"sourcesContent":["import { ApplicationError } from 'n8n-workflow';\nimport type {\n\tITriggerFunctions,\n\tIDataObject,\n\tILoadOptionsFunctions,\n\tINodeListSearchResult,\n\tINodeListSearchItems,\n} from 'n8n-workflow';\n\nimport { configurePostgres } from './transport';\nimport type { PgpDatabase, PostgresNodeCredentials } from './v2/helpers/interfaces';\n\nexport function prepareNames(id: string, mode: string, additionalFields: IDataObject) {\n\tlet suffix = id.replace(/-/g, '_');\n\n\tif (mode === 'manual') {\n\t\tsuffix = `${suffix}_manual`;\n\t}\n\n\tlet functionName =\n\t\t(additionalFields.functionName as string) || `n8n_trigger_function_${suffix}()`;\n\n\tif (!(functionName.includes('(') && functionName.includes(')'))) {\n\t\tfunctionName = `${functionName}()`;\n\t}\n\n\tconst triggerName = (additionalFields.triggerName as string) || `n8n_trigger_${suffix}`;\n\tconst channelName = (additionalFields.channelName as string) || `n8n_channel_${suffix}`;\n\n\tif (channelName.includes('-')) {\n\t\tthrow new ApplicationError('Channel name cannot contain hyphens (-)', { level: 'warning' });\n\t}\n\n\treturn { functionName, triggerName, channelName };\n}\n\nexport async function pgTriggerFunction(\n\tthis: ITriggerFunctions,\n\tdb: PgpDatabase,\n\tadditionalFields: IDataObject,\n\tfunctionName: string,\n\ttriggerName: string,\n\tchannelName: string,\n): Promise<void> {\n\tconst schema = this.getNodeParameter('schema', 'public', { extractValue: true }) as string;\n\tconst tableName = this.getNodeParameter('tableName', undefined, {\n\t\textractValue: true,\n\t}) as string;\n\n\tconst target = `${schema}.\"${tableName}\"`;\n\n\tconst firesOn = this.getNodeParameter('firesOn', 0) as string;\n\n\tconst functionReplace =\n\t\t\"CREATE OR REPLACE FUNCTION $1:raw RETURNS trigger LANGUAGE 'plpgsql' COST 100 VOLATILE NOT LEAKPROOF AS $BODY$ begin perform pg_notify('$2:raw', row_to_json($3:raw)::text); return null; end; $BODY$;\";\n\n\tconst dropIfExist = 'DROP TRIGGER IF EXISTS $1:raw ON $2:raw';\n\n\tconst functionExists =\n\t\t\"CREATE FUNCTION $1:raw RETURNS trigger LANGUAGE 'plpgsql' COST 100 VOLATILE NOT LEAKPROOF AS $BODY$ begin perform pg_notify('$2:raw', row_to_json($3:raw)::text); return null; end; $BODY$\";\n\n\tconst trigger =\n\t\t'CREATE TRIGGER $4:raw AFTER $3:raw ON $1:raw FOR EACH ROW EXECUTE FUNCTION $2:raw';\n\n\tconst whichData = firesOn === 'DELETE' ? 'old' : 'new';\n\n\tif (channelName.includes('-')) {\n\t\tthrow new ApplicationError('Channel name cannot contain hyphens (-)', { level: 'warning' });\n\t}\n\n\tconst replaceIfExists = additionalFields.replaceIfExists ?? false;\n\n\ttry {\n\t\tif (replaceIfExists || !(additionalFields.triggerName ?? additionalFields.functionName)) {\n\t\t\tawait db.any(functionReplace, [functionName, channelName, whichData]);\n\t\t\tawait db.any(dropIfExist, [triggerName, target, whichData]);\n\t\t} else {\n\t\t\tawait db.any(functionExists, [functionName, channelName, whichData]);\n\t\t}\n\t\tawait db.any(trigger, [target, functionName, firesOn, triggerName]);\n\t} catch (error) {\n\t\tif ((error as Error).message.includes('near \"-\"')) {\n\t\t\tthrow new ApplicationError('Names cannot contain hyphens (-)', { level: 'warning' });\n\t\t}\n\t\tthrow error;\n\t}\n}\n\nexport async function initDB(this: ITriggerFunctions | ILoadOptionsFunctions) {\n\tconst credentials = await this.getCredentials<PostgresNodeCredentials>('postgres');\n\tconst options = this.getNodeParameter('options', {}) as {\n\t\tconnectionTimeout?: number;\n\t\tdelayClosingIdleConnection?: number;\n\t};\n\treturn await configurePostgres.call(this, credentials, options);\n}\n\nexport async function searchSchema(this: ILoadOptionsFunctions): Promise<INodeListSearchResult> {\n\tconst { db } = await initDB.call(this);\n\tconst schemaList = await db.any('SELECT schema_name FROM information_schema.schemata');\n\tconst results: INodeListSearchItems[] = (schemaList as IDataObject[]).map((s) => ({\n\t\tname: s.schema_name as string,\n\t\tvalue: s.schema_name as string,\n\t}));\n\treturn { results };\n}\n\nexport async function searchTables(this: ILoadOptionsFunctions): Promise<INodeListSearchResult> {\n\tconst schema = this.getNodeParameter('schema', 0) as IDataObject;\n\tconst { db } = await initDB.call(this);\n\tlet tableList = [];\n\ttry {\n\t\ttableList = await db.any(\n\t\t\t'SELECT table_name FROM information_schema.tables WHERE table_schema = $1',\n\t\t\t[schema.value],\n\t\t);\n\t} catch (error) {\n\t\tthrow new ApplicationError(error as string);\n\t}\n\tconst results: INodeListSearchItems[] = (tableList as IDataObject[]).map((s) => ({\n\t\tname: s.table_name as string,\n\t\tvalue: s.table_name as string,\n\t}));\n\treturn { results };\n}\n"],"mappings":"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","names":[]}