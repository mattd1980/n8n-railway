{"version":3,"sources":["../../../../../nodes/Postgres/v2/methods/loadOptions.ts"],"sourcesContent":["import type { ILoadOptionsFunctions, INodePropertyOptions } from 'n8n-workflow';\n\nimport { configurePostgres } from '../../transport';\nimport type { PostgresNodeCredentials } from '../helpers/interfaces';\nimport { getTableSchema } from '../helpers/utils';\n\nexport async function getColumns(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\tconst credentials = await this.getCredentials<PostgresNodeCredentials>('postgres');\n\tconst options = { nodeVersion: this.getNode().typeVersion };\n\n\tconst { db } = await configurePostgres.call(this, credentials, options);\n\n\tconst schema = this.getNodeParameter('schema', 0, {\n\t\textractValue: true,\n\t}) as string;\n\n\tconst table = this.getNodeParameter('table', 0, {\n\t\textractValue: true,\n\t}) as string;\n\n\tconst columns = await getTableSchema(db, schema, table);\n\n\treturn columns.map((column) => ({\n\t\tname: column.column_name,\n\t\tvalue: column.column_name,\n\t\tdescription: `Type: ${column.data_type.toUpperCase()}, Nullable: ${column.is_nullable}`,\n\t}));\n}\n\nexport async function getColumnsMultiOptions(\n\tthis: ILoadOptionsFunctions,\n): Promise<INodePropertyOptions[]> {\n\tconst returnData = await getColumns.call(this);\n\tconst returnAll = { name: '*', value: '*', description: 'All columns' };\n\treturn [returnAll, ...returnData];\n}\n\nexport async function getColumnsWithoutColumnToMatchOn(\n\tthis: ILoadOptionsFunctions,\n): Promise<INodePropertyOptions[]> {\n\tconst columnToMatchOn = this.getNodeParameter('columnToMatchOn') as string;\n\tconst returnData = await getColumns.call(this);\n\treturn returnData.filter((column) => column.value !== columnToMatchOn);\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,uBAAkC;AAElC,mBAA+B;AAE/B,eAAsB,aAAyE;AAC9F,QAAM,cAAc,MAAM,KAAK,eAAwC,UAAU;AACjF,QAAM,UAAU,EAAE,aAAa,KAAK,QAAQ,EAAE,YAAY;AAE1D,QAAM,EAAE,GAAG,IAAI,MAAM,mCAAkB,KAAK,MAAM,aAAa,OAAO;AAEtE,QAAM,SAAS,KAAK,iBAAiB,UAAU,GAAG;AAAA,IACjD,cAAc;AAAA,EACf,CAAC;AAED,QAAM,QAAQ,KAAK,iBAAiB,SAAS,GAAG;AAAA,IAC/C,cAAc;AAAA,EACf,CAAC;AAED,QAAM,UAAU,UAAM,6BAAe,IAAI,QAAQ,KAAK;AAEtD,SAAO,QAAQ,IAAI,CAAC,YAAY;AAAA,IAC/B,MAAM,OAAO;AAAA,IACb,OAAO,OAAO;AAAA,IACd,aAAa,SAAS,OAAO,UAAU,YAAY,CAAC,eAAe,OAAO,WAAW;AAAA,EACtF,EAAE;AACH;AAEA,eAAsB,yBAEa;AAClC,QAAM,aAAa,MAAM,WAAW,KAAK,IAAI;AAC7C,QAAM,YAAY,EAAE,MAAM,KAAK,OAAO,KAAK,aAAa,cAAc;AACtE,SAAO,CAAC,WAAW,GAAG,UAAU;AACjC;AAEA,eAAsB,mCAEa;AAClC,QAAM,kBAAkB,KAAK,iBAAiB,iBAAiB;AAC/D,QAAM,aAAa,MAAM,WAAW,KAAK,IAAI;AAC7C,SAAO,WAAW,OAAO,CAAC,WAAW,OAAO,UAAU,eAAe;AACtE;","names":[]}