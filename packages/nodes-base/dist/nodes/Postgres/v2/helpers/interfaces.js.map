{"version":3,"sources":["../../../../../nodes/Postgres/v2/helpers/interfaces.ts"],"sourcesContent":["import type { IDataObject, INodeExecutionData, SSHCredentials } from 'n8n-workflow';\nimport type pgPromise from 'pg-promise';\nimport { type IFormattingOptions } from 'pg-promise';\nimport type pg from 'pg-promise/typescript/pg-subset';\n\nexport type QueryMode = 'single' | 'transaction' | 'independently';\n\nexport type QueryValue = string | number | IDataObject | string[];\nexport type QueryValues = QueryValue[];\nexport type QueryWithValues = { query: string; values?: QueryValues; options?: IFormattingOptions };\n\nexport type WhereClause = { column: string; condition: string; value: string | number };\nexport type SortRule = { column: string; direction: string };\nexport type ColumnInfo = {\n\tcolumn_name: string;\n\tdata_type: string;\n\tis_nullable: string;\n\tudt_name?: string;\n\tcolumn_default?: string | null;\n\tis_generated?: 'ALWAYS' | 'NEVER';\n\tidentity_generation?: 'ALWAYS' | 'NEVER';\n};\nexport type EnumInfo = {\n\ttypname: string;\n\tenumlabel: string;\n};\n\nexport type PgpClient = pgPromise.IMain<{}, pg.IClient>;\nexport type PgpDatabase = pgPromise.IDatabase<{}, pg.IClient>;\nexport type PgpConnectionParameters = pg.IConnectionParameters<pg.IClient>;\nexport type PgpConnection = pgPromise.IConnected<{}, pg.IClient>;\nexport type ConnectionsData = { db: PgpDatabase; pgp: PgpClient };\n\nexport type QueriesRunner = (\n\tqueries: QueryWithValues[],\n\titems: INodeExecutionData[],\n\toptions: IDataObject,\n) => Promise<INodeExecutionData[]>;\n\nexport type PostgresNodeOptions = {\n\tnodeVersion?: number;\n\toperation?: string;\n\tcascade?: boolean;\n\tconnectionTimeout?: number;\n\tdelayClosingIdleConnection?: number;\n\tqueryBatching?: QueryMode;\n\tqueryReplacement?: string;\n\toutputColumns?: string[];\n\tlargeNumbersOutput?: 'numbers' | 'text';\n\tskipOnConflict?: boolean;\n\treplaceEmptyStrings?: boolean;\n\ttreatQueryParametersInSingleQuotesAsText?: boolean;\n};\n\nexport type PostgresNodeCredentials = {\n\thost: string;\n\tport: number;\n\tdatabase: string;\n\tuser: string;\n\tpassword: string;\n\tmaxConnections: number;\n\tallowUnauthorizedCerts?: boolean;\n\tssl?: 'disable' | 'allow' | 'require' | 'verify' | 'verify-full';\n} & (\n\t| { sshTunnel: false }\n\t| ({\n\t\t\tsshTunnel: true;\n\t  } & SSHCredentials)\n);\n"],"mappings":";;;;;;;;;;;;;;AAAA;AAAA;","names":[]}