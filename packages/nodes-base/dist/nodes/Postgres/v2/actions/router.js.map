{"version":3,"sources":["../../../../../nodes/Postgres/v2/actions/router.ts"],"sourcesContent":["import type { IExecuteFunctions, INodeExecutionData } from 'n8n-workflow';\nimport { NodeOperationError } from 'n8n-workflow';\n\nimport * as database from './database/Database.resource';\nimport type { PostgresType } from './node.type';\nimport { configurePostgres } from '../../transport';\nimport type { PostgresNodeCredentials, PostgresNodeOptions } from '../helpers/interfaces';\nimport { addExecutionHints, configureQueryRunner } from '../helpers/utils';\n\nexport async function router(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\tlet returnData: INodeExecutionData[] = [];\n\n\tconst items = this.getInputData();\n\tconst resource = this.getNodeParameter<PostgresType>('resource', 0);\n\tconst operation = this.getNodeParameter('operation', 0);\n\n\tconst credentials = await this.getCredentials<PostgresNodeCredentials>('postgres');\n\tconst options = this.getNodeParameter('options', 0, {}) as PostgresNodeOptions;\n\tconst node = this.getNode();\n\toptions.nodeVersion = node.typeVersion;\n\toptions.operation = operation;\n\n\tconst { db, pgp } = await configurePostgres.call(this, credentials, options);\n\n\tconst runQueries = configureQueryRunner.call(\n\t\tthis,\n\t\tthis.getNode(),\n\t\tthis.continueOnFail(),\n\t\tpgp,\n\t\tdb,\n\t);\n\n\tconst postgresNodeData = {\n\t\tresource,\n\t\toperation,\n\t} as PostgresType;\n\n\tswitch (postgresNodeData.resource) {\n\t\tcase 'database':\n\t\t\treturnData = await database[postgresNodeData.operation].execute.call(\n\t\t\t\tthis,\n\t\t\t\trunQueries,\n\t\t\t\titems,\n\t\t\t\toptions,\n\t\t\t\tdb,\n\t\t\t\tpgp,\n\t\t\t);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tthrow new NodeOperationError(\n\t\t\t\tthis.getNode(),\n\t\t\t\t`The operation \"${operation}\" is not supported!`,\n\t\t\t);\n\t}\n\n\taddExecutionHints(this, items, operation, node.executeOnce);\n\n\treturn [returnData];\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,0BAAmC;AAEnC,eAA0B;AAE1B,uBAAkC;AAElC,mBAAwD;AAExD,eAAsB,SAAiE;AACtF,MAAI,aAAmC,CAAC;AAExC,QAAM,QAAQ,KAAK,aAAa;AAChC,QAAM,WAAW,KAAK,iBAA+B,YAAY,CAAC;AAClE,QAAM,YAAY,KAAK,iBAAiB,aAAa,CAAC;AAEtD,QAAM,cAAc,MAAM,KAAK,eAAwC,UAAU;AACjF,QAAM,UAAU,KAAK,iBAAiB,WAAW,GAAG,CAAC,CAAC;AACtD,QAAM,OAAO,KAAK,QAAQ;AAC1B,UAAQ,cAAc,KAAK;AAC3B,UAAQ,YAAY;AAEpB,QAAM,EAAE,IAAI,IAAI,IAAI,MAAM,mCAAkB,KAAK,MAAM,aAAa,OAAO;AAE3E,QAAM,aAAa,kCAAqB;AAAA,IACvC;AAAA,IACA,KAAK,QAAQ;AAAA,IACb,KAAK,eAAe;AAAA,IACpB;AAAA,IACA;AAAA,EACD;AAEA,QAAM,mBAAmB;AAAA,IACxB;AAAA,IACA;AAAA,EACD;AAEA,UAAQ,iBAAiB,UAAU;AAAA,IAClC,KAAK;AACJ,mBAAa,MAAM,SAAS,iBAAiB,SAAS,EAAE,QAAQ;AAAA,QAC/D;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACD;AACA;AAAA,IACD;AACC,YAAM,IAAI;AAAA,QACT,KAAK,QAAQ;AAAA,QACb,kBAAkB,SAAS;AAAA,MAC5B;AAAA,EACF;AAEA,sCAAkB,MAAM,OAAO,WAAW,KAAK,WAAW;AAE1D,SAAO,CAAC,UAAU;AACnB;","names":[]}