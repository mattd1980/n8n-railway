{"version":3,"sources":["../../../../../../nodes/Postgres/v2/actions/database/executeQuery.operation.ts"],"sourcesContent":["import type {\n\tIDataObject,\n\tIExecuteFunctions,\n\tINodeExecutionData,\n\tINodeProperties,\n} from 'n8n-workflow';\nimport { NodeOperationError } from 'n8n-workflow';\n\nimport { getResolvables, updateDisplayOptions } from '@utils/utilities';\n\nimport type {\n\tPgpDatabase,\n\tPostgresNodeOptions,\n\tQueriesRunner,\n\tQueryWithValues,\n} from '../../helpers/interfaces';\nimport {\n\tevaluateExpression,\n\tisJSON,\n\treplaceEmptyStringsByNulls,\n\tstringToArray,\n} from '../../helpers/utils';\nimport { optionsCollection } from '../common.descriptions';\n\nconst properties: INodeProperties[] = [\n\t{\n\t\tdisplayName: 'Query',\n\t\tname: 'query',\n\t\ttype: 'string',\n\t\tdefault: '',\n\t\tplaceholder: 'e.g. SELECT id, name FROM product WHERE quantity > $1 AND price <= $2',\n\t\tnoDataExpression: true,\n\t\trequired: true,\n\t\tdescription:\n\t\t\t\"The SQL query to execute. You can use n8n expressions and $1, $2, $3, etc to refer to the 'Query Parameters' set in options below.\",\n\t\ttypeOptions: {\n\t\t\teditor: 'sqlEditor',\n\t\t\tsqlDialect: 'PostgreSQL',\n\t\t},\n\t\thint: 'Consider using query parameters to prevent SQL injection attacks. Add them in the options below',\n\t},\n\toptionsCollection,\n];\n\nconst displayOptions = {\n\tshow: {\n\t\tresource: ['database'],\n\t\toperation: ['executeQuery'],\n\t},\n};\n\nexport const description = updateDisplayOptions(displayOptions, properties);\n\nexport async function execute(\n\tthis: IExecuteFunctions,\n\trunQueries: QueriesRunner,\n\titems: INodeExecutionData[],\n\tnodeOptions: PostgresNodeOptions,\n\t_db?: PgpDatabase,\n): Promise<INodeExecutionData[]> {\n\tconst queries: QueryWithValues[] = replaceEmptyStringsByNulls(\n\t\titems,\n\t\tnodeOptions.replaceEmptyStrings as boolean,\n\t).map((_, index) => {\n\t\tlet query = this.getNodeParameter('query', index) as string;\n\n\t\tfor (const resolvable of getResolvables(query)) {\n\t\t\tquery = query.replace(resolvable, this.evaluateExpression(resolvable, index) as string);\n\t\t}\n\n\t\tlet values: Array<IDataObject | string> = [];\n\n\t\tlet queryReplacement = this.getNodeParameter('options.queryReplacement', index, '');\n\n\t\tif (typeof queryReplacement === 'number') {\n\t\t\tqueryReplacement = String(queryReplacement);\n\t\t}\n\n\t\tif (typeof queryReplacement === 'string') {\n\t\t\tconst node = this.getNode();\n\n\t\t\tconst rawReplacements = (node.parameters.options as IDataObject)?.queryReplacement as string;\n\n\t\t\tif (rawReplacements) {\n\t\t\t\tconst nodeVersion = nodeOptions.nodeVersion as number;\n\n\t\t\t\tif (nodeVersion >= 2.5) {\n\t\t\t\t\tconst rawValues = rawReplacements.replace(/^=+/, '');\n\t\t\t\t\tconst resolvables = getResolvables(rawValues);\n\t\t\t\t\tif (resolvables.length) {\n\t\t\t\t\t\tfor (const resolvable of resolvables) {\n\t\t\t\t\t\t\tconst evaluatedExpression = evaluateExpression(\n\t\t\t\t\t\t\t\tthis.evaluateExpression(`${resolvable}`, index),\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tconst evaluatedValues = isJSON(evaluatedExpression)\n\t\t\t\t\t\t\t\t? [evaluatedExpression]\n\t\t\t\t\t\t\t\t: stringToArray(evaluatedExpression);\n\n\t\t\t\t\t\t\tif (evaluatedValues.length) values.push(...evaluatedValues);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvalues.push(...stringToArray(rawValues));\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tconst rawValues = rawReplacements\n\t\t\t\t\t\t.replace(/^=+/, '')\n\t\t\t\t\t\t.split(',')\n\t\t\t\t\t\t.filter((entry) => entry)\n\t\t\t\t\t\t.map((entry) => entry.trim());\n\n\t\t\t\t\tfor (const rawValue of rawValues) {\n\t\t\t\t\t\tconst resolvables = getResolvables(rawValue);\n\n\t\t\t\t\t\tif (resolvables.length) {\n\t\t\t\t\t\t\tfor (const resolvable of resolvables) {\n\t\t\t\t\t\t\t\tvalues.push(this.evaluateExpression(`${resolvable}`, index) as IDataObject);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tvalues.push(rawValue);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tif (Array.isArray(queryReplacement)) {\n\t\t\t\tvalues = queryReplacement as IDataObject[];\n\t\t\t} else {\n\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t'Query Parameters must be a string of comma-separated values or an array of values',\n\t\t\t\t\t{ itemIndex: index },\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tif (!queryReplacement || nodeOptions.treatQueryParametersInSingleQuotesAsText) {\n\t\t\tlet nextValueIndex = values.length + 1;\n\t\t\tconst literals = query.match(/'\\$[0-9]+'/g) ?? [];\n\t\t\tfor (const literal of literals) {\n\t\t\t\tquery = query.replace(literal, `$${nextValueIndex}`);\n\t\t\t\tvalues.push(literal.replace(/'/g, ''));\n\t\t\t\tnextValueIndex++;\n\t\t\t}\n\t\t}\n\n\t\treturn { query, values, options: { partial: true } };\n\t});\n\n\treturn await runQueries(queries, items, nodeOptions);\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA,0BAAmC;AAEnC,uBAAqD;AAQrD,mBAKO;AACP,oBAAkC;AAElC,MAAM,aAAgC;AAAA,EACrC;AAAA,IACC,aAAa;AAAA,IACb,MAAM;AAAA,IACN,MAAM;AAAA,IACN,SAAS;AAAA,IACT,aAAa;AAAA,IACb,kBAAkB;AAAA,IAClB,UAAU;AAAA,IACV,aACC;AAAA,IACD,aAAa;AAAA,MACZ,QAAQ;AAAA,MACR,YAAY;AAAA,IACb;AAAA,IACA,MAAM;AAAA,EACP;AAAA,EACA;AACD;AAEA,MAAM,iBAAiB;AAAA,EACtB,MAAM;AAAA,IACL,UAAU,CAAC,UAAU;AAAA,IACrB,WAAW,CAAC,cAAc;AAAA,EAC3B;AACD;AAEO,MAAM,kBAAc,uCAAqB,gBAAgB,UAAU;AAE1E,eAAsB,QAErB,YACA,OACA,aACA,KACgC;AAChC,QAAM,cAA6B;AAAA,IAClC;AAAA,IACA,YAAY;AAAA,EACb,EAAE,IAAI,CAAC,GAAG,UAAU;AACnB,QAAI,QAAQ,KAAK,iBAAiB,SAAS,KAAK;AAEhD,eAAW,kBAAc,iCAAe,KAAK,GAAG;AAC/C,cAAQ,MAAM,QAAQ,YAAY,KAAK,mBAAmB,YAAY,KAAK,CAAW;AAAA,IACvF;AAEA,QAAI,SAAsC,CAAC;AAE3C,QAAI,mBAAmB,KAAK,iBAAiB,4BAA4B,OAAO,EAAE;AAElF,QAAI,OAAO,qBAAqB,UAAU;AACzC,yBAAmB,OAAO,gBAAgB;AAAA,IAC3C;AAEA,QAAI,OAAO,qBAAqB,UAAU;AACzC,YAAM,OAAO,KAAK,QAAQ;AAE1B,YAAM,kBAAmB,KAAK,WAAW,SAAyB;AAElE,UAAI,iBAAiB;AACpB,cAAM,cAAc,YAAY;AAEhC,YAAI,eAAe,KAAK;AACvB,gBAAM,YAAY,gBAAgB,QAAQ,OAAO,EAAE;AACnD,gBAAM,kBAAc,iCAAe,SAAS;AAC5C,cAAI,YAAY,QAAQ;AACvB,uBAAW,cAAc,aAAa;AACrC,oBAAM,0BAAsB;AAAA,gBAC3B,KAAK,mBAAmB,GAAG,UAAU,IAAI,KAAK;AAAA,cAC/C;AACA,oBAAM,sBAAkB,qBAAO,mBAAmB,IAC/C,CAAC,mBAAmB,QACpB,4BAAc,mBAAmB;AAEpC,kBAAI,gBAAgB,OAAQ,QAAO,KAAK,GAAG,eAAe;AAAA,YAC3D;AAAA,UACD,OAAO;AACN,mBAAO,KAAK,OAAG,4BAAc,SAAS,CAAC;AAAA,UACxC;AAAA,QACD,OAAO;AACN,gBAAM,YAAY,gBAChB,QAAQ,OAAO,EAAE,EACjB,MAAM,GAAG,EACT,OAAO,CAAC,UAAU,KAAK,EACvB,IAAI,CAAC,UAAU,MAAM,KAAK,CAAC;AAE7B,qBAAW,YAAY,WAAW;AACjC,kBAAM,kBAAc,iCAAe,QAAQ;AAE3C,gBAAI,YAAY,QAAQ;AACvB,yBAAW,cAAc,aAAa;AACrC,uBAAO,KAAK,KAAK,mBAAmB,GAAG,UAAU,IAAI,KAAK,CAAgB;AAAA,cAC3E;AAAA,YACD,OAAO;AACN,qBAAO,KAAK,QAAQ;AAAA,YACrB;AAAA,UACD;AAAA,QACD;AAAA,MACD;AAAA,IACD,OAAO;AACN,UAAI,MAAM,QAAQ,gBAAgB,GAAG;AACpC,iBAAS;AAAA,MACV,OAAO;AACN,cAAM,IAAI;AAAA,UACT,KAAK,QAAQ;AAAA,UACb;AAAA,UACA,EAAE,WAAW,MAAM;AAAA,QACpB;AAAA,MACD;AAAA,IACD;AAEA,QAAI,CAAC,oBAAoB,YAAY,0CAA0C;AAC9E,UAAI,iBAAiB,OAAO,SAAS;AACrC,YAAM,WAAW,MAAM,MAAM,aAAa,KAAK,CAAC;AAChD,iBAAW,WAAW,UAAU;AAC/B,gBAAQ,MAAM,QAAQ,SAAS,IAAI,cAAc,EAAE;AACnD,eAAO,KAAK,QAAQ,QAAQ,MAAM,EAAE,CAAC;AACrC;AAAA,MACD;AAAA,IACD;AAEA,WAAO,EAAE,OAAO,QAAQ,SAAS,EAAE,SAAS,KAAK,EAAE;AAAA,EACpD,CAAC;AAED,SAAO,MAAM,WAAW,SAAS,OAAO,WAAW;AACpD;","names":[]}