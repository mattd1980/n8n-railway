{"version":3,"sources":["../../../nodes/Postgres/PostgresTrigger.node.ts"],"sourcesContent":["import {\n\tTriggerCloseError,\n\ttype IDataObject,\n\ttype INodeType,\n\ttype INodeTypeDescription,\n\ttype ITriggerFunctions,\n\ttype ITriggerResponse,\n\tNodeConnectionTypes,\n} from 'n8n-workflow';\n\nimport {\n\tpgTriggerFunction,\n\tinitDB,\n\tsearchSchema,\n\tsearchTables,\n\tprepareNames,\n} from './PostgresTrigger.functions';\n\nexport class PostgresTrigger implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'Postgres Trigger',\n\t\tname: 'postgresTrigger',\n\t\ticon: 'file:postgres.svg',\n\t\tgroup: ['trigger'],\n\t\tversion: 1,\n\t\tdescription: 'Listens to Postgres messages',\n\t\teventTriggerDescription: '',\n\t\tdefaults: {\n\t\t\tname: 'Postgres Trigger',\n\t\t},\n\t\ttriggerPanel: {\n\t\t\theader: '',\n\t\t\texecutionsHelp: {\n\t\t\t\tinactive:\n\t\t\t\t\t\"<b>While building your workflow</b>, click the 'execute step' button, then trigger a Postgres event. This will trigger an execution, which will show up in this editor.<br /> <br /><b>Once you're happy with your workflow</b>, <a data-key='activate'>activate</a> it. Then every time a change is detected, the workflow will execute. These executions will show up in the <a data-key='executions'>executions list</a>, but not in the editor.\",\n\t\t\t\tactive:\n\t\t\t\t\t\"<b>While building your workflow</b>, click the 'execute step' button, then trigger a Postgres event. This will trigger an execution, which will show up in this editor.<br /> <br /><b>Your workflow will also execute automatically</b>, since it's activated. Every time a change is detected, this node will trigger an execution. These executions will show up in the <a data-key='executions'>executions list</a>, but not in the editor.\",\n\t\t\t},\n\t\t\tactivationHint:\n\t\t\t\t\"Once you've finished building your workflow, <a data-key='activate'>activate</a> it to have it also listen continuously (you just won't see those executions here).\",\n\t\t},\n\t\tinputs: [],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tcredentials: [\n\t\t\t{\n\t\t\t\tname: 'postgres',\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Listen For',\n\t\t\t\tname: 'triggerMode',\n\t\t\t\ttype: 'options',\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Table Row Change Events',\n\t\t\t\t\t\tvalue: 'createTrigger',\n\t\t\t\t\t\tdescription: 'Insert, update or delete',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Advanced',\n\t\t\t\t\t\tvalue: 'listenTrigger',\n\t\t\t\t\t\tdescription: 'Listen to existing Postgres channel',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'createTrigger',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Schema Name',\n\t\t\t\tname: 'schema',\n\t\t\t\ttype: 'resourceLocator',\n\t\t\t\tdefault: { mode: 'list', value: 'public' },\n\t\t\t\trequired: true,\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\ttriggerMode: ['createTrigger'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tmodes: [\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'From List',\n\t\t\t\t\t\tname: 'list',\n\t\t\t\t\t\ttype: 'list',\n\t\t\t\t\t\tplaceholder: 'Select a schema',\n\t\t\t\t\t\ttypeOptions: {\n\t\t\t\t\t\t\tsearchListMethod: 'searchSchema',\n\t\t\t\t\t\t\tsearchFilterRequired: false,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Name',\n\t\t\t\t\t\tname: 'name',\n\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\tplaceholder: 'e.g. public',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Table Name',\n\t\t\t\tname: 'tableName',\n\t\t\t\ttype: 'resourceLocator',\n\t\t\t\tdefault: { mode: 'list', value: '' },\n\t\t\t\trequired: true,\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\ttriggerMode: ['createTrigger'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tmodes: [\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'From List',\n\t\t\t\t\t\tname: 'list',\n\t\t\t\t\t\ttype: 'list',\n\t\t\t\t\t\tplaceholder: 'Select a table',\n\t\t\t\t\t\ttypeOptions: {\n\t\t\t\t\t\t\tsearchListMethod: 'searchTables',\n\t\t\t\t\t\t\tsearchFilterRequired: false,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Name',\n\t\t\t\t\t\tname: 'name',\n\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\tplaceholder: 'e.g. table_name',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Channel Name',\n\t\t\t\tname: 'channelName',\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: '',\n\t\t\t\trequired: true,\n\t\t\t\tplaceholder: 'e.g. n8n_channel',\n\t\t\t\tdescription: 'Name of the channel to listen to',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\ttriggerMode: ['listenTrigger'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Event to listen for',\n\t\t\t\tname: 'firesOn',\n\t\t\t\ttype: 'options',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\ttriggerMode: ['createTrigger'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Insert',\n\t\t\t\t\t\tvalue: 'INSERT',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Update',\n\t\t\t\t\t\tvalue: 'UPDATE',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Delete',\n\t\t\t\t\t\tvalue: 'DELETE',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'INSERT',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Additional Fields',\n\t\t\t\tname: 'additionalFields',\n\t\t\t\ttype: 'collection',\n\t\t\t\tplaceholder: 'Add Field',\n\t\t\t\tdefault: {},\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\ttriggerMode: ['createTrigger'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Channel Name',\n\t\t\t\t\t\tname: 'channelName',\n\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\tplaceholder: 'e.g. n8n_channel',\n\t\t\t\t\t\tdescription: 'Name of the channel to listen to',\n\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t},\n\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Function Name',\n\t\t\t\t\t\tname: 'functionName',\n\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\tdescription: 'Name of the function to create',\n\t\t\t\t\t\tplaceholder: 'e.g. n8n_trigger_function()',\n\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Replace if Exists',\n\t\t\t\t\t\tname: 'replaceIfExists',\n\t\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\t\tdescription: 'Whether to replace an existing function and trigger with the same name',\n\t\t\t\t\t\tdefault: false,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Trigger Name',\n\t\t\t\t\t\tname: 'triggerName',\n\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\tdescription: 'Name of the trigger to create',\n\t\t\t\t\t\tplaceholder: 'e.g. n8n_trigger',\n\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Options',\n\t\t\t\tname: 'options',\n\t\t\t\ttype: 'collection',\n\t\t\t\tplaceholder: 'Add option',\n\t\t\t\tdefault: {},\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Connection Timeout',\n\t\t\t\t\t\tname: 'connectionTimeout',\n\t\t\t\t\t\ttype: 'number',\n\t\t\t\t\t\tdefault: 30,\n\t\t\t\t\t\tdescription: 'Number of seconds reserved for connecting to the database',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Delay Closing Idle Connection',\n\t\t\t\t\t\tname: 'delayClosingIdleConnection',\n\t\t\t\t\t\ttype: 'number',\n\t\t\t\t\t\tdefault: 0,\n\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t'Number of seconds to wait before idle connection would be eligible for closing',\n\t\t\t\t\t\ttypeOptions: {\n\t\t\t\t\t\t\tminValue: 0,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t],\n\t};\n\n\tmethods = {\n\t\tlistSearch: {\n\t\t\tsearchSchema,\n\t\t\tsearchTables,\n\t\t},\n\t};\n\n\tasync trigger(this: ITriggerFunctions): Promise<ITriggerResponse> {\n\t\tconst triggerMode = this.getNodeParameter('triggerMode', 0) as string;\n\t\tconst additionalFields = this.getNodeParameter('additionalFields', 0) as IDataObject;\n\n\t\t// initialize and connect to database\n\t\tconst { db } = await initDB.call(this);\n\t\tconst connection = await db.connect({ direct: true });\n\n\t\t// prepare and set up listener\n\t\tconst onNotification = async (data: IDataObject) => {\n\t\t\tif (data.payload) {\n\t\t\t\ttry {\n\t\t\t\t\tdata.payload = JSON.parse(data.payload as string) as IDataObject;\n\t\t\t\t} catch (error) {}\n\t\t\t}\n\t\t\tthis.emit([this.helpers.returnJsonArray([data])]);\n\t\t};\n\n\t\t// create trigger, function and channel or use existing channel\n\t\tconst pgNames = prepareNames(this.getNode().id, this.getMode(), additionalFields);\n\t\tif (triggerMode === 'createTrigger') {\n\t\t\tawait pgTriggerFunction.call(\n\t\t\t\tthis,\n\t\t\t\tdb,\n\t\t\t\tadditionalFields,\n\t\t\t\tpgNames.functionName,\n\t\t\t\tpgNames.triggerName,\n\t\t\t\tpgNames.channelName,\n\t\t\t);\n\t\t} else {\n\t\t\tpgNames.channelName = this.getNodeParameter('channelName', '') as string;\n\t\t}\n\n\t\t// listen to channel\n\t\tawait connection.none(`LISTEN ${pgNames.channelName}`);\n\n\t\tconst cleanUpDb = async () => {\n\t\t\ttry {\n\t\t\t\ttry {\n\t\t\t\t\t// check if the connection is healthy\n\t\t\t\t\tawait connection.query('SELECT 1');\n\t\t\t\t} catch {\n\t\t\t\t\t// connection already closed. Can't perform cleanup\n\n\t\t\t\t\tthrow new TriggerCloseError(this.getNode(), { level: 'warning' });\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tawait connection.none('UNLISTEN $1:name', [pgNames.channelName]);\n\t\t\t\t\tif (triggerMode === 'createTrigger') {\n\t\t\t\t\t\tconst functionName = pgNames.functionName.includes('(')\n\t\t\t\t\t\t\t? pgNames.functionName.split('(')[0]\n\t\t\t\t\t\t\t: pgNames.functionName;\n\t\t\t\t\t\tawait connection.any('DROP FUNCTION IF EXISTS $1:name CASCADE', [functionName]);\n\n\t\t\t\t\t\tconst schema = this.getNodeParameter('schema', undefined, {\n\t\t\t\t\t\t\textractValue: true,\n\t\t\t\t\t\t}) as string;\n\t\t\t\t\t\tconst table = this.getNodeParameter('tableName', undefined, {\n\t\t\t\t\t\t\textractValue: true,\n\t\t\t\t\t\t}) as string;\n\n\t\t\t\t\t\tawait connection.any('DROP TRIGGER IF EXISTS $1:name ON $2:name.$3:name CASCADE', [\n\t\t\t\t\t\t\tpgNames.triggerName,\n\t\t\t\t\t\t\tschema,\n\t\t\t\t\t\t\ttable,\n\t\t\t\t\t\t]);\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\tthrow new TriggerCloseError(this.getNode(), { cause: error as Error, level: 'error' });\n\t\t\t\t}\n\t\t\t} finally {\n\t\t\t\tconnection.client.removeListener('notification', onNotification);\n\t\t\t}\n\t\t};\n\n\t\tconnection.client.on('notification', onNotification);\n\n\t\t// The \"closeFunction\" function gets called by n8n whenever\n\t\t// the workflow gets deactivated and can so clean up.\n\t\tconst closeFunction = async () => {\n\t\t\tawait cleanUpDb();\n\t\t};\n\n\t\tconst manualTriggerFunction = async () => {\n\t\t\tawait new Promise(async (resolve, reject) => {\n\t\t\t\tconst timeoutHandler = setTimeout(async () => {\n\t\t\t\t\treject(\n\t\t\t\t\t\tnew Error(\n\t\t\t\t\t\t\tawait (async () => {\n\t\t\t\t\t\t\t\tawait cleanUpDb();\n\t\t\t\t\t\t\t\treturn 'Aborted, no data received within 30secs. This 30sec timeout is only set for \"manually triggered execution\". Active Workflows will listen indefinitely.';\n\t\t\t\t\t\t\t})(),\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t}, 60000);\n\t\t\t\tconnection.client.on('notification', async (data: IDataObject) => {\n\t\t\t\t\tif (data.payload) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tdata.payload = JSON.parse(data.payload as string) as IDataObject;\n\t\t\t\t\t\t} catch (error) {}\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.emit([this.helpers.returnJsonArray([data])]);\n\t\t\t\t\tclearTimeout(timeoutHandler);\n\t\t\t\t\tresolve(true);\n\t\t\t\t});\n\t\t\t});\n\t\t};\n\n\t\treturn {\n\t\t\tcloseFunction,\n\t\t\tmanualTriggerFunction: this.getMode() === 'manual' ? manualTriggerFunction : undefined,\n\t\t};\n\t}\n}\n"],"mappings":"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","names":[]}