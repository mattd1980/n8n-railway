{"version":3,"sources":["../../../../nodes/Postgres/transport/index.ts"],"sourcesContent":["import type {\n\tIExecuteFunctions,\n\tICredentialTestFunctions,\n\tILoadOptionsFunctions,\n\tITriggerFunctions,\n} from 'n8n-workflow';\nimport { createServer, type AddressInfo } from 'node:net';\nimport pgPromise from 'pg-promise';\n\nimport { ConnectionPoolManager } from '@utils/connection-pool-manager';\nimport { LOCALHOST } from '@utils/constants';\nimport { formatPrivateKey } from '@utils/utilities';\n\nimport type {\n\tConnectionsData,\n\tPgpConnectionParameters,\n\tPostgresNodeCredentials,\n\tPostgresNodeOptions,\n} from '../v2/helpers/interfaces';\n\nconst getPostgresConfig = (\n\tcredentials: PostgresNodeCredentials,\n\toptions: PostgresNodeOptions = {},\n) => {\n\tconst dbConfig: PgpConnectionParameters = {\n\t\thost: credentials.host,\n\t\tport: credentials.port,\n\t\tdatabase: credentials.database,\n\t\tuser: credentials.user,\n\t\tpassword: credentials.password,\n\t\tkeepAlive: true,\n\t\tmax: credentials.maxConnections,\n\t};\n\n\tif (options.connectionTimeout) {\n\t\tdbConfig.connectionTimeoutMillis = options.connectionTimeout * 1000;\n\t}\n\n\tif (options.delayClosingIdleConnection) {\n\t\tdbConfig.keepAliveInitialDelayMillis = options.delayClosingIdleConnection * 1000;\n\t}\n\n\tif (credentials.allowUnauthorizedCerts === true) {\n\t\tdbConfig.ssl = {\n\t\t\trejectUnauthorized: false,\n\t\t};\n\t} else {\n\t\tdbConfig.ssl = !['disable', undefined].includes(credentials.ssl as string | undefined);\n\t\t// @ts-ignore these typings need to be updated\n\t\tdbConfig.sslmode = credentials.ssl || 'disable';\n\t}\n\n\treturn dbConfig;\n};\n\nexport async function configurePostgres(\n\tthis: IExecuteFunctions | ICredentialTestFunctions | ILoadOptionsFunctions | ITriggerFunctions,\n\tcredentials: PostgresNodeCredentials,\n\toptions: PostgresNodeOptions = {},\n): Promise<ConnectionsData> {\n\tconst poolManager = ConnectionPoolManager.getInstance();\n\n\tconst fallBackHandler = async () => {\n\t\tconst pgp = pgPromise({\n\t\t\t// prevent spam in console \"WARNING: Creating a duplicate database object for the same connection.\"\n\t\t\t// duplicate connections created when auto loading parameters, they are closed immediately after, but several could be open at the same time\n\t\t\tnoWarnings: true,\n\t\t});\n\n\t\tif (typeof options.nodeVersion === 'number' && options.nodeVersion >= 2.1) {\n\t\t\t// Always return dates as ISO strings\n\t\t\t[pgp.pg.types.builtins.TIMESTAMP, pgp.pg.types.builtins.TIMESTAMPTZ].forEach((type) => {\n\t\t\t\tpgp.pg.types.setTypeParser(type, (value: string) => {\n\t\t\t\t\tconst parsedDate = new Date(value);\n\n\t\t\t\t\tif (isNaN(parsedDate.getTime())) {\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn parsedDate.toISOString();\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\tif (options.largeNumbersOutput === 'numbers') {\n\t\t\tpgp.pg.types.setTypeParser(20, (value: string) => {\n\t\t\t\treturn parseInt(value, 10);\n\t\t\t});\n\t\t\tpgp.pg.types.setTypeParser(1700, (value: string) => {\n\t\t\t\treturn parseFloat(value);\n\t\t\t});\n\t\t}\n\n\t\tconst dbConfig = getPostgresConfig(credentials, options);\n\n\t\tif (!credentials.sshTunnel) {\n\t\t\tconst db = pgp(dbConfig);\n\n\t\t\treturn { db, pgp };\n\t\t} else {\n\t\t\tif (credentials.sshAuthenticateWith === 'privateKey' && credentials.privateKey) {\n\t\t\t\tcredentials.privateKey = formatPrivateKey(credentials.privateKey);\n\t\t\t}\n\t\t\tconst sshClient = await this.helpers.getSSHClient(credentials);\n\n\t\t\t// Create a TCP proxy listening on a random available port\n\t\t\tconst proxy = createServer();\n\t\t\tconst proxyPort = await new Promise<number>((resolve) => {\n\t\t\t\tproxy.listen(0, LOCALHOST, () => {\n\t\t\t\t\tresolve((proxy.address() as AddressInfo).port);\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tconst close = () => {\n\t\t\t\tproxy.close();\n\t\t\t\tsshClient.off('end', close);\n\t\t\t\tsshClient.off('error', close);\n\t\t\t};\n\t\t\tsshClient.on('end', close);\n\t\t\tsshClient.on('error', close);\n\n\t\t\tawait new Promise<void>((resolve, reject) => {\n\t\t\t\tproxy.on('error', (err) => reject(err));\n\t\t\t\tproxy.on('connection', (localSocket) => {\n\t\t\t\t\tsshClient.forwardOut(\n\t\t\t\t\t\tLOCALHOST,\n\t\t\t\t\t\tlocalSocket.remotePort!,\n\t\t\t\t\t\tcredentials.host,\n\t\t\t\t\t\tcredentials.port,\n\t\t\t\t\t\t(err, clientChannel) => {\n\t\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\t\tproxy.close();\n\t\t\t\t\t\t\t\tlocalSocket.destroy();\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tlocalSocket.pipe(clientChannel);\n\t\t\t\t\t\t\t\tclientChannel.pipe(localSocket);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t\tresolve();\n\t\t\t}).catch((err) => {\n\t\t\t\tproxy.close();\n\n\t\t\t\tlet message = err.message;\n\t\t\t\tlet description = err.description;\n\n\t\t\t\tif (err.message.includes('ECONNREFUSED')) {\n\t\t\t\t\tmessage = 'Connection refused';\n\t\t\t\t\ttry {\n\t\t\t\t\t\tdescription = err.message.split('ECONNREFUSED ')[1].trim();\n\t\t\t\t\t} catch (e) {}\n\t\t\t\t}\n\n\t\t\t\tif (err.message.includes('ENOTFOUND')) {\n\t\t\t\t\tmessage = 'Host not found';\n\t\t\t\t\ttry {\n\t\t\t\t\t\tdescription = err.message.split('ENOTFOUND ')[1].trim();\n\t\t\t\t\t} catch (e) {}\n\t\t\t\t}\n\n\t\t\t\tif (err.message.includes('ETIMEDOUT')) {\n\t\t\t\t\tmessage = 'Connection timed out';\n\t\t\t\t\ttry {\n\t\t\t\t\t\tdescription = err.message.split('ETIMEDOUT ')[1].trim();\n\t\t\t\t\t} catch (e) {}\n\t\t\t\t}\n\n\t\t\t\terr.message = message;\n\t\t\t\terr.description = description;\n\t\t\t\tthrow err;\n\t\t\t});\n\n\t\t\tconst db = pgp({\n\t\t\t\t...dbConfig,\n\t\t\t\tport: proxyPort,\n\t\t\t\thost: LOCALHOST,\n\t\t\t});\n\t\t\treturn { db, pgp };\n\t\t}\n\t};\n\n\treturn await poolManager.getConnection({\n\t\tcredentials,\n\t\tnodeType: 'postgres',\n\t\tnodeVersion: options.nodeVersion as unknown as string,\n\t\tfallBackHandler,\n\t\tcleanUpHandler: async ({ db }) => {\n\t\t\tif (!db.$pool.ended) await db.$pool.end();\n\t\t},\n\t});\n}\n"],"mappings":"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","names":["pgPromise"]}