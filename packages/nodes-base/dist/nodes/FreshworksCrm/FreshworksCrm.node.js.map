{"version":3,"sources":["../../../nodes/FreshworksCrm/FreshworksCrm.node.ts"],"sourcesContent":["import { tz } from 'moment-timezone';\nimport {\n\ttype IExecuteFunctions,\n\ttype IDataObject,\n\ttype ILoadOptionsFunctions,\n\ttype INodeExecutionData,\n\ttype INodeType,\n\ttype INodeTypeDescription,\n\tNodeConnectionTypes,\n} from 'n8n-workflow';\n\nimport {\n\taccountFields,\n\taccountOperations,\n\tappointmentFields,\n\tappointmentOperations,\n\tcontactFields,\n\tcontactOperations,\n\tdealFields,\n\tdealOperations,\n\tnoteFields,\n\tnoteOperations,\n\tsalesActivityFields,\n\tsalesActivityOperations,\n\tsearchFields,\n\tsearchOperations,\n\ttaskFields,\n\ttaskOperations,\n} from './descriptions';\nimport {\n\tadjustAccounts,\n\tadjustAttendees,\n\tfreshworksCrmApiRequest,\n\tgetAllItemsViewId,\n\thandleListing,\n\tloadResource,\n\tthrowOnEmptyUpdate,\n} from './GenericFunctions';\nimport type { FreshworksConfigResponse, LoadedCurrency, LoadedUser, LoadOption } from './types';\n\nexport class FreshworksCrm implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'Freshworks CRM',\n\t\tname: 'freshworksCrm',\n\t\ticon: 'file:freshworksCrm.svg',\n\t\tgroup: ['transform'],\n\t\tversion: 1,\n\t\tsubtitle: '={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}',\n\t\tdescription: 'Consume the Freshworks CRM API',\n\t\tdefaults: {\n\t\t\tname: 'Freshworks CRM',\n\t\t},\n\t\tusableAsTool: true,\n\t\tinputs: [NodeConnectionTypes.Main],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tcredentials: [\n\t\t\t{\n\t\t\t\tname: 'freshworksCrmApi',\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Resource',\n\t\t\t\tname: 'resource',\n\t\t\t\ttype: 'options',\n\t\t\t\tnoDataExpression: true,\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Account',\n\t\t\t\t\t\tvalue: 'account',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Appointment',\n\t\t\t\t\t\tvalue: 'appointment',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Contact',\n\t\t\t\t\t\tvalue: 'contact',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Deal',\n\t\t\t\t\t\tvalue: 'deal',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Note',\n\t\t\t\t\t\tvalue: 'note',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Sales Activity',\n\t\t\t\t\t\tvalue: 'salesActivity',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Search',\n\t\t\t\t\t\tvalue: 'search',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Task',\n\t\t\t\t\t\tvalue: 'task',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'account',\n\t\t\t},\n\t\t\t...accountOperations,\n\t\t\t...accountFields,\n\t\t\t...appointmentOperations,\n\t\t\t...appointmentFields,\n\t\t\t...contactOperations,\n\t\t\t...contactFields,\n\t\t\t...dealOperations,\n\t\t\t...dealFields,\n\t\t\t...noteOperations,\n\t\t\t...noteFields,\n\t\t\t...salesActivityOperations,\n\t\t\t...salesActivityFields,\n\t\t\t...searchOperations,\n\t\t\t...searchFields,\n\t\t\t...taskOperations,\n\t\t\t...taskFields,\n\t\t],\n\t};\n\n\tmethods = {\n\t\tloadOptions: {\n\t\t\tasync getAccounts(this: ILoadOptionsFunctions) {\n\t\t\t\tconst viewId = await getAllItemsViewId.call(this, { fromLoadOptions: true });\n\t\t\t\tconst responseData = await handleListing.call(\n\t\t\t\t\tthis,\n\t\t\t\t\t'GET',\n\t\t\t\t\t`/sales_accounts/view/${viewId}`,\n\t\t\t\t);\n\n\t\t\t\treturn responseData.map(({ name, id }) => ({ name, value: id })) as LoadOption[];\n\t\t\t},\n\n\t\t\tasync getAccountViews(this: ILoadOptionsFunctions) {\n\t\t\t\tconst responseData = await handleListing.call(this, 'GET', '/sales_accounts/filters');\n\t\t\t\treturn responseData.map(({ name, id }) => ({ name, value: id })) as LoadOption[];\n\t\t\t},\n\n\t\t\tasync getBusinessTypes(this: ILoadOptionsFunctions) {\n\t\t\t\treturn await loadResource.call(this, 'business_types');\n\t\t\t},\n\n\t\t\tasync getCampaigns(this: ILoadOptionsFunctions) {\n\t\t\t\treturn await loadResource.call(this, 'campaigns');\n\t\t\t},\n\n\t\t\tasync getContactStatuses(this: ILoadOptionsFunctions) {\n\t\t\t\treturn await loadResource.call(this, 'contact_statuses');\n\t\t\t},\n\n\t\t\tasync getContactViews(this: ILoadOptionsFunctions) {\n\t\t\t\tconst responseData = await handleListing.call(this, 'GET', '/contacts/filters');\n\n\t\t\t\treturn responseData.map(({ name, id }) => ({ name, value: id })) as LoadOption[];\n\t\t\t},\n\n\t\t\tasync getCurrencies(this: ILoadOptionsFunctions) {\n\t\t\t\tconst response = (await freshworksCrmApiRequest.call(\n\t\t\t\t\tthis,\n\t\t\t\t\t'GET',\n\t\t\t\t\t'/selector/currencies',\n\t\t\t\t)) as FreshworksConfigResponse<LoadedCurrency>;\n\n\t\t\t\tconst key = Object.keys(response)[0];\n\n\t\t\t\treturn response[key].map(({ currency_code, id }) => ({ name: currency_code, value: id }));\n\t\t\t},\n\n\t\t\tasync getDealPaymentStatuses(this: ILoadOptionsFunctions) {\n\t\t\t\treturn await loadResource.call(this, 'deal_payment_statuses');\n\t\t\t},\n\n\t\t\tasync getDealPipelines(this: ILoadOptionsFunctions) {\n\t\t\t\treturn await loadResource.call(this, 'deal_pipelines');\n\t\t\t},\n\n\t\t\tasync getDealProducts(this: ILoadOptionsFunctions) {\n\t\t\t\treturn await loadResource.call(this, 'deal_products');\n\t\t\t},\n\n\t\t\tasync getDealReasons(this: ILoadOptionsFunctions) {\n\t\t\t\treturn await loadResource.call(this, 'deal_reasons');\n\t\t\t},\n\n\t\t\tasync getDealStages(this: ILoadOptionsFunctions) {\n\t\t\t\treturn await loadResource.call(this, 'deal_stages');\n\t\t\t},\n\n\t\t\tasync getDealTypes(this: ILoadOptionsFunctions) {\n\t\t\t\treturn await loadResource.call(this, 'deal_types');\n\t\t\t},\n\n\t\t\tasync getDealViews(this: ILoadOptionsFunctions) {\n\t\t\t\tconst responseData = await handleListing.call(this, 'GET', '/deals/filters');\n\n\t\t\t\treturn responseData.map(({ name, id }) => ({ name, value: id })) as LoadOption[];\n\t\t\t},\n\n\t\t\tasync getIndustryTypes(this: ILoadOptionsFunctions) {\n\t\t\t\treturn await loadResource.call(this, 'industry_types');\n\t\t\t},\n\n\t\t\tasync getLifecycleStages(this: ILoadOptionsFunctions) {\n\t\t\t\treturn await loadResource.call(this, 'lifecycle_stages');\n\t\t\t},\n\n\t\t\tasync getOutcomes(this: ILoadOptionsFunctions) {\n\t\t\t\treturn await loadResource.call(this, 'sales_activity_outcomes');\n\t\t\t},\n\n\t\t\tasync getSalesActivityTypes(this: ILoadOptionsFunctions) {\n\t\t\t\treturn await loadResource.call(this, 'sales_activity_types');\n\t\t\t},\n\n\t\t\tasync getTerritories(this: ILoadOptionsFunctions) {\n\t\t\t\treturn await loadResource.call(this, 'territories');\n\t\t\t},\n\n\t\t\tasync getUsers(this: ILoadOptionsFunctions) {\n\t\t\t\t// for attendees, owners, and creators\n\t\t\t\tconst response = (await freshworksCrmApiRequest.call(\n\t\t\t\t\tthis,\n\t\t\t\t\t'GET',\n\t\t\t\t\t'/selector/owners',\n\t\t\t\t)) as FreshworksConfigResponse<LoadedUser>;\n\n\t\t\t\tconst key = Object.keys(response)[0];\n\n\t\t\t\treturn response[key].map(({ display_name, id }) => ({ name: display_name, value: id }));\n\t\t\t},\n\t\t},\n\t};\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t\tconst items = this.getInputData();\n\t\tconst returnData: INodeExecutionData[] = [];\n\n\t\tconst resource = this.getNodeParameter('resource', 0);\n\t\tconst operation = this.getNodeParameter('operation', 0);\n\t\tconst defaultTimezone = this.getTimezone();\n\n\t\tlet responseData;\n\n\t\tfor (let i = 0; i < items.length; i++) {\n\t\t\ttry {\n\t\t\t\tif (resource === 'account') {\n\t\t\t\t\t// **********************************************************************\n\t\t\t\t\t//                                account\n\t\t\t\t\t// **********************************************************************\n\n\t\t\t\t\t// https://developers.freshworks.com/crm/api/#accounts\n\n\t\t\t\t\tif (operation === 'create') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//             account: create\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\t// https://developers.freshworks.com/crm/api/#create_account\n\n\t\t\t\t\t\tconst body = {\n\t\t\t\t\t\t\tname: this.getNodeParameter('name', i),\n\t\t\t\t\t\t} as IDataObject;\n\n\t\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i);\n\n\t\t\t\t\t\tif (Object.keys(additionalFields).length) {\n\t\t\t\t\t\t\tObject.assign(body, additionalFields);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await freshworksCrmApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'POST',\n\t\t\t\t\t\t\t'/sales_accounts',\n\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tresponseData = responseData.sales_account;\n\t\t\t\t\t} else if (operation === 'delete') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//             account: delete\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\t// https://developers.freshworks.com/crm/api/#delete_account\n\n\t\t\t\t\t\tconst accountId = this.getNodeParameter('accountId', i);\n\n\t\t\t\t\t\tconst endpoint = `/sales_accounts/${accountId}`;\n\t\t\t\t\t\tawait freshworksCrmApiRequest.call(this, 'DELETE', endpoint);\n\t\t\t\t\t\tresponseData = { success: true };\n\t\t\t\t\t} else if (operation === 'get') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//               account: get\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\t// https://developers.freshworks.com/crm/api/#view_account\n\n\t\t\t\t\t\tconst accountId = this.getNodeParameter('accountId', i);\n\n\t\t\t\t\t\tconst endpoint = `/sales_accounts/${accountId}`;\n\t\t\t\t\t\tresponseData = await freshworksCrmApiRequest.call(this, 'GET', endpoint);\n\t\t\t\t\t\tresponseData = responseData.sales_account;\n\t\t\t\t\t} else if (operation === 'getAll') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//             account: getAll\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\t// https://developers.freshworks.com/crm/api/#list_all_accounts\n\n\t\t\t\t\t\tconst view = this.getNodeParameter('view', i) as string;\n\n\t\t\t\t\t\tresponseData = await handleListing.call(this, 'GET', `/sales_accounts/view/${view}`);\n\t\t\t\t\t} else if (operation === 'update') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//             account: update\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\t// https://developers.freshworks.com/crm/api/#update_a_account\n\n\t\t\t\t\t\tconst body = {} as IDataObject;\n\t\t\t\t\t\tconst updateFields = this.getNodeParameter('updateFields', i);\n\n\t\t\t\t\t\tif (Object.keys(updateFields).length) {\n\t\t\t\t\t\t\tObject.assign(body, updateFields);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthrowOnEmptyUpdate.call(this, resource);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst accountId = this.getNodeParameter('accountId', i);\n\n\t\t\t\t\t\tconst endpoint = `/sales_accounts/${accountId}`;\n\t\t\t\t\t\tresponseData = await freshworksCrmApiRequest.call(this, 'PUT', endpoint, body);\n\t\t\t\t\t\tresponseData = responseData.sales_account;\n\t\t\t\t\t}\n\t\t\t\t} else if (resource === 'appointment') {\n\t\t\t\t\t// **********************************************************************\n\t\t\t\t\t//                              appointment\n\t\t\t\t\t// **********************************************************************\n\n\t\t\t\t\t// https://developers.freshworks.com/crm/api/#appointments\n\n\t\t\t\t\tif (operation === 'create') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//           appointment: create\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\t// https://developers.freshworks.com/crm/api/#create_appointment\n\n\t\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i) as IDataObject & {\n\t\t\t\t\t\t\ttime_zone: string;\n\t\t\t\t\t\t\tis_allday: boolean;\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tconst startDate = this.getNodeParameter('fromDate', i) as string;\n\t\t\t\t\t\tconst endDate = this.getNodeParameter('endDate', i) as string;\n\t\t\t\t\t\tconst attendees = this.getNodeParameter('attendees.attendee', i, []) as [\n\t\t\t\t\t\t\t{ type: string; contactId: string; userId: string },\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tconst timezone = additionalFields.time_zone ?? defaultTimezone;\n\n\t\t\t\t\t\tlet allDay = false;\n\n\t\t\t\t\t\tif (additionalFields.is_allday) {\n\t\t\t\t\t\t\tallDay = additionalFields.is_allday as boolean;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst start = tz(startDate, timezone);\n\t\t\t\t\t\tconst end = tz(endDate, timezone);\n\n\t\t\t\t\t\tconst body = {\n\t\t\t\t\t\t\ttitle: this.getNodeParameter('title', i),\n\t\t\t\t\t\t\tfrom_date: start.format(),\n\t\t\t\t\t\t\tend_date: allDay ? start.format() : end.format(),\n\t\t\t\t\t\t} as IDataObject;\n\n\t\t\t\t\t\tObject.assign(body, additionalFields);\n\n\t\t\t\t\t\tif (attendees.length) {\n\t\t\t\t\t\t\tbody.appointment_attendees_attributes = adjustAttendees(attendees);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresponseData = await freshworksCrmApiRequest.call(this, 'POST', '/appointments', body);\n\t\t\t\t\t\tresponseData = responseData.appointment;\n\t\t\t\t\t} else if (operation === 'delete') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//           appointment: delete\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\t// https://developers.freshworks.com/crm/api/#delete_a_appointment\n\n\t\t\t\t\t\tconst appointmentId = this.getNodeParameter('appointmentId', i);\n\n\t\t\t\t\t\tconst endpoint = `/appointments/${appointmentId}`;\n\t\t\t\t\t\tawait freshworksCrmApiRequest.call(this, 'DELETE', endpoint);\n\t\t\t\t\t\tresponseData = { success: true };\n\t\t\t\t\t} else if (operation === 'get') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//             appointment: get\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\t// https://developers.freshworks.com/crm/api/#view_a_appointment\n\n\t\t\t\t\t\tconst appointmentId = this.getNodeParameter('appointmentId', i);\n\n\t\t\t\t\t\tconst endpoint = `/appointments/${appointmentId}`;\n\t\t\t\t\t\tresponseData = await freshworksCrmApiRequest.call(this, 'GET', endpoint);\n\t\t\t\t\t\tresponseData = responseData.appointment;\n\t\t\t\t\t} else if (operation === 'getAll') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//           appointment: getAll\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\t// https://developers.freshworks.com/crm/api/#list_all_appointments\n\n\t\t\t\t\t\tconst { filter, include } = this.getNodeParameter('filters', i) as {\n\t\t\t\t\t\t\tfilter: string;\n\t\t\t\t\t\t\tinclude: string[];\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tconst qs: IDataObject = {};\n\n\t\t\t\t\t\tif (filter) {\n\t\t\t\t\t\t\tqs.filter = filter;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (include) {\n\t\t\t\t\t\t\tqs.include = include;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresponseData = await handleListing.call(this, 'GET', '/appointments', {}, qs);\n\t\t\t\t\t} else if (operation === 'update') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//           appointment: update\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\t// https://developers.freshworks.com/crm/api/#update_a_appointment\n\n\t\t\t\t\t\tconst updateFields = this.getNodeParameter('updateFields', i) as IDataObject & {\n\t\t\t\t\t\t\tfrom_date: string;\n\t\t\t\t\t\t\tend_date: string;\n\t\t\t\t\t\t\ttime_zone: string;\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tconst attendees = this.getNodeParameter('updateFields.attendees.attendee', i, []) as [\n\t\t\t\t\t\t\t{ type: string; contactId: string; userId: string },\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tif (!Object.keys(updateFields).length) {\n\t\t\t\t\t\t\tthrowOnEmptyUpdate.call(this, resource);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst body = {} as IDataObject;\n\t\t\t\t\t\tconst { from_date, end_date, ...rest } = updateFields;\n\n\t\t\t\t\t\tconst timezone = rest.time_zone ?? defaultTimezone;\n\n\t\t\t\t\t\tif (from_date) {\n\t\t\t\t\t\t\tbody.from_date = tz(from_date, timezone).format();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (end_date) {\n\t\t\t\t\t\t\tbody.end_date = tz(end_date, timezone).format();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tObject.assign(body, rest);\n\n\t\t\t\t\t\tif (attendees.length) {\n\t\t\t\t\t\t\tbody.appointment_attendees_attributes = adjustAttendees(attendees);\n\t\t\t\t\t\t\tdelete body.attendees;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst appointmentId = this.getNodeParameter('appointmentId', i);\n\n\t\t\t\t\t\tconst endpoint = `/appointments/${appointmentId}`;\n\t\t\t\t\t\tresponseData = await freshworksCrmApiRequest.call(this, 'PUT', endpoint, body);\n\t\t\t\t\t\tresponseData = responseData.appointment;\n\t\t\t\t\t}\n\t\t\t\t} else if (resource === 'contact') {\n\t\t\t\t\t// **********************************************************************\n\t\t\t\t\t//                                contact\n\t\t\t\t\t// **********************************************************************\n\n\t\t\t\t\t// https://developers.freshworks.com/crm/api/#contacts\n\n\t\t\t\t\tif (operation === 'create') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//             contact: create\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\t// https://developers.freshworks.com/crm/api/#create_contact\n\n\t\t\t\t\t\tconst body = {\n\t\t\t\t\t\t\tfirst_name: this.getNodeParameter('firstName', i),\n\t\t\t\t\t\t\tlast_name: this.getNodeParameter('lastName', i),\n\t\t\t\t\t\t\temails: this.getNodeParameter('emails', i),\n\t\t\t\t\t\t} as IDataObject;\n\n\t\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i);\n\n\t\t\t\t\t\tif (Object.keys(additionalFields).length) {\n\t\t\t\t\t\t\tObject.assign(body, adjustAccounts(additionalFields));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await freshworksCrmApiRequest.call(this, 'POST', '/contacts', body);\n\t\t\t\t\t\tresponseData = responseData.contact;\n\t\t\t\t\t} else if (operation === 'delete') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//             contact: delete\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\t// https://developers.freshworks.com/crm/api/#delete_a_contact\n\n\t\t\t\t\t\tconst contactId = this.getNodeParameter('contactId', i);\n\n\t\t\t\t\t\tconst endpoint = `/contacts/${contactId}`;\n\t\t\t\t\t\tawait freshworksCrmApiRequest.call(this, 'DELETE', endpoint);\n\t\t\t\t\t\tresponseData = { success: true };\n\t\t\t\t\t} else if (operation === 'get') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//               contact: get\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\t// https://developers.freshworks.com/crm/api/#view_a_contact\n\n\t\t\t\t\t\tconst contactId = this.getNodeParameter('contactId', i);\n\n\t\t\t\t\t\tconst endpoint = `/contacts/${contactId}`;\n\t\t\t\t\t\tresponseData = await freshworksCrmApiRequest.call(this, 'GET', endpoint);\n\t\t\t\t\t\tresponseData = responseData.contact;\n\t\t\t\t\t} else if (operation === 'getAll') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//             contact: getAll\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\t// https://developers.freshworks.com/crm/api/#list_all_contacts\n\n\t\t\t\t\t\tconst view = this.getNodeParameter('view', i) as string;\n\n\t\t\t\t\t\tresponseData = await handleListing.call(this, 'GET', `/contacts/view/${view}`);\n\t\t\t\t\t} else if (operation === 'update') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//             contact: update\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\t// https://developers.freshworks.com/crm/api/#update_a_contact\n\n\t\t\t\t\t\tconst body = {} as IDataObject;\n\t\t\t\t\t\tconst updateFields = this.getNodeParameter('updateFields', i);\n\n\t\t\t\t\t\tif (Object.keys(updateFields).length) {\n\t\t\t\t\t\t\tObject.assign(body, adjustAccounts(updateFields));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthrowOnEmptyUpdate.call(this, resource);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst contactId = this.getNodeParameter('contactId', i);\n\n\t\t\t\t\t\tconst endpoint = `/contacts/${contactId}`;\n\t\t\t\t\t\tresponseData = await freshworksCrmApiRequest.call(this, 'PUT', endpoint, body);\n\t\t\t\t\t\tresponseData = responseData.contact;\n\t\t\t\t\t}\n\t\t\t\t} else if (resource === 'deal') {\n\t\t\t\t\t// **********************************************************************\n\t\t\t\t\t//                                  deal\n\t\t\t\t\t// **********************************************************************\n\n\t\t\t\t\t// https://developers.freshworks.com/crm/api/#deals\n\n\t\t\t\t\tif (operation === 'create') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//               deal: create\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\t// https://developers.freshworks.com/crm/api/#create_deal\n\n\t\t\t\t\t\tconst body = {\n\t\t\t\t\t\t\tname: this.getNodeParameter('name', i),\n\t\t\t\t\t\t\tamount: this.getNodeParameter('amount', i),\n\t\t\t\t\t\t} as IDataObject;\n\n\t\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i);\n\n\t\t\t\t\t\tif (Object.keys(additionalFields).length) {\n\t\t\t\t\t\t\tObject.assign(body, adjustAccounts(additionalFields));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await freshworksCrmApiRequest.call(this, 'POST', '/deals', body);\n\t\t\t\t\t\tresponseData = responseData.deal;\n\t\t\t\t\t} else if (operation === 'delete') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//               deal: delete\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\t// https://developers.freshworks.com/crm/api/#delete_a_deal\n\n\t\t\t\t\t\tconst dealId = this.getNodeParameter('dealId', i);\n\n\t\t\t\t\t\tawait freshworksCrmApiRequest.call(this, 'DELETE', `/deals/${dealId}`);\n\t\t\t\t\t\tresponseData = { success: true };\n\t\t\t\t\t} else if (operation === 'get') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//                deal: get\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\t// https://developers.freshworks.com/crm/api/#view_a_deal\n\n\t\t\t\t\t\tconst dealId = this.getNodeParameter('dealId', i);\n\n\t\t\t\t\t\tresponseData = await freshworksCrmApiRequest.call(this, 'GET', `/deals/${dealId}`);\n\t\t\t\t\t\tresponseData = responseData.deal;\n\t\t\t\t\t} else if (operation === 'getAll') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//               deal: getAll\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\t// https://developers.freshworks.com/crm/api/#list_all_deals\n\n\t\t\t\t\t\tconst view = this.getNodeParameter('view', i) as string;\n\n\t\t\t\t\t\tresponseData = await handleListing.call(this, 'GET', `/deals/view/${view}`);\n\t\t\t\t\t} else if (operation === 'update') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//               deal: update\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\t// https://developers.freshworks.com/crm/api/#update_a_deal\n\n\t\t\t\t\t\tconst body = {} as IDataObject;\n\t\t\t\t\t\tconst updateFields = this.getNodeParameter('updateFields', i);\n\n\t\t\t\t\t\tif (Object.keys(updateFields).length) {\n\t\t\t\t\t\t\tObject.assign(body, adjustAccounts(updateFields));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthrowOnEmptyUpdate.call(this, resource);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst dealId = this.getNodeParameter('dealId', i);\n\n\t\t\t\t\t\tresponseData = await freshworksCrmApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'PUT',\n\t\t\t\t\t\t\t`/deals/${dealId}`,\n\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tresponseData = responseData.deal;\n\t\t\t\t\t}\n\t\t\t\t} else if (resource === 'note') {\n\t\t\t\t\t// **********************************************************************\n\t\t\t\t\t//                                  note\n\t\t\t\t\t// **********************************************************************\n\n\t\t\t\t\t// https://developers.freshworks.com/crm/api/#notes\n\n\t\t\t\t\tif (operation === 'create') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//               note: create\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\t// https://developers.freshworks.com/crm/api/#create_note\n\n\t\t\t\t\t\tconst body = {\n\t\t\t\t\t\t\tdescription: this.getNodeParameter('description', i),\n\t\t\t\t\t\t\ttargetable_id: this.getNodeParameter('targetable_id', i),\n\t\t\t\t\t\t\ttargetable_type: this.getNodeParameter('targetableType', i),\n\t\t\t\t\t\t} as IDataObject;\n\n\t\t\t\t\t\tresponseData = await freshworksCrmApiRequest.call(this, 'POST', '/notes', body);\n\t\t\t\t\t\tresponseData = responseData.note;\n\t\t\t\t\t} else if (operation === 'delete') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//               note: delete\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\t// https://developers.freshworks.com/crm/api/#delete_a_note\n\n\t\t\t\t\t\tconst noteId = this.getNodeParameter('noteId', i);\n\n\t\t\t\t\t\tawait freshworksCrmApiRequest.call(this, 'DELETE', `/notes/${noteId}`);\n\t\t\t\t\t\tresponseData = { success: true };\n\t\t\t\t\t} else if (operation === 'update') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//               note: update\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\t// https://developers.freshworks.com/crm/api/#update_a_note\n\n\t\t\t\t\t\tconst body = {} as IDataObject;\n\t\t\t\t\t\tconst updateFields = this.getNodeParameter('updateFields', i);\n\n\t\t\t\t\t\tif (Object.keys(updateFields).length) {\n\t\t\t\t\t\t\tObject.assign(body, updateFields);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthrowOnEmptyUpdate.call(this, resource);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst noteId = this.getNodeParameter('noteId', i);\n\n\t\t\t\t\t\tresponseData = await freshworksCrmApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'PUT',\n\t\t\t\t\t\t\t`/notes/${noteId}`,\n\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tresponseData = responseData.note;\n\t\t\t\t\t}\n\t\t\t\t} else if (resource === 'salesActivity') {\n\t\t\t\t\t// **********************************************************************\n\t\t\t\t\t//                             salesActivity\n\t\t\t\t\t// **********************************************************************\n\n\t\t\t\t\t// https://developers.freshworks.com/crm/api/#sales-activities\n\n\t\t\t\t\tif (operation === 'create') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//          salesActivity: create\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\t// https://developers.freshworks.com/crm/api/#create_sales_activity\n\n\t\t\t\t\t\tconst startDate = this.getNodeParameter('from_date', i) as string;\n\t\t\t\t\t\tconst endDate = this.getNodeParameter('end_date', i) as string;\n\n\t\t\t\t\t\tconst body = {\n\t\t\t\t\t\t\tsales_activity_type_id: this.getNodeParameter('sales_activity_type_id', i),\n\t\t\t\t\t\t\ttitle: this.getNodeParameter('title', i),\n\t\t\t\t\t\t\towner_id: this.getNodeParameter('ownerId', i),\n\t\t\t\t\t\t\tstart_date: tz(startDate, defaultTimezone).format(),\n\t\t\t\t\t\t\tend_date: tz(endDate, defaultTimezone).format(),\n\t\t\t\t\t\t\ttargetable_type: this.getNodeParameter('targetableType', i),\n\t\t\t\t\t\t\ttargetable_id: this.getNodeParameter('targetable_id', i),\n\t\t\t\t\t\t} as IDataObject;\n\n\t\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i);\n\n\t\t\t\t\t\tif (Object.keys(additionalFields).length) {\n\t\t\t\t\t\t\tObject.assign(body, additionalFields);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await freshworksCrmApiRequest.call(this, 'POST', '/sales_activities', {\n\t\t\t\t\t\t\tsales_activity: body,\n\t\t\t\t\t\t});\n\t\t\t\t\t\tresponseData = responseData.sales_activity;\n\t\t\t\t\t} else if (operation === 'delete') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//          salesActivity: delete\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\t// https://developers.freshworks.com/crm/api/#delete_a_sales_activity\n\n\t\t\t\t\t\tconst salesActivityId = this.getNodeParameter('salesActivityId', i);\n\n\t\t\t\t\t\tconst endpoint = `/sales_activities/${salesActivityId}`;\n\t\t\t\t\t\tawait freshworksCrmApiRequest.call(this, 'DELETE', endpoint);\n\t\t\t\t\t\tresponseData = { success: true };\n\t\t\t\t\t} else if (operation === 'get') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//            salesActivity: get\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\t// https://developers.freshworks.com/crm/api/#view_a_sales_activity\n\n\t\t\t\t\t\tconst salesActivityId = this.getNodeParameter('salesActivityId', i);\n\n\t\t\t\t\t\tconst endpoint = `/sales_activities/${salesActivityId}`;\n\t\t\t\t\t\tresponseData = await freshworksCrmApiRequest.call(this, 'GET', endpoint);\n\t\t\t\t\t\tresponseData = responseData.sales_activity;\n\t\t\t\t\t} else if (operation === 'getAll') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//          salesActivity: getAll\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\t// https://developers.freshworks.com/crm/api/#list_all_sales_activities\n\n\t\t\t\t\t\tresponseData = await handleListing.call(this, 'GET', '/sales_activities');\n\t\t\t\t\t} else if (operation === 'update') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//          salesActivity: update\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\t// https://developers.freshworks.com/crm/api/#update_a_sales_activity\n\n\t\t\t\t\t\tconst updateFields = this.getNodeParameter('updateFields', i) as IDataObject & {\n\t\t\t\t\t\t\tfrom_date: string;\n\t\t\t\t\t\t\tend_date: string;\n\t\t\t\t\t\t\ttime_zone: string;\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tif (!Object.keys(updateFields).length) {\n\t\t\t\t\t\t\tthrowOnEmptyUpdate.call(this, resource);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst body = {} as IDataObject;\n\t\t\t\t\t\tconst { from_date, end_date, ...rest } = updateFields;\n\n\t\t\t\t\t\tif (from_date) {\n\t\t\t\t\t\t\tbody.from_date = tz(from_date, defaultTimezone).format();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (end_date) {\n\t\t\t\t\t\t\tbody.end_date = tz(end_date, defaultTimezone).format();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (Object.keys(rest).length) {\n\t\t\t\t\t\t\tObject.assign(body, rest);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst salesActivityId = this.getNodeParameter('salesActivityId', i);\n\n\t\t\t\t\t\tconst endpoint = `/sales_activities/${salesActivityId}`;\n\t\t\t\t\t\tresponseData = await freshworksCrmApiRequest.call(this, 'PUT', endpoint, body);\n\t\t\t\t\t\tresponseData = responseData.sales_activity;\n\t\t\t\t\t}\n\t\t\t\t} else if (resource === 'search') {\n\t\t\t\t\t// **********************************************************************\n\t\t\t\t\t//                             search\n\t\t\t\t\t// **********************************************************************\n\n\t\t\t\t\tif (operation === 'query') {\n\t\t\t\t\t\t// https://developers.freshworks.com/crm/api/#search\n\t\t\t\t\t\tconst query = this.getNodeParameter('query', i) as string;\n\t\t\t\t\t\tlet entities = this.getNodeParameter('entities', i);\n\t\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', 0, false);\n\n\t\t\t\t\t\tif (Array.isArray(entities)) {\n\t\t\t\t\t\t\tentities = entities.join(',');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst qs: IDataObject = {\n\t\t\t\t\t\t\tq: query,\n\t\t\t\t\t\t\tinclude: entities,\n\t\t\t\t\t\t\tper_page: 100,\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tresponseData = await freshworksCrmApiRequest.call(this, 'GET', '/search', {}, qs);\n\n\t\t\t\t\t\tif (!returnAll) {\n\t\t\t\t\t\t\tconst limit = this.getNodeParameter('limit', 0);\n\t\t\t\t\t\t\tresponseData = responseData.slice(0, limit);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (operation === 'lookup') {\n\t\t\t\t\t\t// https://developers.freshworks.com/crm/api/#lookup_search\n\t\t\t\t\t\tlet searchField = this.getNodeParameter('searchField', i) as string;\n\t\t\t\t\t\tlet fieldValue = this.getNodeParameter('fieldValue', i, '') as string;\n\t\t\t\t\t\tlet entities = this.getNodeParameter('options.entities', i) as string;\n\t\t\t\t\t\tif (Array.isArray(entities)) {\n\t\t\t\t\t\t\tentities = entities.join(',');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (searchField === 'customField') {\n\t\t\t\t\t\t\tsearchField = this.getNodeParameter('customFieldName', i) as string;\n\t\t\t\t\t\t\tfieldValue = this.getNodeParameter('customFieldValue', i) as string;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst qs: IDataObject = {\n\t\t\t\t\t\t\tq: fieldValue,\n\t\t\t\t\t\t\tf: searchField,\n\t\t\t\t\t\t\tentities,\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tresponseData = await freshworksCrmApiRequest.call(this, 'GET', '/lookup', {}, qs);\n\t\t\t\t\t}\n\t\t\t\t} else if (resource === 'task') {\n\t\t\t\t\t// **********************************************************************\n\t\t\t\t\t//                                  task\n\t\t\t\t\t// **********************************************************************\n\n\t\t\t\t\t// https://developers.freshworks.com/crm/api/#tasks\n\n\t\t\t\t\tif (operation === 'create') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//               task: create\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\t// https://developers.freshworks.com/crm/api/#create_task\n\n\t\t\t\t\t\tconst dueDate = this.getNodeParameter('dueDate', i);\n\n\t\t\t\t\t\tconst body = {\n\t\t\t\t\t\t\ttitle: this.getNodeParameter('title', i),\n\t\t\t\t\t\t\towner_id: this.getNodeParameter('ownerId', i),\n\t\t\t\t\t\t\tdue_date: tz(dueDate, defaultTimezone).format(),\n\t\t\t\t\t\t\ttargetable_type: this.getNodeParameter('targetableType', i),\n\t\t\t\t\t\t\ttargetable_id: this.getNodeParameter('targetable_id', i),\n\t\t\t\t\t\t} as IDataObject;\n\n\t\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i);\n\n\t\t\t\t\t\tif (Object.keys(additionalFields).length) {\n\t\t\t\t\t\t\tObject.assign(body, additionalFields);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await freshworksCrmApiRequest.call(this, 'POST', '/tasks', body);\n\t\t\t\t\t\tresponseData = responseData.task;\n\t\t\t\t\t} else if (operation === 'delete') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//               task: delete\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\t// https://developers.freshworks.com/crm/api/#delete_a_task\n\n\t\t\t\t\t\tconst taskId = this.getNodeParameter('taskId', i);\n\n\t\t\t\t\t\tawait freshworksCrmApiRequest.call(this, 'DELETE', `/tasks/${taskId}`);\n\t\t\t\t\t\tresponseData = { success: true };\n\t\t\t\t\t} else if (operation === 'get') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//                task: get\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\t// https://developers.freshworks.com/crm/api/#view_a_task\n\n\t\t\t\t\t\tconst taskId = this.getNodeParameter('taskId', i);\n\n\t\t\t\t\t\tresponseData = await freshworksCrmApiRequest.call(this, 'GET', `/tasks/${taskId}`);\n\t\t\t\t\t\tresponseData = responseData.task;\n\t\t\t\t\t} else if (operation === 'getAll') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//               task: getAll\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\t// https://developers.freshworks.com/crm/api/#list_all_tasks\n\n\t\t\t\t\t\tconst { filter, include } = this.getNodeParameter('filters', i) as {\n\t\t\t\t\t\t\tfilter: string;\n\t\t\t\t\t\t\tinclude: string;\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tconst qs: IDataObject = {\n\t\t\t\t\t\t\tfilter: 'open',\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tif (filter) {\n\t\t\t\t\t\t\tqs.filter = filter;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (include) {\n\t\t\t\t\t\t\tqs.include = include;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await handleListing.call(this, 'GET', '/tasks', {}, qs);\n\t\t\t\t\t} else if (operation === 'update') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//               task: update\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\t// https://developers.freshworks.com/crm/api/#update_a_task\n\n\t\t\t\t\t\tconst body = {} as IDataObject;\n\t\t\t\t\t\tconst updateFields = this.getNodeParameter('updateFields', i);\n\n\t\t\t\t\t\tif (!Object.keys(updateFields).length) {\n\t\t\t\t\t\t\tthrowOnEmptyUpdate.call(this, resource);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst { dueDate, ...rest } = updateFields;\n\n\t\t\t\t\t\tif (dueDate) {\n\t\t\t\t\t\t\tbody.due_date = tz(dueDate, defaultTimezone).format();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (Object.keys(rest).length) {\n\t\t\t\t\t\t\tObject.assign(body, rest);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst taskId = this.getNodeParameter('taskId', i);\n\n\t\t\t\t\t\tresponseData = await freshworksCrmApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'PUT',\n\t\t\t\t\t\t\t`/tasks/${taskId}`,\n\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tresponseData = responseData.task;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\tconst executionErrorData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\tthis.helpers.returnJsonArray({ error: error.message }),\n\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t);\n\t\t\t\t\treturnData.push(...executionErrorData);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tthrow error;\n\t\t\t}\n\n\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject),\n\t\t\t\t{ itemData: { item: i } },\n\t\t\t);\n\t\t\treturnData.push(...executionData);\n\t\t}\n\n\t\treturn [returnData];\n\t}\n}\n"],"mappings":"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","names":[]}