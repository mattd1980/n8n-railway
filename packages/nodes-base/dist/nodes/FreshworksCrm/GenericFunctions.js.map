{"version":3,"sources":["../../../nodes/FreshworksCrm/GenericFunctions.ts"],"sourcesContent":["import omit from 'lodash/omit';\nimport type {\n\tIExecuteFunctions,\n\tIDataObject,\n\tILoadOptionsFunctions,\n\tJsonObject,\n\tIHttpRequestMethods,\n\tIRequestOptions,\n} from 'n8n-workflow';\nimport { NodeApiError, NodeOperationError } from 'n8n-workflow';\n\nimport type {\n\tFreshworksConfigResponse,\n\tFreshworksCrmApiCredentials,\n\tSalesAccounts,\n\tViewsResponse,\n} from './types';\n\nexport async function freshworksCrmApiRequest(\n\tthis: IExecuteFunctions | ILoadOptionsFunctions,\n\tmethod: IHttpRequestMethods,\n\tendpoint: string,\n\tbody: IDataObject = {},\n\tqs: IDataObject = {},\n) {\n\tconst { domain } = await this.getCredentials<FreshworksCrmApiCredentials>('freshworksCrmApi');\n\n\tconst options: IRequestOptions = {\n\t\tmethod,\n\t\tbody,\n\t\tqs,\n\t\turi: `https://${domain}.myfreshworks.com/crm/sales/api${endpoint}`,\n\t\tjson: true,\n\t};\n\n\tif (!Object.keys(body).length) {\n\t\tdelete options.body;\n\t}\n\n\tif (!Object.keys(qs).length) {\n\t\tdelete options.qs;\n\t}\n\ttry {\n\t\tconst credentialsType = 'freshworksCrmApi';\n\t\treturn await this.helpers.requestWithAuthentication.call(this, credentialsType, options);\n\t} catch (error) {\n\t\tthrow new NodeApiError(this.getNode(), error as JsonObject);\n\t}\n}\n\nexport async function getAllItemsViewId(\n\tthis: IExecuteFunctions | ILoadOptionsFunctions,\n\t{ fromLoadOptions } = { fromLoadOptions: false },\n) {\n\tlet resource = this.getNodeParameter('resource', 0);\n\tlet keyword = 'All';\n\n\tif (resource === 'account' || fromLoadOptions) {\n\t\tresource = 'sales_account'; // adjust resource to endpoint\n\t}\n\n\tif (resource === 'deal') {\n\t\tkeyword = 'My Deals'; // no 'All Deals' available\n\t}\n\n\tconst response = (await freshworksCrmApiRequest.call(\n\t\tthis,\n\t\t'GET',\n\t\t`/${resource}s/filters`,\n\t)) as ViewsResponse;\n\n\tconst view = response.filters.find((v) => v.name.includes(keyword));\n\n\tif (!view) {\n\t\tthrow new NodeOperationError(this.getNode(), 'Failed to get all items view');\n\t}\n\n\treturn view.id.toString();\n}\n\nexport async function freshworksCrmApiRequestAllItems(\n\tthis: IExecuteFunctions | ILoadOptionsFunctions,\n\tmethod: IHttpRequestMethods,\n\tendpoint: string,\n\tbody: IDataObject = {},\n\tqs: IDataObject = {},\n) {\n\tconst returnData: IDataObject[] = [];\n\tlet response: any;\n\n\tqs.page = 1;\n\n\tdo {\n\t\tresponse = await freshworksCrmApiRequest.call(this, method, endpoint, body, qs);\n\t\tconst key = Object.keys(response as IDataObject)[0];\n\t\treturnData.push(...(response[key] as IDataObject[]));\n\t\tqs.page++;\n\t} while (response.meta.total_pages && qs.page <= response.meta.total_pages);\n\n\treturn returnData;\n}\n\nexport async function handleListing(\n\tthis: IExecuteFunctions | ILoadOptionsFunctions,\n\tmethod: IHttpRequestMethods,\n\tendpoint: string,\n\tbody: IDataObject = {},\n\tqs: IDataObject = {},\n) {\n\tconst returnAll = this.getNodeParameter('returnAll', 0);\n\n\tif (returnAll) {\n\t\treturn await freshworksCrmApiRequestAllItems.call(this, method, endpoint, body, qs);\n\t}\n\n\tconst responseData = await freshworksCrmApiRequestAllItems.call(this, method, endpoint, body, qs);\n\tconst limit = this.getNodeParameter('limit', 0) as number;\n\n\tif (limit) return responseData.slice(0, limit);\n\n\treturn responseData;\n}\n\n/**\n * Load resources for options, except users.\n *\n * See: https://developers.freshworks.com/crm/api/#admin_configuration\n */\nexport async function loadResource(this: ILoadOptionsFunctions, resource: string) {\n\tconst response = (await freshworksCrmApiRequest.call(\n\t\tthis,\n\t\t'GET',\n\t\t`/selector/${resource}`,\n\t)) as FreshworksConfigResponse<LoadedResource>;\n\n\tconst key = Object.keys(response)[0];\n\treturn response[key].map(({ name, id }) => ({ name, value: id }));\n}\n\nexport function adjustAttendees(attendees: [{ type: string; contactId: string; userId: string }]) {\n\treturn attendees.map((attendee) => {\n\t\tif (attendee.type === 'contact') {\n\t\t\treturn {\n\t\t\t\tattendee_type: 'Contact',\n\t\t\t\tattendee_id: attendee.contactId.toString(),\n\t\t\t};\n\t\t} else if (attendee.type === 'user') {\n\t\t\treturn {\n\t\t\t\tattendee_type: 'FdMultitenant::User',\n\t\t\t\tattendee_id: attendee.userId.toString(),\n\t\t\t};\n\t\t}\n\t});\n}\n\n// /**\n//  * Adjust attendee data from n8n UI to the format expected by Freshworks CRM API.\n//  */\n// export function adjustAttendees(additionalFields: IDataObject & Attendees) {\n// \tif (!additionalFields?.appointment_attendees_attributes) return additionalFields;\n\n// \treturn {\n// \t\t...omit(additionalFields, ['appointment_attendees_attributes']),\n// \t\tappointment_attendees_attributes: additionalFields.appointment_attendees_attributes.map(attendeeId => {\n// \t\t\treturn { type: 'user', id: attendeeId };\n// \t\t}),\n// \t};\n// }\n\n/**\n * Adjust account data from n8n UI to the format expected by Freshworks CRM API.\n */\nexport function adjustAccounts(additionalFields: IDataObject & SalesAccounts) {\n\tif (!additionalFields?.sales_accounts) return additionalFields;\n\n\tconst adjusted = additionalFields.sales_accounts.map((accountId) => {\n\t\treturn { id: accountId, is_primary: false };\n\t});\n\n\tadjusted[0].is_primary = true;\n\n\treturn {\n\t\t...omit(additionalFields, ['sales_accounts']),\n\t\tsales_accounts: adjusted,\n\t};\n}\n\nexport function throwOnEmptyUpdate(this: IExecuteFunctions, resource: string) {\n\tthrow new NodeOperationError(\n\t\tthis.getNode(),\n\t\t`Please enter at least one field to update for the ${resource}.`,\n\t);\n}\n\nexport function throwOnEmptyFilter(this: IExecuteFunctions) {\n\tthrow new NodeOperationError(this.getNode(), 'Please select at least one filter.');\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAiB;AASjB,0BAAiD;AASjD,eAAsB,wBAErB,QACA,UACA,OAAoB,CAAC,GACrB,KAAkB,CAAC,GAClB;AACD,QAAM,EAAE,OAAO,IAAI,MAAM,KAAK,eAA4C,kBAAkB;AAE5F,QAAM,UAA2B;AAAA,IAChC;AAAA,IACA;AAAA,IACA;AAAA,IACA,KAAK,WAAW,MAAM,kCAAkC,QAAQ;AAAA,IAChE,MAAM;AAAA,EACP;AAEA,MAAI,CAAC,OAAO,KAAK,IAAI,EAAE,QAAQ;AAC9B,WAAO,QAAQ;AAAA,EAChB;AAEA,MAAI,CAAC,OAAO,KAAK,EAAE,EAAE,QAAQ;AAC5B,WAAO,QAAQ;AAAA,EAChB;AACA,MAAI;AACH,UAAM,kBAAkB;AACxB,WAAO,MAAM,KAAK,QAAQ,0BAA0B,KAAK,MAAM,iBAAiB,OAAO;AAAA,EACxF,SAAS,OAAO;AACf,UAAM,IAAI,iCAAa,KAAK,QAAQ,GAAG,KAAmB;AAAA,EAC3D;AACD;AAEA,eAAsB,kBAErB,EAAE,gBAAgB,IAAI,EAAE,iBAAiB,MAAM,GAC9C;AACD,MAAI,WAAW,KAAK,iBAAiB,YAAY,CAAC;AAClD,MAAI,UAAU;AAEd,MAAI,aAAa,aAAa,iBAAiB;AAC9C,eAAW;AAAA,EACZ;AAEA,MAAI,aAAa,QAAQ;AACxB,cAAU;AAAA,EACX;AAEA,QAAM,WAAY,MAAM,wBAAwB;AAAA,IAC/C;AAAA,IACA;AAAA,IACA,IAAI,QAAQ;AAAA,EACb;AAEA,QAAM,OAAO,SAAS,QAAQ,KAAK,CAAC,MAAM,EAAE,KAAK,SAAS,OAAO,CAAC;AAElE,MAAI,CAAC,MAAM;AACV,UAAM,IAAI,uCAAmB,KAAK,QAAQ,GAAG,8BAA8B;AAAA,EAC5E;AAEA,SAAO,KAAK,GAAG,SAAS;AACzB;AAEA,eAAsB,gCAErB,QACA,UACA,OAAoB,CAAC,GACrB,KAAkB,CAAC,GAClB;AACD,QAAM,aAA4B,CAAC;AACnC,MAAI;AAEJ,KAAG,OAAO;AAEV,KAAG;AACF,eAAW,MAAM,wBAAwB,KAAK,MAAM,QAAQ,UAAU,MAAM,EAAE;AAC9E,UAAM,MAAM,OAAO,KAAK,QAAuB,EAAE,CAAC;AAClD,eAAW,KAAK,GAAI,SAAS,GAAG,CAAmB;AACnD,OAAG;AAAA,EACJ,SAAS,SAAS,KAAK,eAAe,GAAG,QAAQ,SAAS,KAAK;AAE/D,SAAO;AACR;AAEA,eAAsB,cAErB,QACA,UACA,OAAoB,CAAC,GACrB,KAAkB,CAAC,GAClB;AACD,QAAM,YAAY,KAAK,iBAAiB,aAAa,CAAC;AAEtD,MAAI,WAAW;AACd,WAAO,MAAM,gCAAgC,KAAK,MAAM,QAAQ,UAAU,MAAM,EAAE;AAAA,EACnF;AAEA,QAAM,eAAe,MAAM,gCAAgC,KAAK,MAAM,QAAQ,UAAU,MAAM,EAAE;AAChG,QAAM,QAAQ,KAAK,iBAAiB,SAAS,CAAC;AAE9C,MAAI,MAAO,QAAO,aAAa,MAAM,GAAG,KAAK;AAE7C,SAAO;AACR;AAOA,eAAsB,aAA0C,UAAkB;AACjF,QAAM,WAAY,MAAM,wBAAwB;AAAA,IAC/C;AAAA,IACA;AAAA,IACA,aAAa,QAAQ;AAAA,EACtB;AAEA,QAAM,MAAM,OAAO,KAAK,QAAQ,EAAE,CAAC;AACnC,SAAO,SAAS,GAAG,EAAE,IAAI,CAAC,EAAE,MAAM,GAAG,OAAO,EAAE,MAAM,OAAO,GAAG,EAAE;AACjE;AAEO,SAAS,gBAAgB,WAAkE;AACjG,SAAO,UAAU,IAAI,CAAC,aAAa;AAClC,QAAI,SAAS,SAAS,WAAW;AAChC,aAAO;AAAA,QACN,eAAe;AAAA,QACf,aAAa,SAAS,UAAU,SAAS;AAAA,MAC1C;AAAA,IACD,WAAW,SAAS,SAAS,QAAQ;AACpC,aAAO;AAAA,QACN,eAAe;AAAA,QACf,aAAa,SAAS,OAAO,SAAS;AAAA,MACvC;AAAA,IACD;AAAA,EACD,CAAC;AACF;AAmBO,SAAS,eAAe,kBAA+C;AAC7E,MAAI,CAAC,kBAAkB,eAAgB,QAAO;AAE9C,QAAM,WAAW,iBAAiB,eAAe,IAAI,CAAC,cAAc;AACnE,WAAO,EAAE,IAAI,WAAW,YAAY,MAAM;AAAA,EAC3C,CAAC;AAED,WAAS,CAAC,EAAE,aAAa;AAEzB,SAAO;AAAA,IACN,OAAG,YAAAA,SAAK,kBAAkB,CAAC,gBAAgB,CAAC;AAAA,IAC5C,gBAAgB;AAAA,EACjB;AACD;AAEO,SAAS,mBAA4C,UAAkB;AAC7E,QAAM,IAAI;AAAA,IACT,KAAK,QAAQ;AAAA,IACb,qDAAqD,QAAQ;AAAA,EAC9D;AACD;AAEO,SAAS,qBAA4C;AAC3D,QAAM,IAAI,uCAAmB,KAAK,QAAQ,GAAG,oCAAoC;AAClF;","names":["omit"]}