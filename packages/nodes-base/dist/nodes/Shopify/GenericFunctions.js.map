{"version":3,"sources":["../../../nodes/Shopify/GenericFunctions.ts"],"sourcesContent":["import { snakeCase } from 'change-case';\nimport type {\n\tIDataObject,\n\tIExecuteFunctions,\n\tIHookFunctions,\n\tILoadOptionsFunctions,\n\tIOAuth2Options,\n\tIHttpRequestMethods,\n\tIRequestOptions,\n} from 'n8n-workflow';\n\nexport async function shopifyApiRequest(\n\tthis: IHookFunctions | IExecuteFunctions | ILoadOptionsFunctions,\n\tmethod: IHttpRequestMethods,\n\tresource: string,\n\n\tbody: any = {},\n\tquery: IDataObject = {},\n\turi?: string,\n\toption: IDataObject = {},\n): Promise<any> {\n\tconst authenticationMethod = this.getNodeParameter('authentication', 0, 'oAuth2') as string;\n\n\tlet credentials;\n\tlet credentialType = 'shopifyOAuth2Api';\n\n\tif (authenticationMethod === 'apiKey') {\n\t\tcredentials = await this.getCredentials('shopifyApi');\n\t\tcredentialType = 'shopifyApi';\n\t} else if (authenticationMethod === 'accessToken') {\n\t\tcredentials = await this.getCredentials('shopifyAccessTokenApi');\n\t\tcredentialType = 'shopifyAccessTokenApi';\n\t} else {\n\t\tcredentials = await this.getCredentials('shopifyOAuth2Api');\n\t}\n\n\tconst options: IRequestOptions = {\n\t\tmethod,\n\t\tqs: query,\n\t\turi: uri || `https://${credentials.shopSubdomain}.myshopify.com/admin/api/2024-07/${resource}`,\n\t\tbody,\n\t\tjson: true,\n\t};\n\n\tconst oAuth2Options: IOAuth2Options = {\n\t\ttokenType: 'Bearer',\n\t\tkeyToIncludeInAccessTokenHeader: 'X-Shopify-Access-Token',\n\t};\n\n\tif (authenticationMethod === 'apiKey') {\n\t\tObject.assign(options, {\n\t\t\tauth: { username: credentials.apiKey, password: credentials.password },\n\t\t});\n\t}\n\n\tif (Object.keys(option).length !== 0) {\n\t\tObject.assign(options, option);\n\t}\n\tif (Object.keys(body as IDataObject).length === 0) {\n\t\tdelete options.body;\n\t}\n\tif (Object.keys(query).length === 0) {\n\t\tdelete options.qs;\n\t}\n\n\t// Only limit and fields are allowed for page_info links\n\t// https://shopify.dev/docs/api/usage/pagination-rest#limitations-and-considerations\n\tif (uri && uri.includes('page_info')) {\n\t\toptions.qs = {};\n\n\t\tif (query.limit) {\n\t\t\toptions.qs.limit = query.limit;\n\t\t}\n\n\t\tif (query.fields) {\n\t\t\toptions.qs.fields = query.fields;\n\t\t}\n\t}\n\n\treturn await this.helpers.requestWithAuthentication.call(this, credentialType, options, {\n\t\toauth2: oAuth2Options,\n\t});\n}\n\nexport async function shopifyApiRequestAllItems(\n\tthis: IHookFunctions | IExecuteFunctions | ILoadOptionsFunctions,\n\tpropertyName: string,\n\tmethod: IHttpRequestMethods,\n\tresource: string,\n\n\tbody: any = {},\n\tquery: IDataObject = {},\n): Promise<any> {\n\tconst returnData: IDataObject[] = [];\n\n\t/*\n\t \tWhen paginating some parameters\n\t\t(e.g. product:getAll -> title ) cannot\n\t\tbe empty in the query string, so remove\n\t\tall the empty ones before paginating.\n\t*/\n\tfor (const field in query) {\n\t\tif (query[field] === '') {\n\t\t\tdelete query[field];\n\t\t}\n\t}\n\n\tlet responseData;\n\n\tlet uri: string | undefined;\n\n\tdo {\n\t\tresponseData = await shopifyApiRequest.call(this, method, resource, body, query, uri, {\n\t\t\tresolveWithFullResponse: true,\n\t\t});\n\t\tif (responseData.headers.link) {\n\t\t\turi = responseData.headers.link.split(';')[0].replace('<', '').replace('>', '');\n\t\t}\n\t\treturnData.push.apply(returnData, responseData.body[propertyName] as IDataObject[]);\n\t} while (responseData.headers.link?.includes('rel=\"next\"'));\n\treturn returnData;\n}\n\nexport function keysToSnakeCase(elements: IDataObject[] | IDataObject): IDataObject[] {\n\tif (elements === undefined) {\n\t\treturn [];\n\t}\n\tif (!Array.isArray(elements)) {\n\t\telements = [elements];\n\t}\n\tfor (const element of elements) {\n\t\tfor (const key of Object.keys(element)) {\n\t\t\tif (key !== snakeCase(key)) {\n\t\t\t\telement[snakeCase(key)] = element[key];\n\t\t\t\tdelete element[key];\n\t\t\t}\n\t\t}\n\t}\n\treturn elements;\n}\n"],"mappings":"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","names":[]}