{"version":3,"sources":["../../../nodes/MongoDb/GenericFunctions.ts"],"sourcesContent":["import get from 'lodash/get';\nimport set from 'lodash/set';\nimport { MongoClient, ObjectId } from 'mongodb';\nimport { NodeOperationError } from 'n8n-workflow';\nimport type {\n\tICredentialDataDecryptedObject,\n\tIDataObject,\n\tIExecuteFunctions,\n\tINodeExecutionData,\n} from 'n8n-workflow';\nimport { createSecureContext } from 'tls';\n\nimport type {\n\tIMongoCredentials,\n\tIMongoCredentialsType,\n\tIMongoParametricCredentials,\n} from './mongoDb.types';\nimport { formatPrivateKey } from '../../utils/utilities';\n\n/**\n * Standard way of building the MongoDB connection string, unless overridden with a provided string\n *\n * @param {ICredentialDataDecryptedObject} credentials MongoDB credentials to use, unless conn string is overridden\n */\nexport function buildParameterizedConnString(credentials: IMongoParametricCredentials): string {\n\tif (credentials.port) {\n\t\treturn `mongodb://${credentials.user}:${credentials.password}@${credentials.host}:${credentials.port}`;\n\t} else {\n\t\treturn `mongodb+srv://${credentials.user}:${credentials.password}@${credentials.host}`;\n\t}\n}\n\n/**\n * Build mongoDb connection string and resolve database name.\n * If a connection string override value is provided, that will be used in place of individual args\n *\n * @param {ICredentialDataDecryptedObject} credentials raw/input MongoDB credentials to use\n */\nexport function buildMongoConnectionParams(\n\tself: IExecuteFunctions,\n\tcredentials: IMongoCredentialsType,\n): IMongoCredentials {\n\tconst sanitizedDbName =\n\t\tcredentials.database && credentials.database.trim().length > 0\n\t\t\t? credentials.database.trim()\n\t\t\t: '';\n\tif (credentials.configurationType === 'connectionString') {\n\t\tif (credentials.connectionString && credentials.connectionString.trim().length > 0) {\n\t\t\treturn {\n\t\t\t\tconnectionString: credentials.connectionString.trim(),\n\t\t\t\tdatabase: sanitizedDbName,\n\t\t\t};\n\t\t} else {\n\t\t\tthrow new NodeOperationError(\n\t\t\t\tself.getNode(),\n\t\t\t\t'Cannot override credentials: valid MongoDB connection string not provided ',\n\t\t\t);\n\t\t}\n\t} else {\n\t\treturn {\n\t\t\tconnectionString: buildParameterizedConnString(credentials),\n\t\t\tdatabase: sanitizedDbName,\n\t\t};\n\t}\n}\n\n/**\n * Verify credentials. If ok, build mongoDb connection string and resolve database name.\n *\n * @param {ICredentialDataDecryptedObject} credentials raw/input MongoDB credentials to use\n */\nexport function validateAndResolveMongoCredentials(\n\tself: IExecuteFunctions,\n\tcredentials?: ICredentialDataDecryptedObject,\n): IMongoCredentials {\n\tif (credentials === undefined) {\n\t\tthrow new NodeOperationError(self.getNode(), 'No credentials got returned!');\n\t} else {\n\t\treturn buildMongoConnectionParams(self, credentials as unknown as IMongoCredentialsType);\n\t}\n}\n\nexport function prepareItems(\n\titems: INodeExecutionData[],\n\tfields: string[],\n\tupdateKey = '',\n\tuseDotNotation = false,\n\tdateFields: string[] = [],\n) {\n\tlet data = items;\n\n\tif (updateKey) {\n\t\tif (!fields.includes(updateKey)) {\n\t\t\tfields.push(updateKey);\n\t\t}\n\t\tdata = items.filter((item) => item.json[updateKey] !== undefined);\n\t}\n\n\tconst preparedItems = data.map(({ json }) => {\n\t\tconst updateItem: IDataObject = {};\n\n\t\tfor (const field of fields) {\n\t\t\tlet fieldData;\n\n\t\t\tif (useDotNotation) {\n\t\t\t\tfieldData = get(json, field, null);\n\t\t\t} else {\n\t\t\t\tfieldData = json[field] !== undefined ? json[field] : null;\n\t\t\t}\n\n\t\t\tif (fieldData && dateFields.includes(field)) {\n\t\t\t\tfieldData = new Date(fieldData as string);\n\t\t\t}\n\n\t\t\tif (useDotNotation) {\n\t\t\t\tset(updateItem, field, fieldData);\n\t\t\t} else {\n\t\t\t\tupdateItem[field] = fieldData;\n\t\t\t}\n\t\t}\n\n\t\treturn updateItem;\n\t});\n\n\treturn preparedItems;\n}\n\nexport function prepareFields(fields: string) {\n\treturn fields\n\t\t.split(',')\n\t\t.map((field) => field.trim())\n\t\t.filter((field) => !!field);\n}\n\nexport function stringifyObjectIDs(items: INodeExecutionData[]) {\n\titems.forEach((item) => {\n\t\tif (item._id instanceof ObjectId) {\n\t\t\titem.json._id = item._id.toString();\n\t\t}\n\t\tif (item.id instanceof ObjectId) {\n\t\t\titem.json.id = item.id.toString();\n\t\t}\n\t});\n\n\treturn items;\n}\n\nexport async function connectMongoClient(connectionString: string, credentials: IDataObject = {}) {\n\tlet client: MongoClient;\n\n\tif (credentials.tls) {\n\t\tconst ca = credentials.ca ? formatPrivateKey(credentials.ca as string) : undefined;\n\t\tconst cert = credentials.cert ? formatPrivateKey(credentials.cert as string) : undefined;\n\t\tconst key = credentials.key ? formatPrivateKey(credentials.key as string) : undefined;\n\t\tconst passphrase = (credentials.passphrase as string) || undefined;\n\n\t\tconst secureContext = createSecureContext({\n\t\t\tca,\n\t\t\tcert,\n\t\t\tkey,\n\t\t\tpassphrase,\n\t\t});\n\n\t\tclient = await MongoClient.connect(connectionString, {\n\t\t\ttls: true,\n\t\t\tsecureContext,\n\t\t});\n\t} else {\n\t\tclient = await MongoClient.connect(connectionString);\n\t}\n\n\treturn client;\n}\n"],"mappings":"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","names":["get","set"]}