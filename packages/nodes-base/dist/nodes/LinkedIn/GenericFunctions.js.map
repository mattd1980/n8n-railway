{"version":3,"sources":["../../../nodes/LinkedIn/GenericFunctions.ts"],"sourcesContent":["import type {\n\tIDataObject,\n\tIExecuteFunctions,\n\tIHookFunctions,\n\tILoadOptionsFunctions,\n\tJsonObject,\n\tIRequestOptions,\n\tIHttpRequestMethods,\n} from 'n8n-workflow';\nimport { NodeApiError } from 'n8n-workflow';\nfunction resolveHeaderData(fullResponse: any) {\n\tif (fullResponse.statusCode === 201) {\n\t\treturn { urn: fullResponse.headers['x-restli-id'] };\n\t} else {\n\t\treturn fullResponse.body;\n\t}\n}\n\nexport async function linkedInApiRequest(\n\tthis: IHookFunctions | IExecuteFunctions | ILoadOptionsFunctions,\n\tmethod: IHttpRequestMethods,\n\tendpoint: string,\n\n\tbody: any = {},\n\tbinary?: boolean,\n\t_headers?: object,\n): Promise<any> {\n\tconst authenticationMethod = this.getNodeParameter('authentication', 0);\n\tconst credentialType =\n\t\tauthenticationMethod === 'standard'\n\t\t\t? 'linkedInOAuth2Api'\n\t\t\t: 'linkedInCommunityManagementOAuth2Api';\n\n\tconst baseUrl = 'https://api.linkedin.com';\n\n\tlet options: IRequestOptions = {\n\t\theaders: {\n\t\t\tAccept: 'application/json',\n\t\t\t'X-Restli-Protocol-Version': '2.0.0',\n\t\t\t'LinkedIn-Version': '202504',\n\t\t},\n\t\tmethod,\n\t\tbody,\n\t\turl: binary ? endpoint : `${baseUrl}${endpoint.includes('v2') ? '' : '/rest'}${endpoint}`,\n\t\tjson: true,\n\t};\n\n\toptions = Object.assign({}, options, {\n\t\tresolveWithFullResponse: true,\n\t});\n\t// If uploading binary data\n\tif (binary) {\n\t\tdelete options.json;\n\t\toptions.encoding = null;\n\t\tif (Object.keys(_headers as object).length > 0) {\n\t\t\tObject.assign(options.headers as object, _headers);\n\t\t}\n\t}\n\n\tif (Object.keys(body as IDataObject).length === 0) {\n\t\tdelete options.body;\n\t}\n\n\ttry {\n\t\treturn resolveHeaderData(\n\t\t\tawait this.helpers.requestOAuth2.call(this, credentialType, options, {\n\t\t\t\ttokenType: 'Bearer',\n\t\t\t}),\n\t\t);\n\t} catch (error) {\n\t\tthrow new NodeApiError(this.getNode(), error as JsonObject);\n\t}\n}\n\nexport function validateJSON(json: string | undefined): any {\n\tlet result;\n\ttry {\n\t\tresult = JSON.parse(json!);\n\t} catch (exception) {\n\t\tresult = '';\n\t}\n\treturn result;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA,0BAA6B;AAC7B,SAAS,kBAAkB,cAAmB;AAC7C,MAAI,aAAa,eAAe,KAAK;AACpC,WAAO,EAAE,KAAK,aAAa,QAAQ,aAAa,EAAE;AAAA,EACnD,OAAO;AACN,WAAO,aAAa;AAAA,EACrB;AACD;AAEA,eAAsB,mBAErB,QACA,UAEA,OAAY,CAAC,GACb,QACA,UACe;AACf,QAAM,uBAAuB,KAAK,iBAAiB,kBAAkB,CAAC;AACtE,QAAM,iBACL,yBAAyB,aACtB,sBACA;AAEJ,QAAM,UAAU;AAEhB,MAAI,UAA2B;AAAA,IAC9B,SAAS;AAAA,MACR,QAAQ;AAAA,MACR,6BAA6B;AAAA,MAC7B,oBAAoB;AAAA,IACrB;AAAA,IACA;AAAA,IACA;AAAA,IACA,KAAK,SAAS,WAAW,GAAG,OAAO,GAAG,SAAS,SAAS,IAAI,IAAI,KAAK,OAAO,GAAG,QAAQ;AAAA,IACvF,MAAM;AAAA,EACP;AAEA,YAAU,OAAO,OAAO,CAAC,GAAG,SAAS;AAAA,IACpC,yBAAyB;AAAA,EAC1B,CAAC;AAED,MAAI,QAAQ;AACX,WAAO,QAAQ;AACf,YAAQ,WAAW;AACnB,QAAI,OAAO,KAAK,QAAkB,EAAE,SAAS,GAAG;AAC/C,aAAO,OAAO,QAAQ,SAAmB,QAAQ;AAAA,IAClD;AAAA,EACD;AAEA,MAAI,OAAO,KAAK,IAAmB,EAAE,WAAW,GAAG;AAClD,WAAO,QAAQ;AAAA,EAChB;AAEA,MAAI;AACH,WAAO;AAAA,MACN,MAAM,KAAK,QAAQ,cAAc,KAAK,MAAM,gBAAgB,SAAS;AAAA,QACpE,WAAW;AAAA,MACZ,CAAC;AAAA,IACF;AAAA,EACD,SAAS,OAAO;AACf,UAAM,IAAI,iCAAa,KAAK,QAAQ,GAAG,KAAmB;AAAA,EAC3D;AACD;AAEO,SAAS,aAAa,MAA+B;AAC3D,MAAI;AACJ,MAAI;AACH,aAAS,KAAK,MAAM,IAAK;AAAA,EAC1B,SAAS,WAAW;AACnB,aAAS;AAAA,EACV;AACA,SAAO;AACR;","names":[]}