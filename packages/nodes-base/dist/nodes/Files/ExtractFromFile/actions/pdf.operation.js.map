{"version":3,"sources":["../../../../../nodes/Files/ExtractFromFile/actions/pdf.operation.ts"],"sourcesContent":["import unset from 'lodash/unset';\nimport type { IExecuteFunctions, INodeExecutionData, INodeProperties } from 'n8n-workflow';\nimport { NodeOperationError, deepCopy } from 'n8n-workflow';\n\nimport { extractDataFromPDF } from '@utils/binary';\nimport { updateDisplayOptions } from '@utils/utilities';\n\nexport const properties: INodeProperties[] = [\n\t{\n\t\tdisplayName: 'Input Binary Field',\n\t\tname: 'binaryPropertyName',\n\t\ttype: 'string',\n\t\tdefault: 'data',\n\t\trequired: true,\n\t\tplaceholder: 'e.g data',\n\t\thint: 'The name of the input binary field containing the file to be extracted',\n\t},\n\t{\n\t\tdisplayName: 'Options',\n\t\tname: 'options',\n\t\ttype: 'collection',\n\t\tplaceholder: 'Add option',\n\t\tdefault: {},\n\t\toptions: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Join Pages',\n\t\t\t\tname: 'joinPages',\n\t\t\t\ttype: 'boolean',\n\t\t\t\tdefault: true,\n\t\t\t\tdescription:\n\t\t\t\t\t'Whether to join the text from all pages or return an array of text from each page',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Keep Source',\n\t\t\t\tname: 'keepSource',\n\t\t\t\ttype: 'options',\n\t\t\t\tdefault: 'json',\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'JSON',\n\t\t\t\t\t\tvalue: 'json',\n\t\t\t\t\t\tdescription: 'Include JSON data of the input item',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Binary',\n\t\t\t\t\t\tvalue: 'binary',\n\t\t\t\t\t\tdescription: 'Include binary data of the input item',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Both',\n\t\t\t\t\t\tvalue: 'both',\n\t\t\t\t\t\tdescription: 'Include both JSON and binary data of the input item',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Max Pages',\n\t\t\t\tname: 'maxPages',\n\t\t\t\ttype: 'number',\n\t\t\t\tdefault: 0,\n\t\t\t\tdescription: 'Maximum number of pages to include',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Password',\n\t\t\t\tname: 'password',\n\t\t\t\ttype: 'string',\n\t\t\t\ttypeOptions: { password: true },\n\t\t\t\tdefault: '',\n\t\t\t\tdescription: 'Prowide password, if the PDF is encrypted',\n\t\t\t},\n\t\t],\n\t},\n];\n\nconst displayOptions = {\n\tshow: {\n\t\toperation: ['pdf'],\n\t},\n};\n\nexport const description = updateDisplayOptions(displayOptions, properties);\n\nexport async function execute(this: IExecuteFunctions, items: INodeExecutionData[]) {\n\tconst returnData: INodeExecutionData[] = [];\n\n\tfor (let itemIndex = 0; itemIndex < items.length; itemIndex++) {\n\t\ttry {\n\t\t\tconst item = items[itemIndex];\n\t\t\tconst options = this.getNodeParameter('options', itemIndex);\n\t\t\tconst binaryPropertyName = this.getNodeParameter('binaryPropertyName', itemIndex);\n\n\t\t\tconst json = await extractDataFromPDF.call(\n\t\t\t\tthis,\n\t\t\t\tbinaryPropertyName,\n\t\t\t\toptions.password as string,\n\t\t\t\toptions.maxPages as number,\n\t\t\t\toptions.joinPages as boolean,\n\t\t\t\titemIndex,\n\t\t\t);\n\n\t\t\tconst newItem: INodeExecutionData = {\n\t\t\t\tjson: {},\n\t\t\t\tpairedItem: { item: itemIndex },\n\t\t\t};\n\n\t\t\tif (options.keepSource && options.keepSource !== 'binary') {\n\t\t\t\tnewItem.json = { ...deepCopy(item.json), ...json };\n\t\t\t} else {\n\t\t\t\tnewItem.json = json;\n\t\t\t}\n\n\t\t\tif (options.keepSource === 'binary' || options.keepSource === 'both') {\n\t\t\t\tnewItem.binary = item.binary;\n\t\t\t} else {\n\t\t\t\t// this binary data would not be included, but there also might be other binary data\n\t\t\t\t// which should be included, copy it over and unset current binary data\n\t\t\t\tnewItem.binary = deepCopy(item.binary);\n\t\t\t\tunset(newItem.binary, binaryPropertyName);\n\t\t\t}\n\n\t\t\treturnData.push(newItem);\n\t\t} catch (error) {\n\t\t\tif (this.continueOnFail()) {\n\t\t\t\treturnData.push({\n\t\t\t\t\tjson: {\n\t\t\t\t\t\terror: error.message,\n\t\t\t\t\t},\n\t\t\t\t\tpairedItem: {\n\t\t\t\t\t\titem: itemIndex,\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tthrow new NodeOperationError(this.getNode(), error, { itemIndex });\n\t\t}\n\t}\n\n\treturn returnData;\n}\n"],"mappings":"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","names":["unset"]}