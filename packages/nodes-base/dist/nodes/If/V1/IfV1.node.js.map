{"version":3,"sources":["../../../../nodes/If/V1/IfV1.node.ts"],"sourcesContent":["import moment from 'moment-timezone';\nimport type {\n\tIExecuteFunctions,\n\tINodeExecutionData,\n\tINodeParameters,\n\tINodeType,\n\tINodeTypeBaseDescription,\n\tINodeTypeDescription,\n\tNodeParameterValue,\n} from 'n8n-workflow';\nimport { NodeConnectionTypes, NodeOperationError } from 'n8n-workflow';\n\nexport class IfV1 implements INodeType {\n\tdescription: INodeTypeDescription;\n\n\tconstructor(baseDescription: INodeTypeBaseDescription) {\n\t\tthis.description = {\n\t\t\t...baseDescription,\n\t\t\tversion: 1,\n\t\t\tdefaults: {\n\t\t\t\tname: 'If',\n\t\t\t\tcolor: '#408000',\n\t\t\t},\n\t\t\tinputs: [NodeConnectionTypes.Main],\n\n\t\t\toutputs: [NodeConnectionTypes.Main, NodeConnectionTypes.Main],\n\t\t\toutputNames: ['true', 'false'],\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'Conditions',\n\t\t\t\t\tname: 'conditions',\n\t\t\t\t\tplaceholder: 'Add Condition',\n\t\t\t\t\ttype: 'fixedCollection',\n\t\t\t\t\ttypeOptions: {\n\t\t\t\t\t\tmultipleValues: true,\n\t\t\t\t\t\tsortable: true,\n\t\t\t\t\t},\n\t\t\t\t\tdescription: 'The type of values to compare',\n\t\t\t\t\tdefault: {},\n\t\t\t\t\toptions: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'boolean',\n\t\t\t\t\t\t\tdisplayName: 'Boolean',\n\t\t\t\t\t\t\tvalues: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tdisplayName: 'Value 1',\n\t\t\t\t\t\t\t\t\tname: 'value1',\n\t\t\t\t\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\t\t\t\t\tdefault: false,\n\t\t\t\t\t\t\t\t\t// eslint-disable-next-line n8n-nodes-base/node-param-description-boolean-without-whether\n\t\t\t\t\t\t\t\t\tdescription: 'The value to compare with the second one',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t// eslint-disable-next-line n8n-nodes-base/node-param-operation-without-no-data-expression\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tdisplayName: 'Operation',\n\t\t\t\t\t\t\t\t\tname: 'operation',\n\t\t\t\t\t\t\t\t\ttype: 'options',\n\t\t\t\t\t\t\t\t\toptions: [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tname: 'Equal',\n\t\t\t\t\t\t\t\t\t\t\tvalue: 'equal',\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tname: 'Not Equal',\n\t\t\t\t\t\t\t\t\t\t\tvalue: 'notEqual',\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\tdefault: 'equal',\n\t\t\t\t\t\t\t\t\tdescription: 'Operation to decide where the data should be mapped to',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tdisplayName: 'Value 2',\n\t\t\t\t\t\t\t\t\tname: 'value2',\n\t\t\t\t\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\t\t\t\t\tdefault: false,\n\t\t\t\t\t\t\t\t\t// eslint-disable-next-line n8n-nodes-base/node-param-description-boolean-without-whether\n\t\t\t\t\t\t\t\t\tdescription: 'The value to compare with the first one',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'dateTime',\n\t\t\t\t\t\t\tdisplayName: 'Date & Time',\n\t\t\t\t\t\t\tvalues: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tdisplayName: 'Value 1',\n\t\t\t\t\t\t\t\t\tname: 'value1',\n\t\t\t\t\t\t\t\t\ttype: 'dateTime',\n\t\t\t\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\t\t\t\tdescription: 'The value to compare with the second one',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t// eslint-disable-next-line n8n-nodes-base/node-param-operation-without-no-data-expression\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tdisplayName: 'Operation',\n\t\t\t\t\t\t\t\t\tname: 'operation',\n\t\t\t\t\t\t\t\t\ttype: 'options',\n\t\t\t\t\t\t\t\t\toptions: [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tname: 'Occurred After',\n\t\t\t\t\t\t\t\t\t\t\tvalue: 'after',\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tname: 'Occurred Before',\n\t\t\t\t\t\t\t\t\t\t\tvalue: 'before',\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\tdefault: 'after',\n\t\t\t\t\t\t\t\t\tdescription: 'Operation to decide where the data should be mapped to',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tdisplayName: 'Value 2',\n\t\t\t\t\t\t\t\t\tname: 'value2',\n\t\t\t\t\t\t\t\t\ttype: 'dateTime',\n\t\t\t\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\t\t\t\tdescription: 'The value to compare with the first one',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'number',\n\t\t\t\t\t\t\tdisplayName: 'Number',\n\t\t\t\t\t\t\tvalues: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tdisplayName: 'Value 1',\n\t\t\t\t\t\t\t\t\tname: 'value1',\n\t\t\t\t\t\t\t\t\ttype: 'number',\n\t\t\t\t\t\t\t\t\tdefault: 0,\n\t\t\t\t\t\t\t\t\tdescription: 'The value to compare with the second one',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tdisplayName: 'Operation',\n\t\t\t\t\t\t\t\t\tname: 'operation',\n\t\t\t\t\t\t\t\t\ttype: 'options',\n\t\t\t\t\t\t\t\t\tnoDataExpression: true,\n\t\t\t\t\t\t\t\t\t// eslint-disable-next-line n8n-nodes-base/node-param-options-type-unsorted-items\n\t\t\t\t\t\t\t\t\toptions: [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tname: 'Smaller',\n\t\t\t\t\t\t\t\t\t\t\tvalue: 'smaller',\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tname: 'Smaller or Equal',\n\t\t\t\t\t\t\t\t\t\t\tvalue: 'smallerEqual',\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tname: 'Equal',\n\t\t\t\t\t\t\t\t\t\t\tvalue: 'equal',\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tname: 'Not Equal',\n\t\t\t\t\t\t\t\t\t\t\tvalue: 'notEqual',\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tname: 'Larger',\n\t\t\t\t\t\t\t\t\t\t\tvalue: 'larger',\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tname: 'Larger or Equal',\n\t\t\t\t\t\t\t\t\t\t\tvalue: 'largerEqual',\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tname: 'Is Empty',\n\t\t\t\t\t\t\t\t\t\t\tvalue: 'isEmpty',\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tname: 'Is Not Empty',\n\t\t\t\t\t\t\t\t\t\t\tvalue: 'isNotEmpty',\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\tdefault: 'smaller',\n\t\t\t\t\t\t\t\t\tdescription: 'Operation to decide where the data should be mapped to',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tdisplayName: 'Value 2',\n\t\t\t\t\t\t\t\t\tname: 'value2',\n\t\t\t\t\t\t\t\t\ttype: 'number',\n\t\t\t\t\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\t\t\t\t\thide: {\n\t\t\t\t\t\t\t\t\t\t\toperation: ['isEmpty', 'isNotEmpty'],\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tdefault: 0,\n\t\t\t\t\t\t\t\t\tdescription: 'The value to compare with the first one',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'string',\n\t\t\t\t\t\t\tdisplayName: 'String',\n\t\t\t\t\t\t\tvalues: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tdisplayName: 'Value 1',\n\t\t\t\t\t\t\t\t\tname: 'value1',\n\t\t\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\t\t\t\tdescription: 'The value to compare with the second one',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tdisplayName: 'Operation',\n\t\t\t\t\t\t\t\t\tname: 'operation',\n\t\t\t\t\t\t\t\t\ttype: 'options',\n\t\t\t\t\t\t\t\t\tnoDataExpression: true,\n\t\t\t\t\t\t\t\t\t// eslint-disable-next-line n8n-nodes-base/node-param-options-type-unsorted-items\n\t\t\t\t\t\t\t\t\toptions: [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tname: 'Contains',\n\t\t\t\t\t\t\t\t\t\t\tvalue: 'contains',\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tname: 'Not Contains',\n\t\t\t\t\t\t\t\t\t\t\tvalue: 'notContains',\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tname: 'Ends With',\n\t\t\t\t\t\t\t\t\t\t\tvalue: 'endsWith',\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tname: 'Not Ends With',\n\t\t\t\t\t\t\t\t\t\t\tvalue: 'notEndsWith',\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tname: 'Equal',\n\t\t\t\t\t\t\t\t\t\t\tvalue: 'equal',\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tname: 'Not Equal',\n\t\t\t\t\t\t\t\t\t\t\tvalue: 'notEqual',\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tname: 'Regex Match',\n\t\t\t\t\t\t\t\t\t\t\tvalue: 'regex',\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tname: 'Regex Not Match',\n\t\t\t\t\t\t\t\t\t\t\tvalue: 'notRegex',\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tname: 'Starts With',\n\t\t\t\t\t\t\t\t\t\t\tvalue: 'startsWith',\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tname: 'Not Starts With',\n\t\t\t\t\t\t\t\t\t\t\tvalue: 'notStartsWith',\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tname: 'Is Empty',\n\t\t\t\t\t\t\t\t\t\t\tvalue: 'isEmpty',\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tname: 'Is Not Empty',\n\t\t\t\t\t\t\t\t\t\t\tvalue: 'isNotEmpty',\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\tdefault: 'equal',\n\t\t\t\t\t\t\t\t\tdescription: 'Operation to decide where the data should be mapped to',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tdisplayName: 'Value 2',\n\t\t\t\t\t\t\t\t\tname: 'value2',\n\t\t\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\t\t\t\t\thide: {\n\t\t\t\t\t\t\t\t\t\t\toperation: ['isEmpty', 'isNotEmpty', 'regex', 'notRegex'],\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\t\t\t\tdescription: 'The value to compare with the first one',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tdisplayName: 'Regex',\n\t\t\t\t\t\t\t\t\tname: 'value2',\n\t\t\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\t\t\t\t\toperation: ['regex', 'notRegex'],\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\t\t\t\tplaceholder: '/text/i',\n\t\t\t\t\t\t\t\t\tdescription: 'The regex which has to match',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'Combine',\n\t\t\t\t\tname: 'combineOperation',\n\t\t\t\t\ttype: 'options',\n\t\t\t\t\toptions: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'ALL',\n\t\t\t\t\t\t\tdescription: 'Only if all conditions are met it goes into \"true\" branch',\n\t\t\t\t\t\t\tvalue: 'all',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'ANY',\n\t\t\t\t\t\t\tdescription: 'If any of the conditions is met it goes into \"true\" branch',\n\t\t\t\t\t\t\tvalue: 'any',\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t\tdefault: 'all',\n\t\t\t\t\tdescription:\n\t\t\t\t\t\t'If multiple rules got set this settings decides if it is true as soon as ANY condition matches or only if ALL get meet',\n\t\t\t\t},\n\t\t\t],\n\t\t};\n\t}\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t\tconst returnDataTrue: INodeExecutionData[] = [];\n\t\tconst returnDataFalse: INodeExecutionData[] = [];\n\n\t\tconst items = this.getInputData();\n\n\t\tlet item: INodeExecutionData;\n\t\tlet combineOperation: string;\n\n\t\tconst isDateObject = (value: NodeParameterValue) =>\n\t\t\tObject.prototype.toString.call(value) === '[object Date]';\n\t\tconst isDateInvalid = (value: NodeParameterValue) => value?.toString() === 'Invalid Date';\n\n\t\t// The compare operations\n\t\tconst compareOperationFunctions: {\n\t\t\t[key: string]: (value1: NodeParameterValue, value2: NodeParameterValue) => boolean;\n\t\t} = {\n\t\t\tafter: (value1: NodeParameterValue, value2: NodeParameterValue) =>\n\t\t\t\t(value1 || 0) > (value2 || 0),\n\t\t\tbefore: (value1: NodeParameterValue, value2: NodeParameterValue) =>\n\t\t\t\t(value1 || 0) < (value2 || 0),\n\t\t\tcontains: (value1: NodeParameterValue, value2: NodeParameterValue) =>\n\t\t\t\t(value1 || '').toString().includes((value2 || '').toString()),\n\t\t\tnotContains: (value1: NodeParameterValue, value2: NodeParameterValue) =>\n\t\t\t\t!(value1 || '').toString().includes((value2 || '').toString()),\n\t\t\tendsWith: (value1: NodeParameterValue, value2: NodeParameterValue) =>\n\t\t\t\t(value1 as string).endsWith(value2 as string),\n\t\t\tnotEndsWith: (value1: NodeParameterValue, value2: NodeParameterValue) =>\n\t\t\t\t!(value1 as string).endsWith(value2 as string),\n\t\t\tequal: (value1: NodeParameterValue, value2: NodeParameterValue) => value1 === value2,\n\t\t\tnotEqual: (value1: NodeParameterValue, value2: NodeParameterValue) => value1 !== value2,\n\t\t\tlarger: (value1: NodeParameterValue, value2: NodeParameterValue) =>\n\t\t\t\t(value1 || 0) > (value2 || 0),\n\t\t\tlargerEqual: (value1: NodeParameterValue, value2: NodeParameterValue) =>\n\t\t\t\t(value1 || 0) >= (value2 || 0),\n\t\t\tsmaller: (value1: NodeParameterValue, value2: NodeParameterValue) =>\n\t\t\t\t(value1 || 0) < (value2 || 0),\n\t\t\tsmallerEqual: (value1: NodeParameterValue, value2: NodeParameterValue) =>\n\t\t\t\t(value1 || 0) <= (value2 || 0),\n\t\t\tstartsWith: (value1: NodeParameterValue, value2: NodeParameterValue) =>\n\t\t\t\t(value1 as string).startsWith(value2 as string),\n\t\t\tnotStartsWith: (value1: NodeParameterValue, value2: NodeParameterValue) =>\n\t\t\t\t!(value1 as string).startsWith(value2 as string),\n\t\t\tisEmpty: (value1: NodeParameterValue) =>\n\t\t\t\t[undefined, null, '', NaN].includes(value1 as string) ||\n\t\t\t\t(typeof value1 === 'object' && value1 !== null && !isDateObject(value1)\n\t\t\t\t\t? Object.entries(value1 as string).length === 0\n\t\t\t\t\t: false) ||\n\t\t\t\t(isDateObject(value1) && isDateInvalid(value1)),\n\t\t\tisNotEmpty: (value1: NodeParameterValue) =>\n\t\t\t\t!(\n\t\t\t\t\t[undefined, null, '', NaN].includes(value1 as string) ||\n\t\t\t\t\t(typeof value1 === 'object' && value1 !== null && !isDateObject(value1)\n\t\t\t\t\t\t? Object.entries(value1 as string).length === 0\n\t\t\t\t\t\t: false) ||\n\t\t\t\t\t(isDateObject(value1) && isDateInvalid(value1))\n\t\t\t\t),\n\t\t\tregex: (value1: NodeParameterValue, value2: NodeParameterValue) => {\n\t\t\t\tconst regexMatch = (value2 || '').toString().match(new RegExp('^/(.*?)/([gimusy]*)$'));\n\n\t\t\t\tlet regex: RegExp;\n\t\t\t\tif (!regexMatch) {\n\t\t\t\t\tregex = new RegExp((value2 || '').toString());\n\t\t\t\t} else if (regexMatch.length === 1) {\n\t\t\t\t\tregex = new RegExp(regexMatch[1]);\n\t\t\t\t} else {\n\t\t\t\t\tregex = new RegExp(regexMatch[1], regexMatch[2]);\n\t\t\t\t}\n\n\t\t\t\treturn !!(value1 || '').toString().match(regex);\n\t\t\t},\n\t\t\tnotRegex: (value1: NodeParameterValue, value2: NodeParameterValue) => {\n\t\t\t\tconst regexMatch = (value2 || '').toString().match(new RegExp('^/(.*?)/([gimusy]*)$'));\n\n\t\t\t\tlet regex: RegExp;\n\t\t\t\tif (!regexMatch) {\n\t\t\t\t\tregex = new RegExp((value2 || '').toString());\n\t\t\t\t} else if (regexMatch.length === 1) {\n\t\t\t\t\tregex = new RegExp(regexMatch[1]);\n\t\t\t\t} else {\n\t\t\t\t\tregex = new RegExp(regexMatch[1], regexMatch[2]);\n\t\t\t\t}\n\n\t\t\t\treturn !(value1 || '').toString().match(regex);\n\t\t\t},\n\t\t};\n\n\t\t// Converts the input data of a dateTime into a number for easy compare\n\t\tconst convertDateTime = (value: NodeParameterValue): number => {\n\t\t\tlet returnValue: number | undefined = undefined;\n\t\t\tif (typeof value === 'string') {\n\t\t\t\treturnValue = new Date(value).getTime();\n\t\t\t} else if (typeof value === 'number') {\n\t\t\t\treturnValue = value;\n\t\t\t}\n\t\t\tif (moment.isMoment(value)) {\n\t\t\t\treturnValue = value.unix();\n\t\t\t}\n\t\t\tif ((value as unknown as object) instanceof Date) {\n\t\t\t\treturnValue = (value as unknown as Date).getTime();\n\t\t\t}\n\n\t\t\tif (returnValue === undefined || isNaN(returnValue)) {\n\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t`The value \"${value}\" is not a valid DateTime.`,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\treturn returnValue;\n\t\t};\n\n\t\t// The different dataTypes to check the values in\n\t\tconst dataTypes = ['boolean', 'dateTime', 'number', 'string'];\n\n\t\t// Iterate over all items to check which ones should be output as via output \"true\" and\n\t\t// which ones via output \"false\"\n\t\tlet dataType: string;\n\t\tlet compareOperationResult: boolean;\n\t\tlet value1: NodeParameterValue, value2: NodeParameterValue;\n\t\titemLoop: for (let itemIndex = 0; itemIndex < items.length; itemIndex++) {\n\t\t\titem = items[itemIndex];\n\n\t\t\tlet compareData: INodeParameters;\n\n\t\t\tcombineOperation = this.getNodeParameter('combineOperation', itemIndex) as string;\n\n\t\t\t// Check all the values of the different dataTypes\n\t\t\tfor (dataType of dataTypes) {\n\t\t\t\t// Check all the values of the current dataType\n\t\t\t\tfor (compareData of this.getNodeParameter(\n\t\t\t\t\t`conditions.${dataType}`,\n\t\t\t\t\titemIndex,\n\t\t\t\t\t[],\n\t\t\t\t) as INodeParameters[]) {\n\t\t\t\t\t// Check if the values passes\n\n\t\t\t\t\tvalue1 = compareData.value1 as NodeParameterValue;\n\t\t\t\t\tvalue2 = compareData.value2 as NodeParameterValue;\n\n\t\t\t\t\tif (dataType === 'dateTime') {\n\t\t\t\t\t\tvalue1 = convertDateTime(value1);\n\t\t\t\t\t\tvalue2 = convertDateTime(value2);\n\t\t\t\t\t}\n\n\t\t\t\t\tcompareOperationResult = compareOperationFunctions[compareData.operation as string](\n\t\t\t\t\t\tvalue1,\n\t\t\t\t\t\tvalue2,\n\t\t\t\t\t);\n\n\t\t\t\t\tif (compareOperationResult && combineOperation === 'any') {\n\t\t\t\t\t\t// If it passes and the operation is \"any\" we do not have to check any\n\t\t\t\t\t\t// other ones as it should pass anyway. So go on with the next item.\n\t\t\t\t\t\treturnDataTrue.push(item);\n\t\t\t\t\t\tcontinue itemLoop;\n\t\t\t\t\t} else if (!compareOperationResult && combineOperation === 'all') {\n\t\t\t\t\t\t// If it fails and the operation is \"all\" we do not have to check any\n\t\t\t\t\t\t// other ones as it should be not pass anyway. So go on with the next item.\n\t\t\t\t\t\treturnDataFalse.push(item);\n\t\t\t\t\t\tcontinue itemLoop;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (combineOperation === 'all') {\n\t\t\t\t// If the operation is \"all\" it means the item did match all conditions\n\t\t\t\t// so it passes.\n\t\t\t\treturnDataTrue.push(item);\n\t\t\t} else {\n\t\t\t\t// If the operation is \"any\" it means the the item did not match any condition.\n\t\t\t\treturnDataFalse.push(item);\n\t\t\t}\n\t\t}\n\n\t\treturn [returnDataTrue, returnDataFalse];\n\t}\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAAmB;AAUnB,0BAAwD;AAEjD,MAAM,KAA0B;AAAA,EAGtC,YAAY,iBAA2C;AACtD,SAAK,cAAc;AAAA,MAClB,GAAG;AAAA,MACH,SAAS;AAAA,MACT,UAAU;AAAA,QACT,MAAM;AAAA,QACN,OAAO;AAAA,MACR;AAAA,MACA,QAAQ,CAAC,wCAAoB,IAAI;AAAA,MAEjC,SAAS,CAAC,wCAAoB,MAAM,wCAAoB,IAAI;AAAA,MAC5D,aAAa,CAAC,QAAQ,OAAO;AAAA,MAC7B,YAAY;AAAA,QACX;AAAA,UACC,aAAa;AAAA,UACb,MAAM;AAAA,UACN,aAAa;AAAA,UACb,MAAM;AAAA,UACN,aAAa;AAAA,YACZ,gBAAgB;AAAA,YAChB,UAAU;AAAA,UACX;AAAA,UACA,aAAa;AAAA,UACb,SAAS,CAAC;AAAA,UACV,SAAS;AAAA,YACR;AAAA,cACC,MAAM;AAAA,cACN,aAAa;AAAA,cACb,QAAQ;AAAA,gBACP;AAAA,kBACC,aAAa;AAAA,kBACb,MAAM;AAAA,kBACN,MAAM;AAAA,kBACN,SAAS;AAAA;AAAA,kBAET,aAAa;AAAA,gBACd;AAAA;AAAA,gBAEA;AAAA,kBACC,aAAa;AAAA,kBACb,MAAM;AAAA,kBACN,MAAM;AAAA,kBACN,SAAS;AAAA,oBACR;AAAA,sBACC,MAAM;AAAA,sBACN,OAAO;AAAA,oBACR;AAAA,oBACA;AAAA,sBACC,MAAM;AAAA,sBACN,OAAO;AAAA,oBACR;AAAA,kBACD;AAAA,kBACA,SAAS;AAAA,kBACT,aAAa;AAAA,gBACd;AAAA,gBACA;AAAA,kBACC,aAAa;AAAA,kBACb,MAAM;AAAA,kBACN,MAAM;AAAA,kBACN,SAAS;AAAA;AAAA,kBAET,aAAa;AAAA,gBACd;AAAA,cACD;AAAA,YACD;AAAA,YACA;AAAA,cACC,MAAM;AAAA,cACN,aAAa;AAAA,cACb,QAAQ;AAAA,gBACP;AAAA,kBACC,aAAa;AAAA,kBACb,MAAM;AAAA,kBACN,MAAM;AAAA,kBACN,SAAS;AAAA,kBACT,aAAa;AAAA,gBACd;AAAA;AAAA,gBAEA;AAAA,kBACC,aAAa;AAAA,kBACb,MAAM;AAAA,kBACN,MAAM;AAAA,kBACN,SAAS;AAAA,oBACR;AAAA,sBACC,MAAM;AAAA,sBACN,OAAO;AAAA,oBACR;AAAA,oBACA;AAAA,sBACC,MAAM;AAAA,sBACN,OAAO;AAAA,oBACR;AAAA,kBACD;AAAA,kBACA,SAAS;AAAA,kBACT,aAAa;AAAA,gBACd;AAAA,gBACA;AAAA,kBACC,aAAa;AAAA,kBACb,MAAM;AAAA,kBACN,MAAM;AAAA,kBACN,SAAS;AAAA,kBACT,aAAa;AAAA,gBACd;AAAA,cACD;AAAA,YACD;AAAA,YACA;AAAA,cACC,MAAM;AAAA,cACN,aAAa;AAAA,cACb,QAAQ;AAAA,gBACP;AAAA,kBACC,aAAa;AAAA,kBACb,MAAM;AAAA,kBACN,MAAM;AAAA,kBACN,SAAS;AAAA,kBACT,aAAa;AAAA,gBACd;AAAA,gBACA;AAAA,kBACC,aAAa;AAAA,kBACb,MAAM;AAAA,kBACN,MAAM;AAAA,kBACN,kBAAkB;AAAA;AAAA,kBAElB,SAAS;AAAA,oBACR;AAAA,sBACC,MAAM;AAAA,sBACN,OAAO;AAAA,oBACR;AAAA,oBACA;AAAA,sBACC,MAAM;AAAA,sBACN,OAAO;AAAA,oBACR;AAAA,oBACA;AAAA,sBACC,MAAM;AAAA,sBACN,OAAO;AAAA,oBACR;AAAA,oBACA;AAAA,sBACC,MAAM;AAAA,sBACN,OAAO;AAAA,oBACR;AAAA,oBACA;AAAA,sBACC,MAAM;AAAA,sBACN,OAAO;AAAA,oBACR;AAAA,oBACA;AAAA,sBACC,MAAM;AAAA,sBACN,OAAO;AAAA,oBACR;AAAA,oBACA;AAAA,sBACC,MAAM;AAAA,sBACN,OAAO;AAAA,oBACR;AAAA,oBACA;AAAA,sBACC,MAAM;AAAA,sBACN,OAAO;AAAA,oBACR;AAAA,kBACD;AAAA,kBACA,SAAS;AAAA,kBACT,aAAa;AAAA,gBACd;AAAA,gBACA;AAAA,kBACC,aAAa;AAAA,kBACb,MAAM;AAAA,kBACN,MAAM;AAAA,kBACN,gBAAgB;AAAA,oBACf,MAAM;AAAA,sBACL,WAAW,CAAC,WAAW,YAAY;AAAA,oBACpC;AAAA,kBACD;AAAA,kBACA,SAAS;AAAA,kBACT,aAAa;AAAA,gBACd;AAAA,cACD;AAAA,YACD;AAAA,YACA;AAAA,cACC,MAAM;AAAA,cACN,aAAa;AAAA,cACb,QAAQ;AAAA,gBACP;AAAA,kBACC,aAAa;AAAA,kBACb,MAAM;AAAA,kBACN,MAAM;AAAA,kBACN,SAAS;AAAA,kBACT,aAAa;AAAA,gBACd;AAAA,gBACA;AAAA,kBACC,aAAa;AAAA,kBACb,MAAM;AAAA,kBACN,MAAM;AAAA,kBACN,kBAAkB;AAAA;AAAA,kBAElB,SAAS;AAAA,oBACR;AAAA,sBACC,MAAM;AAAA,sBACN,OAAO;AAAA,oBACR;AAAA,oBACA;AAAA,sBACC,MAAM;AAAA,sBACN,OAAO;AAAA,oBACR;AAAA,oBACA;AAAA,sBACC,MAAM;AAAA,sBACN,OAAO;AAAA,oBACR;AAAA,oBACA;AAAA,sBACC,MAAM;AAAA,sBACN,OAAO;AAAA,oBACR;AAAA,oBACA;AAAA,sBACC,MAAM;AAAA,sBACN,OAAO;AAAA,oBACR;AAAA,oBACA;AAAA,sBACC,MAAM;AAAA,sBACN,OAAO;AAAA,oBACR;AAAA,oBACA;AAAA,sBACC,MAAM;AAAA,sBACN,OAAO;AAAA,oBACR;AAAA,oBACA;AAAA,sBACC,MAAM;AAAA,sBACN,OAAO;AAAA,oBACR;AAAA,oBACA;AAAA,sBACC,MAAM;AAAA,sBACN,OAAO;AAAA,oBACR;AAAA,oBACA;AAAA,sBACC,MAAM;AAAA,sBACN,OAAO;AAAA,oBACR;AAAA,oBACA;AAAA,sBACC,MAAM;AAAA,sBACN,OAAO;AAAA,oBACR;AAAA,oBACA;AAAA,sBACC,MAAM;AAAA,sBACN,OAAO;AAAA,oBACR;AAAA,kBACD;AAAA,kBACA,SAAS;AAAA,kBACT,aAAa;AAAA,gBACd;AAAA,gBACA;AAAA,kBACC,aAAa;AAAA,kBACb,MAAM;AAAA,kBACN,MAAM;AAAA,kBACN,gBAAgB;AAAA,oBACf,MAAM;AAAA,sBACL,WAAW,CAAC,WAAW,cAAc,SAAS,UAAU;AAAA,oBACzD;AAAA,kBACD;AAAA,kBACA,SAAS;AAAA,kBACT,aAAa;AAAA,gBACd;AAAA,gBACA;AAAA,kBACC,aAAa;AAAA,kBACb,MAAM;AAAA,kBACN,MAAM;AAAA,kBACN,gBAAgB;AAAA,oBACf,MAAM;AAAA,sBACL,WAAW,CAAC,SAAS,UAAU;AAAA,oBAChC;AAAA,kBACD;AAAA,kBACA,SAAS;AAAA,kBACT,aAAa;AAAA,kBACb,aAAa;AAAA,gBACd;AAAA,cACD;AAAA,YACD;AAAA,UACD;AAAA,QACD;AAAA,QACA;AAAA,UACC,aAAa;AAAA,UACb,MAAM;AAAA,UACN,MAAM;AAAA,UACN,SAAS;AAAA,YACR;AAAA,cACC,MAAM;AAAA,cACN,aAAa;AAAA,cACb,OAAO;AAAA,YACR;AAAA,YACA;AAAA,cACC,MAAM;AAAA,cACN,aAAa;AAAA,cACb,OAAO;AAAA,YACR;AAAA,UACD;AAAA,UACA,SAAS;AAAA,UACT,aACC;AAAA,QACF;AAAA,MACD;AAAA,IACD;AAAA,EACD;AAAA,EAEA,MAAM,UAAkE;AACvE,UAAM,iBAAuC,CAAC;AAC9C,UAAM,kBAAwC,CAAC;AAE/C,UAAM,QAAQ,KAAK,aAAa;AAEhC,QAAI;AACJ,QAAI;AAEJ,UAAM,eAAe,CAAC,UACrB,OAAO,UAAU,SAAS,KAAK,KAAK,MAAM;AAC3C,UAAM,gBAAgB,CAAC,UAA8B,OAAO,SAAS,MAAM;AAG3E,UAAM,4BAEF;AAAA,MACH,OAAO,CAACA,SAA4BC,aAClCD,WAAU,MAAMC,WAAU;AAAA,MAC5B,QAAQ,CAACD,SAA4BC,aACnCD,WAAU,MAAMC,WAAU;AAAA,MAC5B,UAAU,CAACD,SAA4BC,aACrCD,WAAU,IAAI,SAAS,EAAE,UAAUC,WAAU,IAAI,SAAS,CAAC;AAAA,MAC7D,aAAa,CAACD,SAA4BC,YACzC,EAAED,WAAU,IAAI,SAAS,EAAE,UAAUC,WAAU,IAAI,SAAS,CAAC;AAAA,MAC9D,UAAU,CAACD,SAA4BC,YACrCD,QAAkB,SAASC,OAAgB;AAAA,MAC7C,aAAa,CAACD,SAA4BC,YACzC,CAAED,QAAkB,SAASC,OAAgB;AAAA,MAC9C,OAAO,CAACD,SAA4BC,YAA+BD,YAAWC;AAAA,MAC9E,UAAU,CAACD,SAA4BC,YAA+BD,YAAWC;AAAA,MACjF,QAAQ,CAACD,SAA4BC,aACnCD,WAAU,MAAMC,WAAU;AAAA,MAC5B,aAAa,CAACD,SAA4BC,aACxCD,WAAU,OAAOC,WAAU;AAAA,MAC7B,SAAS,CAACD,SAA4BC,aACpCD,WAAU,MAAMC,WAAU;AAAA,MAC5B,cAAc,CAACD,SAA4BC,aACzCD,WAAU,OAAOC,WAAU;AAAA,MAC7B,YAAY,CAACD,SAA4BC,YACvCD,QAAkB,WAAWC,OAAgB;AAAA,MAC/C,eAAe,CAACD,SAA4BC,YAC3C,CAAED,QAAkB,WAAWC,OAAgB;AAAA,MAChD,SAAS,CAACD,YACT,CAAC,QAAW,MAAM,IAAI,GAAG,EAAE,SAASA,OAAgB,MACnD,OAAOA,YAAW,YAAYA,YAAW,QAAQ,CAAC,aAAaA,OAAM,IACnE,OAAO,QAAQA,OAAgB,EAAE,WAAW,IAC5C,UACF,aAAaA,OAAM,KAAK,cAAcA,OAAM;AAAA,MAC9C,YAAY,CAACA,YACZ,EACC,CAAC,QAAW,MAAM,IAAI,GAAG,EAAE,SAASA,OAAgB,MACnD,OAAOA,YAAW,YAAYA,YAAW,QAAQ,CAAC,aAAaA,OAAM,IACnE,OAAO,QAAQA,OAAgB,EAAE,WAAW,IAC5C,UACF,aAAaA,OAAM,KAAK,cAAcA,OAAM;AAAA,MAE/C,OAAO,CAACA,SAA4BC,YAA+B;AAClE,cAAM,cAAcA,WAAU,IAAI,SAAS,EAAE,MAAM,IAAI,OAAO,sBAAsB,CAAC;AAErF,YAAI;AACJ,YAAI,CAAC,YAAY;AAChB,kBAAQ,IAAI,QAAQA,WAAU,IAAI,SAAS,CAAC;AAAA,QAC7C,WAAW,WAAW,WAAW,GAAG;AACnC,kBAAQ,IAAI,OAAO,WAAW,CAAC,CAAC;AAAA,QACjC,OAAO;AACN,kBAAQ,IAAI,OAAO,WAAW,CAAC,GAAG,WAAW,CAAC,CAAC;AAAA,QAChD;AAEA,eAAO,CAAC,EAAED,WAAU,IAAI,SAAS,EAAE,MAAM,KAAK;AAAA,MAC/C;AAAA,MACA,UAAU,CAACA,SAA4BC,YAA+B;AACrE,cAAM,cAAcA,WAAU,IAAI,SAAS,EAAE,MAAM,IAAI,OAAO,sBAAsB,CAAC;AAErF,YAAI;AACJ,YAAI,CAAC,YAAY;AAChB,kBAAQ,IAAI,QAAQA,WAAU,IAAI,SAAS,CAAC;AAAA,QAC7C,WAAW,WAAW,WAAW,GAAG;AACnC,kBAAQ,IAAI,OAAO,WAAW,CAAC,CAAC;AAAA,QACjC,OAAO;AACN,kBAAQ,IAAI,OAAO,WAAW,CAAC,GAAG,WAAW,CAAC,CAAC;AAAA,QAChD;AAEA,eAAO,EAAED,WAAU,IAAI,SAAS,EAAE,MAAM,KAAK;AAAA,MAC9C;AAAA,IACD;AAGA,UAAM,kBAAkB,CAAC,UAAsC;AAC9D,UAAI,cAAkC;AACtC,UAAI,OAAO,UAAU,UAAU;AAC9B,sBAAc,IAAI,KAAK,KAAK,EAAE,QAAQ;AAAA,MACvC,WAAW,OAAO,UAAU,UAAU;AACrC,sBAAc;AAAA,MACf;AACA,UAAI,uBAAAE,QAAO,SAAS,KAAK,GAAG;AAC3B,sBAAc,MAAM,KAAK;AAAA,MAC1B;AACA,UAAK,iBAAuC,MAAM;AACjD,sBAAe,MAA0B,QAAQ;AAAA,MAClD;AAEA,UAAI,gBAAgB,UAAa,MAAM,WAAW,GAAG;AACpD,cAAM,IAAI;AAAA,UACT,KAAK,QAAQ;AAAA,UACb,cAAc,KAAK;AAAA,QACpB;AAAA,MACD;AAEA,aAAO;AAAA,IACR;AAGA,UAAM,YAAY,CAAC,WAAW,YAAY,UAAU,QAAQ;AAI5D,QAAI;AACJ,QAAI;AACJ,QAAI,QAA4B;AAChC,aAAU,UAAS,YAAY,GAAG,YAAY,MAAM,QAAQ,aAAa;AACxE,aAAO,MAAM,SAAS;AAEtB,UAAI;AAEJ,yBAAmB,KAAK,iBAAiB,oBAAoB,SAAS;AAGtE,WAAK,YAAY,WAAW;AAE3B,aAAK,eAAe,KAAK;AAAA,UACxB,cAAc,QAAQ;AAAA,UACtB;AAAA,UACA,CAAC;AAAA,QACF,GAAwB;AAGvB,mBAAS,YAAY;AACrB,mBAAS,YAAY;AAErB,cAAI,aAAa,YAAY;AAC5B,qBAAS,gBAAgB,MAAM;AAC/B,qBAAS,gBAAgB,MAAM;AAAA,UAChC;AAEA,mCAAyB,0BAA0B,YAAY,SAAmB;AAAA,YACjF;AAAA,YACA;AAAA,UACD;AAEA,cAAI,0BAA0B,qBAAqB,OAAO;AAGzD,2BAAe,KAAK,IAAI;AACxB,qBAAS;AAAA,UACV,WAAW,CAAC,0BAA0B,qBAAqB,OAAO;AAGjE,4BAAgB,KAAK,IAAI;AACzB,qBAAS;AAAA,UACV;AAAA,QACD;AAAA,MACD;AAEA,UAAI,qBAAqB,OAAO;AAG/B,uBAAe,KAAK,IAAI;AAAA,MACzB,OAAO;AAEN,wBAAgB,KAAK,IAAI;AAAA,MAC1B;AAAA,IACD;AAEA,WAAO,CAAC,gBAAgB,eAAe;AAAA,EACxC;AACD;","names":["value1","value2","moment"]}