{"version":3,"sources":["../../../nodes/Grafana/Grafana.node.ts"],"sourcesContent":["import type {\n\tIExecuteFunctions,\n\tIDataObject,\n\tILoadOptionsFunctions,\n\tINodeExecutionData,\n\tINodePropertyOptions,\n\tINodeType,\n\tINodeTypeDescription,\n} from 'n8n-workflow';\nimport { NodeConnectionTypes, NodeApiError } from 'n8n-workflow';\n\nimport {\n\tdashboardFields,\n\tdashboardOperations,\n\tteamFields,\n\tteamMemberFields,\n\tteamMemberOperations,\n\tteamOperations,\n\tuserFields,\n\tuserOperations,\n} from './descriptions';\nimport { deriveUid, grafanaApiRequest, throwOnEmptyUpdate } from './GenericFunctions';\nimport type {\n\tDashboardUpdateFields,\n\tDashboardUpdatePayload,\n\tLoadedDashboards,\n\tLoadedFolders,\n\tLoadedTeams,\n\tLoadedUsers,\n} from './types';\n\nexport class Grafana implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'Grafana',\n\t\tname: 'grafana',\n\t\ticon: 'file:grafana.svg',\n\t\tgroup: ['transform'],\n\t\tversion: 1,\n\t\tsubtitle: '={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}',\n\t\tdescription: 'Consume the Grafana API',\n\t\tdefaults: {\n\t\t\tname: 'Grafana',\n\t\t},\n\t\tusableAsTool: true,\n\t\tinputs: [NodeConnectionTypes.Main],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tcredentials: [\n\t\t\t{\n\t\t\t\tname: 'grafanaApi',\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Resource',\n\t\t\t\tname: 'resource',\n\t\t\t\tnoDataExpression: true,\n\t\t\t\ttype: 'options',\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Dashboard',\n\t\t\t\t\t\tvalue: 'dashboard',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Team',\n\t\t\t\t\t\tvalue: 'team',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Team Member',\n\t\t\t\t\t\tvalue: 'teamMember',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'User',\n\t\t\t\t\t\tvalue: 'user',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'dashboard',\n\t\t\t},\n\t\t\t...dashboardOperations,\n\t\t\t...dashboardFields,\n\t\t\t...teamOperations,\n\t\t\t...teamFields,\n\t\t\t...teamMemberOperations,\n\t\t\t...teamMemberFields,\n\t\t\t...userOperations,\n\t\t\t...userFields,\n\t\t],\n\t};\n\n\tmethods = {\n\t\tloadOptions: {\n\t\t\tasync getDashboards(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst dashboards = (await grafanaApiRequest.call(\n\t\t\t\t\tthis,\n\t\t\t\t\t'GET',\n\t\t\t\t\t'/search',\n\t\t\t\t\t{},\n\t\t\t\t\t{ qs: 'dash-db' },\n\t\t\t\t)) as LoadedDashboards;\n\t\t\t\treturn dashboards.map(({ id, title }) => ({ value: id, name: title }));\n\t\t\t},\n\n\t\t\tasync getFolders(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst folders = (await grafanaApiRequest.call(this, 'GET', '/folders')) as LoadedFolders;\n\t\t\t\treturn folders.map(({ id, title }) => ({ value: id, name: title }));\n\t\t\t},\n\n\t\t\tasync getTeams(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst res = (await grafanaApiRequest.call(this, 'GET', '/teams/search')) as LoadedTeams;\n\t\t\t\treturn res.teams.map(({ id, name }) => ({ value: id, name }));\n\t\t\t},\n\n\t\t\tasync getUsers(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst users = (await grafanaApiRequest.call(this, 'GET', '/org/users')) as LoadedUsers;\n\t\t\t\treturn users.map(({ userId, email }) => ({ value: userId, name: email }));\n\t\t\t},\n\t\t},\n\t};\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t\tconst items = this.getInputData();\n\t\tconst returnData: IDataObject[] = [];\n\n\t\tconst resource = this.getNodeParameter('resource', 0);\n\t\tconst operation = this.getNodeParameter('operation', 0);\n\n\t\tlet responseData;\n\n\t\tfor (let i = 0; i < items.length; i++) {\n\t\t\ttry {\n\t\t\t\tif (resource === 'dashboard') {\n\t\t\t\t\t// **********************************************************************\n\t\t\t\t\t//                               dashboard\n\t\t\t\t\t// **********************************************************************\n\n\t\t\t\t\tif (operation === 'create') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//            dashboard: create\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\t// https://grafana.com/docs/grafana/latest/http_api/dashboard/#create--update-dashboard\n\n\t\t\t\t\t\tconst body = {\n\t\t\t\t\t\t\tdashboard: {\n\t\t\t\t\t\t\t\tid: null,\n\t\t\t\t\t\t\t\ttitle: this.getNodeParameter('title', i),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i);\n\n\t\t\t\t\t\tif (Object.keys(additionalFields).length) {\n\t\t\t\t\t\t\tif (additionalFields.folderId === '') delete additionalFields.folderId;\n\n\t\t\t\t\t\t\tObject.assign(body, additionalFields);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await grafanaApiRequest.call(this, 'POST', '/dashboards/db', body);\n\t\t\t\t\t} else if (operation === 'delete') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//            dashboard: delete\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\t// https://grafana.com/docs/grafana/latest/http_api/dashboard/#delete-dashboard-by-uid\n\n\t\t\t\t\t\tconst uidOrUrl = this.getNodeParameter('dashboardUidOrUrl', i) as string;\n\t\t\t\t\t\tconst uid = deriveUid.call(this, uidOrUrl);\n\t\t\t\t\t\tconst endpoint = `/dashboards/uid/${uid}`;\n\t\t\t\t\t\tresponseData = await grafanaApiRequest.call(this, 'DELETE', endpoint);\n\t\t\t\t\t} else if (operation === 'get') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//              dashboard: get\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\t// https://grafana.com/docs/grafana/latest/http_api/dashboard/#get-dashboard-by-uid\n\n\t\t\t\t\t\tconst uidOrUrl = this.getNodeParameter('dashboardUidOrUrl', i) as string;\n\t\t\t\t\t\tconst uid = deriveUid.call(this, uidOrUrl);\n\t\t\t\t\t\tconst endpoint = `/dashboards/uid/${uid}`;\n\t\t\t\t\t\tresponseData = await grafanaApiRequest.call(this, 'GET', endpoint);\n\t\t\t\t\t} else if (operation === 'getAll') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//            dashboard: getAll\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\t// https://grafana.com/docs/grafana/latest/http_api/folder_dashboard_search/#search-folders-and-dashboards\n\n\t\t\t\t\t\tconst qs = {\n\t\t\t\t\t\t\ttype: 'dash-db',\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tconst filters = this.getNodeParameter('filters', i);\n\n\t\t\t\t\t\tif (Object.keys(filters).length) {\n\t\t\t\t\t\t\tObject.assign(qs, filters);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', i);\n\n\t\t\t\t\t\tif (!returnAll) {\n\t\t\t\t\t\t\tconst limit = this.getNodeParameter('limit', i);\n\t\t\t\t\t\t\tObject.assign(qs, { limit });\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await grafanaApiRequest.call(this, 'GET', '/search', {}, qs);\n\t\t\t\t\t} else if (operation === 'update') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//            dashboard: update\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\t// https://grafana.com/docs/grafana/latest/http_api/dashboard/#create--update-dashboard\n\n\t\t\t\t\t\tconst uidOrUrl = this.getNodeParameter('dashboardUidOrUrl', i) as string;\n\t\t\t\t\t\tconst uid = deriveUid.call(this, uidOrUrl);\n\n\t\t\t\t\t\t// ensure dashboard to update exists\n\t\t\t\t\t\tawait grafanaApiRequest.call(this, 'GET', `/dashboards/uid/${uid}`);\n\n\t\t\t\t\t\tconst body: DashboardUpdatePayload = {\n\t\t\t\t\t\t\toverwrite: true,\n\t\t\t\t\t\t\tdashboard: { uid },\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tconst updateFields = this.getNodeParameter('updateFields', i) as DashboardUpdateFields;\n\n\t\t\t\t\t\tthrowOnEmptyUpdate.call(this, resource, updateFields);\n\n\t\t\t\t\t\tconst { title, ...rest } = updateFields;\n\n\t\t\t\t\t\tif (!title) {\n\t\t\t\t\t\t\tconst { dashboard } = await grafanaApiRequest.call(\n\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t\t`/dashboards/uid/${uid}`,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tbody.dashboard.title = dashboard.title;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst dashboards = (await grafanaApiRequest.call(this, 'GET', '/search')) as Array<{\n\t\t\t\t\t\t\t\ttitle: string;\n\t\t\t\t\t\t\t}>;\n\t\t\t\t\t\t\tconst titles = dashboards.map(({ title: entry }) => entry);\n\n\t\t\t\t\t\t\tif (titles.includes(title)) {\n\t\t\t\t\t\t\t\tthrow new NodeApiError(this.getNode(), {\n\t\t\t\t\t\t\t\t\tmessage: 'A dashboard with the same name already exists in the selected folder',\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbody.dashboard.title = title;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (title) {\n\t\t\t\t\t\t\tbody.dashboard.title = title;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (Object.keys(rest).length) {\n\t\t\t\t\t\t\tif (rest.folderId === '') delete rest.folderId;\n\t\t\t\t\t\t\tObject.assign(body, rest);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await grafanaApiRequest.call(this, 'POST', '/dashboards/db', body);\n\t\t\t\t\t}\n\t\t\t\t} else if (resource === 'team') {\n\t\t\t\t\t// **********************************************************************\n\t\t\t\t\t//                                  team\n\t\t\t\t\t// **********************************************************************\n\n\t\t\t\t\tif (operation === 'create') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//               team: create\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\t// https://grafana.com/docs/grafana/latest/http_api/team/#add-team\n\n\t\t\t\t\t\tconst body = {\n\t\t\t\t\t\t\tname: this.getNodeParameter('name', i) as string,\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i);\n\n\t\t\t\t\t\tif (Object.keys(additionalFields).length) {\n\t\t\t\t\t\t\tObject.assign(body, additionalFields);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await grafanaApiRequest.call(this, 'POST', '/teams', body);\n\t\t\t\t\t} else if (operation === 'delete') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//               team: delete\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\t// https://grafana.com/docs/grafana/latest/http_api/team/#delete-team-by-id\n\n\t\t\t\t\t\tconst teamId = this.getNodeParameter('teamId', i);\n\t\t\t\t\t\tresponseData = await grafanaApiRequest.call(this, 'DELETE', `/teams/${teamId}`);\n\t\t\t\t\t} else if (operation === 'get') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//                team: get\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\t// https://grafana.com/docs/grafana/latest/http_api/team/#get-team-by-id\n\n\t\t\t\t\t\tconst teamId = this.getNodeParameter('teamId', i);\n\t\t\t\t\t\tresponseData = await grafanaApiRequest.call(this, 'GET', `/teams/${teamId}`);\n\t\t\t\t\t} else if (operation === 'getAll') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//               team: getAll\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\t// https://grafana.com/docs/grafana/latest/http_api/team/#team-search-with-paging\n\n\t\t\t\t\t\tconst qs = {} as IDataObject;\n\n\t\t\t\t\t\tconst filters = this.getNodeParameter('filters', i);\n\n\t\t\t\t\t\tif (Object.keys(filters).length) {\n\t\t\t\t\t\t\tObject.assign(qs, filters);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await grafanaApiRequest.call(this, 'GET', '/teams/search', {}, qs);\n\t\t\t\t\t\tresponseData = responseData.teams;\n\n\t\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', i);\n\n\t\t\t\t\t\tif (!returnAll) {\n\t\t\t\t\t\t\tconst limit = this.getNodeParameter('limit', i);\n\t\t\t\t\t\t\tresponseData = responseData.slice(0, limit);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (operation === 'update') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//               team: update\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\t// https://grafana.com/docs/grafana/latest/http_api/team/#update-team\n\n\t\t\t\t\t\tconst updateFields = this.getNodeParameter('updateFields', i);\n\n\t\t\t\t\t\tthrowOnEmptyUpdate.call(this, resource, updateFields);\n\n\t\t\t\t\t\tconst body: IDataObject = {};\n\n\t\t\t\t\t\tconst teamId = this.getNodeParameter('teamId', i);\n\n\t\t\t\t\t\t// check if team exists, since API does not specify update failure reason\n\t\t\t\t\t\tawait grafanaApiRequest.call(this, 'GET', `/teams/${teamId}`);\n\n\t\t\t\t\t\t// prevent email from being overridden to empty\n\t\t\t\t\t\tif (!updateFields.email) {\n\t\t\t\t\t\t\tconst { email } = await grafanaApiRequest.call(this, 'GET', `/teams/${teamId}`);\n\t\t\t\t\t\t\tbody.email = email;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (Object.keys(updateFields).length) {\n\t\t\t\t\t\t\tObject.assign(body, updateFields);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await grafanaApiRequest.call(this, 'PUT', `/teams/${teamId}`, body);\n\t\t\t\t\t}\n\t\t\t\t} else if (resource === 'teamMember') {\n\t\t\t\t\t// **********************************************************************\n\t\t\t\t\t//                               teamMember\n\t\t\t\t\t// **********************************************************************\n\n\t\t\t\t\tif (operation === 'add') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//            teamMember: add\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\t// https://grafana.com/docs/grafana/latest/http_api/team/#add-team-member\n\n\t\t\t\t\t\tconst userId = this.getNodeParameter('userId', i) as string;\n\n\t\t\t\t\t\tconst body = {\n\t\t\t\t\t\t\tuserId: parseInt(userId, 10),\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tconst teamId = this.getNodeParameter('teamId', i);\n\t\t\t\t\t\tconst endpoint = `/teams/${teamId}/members`;\n\t\t\t\t\t\tresponseData = await grafanaApiRequest.call(this, 'POST', endpoint, body);\n\t\t\t\t\t} else if (operation === 'remove') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//            teamMember: remove\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\t// https://grafana.com/docs/grafana/latest/http_api/team/#remove-member-from-team\n\n\t\t\t\t\t\tconst teamId = this.getNodeParameter('teamId', i);\n\t\t\t\t\t\tconst memberId = this.getNodeParameter('memberId', i);\n\t\t\t\t\t\tconst endpoint = `/teams/${teamId}/members/${memberId}`;\n\t\t\t\t\t\tresponseData = await grafanaApiRequest.call(this, 'DELETE', endpoint);\n\t\t\t\t\t} else if (operation === 'getAll') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//            teamMember: getAll\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\t// https://grafana.com/docs/grafana/latest/http_api/team/#get-team-members\n\n\t\t\t\t\t\tconst teamId = this.getNodeParameter('teamId', i);\n\n\t\t\t\t\t\t// check if team exists, since API returns all members if team does not exist\n\t\t\t\t\t\tawait grafanaApiRequest.call(this, 'GET', `/teams/${teamId}`);\n\n\t\t\t\t\t\tconst endpoint = `/teams/${teamId}/members`;\n\t\t\t\t\t\tresponseData = await grafanaApiRequest.call(this, 'GET', endpoint);\n\n\t\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', i);\n\n\t\t\t\t\t\tif (!returnAll) {\n\t\t\t\t\t\t\tconst limit = this.getNodeParameter('limit', i);\n\t\t\t\t\t\t\tresponseData = responseData.slice(0, limit);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (resource === 'user') {\n\t\t\t\t\t// **********************************************************************\n\t\t\t\t\t//                                  user\n\t\t\t\t\t// **********************************************************************\n\n\t\t\t\t\tif (operation === 'create') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//                user: create\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\t// https://grafana.com/docs/grafana/latest/http_api/org/#add-a-new-user-to-the-current-organization\n\n\t\t\t\t\t\tconst body = {\n\t\t\t\t\t\t\trole: this.getNodeParameter('role', i),\n\t\t\t\t\t\t\tloginOrEmail: this.getNodeParameter('loginOrEmail', i),\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tresponseData = await grafanaApiRequest.call(this, 'POST', '/org/users', body);\n\t\t\t\t\t} else if (operation === 'delete') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//                user: delete\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\t// https://grafana.com/docs/grafana/latest/http_api/org/#delete-user-in-current-organization\n\n\t\t\t\t\t\tconst userId = this.getNodeParameter('userId', i);\n\t\t\t\t\t\tresponseData = await grafanaApiRequest.call(this, 'DELETE', `/org/users/${userId}`);\n\t\t\t\t\t} else if (operation === 'getAll') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//               user: getAll\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\t// https://grafana.com/docs/grafana/latest/http_api/org/#get-all-users-within-the-current-organization\n\n\t\t\t\t\t\tresponseData = await grafanaApiRequest.call(this, 'GET', '/org/users');\n\n\t\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', i);\n\n\t\t\t\t\t\tif (!returnAll) {\n\t\t\t\t\t\t\tconst limit = this.getNodeParameter('limit', i);\n\t\t\t\t\t\t\tresponseData = responseData.slice(0, limit);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (operation === 'update') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//               user: update\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\t// https://grafana.com/docs/grafana/latest/http_api/org/#updates-the-given-user\n\n\t\t\t\t\t\tconst body: IDataObject = {};\n\t\t\t\t\t\tconst updateFields = this.getNodeParameter('updateFields', i);\n\n\t\t\t\t\t\tthrowOnEmptyUpdate.call(this, resource, updateFields);\n\n\t\t\t\t\t\tif (Object.keys(updateFields).length) {\n\t\t\t\t\t\t\tObject.assign(body, updateFields);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst userId = this.getNodeParameter('userId', i) as string;\n\t\t\t\t\t\tresponseData = await grafanaApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'PATCH',\n\t\t\t\t\t\t\t`/org/users/${userId}`,\n\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tArray.isArray(responseData)\n\t\t\t\t\t? returnData.push(...(responseData as IDataObject[]))\n\t\t\t\t\t: returnData.push(responseData as IDataObject);\n\t\t\t} catch (error) {\n\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\treturnData.push({ error: error.message });\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\n\t\treturn [this.helpers.returnJsonArray(returnData)];\n\t}\n}\n"],"mappings":"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","names":[]}