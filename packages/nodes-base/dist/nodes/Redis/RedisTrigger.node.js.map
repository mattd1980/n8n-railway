{"version":3,"sources":["../../../nodes/Redis/RedisTrigger.node.ts"],"sourcesContent":["import type {\n\tITriggerFunctions,\n\tINodeType,\n\tINodeTypeDescription,\n\tITriggerResponse,\n} from 'n8n-workflow';\nimport { NodeConnectionTypes, NodeOperationError } from 'n8n-workflow';\n\nimport type { RedisCredential } from './types';\nimport { redisConnectionTest, setupRedisClient } from './utils';\n\ninterface Options {\n\tjsonParseBody: boolean;\n\tonlyMessage: boolean;\n}\n\nexport class RedisTrigger implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'Redis Trigger',\n\t\tname: 'redisTrigger',\n\t\ticon: 'file:redis.svg',\n\t\tgroup: ['trigger'],\n\t\tversion: 1,\n\t\tdescription: 'Subscribe to redis channel',\n\t\tdefaults: {\n\t\t\tname: 'Redis Trigger',\n\t\t},\n\t\tinputs: [],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tcredentials: [\n\t\t\t{\n\t\t\t\tname: 'redis',\n\t\t\t\trequired: true,\n\t\t\t\ttestedBy: 'redisConnectionTest',\n\t\t\t},\n\t\t],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Channels',\n\t\t\t\tname: 'channels',\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: '',\n\t\t\t\trequired: true,\n\t\t\t\tdescription:\n\t\t\t\t\t'Channels to subscribe to, multiple channels be defined with comma. Wildcard character(*) is supported.',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Options',\n\t\t\t\tname: 'options',\n\t\t\t\ttype: 'collection',\n\t\t\t\tplaceholder: 'Add option',\n\t\t\t\tdefault: {},\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'JSON Parse Body',\n\t\t\t\t\t\tname: 'jsonParseBody',\n\t\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\t\tdefault: false,\n\t\t\t\t\t\tdescription: 'Whether to try to parse the message to an object',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Only Message',\n\t\t\t\t\t\tname: 'onlyMessage',\n\t\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\t\tdefault: false,\n\t\t\t\t\t\tdescription: 'Whether to return only the message property',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t],\n\t};\n\n\tmethods = {\n\t\tcredentialTest: { redisConnectionTest },\n\t};\n\n\tasync trigger(this: ITriggerFunctions): Promise<ITriggerResponse> {\n\t\tconst credentials = await this.getCredentials<RedisCredential>('redis');\n\n\t\tconst channels = (this.getNodeParameter('channels') as string).split(',');\n\t\tconst options = this.getNodeParameter('options') as Options;\n\n\t\tif (!channels) {\n\t\t\tthrow new NodeOperationError(this.getNode(), 'Channels are mandatory!');\n\t\t}\n\n\t\tconst client = setupRedisClient(credentials);\n\t\tawait client.connect();\n\t\tawait client.ping();\n\n\t\tconst onMessage = (message: string, channel: string) => {\n\t\t\tif (options.jsonParseBody) {\n\t\t\t\ttry {\n\t\t\t\t\tmessage = JSON.parse(message);\n\t\t\t\t} catch (error) {}\n\t\t\t}\n\n\t\t\tconst data = options.onlyMessage ? { message } : { channel, message };\n\t\t\tthis.emit([this.helpers.returnJsonArray(data)]);\n\t\t};\n\n\t\tconst manualTriggerFunction = async () =>\n\t\t\tawait new Promise<void>(async (resolve) => {\n\t\t\t\tawait client.pSubscribe(channels, (message, channel) => {\n\t\t\t\t\tonMessage(message, channel);\n\t\t\t\t\tresolve();\n\t\t\t\t});\n\t\t\t});\n\n\t\tif (this.getMode() === 'trigger') {\n\t\t\tawait client.pSubscribe(channels, onMessage);\n\t\t}\n\n\t\tasync function closeFunction() {\n\t\t\tawait client.pUnsubscribe();\n\t\t\tawait client.quit();\n\t\t}\n\n\t\treturn {\n\t\t\tcloseFunction,\n\t\t\tmanualTriggerFunction,\n\t\t};\n\t}\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA,0BAAwD;AAGxD,mBAAsD;AAO/C,MAAM,aAAkC;AAAA,EAAxC;AACN,uBAAoC;AAAA,MACnC,aAAa;AAAA,MACb,MAAM;AAAA,MACN,MAAM;AAAA,MACN,OAAO,CAAC,SAAS;AAAA,MACjB,SAAS;AAAA,MACT,aAAa;AAAA,MACb,UAAU;AAAA,QACT,MAAM;AAAA,MACP;AAAA,MACA,QAAQ,CAAC;AAAA,MACT,SAAS,CAAC,wCAAoB,IAAI;AAAA,MAClC,aAAa;AAAA,QACZ;AAAA,UACC,MAAM;AAAA,UACN,UAAU;AAAA,UACV,UAAU;AAAA,QACX;AAAA,MACD;AAAA,MACA,YAAY;AAAA,QACX;AAAA,UACC,aAAa;AAAA,UACb,MAAM;AAAA,UACN,MAAM;AAAA,UACN,SAAS;AAAA,UACT,UAAU;AAAA,UACV,aACC;AAAA,QACF;AAAA,QACA;AAAA,UACC,aAAa;AAAA,UACb,MAAM;AAAA,UACN,MAAM;AAAA,UACN,aAAa;AAAA,UACb,SAAS,CAAC;AAAA,UACV,SAAS;AAAA,YACR;AAAA,cACC,aAAa;AAAA,cACb,MAAM;AAAA,cACN,MAAM;AAAA,cACN,SAAS;AAAA,cACT,aAAa;AAAA,YACd;AAAA,YACA;AAAA,cACC,aAAa;AAAA,cACb,MAAM;AAAA,cACN,MAAM;AAAA,cACN,SAAS;AAAA,cACT,aAAa;AAAA,YACd;AAAA,UACD;AAAA,QACD;AAAA,MACD;AAAA,IACD;AAEA,mBAAU;AAAA,MACT,gBAAgB,EAAE,sDAAoB;AAAA,IACvC;AAAA;AAAA,EAEA,MAAM,UAA4D;AACjE,UAAM,cAAc,MAAM,KAAK,eAAgC,OAAO;AAEtE,UAAM,WAAY,KAAK,iBAAiB,UAAU,EAAa,MAAM,GAAG;AACxE,UAAM,UAAU,KAAK,iBAAiB,SAAS;AAE/C,QAAI,CAAC,UAAU;AACd,YAAM,IAAI,uCAAmB,KAAK,QAAQ,GAAG,yBAAyB;AAAA,IACvE;AAEA,UAAM,aAAS,+BAAiB,WAAW;AAC3C,UAAM,OAAO,QAAQ;AACrB,UAAM,OAAO,KAAK;AAElB,UAAM,YAAY,CAAC,SAAiB,YAAoB;AACvD,UAAI,QAAQ,eAAe;AAC1B,YAAI;AACH,oBAAU,KAAK,MAAM,OAAO;AAAA,QAC7B,SAAS,OAAO;AAAA,QAAC;AAAA,MAClB;AAEA,YAAM,OAAO,QAAQ,cAAc,EAAE,QAAQ,IAAI,EAAE,SAAS,QAAQ;AACpE,WAAK,KAAK,CAAC,KAAK,QAAQ,gBAAgB,IAAI,CAAC,CAAC;AAAA,IAC/C;AAEA,UAAM,wBAAwB,YAC7B,MAAM,IAAI,QAAc,OAAO,YAAY;AAC1C,YAAM,OAAO,WAAW,UAAU,CAAC,SAAS,YAAY;AACvD,kBAAU,SAAS,OAAO;AAC1B,gBAAQ;AAAA,MACT,CAAC;AAAA,IACF,CAAC;AAEF,QAAI,KAAK,QAAQ,MAAM,WAAW;AACjC,YAAM,OAAO,WAAW,UAAU,SAAS;AAAA,IAC5C;AAEA,mBAAe,gBAAgB;AAC9B,YAAM,OAAO,aAAa;AAC1B,YAAM,OAAO,KAAK;AAAA,IACnB;AAEA,WAAO;AAAA,MACN;AAAA,MACA;AAAA,IACD;AAAA,EACD;AACD;","names":[]}