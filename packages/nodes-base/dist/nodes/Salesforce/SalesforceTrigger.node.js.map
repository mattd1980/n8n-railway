{"version":3,"sources":["../../../nodes/Salesforce/SalesforceTrigger.node.ts"],"sourcesContent":["import { DateTime } from 'luxon';\nimport { NodeApiError, NodeConnectionTypes } from 'n8n-workflow';\nimport type {\n\tIDataObject,\n\tIPollFunctions,\n\tINodeExecutionData,\n\tINodeType,\n\tINodeTypeDescription,\n\tILoadOptionsFunctions,\n\tINodePropertyOptions,\n\tJsonObject,\n} from 'n8n-workflow';\n\nimport {\n\tgetQuery,\n\tsalesforceApiRequest,\n\tsalesforceApiRequestAllItems,\n\tsortOptions,\n} from './GenericFunctions';\n\nexport class SalesforceTrigger implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'Salesforce Trigger',\n\t\tname: 'salesforceTrigger',\n\t\ticon: 'file:salesforce.svg',\n\t\tgroup: ['trigger'],\n\t\tversion: 1,\n\t\tdescription:\n\t\t\t'Fetches data from Salesforce and starts the workflow on specified polling intervals.',\n\t\tsubtitle: '={{($parameter[\"triggerOn\"])}}',\n\t\tdefaults: {\n\t\t\tname: 'Salesforce Trigger',\n\t\t},\n\t\tcredentials: [\n\t\t\t{\n\t\t\t\tname: 'salesforceOAuth2Api',\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t],\n\t\tpolling: true,\n\t\tinputs: [],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Trigger On',\n\t\t\t\tname: 'triggerOn',\n\t\t\t\tdescription: 'Which Salesforce event should trigger the node',\n\t\t\t\ttype: 'options',\n\t\t\t\tdefault: '',\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Account Created',\n\t\t\t\t\t\tvalue: 'accountCreated',\n\t\t\t\t\t\tdescription: 'When a new account is created',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Account Updated',\n\t\t\t\t\t\tvalue: 'accountUpdated',\n\t\t\t\t\t\tdescription: 'When an existing account is modified',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Attachment Created',\n\t\t\t\t\t\tvalue: 'attachmentCreated',\n\t\t\t\t\t\tdescription: 'When a file is uploaded and attached to an object',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Attachment Updated',\n\t\t\t\t\t\tvalue: 'attachmentUpdated',\n\t\t\t\t\t\tdescription: 'When an existing file is modified',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Case Created',\n\t\t\t\t\t\tvalue: 'caseCreated',\n\t\t\t\t\t\tdescription: 'When a new case is created',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Case Updated',\n\t\t\t\t\t\tvalue: 'caseUpdated',\n\t\t\t\t\t\tdescription: 'When an existing case is modified',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Contact Created',\n\t\t\t\t\t\tvalue: 'contactCreated',\n\t\t\t\t\t\tdescription: 'When a new contact is created',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Contact Updated',\n\t\t\t\t\t\tvalue: 'contactUpdated',\n\t\t\t\t\t\tdescription: 'When an existing contact is modified',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Custom Object Created',\n\t\t\t\t\t\tvalue: 'customObjectCreated',\n\t\t\t\t\t\tdescription: 'When a new object of a given type is created',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Custom Object Updated',\n\t\t\t\t\t\tvalue: 'customObjectUpdated',\n\t\t\t\t\t\tdescription: 'When an object of a given type is modified',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Lead Created',\n\t\t\t\t\t\tvalue: 'leadCreated',\n\t\t\t\t\t\tdescription: 'When a new lead is created',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Lead Updated',\n\t\t\t\t\t\tvalue: 'leadUpdated',\n\t\t\t\t\t\tdescription: 'When an existing lead is modified',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Opportunity Created',\n\t\t\t\t\t\tvalue: 'opportunityCreated',\n\t\t\t\t\t\tdescription: 'When a new opportunity is created',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Opportunity Updated',\n\t\t\t\t\t\tvalue: 'opportunityUpdated',\n\t\t\t\t\t\tdescription: 'When an existing opportunity is created',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Task Created',\n\t\t\t\t\t\tvalue: 'taskCreated',\n\t\t\t\t\t\tdescription: 'When a new task is created',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Task Updated',\n\t\t\t\t\t\tvalue: 'taskUpdated',\n\t\t\t\t\t\tdescription: 'When an existing task is modified',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'User Created',\n\t\t\t\t\t\tvalue: 'userCreated',\n\t\t\t\t\t\tdescription: 'When a new user is created',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'User Updated',\n\t\t\t\t\t\tvalue: 'userUpdated',\n\t\t\t\t\t\tdescription: 'When an existing user is modified',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Custom Object Name or ID',\n\t\t\t\tname: 'customObject',\n\t\t\t\ttype: 'options',\n\t\t\t\ttypeOptions: {\n\t\t\t\t\tloadOptionsMethod: 'getCustomObjects',\n\t\t\t\t},\n\t\t\t\trequired: true,\n\t\t\t\tdefault: '',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\ttriggerOn: ['customObjectUpdated', 'customObjectCreated'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdescription:\n\t\t\t\t\t'Name of the custom object. Choose from the list, or specify an ID using an <a href=\"https://docs.n8n.io/code/expressions/\">expression</a>.',\n\t\t\t},\n\t\t],\n\t};\n\n\tmethods = {\n\t\tloadOptions: {\n\t\t\t// Get all the custom objects recurrence instances to display them to user so that they can\n\t\t\t// select them easily\n\t\t\tasync getCustomObjects(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst returnData: INodePropertyOptions[] = [];\n\t\t\t\t// TODO: find a way to filter this object to get just the lead sources instead of the whole object\n\t\t\t\tconst { sobjects: objects } = await salesforceApiRequest.call(this, 'GET', '/sobjects');\n\t\t\t\tfor (const object of objects) {\n\t\t\t\t\tif (object.custom === true) {\n\t\t\t\t\t\tconst objectName = object.label;\n\t\t\t\t\t\tconst objectId = object.name;\n\t\t\t\t\t\treturnData.push({\n\t\t\t\t\t\t\tname: objectName,\n\t\t\t\t\t\t\tvalue: objectId,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tsortOptions(returnData);\n\t\t\t\treturn returnData;\n\t\t\t},\n\t\t},\n\t};\n\n\tasync poll(this: IPollFunctions): Promise<INodeExecutionData[][] | null> {\n\t\tconst workflowData = this.getWorkflowStaticData('node');\n\t\tlet responseData;\n\t\tconst qs: IDataObject = {};\n\t\tconst triggerOn = this.getNodeParameter('triggerOn') as string;\n\t\tlet triggerResource = triggerOn.slice(0, 1).toUpperCase() + triggerOn.slice(1, -7);\n\t\tconst changeType = triggerOn.slice(-7);\n\n\t\tif (triggerResource === 'CustomObject') {\n\t\t\ttriggerResource = this.getNodeParameter('customObject') as string;\n\t\t}\n\n\t\tconst now = DateTime.now().toISO();\n\t\tconst startDate = (workflowData.lastTimeChecked as string) || now;\n\t\tconst endDate = now;\n\t\ttry {\n\t\t\tconst pollStartDate = startDate;\n\t\t\tconst pollEndDate = endDate;\n\n\t\t\tconst options = {\n\t\t\t\tconditionsUi: {\n\t\t\t\t\tconditionValues: [] as IDataObject[],\n\t\t\t\t},\n\t\t\t};\n\t\t\tif (this.getMode() !== 'manual') {\n\t\t\t\tif (changeType === 'Created') {\n\t\t\t\t\toptions.conditionsUi.conditionValues.push({\n\t\t\t\t\t\tfield: 'CreatedDate',\n\t\t\t\t\t\toperation: '>=',\n\t\t\t\t\t\tvalue: pollStartDate,\n\t\t\t\t\t});\n\t\t\t\t\toptions.conditionsUi.conditionValues.push({\n\t\t\t\t\t\tfield: 'CreatedDate',\n\t\t\t\t\t\toperation: '<',\n\t\t\t\t\t\tvalue: pollEndDate,\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\toptions.conditionsUi.conditionValues.push({\n\t\t\t\t\t\tfield: 'LastModifiedDate',\n\t\t\t\t\t\toperation: '>=',\n\t\t\t\t\t\tvalue: pollStartDate,\n\t\t\t\t\t});\n\t\t\t\t\toptions.conditionsUi.conditionValues.push({\n\t\t\t\t\t\tfield: 'LastModifiedDate',\n\t\t\t\t\t\toperation: '<',\n\t\t\t\t\t\tvalue: pollEndDate,\n\t\t\t\t\t});\n\t\t\t\t\t// make sure the resource wasn't just created.\n\t\t\t\t\toptions.conditionsUi.conditionValues.push({\n\t\t\t\t\t\tfield: 'CreatedDate',\n\t\t\t\t\t\toperation: '<',\n\t\t\t\t\t\tvalue: pollStartDate,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (this.getMode() === 'manual') {\n\t\t\t\t\tqs.q = getQuery(options, triggerResource, false, 1);\n\t\t\t\t} else {\n\t\t\t\t\tqs.q = getQuery(options, triggerResource, true);\n\t\t\t\t}\n\t\t\t\tresponseData = await salesforceApiRequestAllItems.call(\n\t\t\t\t\tthis,\n\t\t\t\t\t'records',\n\t\t\t\t\t'GET',\n\t\t\t\t\t'/query',\n\t\t\t\t\t{},\n\t\t\t\t\tqs,\n\t\t\t\t);\n\t\t\t} catch (error) {\n\t\t\t\tthrow new NodeApiError(this.getNode(), error as JsonObject);\n\t\t\t}\n\n\t\t\tif (!responseData?.length) {\n\t\t\t\tworkflowData.lastTimeChecked = endDate;\n\t\t\t\treturn null;\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tif (this.getMode() === 'manual' || !workflowData.lastTimeChecked) {\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t\tconst workflow = this.getWorkflow();\n\t\t\tconst node = this.getNode();\n\t\t\tthis.logger.error(\n\t\t\t\t`There was a problem in '${node.name}' node in workflow '${workflow.id}': '${error.description}'`,\n\t\t\t\t{\n\t\t\t\t\tnode: node.name,\n\t\t\t\t\tworkflowId: workflow.id,\n\t\t\t\t\terror,\n\t\t\t\t},\n\t\t\t);\n\t\t\tthrow error;\n\t\t}\n\t\tworkflowData.lastTimeChecked = endDate;\n\n\t\tif (Array.isArray(responseData) && responseData.length) {\n\t\t\treturn [this.helpers.returnJsonArray(responseData as IDataObject[])];\n\t\t}\n\n\t\treturn null;\n\t}\n}\n"],"mappings":"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","names":[]}