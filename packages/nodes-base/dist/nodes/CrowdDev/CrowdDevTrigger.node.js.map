{"version":3,"sources":["../../../nodes/CrowdDev/CrowdDevTrigger.node.ts"],"sourcesContent":["import {\n\ttype IHookFunctions,\n\ttype IWebhookFunctions,\n\ttype INodeType,\n\ttype INodeTypeDescription,\n\ttype IWebhookResponseData,\n\ttype IHttpRequestOptions,\n\tNodeConnectionTypes,\n} from 'n8n-workflow';\n\ninterface ICrowdDevCreds {\n\turl: string;\n\ttenantId: string;\n\ttoken: string;\n\tallowUnauthorizedCerts: boolean;\n}\n\nconst credsName = 'crowdDevApi';\n\nconst getCreds = async (hookFns: IHookFunctions) =>\n\thookFns.getCredentials(credsName) as unknown as ICrowdDevCreds;\n\nconst createRequest = (\n\tcreds: ICrowdDevCreds,\n\topts: Partial<IHttpRequestOptions>,\n): IHttpRequestOptions => {\n\tconst defaults: IHttpRequestOptions = {\n\t\tbaseURL: `${creds.url}/api/tenant/${creds.tenantId}`,\n\t\turl: '',\n\t\tjson: true,\n\t\tskipSslCertificateValidation: creds.allowUnauthorizedCerts,\n\t};\n\treturn Object.assign(defaults, opts);\n};\n\nexport class CrowdDevTrigger implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'crowd.dev Trigger',\n\t\tname: 'crowdDevTrigger',\n\t\ticon: { light: 'file:crowdDev.svg', dark: 'file:crowdDev.dark.svg' },\n\t\tgroup: ['trigger'],\n\t\tversion: 1,\n\t\tdescription: 'Starts the workflow when crowd.dev events occur.',\n\t\tdefaults: {\n\t\t\tname: 'crowd.dev Trigger',\n\t\t},\n\t\tinputs: [],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tcredentials: [\n\t\t\t{\n\t\t\t\tname: 'crowdDevApi',\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t],\n\t\twebhooks: [\n\t\t\t{\n\t\t\t\tname: 'default',\n\t\t\t\thttpMethod: 'POST',\n\t\t\t\tresponseMode: 'onReceived',\n\t\t\t\tpath: 'webhook',\n\t\t\t},\n\t\t],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Trigger',\n\t\t\t\tname: 'trigger',\n\t\t\t\tdescription: 'What will trigger an automation',\n\t\t\t\ttype: 'options',\n\t\t\t\trequired: true,\n\t\t\t\tdefault: 'new_activity',\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'New Activity',\n\t\t\t\t\t\tvalue: 'new_activity',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'New Member',\n\t\t\t\t\t\tvalue: 'new_member',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t],\n\t};\n\n\twebhookMethods = {\n\t\tdefault: {\n\t\t\tasync checkExists(this: IHookFunctions): Promise<boolean> {\n\t\t\t\tconst creds = await getCreds(this);\n\t\t\t\tconst webhookData = this.getWorkflowStaticData('node');\n\t\t\t\tconst webhookUrl = this.getNodeWebhookUrl('default') as string;\n\n\t\t\t\tif (webhookData.webhookId !== undefined) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst options = createRequest(creds, {\n\t\t\t\t\t\t\turl: `/automation/${webhookData.webhookId}`,\n\t\t\t\t\t\t\tmethod: 'GET',\n\t\t\t\t\t\t});\n\t\t\t\t\t\tconst data = await this.helpers.httpRequestWithAuthentication.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\tcredsName,\n\t\t\t\t\t\t\toptions,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tif (data.settings.url === webhookUrl) {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// If it did not error then the webhook exists\n\t\t\t\treturn false;\n\t\t\t},\n\n\t\t\tasync create(this: IHookFunctions): Promise<boolean> {\n\t\t\t\tconst creds = await getCreds(this);\n\t\t\t\tconst webhookData = this.getWorkflowStaticData('node');\n\t\t\t\tconst webhookUrl = this.getNodeWebhookUrl('default') as string;\n\t\t\t\tconst params = {\n\t\t\t\t\ttrigger: this.getNodeParameter('trigger') as string,\n\t\t\t\t};\n\n\t\t\t\tconst options = createRequest(creds, {\n\t\t\t\t\turl: '/automation',\n\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\tbody: {\n\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\tsettings: {\n\t\t\t\t\t\t\t\turl: webhookUrl,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\ttype: 'webhook',\n\t\t\t\t\t\t\ttrigger: params.trigger,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t});\n\n\t\t\t\tconst responseData = await this.helpers.httpRequestWithAuthentication.call(\n\t\t\t\t\tthis,\n\t\t\t\t\t'crowdDevApi',\n\t\t\t\t\toptions,\n\t\t\t\t);\n\t\t\t\tif (responseData === undefined || responseData.id === undefined) {\n\t\t\t\t\t// Required data is missing so was not successful\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\twebhookData.webhookId = responseData.id as string;\n\n\t\t\t\treturn true;\n\t\t\t},\n\n\t\t\tasync delete(this: IHookFunctions): Promise<boolean> {\n\t\t\t\tconst creds = await getCreds(this);\n\t\t\t\tconst webhookData = this.getWorkflowStaticData('node');\n\n\t\t\t\tif (webhookData.webhookId !== undefined) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst options = createRequest(creds, {\n\t\t\t\t\t\t\turl: `/automation/${webhookData.webhookId}`,\n\t\t\t\t\t\t\tmethod: 'DELETE',\n\t\t\t\t\t\t});\n\t\t\t\t\t\tawait this.helpers.httpRequestWithAuthentication.call(this, credsName, options);\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Remove from the static workflow data so that it is clear\n\t\t\t\t\t// that no webhooks are registered anymore\n\t\t\t\t\tdelete webhookData.webhookId;\n\t\t\t\t\tdelete webhookData.webhookEvents;\n\t\t\t\t\tdelete webhookData.hookSecret;\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\t\t\t},\n\t\t},\n\t};\n\n\tasync webhook(this: IWebhookFunctions): Promise<IWebhookResponseData> {\n\t\tconst bodyData = this.getBodyData();\n\n\t\treturn {\n\t\t\tworkflowData: [this.helpers.returnJsonArray(bodyData)],\n\t\t};\n\t}\n}\n"],"mappings":"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","names":[]}