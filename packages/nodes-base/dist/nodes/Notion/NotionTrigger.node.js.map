{"version":3,"sources":["../../../nodes/Notion/NotionTrigger.node.ts"],"sourcesContent":["import moment from 'moment-timezone';\nimport {\n\ttype IPollFunctions,\n\ttype IDataObject,\n\ttype INodeExecutionData,\n\ttype INodeType,\n\ttype INodeTypeDescription,\n\tNodeConnectionTypes,\n} from 'n8n-workflow';\n\nimport {\n\tdatabaseUrlExtractionRegexp,\n\tdatabaseUrlValidationRegexp,\n\tidExtractionRegexp,\n\tidValidationRegexp,\n} from './shared/constants';\nimport { notionApiRequest, simplifyObjects } from './shared/GenericFunctions';\nimport { listSearch } from './shared/methods';\n\nexport class NotionTrigger implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'Notion Trigger',\n\t\tname: 'notionTrigger',\n\t\ticon: { light: 'file:notion.svg', dark: 'file:notion.dark.svg' },\n\t\tgroup: ['trigger'],\n\t\tversion: 1,\n\t\tdescription: 'Starts the workflow when Notion events occur',\n\t\tsubtitle: '={{$parameter[\"event\"]}}',\n\t\tdefaults: {\n\t\t\tname: 'Notion Trigger',\n\t\t},\n\t\tcredentials: [\n\t\t\t{\n\t\t\t\tname: 'notionApi',\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t],\n\t\tpolling: true,\n\t\tinputs: [],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Event',\n\t\t\t\tname: 'event',\n\t\t\t\ttype: 'options',\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Page Added to Database',\n\t\t\t\t\t\tvalue: 'pageAddedToDatabase',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Page Updated in Database',\n\t\t\t\t\t\tvalue: 'pagedUpdatedInDatabase',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\trequired: true,\n\t\t\t\tdefault: 'pageAddedToDatabase',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName:\n\t\t\t\t\t'In Notion, make sure to <a href=\"https://www.notion.so/help/add-and-manage-connections-with-the-api\" target=\"_blank\">add your connection</a> to the pages you want to access.',\n\t\t\t\tname: 'notionNotice',\n\t\t\t\ttype: 'notice',\n\t\t\t\tdefault: '',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Database',\n\t\t\t\tname: 'databaseId',\n\t\t\t\ttype: 'resourceLocator',\n\t\t\t\tdefault: { mode: 'list', value: '' },\n\t\t\t\trequired: true,\n\t\t\t\tmodes: [\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Database',\n\t\t\t\t\t\tname: 'list',\n\t\t\t\t\t\ttype: 'list',\n\t\t\t\t\t\tplaceholder: 'Select a Database...',\n\t\t\t\t\t\ttypeOptions: {\n\t\t\t\t\t\t\tsearchListMethod: 'getDatabases',\n\t\t\t\t\t\t\tsearchable: true,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Link',\n\t\t\t\t\t\tname: 'url',\n\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\tplaceholder:\n\t\t\t\t\t\t\t'https://www.notion.so/0fe2f7de558b471eab07e9d871cdf4a9?v=f2d424ba0c404733a3f500c78c881610',\n\t\t\t\t\t\tvalidation: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttype: 'regex',\n\t\t\t\t\t\t\t\tproperties: {\n\t\t\t\t\t\t\t\t\tregex: databaseUrlValidationRegexp,\n\t\t\t\t\t\t\t\t\terrorMessage: 'Not a valid Notion Database URL',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t\textractValue: {\n\t\t\t\t\t\t\ttype: 'regex',\n\t\t\t\t\t\t\tregex: databaseUrlExtractionRegexp,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'ID',\n\t\t\t\t\t\tname: 'id',\n\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\tplaceholder: 'ab1545b247fb49fa92d6f4b49f4d8116',\n\t\t\t\t\t\tvalidation: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttype: 'regex',\n\t\t\t\t\t\t\t\tproperties: {\n\t\t\t\t\t\t\t\t\tregex: idValidationRegexp,\n\t\t\t\t\t\t\t\t\terrorMessage: 'Not a valid Notion Database ID',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t\textractValue: {\n\t\t\t\t\t\t\ttype: 'regex',\n\t\t\t\t\t\t\tregex: idExtractionRegexp,\n\t\t\t\t\t\t},\n\t\t\t\t\t\turl: '=https://www.notion.so/{{$value.replace(/-/g, \"\")}}',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tevent: ['pageAddedToDatabase', 'pagedUpdatedInDatabase'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdescription: 'The Notion Database to operate on',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Simplify',\n\t\t\t\tname: 'simple',\n\t\t\t\ttype: 'boolean',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tevent: ['pageAddedToDatabase', 'pagedUpdatedInDatabase'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdefault: true,\n\t\t\t\tdescription:\n\t\t\t\t\t'Whether to return a simplified version of the response instead of the raw data',\n\t\t\t},\n\t\t],\n\t};\n\n\tmethods = {\n\t\tlistSearch,\n\t};\n\n\tasync poll(this: IPollFunctions): Promise<INodeExecutionData[][] | null> {\n\t\tconst webhookData = this.getWorkflowStaticData('node');\n\t\tconst databaseId = this.getNodeParameter('databaseId', '', { extractValue: true }) as string;\n\t\tconst event = this.getNodeParameter('event') as string;\n\t\tconst simple = this.getNodeParameter('simple') as boolean;\n\n\t\tconst lastTimeChecked = webhookData.lastTimeChecked\n\t\t\t? moment(webhookData.lastTimeChecked as string)\n\t\t\t: moment().set({ second: 0, millisecond: 0 }); // Notion timestamp accuracy is only down to the minute\n\n\t\t// update lastTimeChecked to now\n\t\twebhookData.lastTimeChecked = moment().set({ second: 0, millisecond: 0 });\n\n\t\t// because Notion timestamp accuracy is only down to the minute some duplicates can be fetch\n\t\tconst possibleDuplicates = (webhookData.possibleDuplicates as string[]) ?? [];\n\n\t\tconst sortProperty = event === 'pageAddedToDatabase' ? 'created_time' : 'last_edited_time';\n\n\t\tconst option: IDataObject = {\n\t\t\theaders: {\n\t\t\t\t'Notion-Version': '2022-02-22',\n\t\t\t},\n\t\t};\n\n\t\tconst body: IDataObject = {\n\t\t\tpage_size: 1,\n\t\t\tsorts: [\n\t\t\t\t{\n\t\t\t\t\ttimestamp: sortProperty,\n\t\t\t\t\tdirection: 'descending',\n\t\t\t\t},\n\t\t\t],\n\t\t\t...(this.getMode() !== 'manual' && {\n\t\t\t\tfilter: {\n\t\t\t\t\ttimestamp: sortProperty,\n\t\t\t\t\t[sortProperty]: {\n\t\t\t\t\t\ton_or_after: lastTimeChecked.utc().format(),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t}),\n\t\t};\n\n\t\tlet records: IDataObject[] = [];\n\n\t\tlet hasMore = true;\n\n\t\t//get last record\n\t\tlet { results: data } = await notionApiRequest.call(\n\t\t\tthis,\n\t\t\t'POST',\n\t\t\t`/databases/${databaseId}/query`,\n\t\t\tbody,\n\t\t\t{},\n\t\t\t'',\n\t\t\toption,\n\t\t);\n\n\t\tif (this.getMode() === 'manual') {\n\t\t\tif (simple) {\n\t\t\t\tdata = simplifyObjects(data, false, 1);\n\t\t\t}\n\t\t\tif (Array.isArray(data) && data.length) {\n\t\t\t\treturn [this.helpers.returnJsonArray(data)];\n\t\t\t}\n\t\t}\n\n\t\t// if something changed after the last check\n\t\tif (Array.isArray(data) && data.length && Object.keys(data[0] as IDataObject).length !== 0) {\n\t\t\tdo {\n\t\t\t\tbody.page_size = 10;\n\t\t\t\tconst { results, has_more, next_cursor } = await notionApiRequest.call(\n\t\t\t\t\tthis,\n\t\t\t\t\t'POST',\n\t\t\t\t\t`/databases/${databaseId}/query`,\n\t\t\t\t\tbody,\n\t\t\t\t\t{},\n\t\t\t\t\t'',\n\t\t\t\t\toption,\n\t\t\t\t);\n\t\t\t\trecords.push(...(results as IDataObject[]));\n\t\t\t\thasMore = has_more;\n\t\t\t\tif (next_cursor !== null) {\n\t\t\t\t\tbody.start_cursor = next_cursor;\n\t\t\t\t}\n\t\t\t\t// Only stop when we reach records strictly before last recorded time to be sure we catch records from the same minute\n\t\t\t} while (\n\t\t\t\t!moment(records[records.length - 1][sortProperty] as string).isBefore(lastTimeChecked) &&\n\t\t\t\thasMore\n\t\t\t);\n\n\t\t\t// Filter out already processed left over records:\n\t\t\t// with a time strictly before the last record processed\n\t\t\t// or from the same minute not present in the list of processed records\n\t\t\trecords = records.filter(\n\t\t\t\t(record: IDataObject) => !possibleDuplicates.includes(record.id as string),\n\t\t\t);\n\n\t\t\t// Save the time of the most recent record processed\n\t\t\tif (records[0]) {\n\t\t\t\tconst latestTimestamp = moment(records[0][sortProperty] as string);\n\n\t\t\t\t// Save record ids with the same timestamp as the latest processed records\n\t\t\t\twebhookData.possibleDuplicates = records\n\t\t\t\t\t.filter((record: IDataObject) =>\n\t\t\t\t\t\tmoment(record[sortProperty] as string).isSame(latestTimestamp),\n\t\t\t\t\t)\n\t\t\t\t\t.map((record: IDataObject) => record.id);\n\t\t\t} else {\n\t\t\t\twebhookData.possibleDuplicates = undefined;\n\t\t\t}\n\n\t\t\tif (simple) {\n\t\t\t\trecords = simplifyObjects(records, false, 1);\n\t\t\t}\n\n\t\t\tif (Array.isArray(records) && records.length) {\n\t\t\t\treturn [this.helpers.returnJsonArray(records)];\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n}\n"],"mappings":"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","names":["moment"]}