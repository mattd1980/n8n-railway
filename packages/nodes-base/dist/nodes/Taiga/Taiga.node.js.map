{"version":3,"sources":["../../../nodes/Taiga/Taiga.node.ts"],"sourcesContent":["import type {\n\tIExecuteFunctions,\n\tIDataObject,\n\tILoadOptionsFunctions,\n\tINodeExecutionData,\n\tINodePropertyOptions,\n\tINodeType,\n\tINodeTypeDescription,\n} from 'n8n-workflow';\nimport { NodeConnectionTypes } from 'n8n-workflow';\n\nimport {\n\tepicFields,\n\tepicOperations,\n\tissueFields,\n\tissueOperations,\n\ttaskFields,\n\ttaskOperations,\n\tuserStoryFields,\n\tuserStoryOperations,\n} from './descriptions';\nimport {\n\tgetVersionForUpdate,\n\thandleListing,\n\ttaigaApiRequest,\n\tthrowOnEmptyUpdate,\n\ttoOptions,\n} from './GenericFunctions';\n\nexport class Taiga implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'Taiga',\n\t\tname: 'taiga',\n\t\ticon: 'file:taiga.svg',\n\t\tgroup: ['transform'],\n\t\tversion: 1,\n\t\tsubtitle: '={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}',\n\t\tdescription: 'Consume Taiga API',\n\t\tdefaults: {\n\t\t\tname: 'Taiga',\n\t\t},\n\t\tusableAsTool: true,\n\t\tinputs: [NodeConnectionTypes.Main],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tcredentials: [\n\t\t\t{\n\t\t\t\tname: 'taigaApi',\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Resource',\n\t\t\t\tname: 'resource',\n\t\t\t\ttype: 'options',\n\t\t\t\tnoDataExpression: true,\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Epic',\n\t\t\t\t\t\tvalue: 'epic',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Issue',\n\t\t\t\t\t\tvalue: 'issue',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Task',\n\t\t\t\t\t\tvalue: 'task',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'User Story',\n\t\t\t\t\t\tvalue: 'userStory',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'issue',\n\t\t\t},\n\t\t\t...epicOperations,\n\t\t\t...epicFields,\n\t\t\t...issueOperations,\n\t\t\t...issueFields,\n\t\t\t...taskOperations,\n\t\t\t...taskFields,\n\t\t\t...userStoryOperations,\n\t\t\t...userStoryFields,\n\t\t],\n\t};\n\n\tmethods = {\n\t\tloadOptions: {\n\t\t\tasync getEpics(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst project = this.getCurrentNodeParameter('projectId') as string;\n\t\t\t\tconst epics = (await taigaApiRequest.call(\n\t\t\t\t\tthis,\n\t\t\t\t\t'GET',\n\t\t\t\t\t'/epics',\n\t\t\t\t\t{},\n\t\t\t\t\t{ project },\n\t\t\t\t)) as LoadedEpic[];\n\n\t\t\t\treturn epics.map(({ subject, id }) => ({ name: subject, value: id }));\n\t\t\t},\n\n\t\t\tasync getMilestones(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst project = this.getCurrentNodeParameter('projectId') as string;\n\t\t\t\tconst milestones = (await taigaApiRequest.call(\n\t\t\t\t\tthis,\n\t\t\t\t\t'GET',\n\t\t\t\t\t'/milestones',\n\t\t\t\t\t{},\n\t\t\t\t\t{ project },\n\t\t\t\t)) as LoadedResource[];\n\n\t\t\t\treturn toOptions(milestones);\n\t\t\t},\n\n\t\t\tasync getPriorities(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst project = this.getCurrentNodeParameter('projectId') as string;\n\t\t\t\tconst priorities = (await taigaApiRequest.call(\n\t\t\t\t\tthis,\n\t\t\t\t\t'GET',\n\t\t\t\t\t'/priorities',\n\t\t\t\t\t{},\n\t\t\t\t\t{ project },\n\t\t\t\t)) as LoadedResource[];\n\n\t\t\t\treturn toOptions(priorities);\n\t\t\t},\n\n\t\t\tasync getProjects(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst { id } = (await taigaApiRequest.call(this, 'GET', '/users/me')) as { id: string };\n\t\t\t\tconst projects = (await taigaApiRequest.call(\n\t\t\t\t\tthis,\n\t\t\t\t\t'GET',\n\t\t\t\t\t'/projects',\n\t\t\t\t\t{},\n\t\t\t\t\t{ member: id },\n\t\t\t\t)) as LoadedResource[];\n\n\t\t\t\treturn toOptions(projects);\n\t\t\t},\n\n\t\t\tasync getRoles(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst project = this.getCurrentNodeParameter('projectId') as string;\n\t\t\t\tconst roles = (await taigaApiRequest.call(\n\t\t\t\t\tthis,\n\t\t\t\t\t'GET',\n\t\t\t\t\t'/roles',\n\t\t\t\t\t{},\n\t\t\t\t\t{ project },\n\t\t\t\t)) as LoadedResource[];\n\n\t\t\t\treturn toOptions(roles);\n\t\t\t},\n\n\t\t\tasync getSeverities(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst project = this.getCurrentNodeParameter('projectId') as string;\n\t\t\t\tconst severities = (await taigaApiRequest.call(\n\t\t\t\t\tthis,\n\t\t\t\t\t'GET',\n\t\t\t\t\t'/severities',\n\t\t\t\t\t{},\n\t\t\t\t\t{ project },\n\t\t\t\t)) as LoadedResource[];\n\n\t\t\t\treturn toOptions(severities);\n\t\t\t},\n\n\t\t\tasync getTags(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst project = this.getCurrentNodeParameter('projectId') as string;\n\t\t\t\tconst tags = (await taigaApiRequest.call(\n\t\t\t\t\tthis,\n\t\t\t\t\t'GET',\n\t\t\t\t\t`/projects/${project}/tags_colors`,\n\t\t\t\t)) as LoadedTags;\n\n\t\t\t\treturn Object.keys(tags).map((tag) => ({ name: tag, value: tag }));\n\t\t\t},\n\n\t\t\tasync getTypes(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst project = this.getCurrentNodeParameter('projectId') as string;\n\t\t\t\tconst types = (await taigaApiRequest.call(\n\t\t\t\t\tthis,\n\t\t\t\t\t'GET',\n\t\t\t\t\t'/issue-types',\n\t\t\t\t\t{},\n\t\t\t\t\t{ project },\n\t\t\t\t)) as LoadedResource[];\n\n\t\t\t\treturn toOptions(types);\n\t\t\t},\n\n\t\t\tasync getUsers(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst project = this.getCurrentNodeParameter('projectId') as string;\n\t\t\t\tconst users = (await taigaApiRequest.call(\n\t\t\t\t\tthis,\n\t\t\t\t\t'GET',\n\t\t\t\t\t'/users',\n\t\t\t\t\t{},\n\t\t\t\t\t{ project },\n\t\t\t\t)) as LoadedUser[];\n\n\t\t\t\treturn users.map(({ full_name_display, id }) => ({ name: full_name_display, value: id }));\n\t\t\t},\n\n\t\t\tasync getUserStories(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst project = this.getCurrentNodeParameter('projectId') as string;\n\t\t\t\tconst userStories = (await taigaApiRequest.call(\n\t\t\t\t\tthis,\n\t\t\t\t\t'GET',\n\t\t\t\t\t'/userstories',\n\t\t\t\t\t{},\n\t\t\t\t\t{ project },\n\t\t\t\t)) as LoadedUserStory[];\n\n\t\t\t\treturn userStories.map(({ subject, id }) => ({ name: subject, value: id }));\n\t\t\t},\n\n\t\t\t// statuses\n\n\t\t\tasync getIssueStatuses(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst project = this.getCurrentNodeParameter('projectId') as string;\n\t\t\t\tconst statuses = (await taigaApiRequest.call(\n\t\t\t\t\tthis,\n\t\t\t\t\t'GET',\n\t\t\t\t\t'/issue-statuses',\n\t\t\t\t\t{},\n\t\t\t\t\t{ project },\n\t\t\t\t)) as LoadedResource[];\n\n\t\t\t\treturn toOptions(statuses);\n\t\t\t},\n\n\t\t\tasync getTaskStatuses(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst project = this.getCurrentNodeParameter('projectId') as string;\n\t\t\t\tconst statuses = (await taigaApiRequest.call(\n\t\t\t\t\tthis,\n\t\t\t\t\t'GET',\n\t\t\t\t\t'/task-statuses',\n\t\t\t\t\t{},\n\t\t\t\t\t{ project },\n\t\t\t\t)) as LoadedResource[];\n\n\t\t\t\treturn toOptions(statuses);\n\t\t\t},\n\n\t\t\tasync getUserStoryStatuses(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst project = this.getCurrentNodeParameter('projectId') as string;\n\t\t\t\tconst statuses = (await taigaApiRequest.call(\n\t\t\t\t\tthis,\n\t\t\t\t\t'GET',\n\t\t\t\t\t'/userstory-statuses',\n\t\t\t\t\t{},\n\t\t\t\t\t{ project },\n\t\t\t\t)) as LoadedResource[];\n\n\t\t\t\treturn toOptions(statuses);\n\t\t\t},\n\t\t},\n\t};\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t\tconst items = this.getInputData();\n\t\tconst returnData: INodeExecutionData[] = [];\n\n\t\tconst resource = this.getNodeParameter('resource', 0) as Resource;\n\t\tconst operation = this.getNodeParameter('operation', 0) as Operation;\n\n\t\tlet responseData;\n\n\t\tfor (let i = 0; i < items.length; i++) {\n\t\t\ttry {\n\t\t\t\tif (resource === 'epic') {\n\t\t\t\t\t// **********************************************************************\n\t\t\t\t\t//                                  epic\n\t\t\t\t\t// **********************************************************************\n\n\t\t\t\t\tif (operation === 'create') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//               epic: create\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst body = {\n\t\t\t\t\t\t\tproject: this.getNodeParameter('projectId', i),\n\t\t\t\t\t\t\tsubject: this.getNodeParameter('subject', i),\n\t\t\t\t\t\t} as IDataObject;\n\n\t\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i);\n\n\t\t\t\t\t\tif (Object.keys(additionalFields).length) {\n\t\t\t\t\t\t\tObject.assign(body, additionalFields);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await taigaApiRequest.call(this, 'POST', '/epics', body);\n\t\t\t\t\t} else if (operation === 'delete') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//               epic: delete\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst epicId = this.getNodeParameter('epicId', i);\n\n\t\t\t\t\t\tresponseData = await taigaApiRequest.call(this, 'DELETE', `/epics/${epicId}`);\n\t\t\t\t\t\tresponseData = { success: true };\n\t\t\t\t\t} else if (operation === 'get') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//                epic: get\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst epicId = this.getNodeParameter('epicId', i);\n\n\t\t\t\t\t\tresponseData = await taigaApiRequest.call(this, 'GET', `/epics/${epicId}`);\n\t\t\t\t\t} else if (operation === 'getAll') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//               epic: getAll\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst qs = {} as IDataObject;\n\t\t\t\t\t\tconst filters = this.getNodeParameter('filters', i);\n\n\t\t\t\t\t\tif (Object.keys(filters).length) {\n\t\t\t\t\t\t\tObject.assign(qs, filters);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await handleListing.call(this, 'GET', '/epics', {}, qs, i);\n\t\t\t\t\t} else if (operation === 'update') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//               epic: update\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst body = {} as IDataObject;\n\t\t\t\t\t\tconst updateFields = this.getNodeParameter('updateFields', i);\n\n\t\t\t\t\t\tif (Object.keys(updateFields).length) {\n\t\t\t\t\t\t\tObject.assign(body, updateFields);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthrowOnEmptyUpdate.call(this, resource);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst epicId = this.getNodeParameter('epicId', i);\n\t\t\t\t\t\tbody.version = await getVersionForUpdate.call(this, `/epics/${epicId}`);\n\n\t\t\t\t\t\tresponseData = await taigaApiRequest.call(this, 'PATCH', `/epics/${epicId}`, body);\n\t\t\t\t\t}\n\t\t\t\t} else if (resource === 'issue') {\n\t\t\t\t\t// **********************************************************************\n\t\t\t\t\t//                                 issue\n\t\t\t\t\t// **********************************************************************\n\n\t\t\t\t\tif (operation === 'create') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//              issue: create\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst body = {\n\t\t\t\t\t\t\tproject: this.getNodeParameter('projectId', i),\n\t\t\t\t\t\t\tsubject: this.getNodeParameter('subject', i),\n\t\t\t\t\t\t} as IDataObject;\n\n\t\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i);\n\n\t\t\t\t\t\tif (Object.keys(additionalFields).length) {\n\t\t\t\t\t\t\tObject.assign(body, additionalFields);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await taigaApiRequest.call(this, 'POST', '/issues', body);\n\t\t\t\t\t} else if (operation === 'delete') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//              issue: delete\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst issueId = this.getNodeParameter('issueId', i);\n\n\t\t\t\t\t\tresponseData = await taigaApiRequest.call(this, 'DELETE', `/issues/${issueId}`);\n\t\t\t\t\t\tresponseData = { success: true };\n\t\t\t\t\t} else if (operation === 'get') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//                issue: get\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst issueId = this.getNodeParameter('issueId', i);\n\n\t\t\t\t\t\tresponseData = await taigaApiRequest.call(this, 'GET', `/issues/${issueId}`);\n\t\t\t\t\t} else if (operation === 'getAll') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//              issue: getAll\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst qs = {} as IDataObject;\n\t\t\t\t\t\tconst filters = this.getNodeParameter('filters', i);\n\n\t\t\t\t\t\tif (Object.keys(filters).length) {\n\t\t\t\t\t\t\tObject.assign(qs, filters);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await handleListing.call(this, 'GET', '/issues', {}, qs, i);\n\t\t\t\t\t} else if (operation === 'update') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//              issue: update\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst body = {} as IDataObject;\n\t\t\t\t\t\tconst updateFields = this.getNodeParameter('updateFields', i);\n\n\t\t\t\t\t\tif (Object.keys(updateFields).length) {\n\t\t\t\t\t\t\tObject.assign(body, updateFields);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthrowOnEmptyUpdate.call(this, resource);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst issueId = this.getNodeParameter('issueId', i);\n\t\t\t\t\t\tbody.version = await getVersionForUpdate.call(this, `/issues/${issueId}`);\n\n\t\t\t\t\t\tresponseData = await taigaApiRequest.call(this, 'PATCH', `/issues/${issueId}`, body);\n\t\t\t\t\t}\n\t\t\t\t} else if (resource === 'task') {\n\t\t\t\t\t// **********************************************************************\n\t\t\t\t\t//                                  task\n\t\t\t\t\t// **********************************************************************\n\n\t\t\t\t\tif (operation === 'create') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//               task: create\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst body = {\n\t\t\t\t\t\t\tproject: this.getNodeParameter('projectId', i),\n\t\t\t\t\t\t\tsubject: this.getNodeParameter('subject', i),\n\t\t\t\t\t\t} as IDataObject;\n\n\t\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i);\n\n\t\t\t\t\t\tif (Object.keys(additionalFields).length) {\n\t\t\t\t\t\t\tObject.assign(body, additionalFields);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await taigaApiRequest.call(this, 'POST', '/tasks', body);\n\t\t\t\t\t} else if (operation === 'delete') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//               task: delete\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst taskId = this.getNodeParameter('taskId', i);\n\n\t\t\t\t\t\tresponseData = await taigaApiRequest.call(this, 'DELETE', `/tasks/${taskId}`);\n\t\t\t\t\t\tresponseData = { success: true };\n\t\t\t\t\t} else if (operation === 'get') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//                task: get\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst taskId = this.getNodeParameter('taskId', i);\n\n\t\t\t\t\t\tresponseData = await taigaApiRequest.call(this, 'GET', `/tasks/${taskId}`);\n\t\t\t\t\t} else if (operation === 'getAll') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//               task: getAll\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst qs = {} as IDataObject;\n\t\t\t\t\t\tconst filters = this.getNodeParameter('filters', i);\n\n\t\t\t\t\t\tif (Object.keys(filters).length) {\n\t\t\t\t\t\t\tObject.assign(qs, filters);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await handleListing.call(this, 'GET', '/tasks', {}, qs, i);\n\t\t\t\t\t} else if (operation === 'update') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//               task: update\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst body = {} as IDataObject;\n\t\t\t\t\t\tconst updateFields = this.getNodeParameter('updateFields', i);\n\n\t\t\t\t\t\tif (Object.keys(updateFields).length) {\n\t\t\t\t\t\t\tObject.assign(body, updateFields);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthrowOnEmptyUpdate.call(this, resource);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst taskId = this.getNodeParameter('taskId', i);\n\t\t\t\t\t\tbody.version = await getVersionForUpdate.call(this, `/tasks/${taskId}`);\n\n\t\t\t\t\t\tresponseData = await taigaApiRequest.call(this, 'PATCH', `/tasks/${taskId}`, body);\n\t\t\t\t\t}\n\t\t\t\t} else if (resource === 'userStory') {\n\t\t\t\t\t// **********************************************************************\n\t\t\t\t\t//                               userStory\n\t\t\t\t\t// **********************************************************************\n\n\t\t\t\t\tif (operation === 'create') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//            userStory: create\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst body = {\n\t\t\t\t\t\t\tproject: this.getNodeParameter('projectId', i),\n\t\t\t\t\t\t\tsubject: this.getNodeParameter('subject', i),\n\t\t\t\t\t\t} as IDataObject;\n\n\t\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i);\n\n\t\t\t\t\t\tif (Object.keys(additionalFields).length) {\n\t\t\t\t\t\t\tObject.assign(body, additionalFields);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await taigaApiRequest.call(this, 'POST', '/userstories', body);\n\t\t\t\t\t} else if (operation === 'delete') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//            userStory: delete\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst userStoryId = this.getNodeParameter('userStoryId', i);\n\n\t\t\t\t\t\tconst endpoint = `/userstories/${userStoryId}`;\n\t\t\t\t\t\tresponseData = await taigaApiRequest.call(this, 'DELETE', endpoint);\n\t\t\t\t\t\tresponseData = { success: true };\n\t\t\t\t\t} else if (operation === 'get') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//              userStory: get\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst userStoryId = this.getNodeParameter('userStoryId', i);\n\n\t\t\t\t\t\tconst endpoint = `/userstories/${userStoryId}`;\n\t\t\t\t\t\tresponseData = await taigaApiRequest.call(this, 'GET', endpoint);\n\t\t\t\t\t} else if (operation === 'getAll') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//            userStory: getAll\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst qs = {} as IDataObject;\n\t\t\t\t\t\tconst filters = this.getNodeParameter('filters', i);\n\n\t\t\t\t\t\tif (Object.keys(filters).length) {\n\t\t\t\t\t\t\tObject.assign(qs, filters);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await handleListing.call(this, 'GET', '/userstories', {}, qs, i);\n\t\t\t\t\t} else if (operation === 'update') {\n\t\t\t\t\t\t// ----------------------------------------\n\t\t\t\t\t\t//            userStory: update\n\t\t\t\t\t\t// ----------------------------------------\n\n\t\t\t\t\t\tconst body = {} as IDataObject;\n\t\t\t\t\t\tconst updateFields = this.getNodeParameter('updateFields', i);\n\n\t\t\t\t\t\tif (Object.keys(updateFields).length) {\n\t\t\t\t\t\t\tObject.assign(body, updateFields);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthrowOnEmptyUpdate.call(this, resource);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst userStoryId = this.getNodeParameter('userStoryId', i);\n\t\t\t\t\t\tbody.version = await getVersionForUpdate.call(this, `/userstories/${userStoryId}`);\n\n\t\t\t\t\t\tresponseData = await taigaApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'PATCH',\n\t\t\t\t\t\t\t`/userstories/${userStoryId}`,\n\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\tconst executionErrorData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\tthis.helpers.returnJsonArray({ error: error.message }),\n\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t);\n\t\t\t\t\treturnData.push(...executionErrorData);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tthrow error;\n\t\t\t}\n\n\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t{ itemData: { item: i } },\n\t\t\t);\n\n\t\t\treturnData.push(...executionData);\n\t\t}\n\n\t\treturn [returnData];\n\t}\n}\n"],"mappings":"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","names":[]}