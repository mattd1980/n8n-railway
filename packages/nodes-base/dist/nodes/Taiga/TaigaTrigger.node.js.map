{"version":3,"sources":["../../../nodes/Taiga/TaigaTrigger.node.ts"],"sourcesContent":["import {\n\ttype IHookFunctions,\n\ttype IDataObject,\n\ttype ILoadOptionsFunctions,\n\ttype INodePropertyOptions,\n\ttype INodeType,\n\ttype INodeTypeDescription,\n\ttype IWebhookFunctions,\n\ttype IWebhookResponseData,\n\tNodeConnectionTypes,\n} from 'n8n-workflow';\n\nimport { getAutomaticSecret, taigaApiRequest } from './GenericFunctions';\n\n// import {\n// \tcreateHmac,\n// } from 'crypto';\n\nexport class TaigaTrigger implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'Taiga Trigger',\n\t\tname: 'taigaTrigger',\n\t\ticon: 'file:taiga.svg',\n\t\tgroup: ['trigger'],\n\t\tversion: 1,\n\t\tsubtitle: '={{\"project:\" + $parameter[\"projectSlug\"]}}',\n\t\tdescription: 'Handle Taiga events via webhook',\n\t\tdefaults: {\n\t\t\tname: 'Taiga Trigger',\n\t\t},\n\t\tinputs: [],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tcredentials: [\n\t\t\t{\n\t\t\t\tname: 'taigaApi',\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t],\n\t\twebhooks: [\n\t\t\t{\n\t\t\t\tname: 'default',\n\t\t\t\thttpMethod: 'POST',\n\t\t\t\tresponseMode: 'onReceived',\n\t\t\t\tpath: 'webhook',\n\t\t\t},\n\t\t],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Project Name or ID',\n\t\t\t\tname: 'projectId',\n\t\t\t\ttype: 'options',\n\t\t\t\tdescription:\n\t\t\t\t\t'Choose from the list, or specify an ID using an <a href=\"https://docs.n8n.io/code/expressions/\">expression</a>',\n\t\t\t\ttypeOptions: {\n\t\t\t\t\tloadOptionsMethod: 'getUserProjects',\n\t\t\t\t},\n\t\t\t\tdefault: '',\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Resources',\n\t\t\t\tname: 'resources',\n\t\t\t\ttype: 'multiOptions',\n\t\t\t\trequired: true,\n\t\t\t\tdefault: ['all'],\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'All',\n\t\t\t\t\t\tvalue: 'all',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Issue',\n\t\t\t\t\t\tvalue: 'issue',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Milestone (Sprint)',\n\t\t\t\t\t\tvalue: 'milestone',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Task',\n\t\t\t\t\t\tvalue: 'task',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'User Story',\n\t\t\t\t\t\tvalue: 'userstory',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Wikipage',\n\t\t\t\t\t\tvalue: 'wikipage',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdescription: 'Resources to listen to',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Operations',\n\t\t\t\tname: 'operations',\n\t\t\t\ttype: 'multiOptions',\n\t\t\t\trequired: true,\n\t\t\t\tdefault: ['all'],\n\t\t\t\tdescription: 'Operations to listen to',\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'All',\n\t\t\t\t\t\tvalue: 'all',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Create',\n\t\t\t\t\t\tvalue: 'create',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Delete',\n\t\t\t\t\t\tvalue: 'delete',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Update',\n\t\t\t\t\t\tvalue: 'change',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t],\n\t};\n\n\tmethods = {\n\t\tloadOptions: {\n\t\t\t// Get all the available projects to display them to user so that they can\n\t\t\t// select them easily\n\t\t\tasync getUserProjects(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst returnData: INodePropertyOptions[] = [];\n\n\t\t\t\tconst { id } = await taigaApiRequest.call(this, 'GET', '/users/me');\n\n\t\t\t\tconst projects = await taigaApiRequest.call(this, 'GET', '/projects', {}, { member: id });\n\t\t\t\tfor (const project of projects) {\n\t\t\t\t\tconst projectName = project.name;\n\t\t\t\t\tconst projectId = project.id;\n\t\t\t\t\treturnData.push({\n\t\t\t\t\t\tname: projectName,\n\t\t\t\t\t\tvalue: projectId,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn returnData;\n\t\t\t},\n\t\t},\n\t};\n\n\twebhookMethods = {\n\t\tdefault: {\n\t\t\tasync checkExists(this: IHookFunctions): Promise<boolean> {\n\t\t\t\tconst webhookUrl = this.getNodeWebhookUrl('default') as string;\n\n\t\t\t\tconst webhookData = this.getWorkflowStaticData('node');\n\n\t\t\t\tconst endpoint = '/webhooks';\n\n\t\t\t\tconst webhooks = await taigaApiRequest.call(this, 'GET', endpoint);\n\n\t\t\t\tfor (const webhook of webhooks) {\n\t\t\t\t\tif (webhook.url === webhookUrl) {\n\t\t\t\t\t\twebhookData.webhookId = webhook.id;\n\t\t\t\t\t\twebhookData.key = webhook.key;\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn false;\n\t\t\t},\n\t\t\tasync create(this: IHookFunctions): Promise<boolean> {\n\t\t\t\tconst credentials = await this.getCredentials('taigaApi');\n\n\t\t\t\tconst webhookUrl = this.getNodeWebhookUrl('default') as string;\n\n\t\t\t\tconst webhookData = this.getWorkflowStaticData('node');\n\n\t\t\t\tconst projectId = this.getNodeParameter('projectId') as string;\n\n\t\t\t\tconst key = getAutomaticSecret(credentials);\n\n\t\t\t\tconst body: IDataObject = {\n\t\t\t\t\tname: `n8n-webhook:${webhookUrl}`,\n\t\t\t\t\turl: webhookUrl,\n\t\t\t\t\tkey,\n\t\t\t\t\tproject: projectId,\n\t\t\t\t};\n\t\t\t\tconst { id } = await taigaApiRequest.call(this, 'POST', '/webhooks', body);\n\n\t\t\t\twebhookData.webhookId = id;\n\t\t\t\twebhookData.key = key;\n\n\t\t\t\treturn true;\n\t\t\t},\n\t\t\tasync delete(this: IHookFunctions): Promise<boolean> {\n\t\t\t\tconst webhookData = this.getWorkflowStaticData('node');\n\t\t\t\ttry {\n\t\t\t\t\tawait taigaApiRequest.call(this, 'DELETE', `/webhooks/${webhookData.webhookId}`);\n\t\t\t\t} catch (error) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tdelete webhookData.webhookId;\n\t\t\t\tdelete webhookData.key;\n\t\t\t\treturn true;\n\t\t\t},\n\t\t},\n\t};\n\n\tasync webhook(this: IWebhookFunctions): Promise<IWebhookResponseData> {\n\t\tconst body = this.getRequestObject().body as WebhookPayload;\n\n\t\tconst operations = this.getNodeParameter('operations', []) as Operations[];\n\t\tconst resources = this.getNodeParameter('resources', []) as Resources[];\n\n\t\tif (!operations.includes('all') && !operations.includes(body.action)) {\n\t\t\treturn {};\n\t\t}\n\n\t\tif (!resources.includes('all') && !resources.includes(body.type)) {\n\t\t\treturn {};\n\t\t}\n\n\t\t// TODO: Signature does not match payload hash\n\t\t// https://github.com/taigaio/taiga-back/issues/1031\n\n\t\t// const webhookData = this.getWorkflowStaticData('node');\n\t\t// const headerData = this.getHeaderData();\n\n\t\t// // @ts-ignore\n\t\t// const requestSignature = headerData['x-taiga-webhook-signature'];\n\n\t\t// if (requestSignature === undefined) {\n\t\t// \treturn {};\n\t\t// }\n\n\t\t// const computedSignature = createHmac('sha1', webhookData.key as string).update(JSON.stringify(body)).digest('hex');\n\n\t\t// if (requestSignature !== computedSignature) {\n\t\t// \treturn {};\n\t\t// }\n\n\t\treturn {\n\t\t\tworkflowData: [this.helpers.returnJsonArray(body)],\n\t\t};\n\t}\n}\n"],"mappings":"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","names":[]}