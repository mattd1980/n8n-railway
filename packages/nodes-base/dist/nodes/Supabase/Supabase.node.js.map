{"version":3,"sources":["../../../nodes/Supabase/Supabase.node.ts"],"sourcesContent":["import type {\n\tIExecuteFunctions,\n\tICredentialDataDecryptedObject,\n\tICredentialsDecrypted,\n\tICredentialTestFunctions,\n\tIDataObject,\n\tILoadOptionsFunctions,\n\tINodeCredentialTestResult,\n\tINodeExecutionData,\n\tINodePropertyOptions,\n\tINodeType,\n\tINodeTypeDescription,\n} from 'n8n-workflow';\nimport { NodeConnectionTypes, NodeOperationError } from 'n8n-workflow';\n\nimport {\n\tbuildGetQuery,\n\tbuildOrQuery,\n\tbuildQuery,\n\tmapPairedItemsFrom,\n\tsupabaseApiRequest,\n\tvalidateCredentials,\n} from './GenericFunctions';\nimport { rowFields, rowOperations } from './RowDescription';\n\nexport type FieldsUiValues = Array<{\n\tfieldId: string;\n\tfieldValue: string;\n}>;\n\nexport class Supabase implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'Supabase',\n\t\tname: 'supabase',\n\t\ticon: 'file:supabase.svg',\n\t\tgroup: ['input'],\n\t\tversion: 1,\n\t\tsubtitle: '={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}',\n\t\tdescription: 'Add, get, delete and update data in a table',\n\t\tdefaults: {\n\t\t\tname: 'Supabase',\n\t\t},\n\t\tinputs: [NodeConnectionTypes.Main],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tusableAsTool: true,\n\t\tcredentials: [\n\t\t\t{\n\t\t\t\tname: 'supabaseApi',\n\t\t\t\trequired: true,\n\t\t\t\ttestedBy: 'supabaseApiCredentialTest',\n\t\t\t},\n\t\t],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Use Custom Schema',\n\t\t\t\tname: 'useCustomSchema',\n\t\t\t\ttype: 'boolean',\n\t\t\t\tdefault: false,\n\t\t\t\tnoDataExpression: true,\n\t\t\t\tdescription:\n\t\t\t\t\t'Whether to use a database schema different from the default \"public\" schema (requires schema exposure in the <a href=\"https://supabase.com/docs/guides/api/using-custom-schemas?queryGroups=language&language=curl#exposing-custom-schemas\">Supabase API</a>)',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Schema',\n\t\t\t\tname: 'schema',\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: 'public',\n\t\t\t\tdescription: 'Name of database schema to use for table',\n\t\t\t\tnoDataExpression: false,\n\t\t\t\tdisplayOptions: { show: { useCustomSchema: [true] } },\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Resource',\n\t\t\t\tname: 'resource',\n\t\t\t\ttype: 'options',\n\t\t\t\tnoDataExpression: true,\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Row',\n\t\t\t\t\t\tvalue: 'row',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'row',\n\t\t\t},\n\t\t\t...rowOperations,\n\t\t\t...rowFields,\n\t\t],\n\t};\n\n\tmethods = {\n\t\tloadOptions: {\n\t\t\tasync getTables(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst returnData: INodePropertyOptions[] = [];\n\t\t\t\tconst { paths } = await supabaseApiRequest.call(this, 'GET', '/');\n\t\t\t\tfor (const path of Object.keys(paths as IDataObject)) {\n\t\t\t\t\t//omit introspection path\n\t\t\t\t\tif (path === '/') continue;\n\t\t\t\t\treturnData.push({\n\t\t\t\t\t\tname: path.replace('/', ''),\n\t\t\t\t\t\tvalue: path.replace('/', ''),\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn returnData;\n\t\t\t},\n\t\t\tasync getTableColumns(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst returnData: INodePropertyOptions[] = [];\n\t\t\t\tconst tableName = this.getCurrentNodeParameter('tableId') as string;\n\t\t\t\tconst { definitions } = await supabaseApiRequest.call(this, 'GET', '/');\n\t\t\t\tfor (const column of Object.keys(definitions[tableName].properties as IDataObject)) {\n\t\t\t\t\treturnData.push({\n\t\t\t\t\t\tname: `${column} - (${definitions[tableName].properties[column].type})`,\n\t\t\t\t\t\tvalue: column,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn returnData;\n\t\t\t},\n\t\t},\n\t\tcredentialTest: {\n\t\t\tasync supabaseApiCredentialTest(\n\t\t\t\tthis: ICredentialTestFunctions,\n\t\t\t\tcredential: ICredentialsDecrypted,\n\t\t\t): Promise<INodeCredentialTestResult> {\n\t\t\t\ttry {\n\t\t\t\t\tawait validateCredentials.call(this, credential.data as ICredentialDataDecryptedObject);\n\t\t\t\t} catch (error) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tstatus: 'Error',\n\t\t\t\t\t\tmessage: 'The Service Key is invalid',\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\tstatus: 'OK',\n\t\t\t\t\tmessage: 'Connection successful!',\n\t\t\t\t};\n\t\t\t},\n\t\t},\n\t};\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t\tconst items = this.getInputData();\n\t\tconst returnData: INodeExecutionData[] = [];\n\t\tconst length = items.length;\n\t\tlet qs: IDataObject = {};\n\t\tconst resource = this.getNodeParameter('resource', 0);\n\t\tconst operation = this.getNodeParameter('operation', 0);\n\n\t\tif (resource === 'row') {\n\t\t\tconst tableId = this.getNodeParameter('tableId', 0) as string;\n\n\t\t\tif (operation === 'create') {\n\t\t\t\tconst records: IDataObject[] = [];\n\n\t\t\t\tfor (let i = 0; i < length; i++) {\n\t\t\t\t\tconst record: IDataObject = {};\n\t\t\t\t\tconst dataToSend = this.getNodeParameter('dataToSend', 0) as\n\t\t\t\t\t\t| 'defineBelow'\n\t\t\t\t\t\t| 'autoMapInputData';\n\n\t\t\t\t\tif (dataToSend === 'autoMapInputData') {\n\t\t\t\t\t\tconst incomingKeys = Object.keys(items[i].json);\n\t\t\t\t\t\tconst rawInputsToIgnore = this.getNodeParameter('inputsToIgnore', i) as string;\n\t\t\t\t\t\tconst inputDataToIgnore = rawInputsToIgnore.split(',').map((c) => c.trim());\n\n\t\t\t\t\t\tfor (const key of incomingKeys) {\n\t\t\t\t\t\t\tif (inputDataToIgnore.includes(key)) continue;\n\t\t\t\t\t\t\trecord[key] = items[i].json[key];\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst fields = this.getNodeParameter('fieldsUi.fieldValues', i, []) as FieldsUiValues;\n\t\t\t\t\t\tfor (const field of fields) {\n\t\t\t\t\t\t\trecord[`${field.fieldId}`] = field.fieldValue;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\trecords.push(record);\n\t\t\t\t}\n\t\t\t\tconst endpoint = `/${tableId}`;\n\n\t\t\t\ttry {\n\t\t\t\t\tconst createdRows: IDataObject[] = await supabaseApiRequest.call(\n\t\t\t\t\t\tthis,\n\t\t\t\t\t\t'POST',\n\t\t\t\t\t\tendpoint,\n\t\t\t\t\t\trecords,\n\t\t\t\t\t);\n\t\t\t\t\tcreatedRows.forEach((row, i) => {\n\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray(row),\n\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t});\n\t\t\t\t} catch (error) {\n\t\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray({ error: error.description }),\n\t\t\t\t\t\t\t{ itemData: mapPairedItemsFrom(records) },\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow error;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (operation === 'delete') {\n\t\t\t\tconst filterType = this.getNodeParameter('filterType', 0) as string;\n\t\t\t\tfor (let i = 0; i < length; i++) {\n\t\t\t\t\tlet endpoint = `/${tableId}`;\n\t\t\t\t\tif (filterType === 'manual') {\n\t\t\t\t\t\tconst matchType = this.getNodeParameter('matchType', 0) as string;\n\t\t\t\t\t\tconst keys = this.getNodeParameter('filters.conditions', i, []) as IDataObject[];\n\n\t\t\t\t\t\tif (!keys.length) {\n\t\t\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t\t\t'At least one select condition must be defined',\n\t\t\t\t\t\t\t\t{ itemIndex: i },\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (matchType === 'allFilters') {\n\t\t\t\t\t\t\tconst data = keys.reduce((obj, value) => buildQuery(obj, value), {});\n\t\t\t\t\t\t\tObject.assign(qs, data);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (matchType === 'anyFilter') {\n\t\t\t\t\t\t\tconst data = keys.map((key) => buildOrQuery(key));\n\t\t\t\t\t\t\tObject.assign(qs, { or: `(${data.join(',')})` });\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (filterType === 'string') {\n\t\t\t\t\t\tconst filterString = this.getNodeParameter('filterString', i) as string;\n\t\t\t\t\t\tendpoint = `${endpoint}?${encodeURI(filterString)}`;\n\t\t\t\t\t}\n\n\t\t\t\t\tlet rows;\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\trows = await supabaseApiRequest.call(this, 'DELETE', endpoint, {}, qs);\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\t\tthis.helpers.returnJsonArray({ error: error.description }),\n\t\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\treturnData.push(...executionData);\n\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow error;\n\t\t\t\t\t}\n\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\tthis.helpers.returnJsonArray(rows as IDataObject[]),\n\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t);\n\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (operation === 'get') {\n\t\t\t\tconst endpoint = `/${tableId}`;\n\n\t\t\t\tfor (let i = 0; i < length; i++) {\n\t\t\t\t\tconst keys = this.getNodeParameter('filters.conditions', i, []) as IDataObject[];\n\t\t\t\t\tconst data = keys.reduce((obj, value) => buildGetQuery(obj, value), {});\n\t\t\t\t\tObject.assign(qs, data);\n\t\t\t\t\tlet rows;\n\n\t\t\t\t\tif (!keys.length) {\n\t\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t\t'At least one select condition must be defined',\n\t\t\t\t\t\t\t{ itemIndex: i },\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\trows = await supabaseApiRequest.call(this, 'GET', endpoint, {}, qs);\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\t\tthis.helpers.returnJsonArray({ error: error.message }),\n\t\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\treturnData.push(...executionData);\n\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow error;\n\t\t\t\t\t}\n\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\tthis.helpers.returnJsonArray(rows as IDataObject[]),\n\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t);\n\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (operation === 'getAll') {\n\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', 0);\n\t\t\t\tconst filterType = this.getNodeParameter('filterType', 0) as string;\n\n\t\t\t\tlet endpoint = `/${tableId}`;\n\t\t\t\tfor (let i = 0; i < length; i++) {\n\t\t\t\t\tqs = {}; // reset qs\n\n\t\t\t\t\tif (filterType === 'manual') {\n\t\t\t\t\t\tconst matchType = this.getNodeParameter('matchType', 0) as string;\n\t\t\t\t\t\tconst keys = this.getNodeParameter('filters.conditions', i, []) as IDataObject[];\n\n\t\t\t\t\t\tif (keys.length !== 0) {\n\t\t\t\t\t\t\tif (matchType === 'allFilters') {\n\t\t\t\t\t\t\t\tconst data = keys.map((key) => buildOrQuery(key));\n\t\t\t\t\t\t\t\tObject.assign(qs, { and: `(${data.join(',')})` });\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (matchType === 'anyFilter') {\n\t\t\t\t\t\t\t\tconst data = keys.map((key) => buildOrQuery(key));\n\t\t\t\t\t\t\t\tObject.assign(qs, { or: `(${data.join(',')})` });\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (filterType === 'string') {\n\t\t\t\t\t\tconst filterString = this.getNodeParameter('filterString', i) as string;\n\t\t\t\t\t\tendpoint = `${endpoint}?${encodeURI(filterString)}`;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!returnAll) {\n\t\t\t\t\t\tqs.limit = this.getNodeParameter('limit', 0);\n\t\t\t\t\t}\n\n\t\t\t\t\tlet rows: IDataObject[] = [];\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tlet responseLength = 0;\n\t\t\t\t\t\tdo {\n\t\t\t\t\t\t\tconst newRows = await supabaseApiRequest.call(this, 'GET', endpoint, {}, qs);\n\t\t\t\t\t\t\tresponseLength = newRows.length;\n\t\t\t\t\t\t\trows = rows.concat(newRows);\n\t\t\t\t\t\t\tqs.offset = rows.length;\n\t\t\t\t\t\t} while (responseLength >= 1000);\n\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray(rows),\n\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\t\tthis.helpers.returnJsonArray({ error: error.description }),\n\t\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\treturnData.push(...executionData);\n\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow error;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (operation === 'update') {\n\t\t\t\tconst filterType = this.getNodeParameter('filterType', 0) as string;\n\t\t\t\tlet endpoint = `/${tableId}`;\n\t\t\t\tfor (let i = 0; i < length; i++) {\n\t\t\t\t\tif (filterType === 'manual') {\n\t\t\t\t\t\tconst matchType = this.getNodeParameter('matchType', 0) as string;\n\t\t\t\t\t\tconst keys = this.getNodeParameter('filters.conditions', i, []) as IDataObject[];\n\n\t\t\t\t\t\tif (!keys.length) {\n\t\t\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t\t\t'At least one select condition must be defined',\n\t\t\t\t\t\t\t\t{ itemIndex: i },\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (matchType === 'allFilters') {\n\t\t\t\t\t\t\tconst data = keys.reduce((obj, value) => buildQuery(obj, value), {});\n\t\t\t\t\t\t\tObject.assign(qs, data);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (matchType === 'anyFilter') {\n\t\t\t\t\t\t\tconst data = keys.map((key) => buildOrQuery(key));\n\t\t\t\t\t\t\tObject.assign(qs, { or: `(${data.join(',')})` });\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (filterType === 'string') {\n\t\t\t\t\t\tconst filterString = this.getNodeParameter('filterString', i) as string;\n\t\t\t\t\t\tendpoint = `${endpoint}?${encodeURI(filterString)}`;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst record: IDataObject = {};\n\t\t\t\t\tconst dataToSend = this.getNodeParameter('dataToSend', 0) as\n\t\t\t\t\t\t| 'defineBelow'\n\t\t\t\t\t\t| 'autoMapInputData';\n\n\t\t\t\t\tif (dataToSend === 'autoMapInputData') {\n\t\t\t\t\t\tconst incomingKeys = Object.keys(items[i].json);\n\t\t\t\t\t\tconst rawInputsToIgnore = this.getNodeParameter('inputsToIgnore', i) as string;\n\t\t\t\t\t\tconst inputDataToIgnore = rawInputsToIgnore.split(',').map((c) => c.trim());\n\n\t\t\t\t\t\tfor (const key of incomingKeys) {\n\t\t\t\t\t\t\tif (inputDataToIgnore.includes(key)) continue;\n\t\t\t\t\t\t\trecord[key] = items[i].json[key];\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst fields = this.getNodeParameter('fieldsUi.fieldValues', i, []) as FieldsUiValues;\n\t\t\t\t\t\tfor (const field of fields) {\n\t\t\t\t\t\t\trecord[`${field.fieldId}`] = field.fieldValue;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tlet updatedRow;\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tupdatedRow = await supabaseApiRequest.call(this, 'PATCH', endpoint, record, qs);\n\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray(updatedRow as IDataObject[]),\n\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\t\tthis.helpers.returnJsonArray({ error: error.description }),\n\t\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\treturnData.push(...executionData);\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow error;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn [returnData];\n\t}\n}\n"],"mappings":"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","names":["executionData"]}