{"version":3,"sources":["../../../nodes/ProfitWell/ProfitWell.node.ts"],"sourcesContent":["import {\n\ttype IExecuteFunctions,\n\ttype IDataObject,\n\ttype ILoadOptionsFunctions,\n\ttype INodeExecutionData,\n\ttype INodePropertyOptions,\n\ttype INodeType,\n\ttype INodeTypeDescription,\n\tNodeConnectionTypes,\n} from 'n8n-workflow';\n\nimport { companyOperations } from './CompanyDescription';\nimport type { Metrics } from './GenericFunctions';\nimport {\n\tprofitWellApiRequest,\n\tsimplifyDailyMetrics,\n\tsimplifyMontlyMetrics,\n} from './GenericFunctions';\nimport { metricFields, metricOperations } from './MetricDescription';\n\nexport class ProfitWell implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'ProfitWell',\n\t\tname: 'profitWell',\n\n\t\ticon: { light: 'file:profitwell.svg', dark: 'file:profitwell.dark.svg' },\n\t\tgroup: ['output'],\n\t\tversion: 1,\n\t\tsubtitle: '={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}',\n\t\tdescription: 'Consume ProfitWell API',\n\t\tdefaults: {\n\t\t\tname: 'ProfitWell',\n\t\t},\n\t\tusableAsTool: true,\n\t\tinputs: [NodeConnectionTypes.Main],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tcredentials: [\n\t\t\t{\n\t\t\t\tname: 'profitWellApi',\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Resource',\n\t\t\t\tname: 'resource',\n\t\t\t\ttype: 'options',\n\t\t\t\tnoDataExpression: true,\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Company',\n\t\t\t\t\t\tvalue: 'company',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Metric',\n\t\t\t\t\t\tvalue: 'metric',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'metric',\n\t\t\t},\n\t\t\t// COMPANY\n\t\t\t...companyOperations,\n\t\t\t// METRICS\n\t\t\t...metricOperations,\n\t\t\t...metricFields,\n\t\t],\n\t};\n\n\tmethods = {\n\t\tloadOptions: {\n\t\t\tasync getPlanIds(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst returnData: INodePropertyOptions[] = [];\n\t\t\t\tconst planIds = await profitWellApiRequest.call(this, 'GET', '/metrics/plans');\n\t\t\t\tfor (const planId of planIds.plan_ids) {\n\t\t\t\t\treturnData.push({\n\t\t\t\t\t\tname: planId,\n\t\t\t\t\t\tvalue: planId,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn returnData;\n\t\t\t},\n\t\t},\n\t};\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t\tconst items = this.getInputData();\n\t\tconst returnData: IDataObject[] = [];\n\t\tconst length = items.length;\n\t\tconst qs: IDataObject = {};\n\t\tlet responseData;\n\t\tconst resource = this.getNodeParameter('resource', 0);\n\t\tconst operation = this.getNodeParameter('operation', 0);\n\t\tfor (let i = 0; i < length; i++) {\n\t\t\ttry {\n\t\t\t\tif (resource === 'company') {\n\t\t\t\t\tif (operation === 'getSetting') {\n\t\t\t\t\t\tresponseData = await profitWellApiRequest.call(this, 'GET', '/company/settings/');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (resource === 'metric') {\n\t\t\t\t\tif (operation === 'get') {\n\t\t\t\t\t\tconst type = this.getNodeParameter('type', i) as string;\n\n\t\t\t\t\t\tconst simple = this.getNodeParameter('simple', 0) as boolean;\n\n\t\t\t\t\t\tif (type === 'daily') {\n\t\t\t\t\t\t\tqs.month = this.getNodeParameter('month', i) as string;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst options = this.getNodeParameter('options', i);\n\n\t\t\t\t\t\tObject.assign(qs, options);\n\n\t\t\t\t\t\tif (qs.dailyMetrics) {\n\t\t\t\t\t\t\tqs.metrics = (qs.dailyMetrics as string[]).join(',');\n\t\t\t\t\t\t\tdelete qs.dailyMetrics;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (qs.monthlyMetrics) {\n\t\t\t\t\t\t\tqs.metrics = (qs.monthlyMetrics as string[]).join(',');\n\t\t\t\t\t\t\tdelete qs.monthlyMetrics;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await profitWellApiRequest.call(this, 'GET', `/metrics/${type}`, {}, qs);\n\t\t\t\t\t\tresponseData = responseData.data as Metrics;\n\n\t\t\t\t\t\tif (simple) {\n\t\t\t\t\t\t\tif (type === 'daily') {\n\t\t\t\t\t\t\t\tresponseData = simplifyDailyMetrics(responseData);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tresponseData = simplifyMontlyMetrics(responseData);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (Array.isArray(responseData)) {\n\t\t\t\t\treturnData.push.apply(returnData, responseData as IDataObject[]);\n\t\t\t\t} else {\n\t\t\t\t\treturnData.push(responseData as IDataObject);\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\treturnData.push({ error: error.message });\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\t\treturn [this.helpers.returnJsonArray(returnData)];\n\t}\n}\n"],"mappings":"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","names":[]}