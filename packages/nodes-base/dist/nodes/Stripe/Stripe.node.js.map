{"version":3,"sources":["../../../nodes/Stripe/Stripe.node.ts"],"sourcesContent":["import isEmpty from 'lodash/isEmpty';\nimport type {\n\tIExecuteFunctions,\n\tIDataObject,\n\tILoadOptionsFunctions,\n\tINodeExecutionData,\n\tINodePropertyOptions,\n\tINodeType,\n\tINodeTypeDescription,\n} from 'n8n-workflow';\nimport { NodeConnectionTypes, NodeOperationError } from 'n8n-workflow';\n\nimport {\n\tbalanceOperations,\n\tchargeFields,\n\tchargeOperations,\n\tcouponFields,\n\tcouponOperations,\n\tcustomerCardFields,\n\tcustomerCardOperations,\n\tcustomerFields,\n\tcustomerOperations,\n\tsourceFields,\n\tsourceOperations,\n\ttokenFields,\n\ttokenOperations,\n} from './descriptions';\nimport {\n\tadjustChargeFields,\n\tadjustCustomerFields,\n\tadjustMetadata,\n\thandleListing,\n\tloadResource,\n\tstripeApiRequest,\n} from './helpers';\n\nexport class Stripe implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'Stripe',\n\t\tname: 'stripe',\n\t\ticon: 'file:stripe.svg',\n\t\tgroup: ['transform'],\n\t\tversion: 1,\n\t\tsubtitle: '={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}',\n\t\tdescription: 'Consume the Stripe API',\n\t\tdefaults: {\n\t\t\tname: 'Stripe',\n\t\t},\n\t\tusableAsTool: true,\n\t\tinputs: [NodeConnectionTypes.Main],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tcredentials: [\n\t\t\t{\n\t\t\t\tname: 'stripeApi',\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Resource',\n\t\t\t\tname: 'resource',\n\t\t\t\ttype: 'options',\n\t\t\t\tnoDataExpression: true,\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Balance',\n\t\t\t\t\t\tvalue: 'balance',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Charge',\n\t\t\t\t\t\tvalue: 'charge',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Coupon',\n\t\t\t\t\t\tvalue: 'coupon',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Customer',\n\t\t\t\t\t\tvalue: 'customer',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Customer Card',\n\t\t\t\t\t\tvalue: 'customerCard',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Source',\n\t\t\t\t\t\tvalue: 'source',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Token',\n\t\t\t\t\t\tvalue: 'token',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'balance',\n\t\t\t},\n\t\t\t...balanceOperations,\n\t\t\t...customerCardOperations,\n\t\t\t...customerCardFields,\n\t\t\t...chargeOperations,\n\t\t\t...chargeFields,\n\t\t\t...couponOperations,\n\t\t\t...couponFields,\n\t\t\t...customerOperations,\n\t\t\t...customerFields,\n\t\t\t...sourceOperations,\n\t\t\t...sourceFields,\n\t\t\t...tokenOperations,\n\t\t\t...tokenFields,\n\t\t],\n\t};\n\n\tmethods = {\n\t\tloadOptions: {\n\t\t\tasync getCustomers(this: ILoadOptionsFunctions) {\n\t\t\t\treturn await loadResource.call(this, 'customer');\n\t\t\t},\n\t\t\tasync getCurrencies(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst returnData: INodePropertyOptions[] = [];\n\t\t\t\tconst { data } = await stripeApiRequest.call(this, 'GET', '/country_specs', {});\n\t\t\t\tfor (const currency of data[0].supported_payment_currencies) {\n\t\t\t\t\treturnData.push({\n\t\t\t\t\t\tname: currency.toUpperCase(),\n\t\t\t\t\t\tvalue: currency,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn returnData;\n\t\t\t},\n\t\t},\n\t};\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t\tconst items = this.getInputData();\n\n\t\tconst resource = this.getNodeParameter('resource', 0);\n\t\tconst operation = this.getNodeParameter('operation', 0);\n\n\t\tlet responseData;\n\t\tconst returnData: INodeExecutionData[] = [];\n\n\t\tfor (let i = 0; i < items.length; i++) {\n\t\t\ttry {\n\t\t\t\tif (resource === 'balance') {\n\t\t\t\t\t// *********************************************************************\n\t\t\t\t\t//                             balance\n\t\t\t\t\t// *********************************************************************\n\n\t\t\t\t\t// https://stripe.com/docs/api/balance\n\n\t\t\t\t\tif (operation === 'get') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//       balance: get\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\tresponseData = await stripeApiRequest.call(this, 'GET', '/balance', {}, {});\n\t\t\t\t\t}\n\t\t\t\t} else if (resource === 'customerCard') {\n\t\t\t\t\t// *********************************************************************\n\t\t\t\t\t//                           customer card\n\t\t\t\t\t// *********************************************************************\n\n\t\t\t\t\t// https://stripe.com/docs/api/cards\n\n\t\t\t\t\tif (operation === 'add') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//         customerCard: add\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\tconst body = {\n\t\t\t\t\t\t\tsource: this.getNodeParameter('token', i),\n\t\t\t\t\t\t} as IDataObject;\n\n\t\t\t\t\t\tconst customerId = this.getNodeParameter('customerId', i);\n\t\t\t\t\t\tconst endpoint = `/customers/${customerId}/sources`;\n\t\t\t\t\t\tresponseData = await stripeApiRequest.call(this, 'POST', endpoint, body, {});\n\t\t\t\t\t} else if (operation === 'remove') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//       customerCard: remove\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\tconst customerId = this.getNodeParameter('customerId', i);\n\t\t\t\t\t\tconst cardId = this.getNodeParameter('cardId', i);\n\t\t\t\t\t\tconst endpoint = `/customers/${customerId}/sources/${cardId}`;\n\t\t\t\t\t\tresponseData = await stripeApiRequest.call(this, 'DELETE', endpoint, {}, {});\n\t\t\t\t\t} else if (operation === 'get') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//        customerCard: get\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\tconst customerId = this.getNodeParameter('customerId', i);\n\t\t\t\t\t\tconst sourceId = this.getNodeParameter('sourceId', i);\n\t\t\t\t\t\tconst endpoint = `/customers/${customerId}/sources/${sourceId}`;\n\t\t\t\t\t\tresponseData = await stripeApiRequest.call(this, 'GET', endpoint, {}, {});\n\t\t\t\t\t}\n\t\t\t\t} else if (resource === 'charge') {\n\t\t\t\t\t// *********************************************************************\n\t\t\t\t\t//                             charge\n\t\t\t\t\t// *********************************************************************\n\n\t\t\t\t\t// https://stripe.com/docs/api/charges\n\n\t\t\t\t\tif (operation === 'create') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//          charge: create\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\tconst body = {\n\t\t\t\t\t\t\tcustomer: this.getNodeParameter('customerId', i),\n\t\t\t\t\t\t\tcurrency: (this.getNodeParameter('currency', i) as string).toLowerCase(),\n\t\t\t\t\t\t\tamount: this.getNodeParameter('amount', i),\n\t\t\t\t\t\t\tsource: this.getNodeParameter('source', i),\n\t\t\t\t\t\t} as IDataObject;\n\n\t\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i);\n\n\t\t\t\t\t\tif (!isEmpty(additionalFields)) {\n\t\t\t\t\t\t\tObject.assign(body, adjustChargeFields(additionalFields));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await stripeApiRequest.call(this, 'POST', '/charges', body, {});\n\t\t\t\t\t} else if (operation === 'get') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//           charge: get\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\tconst chargeId = this.getNodeParameter('chargeId', i);\n\t\t\t\t\t\tresponseData = await stripeApiRequest.call(this, 'GET', `/charges/${chargeId}`, {}, {});\n\t\t\t\t\t} else if (operation === 'getAll') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//          charge: getAll\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\tresponseData = await handleListing.call(this, resource, i);\n\t\t\t\t\t} else if (operation === 'update') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//         charge: update\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\tconst body = {} as IDataObject;\n\n\t\t\t\t\t\tconst updateFields = this.getNodeParameter('updateFields', i);\n\n\t\t\t\t\t\tif (isEmpty(updateFields)) {\n\t\t\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t\t\t`Please enter at least one field to update for the ${resource}.`,\n\t\t\t\t\t\t\t\t{ itemIndex: i },\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tObject.assign(body, adjustChargeFields(updateFields));\n\n\t\t\t\t\t\tconst chargeId = this.getNodeParameter('chargeId', i);\n\t\t\t\t\t\tresponseData = await stripeApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'POST',\n\t\t\t\t\t\t\t`/charges/${chargeId}`,\n\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t} else if (resource === 'coupon') {\n\t\t\t\t\t// *********************************************************************\n\t\t\t\t\t//                             coupon\n\t\t\t\t\t// *********************************************************************\n\n\t\t\t\t\t// https://stripe.com/docs/api/coupons\n\n\t\t\t\t\tif (operation === 'create') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//          coupon: create\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\tconst body = {\n\t\t\t\t\t\t\tduration: this.getNodeParameter('duration', i),\n\t\t\t\t\t\t} as IDataObject;\n\n\t\t\t\t\t\tconst type = this.getNodeParameter('type', i);\n\n\t\t\t\t\t\tif (type === 'fixedAmount') {\n\t\t\t\t\t\t\tbody.amount_off = this.getNodeParameter('amountOff', i);\n\t\t\t\t\t\t\tbody.currency = this.getNodeParameter('currency', i);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tbody.percent_off = this.getNodeParameter('percentOff', i);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await stripeApiRequest.call(this, 'POST', '/coupons', body, {});\n\t\t\t\t\t} else if (operation === 'getAll') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//          coupon: getAll\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\tresponseData = await handleListing.call(this, resource, i);\n\t\t\t\t\t}\n\t\t\t\t} else if (resource === 'customer') {\n\t\t\t\t\t// *********************************************************************\n\t\t\t\t\t//                             customer\n\t\t\t\t\t// *********************************************************************\n\n\t\t\t\t\t// https://stripe.com/docs/api/customers\n\n\t\t\t\t\tif (operation === 'create') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//         customer: create\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\tconst body = {\n\t\t\t\t\t\t\tname: this.getNodeParameter('name', i),\n\t\t\t\t\t\t} as IDataObject;\n\n\t\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i);\n\n\t\t\t\t\t\tif (!isEmpty(additionalFields)) {\n\t\t\t\t\t\t\tObject.assign(body, adjustCustomerFields(additionalFields));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await stripeApiRequest.call(this, 'POST', '/customers', body, {});\n\t\t\t\t\t} else if (operation === 'delete') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//         customer: delete\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\tconst customerId = this.getNodeParameter('customerId', i);\n\t\t\t\t\t\tresponseData = await stripeApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'DELETE',\n\t\t\t\t\t\t\t`/customers/${customerId}`,\n\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t);\n\t\t\t\t\t} else if (operation === 'get') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//          customer: get\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\tconst customerId = this.getNodeParameter('customerId', i);\n\t\t\t\t\t\tresponseData = await stripeApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t`/customers/${customerId}`,\n\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t);\n\t\t\t\t\t} else if (operation === 'getAll') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//        customer: getAll\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\tconst qs = {} as IDataObject;\n\t\t\t\t\t\tconst filters = this.getNodeParameter('filters', i);\n\n\t\t\t\t\t\tif (!isEmpty(filters)) {\n\t\t\t\t\t\t\tqs.email = filters.email;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await handleListing.call(this, resource, i, qs);\n\t\t\t\t\t} else if (operation === 'update') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//        customer: update\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\tconst body = {} as IDataObject;\n\n\t\t\t\t\t\tconst updateFields = this.getNodeParameter('updateFields', i);\n\n\t\t\t\t\t\tif (isEmpty(updateFields)) {\n\t\t\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t\t\t`Please enter at least one field to update for the ${resource}.`,\n\t\t\t\t\t\t\t\t{ itemIndex: i },\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tObject.assign(body, adjustCustomerFields(updateFields));\n\n\t\t\t\t\t\tconst customerId = this.getNodeParameter('customerId', i);\n\t\t\t\t\t\tresponseData = await stripeApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'POST',\n\t\t\t\t\t\t\t`/customers/${customerId}`,\n\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t} else if (resource === 'source') {\n\t\t\t\t\t// *********************************************************************\n\t\t\t\t\t//                             source\n\t\t\t\t\t// *********************************************************************\n\n\t\t\t\t\t// https://stripe.com/docs/api/sources\n\n\t\t\t\t\tif (operation === 'create') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//         source: create\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\tconst customerId = this.getNodeParameter('customerId', i);\n\n\t\t\t\t\t\tconst body = {\n\t\t\t\t\t\t\ttype: this.getNodeParameter('type', i),\n\t\t\t\t\t\t\tamount: this.getNodeParameter('amount', i),\n\t\t\t\t\t\t\tcurrency: this.getNodeParameter('currency', i),\n\t\t\t\t\t\t} as IDataObject;\n\n\t\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i);\n\n\t\t\t\t\t\tif (!isEmpty(additionalFields)) {\n\t\t\t\t\t\t\tObject.assign(body, adjustMetadata(additionalFields));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await stripeApiRequest.call(this, 'POST', '/sources', body, {});\n\n\t\t\t\t\t\t// attach source to customer\n\t\t\t\t\t\tconst endpoint = `/customers/${customerId}/sources`;\n\t\t\t\t\t\tawait stripeApiRequest.call(this, 'POST', endpoint, { source: responseData.id }, {});\n\t\t\t\t\t} else if (operation === 'delete') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//          source: delete\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\tconst sourceId = this.getNodeParameter('sourceId', i);\n\t\t\t\t\t\tconst customerId = this.getNodeParameter('customerId', i);\n\t\t\t\t\t\tconst endpoint = `/customers/${customerId}/sources/${sourceId}`;\n\t\t\t\t\t\tresponseData = await stripeApiRequest.call(this, 'DELETE', endpoint, {}, {});\n\t\t\t\t\t} else if (operation === 'get') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//          source: get\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\tconst sourceId = this.getNodeParameter('sourceId', i);\n\t\t\t\t\t\tresponseData = await stripeApiRequest.call(this, 'GET', `/sources/${sourceId}`, {}, {});\n\t\t\t\t\t}\n\t\t\t\t} else if (resource === 'token') {\n\t\t\t\t\t// *********************************************************************\n\t\t\t\t\t//                             token\n\t\t\t\t\t// *********************************************************************\n\n\t\t\t\t\t// https://stripe.com/docs/api/tokens\n\n\t\t\t\t\tif (operation === 'create') {\n\t\t\t\t\t\t// ----------------------------------\n\t\t\t\t\t\t//          token: create\n\t\t\t\t\t\t// ----------------------------------\n\n\t\t\t\t\t\tconst type = this.getNodeParameter('type', i);\n\t\t\t\t\t\tconst body = {} as IDataObject;\n\n\t\t\t\t\t\tif (type !== 'cardToken') {\n\t\t\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t\t\t'Only card token creation implemented.',\n\t\t\t\t\t\t\t\t{ itemIndex: i },\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbody.card = {\n\t\t\t\t\t\t\tnumber: this.getNodeParameter('number', i),\n\t\t\t\t\t\t\texp_month: this.getNodeParameter('expirationMonth', i),\n\t\t\t\t\t\t\texp_year: this.getNodeParameter('expirationYear', i),\n\t\t\t\t\t\t\tcvc: this.getNodeParameter('cvc', i),\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tresponseData = await stripeApiRequest.call(this, 'POST', '/tokens', body, {});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\tconst executionErrorData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\tthis.helpers.returnJsonArray({ error: error.message }),\n\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t);\n\t\t\t\t\treturnData.push(...executionErrorData);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tthrow error;\n\t\t\t}\n\n\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t\t\t{ itemData: { item: i } },\n\t\t\t);\n\n\t\t\treturnData.push(...executionData);\n\t\t}\n\n\t\treturn [returnData];\n\t}\n}\n"],"mappings":"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","names":["isEmpty"]}