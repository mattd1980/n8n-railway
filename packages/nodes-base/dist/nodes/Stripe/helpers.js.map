{"version":3,"sources":["../../../nodes/Stripe/helpers.ts"],"sourcesContent":["import flow from 'lodash/flow';\nimport isEmpty from 'lodash/isEmpty';\nimport omit from 'lodash/omit';\nimport type {\n\tIExecuteFunctions,\n\tIHookFunctions,\n\tIDataObject,\n\tILoadOptionsFunctions,\n\tINodePropertyOptions,\n\tIHttpRequestMethods,\n\tIRequestOptions,\n} from 'n8n-workflow';\n\n/**\n * Make an API request to Stripe\n *\n */\nexport async function stripeApiRequest(\n\tthis: IHookFunctions | IExecuteFunctions | ILoadOptionsFunctions,\n\tmethod: IHttpRequestMethods,\n\tendpoint: string,\n\tbody: IDataObject,\n\tquery?: IDataObject,\n) {\n\tconst options = {\n\t\tmethod,\n\t\tform: body,\n\t\tqs: query,\n\t\turi: `https://api.stripe.com/v1${endpoint}`,\n\t\tjson: true,\n\t} satisfies IRequestOptions;\n\n\tif (options.qs && Object.keys(options.qs).length === 0) {\n\t\tdelete options.qs;\n\t}\n\n\treturn await this.helpers.requestWithAuthentication.call(this, 'stripeApi', options);\n}\n\n/**\n * Convert n8n's address object into a Stripe API request shipping object.\n */\nfunction adjustAddress(addressFields: { address: { details: IDataObject } }) {\n\tif (!addressFields.address) return addressFields;\n\n\treturn {\n\t\t...omit(addressFields, ['address']),\n\t\taddress: addressFields.address.details,\n\t};\n}\n\n/**\n * Convert n8n's `fixedCollection` metadata object into a Stripe API request metadata object.\n */\nexport function adjustMetadata(fields: {\n\tmetadata?: { metadataProperties: Array<{ key: string; value: string }> };\n}) {\n\tif (!fields.metadata || isEmpty(fields.metadata)) return fields;\n\n\tconst adjustedMetadata: Record<string, string> = {};\n\n\tfields.metadata.metadataProperties.forEach((pair) => {\n\t\tadjustedMetadata[pair.key] = pair.value;\n\t});\n\n\treturn {\n\t\t...omit(fields, ['metadata']),\n\t\tmetadata: adjustedMetadata,\n\t};\n}\n\n/**\n * Convert n8n's shipping object into a Stripe API request shipping object.\n */\nfunction adjustShipping(shippingFields: {\n\tshipping?: { shippingProperties: Array<{ address: { details: IDataObject }; name: string }> };\n}) {\n\tconst shippingProperties = shippingFields.shipping?.shippingProperties[0];\n\n\tif (!shippingProperties?.address || isEmpty(shippingProperties.address)) return shippingFields;\n\n\treturn {\n\t\t...omit(shippingFields, ['shipping']),\n\t\tshipping: {\n\t\t\t...omit(shippingProperties, ['address']),\n\t\t\taddress: shippingProperties.address.details,\n\t\t},\n\t};\n}\n\n/**\n * Make n8n's charge fields compliant with the Stripe API request object.\n */\nexport const adjustChargeFields = flow([adjustShipping, adjustMetadata]);\n\n/**\n * Make n8n's customer fields compliant with the Stripe API request object.\n */\nexport const adjustCustomerFields = flow([adjustShipping, adjustAddress, adjustMetadata]);\n\n/**\n * Load a resource so it can be selected by name from a dropdown.\n */\nexport async function loadResource(\n\tthis: ILoadOptionsFunctions,\n\tresource: 'charge' | 'customer' | 'source',\n): Promise<INodePropertyOptions[]> {\n\tconst responseData = await stripeApiRequest.call(this, 'GET', `/${resource}s`, {}, {});\n\n\treturn responseData.data.map(({ name, id }: { name: string; id: string }) => ({\n\t\tname,\n\t\tvalue: id,\n\t}));\n}\n\n/**\n * Handles a Stripe listing by returning all items or up to a limit.\n */\nexport async function handleListing(\n\tthis: IExecuteFunctions,\n\tresource: string,\n\ti: number,\n\tqs: IDataObject = {},\n) {\n\tconst returnData: IDataObject[] = [];\n\tlet responseData;\n\n\tconst returnAll = this.getNodeParameter('returnAll', i);\n\tconst limit = this.getNodeParameter('limit', i, 0);\n\n\tdo {\n\t\tresponseData = await stripeApiRequest.call(this, 'GET', `/${resource}s`, {}, qs);\n\t\treturnData.push(...(responseData.data as IDataObject[]));\n\n\t\tif (!returnAll && returnData.length >= limit) {\n\t\t\treturn returnData.slice(0, limit);\n\t\t}\n\n\t\tqs.starting_after = returnData[returnData.length - 1].id;\n\t} while (responseData.has_more);\n\n\treturn returnData;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAiB;AACjB,qBAAoB;AACpB,kBAAiB;AAejB,eAAsB,iBAErB,QACA,UACA,MACA,OACC;AACD,QAAM,UAAU;AAAA,IACf;AAAA,IACA,MAAM;AAAA,IACN,IAAI;AAAA,IACJ,KAAK,4BAA4B,QAAQ;AAAA,IACzC,MAAM;AAAA,EACP;AAEA,MAAI,QAAQ,MAAM,OAAO,KAAK,QAAQ,EAAE,EAAE,WAAW,GAAG;AACvD,WAAO,QAAQ;AAAA,EAChB;AAEA,SAAO,MAAM,KAAK,QAAQ,0BAA0B,KAAK,MAAM,aAAa,OAAO;AACpF;AAKA,SAAS,cAAc,eAAsD;AAC5E,MAAI,CAAC,cAAc,QAAS,QAAO;AAEnC,SAAO;AAAA,IACN,OAAG,YAAAA,SAAK,eAAe,CAAC,SAAS,CAAC;AAAA,IAClC,SAAS,cAAc,QAAQ;AAAA,EAChC;AACD;AAKO,SAAS,eAAe,QAE5B;AACF,MAAI,CAAC,OAAO,gBAAY,eAAAC,SAAQ,OAAO,QAAQ,EAAG,QAAO;AAEzD,QAAM,mBAA2C,CAAC;AAElD,SAAO,SAAS,mBAAmB,QAAQ,CAAC,SAAS;AACpD,qBAAiB,KAAK,GAAG,IAAI,KAAK;AAAA,EACnC,CAAC;AAED,SAAO;AAAA,IACN,OAAG,YAAAD,SAAK,QAAQ,CAAC,UAAU,CAAC;AAAA,IAC5B,UAAU;AAAA,EACX;AACD;AAKA,SAAS,eAAe,gBAErB;AACF,QAAM,qBAAqB,eAAe,UAAU,mBAAmB,CAAC;AAExE,MAAI,CAAC,oBAAoB,eAAW,eAAAC,SAAQ,mBAAmB,OAAO,EAAG,QAAO;AAEhF,SAAO;AAAA,IACN,OAAG,YAAAD,SAAK,gBAAgB,CAAC,UAAU,CAAC;AAAA,IACpC,UAAU;AAAA,MACT,OAAG,YAAAA,SAAK,oBAAoB,CAAC,SAAS,CAAC;AAAA,MACvC,SAAS,mBAAmB,QAAQ;AAAA,IACrC;AAAA,EACD;AACD;AAKO,MAAM,yBAAqB,YAAAE,SAAK,CAAC,gBAAgB,cAAc,CAAC;AAKhE,MAAM,2BAAuB,YAAAA,SAAK,CAAC,gBAAgB,eAAe,cAAc,CAAC;AAKxF,eAAsB,aAErB,UACkC;AAClC,QAAM,eAAe,MAAM,iBAAiB,KAAK,MAAM,OAAO,IAAI,QAAQ,KAAK,CAAC,GAAG,CAAC,CAAC;AAErF,SAAO,aAAa,KAAK,IAAI,CAAC,EAAE,MAAM,GAAG,OAAqC;AAAA,IAC7E;AAAA,IACA,OAAO;AAAA,EACR,EAAE;AACH;AAKA,eAAsB,cAErB,UACA,GACA,KAAkB,CAAC,GAClB;AACD,QAAM,aAA4B,CAAC;AACnC,MAAI;AAEJ,QAAM,YAAY,KAAK,iBAAiB,aAAa,CAAC;AACtD,QAAM,QAAQ,KAAK,iBAAiB,SAAS,GAAG,CAAC;AAEjD,KAAG;AACF,mBAAe,MAAM,iBAAiB,KAAK,MAAM,OAAO,IAAI,QAAQ,KAAK,CAAC,GAAG,EAAE;AAC/E,eAAW,KAAK,GAAI,aAAa,IAAsB;AAEvD,QAAI,CAAC,aAAa,WAAW,UAAU,OAAO;AAC7C,aAAO,WAAW,MAAM,GAAG,KAAK;AAAA,IACjC;AAEA,OAAG,iBAAiB,WAAW,WAAW,SAAS,CAAC,EAAE;AAAA,EACvD,SAAS,aAAa;AAEtB,SAAO;AACR;","names":["omit","isEmpty","flow"]}