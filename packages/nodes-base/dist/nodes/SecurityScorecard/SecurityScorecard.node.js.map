{"version":3,"sources":["../../../nodes/SecurityScorecard/SecurityScorecard.node.ts"],"sourcesContent":["import moment from 'moment-timezone';\nimport type {\n\tIExecuteFunctions,\n\tIDataObject,\n\tINodeExecutionData,\n\tINodeType,\n\tINodeTypeDescription,\n} from 'n8n-workflow';\nimport { NodeConnectionTypes } from 'n8n-workflow';\n\nimport { companyFields, companyOperations } from './descriptions/CompanyDescription';\nimport { industryFields, industryOperations } from './descriptions/IndustryDescription';\nimport { inviteFields, inviteOperations } from './descriptions/InviteDescription';\nimport {\n\tportfolioCompanyFields,\n\tportfolioCompanyOperations,\n} from './descriptions/PortfolioCompanyDescription';\nimport { portfolioFields, portfolioOperations } from './descriptions/PortfolioDescription';\nimport { reportFields, reportOperations } from './descriptions/ReportDescription';\nimport { scorecardApiRequest, simplify } from './GenericFunctions';\n\nexport class SecurityScorecard implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'SecurityScorecard',\n\t\tname: 'securityScorecard',\n\t\ticon: 'file:securityScorecard.svg',\n\t\tgroup: ['transform'],\n\t\tsubtitle: '={{$parameter[\"operation\"]}} : {{$parameter[\"resource\"]}}',\n\t\tversion: 1,\n\t\tdescription: 'Consume SecurityScorecard API',\n\t\tdefaults: {\n\t\t\tname: 'SecurityScorecard',\n\t\t},\n\t\tusableAsTool: true,\n\t\tinputs: [NodeConnectionTypes.Main],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tcredentials: [\n\t\t\t{\n\t\t\t\tname: 'securityScorecardApi',\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Resource',\n\t\t\t\tname: 'resource',\n\t\t\t\ttype: 'options',\n\t\t\t\tnoDataExpression: true,\n\t\t\t\trequired: true,\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Company',\n\t\t\t\t\t\tvalue: 'company',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Industry',\n\t\t\t\t\t\tvalue: 'industry',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Invite',\n\t\t\t\t\t\tvalue: 'invite',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Portfolio',\n\t\t\t\t\t\tvalue: 'portfolio',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Portfolio Company',\n\t\t\t\t\t\tvalue: 'portfolioCompany',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Report',\n\t\t\t\t\t\tvalue: 'report',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'company',\n\t\t\t},\n\t\t\t// Company\n\t\t\t...companyOperations,\n\t\t\t...companyFields,\n\t\t\t// Industry\n\t\t\t...industryOperations,\n\t\t\t...industryFields,\n\t\t\t// Invite\n\t\t\t...inviteOperations,\n\t\t\t...inviteFields,\n\t\t\t// Portfolio\n\t\t\t...portfolioOperations,\n\t\t\t...portfolioFields,\n\t\t\t// Portfolio Company\n\t\t\t...portfolioCompanyOperations,\n\t\t\t...portfolioCompanyFields,\n\t\t\t// Report\n\t\t\t...reportOperations,\n\t\t\t...reportFields,\n\t\t],\n\t};\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t\tconst items = this.getInputData();\n\t\tconst returnData: IDataObject[] = [];\n\t\tlet responseData;\n\t\tconst length = items.length;\n\n\t\tconst resource = this.getNodeParameter('resource', 0);\n\t\tconst operation = this.getNodeParameter('operation', 0);\n\n\t\tfor (let i = 0; i < length; i++) {\n\t\t\tif (resource === 'portfolio') {\n\t\t\t\tif (operation === 'create') {\n\t\t\t\t\tconst name = this.getNodeParameter('name', i) as string;\n\t\t\t\t\tconst description = this.getNodeParameter('description', i) as string;\n\t\t\t\t\tconst privacy = this.getNodeParameter('privacy', i) as string;\n\n\t\t\t\t\tconst body: IDataObject = {\n\t\t\t\t\t\tname,\n\t\t\t\t\t\tdescription,\n\t\t\t\t\t\tprivacy,\n\t\t\t\t\t};\n\n\t\t\t\t\tresponseData = await scorecardApiRequest.call(this, 'POST', 'portfolios', body);\n\t\t\t\t\treturnData.push(responseData as IDataObject);\n\t\t\t\t}\n\n\t\t\t\tif (operation === 'delete') {\n\t\t\t\t\tconst portfolioId = this.getNodeParameter('portfolioId', i) as string;\n\t\t\t\t\tresponseData = await scorecardApiRequest.call(\n\t\t\t\t\t\tthis,\n\t\t\t\t\t\t'DELETE',\n\t\t\t\t\t\t`portfolios/${portfolioId}`,\n\t\t\t\t\t);\n\t\t\t\t\treturnData.push({ success: true });\n\t\t\t\t}\n\n\t\t\t\tif (operation === 'update') {\n\t\t\t\t\tconst portfolioId = this.getNodeParameter('portfolioId', i) as string;\n\t\t\t\t\tconst name = this.getNodeParameter('name', i) as string;\n\t\t\t\t\tconst description = this.getNodeParameter('description', i) as string;\n\t\t\t\t\tconst privacy = this.getNodeParameter('privacy', i) as string;\n\n\t\t\t\t\tconst body: IDataObject = {\n\t\t\t\t\t\tname,\n\t\t\t\t\t\tdescription,\n\t\t\t\t\t\tprivacy,\n\t\t\t\t\t};\n\n\t\t\t\t\tresponseData = await scorecardApiRequest.call(\n\t\t\t\t\t\tthis,\n\t\t\t\t\t\t'PUT',\n\t\t\t\t\t\t`portfolios/${portfolioId}`,\n\t\t\t\t\t\tbody,\n\t\t\t\t\t);\n\t\t\t\t\treturnData.push(responseData as IDataObject);\n\t\t\t\t}\n\n\t\t\t\tif (operation === 'getAll') {\n\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', 0);\n\t\t\t\t\tresponseData = await scorecardApiRequest.call(this, 'GET', 'portfolios');\n\t\t\t\t\tresponseData = responseData.entries;\n\n\t\t\t\t\tif (!returnAll) {\n\t\t\t\t\t\tconst limit = this.getNodeParameter('limit', 0);\n\t\t\t\t\t\tresponseData = responseData.splice(0, limit);\n\t\t\t\t\t}\n\n\t\t\t\t\treturnData.push.apply(returnData, responseData as IDataObject[]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (resource === 'portfolioCompany') {\n\t\t\t\tif (operation === 'add') {\n\t\t\t\t\tconst portfolioId = this.getNodeParameter('portfolioId', i) as string;\n\t\t\t\t\tconst domain = this.getNodeParameter('domain', i);\n\t\t\t\t\tresponseData = await scorecardApiRequest.call(\n\t\t\t\t\t\tthis,\n\t\t\t\t\t\t'PUT',\n\t\t\t\t\t\t`portfolios/${portfolioId}/companies/${domain}`,\n\t\t\t\t\t);\n\t\t\t\t\treturnData.push(responseData as IDataObject);\n\t\t\t\t}\n\n\t\t\t\tif (operation === 'remove') {\n\t\t\t\t\tconst portfolioId = this.getNodeParameter('portfolioId', i) as string;\n\t\t\t\t\tconst domain = this.getNodeParameter('domain', i);\n\t\t\t\t\tresponseData = await scorecardApiRequest.call(\n\t\t\t\t\t\tthis,\n\t\t\t\t\t\t'DELETE',\n\t\t\t\t\t\t`portfolios/${portfolioId}/companies/${domain}`,\n\t\t\t\t\t);\n\t\t\t\t\treturnData.push({ success: true });\n\t\t\t\t}\n\n\t\t\t\tif (operation === 'getAll') {\n\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', 0);\n\t\t\t\t\tconst portfolioId = this.getNodeParameter('portfolioId', i) as string;\n\t\t\t\t\tconst filterParams = this.getNodeParameter('filters', i);\n\t\t\t\t\tresponseData = await scorecardApiRequest.call(\n\t\t\t\t\t\tthis,\n\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t`portfolios/${portfolioId}/companies`,\n\t\t\t\t\t\t{},\n\t\t\t\t\t\tfilterParams,\n\t\t\t\t\t);\n\n\t\t\t\t\tresponseData = responseData.entries;\n\n\t\t\t\t\tif (!returnAll) {\n\t\t\t\t\t\tconst limit = this.getNodeParameter('limit', 0);\n\t\t\t\t\t\tresponseData = responseData.splice(0, limit);\n\t\t\t\t\t}\n\n\t\t\t\t\treturnData.push.apply(returnData, responseData as IDataObject[]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (resource === 'report') {\n\t\t\t\tif (operation === 'download') {\n\t\t\t\t\tconst reportUrl = this.getNodeParameter('url', i) as string;\n\n\t\t\t\t\tconst response = await scorecardApiRequest.call(this, 'GET', '', {}, {}, reportUrl, {\n\t\t\t\t\t\tencoding: null,\n\t\t\t\t\t\tresolveWithFullResponse: true,\n\t\t\t\t\t});\n\n\t\t\t\t\tlet mimeType: string | undefined;\n\t\t\t\t\tif (response.headers['content-type']) {\n\t\t\t\t\t\tmimeType = response.headers['content-type'];\n\t\t\t\t\t}\n\n\t\t\t\t\tconst newItem: INodeExecutionData = {\n\t\t\t\t\t\tjson: items[i].json,\n\t\t\t\t\t\tbinary: {},\n\t\t\t\t\t};\n\n\t\t\t\t\tif (items[i].binary !== undefined && newItem.binary) {\n\t\t\t\t\t\t// Create a shallow copy of the binary data so that the old\n\t\t\t\t\t\t// data references which do not get changed still stay behind\n\t\t\t\t\t\t// but the incoming data does not get changed.\n\t\t\t\t\t\tObject.assign(newItem.binary, items[i].binary);\n\t\t\t\t\t}\n\n\t\t\t\t\titems[i] = newItem;\n\n\t\t\t\t\tconst dataPropertyNameDownload = this.getNodeParameter('binaryPropertyName', i);\n\n\t\t\t\t\tconst fileName = reportUrl.split('/').pop();\n\n\t\t\t\t\tconst data = Buffer.from(response.body as string, 'utf8');\n\t\t\t\t\titems[i].binary![dataPropertyNameDownload] = await this.helpers.prepareBinaryData(\n\t\t\t\t\t\tdata as unknown as Buffer,\n\t\t\t\t\t\tfileName,\n\t\t\t\t\t\tmimeType,\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tif (operation === 'generate') {\n\t\t\t\t\tconst reportType = this.getNodeParameter('report', i) as string;\n\t\t\t\t\tlet body: IDataObject = {};\n\n\t\t\t\t\tif (reportType !== 'portfolio') {\n\t\t\t\t\t\tbody.scorecard_identifier = this.getNodeParameter('scorecardIdentifier', i);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbody.portfolio_id = this.getNodeParameter('portfolioId', i);\n\t\t\t\t\t}\n\t\t\t\t\tif (reportType === 'events-json') {\n\t\t\t\t\t\tbody.date = this.getNodeParameter('date', i);\n\t\t\t\t\t}\n\t\t\t\t\tif (['issues', 'portfolio'].indexOf(reportType) > -1) {\n\t\t\t\t\t\tbody.format = this.getNodeParameter('options.format', i) || 'pdf';\n\t\t\t\t\t}\n\t\t\t\t\tif (['detailed', 'summary'].indexOf(reportType) > -1) {\n\t\t\t\t\t\tbody.branding = this.getNodeParameter('branding', i);\n\t\t\t\t\t}\n\t\t\t\t\t// json reports want the params differently\n\t\t\t\t\tif (['events-json', 'full-scorecard-json'].indexOf(reportType) > -1) {\n\t\t\t\t\t\tbody = { params: body };\n\t\t\t\t\t}\n\t\t\t\t\tif (reportType === 'scorecard-footprint') {\n\t\t\t\t\t\tconst options = this.getNodeParameter('options', i);\n\t\t\t\t\t\tObject.assign(body, options);\n\t\t\t\t\t}\n\n\t\t\t\t\tresponseData = await scorecardApiRequest.call(\n\t\t\t\t\t\tthis,\n\t\t\t\t\t\t'POST',\n\t\t\t\t\t\t`reports/${reportType}`,\n\t\t\t\t\t\tbody,\n\t\t\t\t\t);\n\n\t\t\t\t\treturnData.push(responseData as IDataObject);\n\t\t\t\t}\n\n\t\t\t\tif (operation === 'getAll') {\n\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', 0);\n\t\t\t\t\tresponseData = await scorecardApiRequest.call(this, 'GET', 'reports/recent');\n\t\t\t\t\tresponseData = responseData.entries;\n\n\t\t\t\t\tif (!returnAll) {\n\t\t\t\t\t\tconst limit = this.getNodeParameter('limit', i);\n\t\t\t\t\t\tresponseData = responseData.splice(0, limit);\n\t\t\t\t\t}\n\t\t\t\t\treturnData.push.apply(returnData, responseData as IDataObject[]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (resource === 'invite') {\n\t\t\t\tif (operation === 'create') {\n\t\t\t\t\tconst body: IDataObject = {\n\t\t\t\t\t\temail: this.getNodeParameter('email', i),\n\t\t\t\t\t\tfirst_name: this.getNodeParameter('firstName', i),\n\t\t\t\t\t\tlast_name: this.getNodeParameter('lastName', i),\n\t\t\t\t\t\tmessage: this.getNodeParameter('message', i),\n\t\t\t\t\t};\n\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i);\n\t\t\t\t\tObject.assign(body, additionalFields);\n\n\t\t\t\t\tresponseData = await scorecardApiRequest.call(this, 'POST', 'invitations', body);\n\t\t\t\t\treturnData.push(responseData as IDataObject);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (resource === 'industry') {\n\t\t\t\tif (operation === 'getScore') {\n\t\t\t\t\tconst industry = this.getNodeParameter('industry', i);\n\t\t\t\t\tresponseData = await scorecardApiRequest.call(\n\t\t\t\t\t\tthis,\n\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t`industries/${industry}/score`,\n\t\t\t\t\t);\n\t\t\t\t\treturnData.push(responseData as IDataObject);\n\t\t\t\t}\n\n\t\t\t\tif (operation === 'getFactor') {\n\t\t\t\t\tconst simple = this.getNodeParameter('simple', 0) as boolean;\n\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', 0);\n\t\t\t\t\tconst industry = this.getNodeParameter('industry', i);\n\t\t\t\t\tresponseData = await scorecardApiRequest.call(\n\t\t\t\t\t\tthis,\n\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t`industries/${industry}/history/factors`,\n\t\t\t\t\t);\n\t\t\t\t\tresponseData = responseData.entries;\n\n\t\t\t\t\tif (!returnAll) {\n\t\t\t\t\t\tconst limit = this.getNodeParameter('limit', i);\n\t\t\t\t\t\tresponseData = responseData.splice(0, limit);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (simple) {\n\t\t\t\t\t\tresponseData = simplify(responseData as IDataObject[]);\n\t\t\t\t\t}\n\n\t\t\t\t\treturnData.push.apply(returnData, responseData as IDataObject[]);\n\t\t\t\t}\n\n\t\t\t\tif (operation === 'getFactorHistorical') {\n\t\t\t\t\tconst simple = this.getNodeParameter('simple', 0) as boolean;\n\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', i);\n\t\t\t\t\tconst industry = this.getNodeParameter('industry', i);\n\t\t\t\t\tconst options = this.getNodeParameter('options', i);\n\t\t\t\t\t// Convert to YYYY-MM-DD\n\t\t\t\t\tif (options.from) {\n\t\t\t\t\t\toptions.from = moment(options.from as Date).format('YYYY-MM-DD');\n\t\t\t\t\t}\n\n\t\t\t\t\tif (options.to) {\n\t\t\t\t\t\toptions.to = moment(options.to as Date).format('YYYY-MM-DD');\n\t\t\t\t\t}\n\t\t\t\t\tresponseData = await scorecardApiRequest.call(\n\t\t\t\t\t\tthis,\n\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t`industries/${industry}/history/factors`,\n\t\t\t\t\t\t{},\n\t\t\t\t\t\toptions,\n\t\t\t\t\t);\n\t\t\t\t\tresponseData = responseData.entries;\n\n\t\t\t\t\tif (!returnAll) {\n\t\t\t\t\t\tconst limit = this.getNodeParameter('limit', i);\n\t\t\t\t\t\tresponseData = responseData.splice(0, limit);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (simple) {\n\t\t\t\t\t\tresponseData = simplify(responseData as IDataObject[]);\n\t\t\t\t\t}\n\n\t\t\t\t\treturnData.push.apply(returnData, responseData as IDataObject[]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (resource === 'company') {\n\t\t\t\tif (operation === 'getScorecard') {\n\t\t\t\t\tconst scorecardIdentifier = this.getNodeParameter('scorecardIdentifier', i) as string;\n\t\t\t\t\tresponseData = await scorecardApiRequest.call(\n\t\t\t\t\t\tthis,\n\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t`companies/${scorecardIdentifier}`,\n\t\t\t\t\t);\n\t\t\t\t\treturnData.push(responseData as IDataObject);\n\t\t\t\t}\n\n\t\t\t\tif (operation === 'getFactor') {\n\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', i);\n\t\t\t\t\tconst scorecardIdentifier = this.getNodeParameter('scorecardIdentifier', i);\n\t\t\t\t\tconst filterParams = this.getNodeParameter('filters', i);\n\t\t\t\t\tresponseData = await scorecardApiRequest.call(\n\t\t\t\t\t\tthis,\n\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t`companies/${scorecardIdentifier}/factors`,\n\t\t\t\t\t\t{},\n\t\t\t\t\t\tfilterParams,\n\t\t\t\t\t);\n\n\t\t\t\t\tresponseData = responseData.entries;\n\n\t\t\t\t\tif (!returnAll) {\n\t\t\t\t\t\tconst limit = this.getNodeParameter('limit', i);\n\t\t\t\t\t\tresponseData = responseData.splice(0, limit);\n\t\t\t\t\t}\n\n\t\t\t\t\treturnData.push.apply(returnData, responseData as IDataObject[]);\n\t\t\t\t}\n\n\t\t\t\tif (operation === 'getFactorHistorical') {\n\t\t\t\t\tconst simple = this.getNodeParameter('simple', 0) as boolean;\n\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', i);\n\t\t\t\t\tconst scorecardIdentifier = this.getNodeParameter('scorecardIdentifier', i) as string;\n\t\t\t\t\tconst options = this.getNodeParameter('options', i);\n\t\t\t\t\t// Convert to YYYY-MM-DD\n\t\t\t\t\tif (options.date_from) {\n\t\t\t\t\t\toptions.date_from = moment(options.date_from as Date).format('YYYY-MM-DD');\n\t\t\t\t\t}\n\n\t\t\t\t\tif (options.date_to) {\n\t\t\t\t\t\toptions.date_to = moment(options.date_to as Date).format('YYYY-MM-DD');\n\t\t\t\t\t}\n\t\t\t\t\tresponseData = await scorecardApiRequest.call(\n\t\t\t\t\t\tthis,\n\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t`companies/${scorecardIdentifier}/history/factors/score`,\n\t\t\t\t\t\t{},\n\t\t\t\t\t\toptions,\n\t\t\t\t\t);\n\n\t\t\t\t\tresponseData = responseData.entries;\n\n\t\t\t\t\tif (!returnAll) {\n\t\t\t\t\t\tconst limit = this.getNodeParameter('limit', i);\n\t\t\t\t\t\tresponseData = responseData.splice(0, limit);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (simple) {\n\t\t\t\t\t\tresponseData = simplify(responseData as IDataObject[]);\n\t\t\t\t\t}\n\n\t\t\t\t\treturnData.push.apply(returnData, responseData as IDataObject[]);\n\t\t\t\t}\n\n\t\t\t\tif (operation === 'getHistoricalScore') {\n\t\t\t\t\tconst simple = this.getNodeParameter('simple', 0) as boolean;\n\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', i);\n\t\t\t\t\tconst scorecardIdentifier = this.getNodeParameter('scorecardIdentifier', i);\n\t\t\t\t\tconst options = this.getNodeParameter('options', i);\n\n\t\t\t\t\t// for some reason the params are different between these two APis :/\n\t\t\t\t\tif (options.date_from) {\n\t\t\t\t\t\toptions.from = moment(options.date_from as Date).format('YYYY-MM-DD');\n\t\t\t\t\t\tdelete options.date_from;\n\t\t\t\t\t}\n\t\t\t\t\tif (options.date_to) {\n\t\t\t\t\t\toptions.to = moment(options.date_to as Date).format('YYYY-MM-DD');\n\t\t\t\t\t\tdelete options.date_to;\n\t\t\t\t\t}\n\t\t\t\t\tresponseData = await scorecardApiRequest.call(\n\t\t\t\t\t\tthis,\n\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t`companies/${scorecardIdentifier}/history/factors/score`,\n\t\t\t\t\t\t{},\n\t\t\t\t\t\toptions,\n\t\t\t\t\t);\n\t\t\t\t\tresponseData = responseData.entries;\n\n\t\t\t\t\tif (!returnAll) {\n\t\t\t\t\t\tconst limit = this.getNodeParameter('limit', i);\n\t\t\t\t\t\tresponseData = responseData.splice(0, limit);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (simple) {\n\t\t\t\t\t\tresponseData = simplify(responseData as IDataObject[]);\n\t\t\t\t\t}\n\n\t\t\t\t\treturnData.push.apply(returnData, responseData as IDataObject[]);\n\t\t\t\t}\n\n\t\t\t\tif (operation === 'getScorePlan') {\n\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', i);\n\t\t\t\t\tconst scorecardIdentifier = this.getNodeParameter('scorecardIdentifier', i) as string;\n\t\t\t\t\tconst targetScore = this.getNodeParameter('score', i);\n\t\t\t\t\tresponseData = await scorecardApiRequest.call(\n\t\t\t\t\t\tthis,\n\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t`companies/${scorecardIdentifier}/score-plans/by-target/${targetScore}`,\n\t\t\t\t\t);\n\n\t\t\t\t\tresponseData = responseData.entries;\n\n\t\t\t\t\tif (!returnAll) {\n\t\t\t\t\t\tconst limit = this.getNodeParameter('limit', i);\n\t\t\t\t\t\tresponseData = responseData.splice(0, limit);\n\t\t\t\t\t}\n\n\t\t\t\t\treturnData.push.apply(returnData, responseData as IDataObject[]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// Handle file download output data differently\n\t\tif (resource === 'report' && operation === 'download') {\n\t\t\treturn [items];\n\t\t}\n\t\treturn [this.helpers.returnJsonArray(returnData)];\n\t}\n}\n"],"mappings":"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","names":["moment"]}