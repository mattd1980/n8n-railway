{"version":3,"sources":["../../../../../../nodes/Merge/v3/actions/mode/combineBySql.ts"],"sourcesContent":["import { Container } from '@n8n/di';\nimport alasql from 'alasql';\nimport type { Database } from 'alasql';\nimport { ErrorReporter } from 'n8n-core';\nimport type {\n\tIDataObject,\n\tIExecuteFunctions,\n\tINode,\n\tINodeExecutionData,\n\tINodeProperties,\n\tIPairedItemData,\n} from 'n8n-workflow';\nimport { NodeOperationError } from 'n8n-workflow';\n\nimport { getResolvables, updateDisplayOptions } from '@utils/utilities';\n\nimport { numberInputsProperty } from '../../helpers/descriptions';\nimport { modifySelectQuery, rowToExecutionData } from '../../helpers/utils';\n\nexport const properties: INodeProperties[] = [\n\tnumberInputsProperty,\n\t{\n\t\tdisplayName: 'Query',\n\t\tname: 'query',\n\t\ttype: 'string',\n\t\tdefault: 'SELECT * FROM input1 LEFT JOIN input2 ON input1.name = input2.id',\n\t\tnoDataExpression: true,\n\t\tdescription: 'Input data available as tables with corresponding number, e.g. input1, input2',\n\t\thint: 'Supports <a href=\"https://github.com/alasql/alasql/wiki/Supported-SQL-statements\" target=\"_blank\">most</a> of the SQL-99 language',\n\t\trequired: true,\n\t\ttypeOptions: {\n\t\t\trows: 5,\n\t\t\teditor: 'sqlEditor',\n\t\t},\n\t},\n];\n\nconst displayOptions = {\n\tshow: {\n\t\tmode: ['combineBySql'],\n\t},\n};\n\nexport const description = updateDisplayOptions(displayOptions, properties);\n\nconst prepareError = (node: INode, error: Error) => {\n\tlet message = '';\n\tif (typeof error === 'string') {\n\t\tmessage = error;\n\t} else {\n\t\tmessage = error.message;\n\t}\n\tthrow new NodeOperationError(node, error, {\n\t\tmessage: 'Issue while executing query',\n\t\tdescription: message,\n\t\titemIndex: 0,\n\t});\n};\n\nasync function executeSelectWithMappedPairedItems(\n\tnode: INode,\n\tinputsData: INodeExecutionData[][],\n\tquery: string,\n): Promise<INodeExecutionData[][]> {\n\tconst returnData: INodeExecutionData[] = [];\n\n\tconst db: typeof Database = new (alasql as any).Database(node.id);\n\n\ttry {\n\t\tfor (let i = 0; i < inputsData.length; i++) {\n\t\t\tconst inputData = inputsData[i];\n\n\t\t\tdb.exec(`CREATE TABLE input${i + 1}`);\n\t\t\tdb.tables[`input${i + 1}`].data = inputData.map((entry) => ({\n\t\t\t\t...entry.json,\n\t\t\t\tpairedItem: entry.pairedItem,\n\t\t\t}));\n\t\t}\n\t} catch (error) {\n\t\tthrow new NodeOperationError(node, error, {\n\t\t\tmessage: 'Issue while creating table from',\n\t\t\tdescription: error.message,\n\t\t\titemIndex: 0,\n\t\t});\n\t}\n\n\ttry {\n\t\tconst result: IDataObject[] = db.exec(modifySelectQuery(query, inputsData.length));\n\n\t\tfor (const item of result) {\n\t\t\tif (Array.isArray(item)) {\n\t\t\t\treturnData.push(...item.map((entry) => rowToExecutionData(entry)));\n\t\t\t} else if (typeof item === 'object') {\n\t\t\t\treturnData.push(rowToExecutionData(item));\n\t\t\t}\n\t\t}\n\n\t\tif (!returnData.length) {\n\t\t\treturnData.push({ json: { success: true } });\n\t\t}\n\t} catch (error) {\n\t\tprepareError(node, error as Error);\n\t} finally {\n\t\tdelete alasql.databases[node.id];\n\t}\n\n\treturn [returnData];\n}\n\nexport async function execute(\n\tthis: IExecuteFunctions,\n\tinputsData: INodeExecutionData[][],\n): Promise<INodeExecutionData[][]> {\n\tconst node = this.getNode();\n\tconst returnData: INodeExecutionData[] = [];\n\tconst pairedItem: IPairedItemData[] = [];\n\n\tlet query = this.getNodeParameter('query', 0) as string;\n\n\tfor (const resolvable of getResolvables(query)) {\n\t\tquery = query.replace(resolvable, this.evaluateExpression(resolvable, 0) as string);\n\t}\n\n\tconst isSelectQuery = node.typeVersion >= 3.1 ? query.toLowerCase().startsWith('select') : false;\n\n\tif (isSelectQuery) {\n\t\ttry {\n\t\t\treturn await executeSelectWithMappedPairedItems(node, inputsData, query);\n\t\t} catch (error) {\n\t\t\tContainer.get(ErrorReporter).error(error, {\n\t\t\t\textra: {\n\t\t\t\t\tnodeName: node.name,\n\t\t\t\t\tnodeType: node.type,\n\t\t\t\t\tnodeVersion: node.typeVersion,\n\t\t\t\t\tworkflowId: this.getWorkflow().id,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t}\n\n\tconst db: typeof Database = new (alasql as any).Database(node.id);\n\n\ttry {\n\t\tfor (let i = 0; i < inputsData.length; i++) {\n\t\t\tconst inputData = inputsData[i];\n\n\t\t\tinputData.forEach((item, index) => {\n\t\t\t\tif (item.pairedItem === undefined) {\n\t\t\t\t\titem.pairedItem = index;\n\t\t\t\t}\n\n\t\t\t\tif (typeof item.pairedItem === 'number') {\n\t\t\t\t\tpairedItem.push({\n\t\t\t\t\t\titem: item.pairedItem,\n\t\t\t\t\t\tinput: i,\n\t\t\t\t\t});\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (Array.isArray(item.pairedItem)) {\n\t\t\t\t\tconst pairedItems = item.pairedItem\n\t\t\t\t\t\t.filter((p) => p !== undefined)\n\t\t\t\t\t\t.map((p) => (typeof p === 'number' ? { item: p } : p))\n\t\t\t\t\t\t.map((p) => {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\titem: p.item,\n\t\t\t\t\t\t\t\tinput: i,\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t});\n\t\t\t\t\tpairedItem.push(...pairedItems);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tpairedItem.push({\n\t\t\t\t\titem: item.pairedItem.item,\n\t\t\t\t\tinput: i,\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tdb.exec(`CREATE TABLE input${i + 1}`);\n\t\t\tdb.tables[`input${i + 1}`].data = inputData.map((entry) => entry.json);\n\t\t}\n\t} catch (error) {\n\t\tthrow new NodeOperationError(node, error, {\n\t\t\tmessage: 'Issue while creating table from',\n\t\t\tdescription: error.message,\n\t\t\titemIndex: 0,\n\t\t});\n\t}\n\n\ttry {\n\t\tconst result: IDataObject[] = db.exec(query);\n\n\t\tfor (const item of result) {\n\t\t\tif (Array.isArray(item)) {\n\t\t\t\treturnData.push(...item.map((json) => ({ json, pairedItem })));\n\t\t\t} else if (typeof item === 'object') {\n\t\t\t\treturnData.push({ json: item, pairedItem });\n\t\t\t}\n\t\t}\n\n\t\tif (!returnData.length) {\n\t\t\treturnData.push({ json: { success: true }, pairedItem });\n\t\t}\n\t} catch (error) {\n\t\tprepareError(node, error as Error);\n\t} finally {\n\t\tdelete alasql.databases[node.id];\n\t}\n\n\treturn [returnData];\n}\n"],"mappings":"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","names":["alasql"]}