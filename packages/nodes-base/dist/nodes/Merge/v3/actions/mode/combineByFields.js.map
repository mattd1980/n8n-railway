{"version":3,"sources":["../../../../../../nodes/Merge/v3/actions/mode/combineByFields.ts"],"sourcesContent":["import type {\n\tIDataObject,\n\tIExecuteFunctions,\n\tINodeExecutionData,\n\tINodeProperties,\n} from 'n8n-workflow';\n\nimport { updateDisplayOptions } from '@utils/utilities';\n\nimport { clashHandlingProperties, fuzzyCompareProperty } from '../../helpers/descriptions';\nimport type {\n\tClashResolveOptions,\n\tMatchFieldsJoinMode,\n\tMatchFieldsOptions,\n\tMatchFieldsOutput,\n} from '../../helpers/interfaces';\nimport {\n\taddSourceField,\n\taddSuffixToEntriesKeys,\n\tcheckInput,\n\tcheckMatchFieldsInput,\n\tfindMatches,\n\tmergeMatched,\n} from '../../helpers/utils';\n\nconst multipleMatchesProperty: INodeProperties = {\n\tdisplayName: 'Multiple Matches',\n\tname: 'multipleMatches',\n\ttype: 'options',\n\tdefault: 'all',\n\toptions: [\n\t\t{\n\t\t\tname: 'Include All Matches',\n\t\t\tvalue: 'all',\n\t\t\tdescription: 'Output multiple items if there are multiple matches',\n\t\t},\n\t\t{\n\t\t\tname: 'Include First Match Only',\n\t\t\tvalue: 'first',\n\t\t\tdescription: 'Only ever output a single item per match',\n\t\t},\n\t],\n};\n\nexport const properties: INodeProperties[] = [\n\t{\n\t\tdisplayName: 'Fields To Match Have Different Names',\n\t\tname: 'advanced',\n\t\ttype: 'boolean',\n\t\tdefault: false,\n\t\tdescription: 'Whether name(s) of field to match are different in input 1 and input 2',\n\t},\n\t{\n\t\tdisplayName: 'Fields to Match',\n\t\tname: 'fieldsToMatchString',\n\t\ttype: 'string',\n\t\t// eslint-disable-next-line n8n-nodes-base/node-param-placeholder-miscased-id\n\t\tplaceholder: 'e.g. id, name',\n\t\tdefault: '',\n\t\trequiresDataPath: 'multiple',\n\t\tdescription: 'Specify the fields to use for matching input items',\n\t\thint: 'Drag or type the input field name',\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tadvanced: [false],\n\t\t\t},\n\t\t},\n\t},\n\t{\n\t\tdisplayName: 'Fields to Match',\n\t\tname: 'mergeByFields',\n\t\ttype: 'fixedCollection',\n\t\tplaceholder: 'Add Fields to Match',\n\t\tdefault: { values: [{ field1: '', field2: '' }] },\n\t\ttypeOptions: {\n\t\t\tmultipleValues: true,\n\t\t},\n\t\tdescription: 'Specify the fields to use for matching input items',\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tadvanced: [true],\n\t\t\t},\n\t\t},\n\t\toptions: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Values',\n\t\t\t\tname: 'values',\n\t\t\t\tvalues: [\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Input 1 Field',\n\t\t\t\t\t\tname: 'field1',\n\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\t// eslint-disable-next-line n8n-nodes-base/node-param-placeholder-miscased-id\n\t\t\t\t\t\tplaceholder: 'e.g. id',\n\t\t\t\t\t\thint: 'Drag or type the input field name',\n\t\t\t\t\t\trequiresDataPath: 'single',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Input 2 Field',\n\t\t\t\t\t\tname: 'field2',\n\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\t// eslint-disable-next-line n8n-nodes-base/node-param-placeholder-miscased-id\n\t\t\t\t\t\tplaceholder: 'e.g. id',\n\t\t\t\t\t\thint: 'Drag or type the input field name',\n\t\t\t\t\t\trequiresDataPath: 'single',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t],\n\t},\n\t{\n\t\tdisplayName: 'Output Type',\n\t\tname: 'joinMode',\n\t\ttype: 'options',\n\t\tdescription: 'How to select the items to send to output',\n\t\t// eslint-disable-next-line n8n-nodes-base/node-param-options-type-unsorted-items\n\t\toptions: [\n\t\t\t{\n\t\t\t\tname: 'Keep Matches',\n\t\t\t\tvalue: 'keepMatches',\n\t\t\t\tdescription: 'Items that match, merged together (inner join)',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Keep Non-Matches',\n\t\t\t\tvalue: 'keepNonMatches',\n\t\t\t\tdescription: \"Items that don't match\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Keep Everything',\n\t\t\t\tvalue: 'keepEverything',\n\t\t\t\tdescription: \"Items that match merged together, plus items that don't match (outer join)\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Enrich Input 1',\n\t\t\t\tvalue: 'enrichInput1',\n\t\t\t\tdescription: 'All of input 1, with data from input 2 added in (left join)',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Enrich Input 2',\n\t\t\t\tvalue: 'enrichInput2',\n\t\t\t\tdescription: 'All of input 2, with data from input 1 added in (right join)',\n\t\t\t},\n\t\t],\n\t\tdefault: 'keepMatches',\n\t},\n\t{\n\t\tdisplayName: 'Output Data From',\n\t\tname: 'outputDataFrom',\n\t\ttype: 'options',\n\t\toptions: [\n\t\t\t{\n\t\t\t\tname: 'Both Inputs Merged Together',\n\t\t\t\tvalue: 'both',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Input 1',\n\t\t\t\tvalue: 'input1',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Input 2',\n\t\t\t\tvalue: 'input2',\n\t\t\t},\n\t\t],\n\t\tdefault: 'both',\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tjoinMode: ['keepMatches'],\n\t\t\t},\n\t\t},\n\t},\n\t{\n\t\tdisplayName: 'Output Data From',\n\t\tname: 'outputDataFrom',\n\t\ttype: 'options',\n\t\toptions: [\n\t\t\t{\n\t\t\t\tname: 'Both Inputs Appended Together',\n\t\t\t\tvalue: 'both',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Input 1',\n\t\t\t\tvalue: 'input1',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Input 2',\n\t\t\t\tvalue: 'input2',\n\t\t\t},\n\t\t],\n\t\tdefault: 'both',\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tjoinMode: ['keepNonMatches'],\n\t\t\t},\n\t\t},\n\t},\n\t{\n\t\tdisplayName: 'Options',\n\t\tname: 'options',\n\t\ttype: 'collection',\n\t\tplaceholder: 'Add option',\n\t\tdefault: {},\n\t\toptions: [\n\t\t\t{\n\t\t\t\t...clashHandlingProperties,\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\thide: {\n\t\t\t\t\t\t'/joinMode': ['keepMatches', 'keepNonMatches'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t...clashHandlingProperties,\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\t'/joinMode': ['keepMatches'],\n\t\t\t\t\t\t'/outputDataFrom': ['both'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Disable Dot Notation',\n\t\t\t\tname: 'disableDotNotation',\n\t\t\t\ttype: 'boolean',\n\t\t\t\tdefault: false,\n\t\t\t\tdescription:\n\t\t\t\t\t'Whether to disallow referencing child fields using `parent.child` in the field name',\n\t\t\t},\n\t\t\tfuzzyCompareProperty,\n\t\t\t{\n\t\t\t\t...multipleMatchesProperty,\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\t'/joinMode': ['keepMatches'],\n\t\t\t\t\t\t'/outputDataFrom': ['both'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t...multipleMatchesProperty,\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\t'/joinMode': ['enrichInput1', 'enrichInput2', 'keepEverything'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t},\n];\n\nconst displayOptions = {\n\tshow: {\n\t\tmode: ['combine'],\n\t\tcombineBy: ['combineByFields'],\n\t},\n};\n\nexport const description = updateDisplayOptions(displayOptions, properties);\n\nexport async function execute(\n\tthis: IExecuteFunctions,\n\tinputsData: INodeExecutionData[][],\n): Promise<INodeExecutionData[][]> {\n\tconst returnData: INodeExecutionData[] = [];\n\tconst advanced = this.getNodeParameter('advanced', 0) as boolean;\n\tlet matchFields;\n\n\tif (advanced) {\n\t\tmatchFields = this.getNodeParameter('mergeByFields.values', 0, []) as IDataObject[];\n\t} else {\n\t\tmatchFields = (this.getNodeParameter('fieldsToMatchString', 0, '') as string)\n\t\t\t.split(',')\n\t\t\t.map((f) => {\n\t\t\t\tconst field = f.trim();\n\t\t\t\treturn { field1: field, field2: field };\n\t\t\t});\n\t}\n\n\tmatchFields = checkMatchFieldsInput(matchFields);\n\n\tconst joinMode = this.getNodeParameter('joinMode', 0) as MatchFieldsJoinMode;\n\tconst outputDataFrom = this.getNodeParameter('outputDataFrom', 0, 'both') as MatchFieldsOutput;\n\tconst options = this.getNodeParameter('options', 0, {}) as MatchFieldsOptions;\n\n\toptions.joinMode = joinMode;\n\toptions.outputDataFrom = outputDataFrom;\n\n\tconst nodeVersion = this.getNode().typeVersion;\n\n\tlet input1 = inputsData[0];\n\tlet input2 = inputsData[1];\n\n\tif (nodeVersion < 2.1) {\n\t\tinput1 = checkInput(\n\t\t\tthis.getInputData(0),\n\t\t\tmatchFields.map((pair) => pair.field1),\n\t\t\toptions.disableDotNotation || false,\n\t\t\t'Input 1',\n\t\t);\n\t\tif (!input1) return [returnData];\n\n\t\tinput2 = checkInput(\n\t\t\tthis.getInputData(1),\n\t\t\tmatchFields.map((pair) => pair.field2),\n\t\t\toptions.disableDotNotation || false,\n\t\t\t'Input 2',\n\t\t);\n\t} else {\n\t\tif (!input1) return [returnData];\n\t}\n\n\tif (input1.length === 0 || input2.length === 0) {\n\t\tif (!input1.length && joinMode === 'keepNonMatches' && outputDataFrom === 'input1')\n\t\t\treturn [returnData];\n\t\tif (!input2.length && joinMode === 'keepNonMatches' && outputDataFrom === 'input2')\n\t\t\treturn [returnData];\n\n\t\tif (joinMode === 'keepMatches') {\n\t\t\t// Stop the execution\n\t\t\treturn [];\n\t\t} else if (joinMode === 'enrichInput1' && input1.length === 0) {\n\t\t\t// No data to enrich so stop\n\t\t\treturn [];\n\t\t} else if (joinMode === 'enrichInput2' && input2.length === 0) {\n\t\t\t// No data to enrich so stop\n\t\t\treturn [];\n\t\t} else {\n\t\t\t// Return the data of any of the inputs that contains data\n\t\t\treturn [[...input1, ...input2]];\n\t\t}\n\t}\n\n\tif (!input1) return [returnData];\n\n\tif (!input2 || !matchFields.length) {\n\t\tif (\n\t\t\tjoinMode === 'keepMatches' ||\n\t\t\tjoinMode === 'keepEverything' ||\n\t\t\tjoinMode === 'enrichInput2'\n\t\t) {\n\t\t\treturn [returnData];\n\t\t}\n\t\treturn [input1];\n\t}\n\n\tconst matches = findMatches(input1, input2, matchFields, options);\n\n\tif (joinMode === 'keepMatches' || joinMode === 'keepEverything') {\n\t\tlet output: INodeExecutionData[] = [];\n\t\tconst clashResolveOptions = this.getNodeParameter(\n\t\t\t'options.clashHandling.values',\n\t\t\t0,\n\t\t\t{},\n\t\t) as ClashResolveOptions;\n\n\t\tif (outputDataFrom === 'input1') {\n\t\t\toutput = matches.matched.map((match) => match.entry);\n\t\t}\n\t\tif (outputDataFrom === 'input2') {\n\t\t\toutput = matches.matched2;\n\t\t}\n\t\tif (outputDataFrom === 'both') {\n\t\t\toutput = mergeMatched(matches.matched, clashResolveOptions);\n\t\t}\n\n\t\tif (joinMode === 'keepEverything') {\n\t\t\tlet unmatched1 = matches.unmatched1;\n\t\t\tlet unmatched2 = matches.unmatched2;\n\t\t\tif (clashResolveOptions.resolveClash === 'addSuffix') {\n\t\t\t\tunmatched1 = addSuffixToEntriesKeys(unmatched1, '1');\n\t\t\t\tunmatched2 = addSuffixToEntriesKeys(unmatched2, '2');\n\t\t\t}\n\t\t\toutput = [...output, ...unmatched1, ...unmatched2];\n\t\t}\n\n\t\treturnData.push(...output);\n\t}\n\n\tif (joinMode === 'keepNonMatches') {\n\t\tif (outputDataFrom === 'input1') {\n\t\t\treturn [matches.unmatched1];\n\t\t}\n\t\tif (outputDataFrom === 'input2') {\n\t\t\treturn [matches.unmatched2];\n\t\t}\n\t\tif (outputDataFrom === 'both') {\n\t\t\tlet output: INodeExecutionData[] = [];\n\t\t\toutput = output.concat(addSourceField(matches.unmatched1, 'input1'));\n\t\t\toutput = output.concat(addSourceField(matches.unmatched2, 'input2'));\n\t\t\treturn [output];\n\t\t}\n\t}\n\n\tif (joinMode === 'enrichInput1' || joinMode === 'enrichInput2') {\n\t\tconst clashResolveOptions = this.getNodeParameter(\n\t\t\t'options.clashHandling.values',\n\t\t\t0,\n\t\t\t{},\n\t\t) as ClashResolveOptions;\n\n\t\tconst mergedEntries = mergeMatched(matches.matched, clashResolveOptions, joinMode);\n\n\t\tif (joinMode === 'enrichInput1') {\n\t\t\tif (clashResolveOptions.resolveClash === 'addSuffix') {\n\t\t\t\treturnData.push(...mergedEntries, ...addSuffixToEntriesKeys(matches.unmatched1, '1'));\n\t\t\t} else {\n\t\t\t\treturnData.push(...mergedEntries, ...matches.unmatched1);\n\t\t\t}\n\t\t} else {\n\t\t\tif (clashResolveOptions.resolveClash === 'addSuffix') {\n\t\t\t\treturnData.push(...mergedEntries, ...addSuffixToEntriesKeys(matches.unmatched2, '2'));\n\t\t\t} else {\n\t\t\t\treturnData.push(...mergedEntries, ...matches.unmatched2);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn [returnData];\n}\n"],"mappings":"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","names":[]}