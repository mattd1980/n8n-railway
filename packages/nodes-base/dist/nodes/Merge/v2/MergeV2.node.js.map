{"version":3,"sources":["../../../../nodes/Merge/v2/MergeV2.node.ts"],"sourcesContent":["import merge from 'lodash/merge';\nimport {\n\ttype IExecuteFunctions,\n\ttype IDataObject,\n\ttype INodeExecutionData,\n\ttype INodeType,\n\ttype INodeTypeBaseDescription,\n\ttype INodeTypeDescription,\n\ttype IPairedItemData,\n\tNodeConnectionTypes,\n} from 'n8n-workflow';\n\nimport { preparePairedItemDataArray } from '@utils/utilities';\n\nimport { optionsDescription } from './descriptions';\nimport type {\n\tClashResolveOptions,\n\tMatchFieldsJoinMode,\n\tMatchFieldsOptions,\n\tMatchFieldsOutput,\n} from './interfaces';\nimport {\n\taddSourceField,\n\taddSuffixToEntriesKeys,\n\tcheckInput,\n\tcheckMatchFieldsInput,\n\tfindMatches,\n\tmergeMatched,\n\tselectMergeMethod,\n} from './utils';\n\nexport class MergeV2 implements INodeType {\n\tdescription: INodeTypeDescription;\n\n\tconstructor(baseDescription: INodeTypeBaseDescription) {\n\t\tthis.description = {\n\t\t\t...baseDescription,\n\t\t\tversion: [2, 2.1],\n\t\t\tdefaults: {\n\t\t\t\tname: 'Merge',\n\t\t\t},\n\n\t\t\tinputs: [NodeConnectionTypes.Main, NodeConnectionTypes.Main],\n\t\t\toutputs: [NodeConnectionTypes.Main],\n\t\t\tinputNames: ['Input 1', 'Input 2'],\n\t\t\t// If mode is chooseBranch data from both branches is required\n\t\t\t// to continue, else data from any input suffices\n\t\t\trequiredInputs: '={{ $parameter[\"mode\"] === \"chooseBranch\" ? [0, 1] : 1 }}',\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'Mode',\n\t\t\t\t\tname: 'mode',\n\t\t\t\t\ttype: 'options',\n\t\t\t\t\toptions: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'Append',\n\t\t\t\t\t\t\tvalue: 'append',\n\t\t\t\t\t\t\tdescription: 'All items of input 1, then all items of input 2',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'Combine',\n\t\t\t\t\t\t\tvalue: 'combine',\n\t\t\t\t\t\t\tdescription: 'Merge matching items together',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'Choose Branch',\n\t\t\t\t\t\t\tvalue: 'chooseBranch',\n\t\t\t\t\t\t\tdescription: 'Output input data, without modifying it',\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t\tdefault: 'append',\n\t\t\t\t\tdescription: 'How data of branches should be merged',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'Combination Mode',\n\t\t\t\t\tname: 'combinationMode',\n\t\t\t\t\ttype: 'options',\n\t\t\t\t\toptions: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'Merge By Fields',\n\t\t\t\t\t\t\tvalue: 'mergeByFields',\n\t\t\t\t\t\t\tdescription: 'Combine items with the same field values',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'Merge By Position',\n\t\t\t\t\t\t\tvalue: 'mergeByPosition',\n\t\t\t\t\t\t\tdescription: 'Combine items based on their order',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'Multiplex',\n\t\t\t\t\t\t\tvalue: 'multiplex',\n\t\t\t\t\t\t\tdescription: 'All possible item combinations (cross join)',\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t\tdefault: 'mergeByFields',\n\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\tmode: ['combine'],\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t// mergeByFields ------------------------------------------------------------------\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'Fields to Match',\n\t\t\t\t\tname: 'mergeByFields',\n\t\t\t\t\ttype: 'fixedCollection',\n\t\t\t\t\tplaceholder: 'Add Fields to Match',\n\t\t\t\t\tdefault: { values: [{ field1: '', field2: '' }] },\n\t\t\t\t\ttypeOptions: {\n\t\t\t\t\t\tmultipleValues: true,\n\t\t\t\t\t},\n\t\t\t\t\toptions: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tdisplayName: 'Values',\n\t\t\t\t\t\t\tname: 'values',\n\t\t\t\t\t\t\tvalues: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tdisplayName: 'Input 1 Field',\n\t\t\t\t\t\t\t\t\tname: 'field1',\n\t\t\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\t\t\t\t// eslint-disable-next-line n8n-nodes-base/node-param-placeholder-miscased-id\n\t\t\t\t\t\t\t\t\tplaceholder: 'e.g. id',\n\t\t\t\t\t\t\t\t\thint: ' Enter the field name as text',\n\t\t\t\t\t\t\t\t\trequiresDataPath: 'single',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tdisplayName: 'Input 2 Field',\n\t\t\t\t\t\t\t\t\tname: 'field2',\n\t\t\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\t\t\t\t// eslint-disable-next-line n8n-nodes-base/node-param-placeholder-miscased-id\n\t\t\t\t\t\t\t\t\tplaceholder: 'e.g. id',\n\t\t\t\t\t\t\t\t\thint: ' Enter the field name as text',\n\t\t\t\t\t\t\t\t\trequiresDataPath: 'single',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\tmode: ['combine'],\n\t\t\t\t\t\t\tcombinationMode: ['mergeByFields'],\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'Output Type',\n\t\t\t\t\tname: 'joinMode',\n\t\t\t\t\ttype: 'options',\n\t\t\t\t\t// eslint-disable-next-line n8n-nodes-base/node-param-options-type-unsorted-items\n\t\t\t\t\toptions: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'Keep Matches',\n\t\t\t\t\t\t\tvalue: 'keepMatches',\n\t\t\t\t\t\t\tdescription: 'Items that match, merged together (inner join)',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'Keep Non-Matches',\n\t\t\t\t\t\t\tvalue: 'keepNonMatches',\n\t\t\t\t\t\t\tdescription: \"Items that don't match\",\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'Keep Everything',\n\t\t\t\t\t\t\tvalue: 'keepEverything',\n\t\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t\t\"Items that match merged together, plus items that don't match (outer join)\",\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'Enrich Input 1',\n\t\t\t\t\t\t\tvalue: 'enrichInput1',\n\t\t\t\t\t\t\tdescription: 'All of input 1, with data from input 2 added in (left join)',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'Enrich Input 2',\n\t\t\t\t\t\t\tvalue: 'enrichInput2',\n\t\t\t\t\t\t\tdescription: 'All of input 2, with data from input 1 added in (right join)',\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t\tdefault: 'keepMatches',\n\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\tmode: ['combine'],\n\t\t\t\t\t\t\tcombinationMode: ['mergeByFields'],\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'Output Data From',\n\t\t\t\t\tname: 'outputDataFrom',\n\t\t\t\t\ttype: 'options',\n\t\t\t\t\toptions: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'Both Inputs Merged Together',\n\t\t\t\t\t\t\tvalue: 'both',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'Input 1',\n\t\t\t\t\t\t\tvalue: 'input1',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'Input 2',\n\t\t\t\t\t\t\tvalue: 'input2',\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t\tdefault: 'both',\n\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\tmode: ['combine'],\n\t\t\t\t\t\t\tcombinationMode: ['mergeByFields'],\n\t\t\t\t\t\t\tjoinMode: ['keepMatches'],\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'Output Data From',\n\t\t\t\t\tname: 'outputDataFrom',\n\t\t\t\t\ttype: 'options',\n\t\t\t\t\toptions: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'Both Inputs Appended Together',\n\t\t\t\t\t\t\tvalue: 'both',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'Input 1',\n\t\t\t\t\t\t\tvalue: 'input1',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'Input 2',\n\t\t\t\t\t\t\tvalue: 'input2',\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t\tdefault: 'both',\n\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\tmode: ['combine'],\n\t\t\t\t\t\t\tcombinationMode: ['mergeByFields'],\n\t\t\t\t\t\t\tjoinMode: ['keepNonMatches'],\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\n\t\t\t\t// chooseBranch -----------------------------------------------------------------\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'Output Type',\n\t\t\t\t\tname: 'chooseBranchMode',\n\t\t\t\t\ttype: 'options',\n\t\t\t\t\toptions: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'Wait for Both Inputs to Arrive',\n\t\t\t\t\t\t\tvalue: 'waitForBoth',\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t\tdefault: 'waitForBoth',\n\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\tmode: ['chooseBranch'],\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'Output',\n\t\t\t\t\tname: 'output',\n\t\t\t\t\ttype: 'options',\n\t\t\t\t\toptions: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'Input 1 Data',\n\t\t\t\t\t\t\tvalue: 'input1',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'Input 2 Data',\n\t\t\t\t\t\t\tvalue: 'input2',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'A Single, Empty Item',\n\t\t\t\t\t\t\tvalue: 'empty',\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t\tdefault: 'input1',\n\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\tmode: ['chooseBranch'],\n\t\t\t\t\t\t\tchooseBranchMode: ['waitForBoth'],\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\n\t\t\t\t...optionsDescription,\n\t\t\t],\n\t\t};\n\t}\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t\tconst returnData: INodeExecutionData[] = [];\n\n\t\tconst mode = this.getNodeParameter('mode', 0) as string;\n\n\t\tif (mode === 'append') {\n\t\t\tfor (let i = 0; i < 2; i++) {\n\t\t\t\treturnData.push.apply(returnData, this.getInputData(i));\n\t\t\t}\n\t\t}\n\n\t\tif (mode === 'combine') {\n\t\t\tconst combinationMode = this.getNodeParameter('combinationMode', 0) as string;\n\n\t\t\tif (combinationMode === 'multiplex') {\n\t\t\t\tconst clashHandling = this.getNodeParameter(\n\t\t\t\t\t'options.clashHandling.values',\n\t\t\t\t\t0,\n\t\t\t\t\t{},\n\t\t\t\t) as ClashResolveOptions;\n\n\t\t\t\tlet input1 = this.getInputData(0);\n\t\t\t\tlet input2 = this.getInputData(1);\n\n\t\t\t\tif (clashHandling.resolveClash === 'preferInput1') {\n\t\t\t\t\t[input1, input2] = [input2, input1];\n\t\t\t\t}\n\n\t\t\t\tif (clashHandling.resolveClash === 'addSuffix') {\n\t\t\t\t\tinput1 = addSuffixToEntriesKeys(input1, '1');\n\t\t\t\t\tinput2 = addSuffixToEntriesKeys(input2, '2');\n\t\t\t\t}\n\n\t\t\t\tconst mergeIntoSingleObject = selectMergeMethod(clashHandling);\n\n\t\t\t\tif (!input1 || !input2) {\n\t\t\t\t\treturn [returnData];\n\t\t\t\t}\n\n\t\t\t\tlet entry1: INodeExecutionData;\n\t\t\t\tlet entry2: INodeExecutionData;\n\n\t\t\t\tfor (entry1 of input1) {\n\t\t\t\t\tfor (entry2 of input2) {\n\t\t\t\t\t\treturnData.push({\n\t\t\t\t\t\t\tjson: {\n\t\t\t\t\t\t\t\t...mergeIntoSingleObject(entry1.json, entry2.json),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tbinary: {\n\t\t\t\t\t\t\t\t...merge({}, entry1.binary, entry2.binary),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tpairedItem: [\n\t\t\t\t\t\t\t\tentry1.pairedItem as IPairedItemData,\n\t\t\t\t\t\t\t\tentry2.pairedItem as IPairedItemData,\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn [returnData];\n\t\t\t}\n\n\t\t\tif (combinationMode === 'mergeByPosition') {\n\t\t\t\tconst clashHandling = this.getNodeParameter(\n\t\t\t\t\t'options.clashHandling.values',\n\t\t\t\t\t0,\n\t\t\t\t\t{},\n\t\t\t\t) as ClashResolveOptions;\n\t\t\t\tconst includeUnpaired = this.getNodeParameter(\n\t\t\t\t\t'options.includeUnpaired',\n\t\t\t\t\t0,\n\t\t\t\t\tfalse,\n\t\t\t\t) as boolean;\n\n\t\t\t\tlet input1 = this.getInputData(0);\n\t\t\t\tlet input2 = this.getInputData(1);\n\n\t\t\t\tif (input1?.length === 0 || input2?.length === 0) {\n\t\t\t\t\t// If data of any input is missing, return the data of\n\t\t\t\t\t// the input that contains data\n\t\t\t\t\treturn [[...input1, ...input2]];\n\t\t\t\t}\n\n\t\t\t\tif (clashHandling.resolveClash === 'preferInput1') {\n\t\t\t\t\t[input1, input2] = [input2, input1];\n\t\t\t\t}\n\n\t\t\t\tif (clashHandling.resolveClash === 'addSuffix') {\n\t\t\t\t\tinput1 = addSuffixToEntriesKeys(input1, '1');\n\t\t\t\t\tinput2 = addSuffixToEntriesKeys(input2, '2');\n\t\t\t\t}\n\n\t\t\t\tif (input1 === undefined || input1.length === 0) {\n\t\t\t\t\tif (includeUnpaired) {\n\t\t\t\t\t\treturn [input2];\n\t\t\t\t\t}\n\t\t\t\t\treturn [returnData];\n\t\t\t\t}\n\n\t\t\t\tif (input2 === undefined || input2.length === 0) {\n\t\t\t\t\tif (includeUnpaired) {\n\t\t\t\t\t\treturn [input1];\n\t\t\t\t\t}\n\t\t\t\t\treturn [returnData];\n\t\t\t\t}\n\n\t\t\t\tlet numEntries: number;\n\t\t\t\tif (includeUnpaired) {\n\t\t\t\t\tnumEntries = Math.max(input1.length, input2.length);\n\t\t\t\t} else {\n\t\t\t\t\tnumEntries = Math.min(input1.length, input2.length);\n\t\t\t\t}\n\n\t\t\t\tconst mergeIntoSingleObject = selectMergeMethod(clashHandling);\n\n\t\t\t\tfor (let i = 0; i < numEntries; i++) {\n\t\t\t\t\tif (i >= input1.length) {\n\t\t\t\t\t\treturnData.push(input2[i]);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tif (i >= input2.length) {\n\t\t\t\t\t\treturnData.push(input1[i]);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst entry1 = input1[i];\n\t\t\t\t\tconst entry2 = input2[i];\n\n\t\t\t\t\treturnData.push({\n\t\t\t\t\t\tjson: {\n\t\t\t\t\t\t\t...mergeIntoSingleObject(entry1.json, entry2.json),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tbinary: {\n\t\t\t\t\t\t\t...merge({}, entry1.binary, entry2.binary),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tpairedItem: [\n\t\t\t\t\t\t\tentry1.pairedItem as IPairedItemData,\n\t\t\t\t\t\t\tentry2.pairedItem as IPairedItemData,\n\t\t\t\t\t\t],\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (combinationMode === 'mergeByFields') {\n\t\t\t\tconst matchFields = checkMatchFieldsInput(\n\t\t\t\t\tthis.getNodeParameter('mergeByFields.values', 0, []) as IDataObject[],\n\t\t\t\t);\n\n\t\t\t\tconst joinMode = this.getNodeParameter('joinMode', 0) as MatchFieldsJoinMode;\n\t\t\t\tconst outputDataFrom = this.getNodeParameter(\n\t\t\t\t\t'outputDataFrom',\n\t\t\t\t\t0,\n\t\t\t\t\t'both',\n\t\t\t\t) as MatchFieldsOutput;\n\t\t\t\tconst options = this.getNodeParameter('options', 0, {}) as MatchFieldsOptions;\n\n\t\t\t\toptions.joinMode = joinMode;\n\t\t\t\toptions.outputDataFrom = outputDataFrom;\n\n\t\t\t\tconst nodeVersion = this.getNode().typeVersion;\n\n\t\t\t\tlet input1 = this.getInputData(0);\n\t\t\t\tlet input2 = this.getInputData(1);\n\n\t\t\t\tif (nodeVersion < 2.1) {\n\t\t\t\t\tinput1 = checkInput(\n\t\t\t\t\t\tthis.getInputData(0),\n\t\t\t\t\t\tmatchFields.map((pair) => pair.field1),\n\t\t\t\t\t\toptions.disableDotNotation || false,\n\t\t\t\t\t\t'Input 1',\n\t\t\t\t\t);\n\t\t\t\t\tif (!input1) return [returnData];\n\n\t\t\t\t\tinput2 = checkInput(\n\t\t\t\t\t\tthis.getInputData(1),\n\t\t\t\t\t\tmatchFields.map((pair) => pair.field2),\n\t\t\t\t\t\toptions.disableDotNotation || false,\n\t\t\t\t\t\t'Input 2',\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tif (!input1) return [returnData];\n\t\t\t\t}\n\n\t\t\t\tif (input1?.length === 0 || input2?.length === 0) {\n\t\t\t\t\tif (!input1?.length && joinMode === 'keepNonMatches' && outputDataFrom === 'input1')\n\t\t\t\t\t\treturn [returnData];\n\t\t\t\t\tif (!input2?.length && joinMode === 'keepNonMatches' && outputDataFrom === 'input2')\n\t\t\t\t\t\treturn [returnData];\n\n\t\t\t\t\tif (joinMode === 'keepMatches') {\n\t\t\t\t\t\t// Stop the execution\n\t\t\t\t\t\treturn [[]];\n\t\t\t\t\t} else if (joinMode === 'enrichInput1' && input1?.length === 0) {\n\t\t\t\t\t\t// No data to enrich so stop\n\t\t\t\t\t\treturn [[]];\n\t\t\t\t\t} else if (joinMode === 'enrichInput2' && input2?.length === 0) {\n\t\t\t\t\t\t// No data to enrich so stop\n\t\t\t\t\t\treturn [[]];\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Return the data of any of the inputs that contains data\n\t\t\t\t\t\treturn [[...input1, ...input2]];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (!input1) return [returnData];\n\n\t\t\t\tif (!input2 || !matchFields.length) {\n\t\t\t\t\tif (\n\t\t\t\t\t\tjoinMode === 'keepMatches' ||\n\t\t\t\t\t\tjoinMode === 'keepEverything' ||\n\t\t\t\t\t\tjoinMode === 'enrichInput2'\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn [returnData];\n\t\t\t\t\t}\n\t\t\t\t\treturn [input1];\n\t\t\t\t}\n\n\t\t\t\tconst matches = findMatches(input1, input2, matchFields, options);\n\n\t\t\t\tif (joinMode === 'keepMatches' || joinMode === 'keepEverything') {\n\t\t\t\t\tlet output: INodeExecutionData[] = [];\n\t\t\t\t\tconst clashResolveOptions = this.getNodeParameter(\n\t\t\t\t\t\t'options.clashHandling.values',\n\t\t\t\t\t\t0,\n\t\t\t\t\t\t{},\n\t\t\t\t\t) as ClashResolveOptions;\n\n\t\t\t\t\tif (outputDataFrom === 'input1') {\n\t\t\t\t\t\toutput = matches.matched.map((match) => match.entry);\n\t\t\t\t\t}\n\t\t\t\t\tif (outputDataFrom === 'input2') {\n\t\t\t\t\t\toutput = matches.matched2;\n\t\t\t\t\t}\n\t\t\t\t\tif (outputDataFrom === 'both') {\n\t\t\t\t\t\toutput = mergeMatched(matches.matched, clashResolveOptions);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (joinMode === 'keepEverything') {\n\t\t\t\t\t\tlet unmatched1 = matches.unmatched1;\n\t\t\t\t\t\tlet unmatched2 = matches.unmatched2;\n\t\t\t\t\t\tif (clashResolveOptions.resolveClash === 'addSuffix') {\n\t\t\t\t\t\t\tunmatched1 = addSuffixToEntriesKeys(unmatched1, '1');\n\t\t\t\t\t\t\tunmatched2 = addSuffixToEntriesKeys(unmatched2, '2');\n\t\t\t\t\t\t}\n\t\t\t\t\t\toutput = [...output, ...unmatched1, ...unmatched2];\n\t\t\t\t\t}\n\n\t\t\t\t\treturnData.push(...output);\n\t\t\t\t}\n\n\t\t\t\tif (joinMode === 'keepNonMatches') {\n\t\t\t\t\tif (outputDataFrom === 'input1') {\n\t\t\t\t\t\treturn [matches.unmatched1];\n\t\t\t\t\t}\n\t\t\t\t\tif (outputDataFrom === 'input2') {\n\t\t\t\t\t\treturn [matches.unmatched2];\n\t\t\t\t\t}\n\t\t\t\t\tif (outputDataFrom === 'both') {\n\t\t\t\t\t\tlet output: INodeExecutionData[] = [];\n\t\t\t\t\t\toutput = output.concat(addSourceField(matches.unmatched1, 'input1'));\n\t\t\t\t\t\toutput = output.concat(addSourceField(matches.unmatched2, 'input2'));\n\t\t\t\t\t\treturn [output];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (joinMode === 'enrichInput1' || joinMode === 'enrichInput2') {\n\t\t\t\t\tconst clashResolveOptions = this.getNodeParameter(\n\t\t\t\t\t\t'options.clashHandling.values',\n\t\t\t\t\t\t0,\n\t\t\t\t\t\t{},\n\t\t\t\t\t) as ClashResolveOptions;\n\n\t\t\t\t\tconst mergedEntries = mergeMatched(matches.matched, clashResolveOptions, joinMode);\n\n\t\t\t\t\tif (joinMode === 'enrichInput1') {\n\t\t\t\t\t\tif (clashResolveOptions.resolveClash === 'addSuffix') {\n\t\t\t\t\t\t\treturnData.push(...mergedEntries, ...addSuffixToEntriesKeys(matches.unmatched1, '1'));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturnData.push(...mergedEntries, ...matches.unmatched1);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (clashResolveOptions.resolveClash === 'addSuffix') {\n\t\t\t\t\t\t\treturnData.push(...mergedEntries, ...addSuffixToEntriesKeys(matches.unmatched2, '2'));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturnData.push(...mergedEntries, ...matches.unmatched2);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (mode === 'chooseBranch') {\n\t\t\tconst chooseBranchMode = this.getNodeParameter('chooseBranchMode', 0) as string;\n\n\t\t\tif (chooseBranchMode === 'waitForBoth') {\n\t\t\t\tconst output = this.getNodeParameter('output', 0) as string;\n\n\t\t\t\tif (output === 'input1') {\n\t\t\t\t\treturnData.push.apply(returnData, this.getInputData(0));\n\t\t\t\t}\n\t\t\t\tif (output === 'input2') {\n\t\t\t\t\treturnData.push.apply(returnData, this.getInputData(1));\n\t\t\t\t}\n\t\t\t\tif (output === 'empty') {\n\t\t\t\t\tconst pairedItem = [\n\t\t\t\t\t\t...this.getInputData(0).map((inputData) => inputData.pairedItem),\n\t\t\t\t\t\t...this.getInputData(1).map((inputData) => inputData.pairedItem),\n\t\t\t\t\t].flatMap(preparePairedItemDataArray);\n\n\t\t\t\t\treturnData.push({\n\t\t\t\t\t\tjson: {},\n\t\t\t\t\t\tpairedItem,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn [returnData];\n\t}\n}\n"],"mappings":"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","names":["merge"]}