{"version":3,"sources":["../../../../../nodes/Transform/RemoveDuplicates/v2/RemoveDuplicatesV2.node.ts"],"sourcesContent":["import { NodeConnectionTypes, NodeOperationError, tryToParseDateTime } from 'n8n-workflow';\nimport type {\n\tINodeTypeBaseDescription,\n\tIExecuteFunctions,\n\tINodeExecutionData,\n\tINodeType,\n\tINodeTypeDescription,\n\tDeduplicationScope,\n} from 'n8n-workflow';\n\nimport { removeDuplicatesNodeFields } from './RemoveDuplicatesV2.description';\nimport { removeDuplicateInputItems } from '../utils';\n\nconst versionDescription: INodeTypeDescription = {\n\tdisplayName: 'Remove Duplicates',\n\tname: 'removeDuplicates',\n\ticon: 'file:removeDuplicates.svg',\n\tgroup: ['transform'],\n\tsubtitle: '',\n\tversion: [2],\n\tdescription: 'Delete items with matching field values',\n\tdefaults: {\n\t\tname: 'Remove Duplicates',\n\t},\n\tinputs: [NodeConnectionTypes.Main],\n\toutputs: [NodeConnectionTypes.Main],\n\toutputNames: ['Kept', 'Discarded'],\n\thints: [\n\t\t{\n\t\t\tmessage: 'The dedupe key set in “Value to Dedupe On” has no value',\n\t\t\tdisplayCondition:\n\t\t\t\t'={{ $parameter[\"operation\"] === \"removeItemsSeenInPreviousExecutions\" && ($parameter[\"logic\"] === \"removeItemsWithAlreadySeenKeyValues\" && $parameter[\"dedupeValue\"] === undefined) || ($parameter[\"logic\"] === \"removeItemsUpToStoredIncrementalKey\" && $parameter[\"incrementalDedupeValue\"] === undefined) || ($parameter[\"logic\"] === \"removeItemsUpToStoredDate\" && $parameter[\"dateDedupeValue\"] === undefined) }}',\n\t\t\twhenToDisplay: 'beforeExecution',\n\t\t\tlocation: 'outputPane',\n\t\t},\n\t],\n\tproperties: [...removeDuplicatesNodeFields],\n};\nexport class RemoveDuplicatesV2 implements INodeType {\n\tdescription: INodeTypeDescription;\n\n\tconstructor(baseDescription: INodeTypeBaseDescription) {\n\t\tthis.description = {\n\t\t\t...baseDescription,\n\t\t\t...versionDescription,\n\t\t};\n\t}\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t\tconst items = this.getInputData();\n\t\tconst operation = this.getNodeParameter('operation', 0);\n\t\tconst returnData: INodeExecutionData[][] = [];\n\t\tconst DEFAULT_MAX_ENTRIES = 10000;\n\t\ttry {\n\t\t\tswitch (operation) {\n\t\t\t\tcase 'removeDuplicateInputItems': {\n\t\t\t\t\treturn removeDuplicateInputItems(this, items);\n\t\t\t\t}\n\t\t\t\tcase 'removeItemsSeenInPreviousExecutions': {\n\t\t\t\t\tconst logic = this.getNodeParameter('logic', 0);\n\t\t\t\t\tconst scope = this.getNodeParameter('options.scope', 0, 'node') as DeduplicationScope;\n\n\t\t\t\t\tif (logic === 'removeItemsWithAlreadySeenKeyValues') {\n\t\t\t\t\t\tif (!['node', 'workflow'].includes(scope)) {\n\t\t\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t\t\t`The scope '${scope}' is not supported. Please select either \"node\" or \"workflow\".`,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tlet checkValue: string;\n\t\t\t\t\t\tconst itemMapping: {\n\t\t\t\t\t\t\t[key: string]: INodeExecutionData[];\n\t\t\t\t\t\t} = {};\n\t\t\t\t\t\tfor (let itemIndex = 0; itemIndex < items.length; itemIndex++) {\n\t\t\t\t\t\t\tcheckValue = this.getNodeParameter('dedupeValue', itemIndex, '')?.toString() ?? '';\n\t\t\t\t\t\t\tif (itemMapping[checkValue]) {\n\t\t\t\t\t\t\t\titemMapping[checkValue].push(items[itemIndex]);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\titemMapping[checkValue] = [items[itemIndex]];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst maxEntries = this.getNodeParameter(\n\t\t\t\t\t\t\t'options.historySize',\n\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\tDEFAULT_MAX_ENTRIES,\n\t\t\t\t\t\t) as number;\n\t\t\t\t\t\tconst maxEntriesNum = Number(maxEntries);\n\n\t\t\t\t\t\tconst currentProcessedDataCount = await this.helpers.getProcessedDataCount(scope, {\n\t\t\t\t\t\t\tmode: 'entries',\n\t\t\t\t\t\t\tmaxEntries,\n\t\t\t\t\t\t});\n\t\t\t\t\t\tif (currentProcessedDataCount + items.length > maxEntriesNum) {\n\t\t\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t\t\t'The number of items to be processed exceeds the maximum history size. Please increase the history size or reduce the number of items to be processed.',\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst itemsProcessed = await this.helpers.checkProcessedAndRecord(\n\t\t\t\t\t\t\tObject.keys(itemMapping),\n\t\t\t\t\t\t\tscope,\n\t\t\t\t\t\t\t{ mode: 'entries', maxEntries },\n\t\t\t\t\t\t);\n\t\t\t\t\t\tconst processedDataCount = await this.helpers.getProcessedDataCount(scope, {\n\t\t\t\t\t\t\tmode: 'entries',\n\t\t\t\t\t\t\tmaxEntries,\n\t\t\t\t\t\t});\n\t\t\t\t\t\treturnData.push(\n\t\t\t\t\t\t\titemsProcessed.new\n\t\t\t\t\t\t\t\t.map((key) => {\n\t\t\t\t\t\t\t\t\treturn itemMapping[key];\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t.flat(),\n\t\t\t\t\t\t\titemsProcessed.processed\n\t\t\t\t\t\t\t\t.map((key) => {\n\t\t\t\t\t\t\t\t\treturn itemMapping[key];\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t.flat(),\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tif (maxEntriesNum > 0 && processedDataCount / maxEntriesNum > 0.5) {\n\t\t\t\t\t\t\tthis.addExecutionHints({\n\t\t\t\t\t\t\t\tmessage: `Some duplicates may be not be removed since you're approaching the maximum history size (${maxEntriesNum} items). You can raise this limit using the ‘history size’ option.`,\n\t\t\t\t\t\t\t\tlocation: 'outputPane',\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn returnData;\n\t\t\t\t\t} else if (logic === 'removeItemsUpToStoredIncrementalKey') {\n\t\t\t\t\t\tif (!['node', 'workflow'].includes(scope)) {\n\t\t\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t\t\t`The scope '${scope}' is not supported. Please select either \"node\" or \"workflow\".`,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tlet parsedIncrementalKey: number;\n\t\t\t\t\t\tconst itemMapping: {\n\t\t\t\t\t\t\t[key: string]: INodeExecutionData[];\n\t\t\t\t\t\t} = {};\n\n\t\t\t\t\t\tfor (let itemIndex = 0; itemIndex < items.length; itemIndex++) {\n\t\t\t\t\t\t\tconst incrementalKey = this.getNodeParameter('incrementalDedupeValue', itemIndex, '');\n\t\t\t\t\t\t\tif (!incrementalKey?.toString()) {\n\t\t\t\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t\t\t\t'The `Value to Dedupe` On is empty. Please provide a value.',\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tparsedIncrementalKey = Number(incrementalKey);\n\t\t\t\t\t\t\tif (isNaN(parsedIncrementalKey)) {\n\t\t\t\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t\t\t\t`The value '${incrementalKey}' is not a number. Please provide a number.`,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (itemMapping[parsedIncrementalKey]) {\n\t\t\t\t\t\t\t\titemMapping[parsedIncrementalKey].push(items[itemIndex]);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\titemMapping[parsedIncrementalKey] = [items[itemIndex]];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst itemsProcessed = await this.helpers.checkProcessedAndRecord(\n\t\t\t\t\t\t\tObject.keys(itemMapping),\n\t\t\t\t\t\t\tscope,\n\t\t\t\t\t\t\t{ mode: 'latestIncrementalKey' },\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\treturnData.push(\n\t\t\t\t\t\t\titemsProcessed.new\n\t\t\t\t\t\t\t\t.map((key) => {\n\t\t\t\t\t\t\t\t\treturn itemMapping[key];\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t.flat(),\n\t\t\t\t\t\t\titemsProcessed.processed\n\t\t\t\t\t\t\t\t.map((key) => {\n\t\t\t\t\t\t\t\t\treturn itemMapping[key];\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t.flat(),\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\treturn returnData;\n\t\t\t\t\t} else if (logic === 'removeItemsUpToStoredDate') {\n\t\t\t\t\t\tif (!['node', 'workflow'].includes(scope)) {\n\t\t\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t\t\t`The scope '${scope}' is not supported. Please select either \"node\" or \"workflow\".`,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tlet checkValue: string;\n\t\t\t\t\t\tconst itemMapping: {\n\t\t\t\t\t\t\t[key: string]: INodeExecutionData[];\n\t\t\t\t\t\t} = {};\n\n\t\t\t\t\t\tfor (let itemIndex = 0; itemIndex < items.length; itemIndex++) {\n\t\t\t\t\t\t\tcheckValue =\n\t\t\t\t\t\t\t\tthis.getNodeParameter('dateDedupeValue', itemIndex, '')?.toString() ?? '';\n\t\t\t\t\t\t\tif (!checkValue) {\n\t\t\t\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t\t\t\t'The `Value to Dedupe` On is empty. Please provide a value.',\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\ttryToParseDateTime(checkValue);\n\t\t\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t\t\t\t`The value '${checkValue}' is not a valid date. Please provide a valid date.`,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (itemMapping[checkValue]) {\n\t\t\t\t\t\t\t\titemMapping[checkValue].push(items[itemIndex]);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\titemMapping[checkValue] = [items[itemIndex]];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst itemsProcessed = await this.helpers.checkProcessedAndRecord(\n\t\t\t\t\t\t\tObject.keys(itemMapping),\n\t\t\t\t\t\t\tscope,\n\t\t\t\t\t\t\t{ mode: 'latestDate' },\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\treturnData.push(\n\t\t\t\t\t\t\titemsProcessed.new\n\t\t\t\t\t\t\t\t.map((key) => {\n\t\t\t\t\t\t\t\t\treturn itemMapping[key];\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t.flat(),\n\t\t\t\t\t\t\titemsProcessed.processed\n\t\t\t\t\t\t\t\t.map((key) => {\n\t\t\t\t\t\t\t\t\treturn itemMapping[key];\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t.flat(),\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\treturn returnData;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn [items];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcase 'clearDeduplicationHistory': {\n\t\t\t\t\tconst mode = this.getNodeParameter('mode', 0) as string;\n\t\t\t\t\tif (mode === 'updateKeyValuesInDatabase') {\n\t\t\t\t\t} else if (mode === 'deleteKeyValuesFromDatabase') {\n\t\t\t\t\t} else if (mode === 'cleanDatabase') {\n\t\t\t\t\t\tconst scope = this.getNodeParameter('options.scope', 0, 'node') as DeduplicationScope;\n\t\t\t\t\t\tawait this.helpers.clearAllProcessedItems(scope, {\n\t\t\t\t\t\t\tmode: 'entries',\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\treturn [items];\n\t\t\t\t}\n\t\t\t\tdefault: {\n\t\t\t\t\treturn [items];\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tif (this.continueOnFail()) {\n\t\t\t\treturnData.push([{ json: this.getInputData(0)[0].json, error }]);\n\t\t\t} else {\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\t\treturn returnData;\n\t}\n}\n"],"mappings":"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","names":[]}