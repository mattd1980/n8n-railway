{"version":3,"sources":["../../../../nodes/Transform/Sort/Sort.node.ts"],"sourcesContent":["import get from 'lodash/get';\nimport isEqual from 'lodash/isEqual';\nimport lt from 'lodash/lt';\nimport {\n\tNodeOperationError,\n\ttype IDataObject,\n\ttype IExecuteFunctions,\n\ttype INodeExecutionData,\n\ttype INodeType,\n\ttype INodeTypeDescription,\n\tNodeConnectionTypes,\n} from 'n8n-workflow';\n\nimport { shuffleArray } from '@utils/utilities';\n\nimport { sortByCode } from './utils';\n\nexport class Sort implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'Sort',\n\t\tname: 'sort',\n\t\ticon: 'file:sort.svg',\n\t\tgroup: ['transform'],\n\t\tsubtitle: '',\n\t\tversion: 1,\n\t\tdescription: 'Change items order',\n\t\tdefaults: {\n\t\t\tname: 'Sort',\n\t\t},\n\t\tinputs: [NodeConnectionTypes.Main],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Type',\n\t\t\t\tname: 'type',\n\t\t\t\ttype: 'options',\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Simple',\n\t\t\t\t\t\tvalue: 'simple',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Random',\n\t\t\t\t\t\tvalue: 'random',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Code',\n\t\t\t\t\t\tvalue: 'code',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'simple',\n\t\t\t\tdescription: 'The fields of the input items to compare to see if they are the same',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Fields To Sort By',\n\t\t\t\tname: 'sortFieldsUi',\n\t\t\t\ttype: 'fixedCollection',\n\t\t\t\ttypeOptions: {\n\t\t\t\t\tmultipleValues: true,\n\t\t\t\t},\n\t\t\t\tplaceholder: 'Add Field To Sort By',\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: '',\n\t\t\t\t\t\tname: 'sortField',\n\t\t\t\t\t\tvalues: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdisplayName: 'Field Name',\n\t\t\t\t\t\t\t\tname: 'fieldName',\n\t\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\t\trequired: true,\n\t\t\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\t\t\tdescription: 'The field to sort by',\n\t\t\t\t\t\t\t\t// eslint-disable-next-line n8n-nodes-base/node-param-placeholder-miscased-id\n\t\t\t\t\t\t\t\tplaceholder: 'e.g. id',\n\t\t\t\t\t\t\t\thint: ' Enter the field name as text',\n\t\t\t\t\t\t\t\trequiresDataPath: 'single',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdisplayName: 'Order',\n\t\t\t\t\t\t\t\tname: 'order',\n\t\t\t\t\t\t\t\ttype: 'options',\n\t\t\t\t\t\t\t\toptions: [\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tname: 'Ascending',\n\t\t\t\t\t\t\t\t\t\tvalue: 'ascending',\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tname: 'Descending',\n\t\t\t\t\t\t\t\t\t\tvalue: 'descending',\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\tdefault: 'ascending',\n\t\t\t\t\t\t\t\tdescription: 'The order to sort by',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: {},\n\t\t\t\tdescription: 'The fields of the input items to compare to see if they are the same',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\ttype: ['simple'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Code',\n\t\t\t\tname: 'code',\n\t\t\t\ttype: 'string',\n\t\t\t\ttypeOptions: {\n\t\t\t\t\talwaysOpenEditWindow: true,\n\t\t\t\t\teditor: 'jsEditor',\n\t\t\t\t\trows: 10,\n\t\t\t\t},\n\t\t\t\tdefault: `// The two items to compare are in the variables a and b\n\t// Access the fields in a.json and b.json\n\t// Return -1 if a should go before b\n\t// Return 1 if b should go before a\n\t// Return 0 if there's no difference\n\n\tfieldName = 'myField';\n\n\tif (a.json[fieldName] < b.json[fieldName]) {\n\treturn -1;\n\t}\n\tif (a.json[fieldName] > b.json[fieldName]) {\n\treturn 1;\n\t}\n\treturn 0;`,\n\t\t\t\tdescription: 'Javascript code to determine the order of any two items',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\ttype: ['code'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Options',\n\t\t\t\tname: 'options',\n\t\t\t\ttype: 'collection',\n\t\t\t\tplaceholder: 'Add Field',\n\t\t\t\tdefault: {},\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\ttype: ['simple'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Disable Dot Notation',\n\t\t\t\t\t\tname: 'disableDotNotation',\n\t\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\t\tdefault: false,\n\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t'Whether to disallow referencing child fields using `parent.child` in the field name',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t],\n\t};\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t\tconst items = this.getInputData();\n\t\tlet returnData = [...items];\n\t\tconst type = this.getNodeParameter('type', 0) as string;\n\t\tconst disableDotNotation = this.getNodeParameter(\n\t\t\t'options.disableDotNotation',\n\t\t\t0,\n\t\t\tfalse,\n\t\t) as boolean;\n\n\t\tif (type === 'random') {\n\t\t\tshuffleArray(returnData);\n\t\t\treturn [returnData];\n\t\t}\n\n\t\tif (type === 'simple') {\n\t\t\tconst sortFieldsUi = this.getNodeParameter('sortFieldsUi', 0) as IDataObject;\n\t\t\tconst sortFields = sortFieldsUi.sortField as Array<{\n\t\t\t\tfieldName: string;\n\t\t\t\torder: 'ascending' | 'descending';\n\t\t\t}>;\n\n\t\t\tif (!sortFields?.length) {\n\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t'No sorting specified. Please add a field to sort by',\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tfor (const { fieldName } of sortFields) {\n\t\t\t\tlet found = false;\n\t\t\t\tfor (const item of items) {\n\t\t\t\t\tif (!disableDotNotation) {\n\t\t\t\t\t\tif (get(item.json, fieldName) !== undefined) {\n\t\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (item.json.hasOwnProperty(fieldName)) {\n\t\t\t\t\t\tfound = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!found && disableDotNotation && fieldName.includes('.')) {\n\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t`Couldn't find the field '${fieldName}' in the input data`,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t\t\"If you're trying to use a nested field, make sure you turn off 'disable dot notation' in the node options\",\n\t\t\t\t\t\t},\n\t\t\t\t\t);\n\t\t\t\t} else if (!found) {\n\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t`Couldn't find the field '${fieldName}' in the input data`,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst sortFieldsWithDirection = sortFields.map((field) => ({\n\t\t\t\tname: field.fieldName,\n\t\t\t\tdir: field.order === 'ascending' ? 1 : -1,\n\t\t\t}));\n\n\t\t\treturnData.sort((a, b) => {\n\t\t\t\tlet result = 0;\n\t\t\t\tfor (const field of sortFieldsWithDirection) {\n\t\t\t\t\tlet equal;\n\t\t\t\t\tif (!disableDotNotation) {\n\t\t\t\t\t\tconst _a =\n\t\t\t\t\t\t\ttypeof get(a.json, field.name) === 'string'\n\t\t\t\t\t\t\t\t? (get(a.json, field.name) as string).toLowerCase()\n\t\t\t\t\t\t\t\t: get(a.json, field.name);\n\t\t\t\t\t\tconst _b =\n\t\t\t\t\t\t\ttypeof get(b.json, field.name) === 'string'\n\t\t\t\t\t\t\t\t? (get(b.json, field.name) as string).toLowerCase()\n\t\t\t\t\t\t\t\t: get(b.json, field.name);\n\t\t\t\t\t\tequal = isEqual(_a, _b);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst _a =\n\t\t\t\t\t\t\ttypeof a.json[field.name] === 'string'\n\t\t\t\t\t\t\t\t? (a.json[field.name] as string).toLowerCase()\n\t\t\t\t\t\t\t\t: a.json[field.name];\n\t\t\t\t\t\tconst _b =\n\t\t\t\t\t\t\ttypeof b.json[field.name] === 'string'\n\t\t\t\t\t\t\t\t? (b.json[field.name] as string).toLowerCase()\n\t\t\t\t\t\t\t\t: b.json[field.name];\n\t\t\t\t\t\tequal = isEqual(_a, _b);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!equal) {\n\t\t\t\t\t\tlet lessThan;\n\t\t\t\t\t\tif (!disableDotNotation) {\n\t\t\t\t\t\t\tconst _a =\n\t\t\t\t\t\t\t\ttypeof get(a.json, field.name) === 'string'\n\t\t\t\t\t\t\t\t\t? (get(a.json, field.name) as string).toLowerCase()\n\t\t\t\t\t\t\t\t\t: get(a.json, field.name);\n\t\t\t\t\t\t\tconst _b =\n\t\t\t\t\t\t\t\ttypeof get(b.json, field.name) === 'string'\n\t\t\t\t\t\t\t\t\t? (get(b.json, field.name) as string).toLowerCase()\n\t\t\t\t\t\t\t\t\t: get(b.json, field.name);\n\t\t\t\t\t\t\tlessThan = lt(_a, _b);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst _a =\n\t\t\t\t\t\t\t\ttypeof a.json[field.name] === 'string'\n\t\t\t\t\t\t\t\t\t? (a.json[field.name] as string).toLowerCase()\n\t\t\t\t\t\t\t\t\t: a.json[field.name];\n\t\t\t\t\t\t\tconst _b =\n\t\t\t\t\t\t\t\ttypeof b.json[field.name] === 'string'\n\t\t\t\t\t\t\t\t\t? (b.json[field.name] as string).toLowerCase()\n\t\t\t\t\t\t\t\t\t: b.json[field.name];\n\t\t\t\t\t\t\tlessThan = lt(_a, _b);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (lessThan) {\n\t\t\t\t\t\t\tresult = -1 * field.dir;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult = 1 * field.dir;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t});\n\t\t} else {\n\t\t\treturnData = sortByCode.call(this, returnData);\n\t\t}\n\t\treturn [returnData];\n\t}\n}\n"],"mappings":"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","names":["get","isEqual","lt"]}