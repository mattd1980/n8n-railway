{"version":3,"sources":["../../../../nodes/Microsoft/GraphSecurity/GenericFunctions.ts"],"sourcesContent":["import type {\n\tIExecuteFunctions,\n\tIDataObject,\n\tJsonObject,\n\tIRequestOptions,\n\tIHttpRequestMethods,\n} from 'n8n-workflow';\nimport { NodeApiError, NodeOperationError } from 'n8n-workflow';\n\nexport async function msGraphSecurityApiRequest(\n\tthis: IExecuteFunctions,\n\tmethod: IHttpRequestMethods,\n\tendpoint: string,\n\tbody: IDataObject = {},\n\tqs: IDataObject = {},\n\theaders: IDataObject = {},\n) {\n\tconst {\n\t\toauthTokenData: { access_token },\n\t} = await this.getCredentials<{\n\t\toauthTokenData: {\n\t\t\taccess_token: string;\n\t\t};\n\t}>('microsoftGraphSecurityOAuth2Api');\n\n\tconst options: IRequestOptions = {\n\t\theaders: {\n\t\t\tAuthorization: `Bearer ${access_token}`,\n\t\t},\n\t\tmethod,\n\t\tbody,\n\t\tqs,\n\t\turi: `https://graph.microsoft.com/v1.0/security${endpoint}`,\n\t\tjson: true,\n\t};\n\n\tif (!Object.keys(body).length) {\n\t\tdelete options.body;\n\t}\n\n\tif (!Object.keys(qs).length) {\n\t\tdelete options.qs;\n\t}\n\n\tif (Object.keys(headers).length) {\n\t\toptions.headers = { ...options.headers, ...headers };\n\t}\n\n\ttry {\n\t\treturn await this.helpers.request(options);\n\t} catch (error) {\n\t\tconst nestedMessage = error?.error?.error?.message;\n\n\t\tif (nestedMessage.startsWith('{\"')) {\n\t\t\terror = JSON.parse(nestedMessage as string);\n\t\t}\n\n\t\tif (nestedMessage.startsWith('Http request failed with statusCode=BadRequest')) {\n\t\t\terror.error.error.message = 'Request failed with bad request';\n\t\t} else if (nestedMessage.startsWith('Http request failed with')) {\n\t\t\tconst stringified = nestedMessage.split(': ').pop();\n\t\t\tif (stringified) {\n\t\t\t\terror = JSON.parse(stringified as string);\n\t\t\t}\n\t\t}\n\n\t\tif (['Invalid filter clause', 'Invalid ODATA query filter'].includes(nestedMessage as string)) {\n\t\t\terror.error.error.message +=\n\t\t\t\t' - Please check that your query parameter syntax is correct: https://docs.microsoft.com/en-us/graph/query-parameters#filter-parameter';\n\t\t}\n\n\t\tthrow new NodeApiError(this.getNode(), error as JsonObject);\n\t}\n}\n\nexport function tolerateDoubleQuotes(filterQueryParameter: string) {\n\treturn filterQueryParameter.replace(/\"/g, \"'\");\n}\n\nexport function throwOnEmptyUpdate(this: IExecuteFunctions) {\n\tthrow new NodeOperationError(this.getNode(), 'Please enter at least one field to update');\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA,0BAAiD;AAEjD,eAAsB,0BAErB,QACA,UACA,OAAoB,CAAC,GACrB,KAAkB,CAAC,GACnB,UAAuB,CAAC,GACvB;AACD,QAAM;AAAA,IACL,gBAAgB,EAAE,aAAa;AAAA,EAChC,IAAI,MAAM,KAAK,eAIZ,iCAAiC;AAEpC,QAAM,UAA2B;AAAA,IAChC,SAAS;AAAA,MACR,eAAe,UAAU,YAAY;AAAA,IACtC;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,KAAK,4CAA4C,QAAQ;AAAA,IACzD,MAAM;AAAA,EACP;AAEA,MAAI,CAAC,OAAO,KAAK,IAAI,EAAE,QAAQ;AAC9B,WAAO,QAAQ;AAAA,EAChB;AAEA,MAAI,CAAC,OAAO,KAAK,EAAE,EAAE,QAAQ;AAC5B,WAAO,QAAQ;AAAA,EAChB;AAEA,MAAI,OAAO,KAAK,OAAO,EAAE,QAAQ;AAChC,YAAQ,UAAU,EAAE,GAAG,QAAQ,SAAS,GAAG,QAAQ;AAAA,EACpD;AAEA,MAAI;AACH,WAAO,MAAM,KAAK,QAAQ,QAAQ,OAAO;AAAA,EAC1C,SAAS,OAAO;AACf,UAAM,gBAAgB,OAAO,OAAO,OAAO;AAE3C,QAAI,cAAc,WAAW,IAAI,GAAG;AACnC,cAAQ,KAAK,MAAM,aAAuB;AAAA,IAC3C;AAEA,QAAI,cAAc,WAAW,gDAAgD,GAAG;AAC/E,YAAM,MAAM,MAAM,UAAU;AAAA,IAC7B,WAAW,cAAc,WAAW,0BAA0B,GAAG;AAChE,YAAM,cAAc,cAAc,MAAM,IAAI,EAAE,IAAI;AAClD,UAAI,aAAa;AAChB,gBAAQ,KAAK,MAAM,WAAqB;AAAA,MACzC;AAAA,IACD;AAEA,QAAI,CAAC,yBAAyB,4BAA4B,EAAE,SAAS,aAAuB,GAAG;AAC9F,YAAM,MAAM,MAAM,WACjB;AAAA,IACF;AAEA,UAAM,IAAI,iCAAa,KAAK,QAAQ,GAAG,KAAmB;AAAA,EAC3D;AACD;AAEO,SAAS,qBAAqB,sBAA8B;AAClE,SAAO,qBAAqB,QAAQ,MAAM,GAAG;AAC9C;AAEO,SAAS,qBAA4C;AAC3D,QAAM,IAAI,uCAAmB,KAAK,QAAQ,GAAG,2CAA2C;AACzF;","names":[]}