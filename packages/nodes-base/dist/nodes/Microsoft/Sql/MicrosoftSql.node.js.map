{"version":3,"sources":["../../../../nodes/Microsoft/Sql/MicrosoftSql.node.ts"],"sourcesContent":["import type { IResult } from 'mssql';\nimport {\n\ttype IExecuteFunctions,\n\ttype ICredentialDataDecryptedObject,\n\ttype ICredentialsDecrypted,\n\ttype ICredentialTestFunctions,\n\ttype IDataObject,\n\ttype INodeCredentialTestResult,\n\ttype INodeExecutionData,\n\ttype INodeType,\n\ttype INodeTypeDescription,\n\tNodeConnectionTypes,\n} from 'n8n-workflow';\n\nimport { flatten, generatePairedItemData, getResolvables } from '@utils/utilities';\n\nimport {\n\tconfigurePool,\n\tcreateTableStruct,\n\tdeleteOperation,\n\texecuteSqlQueryAndPrepareResults,\n\tinsertOperation,\n\tupdateOperation,\n} from './GenericFunctions';\nimport type { ITables } from './interfaces';\n\nexport class MicrosoftSql implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'Microsoft SQL',\n\t\tname: 'microsoftSql',\n\t\ticon: 'file:mssql.svg',\n\t\tgroup: ['input'],\n\t\tversion: [1, 1.1],\n\t\tdescription: 'Get, add and update data in Microsoft SQL',\n\t\tdefaults: {\n\t\t\tname: 'Microsoft SQL',\n\t\t},\n\t\tinputs: [NodeConnectionTypes.Main],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tusableAsTool: true,\n\t\tparameterPane: 'wide',\n\t\tcredentials: [\n\t\t\t{\n\t\t\t\tname: 'microsoftSql',\n\t\t\t\trequired: true,\n\t\t\t\ttestedBy: 'microsoftSqlConnectionTest',\n\t\t\t},\n\t\t],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Operation',\n\t\t\t\tname: 'operation',\n\t\t\t\ttype: 'options',\n\t\t\t\tnoDataExpression: true,\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Execute Query',\n\t\t\t\t\t\tvalue: 'executeQuery',\n\t\t\t\t\t\tdescription: 'Execute an SQL query',\n\t\t\t\t\t\taction: 'Execute a SQL query',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Insert',\n\t\t\t\t\t\tvalue: 'insert',\n\t\t\t\t\t\tdescription: 'Insert rows in database',\n\t\t\t\t\t\taction: 'Insert rows in database',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Update',\n\t\t\t\t\t\tvalue: 'update',\n\t\t\t\t\t\tdescription: 'Update rows in database',\n\t\t\t\t\t\taction: 'Update rows in database',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Delete',\n\t\t\t\t\t\tvalue: 'delete',\n\t\t\t\t\t\tdescription: 'Delete rows in database',\n\t\t\t\t\t\taction: 'Delete rows in database',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'insert',\n\t\t\t},\n\n\t\t\t// ----------------------------------\n\t\t\t//         executeQuery\n\t\t\t// ----------------------------------\n\t\t\t{\n\t\t\t\tdisplayName: 'Query',\n\t\t\t\tname: 'query',\n\t\t\t\ttype: 'string',\n\t\t\t\tnoDataExpression: true,\n\t\t\t\ttypeOptions: {\n\t\t\t\t\teditor: 'sqlEditor',\n\t\t\t\t\tsqlDialect: 'MSSQL',\n\t\t\t\t},\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['executeQuery'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdefault: '',\n\n\t\t\t\tplaceholder: 'SELECT id, name FROM product WHERE id < 40',\n\t\t\t\trequired: true,\n\t\t\t\tdescription: 'The SQL query to execute',\n\t\t\t},\n\n\t\t\t// ----------------------------------\n\t\t\t//         insert\n\t\t\t// ----------------------------------\n\t\t\t{\n\t\t\t\tdisplayName: 'Table',\n\t\t\t\tname: 'table',\n\t\t\t\ttype: 'string',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['insert'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdefault: '',\n\t\t\t\trequired: true,\n\t\t\t\tdescription: 'Name of the table in which to insert data to',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Columns',\n\t\t\t\tname: 'columns',\n\t\t\t\ttype: 'string',\n\t\t\t\trequiresDataPath: 'multiple',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['insert'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdefault: '',\n\t\t\t\tplaceholder: 'id,name,description',\n\t\t\t\tdescription:\n\t\t\t\t\t'Comma-separated list of the properties which should used as columns for the new rows',\n\t\t\t},\n\n\t\t\t// ----------------------------------\n\t\t\t//         update\n\t\t\t// ----------------------------------\n\t\t\t{\n\t\t\t\tdisplayName: 'Table',\n\t\t\t\tname: 'table',\n\t\t\t\ttype: 'string',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['update'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdefault: '',\n\t\t\t\trequired: true,\n\t\t\t\tdescription: 'Name of the table in which to update data in',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Update Key',\n\t\t\t\tname: 'updateKey',\n\t\t\t\ttype: 'string',\n\t\t\t\trequiresDataPath: 'single',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['update'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdefault: 'id',\n\t\t\t\trequired: true,\n\t\t\t\t// eslint-disable-next-line n8n-nodes-base/node-param-description-miscased-id\n\t\t\t\tdescription:\n\t\t\t\t\t'Name of the property which decides which rows in the database should be updated. Normally that would be \"id\".',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Columns',\n\t\t\t\tname: 'columns',\n\t\t\t\ttype: 'string',\n\t\t\t\trequiresDataPath: 'multiple',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['update'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdefault: '',\n\t\t\t\tplaceholder: 'name,description',\n\t\t\t\tdescription:\n\t\t\t\t\t'Comma-separated list of the properties which should used as columns for rows to update',\n\t\t\t},\n\n\t\t\t// ----------------------------------\n\t\t\t//         delete\n\t\t\t// ----------------------------------\n\t\t\t{\n\t\t\t\tdisplayName: 'Table',\n\t\t\t\tname: 'table',\n\t\t\t\ttype: 'string',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['delete'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdefault: '',\n\t\t\t\trequired: true,\n\t\t\t\tdescription: 'Name of the table in which to delete data',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Delete Key',\n\t\t\t\tname: 'deleteKey',\n\t\t\t\ttype: 'string',\n\t\t\t\trequiresDataPath: 'single',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\toperation: ['delete'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdefault: 'id',\n\t\t\t\trequired: true,\n\t\t\t\t// eslint-disable-next-line n8n-nodes-base/node-param-description-miscased-id\n\t\t\t\tdescription:\n\t\t\t\t\t'Name of the property which decides which rows in the database should be deleted. Normally that would be \"id\".',\n\t\t\t},\n\t\t],\n\t};\n\n\tmethods = {\n\t\tcredentialTest: {\n\t\t\tasync microsoftSqlConnectionTest(\n\t\t\t\tthis: ICredentialTestFunctions,\n\t\t\t\tcredential: ICredentialsDecrypted,\n\t\t\t): Promise<INodeCredentialTestResult> {\n\t\t\t\tconst credentials = credential.data as ICredentialDataDecryptedObject;\n\t\t\t\ttry {\n\t\t\t\t\tconst pool = configurePool(credentials);\n\t\t\t\t\tawait pool.connect();\n\t\t\t\t} catch (error) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tstatus: 'Error',\n\t\t\t\t\t\tmessage: error.message,\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\treturn {\n\t\t\t\t\tstatus: 'OK',\n\t\t\t\t\tmessage: 'Connection successful!',\n\t\t\t\t};\n\t\t\t},\n\t\t},\n\t};\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t\tconst credentials = await this.getCredentials('microsoftSql');\n\n\t\tconst pool = configurePool(credentials);\n\t\tawait pool.connect();\n\n\t\tlet responseData: IDataObject | IDataObject[] = [];\n\t\tlet returnData: INodeExecutionData[] = [];\n\n\t\tconst items = this.getInputData();\n\t\tconst operation = this.getNodeParameter('operation', 0);\n\t\tconst nodeVersion = this.getNode().typeVersion;\n\n\t\tif (operation === 'executeQuery' && nodeVersion >= 1.1) {\n\t\t\tfor (let i = 0; i < items.length; i++) {\n\t\t\t\ttry {\n\t\t\t\t\tlet rawQuery = this.getNodeParameter('query', i) as string;\n\n\t\t\t\t\tfor (const resolvable of getResolvables(rawQuery)) {\n\t\t\t\t\t\trawQuery = rawQuery.replace(\n\t\t\t\t\t\t\tresolvable,\n\t\t\t\t\t\t\tthis.evaluateExpression(resolvable, i) as string,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tconst results = await executeSqlQueryAndPrepareResults(pool, rawQuery, i);\n\t\t\t\t\treturnData = returnData.concat(results);\n\t\t\t\t} catch (error) {\n\t\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\t\treturnData.push({\n\t\t\t\t\t\t\tjson: { error: error.message },\n\t\t\t\t\t\t\tpairedItem: [{ item: i }],\n\t\t\t\t\t\t});\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tawait pool.close();\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tawait pool.close();\n\t\t\treturn [returnData];\n\t\t}\n\t\ttry {\n\t\t\tif (operation === 'executeQuery') {\n\t\t\t\tlet rawQuery = this.getNodeParameter('query', 0) as string;\n\n\t\t\t\tfor (const resolvable of getResolvables(rawQuery)) {\n\t\t\t\t\trawQuery = rawQuery.replace(resolvable, this.evaluateExpression(resolvable, 0) as string);\n\t\t\t\t}\n\n\t\t\t\tconst { recordsets }: IResult<any[]> = await pool.request().query(rawQuery);\n\n\t\t\t\tconst result = recordsets.length > 1 ? flatten(recordsets) : recordsets[0];\n\n\t\t\t\tresponseData = result;\n\t\t\t}\n\n\t\t\tif (operation === 'insert') {\n\t\t\t\tconst tables = createTableStruct(this.getNodeParameter, items);\n\n\t\t\t\tawait insertOperation(tables, pool);\n\n\t\t\t\tresponseData = items;\n\t\t\t}\n\n\t\t\tif (operation === 'update') {\n\t\t\t\tconst updateKeys = items.map(\n\t\t\t\t\t(_, index) => this.getNodeParameter('updateKey', index) as string,\n\t\t\t\t);\n\n\t\t\t\tconst tables = createTableStruct(\n\t\t\t\t\tthis.getNodeParameter,\n\t\t\t\t\titems,\n\t\t\t\t\t['updateKey'].concat(updateKeys),\n\t\t\t\t\t'updateKey',\n\t\t\t\t);\n\n\t\t\t\tawait updateOperation(tables, pool);\n\n\t\t\t\tresponseData = items;\n\t\t\t}\n\n\t\t\tif (operation === 'delete') {\n\t\t\t\tconst tables = items.reduce((acc, item, index) => {\n\t\t\t\t\tconst table = this.getNodeParameter('table', index) as string;\n\t\t\t\t\tconst deleteKey = this.getNodeParameter('deleteKey', index) as string;\n\t\t\t\t\tif (acc[table] === undefined) {\n\t\t\t\t\t\tacc[table] = {};\n\t\t\t\t\t}\n\t\t\t\t\tif (acc[table][deleteKey] === undefined) {\n\t\t\t\t\t\tacc[table][deleteKey] = [];\n\t\t\t\t\t}\n\t\t\t\t\tacc[table][deleteKey].push(item);\n\t\t\t\t\treturn acc;\n\t\t\t\t}, {} as ITables);\n\n\t\t\t\tresponseData = await deleteOperation(tables, pool);\n\t\t\t}\n\n\t\t\tconst itemData = generatePairedItemData(items.length);\n\n\t\t\treturnData = this.helpers.constructExecutionMetaData(\n\t\t\t\tthis.helpers.returnJsonArray(responseData),\n\t\t\t\t{ itemData },\n\t\t\t);\n\t\t} catch (error) {\n\t\t\tif (this.continueOnFail()) {\n\t\t\t\tresponseData = items;\n\t\t\t} else {\n\t\t\t\tawait pool.close();\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\n\t\t// shuts down the connection pool associated with the db object to allow the process to finish\n\t\tawait pool.close();\n\n\t\treturn [returnData];\n\t}\n}\n"],"mappings":"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","names":[]}