{"version":3,"sources":["../../../../../../nodes/Microsoft/AzureCosmosDb/descriptions/container/create.operation.ts"],"sourcesContent":["import type {\n\tIDataObject,\n\tIExecuteSingleFunctions,\n\tIHttpRequestOptions,\n\tINodeProperties,\n} from 'n8n-workflow';\nimport { OperationalError, updateDisplayOptions } from 'n8n-workflow';\n\nimport { HeaderConstants } from '../../helpers/constants';\nimport { processJsonInput } from '../../helpers/utils';\n\nconst properties: INodeProperties[] = [\n\t{\n\t\tdisplayName: 'ID',\n\t\tname: 'containerCreate',\n\t\tdefault: '',\n\t\tdescription: 'Unique identifier for the new container',\n\t\tplaceholder: 'e.g. Container1',\n\t\trequired: true,\n\t\trouting: {\n\t\t\tsend: {\n\t\t\t\tpreSend: [\n\t\t\t\t\tasync function (\n\t\t\t\t\t\tthis: IExecuteSingleFunctions,\n\t\t\t\t\t\trequestOptions: IHttpRequestOptions,\n\t\t\t\t\t): Promise<IHttpRequestOptions> {\n\t\t\t\t\t\tconst id = this.getNodeParameter('containerCreate') as string;\n\n\t\t\t\t\t\tif (/\\s/.test(id)) {\n\t\t\t\t\t\t\tthrow new OperationalError('The container ID must not contain spaces.');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (!/^[a-zA-Z0-9-_]+$/.test(id)) {\n\t\t\t\t\t\t\tthrow new OperationalError(\n\t\t\t\t\t\t\t\t'The container ID may only contain letters, numbers, hyphens, and underscores.',\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t(requestOptions.body as IDataObject).id = id;\n\n\t\t\t\t\t\treturn requestOptions;\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t},\n\t\ttype: 'string',\n\t},\n\t{\n\t\tdisplayName: 'Partition Key',\n\t\tname: 'partitionKey',\n\t\tdefault: '{\\n\\t\"paths\": [\\n\\t\\t\"/id\"\\n\\t],\\n\\t\"kind\": \"Hash\",\\n\\t\"version\": 2\\n}',\n\t\tdescription:\n\t\t\t'The partition key is used to automatically distribute data across partitions for scalability. Choose a property in your JSON document that has a wide range of values and evenly distributes request volume.',\n\t\trequired: true,\n\t\trouting: {\n\t\t\tsend: {\n\t\t\t\tpreSend: [\n\t\t\t\t\tasync function (\n\t\t\t\t\t\tthis: IExecuteSingleFunctions,\n\t\t\t\t\t\trequestOptions: IHttpRequestOptions,\n\t\t\t\t\t): Promise<IHttpRequestOptions> {\n\t\t\t\t\t\tconst rawPartitionKey = this.getNodeParameter('partitionKey') as IDataObject;\n\t\t\t\t\t\tconst partitionKey = processJsonInput(rawPartitionKey, 'Partition Key', {\n\t\t\t\t\t\t\tpaths: ['/id'],\n\t\t\t\t\t\t\tkind: 'Hash',\n\t\t\t\t\t\t\tversion: 2,\n\t\t\t\t\t\t});\n\t\t\t\t\t\t(requestOptions.body as IDataObject).partitionKey = partitionKey;\n\t\t\t\t\t\treturn requestOptions;\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t},\n\t\ttype: 'json',\n\t},\n\t{\n\t\tdisplayName: 'Additional Fields',\n\t\tname: 'additionalFields',\n\t\tdefault: {},\n\t\toptions: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Indexing Policy',\n\t\t\t\tname: 'indexingPolicy',\n\t\t\t\tdefault:\n\t\t\t\t\t'{\\n\\t\"indexingMode\": \"consistent\",\\n\\t\"automatic\": true,\\n\\t\"includedPaths\": [\\n\\t\\t{\\n\\t\\t\\t\"path\": \"/*\"\\n\\t\\t}\\n\\t],\\n\\t\"excludedPaths\": []\\n}',\n\t\t\t\tdescription: 'This value is used to configure indexing policy',\n\t\t\t\trouting: {\n\t\t\t\t\tsend: {\n\t\t\t\t\t\tpreSend: [\n\t\t\t\t\t\t\tasync function (\n\t\t\t\t\t\t\t\tthis: IExecuteSingleFunctions,\n\t\t\t\t\t\t\t\trequestOptions: IHttpRequestOptions,\n\t\t\t\t\t\t\t): Promise<IHttpRequestOptions> {\n\t\t\t\t\t\t\t\tconst rawIndexingPolicy = this.getNodeParameter(\n\t\t\t\t\t\t\t\t\t'additionalFields.indexingPolicy',\n\t\t\t\t\t\t\t\t) as IDataObject;\n\t\t\t\t\t\t\t\tconst indexPolicy = processJsonInput(rawIndexingPolicy, 'Indexing Policy');\n\t\t\t\t\t\t\t\t(requestOptions.body as IDataObject).indexingPolicy = indexPolicy;\n\t\t\t\t\t\t\t\treturn requestOptions;\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\ttype: 'json',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Max RU/s (for Autoscale)',\n\t\t\t\tname: 'maxThroughput',\n\t\t\t\tdefault: 1000,\n\t\t\t\tdescription: 'The user specified autoscale max RU/s',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\thide: {\n\t\t\t\t\t\t'/additionalFields.offerThroughput': [{ _cnd: { exists: true } }],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\trouting: {\n\t\t\t\t\trequest: {\n\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t[HeaderConstants.X_MS_COSMOS_OFFER_AUTOPILOT_SETTING]: '={{ $value }}',\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\ttype: 'number',\n\t\t\t\ttypeOptions: {\n\t\t\t\t\tminValue: 1000,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Manual Throughput RU/s',\n\t\t\t\tname: 'offerThroughput',\n\t\t\t\tdefault: 400,\n\t\t\t\tdescription:\n\t\t\t\t\t'The user specified manual throughput (RU/s) for the collection expressed in units of 100 request units per second',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\thide: {\n\t\t\t\t\t\t'/additionalFields.maxThroughput': [{ _cnd: { exists: true } }],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\trouting: {\n\t\t\t\t\trequest: {\n\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t[HeaderConstants.X_MS_OFFER_THROUGHPUT]: '={{ $value }}',\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\ttype: 'number',\n\t\t\t\ttypeOptions: {\n\t\t\t\t\tminValue: 400,\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t\tplaceholder: 'Add Option',\n\t\ttype: 'collection',\n\t},\n];\n\nconst displayOptions = {\n\tshow: {\n\t\tresource: ['container'],\n\t\toperation: ['create'],\n\t},\n};\n\nexport const description = updateDisplayOptions(displayOptions, properties);\n"],"mappings":"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","names":[]}