{"version":3,"sources":["../../../../../nodes/Microsoft/AzureCosmosDb/helpers/errorHandler.ts"],"sourcesContent":["import type {\n\tIExecuteSingleFunctions,\n\tIN8nHttpFullResponse,\n\tINodeExecutionData,\n\tJsonObject,\n} from 'n8n-workflow';\nimport { jsonParse, NodeApiError } from 'n8n-workflow';\n\nimport type { IErrorResponse } from './interfaces';\n\nexport const ErrorMap = {\n\tContainer: {\n\t\tConflict: {\n\t\t\tgetMessage: (id: string) => `Container \"${id}\" already exists.`,\n\t\t\tdescription: \"Use a unique value for 'ID' and try again.\",\n\t\t},\n\t\tNotFound: {\n\t\t\tgetMessage: (id: string) => `Container \"${id}\" was not found.`,\n\t\t\tdescription: \"Double-check the value in the parameter 'Container' and try again.\",\n\t\t},\n\t},\n\tItem: {\n\t\tNotFound: {\n\t\t\tgetMessage: (id: string) => `Item \"${id}\" was not found.`,\n\t\t\tdescription:\n\t\t\t\t\"Double-check the values in the parameter 'Item' and 'Partition Key' (if applicable) and try again.\",\n\t\t},\n\t},\n};\n\nexport async function handleError(\n\tthis: IExecuteSingleFunctions,\n\tdata: INodeExecutionData[],\n\tresponse: IN8nHttpFullResponse,\n): Promise<INodeExecutionData[]> {\n\tif (String(response.statusCode).startsWith('4') || String(response.statusCode).startsWith('5')) {\n\t\tconst resource = this.getNodeParameter('resource') as string;\n\t\tconst error = response.body as IErrorResponse;\n\t\tlet errorMessage = error.message;\n\n\t\tlet errorDetails: string[] | undefined = undefined;\n\n\t\tif (resource === 'container') {\n\t\t\tif (error.code === 'Conflict') {\n\t\t\t\tconst newContainerValue = this.getNodeParameter('containerCreate') as string;\n\t\t\t\tthrow new NodeApiError(this.getNode(), error as unknown as JsonObject, {\n\t\t\t\t\tmessage: ErrorMap.Container.Conflict.getMessage(newContainerValue ?? 'Unknown'),\n\t\t\t\t\tdescription: ErrorMap.Container.Conflict.description,\n\t\t\t\t});\n\t\t\t}\n\t\t\tif (error.code === 'NotFound') {\n\t\t\t\tconst containerValue = this.getNodeParameter('container', undefined, {\n\t\t\t\t\textractValue: true,\n\t\t\t\t}) as string;\n\t\t\t\tthrow new NodeApiError(this.getNode(), error as unknown as JsonObject, {\n\t\t\t\t\tmessage: ErrorMap.Container.NotFound.getMessage(containerValue ?? 'Unknown'),\n\t\t\t\t\tdescription: ErrorMap.Container.NotFound.description,\n\t\t\t\t});\n\t\t\t}\n\t\t} else if (resource === 'item') {\n\t\t\tif (error.code === 'NotFound') {\n\t\t\t\tconst itemValue = this.getNodeParameter('item', undefined, {\n\t\t\t\t\textractValue: true,\n\t\t\t\t}) as string;\n\t\t\t\tthrow new NodeApiError(this.getNode(), error as unknown as JsonObject, {\n\t\t\t\t\tmessage: ErrorMap.Item.NotFound.getMessage(itemValue ?? 'Unknown'),\n\t\t\t\t\tdescription: ErrorMap.Item.NotFound.description,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\ttry {\n\t\t\t// Certain error responses have nested Message\n\t\t\terrorMessage = jsonParse<{\n\t\t\t\tmessage: string;\n\t\t\t}>(errorMessage).message;\n\t\t} catch {}\n\n\t\tconst match = errorMessage.match(/Message: ({.*?})/);\n\t\tif (match?.[1]) {\n\t\t\ttry {\n\t\t\t\terrorDetails = jsonParse<{\n\t\t\t\t\tErrors: string[];\n\t\t\t\t}>(match[1]).Errors;\n\t\t\t} catch {}\n\t\t}\n\n\t\tif (errorDetails && errorDetails.length > 0) {\n\t\t\tthrow new NodeApiError(this.getNode(), error as unknown as JsonObject, {\n\t\t\t\tmessage: error.code,\n\t\t\t\tdescription: errorDetails.join('\\n'),\n\t\t\t});\n\t\t} else {\n\t\t\tthrow new NodeApiError(this.getNode(), error as unknown as JsonObject, {\n\t\t\t\tmessage: error.code,\n\t\t\t\tdescription: error.message,\n\t\t\t});\n\t\t}\n\t}\n\treturn data;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA,0BAAwC;AAIjC,MAAM,WAAW;AAAA,EACvB,WAAW;AAAA,IACV,UAAU;AAAA,MACT,YAAY,CAAC,OAAe,cAAc,EAAE;AAAA,MAC5C,aAAa;AAAA,IACd;AAAA,IACA,UAAU;AAAA,MACT,YAAY,CAAC,OAAe,cAAc,EAAE;AAAA,MAC5C,aAAa;AAAA,IACd;AAAA,EACD;AAAA,EACA,MAAM;AAAA,IACL,UAAU;AAAA,MACT,YAAY,CAAC,OAAe,SAAS,EAAE;AAAA,MACvC,aACC;AAAA,IACF;AAAA,EACD;AACD;AAEA,eAAsB,YAErB,MACA,UACgC;AAChC,MAAI,OAAO,SAAS,UAAU,EAAE,WAAW,GAAG,KAAK,OAAO,SAAS,UAAU,EAAE,WAAW,GAAG,GAAG;AAC/F,UAAM,WAAW,KAAK,iBAAiB,UAAU;AACjD,UAAM,QAAQ,SAAS;AACvB,QAAI,eAAe,MAAM;AAEzB,QAAI,eAAqC;AAEzC,QAAI,aAAa,aAAa;AAC7B,UAAI,MAAM,SAAS,YAAY;AAC9B,cAAM,oBAAoB,KAAK,iBAAiB,iBAAiB;AACjE,cAAM,IAAI,iCAAa,KAAK,QAAQ,GAAG,OAAgC;AAAA,UACtE,SAAS,SAAS,UAAU,SAAS,WAAW,qBAAqB,SAAS;AAAA,UAC9E,aAAa,SAAS,UAAU,SAAS;AAAA,QAC1C,CAAC;AAAA,MACF;AACA,UAAI,MAAM,SAAS,YAAY;AAC9B,cAAM,iBAAiB,KAAK,iBAAiB,aAAa,QAAW;AAAA,UACpE,cAAc;AAAA,QACf,CAAC;AACD,cAAM,IAAI,iCAAa,KAAK,QAAQ,GAAG,OAAgC;AAAA,UACtE,SAAS,SAAS,UAAU,SAAS,WAAW,kBAAkB,SAAS;AAAA,UAC3E,aAAa,SAAS,UAAU,SAAS;AAAA,QAC1C,CAAC;AAAA,MACF;AAAA,IACD,WAAW,aAAa,QAAQ;AAC/B,UAAI,MAAM,SAAS,YAAY;AAC9B,cAAM,YAAY,KAAK,iBAAiB,QAAQ,QAAW;AAAA,UAC1D,cAAc;AAAA,QACf,CAAC;AACD,cAAM,IAAI,iCAAa,KAAK,QAAQ,GAAG,OAAgC;AAAA,UACtE,SAAS,SAAS,KAAK,SAAS,WAAW,aAAa,SAAS;AAAA,UACjE,aAAa,SAAS,KAAK,SAAS;AAAA,QACrC,CAAC;AAAA,MACF;AAAA,IACD;AAEA,QAAI;AAEH,yBAAe,+BAEZ,YAAY,EAAE;AAAA,IAClB,QAAQ;AAAA,IAAC;AAET,UAAM,QAAQ,aAAa,MAAM,kBAAkB;AACnD,QAAI,QAAQ,CAAC,GAAG;AACf,UAAI;AACH,2BAAe,+BAEZ,MAAM,CAAC,CAAC,EAAE;AAAA,MACd,QAAQ;AAAA,MAAC;AAAA,IACV;AAEA,QAAI,gBAAgB,aAAa,SAAS,GAAG;AAC5C,YAAM,IAAI,iCAAa,KAAK,QAAQ,GAAG,OAAgC;AAAA,QACtE,SAAS,MAAM;AAAA,QACf,aAAa,aAAa,KAAK,IAAI;AAAA,MACpC,CAAC;AAAA,IACF,OAAO;AACN,YAAM,IAAI,iCAAa,KAAK,QAAQ,GAAG,OAAgC;AAAA,QACtE,SAAS,MAAM;AAAA,QACf,aAAa,MAAM;AAAA,MACpB,CAAC;AAAA,IACF;AAAA,EACD;AACA,SAAO;AACR;","names":[]}