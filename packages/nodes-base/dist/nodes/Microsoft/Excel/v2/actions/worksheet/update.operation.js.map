{"version":3,"sources":["../../../../../../../nodes/Microsoft/Excel/v2/actions/worksheet/update.operation.ts"],"sourcesContent":["import type {\n\tIDataObject,\n\tIExecuteFunctions,\n\tINodeExecutionData,\n\tINodeProperties,\n} from 'n8n-workflow';\nimport { NodeOperationError } from 'n8n-workflow';\n\nimport { generatePairedItemData, processJsonInput, updateDisplayOptions } from '@utils/utilities';\n\nimport type { ExcelResponse, UpdateSummary } from '../../helpers/interfaces';\nimport {\n\tcheckRange,\n\tprepareOutput,\n\tupdateByAutoMaping,\n\tupdateByDefinedValues,\n} from '../../helpers/utils';\nimport { microsoftApiRequest } from '../../transport';\nimport { workbookRLC, worksheetRLC } from '../common.descriptions';\n\nconst properties: INodeProperties[] = [\n\tworkbookRLC,\n\tworksheetRLC,\n\t{\n\t\tdisplayName: 'Select a Range',\n\t\tname: 'useRange',\n\t\ttype: 'boolean',\n\t\tdefault: false,\n\t},\n\t{\n\t\tdisplayName: 'Range',\n\t\tname: 'range',\n\t\ttype: 'string',\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tdataMode: ['autoMap', 'define'],\n\t\t\t\tuseRange: [true],\n\t\t\t},\n\t\t},\n\t\tplaceholder: 'e.g. A1:B2',\n\t\tdefault: '',\n\t\tdescription:\n\t\t\t'The sheet range to read the data from specified using a A1-style notation, has to be specific e.g A1:B5, generic ranges like A:B are not supported. Leave blank to use whole used range in the sheet.',\n\t\thint: 'First row must contain column names',\n\t},\n\t{\n\t\tdisplayName: 'Range',\n\t\tname: 'range',\n\t\ttype: 'string',\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tdataMode: ['raw'],\n\t\t\t\tuseRange: [true],\n\t\t\t},\n\t\t},\n\t\tplaceholder: 'e.g. A1:B2',\n\t\tdefault: '',\n\t\tdescription: 'The sheet range to read the data from specified using a A1-style notation',\n\t\thint: 'Leave blank for entire worksheet',\n\t},\n\t{\n\t\tdisplayName: 'Data Mode',\n\t\tname: 'dataMode',\n\t\ttype: 'options',\n\t\tdefault: 'define',\n\t\toptions: [\n\t\t\t{\n\t\t\t\tname: 'Auto-Map Input Data to Columns',\n\t\t\t\tvalue: 'autoMap',\n\t\t\t\tdescription: 'Use when node input properties match destination column names',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Map Each Column Below',\n\t\t\t\tvalue: 'define',\n\t\t\t\tdescription: 'Set the value for each destination column',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Raw',\n\t\t\t\tvalue: 'raw',\n\t\t\t\tdescription:\n\t\t\t\t\t'Send raw data as JSON, the whole selected range would be updated with the new values',\n\t\t\t},\n\t\t],\n\t},\n\t{\n\t\tdisplayName: 'Data',\n\t\tname: 'data',\n\t\ttype: 'json',\n\t\tdefault: '',\n\t\trequired: true,\n\t\tplaceholder: 'e.g. [[\"Sara\",\"1/2/2006\",\"Berlin\"],[\"George\",\"5/3/2010\",\"Paris\"]]',\n\t\tdescription:\n\t\t\t'Raw values for the specified range as array of string arrays in JSON format. Should match the specified range: one array item for each row.',\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tdataMode: ['raw'],\n\t\t\t},\n\t\t},\n\t},\n\t{\n\t\t// eslint-disable-next-line n8n-nodes-base/node-param-display-name-miscased, n8n-nodes-base/node-param-display-name-wrong-for-dynamic-options\n\t\tdisplayName: 'Column to match on',\n\t\tname: 'columnToMatchOn',\n\t\ttype: 'options',\n\t\tdescription:\n\t\t\t'Choose from the list, or specify an ID using an <a href=\"https://docs.n8n.io/code/expressions/\">expression</a>',\n\t\ttypeOptions: {\n\t\t\tloadOptionsDependsOn: ['worksheet.value', 'workbook.value', 'range'],\n\t\t\tloadOptionsMethod: 'getWorksheetColumnRow',\n\t\t},\n\t\tdefault: '',\n\t\thint: \"Used to find the correct row to update. Doesn't get changed.\",\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tdataMode: ['autoMap', 'define'],\n\t\t\t},\n\t\t},\n\t},\n\t{\n\t\tdisplayName: 'Value of Column to Match On',\n\t\tname: 'valueToMatchOn',\n\t\ttype: 'string',\n\t\tdefault: '',\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tdataMode: ['define'],\n\t\t\t},\n\t\t},\n\t},\n\t{\n\t\tdisplayName: 'Values to Send',\n\t\tname: 'fieldsUi',\n\t\tplaceholder: 'Add Field',\n\t\ttype: 'fixedCollection',\n\t\ttypeOptions: {\n\t\t\tmultipleValues: true,\n\t\t},\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tdataMode: ['define'],\n\t\t\t},\n\t\t},\n\t\tdefault: {},\n\t\toptions: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Field',\n\t\t\t\tname: 'values',\n\t\t\t\tvalues: [\n\t\t\t\t\t{\n\t\t\t\t\t\t// eslint-disable-next-line n8n-nodes-base/node-param-display-name-wrong-for-dynamic-options\n\t\t\t\t\t\tdisplayName: 'Column',\n\t\t\t\t\t\tname: 'column',\n\t\t\t\t\t\ttype: 'options',\n\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t'Choose from the list, or specify an ID using an <a href=\"https://docs.n8n.io/code/expressions/\">expression</a>',\n\t\t\t\t\t\ttypeOptions: {\n\t\t\t\t\t\t\tloadOptionsDependsOn: ['columnToMatchOn', 'range'],\n\t\t\t\t\t\t\tloadOptionsMethod: 'getWorksheetColumnRowSkipColumnToMatchOn',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Value',\n\t\t\t\t\t\tname: 'fieldValue',\n\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t],\n\t},\n\t{\n\t\tdisplayName: 'Options',\n\t\tname: 'options',\n\t\ttype: 'collection',\n\t\tplaceholder: 'Add option',\n\t\tdefault: {},\n\t\toptions: [\n\t\t\t{\n\t\t\t\tdisplayName: 'RAW Data',\n\t\t\t\tname: 'rawData',\n\t\t\t\ttype: 'boolean',\n\t\t\t\t// eslint-disable-next-line n8n-nodes-base/node-param-default-wrong-for-boolean\n\t\t\t\tdefault: 0,\n\t\t\t\tdescription:\n\t\t\t\t\t'Whether the data should be returned RAW instead of parsed into keys according to their header',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Data Property',\n\t\t\t\tname: 'dataProperty',\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: 'data',\n\t\t\t\trequired: true,\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\trawData: [true],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdescription: 'The name of the property into which to write the RAW data',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Fields',\n\t\t\t\tname: 'fields',\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: '',\n\t\t\t\tdescription: 'Fields the response will containt. Multiple can be added separated by ,.',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\trawData: [true],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Update All Matches',\n\t\t\t\tname: 'updateAll',\n\t\t\t\ttype: 'boolean',\n\t\t\t\tdefault: false,\n\t\t\t\tdescription: 'Whether to update all matching rows or just the first match',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\thide: {\n\t\t\t\t\t\t'/dataMode': ['raw'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t},\n];\n\nconst displayOptions = {\n\tshow: {\n\t\tresource: ['worksheet'],\n\t\toperation: ['update'],\n\t},\n};\n\nexport const description = updateDisplayOptions(displayOptions, properties);\n\nexport async function execute(\n\tthis: IExecuteFunctions,\n\titems: INodeExecutionData[],\n): Promise<INodeExecutionData[]> {\n\tconst returnData: INodeExecutionData[] = [];\n\n\ttry {\n\t\tconst options = this.getNodeParameter('options', 0, {});\n\n\t\tconst rawData = options.rawData as boolean;\n\t\tconst dataProperty = options.dataProperty ? (options.dataProperty as string) : 'data';\n\n\t\tconst qs: IDataObject = {};\n\t\tif (rawData && options.fields) {\n\t\t\tqs.$select = options.fields;\n\t\t}\n\n\t\tconst workbookId = this.getNodeParameter('workbook', 0, undefined, {\n\t\t\textractValue: true,\n\t\t}) as string;\n\n\t\tconst worksheetId = this.getNodeParameter('worksheet', 0, undefined, {\n\t\t\textractValue: true,\n\t\t}) as string;\n\n\t\tlet range = this.getNodeParameter('range', 0, '') as string;\n\t\tcheckRange(this.getNode(), range);\n\n\t\tconst dataMode = this.getNodeParameter('dataMode', 0) as string;\n\n\t\tlet worksheetData: IDataObject = {};\n\n\t\tif (range && dataMode !== 'raw') {\n\t\t\tworksheetData = await microsoftApiRequest.call(\n\t\t\t\tthis,\n\t\t\t\t'PATCH',\n\t\t\t\t`/drive/items/${workbookId}/workbook/worksheets/${worksheetId}/range(address='${range}')`,\n\t\t\t);\n\t\t}\n\n\t\t//get used range if range not provided; if 'raw' mode fetch only address information\n\t\tif (range === '') {\n\t\t\tconst query: IDataObject = {};\n\t\t\tif (dataMode === 'raw') {\n\t\t\t\tquery.select = 'address';\n\t\t\t}\n\n\t\t\tworksheetData = await microsoftApiRequest.call(\n\t\t\t\tthis,\n\t\t\t\t'GET',\n\t\t\t\t`/drive/items/${workbookId}/workbook/worksheets/${worksheetId}/usedRange`,\n\t\t\t\tundefined,\n\t\t\t\tquery,\n\t\t\t);\n\n\t\t\trange = (worksheetData.address as string).split('!')[1];\n\t\t}\n\n\t\tlet responseData;\n\t\tif (dataMode === 'raw') {\n\t\t\tconst data = this.getNodeParameter('data', 0);\n\n\t\t\tconst values = processJsonInput(data, 'Data') as string[][];\n\n\t\t\tresponseData = await microsoftApiRequest.call(\n\t\t\t\tthis,\n\t\t\t\t'PATCH',\n\t\t\t\t`/drive/items/${workbookId}/workbook/worksheets/${worksheetId}/range(address='${range}')`,\n\t\t\t\t{ values },\n\t\t\t\tqs,\n\t\t\t);\n\n\t\t\treturnData.push(\n\t\t\t\t...prepareOutput.call(this, this.getNode(), responseData as ExcelResponse, {\n\t\t\t\t\trawData,\n\t\t\t\t\tdataProperty,\n\t\t\t\t}),\n\t\t\t);\n\t\t} else {\n\t\t\tif (worksheetData.values === undefined || (worksheetData.values as string[][]).length <= 1) {\n\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t'No data found in the specified range, mapping not possible, you can use raw mode instead to update selected range',\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tconst updateAll = this.getNodeParameter('options.updateAll', 0, false) as boolean;\n\n\t\t\tlet updateSummary: UpdateSummary = {\n\t\t\t\tupdatedData: [],\n\t\t\t\tupdatedRows: [],\n\t\t\t\tappendData: [],\n\t\t\t};\n\n\t\t\tif (dataMode === 'define') {\n\t\t\t\tupdateSummary = updateByDefinedValues.call(\n\t\t\t\t\tthis,\n\t\t\t\t\titems.length,\n\t\t\t\t\tworksheetData.values as string[][],\n\t\t\t\t\tupdateAll,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (dataMode === 'autoMap') {\n\t\t\t\tconst columnToMatchOn = this.getNodeParameter('columnToMatchOn', 0) as string;\n\n\t\t\t\tif (!items.some(({ json }) => json[columnToMatchOn] !== undefined)) {\n\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t`Any item in input data contains column '${columnToMatchOn}', that is selected to match on`,\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tupdateSummary = updateByAutoMaping(\n\t\t\t\t\titems,\n\t\t\t\t\tworksheetData.values as string[][],\n\t\t\t\t\tcolumnToMatchOn,\n\t\t\t\t\tupdateAll,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tresponseData = await microsoftApiRequest.call(\n\t\t\t\tthis,\n\t\t\t\t'PATCH',\n\t\t\t\t`/drive/items/${workbookId}/workbook/worksheets/${worksheetId}/range(address='${range}')`,\n\t\t\t\t{ values: updateSummary.updatedData },\n\t\t\t);\n\n\t\t\tconst { updatedRows } = updateSummary;\n\n\t\t\treturnData.push(\n\t\t\t\t...prepareOutput.call(this, this.getNode(), responseData as ExcelResponse, {\n\t\t\t\t\tupdatedRows,\n\t\t\t\t\trawData,\n\t\t\t\t\tdataProperty,\n\t\t\t\t}),\n\t\t\t);\n\t\t}\n\t} catch (error) {\n\t\tif (this.continueOnFail()) {\n\t\t\tconst itemData = generatePairedItemData(this.getInputData().length);\n\t\t\tconst executionErrorData = this.helpers.constructExecutionMetaData(\n\t\t\t\tthis.helpers.returnJsonArray({ error: error.message }),\n\t\t\t\t{ itemData },\n\t\t\t);\n\t\t\treturnData.push(...executionErrorData);\n\t\t} else {\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\treturn returnData;\n}\n"],"mappings":"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","names":[]}