{"version":3,"sources":["../../../../../../../nodes/Microsoft/Excel/v2/actions/table/append.operation.ts"],"sourcesContent":["import type {\n\tIDataObject,\n\tIExecuteFunctions,\n\tINodeExecutionData,\n\tINodeProperties,\n} from 'n8n-workflow';\n\nimport { generatePairedItemData, processJsonInput, updateDisplayOptions } from '@utils/utilities';\n\nimport type { ExcelResponse } from '../../helpers/interfaces';\nimport { prepareOutput } from '../../helpers/utils';\nimport { microsoftApiRequest } from '../../transport';\nimport { tableRLC, workbookRLC, worksheetRLC } from '../common.descriptions';\n\nconst properties: INodeProperties[] = [\n\tworkbookRLC,\n\tworksheetRLC,\n\ttableRLC,\n\t{\n\t\tdisplayName: 'Data Mode',\n\t\tname: 'dataMode',\n\t\ttype: 'options',\n\t\tdefault: 'define',\n\t\toptions: [\n\t\t\t{\n\t\t\t\tname: 'Auto-Map Input Data to Columns',\n\t\t\t\tvalue: 'autoMap',\n\t\t\t\tdescription: 'Use when node input properties match destination column names',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Map Each Column Below',\n\t\t\t\tvalue: 'define',\n\t\t\t\tdescription: 'Set the value for each destination column',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Raw',\n\t\t\t\tvalue: 'raw',\n\t\t\t\tdescription: 'Send raw data as JSON',\n\t\t\t},\n\t\t],\n\t},\n\t{\n\t\tdisplayName: 'Data',\n\t\tname: 'data',\n\t\ttype: 'json',\n\t\tdefault: '',\n\t\trequired: true,\n\t\tplaceholder: 'e.g. [[\"Sara\",\"1/2/2006\",\"Berlin\"],[\"George\",\"5/3/2010\",\"Paris\"]]',\n\t\tdescription: 'Raw values for the specified range as array of string arrays in JSON format',\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tdataMode: ['raw'],\n\t\t\t},\n\t\t},\n\t},\n\t{\n\t\tdisplayName: 'Values to Send',\n\t\tname: 'fieldsUi',\n\t\tplaceholder: 'Add Field',\n\t\ttype: 'fixedCollection',\n\t\ttypeOptions: {\n\t\t\tmultipleValues: true,\n\t\t},\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tdataMode: ['define'],\n\t\t\t},\n\t\t},\n\t\tdefault: {},\n\t\toptions: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Field',\n\t\t\t\tname: 'values',\n\t\t\t\tvalues: [\n\t\t\t\t\t{\n\t\t\t\t\t\t// eslint-disable-next-line n8n-nodes-base/node-param-display-name-wrong-for-dynamic-options\n\t\t\t\t\t\tdisplayName: 'Column',\n\t\t\t\t\t\tname: 'column',\n\t\t\t\t\t\ttype: 'options',\n\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t'Choose from the list, or specify an ID using an <a href=\"https://docs.n8n.io/code/expressions/\">expression</a>',\n\t\t\t\t\t\ttypeOptions: {\n\t\t\t\t\t\t\tloadOptionsDependsOn: ['table.value', 'worksheet.value', 'workbook.value'],\n\t\t\t\t\t\t\tloadOptionsMethod: 'getTableColumns',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Value',\n\t\t\t\t\t\tname: 'fieldValue',\n\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\trequiresDataPath: 'single',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t],\n\t},\n\t{\n\t\tdisplayName: 'Options',\n\t\tname: 'options',\n\t\ttype: 'collection',\n\t\tplaceholder: 'Add option',\n\t\tdefault: {},\n\t\toptions: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Index',\n\t\t\t\tname: 'index',\n\t\t\t\ttype: 'number',\n\t\t\t\tdefault: 0,\n\t\t\t\ttypeOptions: {\n\t\t\t\t\tminValue: 0,\n\t\t\t\t},\n\t\t\t\tdescription:\n\t\t\t\t\t'Specifies the relative position of the new row. If not defined, the addition happens at the end. Any row below the inserted row will be shifted downwards. First row index is 0.',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'RAW Data',\n\t\t\t\tname: 'rawData',\n\t\t\t\ttype: 'boolean',\n\t\t\t\t// eslint-disable-next-line n8n-nodes-base/node-param-default-wrong-for-boolean\n\t\t\t\tdefault: 0,\n\t\t\t\tdescription:\n\t\t\t\t\t'Whether the data should be returned RAW instead of parsed into keys according to their header',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Data Property',\n\t\t\t\tname: 'dataProperty',\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: 'data',\n\t\t\t\trequired: true,\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\trawData: [true],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdescription: 'The name of the property into which to write the RAW data',\n\t\t\t},\n\t\t],\n\t},\n];\n\nconst displayOptions = {\n\tshow: {\n\t\tresource: ['table'],\n\t\toperation: ['append'],\n\t},\n};\n\nexport const description = updateDisplayOptions(displayOptions, properties);\n\nexport async function execute(\n\tthis: IExecuteFunctions,\n\titems: INodeExecutionData[],\n): Promise<INodeExecutionData[]> {\n\t//https://docs.microsoft.com/en-us/graph/api/table-post-rows?view=graph-rest-1.0&tabs=http\n\tconst returnData: INodeExecutionData[] = [];\n\n\ttry {\n\t\t// TODO: At some point it should be possible to use item dependent parameters.\n\t\t//       Is however important to then not make one separate request each.\n\t\tconst workbookId = this.getNodeParameter('workbook', 0, undefined, {\n\t\t\textractValue: true,\n\t\t}) as string;\n\n\t\tconst worksheetId = this.getNodeParameter('worksheet', 0, undefined, {\n\t\t\textractValue: true,\n\t\t}) as string;\n\n\t\tconst tableId = this.getNodeParameter('table', 0, undefined, {\n\t\t\textractValue: true,\n\t\t}) as string;\n\n\t\tconst dataMode = this.getNodeParameter('dataMode', 0) as string;\n\n\t\t// Get table columns to eliminate any columns not needed on the input\n\t\tconst columnsData = await microsoftApiRequest.call(\n\t\t\tthis,\n\t\t\t'GET',\n\t\t\t`/drive/items/${workbookId}/workbook/worksheets/${worksheetId}/tables/${tableId}/columns`,\n\t\t\t{},\n\t\t);\n\t\tconst columnsRow = columnsData.value.map((column: IDataObject) => column.name);\n\n\t\tconst body: IDataObject = {};\n\n\t\tlet values: string[][] = [];\n\n\t\tif (dataMode === 'raw') {\n\t\t\tconst data = this.getNodeParameter('data', 0);\n\t\t\tvalues = processJsonInput(data, 'Data') as string[][];\n\t\t}\n\n\t\tif (dataMode === 'autoMap') {\n\t\t\tconst itemsData = items.map((item) => item.json);\n\t\t\tfor (const item of itemsData) {\n\t\t\t\tconst updateRow: string[] = [];\n\n\t\t\t\tfor (const column of columnsRow) {\n\t\t\t\t\tupdateRow.push(item[column] as string);\n\t\t\t\t}\n\n\t\t\t\tvalues.push(updateRow);\n\t\t\t}\n\t\t}\n\n\t\tif (dataMode === 'define') {\n\t\t\tconst itemsData: IDataObject[] = [];\n\t\t\tfor (let itemIndex = 0; itemIndex < items.length; itemIndex++) {\n\t\t\t\tconst updateData: IDataObject = {};\n\t\t\t\tconst definedFields = this.getNodeParameter('fieldsUi.values', itemIndex, []) as Array<{\n\t\t\t\t\tcolumn: string;\n\t\t\t\t\tfieldValue: string;\n\t\t\t\t}>;\n\t\t\t\tfor (const entry of definedFields) {\n\t\t\t\t\tupdateData[entry.column] = entry.fieldValue;\n\t\t\t\t}\n\t\t\t\titemsData.push(updateData);\n\t\t\t}\n\n\t\t\tfor (const item of itemsData) {\n\t\t\t\tconst updateRow: string[] = [];\n\n\t\t\t\tfor (const column of columnsRow) {\n\t\t\t\t\tupdateRow.push(item[column] as string);\n\t\t\t\t}\n\n\t\t\t\tvalues.push(updateRow);\n\t\t\t}\n\t\t}\n\n\t\tbody.values = values;\n\n\t\tconst options = this.getNodeParameter('options', 0);\n\n\t\tif (options.index) {\n\t\t\tbody.index = options.index as number;\n\t\t}\n\n\t\tconst { id } = await microsoftApiRequest.call(\n\t\t\tthis,\n\t\t\t'POST',\n\t\t\t`/drive/items/${workbookId}/workbook/createSession`,\n\t\t\t{ persistChanges: true },\n\t\t);\n\t\tconst responseData = await microsoftApiRequest.call(\n\t\t\tthis,\n\t\t\t'POST',\n\t\t\t`/drive/items/${workbookId}/workbook/worksheets/${worksheetId}/tables/${tableId}/rows/add`,\n\t\t\tbody,\n\t\t\t{},\n\t\t\t'',\n\t\t\t{ 'workbook-session-id': id },\n\t\t);\n\t\tawait microsoftApiRequest.call(\n\t\t\tthis,\n\t\t\t'POST',\n\t\t\t`/drive/items/${workbookId}/workbook/closeSession`,\n\t\t\t{},\n\t\t\t{},\n\t\t\t'',\n\t\t\t{ 'workbook-session-id': id },\n\t\t);\n\n\t\tconst rawData = options.rawData as boolean;\n\t\tconst dataProperty = (options.dataProperty as string) || 'data';\n\n\t\treturnData.push(\n\t\t\t...prepareOutput.call(this, this.getNode(), responseData as ExcelResponse, {\n\t\t\t\tcolumnsRow,\n\t\t\t\tdataProperty,\n\t\t\t\trawData,\n\t\t\t}),\n\t\t);\n\t} catch (error) {\n\t\tif (this.continueOnFail()) {\n\t\t\tconst itemData = generatePairedItemData(this.getInputData().length);\n\t\t\tconst executionErrorData = this.helpers.constructExecutionMetaData(\n\t\t\t\tthis.helpers.returnJsonArray({ error: error.message }),\n\t\t\t\t{ itemData },\n\t\t\t);\n\t\t\treturnData.push(...executionErrorData);\n\t\t} else {\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\treturn returnData;\n}\n"],"mappings":"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","names":[]}