{"version":3,"sources":["../../../../../../../nodes/Microsoft/Excel/v2/actions/worksheet/readRows.operation.ts"],"sourcesContent":["import type {\n\tIDataObject,\n\tIExecuteFunctions,\n\tINodeExecutionData,\n\tINodeProperties,\n} from 'n8n-workflow';\n\nimport { updateDisplayOptions } from '@utils/utilities';\n\nimport type { ExcelResponse } from '../../helpers/interfaces';\nimport { checkRange, prepareOutput } from '../../helpers/utils';\nimport { microsoftApiRequest } from '../../transport';\nimport { workbookRLC, worksheetRLC } from '../common.descriptions';\n\nconst properties: INodeProperties[] = [\n\tworkbookRLC,\n\tworksheetRLC,\n\t{\n\t\tdisplayName: 'Select a Range',\n\t\tname: 'useRange',\n\t\ttype: 'boolean',\n\t\tdefault: false,\n\t},\n\t{\n\t\tdisplayName: 'Range',\n\t\tname: 'range',\n\t\ttype: 'string',\n\t\tplaceholder: 'e.g. A1:B2',\n\t\tdefault: '',\n\t\tdescription:\n\t\t\t'The sheet range to read the data from specified using a A1-style notation, has to be specific e.g A1:B5, generic ranges like A:B are not supported',\n\t\thint: 'Leave blank to return entire sheet',\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tuseRange: [true],\n\t\t\t},\n\t\t},\n\t},\n\t{\n\t\tdisplayName: 'Header Row',\n\t\tname: 'keyRow',\n\t\ttype: 'number',\n\t\ttypeOptions: {\n\t\t\tminValue: 0,\n\t\t},\n\t\tdefault: 0,\n\t\thint: 'Index of the row which contains the column names',\n\t\tdescription: \"Relative to selected 'Range', first row index is 0\",\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tuseRange: [true],\n\t\t\t},\n\t\t},\n\t},\n\t{\n\t\tdisplayName: 'First Data Row',\n\t\tname: 'dataStartRow',\n\t\ttype: 'number',\n\t\ttypeOptions: {\n\t\t\tminValue: 0,\n\t\t},\n\t\tdefault: 1,\n\t\thint: 'Index of first row which contains the actual data',\n\t\tdescription: \"Relative to selected 'Range', first row index is 0\",\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tuseRange: [true],\n\t\t\t},\n\t\t},\n\t},\n\t{\n\t\tdisplayName: 'Options',\n\t\tname: 'options',\n\t\ttype: 'collection',\n\t\tplaceholder: 'Add option',\n\t\tdefault: {},\n\t\toptions: [\n\t\t\t{\n\t\t\t\tdisplayName: 'RAW Data',\n\t\t\t\tname: 'rawData',\n\t\t\t\ttype: 'boolean',\n\t\t\t\t// eslint-disable-next-line n8n-nodes-base/node-param-default-wrong-for-boolean\n\t\t\t\tdefault: 0,\n\t\t\t\tdescription:\n\t\t\t\t\t'Whether the data should be returned RAW instead of parsed into keys according to their header',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Data Property',\n\t\t\t\tname: 'dataProperty',\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: 'data',\n\t\t\t\trequired: true,\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\trawData: [true],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdescription: 'The name of the property into which to write the RAW data',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Fields',\n\t\t\t\tname: 'fields',\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: '',\n\t\t\t\tdescription: 'Fields the response will containt. Multiple can be added separated by ,.',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\trawData: [true],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t},\n];\n\nconst displayOptions = {\n\tshow: {\n\t\tresource: ['worksheet'],\n\t\toperation: ['readRows'],\n\t},\n};\n\nexport const description = updateDisplayOptions(displayOptions, properties);\n\nexport async function execute(\n\tthis: IExecuteFunctions,\n\titems: INodeExecutionData[],\n): Promise<INodeExecutionData[]> {\n\t//https://docs.microsoft.com/en-us/graph/api/worksheet-range?view=graph-rest-1.0&tabs=http\n\tconst returnData: INodeExecutionData[] = [];\n\n\tfor (let i = 0; i < items.length; i++) {\n\t\tconst qs: IDataObject = {};\n\t\ttry {\n\t\t\tconst workbookId = this.getNodeParameter('workbook', i, undefined, {\n\t\t\t\textractValue: true,\n\t\t\t}) as string;\n\n\t\t\tconst worksheetId = this.getNodeParameter('worksheet', i, undefined, {\n\t\t\t\textractValue: true,\n\t\t\t}) as string;\n\n\t\t\tconst options = this.getNodeParameter('options', i, {});\n\n\t\t\tconst range = this.getNodeParameter('range', i, '') as string;\n\t\t\tcheckRange(this.getNode(), range);\n\n\t\t\tconst rawData = (options.rawData as boolean) || false;\n\n\t\t\tif (rawData && options.fields) {\n\t\t\t\tqs.$select = options.fields;\n\t\t\t}\n\n\t\t\tlet responseData;\n\t\t\tif (range) {\n\t\t\t\tresponseData = await microsoftApiRequest.call(\n\t\t\t\t\tthis,\n\t\t\t\t\t'GET',\n\t\t\t\t\t`/drive/items/${workbookId}/workbook/worksheets/${worksheetId}/range(address='${range}')`,\n\t\t\t\t\t{},\n\t\t\t\t\tqs,\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tresponseData = await microsoftApiRequest.call(\n\t\t\t\t\tthis,\n\t\t\t\t\t'GET',\n\t\t\t\t\t`/drive/items/${workbookId}/workbook/worksheets/${worksheetId}/usedRange`,\n\t\t\t\t\t{},\n\t\t\t\t\tqs,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (!rawData) {\n\t\t\t\tconst keyRow = this.getNodeParameter('keyRow', i, 0) as number;\n\t\t\t\tconst firstDataRow = this.getNodeParameter('dataStartRow', i, 1) as number;\n\n\t\t\t\treturnData.push(\n\t\t\t\t\t...prepareOutput.call(this, this.getNode(), responseData as ExcelResponse, {\n\t\t\t\t\t\trawData,\n\t\t\t\t\t\tkeyRow,\n\t\t\t\t\t\tfirstDataRow,\n\t\t\t\t\t}),\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tconst dataProperty = (options.dataProperty as string) || 'data';\n\t\t\t\treturnData.push(\n\t\t\t\t\t...prepareOutput.call(this, this.getNode(), responseData as ExcelResponse, {\n\t\t\t\t\t\trawData,\n\t\t\t\t\t\tdataProperty,\n\t\t\t\t\t}),\n\t\t\t\t);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tif (this.continueOnFail()) {\n\t\t\t\tconst executionErrorData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\tthis.helpers.returnJsonArray({ error: error.message }),\n\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t);\n\t\t\t\treturnData.push(...executionErrorData);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\treturn returnData;\n}\n"],"mappings":"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","names":[]}