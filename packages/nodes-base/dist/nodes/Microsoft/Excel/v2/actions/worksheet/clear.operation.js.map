{"version":3,"sources":["../../../../../../../nodes/Microsoft/Excel/v2/actions/worksheet/clear.operation.ts"],"sourcesContent":["import type { INodeExecutionData, IExecuteFunctions, INodeProperties } from 'n8n-workflow';\n\nimport { updateDisplayOptions } from '@utils/utilities';\n\nimport { microsoftApiRequest } from '../../transport';\nimport { workbookRLC, worksheetRLC } from '../common.descriptions';\n\nconst properties: INodeProperties[] = [\n\tworkbookRLC,\n\tworksheetRLC,\n\t{\n\t\tdisplayName: 'Apply To',\n\t\tname: 'applyTo',\n\t\ttype: 'options',\n\t\t//values in capital case as required by api\n\t\toptions: [\n\t\t\t{\n\t\t\t\tname: 'All',\n\t\t\t\tvalue: 'All',\n\t\t\t\tdescription: 'Clear data in cells and remove all formatting',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Formats',\n\t\t\t\tvalue: 'Formats',\n\t\t\t\tdescription: 'Clear formatting(e.g. font size, color) of cells',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Contents',\n\t\t\t\tvalue: 'Contents',\n\t\t\t\tdescription: 'Clear data contained in cells',\n\t\t\t},\n\t\t],\n\t\tdefault: 'All',\n\t},\n\t{\n\t\tdisplayName: 'Select a Range',\n\t\tname: 'useRange',\n\t\ttype: 'boolean',\n\t\tdefault: false,\n\t},\n\t{\n\t\tdisplayName: 'Range',\n\t\tname: 'range',\n\t\ttype: 'string',\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tuseRange: [true],\n\t\t\t},\n\t\t},\n\t\tplaceholder: 'e.g. A1:B2',\n\t\tdefault: '',\n\t\tdescription: 'The sheet range that would be cleared, specified using a A1-style notation',\n\t\thint: 'Leave blank for entire worksheet',\n\t},\n];\n\nconst displayOptions = {\n\tshow: {\n\t\tresource: ['worksheet'],\n\t\toperation: ['clear'],\n\t},\n};\n\nexport const description = updateDisplayOptions(displayOptions, properties);\n\nexport async function execute(\n\tthis: IExecuteFunctions,\n\titems: INodeExecutionData[],\n): Promise<INodeExecutionData[]> {\n\tconst returnData: INodeExecutionData[] = [];\n\n\tfor (let i = 0; i < items.length; i++) {\n\t\ttry {\n\t\t\tconst workbookId = this.getNodeParameter('workbook', i, undefined, {\n\t\t\t\textractValue: true,\n\t\t\t}) as string;\n\n\t\t\tconst worksheetId = this.getNodeParameter('worksheet', i, undefined, {\n\t\t\t\textractValue: true,\n\t\t\t}) as string;\n\n\t\t\tconst applyTo = this.getNodeParameter('applyTo', i) as string;\n\t\t\tconst useRange = this.getNodeParameter('useRange', i, false) as boolean;\n\n\t\t\tif (!useRange) {\n\t\t\t\tawait microsoftApiRequest.call(\n\t\t\t\t\tthis,\n\t\t\t\t\t'POST',\n\t\t\t\t\t`/drive/items/${workbookId}/workbook/worksheets/${worksheetId}/range/clear`,\n\t\t\t\t\t{ applyTo },\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tconst range = this.getNodeParameter('range', i, '') as string;\n\t\t\t\tawait microsoftApiRequest.call(\n\t\t\t\t\tthis,\n\t\t\t\t\t'POST',\n\t\t\t\t\t`/drive/items/${workbookId}/workbook/worksheets/${worksheetId}/range(address='${range}')/clear`,\n\t\t\t\t\t{ applyTo },\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\tthis.helpers.returnJsonArray({ success: true }),\n\t\t\t\t{ itemData: { item: i } },\n\t\t\t);\n\n\t\t\treturnData.push(...executionData);\n\t\t} catch (error) {\n\t\t\tif (this.continueOnFail()) {\n\t\t\t\tconst executionErrorData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\tthis.helpers.returnJsonArray({ error: error.message }),\n\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t);\n\t\t\t\treturnData.push(...executionErrorData);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\treturn returnData;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,uBAAqC;AAErC,uBAAoC;AACpC,oBAA0C;AAE1C,MAAM,aAAgC;AAAA,EACrC;AAAA,EACA;AAAA,EACA;AAAA,IACC,aAAa;AAAA,IACb,MAAM;AAAA,IACN,MAAM;AAAA;AAAA,IAEN,SAAS;AAAA,MACR;AAAA,QACC,MAAM;AAAA,QACN,OAAO;AAAA,QACP,aAAa;AAAA,MACd;AAAA,MACA;AAAA,QACC,MAAM;AAAA,QACN,OAAO;AAAA,QACP,aAAa;AAAA,MACd;AAAA,MACA;AAAA,QACC,MAAM;AAAA,QACN,OAAO;AAAA,QACP,aAAa;AAAA,MACd;AAAA,IACD;AAAA,IACA,SAAS;AAAA,EACV;AAAA,EACA;AAAA,IACC,aAAa;AAAA,IACb,MAAM;AAAA,IACN,MAAM;AAAA,IACN,SAAS;AAAA,EACV;AAAA,EACA;AAAA,IACC,aAAa;AAAA,IACb,MAAM;AAAA,IACN,MAAM;AAAA,IACN,gBAAgB;AAAA,MACf,MAAM;AAAA,QACL,UAAU,CAAC,IAAI;AAAA,MAChB;AAAA,IACD;AAAA,IACA,aAAa;AAAA,IACb,SAAS;AAAA,IACT,aAAa;AAAA,IACb,MAAM;AAAA,EACP;AACD;AAEA,MAAM,iBAAiB;AAAA,EACtB,MAAM;AAAA,IACL,UAAU,CAAC,WAAW;AAAA,IACtB,WAAW,CAAC,OAAO;AAAA,EACpB;AACD;AAEO,MAAM,kBAAc,uCAAqB,gBAAgB,UAAU;AAE1E,eAAsB,QAErB,OACgC;AAChC,QAAM,aAAmC,CAAC;AAE1C,WAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACtC,QAAI;AACH,YAAM,aAAa,KAAK,iBAAiB,YAAY,GAAG,QAAW;AAAA,QAClE,cAAc;AAAA,MACf,CAAC;AAED,YAAM,cAAc,KAAK,iBAAiB,aAAa,GAAG,QAAW;AAAA,QACpE,cAAc;AAAA,MACf,CAAC;AAED,YAAM,UAAU,KAAK,iBAAiB,WAAW,CAAC;AAClD,YAAM,WAAW,KAAK,iBAAiB,YAAY,GAAG,KAAK;AAE3D,UAAI,CAAC,UAAU;AACd,cAAM,qCAAoB;AAAA,UACzB;AAAA,UACA;AAAA,UACA,gBAAgB,UAAU,wBAAwB,WAAW;AAAA,UAC7D,EAAE,QAAQ;AAAA,QACX;AAAA,MACD,OAAO;AACN,cAAM,QAAQ,KAAK,iBAAiB,SAAS,GAAG,EAAE;AAClD,cAAM,qCAAoB;AAAA,UACzB;AAAA,UACA;AAAA,UACA,gBAAgB,UAAU,wBAAwB,WAAW,mBAAmB,KAAK;AAAA,UACrF,EAAE,QAAQ;AAAA,QACX;AAAA,MACD;AAEA,YAAM,gBAAgB,KAAK,QAAQ;AAAA,QAClC,KAAK,QAAQ,gBAAgB,EAAE,SAAS,KAAK,CAAC;AAAA,QAC9C,EAAE,UAAU,EAAE,MAAM,EAAE,EAAE;AAAA,MACzB;AAEA,iBAAW,KAAK,GAAG,aAAa;AAAA,IACjC,SAAS,OAAO;AACf,UAAI,KAAK,eAAe,GAAG;AAC1B,cAAM,qBAAqB,KAAK,QAAQ;AAAA,UACvC,KAAK,QAAQ,gBAAgB,EAAE,OAAO,MAAM,QAAQ,CAAC;AAAA,UACrD,EAAE,UAAU,EAAE,MAAM,EAAE,EAAE;AAAA,QACzB;AACA,mBAAW,KAAK,GAAG,kBAAkB;AACrC;AAAA,MACD;AACA,YAAM;AAAA,IACP;AAAA,EACD;AAEA,SAAO;AACR;","names":[]}