{"version":3,"sources":["../../../../../../../nodes/Microsoft/Excel/v2/actions/worksheet/append.operation.ts"],"sourcesContent":["import type {\n\tIDataObject,\n\tIExecuteFunctions,\n\tINodeExecutionData,\n\tINodeProperties,\n} from 'n8n-workflow';\n\nimport { processJsonInput, updateDisplayOptions } from '@utils/utilities';\n\nimport type { ExcelResponse } from '../../helpers/interfaces';\nimport { prepareOutput } from '../../helpers/utils';\nimport { microsoftApiRequest } from '../../transport';\nimport { workbookRLC, worksheetRLC } from '../common.descriptions';\n\nconst properties: INodeProperties[] = [\n\tworkbookRLC,\n\tworksheetRLC,\n\t{\n\t\tdisplayName: 'Data Mode',\n\t\tname: 'dataMode',\n\t\ttype: 'options',\n\t\tdefault: 'define',\n\t\toptions: [\n\t\t\t{\n\t\t\t\tname: 'Auto-Map Input Data to Columns',\n\t\t\t\tvalue: 'autoMap',\n\t\t\t\tdescription: 'Use when node input properties match destination column names',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Map Each Column Below',\n\t\t\t\tvalue: 'define',\n\t\t\t\tdescription: 'Set the value for each destination column',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Raw',\n\t\t\t\tvalue: 'raw',\n\t\t\t\tdescription: 'Send raw data as JSON',\n\t\t\t},\n\t\t],\n\t},\n\t{\n\t\tdisplayName: 'Data',\n\t\tname: 'data',\n\t\ttype: 'json',\n\t\tdefault: '',\n\t\trequired: true,\n\t\tplaceholder: 'e.g. [[\"Sara\",\"1/2/2006\",\"Berlin\"],[\"George\",\"5/3/2010\",\"Paris\"]]',\n\t\tdescription: 'Raw values for the specified range as array of string arrays in JSON format',\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tdataMode: ['raw'],\n\t\t\t},\n\t\t},\n\t},\n\t{\n\t\tdisplayName: 'Values to Send',\n\t\tname: 'fieldsUi',\n\t\tplaceholder: 'Add Field',\n\t\ttype: 'fixedCollection',\n\t\ttypeOptions: {\n\t\t\tmultipleValues: true,\n\t\t},\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tdataMode: ['define'],\n\t\t\t},\n\t\t},\n\t\tdefault: {},\n\t\toptions: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Field',\n\t\t\t\tname: 'values',\n\t\t\t\tvalues: [\n\t\t\t\t\t{\n\t\t\t\t\t\t// eslint-disable-next-line n8n-nodes-base/node-param-display-name-wrong-for-dynamic-options\n\t\t\t\t\t\tdisplayName: 'Column',\n\t\t\t\t\t\tname: 'column',\n\t\t\t\t\t\ttype: 'options',\n\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t'Choose from the list, or specify an ID using an <a href=\"https://docs.n8n.io/code/expressions/\">expression</a>',\n\t\t\t\t\t\ttypeOptions: {\n\t\t\t\t\t\t\tloadOptionsDependsOn: ['worksheet.value'],\n\t\t\t\t\t\t\tloadOptionsMethod: 'getWorksheetColumnRow',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Value',\n\t\t\t\t\t\tname: 'fieldValue',\n\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t],\n\t},\n\t{\n\t\tdisplayName: 'Options',\n\t\tname: 'options',\n\t\ttype: 'collection',\n\t\tplaceholder: 'Add option',\n\t\tdefault: {},\n\t\toptions: [\n\t\t\t{\n\t\t\t\tdisplayName: 'RAW Data',\n\t\t\t\tname: 'rawData',\n\t\t\t\ttype: 'boolean',\n\t\t\t\t// eslint-disable-next-line n8n-nodes-base/node-param-default-wrong-for-boolean\n\t\t\t\tdefault: 0,\n\t\t\t\tdescription:\n\t\t\t\t\t'Whether the data should be returned RAW instead of parsed into keys according to their header',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Data Property',\n\t\t\t\tname: 'dataProperty',\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: 'data',\n\t\t\t\trequired: true,\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\trawData: [true],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdescription: 'The name of the property into which to write the RAW data',\n\t\t\t},\n\t\t],\n\t},\n];\n\nconst displayOptions = {\n\tshow: {\n\t\tresource: ['worksheet'],\n\t\toperation: ['append'],\n\t},\n};\n\nexport const description = updateDisplayOptions(displayOptions, properties);\n\nexport async function execute(\n\tthis: IExecuteFunctions,\n\titems: INodeExecutionData[],\n): Promise<INodeExecutionData[]> {\n\tconst returnData: INodeExecutionData[] = [];\n\n\tconst workbookId = this.getNodeParameter('workbook', 0, undefined, {\n\t\textractValue: true,\n\t}) as string;\n\n\tconst worksheetId = this.getNodeParameter('worksheet', 0, undefined, {\n\t\textractValue: true,\n\t}) as string;\n\n\tconst dataMode = this.getNodeParameter('dataMode', 0) as string;\n\n\tconst worksheetData = await microsoftApiRequest.call(\n\t\tthis,\n\t\t'GET',\n\t\t`/drive/items/${workbookId}/workbook/worksheets/${worksheetId}/usedRange`,\n\t);\n\n\tlet values: string[][] = [];\n\n\tif (dataMode === 'raw') {\n\t\tconst data = this.getNodeParameter('data', 0);\n\t\tvalues = processJsonInput(data, 'Data') as string[][];\n\t}\n\n\tconst columnsRow = (worksheetData.values as string[][])[0];\n\n\tif (dataMode === 'autoMap') {\n\t\tconst itemsData = items.map((item) => item.json);\n\t\tfor (const item of itemsData) {\n\t\t\tconst updateRow: string[] = [];\n\n\t\t\tfor (const column of columnsRow) {\n\t\t\t\tupdateRow.push(item[column] as string);\n\t\t\t}\n\n\t\t\tvalues.push(updateRow);\n\t\t}\n\t}\n\n\tif (dataMode === 'define') {\n\t\tconst itemsData: IDataObject[] = [];\n\t\tfor (let itemIndex = 0; itemIndex < items.length; itemIndex++) {\n\t\t\tconst updateData: IDataObject = {};\n\t\t\tconst definedFields = this.getNodeParameter('fieldsUi.values', itemIndex, []) as Array<{\n\t\t\t\tcolumn: string;\n\t\t\t\tfieldValue: string;\n\t\t\t}>;\n\t\t\tfor (const entry of definedFields) {\n\t\t\t\tupdateData[entry.column] = entry.fieldValue;\n\t\t\t}\n\t\t\titemsData.push(updateData);\n\t\t}\n\n\t\tfor (const item of itemsData) {\n\t\t\tconst updateRow: string[] = [];\n\n\t\t\tfor (const column of columnsRow) {\n\t\t\t\tupdateRow.push(item[column] as string);\n\t\t\t}\n\n\t\t\tvalues.push(updateRow);\n\t\t}\n\t}\n\n\tconst { address } = worksheetData;\n\tconst usedRange = address.split('!')[1];\n\n\tconst [rangeFrom, rangeTo] = usedRange.split(':');\n\tconst cellDataFrom = rangeFrom.match(/([a-zA-Z]{1,10})([0-9]{0,10})/) || [];\n\tconst cellDataTo = rangeTo.match(/([a-zA-Z]{1,10})([0-9]{0,10})/) || [];\n\n\tconst from = `${cellDataFrom[1]}${Number(cellDataTo[2]) + 1}`;\n\tconst to = `${cellDataTo[1]}${Number(cellDataTo[2]) + Number(values.length)}`;\n\n\tconst responseData: ExcelResponse = await microsoftApiRequest.call(\n\t\tthis,\n\t\t'PATCH',\n\t\t`/drive/items/${workbookId}/workbook/worksheets/${worksheetId}/range(address='${from}:${to}')`,\n\t\t{ values },\n\t);\n\n\tconst rawData = this.getNodeParameter('options.rawData', 0, false) as boolean;\n\tconst dataProperty = this.getNodeParameter('options.dataProperty', 0, 'data') as string;\n\n\treturnData.push(\n\t\t...prepareOutput.call(this, this.getNode(), responseData, {\n\t\t\tcolumnsRow,\n\t\t\tdataProperty,\n\t\t\trawData,\n\t\t}),\n\t);\n\n\treturn returnData;\n}\n"],"mappings":"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","names":[]}