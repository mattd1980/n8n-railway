{"version":3,"sources":["../../../../../../../nodes/Microsoft/Excel/v2/actions/table/addTable.operation.ts"],"sourcesContent":["import type {\n\tIDataObject,\n\tIExecuteFunctions,\n\tINodeExecutionData,\n\tINodeProperties,\n} from 'n8n-workflow';\n\nimport { updateDisplayOptions } from '@utils/utilities';\n\nimport { microsoftApiRequest } from '../../transport';\nimport { workbookRLC, worksheetRLC } from '../common.descriptions';\n\nconst properties: INodeProperties[] = [\n\tworkbookRLC,\n\tworksheetRLC,\n\t{\n\t\tdisplayName: 'Select Range',\n\t\tname: 'selectRange',\n\t\ttype: 'options',\n\t\toptions: [\n\t\t\t{\n\t\t\t\tname: 'Automatically',\n\t\t\t\tvalue: 'auto',\n\t\t\t\tdescription: 'The whole used range on the selected sheet will be converted into a table',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Manually',\n\t\t\t\tvalue: 'manual',\n\t\t\t\tdescription: 'Select a range that will be converted into a table',\n\t\t\t},\n\t\t],\n\t\tdefault: 'auto',\n\t},\n\t{\n\t\tdisplayName: 'Range',\n\t\tname: 'range',\n\t\ttype: 'string',\n\t\tdefault: '',\n\t\tplaceholder: 'A1:B2',\n\t\tdescription: 'The range of cells that will be converted to a table',\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tselectRange: ['manual'],\n\t\t\t},\n\t\t},\n\t},\n\t{\n\t\tdisplayName: 'Has Headers',\n\t\tname: 'hasHeaders',\n\t\ttype: 'boolean',\n\t\tdefault: true,\n\t\tdescription:\n\t\t\t'Whether the range has column labels. When this property set to false Excel will automatically generate header shifting the data down by one row.',\n\t},\n];\n\nconst displayOptions = {\n\tshow: {\n\t\tresource: ['table'],\n\t\toperation: ['addTable'],\n\t},\n};\n\nexport const description = updateDisplayOptions(displayOptions, properties);\n\nexport async function execute(\n\tthis: IExecuteFunctions,\n\titems: INodeExecutionData[],\n): Promise<INodeExecutionData[]> {\n\t//https://learn.microsoft.com/en-us/graph/api/worksheet-post-tables?view=graph-rest-1.0\n\tconst returnData: INodeExecutionData[] = [];\n\n\tfor (let i = 0; i < items.length; i++) {\n\t\ttry {\n\t\t\tconst workbookId = this.getNodeParameter('workbook', i, undefined, {\n\t\t\t\textractValue: true,\n\t\t\t}) as string;\n\n\t\t\tconst worksheetId = this.getNodeParameter('worksheet', i, undefined, {\n\t\t\t\textractValue: true,\n\t\t\t}) as string;\n\n\t\t\tconst selectRange = this.getNodeParameter('selectRange', i) as string;\n\n\t\t\tconst hasHeaders = this.getNodeParameter('hasHeaders', i) as boolean;\n\n\t\t\tlet range = '';\n\t\t\tif (selectRange === 'auto') {\n\t\t\t\tconst { address } = await microsoftApiRequest.call(\n\t\t\t\t\tthis,\n\t\t\t\t\t'GET',\n\t\t\t\t\t`/drive/items/${workbookId}/workbook/worksheets/${worksheetId}/usedRange`,\n\t\t\t\t\tundefined,\n\t\t\t\t\t{\n\t\t\t\t\t\tselect: 'address',\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t\trange = address.split('!')[1];\n\t\t\t} else {\n\t\t\t\trange = this.getNodeParameter('range', i) as string;\n\t\t\t}\n\n\t\t\tconst responseData = await microsoftApiRequest.call(\n\t\t\t\tthis,\n\t\t\t\t'POST',\n\t\t\t\t`/drive/items/${workbookId}/workbook/worksheets/${worksheetId}/tables/add`,\n\t\t\t\t{\n\t\t\t\t\taddress: range,\n\t\t\t\t\thasHeaders,\n\t\t\t\t},\n\t\t\t);\n\n\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject),\n\t\t\t\t{ itemData: { item: i } },\n\t\t\t);\n\n\t\t\treturnData.push(...executionData);\n\t\t} catch (error) {\n\t\t\tif (this.continueOnFail()) {\n\t\t\t\tconst executionErrorData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\tthis.helpers.returnJsonArray({ error: error.message }),\n\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t);\n\t\t\t\treturnData.push(...executionErrorData);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\treturn returnData;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA,uBAAqC;AAErC,uBAAoC;AACpC,oBAA0C;AAE1C,MAAM,aAAgC;AAAA,EACrC;AAAA,EACA;AAAA,EACA;AAAA,IACC,aAAa;AAAA,IACb,MAAM;AAAA,IACN,MAAM;AAAA,IACN,SAAS;AAAA,MACR;AAAA,QACC,MAAM;AAAA,QACN,OAAO;AAAA,QACP,aAAa;AAAA,MACd;AAAA,MACA;AAAA,QACC,MAAM;AAAA,QACN,OAAO;AAAA,QACP,aAAa;AAAA,MACd;AAAA,IACD;AAAA,IACA,SAAS;AAAA,EACV;AAAA,EACA;AAAA,IACC,aAAa;AAAA,IACb,MAAM;AAAA,IACN,MAAM;AAAA,IACN,SAAS;AAAA,IACT,aAAa;AAAA,IACb,aAAa;AAAA,IACb,gBAAgB;AAAA,MACf,MAAM;AAAA,QACL,aAAa,CAAC,QAAQ;AAAA,MACvB;AAAA,IACD;AAAA,EACD;AAAA,EACA;AAAA,IACC,aAAa;AAAA,IACb,MAAM;AAAA,IACN,MAAM;AAAA,IACN,SAAS;AAAA,IACT,aACC;AAAA,EACF;AACD;AAEA,MAAM,iBAAiB;AAAA,EACtB,MAAM;AAAA,IACL,UAAU,CAAC,OAAO;AAAA,IAClB,WAAW,CAAC,UAAU;AAAA,EACvB;AACD;AAEO,MAAM,kBAAc,uCAAqB,gBAAgB,UAAU;AAE1E,eAAsB,QAErB,OACgC;AAEhC,QAAM,aAAmC,CAAC;AAE1C,WAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACtC,QAAI;AACH,YAAM,aAAa,KAAK,iBAAiB,YAAY,GAAG,QAAW;AAAA,QAClE,cAAc;AAAA,MACf,CAAC;AAED,YAAM,cAAc,KAAK,iBAAiB,aAAa,GAAG,QAAW;AAAA,QACpE,cAAc;AAAA,MACf,CAAC;AAED,YAAM,cAAc,KAAK,iBAAiB,eAAe,CAAC;AAE1D,YAAM,aAAa,KAAK,iBAAiB,cAAc,CAAC;AAExD,UAAI,QAAQ;AACZ,UAAI,gBAAgB,QAAQ;AAC3B,cAAM,EAAE,QAAQ,IAAI,MAAM,qCAAoB;AAAA,UAC7C;AAAA,UACA;AAAA,UACA,gBAAgB,UAAU,wBAAwB,WAAW;AAAA,UAC7D;AAAA,UACA;AAAA,YACC,QAAQ;AAAA,UACT;AAAA,QACD;AACA,gBAAQ,QAAQ,MAAM,GAAG,EAAE,CAAC;AAAA,MAC7B,OAAO;AACN,gBAAQ,KAAK,iBAAiB,SAAS,CAAC;AAAA,MACzC;AAEA,YAAM,eAAe,MAAM,qCAAoB;AAAA,QAC9C;AAAA,QACA;AAAA,QACA,gBAAgB,UAAU,wBAAwB,WAAW;AAAA,QAC7D;AAAA,UACC,SAAS;AAAA,UACT;AAAA,QACD;AAAA,MACD;AAEA,YAAM,gBAAgB,KAAK,QAAQ;AAAA,QAClC,KAAK,QAAQ,gBAAgB,YAA2B;AAAA,QACxD,EAAE,UAAU,EAAE,MAAM,EAAE,EAAE;AAAA,MACzB;AAEA,iBAAW,KAAK,GAAG,aAAa;AAAA,IACjC,SAAS,OAAO;AACf,UAAI,KAAK,eAAe,GAAG;AAC1B,cAAM,qBAAqB,KAAK,QAAQ;AAAA,UACvC,KAAK,QAAQ,gBAAgB,EAAE,OAAO,MAAM,QAAQ,CAAC;AAAA,UACrD,EAAE,UAAU,EAAE,MAAM,EAAE,EAAE;AAAA,QACzB;AACA,mBAAW,KAAK,GAAG,kBAAkB;AACrC;AAAA,MACD;AACA,YAAM;AAAA,IACP;AAAA,EACD;AAEA,SAAO;AACR;","names":[]}