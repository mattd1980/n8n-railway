{"version":3,"sources":["../../../../../../../nodes/Microsoft/Teams/v2/actions/chatMessage/create.operation.ts"],"sourcesContent":["import type { INodeProperties, IExecuteFunctions, IDataObject } from 'n8n-workflow';\n\nimport { updateDisplayOptions } from '@utils/utilities';\n\nimport { chatRLC } from '../../descriptions';\nimport { prepareMessage } from '../../helpers/utils';\nimport { microsoftApiRequest } from '../../transport';\n\nconst properties: INodeProperties[] = [\n\tchatRLC,\n\t{\n\t\tdisplayName: 'Content Type',\n\t\tname: 'contentType',\n\t\trequired: true,\n\t\ttype: 'options',\n\t\toptions: [\n\t\t\t{\n\t\t\t\tname: 'Text',\n\t\t\t\tvalue: 'text',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'HTML',\n\t\t\t\tvalue: 'html',\n\t\t\t},\n\t\t],\n\t\tdefault: 'text',\n\t\tdescription: 'Whether the message is plain text or HTML',\n\t},\n\t{\n\t\tdisplayName: 'Message',\n\t\tname: 'message',\n\t\trequired: true,\n\t\ttype: 'string',\n\t\tdefault: '',\n\t\tdescription: 'The content of the message to be sent',\n\t\ttypeOptions: {\n\t\t\trows: 2,\n\t\t},\n\t},\n\t{\n\t\tdisplayName: 'Options',\n\t\tname: 'options',\n\t\ttype: 'collection',\n\t\tdefault: {},\n\t\tdescription: 'Other options to set',\n\t\tplaceholder: 'Add option',\n\t\toptions: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Include Link to Workflow',\n\t\t\t\tname: 'includeLinkToWorkflow',\n\t\t\t\ttype: 'boolean',\n\t\t\t\tdefault: true,\n\t\t\t\tdescription:\n\t\t\t\t\t'Whether to append a link to this workflow at the end of the message. This is helpful if you have many workflows sending messages.',\n\t\t\t},\n\t\t],\n\t},\n];\n\nconst displayOptions = {\n\tshow: {\n\t\tresource: ['chatMessage'],\n\t\toperation: ['create'],\n\t},\n};\n\nexport const description = updateDisplayOptions(displayOptions, properties);\n\nexport async function execute(this: IExecuteFunctions, i: number, instanceId: string) {\n\t// https://docs.microsoft.com/en-us/graph/api/channel-post-messages?view=graph-rest-1.0&tabs=http\n\n\tconst chatId = this.getNodeParameter('chatId', i, '', { extractValue: true }) as string;\n\tconst contentType = this.getNodeParameter('contentType', i) as string;\n\tconst message = this.getNodeParameter('message', i) as string;\n\tconst options = this.getNodeParameter('options', i, {});\n\n\tconst includeLinkToWorkflow = options.includeLinkToWorkflow !== false;\n\n\tconst body: IDataObject = prepareMessage.call(\n\t\tthis,\n\t\tmessage,\n\t\tcontentType,\n\t\tincludeLinkToWorkflow,\n\t\tinstanceId,\n\t);\n\n\treturn await microsoftApiRequest.call(this, 'POST', `/v1.0/chats/${chatId}/messages`, body);\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,uBAAqC;AAErC,0BAAwB;AACxB,mBAA+B;AAC/B,uBAAoC;AAEpC,MAAM,aAAgC;AAAA,EACrC;AAAA,EACA;AAAA,IACC,aAAa;AAAA,IACb,MAAM;AAAA,IACN,UAAU;AAAA,IACV,MAAM;AAAA,IACN,SAAS;AAAA,MACR;AAAA,QACC,MAAM;AAAA,QACN,OAAO;AAAA,MACR;AAAA,MACA;AAAA,QACC,MAAM;AAAA,QACN,OAAO;AAAA,MACR;AAAA,IACD;AAAA,IACA,SAAS;AAAA,IACT,aAAa;AAAA,EACd;AAAA,EACA;AAAA,IACC,aAAa;AAAA,IACb,MAAM;AAAA,IACN,UAAU;AAAA,IACV,MAAM;AAAA,IACN,SAAS;AAAA,IACT,aAAa;AAAA,IACb,aAAa;AAAA,MACZ,MAAM;AAAA,IACP;AAAA,EACD;AAAA,EACA;AAAA,IACC,aAAa;AAAA,IACb,MAAM;AAAA,IACN,MAAM;AAAA,IACN,SAAS,CAAC;AAAA,IACV,aAAa;AAAA,IACb,aAAa;AAAA,IACb,SAAS;AAAA,MACR;AAAA,QACC,aAAa;AAAA,QACb,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,QACT,aACC;AAAA,MACF;AAAA,IACD;AAAA,EACD;AACD;AAEA,MAAM,iBAAiB;AAAA,EACtB,MAAM;AAAA,IACL,UAAU,CAAC,aAAa;AAAA,IACxB,WAAW,CAAC,QAAQ;AAAA,EACrB;AACD;AAEO,MAAM,kBAAc,uCAAqB,gBAAgB,UAAU;AAE1E,eAAsB,QAAiC,GAAW,YAAoB;AAGrF,QAAM,SAAS,KAAK,iBAAiB,UAAU,GAAG,IAAI,EAAE,cAAc,KAAK,CAAC;AAC5E,QAAM,cAAc,KAAK,iBAAiB,eAAe,CAAC;AAC1D,QAAM,UAAU,KAAK,iBAAiB,WAAW,CAAC;AAClD,QAAM,UAAU,KAAK,iBAAiB,WAAW,GAAG,CAAC,CAAC;AAEtD,QAAM,wBAAwB,QAAQ,0BAA0B;AAEhE,QAAM,OAAoB,4BAAe;AAAA,IACxC;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACD;AAEA,SAAO,MAAM,qCAAoB,KAAK,MAAM,QAAQ,eAAe,MAAM,aAAa,IAAI;AAC3F;","names":[]}