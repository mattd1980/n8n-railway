{"version":3,"sources":["../../../../../../../nodes/Microsoft/Teams/v2/actions/task/update.operation.ts"],"sourcesContent":["import { DateTime } from 'luxon';\nimport type { INodeProperties, IExecuteFunctions, IDataObject } from 'n8n-workflow';\n\nimport { updateDisplayOptions } from '@utils/utilities';\n\nimport { bucketRLC, groupRLC, memberRLC, planRLC } from '../../descriptions';\nimport { microsoftApiRequest } from '../../transport';\n\nconst properties: INodeProperties[] = [\n\t{\n\t\tdisplayName: 'Task ID',\n\t\tname: 'taskId',\n\t\trequired: true,\n\t\ttype: 'string',\n\t\tdefault: '',\n\t\tplaceholder: 'e.g. h3ufgLvXPkSRzYm-zO5cY5gANtBQ',\n\t\tdescription: 'The ID of the task to update',\n\t},\n\t{\n\t\tdisplayName: 'Update Fields',\n\t\tname: 'updateFields',\n\t\ttype: 'collection',\n\t\tdefault: {},\n\t\tplaceholder: 'Add Field',\n\t\toptions: [\n\t\t\t{\n\t\t\t\t...memberRLC,\n\t\t\t\tdisplayName: 'Assigned To',\n\t\t\t\tname: 'assignedTo',\n\t\t\t\tdescription: 'Who the task should be assigned to',\n\t\t\t\thint: \"Select 'Team' from options first\",\n\t\t\t\trequired: false,\n\t\t\t\ttypeOptions: {\n\t\t\t\t\tloadOptionsDependsOn: ['updateFields.groupId.value'],\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t...bucketRLC,\n\t\t\t\trequired: false,\n\t\t\t\ttypeOptions: {\n\t\t\t\t\tloadOptionsDependsOn: ['updateFields.planId.value'],\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Due Date Time',\n\t\t\t\tname: 'dueDateTime',\n\t\t\t\ttype: 'string',\n\t\t\t\tvalidateType: 'dateTime',\n\t\t\t\tdefault: '',\n\t\t\t\tdescription:\n\t\t\t\t\t'Date and time at which the task is due. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time.',\n\t\t\t},\n\t\t\t{\n\t\t\t\t...groupRLC,\n\t\t\t\trequired: false,\n\t\t\t\ttypeOptions: {\n\t\t\t\t\tloadOptionsDependsOn: ['/groupSource'],\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Percent Complete',\n\t\t\t\tname: 'percentComplete',\n\t\t\t\ttype: 'number',\n\t\t\t\ttypeOptions: {\n\t\t\t\t\tminValue: 0,\n\t\t\t\t\tmaxValue: 100,\n\t\t\t\t},\n\t\t\t\tdefault: 0,\n\t\t\t\tplaceholder: 'e.g. 75',\n\t\t\t\tdescription:\n\t\t\t\t\t'Percentage of task completion. When set to 100, the task is considered completed.',\n\t\t\t},\n\t\t\t{\n\t\t\t\t...planRLC,\n\t\t\t\trequired: false,\n\t\t\t\thint: \"Select 'Team' from options first\",\n\t\t\t\ttypeOptions: {\n\t\t\t\t\tloadOptionsDependsOn: ['updateFields.groupId.value'],\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Title',\n\t\t\t\tname: 'title',\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: '',\n\t\t\t\tplaceholder: 'e.g. my task',\n\t\t\t\tdescription: 'Title of the task',\n\t\t\t},\n\t\t],\n\t},\n];\n\nconst displayOptions = {\n\tshow: {\n\t\tresource: ['task'],\n\t\toperation: ['update'],\n\t},\n};\n\nexport const description = updateDisplayOptions(displayOptions, properties);\n\nexport async function execute(this: IExecuteFunctions, i: number) {\n\t//https://docs.microsoft.com/en-us/graph/api/plannertask-update?view=graph-rest-1.0&tabs=http\n\n\tconst taskId = this.getNodeParameter('taskId', i, '', { extractValue: true }) as string;\n\tconst updateFields = this.getNodeParameter('updateFields', i);\n\n\tfor (const key of Object.keys(updateFields)) {\n\t\tif (key === 'groupId') {\n\t\t\t// tasks are assigned to a plan and bucket, group is used for filtering\n\t\t\tdelete updateFields.groupId;\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (key === 'assignedTo') {\n\t\t\tconst assignedTo = this.getNodeParameter('updateFields.assignedTo', i, '', {\n\t\t\t\textractValue: true,\n\t\t\t}) as string;\n\n\t\t\tupdateFields.assignments = {\n\t\t\t\t[assignedTo]: {\n\t\t\t\t\t'@odata.type': 'microsoft.graph.plannerAssignment',\n\t\t\t\t\torderHint: ' !',\n\t\t\t\t},\n\t\t\t};\n\t\t\tdelete updateFields.assignedTo;\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (['bucketId', 'planId'].includes(key)) {\n\t\t\tupdateFields[key] = this.getNodeParameter(`updateFields.${key}`, i, '', {\n\t\t\t\textractValue: true,\n\t\t\t}) as string;\n\t\t}\n\n\t\tif (key === 'dueDateTime' && updateFields.dueDateTime instanceof DateTime) {\n\t\t\tupdateFields.dueDateTime = updateFields.dueDateTime.toISO();\n\t\t}\n\t}\n\n\tconst body: IDataObject = {};\n\tObject.assign(body, updateFields);\n\n\tconst task = await microsoftApiRequest.call(this, 'GET', `/v1.0/planner/tasks/${taskId}`);\n\n\tawait microsoftApiRequest.call(\n\t\tthis,\n\t\t'PATCH',\n\t\t`/v1.0/planner/tasks/${taskId}`,\n\t\tbody,\n\t\t{},\n\t\tundefined,\n\t\t{ 'If-Match': task['@odata.etag'] },\n\t);\n\n\treturn { success: true };\n}\n"],"mappings":"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","names":[]}