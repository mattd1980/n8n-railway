{"version":3,"sources":["../../../../../nodes/Microsoft/Teams/v1/MicrosoftTeamsV1.node.ts"],"sourcesContent":["import {\n\ttype IExecuteFunctions,\n\ttype IDataObject,\n\ttype ILoadOptionsFunctions,\n\ttype INodeExecutionData,\n\ttype INodePropertyOptions,\n\ttype INodeType,\n\ttype INodeTypeDescription,\n\ttype INodeTypeBaseDescription,\n\tNodeConnectionTypes,\n} from 'n8n-workflow';\n\nimport { channelFields, channelOperations } from './ChannelDescription';\nimport { channelMessageFields, channelMessageOperations } from './ChannelMessageDescription';\nimport { chatMessageFields, chatMessageOperations } from './ChatMessageDescription';\nimport {\n\tmicrosoftApiRequest,\n\tmicrosoftApiRequestAllItems,\n\tprepareMessage,\n} from './GenericFunctions';\nimport { taskFields, taskOperations } from './TaskDescription';\nimport { oldVersionNotice } from '../../../../utils/descriptions';\n\nconst versionDescription: INodeTypeDescription = {\n\tdisplayName: 'Microsoft Teams',\n\tname: 'microsoftTeams',\n\ticon: 'file:teams.svg',\n\tgroup: ['input'],\n\tversion: [1, 1.1],\n\tsubtitle: '={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}',\n\tdescription: 'Consume Microsoft Teams API',\n\tdefaults: {\n\t\tname: 'Microsoft Teams',\n\t},\n\tinputs: [NodeConnectionTypes.Main],\n\toutputs: [NodeConnectionTypes.Main],\n\tcredentials: [\n\t\t{\n\t\t\tname: 'microsoftTeamsOAuth2Api',\n\t\t\trequired: true,\n\t\t},\n\t],\n\tproperties: [\n\t\toldVersionNotice,\n\t\t{\n\t\t\tdisplayName: 'Resource',\n\t\t\tname: 'resource',\n\t\t\ttype: 'options',\n\t\t\tnoDataExpression: true,\n\t\t\toptions: [\n\t\t\t\t{\n\t\t\t\t\tname: 'Channel',\n\t\t\t\t\tvalue: 'channel',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'Channel Message (Beta)',\n\t\t\t\t\tvalue: 'channelMessage',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'Chat Message',\n\t\t\t\t\tvalue: 'chatMessage',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'Task',\n\t\t\t\t\tvalue: 'task',\n\t\t\t\t},\n\t\t\t],\n\t\t\tdefault: 'channel',\n\t\t},\n\t\t// CHANNEL\n\t\t...channelOperations,\n\t\t...channelFields,\n\t\t/// MESSAGE\n\t\t...channelMessageOperations,\n\t\t...channelMessageFields,\n\t\t...chatMessageOperations,\n\t\t...chatMessageFields,\n\t\t///TASK\n\t\t...taskOperations,\n\t\t...taskFields,\n\t],\n};\n\nexport class MicrosoftTeamsV1 implements INodeType {\n\tdescription: INodeTypeDescription;\n\n\tconstructor(baseDescription: INodeTypeBaseDescription) {\n\t\tthis.description = {\n\t\t\t...baseDescription,\n\t\t\t...versionDescription,\n\t\t};\n\t}\n\n\tmethods = {\n\t\tloadOptions: {\n\t\t\t// Get all the team's channels to display them to user so that they can\n\t\t\t// select them easily\n\t\t\tasync getChannels(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst returnData: INodePropertyOptions[] = [];\n\t\t\t\tconst teamId = this.getCurrentNodeParameter('teamId') as string;\n\t\t\t\tconst { value } = await microsoftApiRequest.call(\n\t\t\t\t\tthis,\n\t\t\t\t\t'GET',\n\t\t\t\t\t`/v1.0/teams/${teamId}/channels`,\n\t\t\t\t);\n\t\t\t\tfor (const channel of value) {\n\t\t\t\t\tconst channelName = channel.displayName;\n\t\t\t\t\tconst channelId = channel.id;\n\t\t\t\t\treturnData.push({\n\t\t\t\t\t\tname: channelName,\n\t\t\t\t\t\tvalue: channelId,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn returnData;\n\t\t\t},\n\t\t\t// Get all the teams to display them to user so that they can\n\t\t\t// select them easily\n\t\t\tasync getTeams(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst returnData: INodePropertyOptions[] = [];\n\t\t\t\tconst { value } = await microsoftApiRequest.call(this, 'GET', '/v1.0/me/joinedTeams');\n\t\t\t\tfor (const team of value) {\n\t\t\t\t\tconst teamName = team.displayName;\n\t\t\t\t\tconst teamId = team.id;\n\t\t\t\t\treturnData.push({\n\t\t\t\t\t\tname: teamName,\n\t\t\t\t\t\tvalue: teamId,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn returnData;\n\t\t\t},\n\t\t\t// Get all the groups to display them to user so that they can\n\t\t\t// select them easily\n\t\t\tasync getGroups(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst returnData: INodePropertyOptions[] = [];\n\t\t\t\tconst groupSource = this.getCurrentNodeParameter('groupSource') as string;\n\t\t\t\tlet requestUrl = '/v1.0/groups' as string;\n\t\t\t\tif (groupSource === 'mine') {\n\t\t\t\t\trequestUrl = '/v1.0/me/transitiveMemberOf';\n\t\t\t\t}\n\t\t\t\tconst { value } = await microsoftApiRequest.call(this, 'GET', requestUrl);\n\t\t\t\tfor (const group of value) {\n\t\t\t\t\treturnData.push({\n\t\t\t\t\t\tname: group.displayName || group.mail || group.id,\n\t\t\t\t\t\tvalue: group.id,\n\t\t\t\t\t\tdescription: group.mail,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn returnData;\n\t\t\t},\n\t\t\t// Get all the plans to display them to user so that they can\n\t\t\t// select them easily\n\t\t\tasync getPlans(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst returnData: INodePropertyOptions[] = [];\n\t\t\t\tlet groupId = this.getCurrentNodeParameter('groupId') as string;\n\t\t\t\tconst operation = this.getNodeParameter('operation', 0);\n\t\t\t\tif (operation === 'update' && (groupId === undefined || groupId === null)) {\n\t\t\t\t\t// groupId not found at base, check updateFields for the groupId\n\t\t\t\t\tgroupId = this.getCurrentNodeParameter('updateFields.groupId') as string;\n\t\t\t\t}\n\t\t\t\tconst { value } = await microsoftApiRequest.call(\n\t\t\t\t\tthis,\n\t\t\t\t\t'GET',\n\t\t\t\t\t`/v1.0/groups/${groupId}/planner/plans`,\n\t\t\t\t);\n\t\t\t\tfor (const plan of value) {\n\t\t\t\t\treturnData.push({\n\t\t\t\t\t\tname: plan.title,\n\t\t\t\t\t\tvalue: plan.id,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn returnData;\n\t\t\t},\n\t\t\t// Get all the plans to display them to user so that they can\n\t\t\t// select them easily\n\t\t\tasync getBuckets(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst returnData: INodePropertyOptions[] = [];\n\t\t\t\tlet planId = this.getCurrentNodeParameter('planId') as string;\n\t\t\t\tconst operation = this.getNodeParameter('operation', 0);\n\t\t\t\tif (operation === 'update' && (planId === undefined || planId === null)) {\n\t\t\t\t\t// planId not found at base, check updateFields for the planId\n\t\t\t\t\tplanId = this.getCurrentNodeParameter('updateFields.planId') as string;\n\t\t\t\t}\n\t\t\t\tconst { value } = await microsoftApiRequest.call(\n\t\t\t\t\tthis,\n\t\t\t\t\t'GET',\n\t\t\t\t\t`/v1.0/planner/plans/${planId}/buckets`,\n\t\t\t\t);\n\t\t\t\tfor (const bucket of value) {\n\t\t\t\t\treturnData.push({\n\t\t\t\t\t\tname: bucket.name,\n\t\t\t\t\t\tvalue: bucket.id,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn returnData;\n\t\t\t},\n\t\t\t// Get all the plans to display them to user so that they can\n\t\t\t// select them easily\n\t\t\tasync getMembers(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst returnData: INodePropertyOptions[] = [];\n\t\t\t\tlet groupId = this.getCurrentNodeParameter('groupId') as string;\n\t\t\t\tconst operation = this.getNodeParameter('operation', 0);\n\t\t\t\tif (operation === 'update' && (groupId === undefined || groupId === null)) {\n\t\t\t\t\t// groupId not found at base, check updateFields for the groupId\n\t\t\t\t\tgroupId = this.getCurrentNodeParameter('updateFields.groupId') as string;\n\t\t\t\t}\n\t\t\t\tconst { value } = await microsoftApiRequest.call(\n\t\t\t\t\tthis,\n\t\t\t\t\t'GET',\n\t\t\t\t\t`/v1.0/groups/${groupId}/members`,\n\t\t\t\t);\n\t\t\t\tfor (const member of value) {\n\t\t\t\t\treturnData.push({\n\t\t\t\t\t\tname: member.displayName,\n\t\t\t\t\t\tvalue: member.id,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn returnData;\n\t\t\t},\n\t\t\t// Get all the labels to display them to user so that they can\n\t\t\t// select them easily\n\t\t\tasync getLabels(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst returnData: INodePropertyOptions[] = [];\n\n\t\t\t\tlet planId = this.getCurrentNodeParameter('planId') as string;\n\t\t\t\tconst operation = this.getNodeParameter('operation', 0);\n\t\t\t\tif (operation === 'update' && (planId === undefined || planId === null)) {\n\t\t\t\t\t// planId not found at base, check updateFields for the planId\n\t\t\t\t\tplanId = this.getCurrentNodeParameter('updateFields.planId') as string;\n\t\t\t\t}\n\t\t\t\tconst { categoryDescriptions } = await microsoftApiRequest.call(\n\t\t\t\t\tthis,\n\t\t\t\t\t'GET',\n\t\t\t\t\t`/v1.0/planner/plans/${planId}/details`,\n\t\t\t\t);\n\t\t\t\tfor (const key of Object.keys(categoryDescriptions as IDataObject)) {\n\t\t\t\t\tif (categoryDescriptions[key] !== null) {\n\t\t\t\t\t\treturnData.push({\n\t\t\t\t\t\t\tname: categoryDescriptions[key],\n\t\t\t\t\t\t\tvalue: key,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn returnData;\n\t\t\t},\n\t\t\t// Get all the chats to display them to user so that they can\n\t\t\t// select them easily\n\t\t\tasync getChats(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst returnData: INodePropertyOptions[] = [];\n\t\t\t\tconst qs: IDataObject = {\n\t\t\t\t\t$expand: 'members',\n\t\t\t\t};\n\t\t\t\tconst { value } = await microsoftApiRequest.call(this, 'GET', '/v1.0/chats', {}, qs);\n\t\t\t\tfor (const chat of value) {\n\t\t\t\t\tif (!chat.topic) {\n\t\t\t\t\t\tchat.topic = chat.members\n\t\t\t\t\t\t\t.filter((member: IDataObject) => member.displayName)\n\t\t\t\t\t\t\t.map((member: IDataObject) => member.displayName)\n\t\t\t\t\t\t\t.join(', ');\n\t\t\t\t\t}\n\t\t\t\t\tconst chatName = `${chat.topic || '(no title) - ' + (chat.id as string)} (${\n\t\t\t\t\t\tchat.chatType\n\t\t\t\t\t})`;\n\t\t\t\t\tconst chatId = chat.id;\n\t\t\t\t\treturnData.push({\n\t\t\t\t\t\tname: chatName,\n\t\t\t\t\t\tvalue: chatId,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn returnData;\n\t\t\t},\n\t\t},\n\t};\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t\tconst items = this.getInputData();\n\t\tconst returnData: INodeExecutionData[] = [];\n\t\tconst length = items.length;\n\t\tconst qs: IDataObject = {};\n\t\tlet responseData;\n\t\tconst resource = this.getNodeParameter('resource', 0);\n\t\tconst operation = this.getNodeParameter('operation', 0);\n\t\tconst nodeVersion = this.getNode().typeVersion;\n\t\tconst instanceId = this.getInstanceId();\n\n\t\tfor (let i = 0; i < length; i++) {\n\t\t\ttry {\n\t\t\t\tif (resource === 'channel') {\n\t\t\t\t\t//https://docs.microsoft.com/en-us/graph/api/channel-post?view=graph-rest-beta&tabs=http\n\t\t\t\t\tif (operation === 'create') {\n\t\t\t\t\t\tconst teamId = this.getNodeParameter('teamId', i) as string;\n\t\t\t\t\t\tconst name = this.getNodeParameter('name', i) as string;\n\t\t\t\t\t\tconst options = this.getNodeParameter('options', i);\n\t\t\t\t\t\tconst body: IDataObject = {\n\t\t\t\t\t\t\tdisplayName: name,\n\t\t\t\t\t\t};\n\t\t\t\t\t\tif (options.description) {\n\t\t\t\t\t\t\tbody.description = options.description as string;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (options.type) {\n\t\t\t\t\t\t\tbody.membershipType = options.type as string;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresponseData = await microsoftApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'POST',\n\t\t\t\t\t\t\t`/v1.0/teams/${teamId}/channels`,\n\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\t//https://docs.microsoft.com/en-us/graph/api/channel-delete?view=graph-rest-beta&tabs=http\n\t\t\t\t\tif (operation === 'delete') {\n\t\t\t\t\t\tconst teamId = this.getNodeParameter('teamId', i) as string;\n\t\t\t\t\t\tconst channelId = this.getNodeParameter('channelId', i) as string;\n\t\t\t\t\t\tresponseData = await microsoftApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'DELETE',\n\t\t\t\t\t\t\t`/v1.0/teams/${teamId}/channels/${channelId}`,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tresponseData = { success: true };\n\t\t\t\t\t}\n\t\t\t\t\t//https://docs.microsoft.com/en-us/graph/api/channel-get?view=graph-rest-beta&tabs=http\n\t\t\t\t\tif (operation === 'get') {\n\t\t\t\t\t\tconst teamId = this.getNodeParameter('teamId', i) as string;\n\t\t\t\t\t\tconst channelId = this.getNodeParameter('channelId', i) as string;\n\t\t\t\t\t\tresponseData = await microsoftApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t`/v1.0/teams/${teamId}/channels/${channelId}`,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\t//https://docs.microsoft.com/en-us/graph/api/channel-list?view=graph-rest-beta&tabs=http\n\t\t\t\t\tif (operation === 'getAll') {\n\t\t\t\t\t\tconst teamId = this.getNodeParameter('teamId', i) as string;\n\t\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', i);\n\t\t\t\t\t\tif (returnAll) {\n\t\t\t\t\t\t\tresponseData = await microsoftApiRequestAllItems.call(\n\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t'value',\n\t\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t\t`/v1.0/teams/${teamId}/channels`,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tqs.limit = this.getNodeParameter('limit', i);\n\t\t\t\t\t\t\tresponseData = await microsoftApiRequestAllItems.call(\n\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t'value',\n\t\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t\t`/v1.0/teams/${teamId}/channels`,\n\t\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tresponseData = responseData.splice(0, qs.limit);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t//https://docs.microsoft.com/en-us/graph/api/channel-patch?view=graph-rest-beta&tabs=http\n\t\t\t\t\tif (operation === 'update') {\n\t\t\t\t\t\tconst teamId = this.getNodeParameter('teamId', i) as string;\n\t\t\t\t\t\tconst channelId = this.getNodeParameter('channelId', i) as string;\n\t\t\t\t\t\tconst updateFields = this.getNodeParameter('updateFields', i);\n\t\t\t\t\t\tconst body: IDataObject = {};\n\t\t\t\t\t\tif (updateFields.name) {\n\t\t\t\t\t\t\tbody.displayName = updateFields.name as string;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (updateFields.description) {\n\t\t\t\t\t\t\tbody.description = updateFields.description as string;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresponseData = await microsoftApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'PATCH',\n\t\t\t\t\t\t\t`/v1.0/teams/${teamId}/channels/${channelId}`,\n\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tresponseData = { success: true };\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (resource === 'channelMessage') {\n\t\t\t\t\t//https://docs.microsoft.com/en-us/graph/api/channel-post-messages?view=graph-rest-beta&tabs=http\n\t\t\t\t\t//https://docs.microsoft.com/en-us/graph/api/channel-post-messagereply?view=graph-rest-beta&tabs=http\n\t\t\t\t\tif (operation === 'create') {\n\t\t\t\t\t\tconst teamId = this.getNodeParameter('teamId', i) as string;\n\t\t\t\t\t\tconst channelId = this.getNodeParameter('channelId', i) as string;\n\t\t\t\t\t\tconst messageType = this.getNodeParameter('messageType', i) as string;\n\t\t\t\t\t\tconst message = this.getNodeParameter('message', i) as string;\n\t\t\t\t\t\tconst options = this.getNodeParameter('options', i);\n\n\t\t\t\t\t\tlet includeLinkToWorkflow = options.includeLinkToWorkflow;\n\t\t\t\t\t\tif (includeLinkToWorkflow === undefined) {\n\t\t\t\t\t\t\tincludeLinkToWorkflow = nodeVersion >= 1.1;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst body: IDataObject = prepareMessage.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tmessageType,\n\t\t\t\t\t\t\tincludeLinkToWorkflow as boolean,\n\t\t\t\t\t\t\tinstanceId,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tif (options.makeReply) {\n\t\t\t\t\t\t\tconst replyToId = options.makeReply as string;\n\t\t\t\t\t\t\tresponseData = await microsoftApiRequest.call(\n\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t'POST',\n\t\t\t\t\t\t\t\t`/beta/teams/${teamId}/channels/${channelId}/messages/${replyToId}/replies`,\n\t\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresponseData = await microsoftApiRequest.call(\n\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t'POST',\n\t\t\t\t\t\t\t\t`/beta/teams/${teamId}/channels/${channelId}/messages`,\n\t\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t//https://docs.microsoft.com/en-us/graph/api/channel-list-messages?view=graph-rest-beta&tabs=http\n\t\t\t\t\tif (operation === 'getAll') {\n\t\t\t\t\t\tconst teamId = this.getNodeParameter('teamId', i) as string;\n\t\t\t\t\t\tconst channelId = this.getNodeParameter('channelId', i) as string;\n\t\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', i);\n\t\t\t\t\t\tif (returnAll) {\n\t\t\t\t\t\t\tresponseData = await microsoftApiRequestAllItems.call(\n\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t'value',\n\t\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t\t`/beta/teams/${teamId}/channels/${channelId}/messages`,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tqs.limit = this.getNodeParameter('limit', i);\n\t\t\t\t\t\t\tresponseData = await microsoftApiRequestAllItems.call(\n\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t'value',\n\t\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t\t`/beta/teams/${teamId}/channels/${channelId}/messages`,\n\t\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tresponseData = responseData.splice(0, qs.limit);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (resource === 'chatMessage') {\n\t\t\t\t\t// https://docs.microsoft.com/en-us/graph/api/channel-post-messages?view=graph-rest-1.0&tabs=http\n\t\t\t\t\tif (operation === 'create') {\n\t\t\t\t\t\tconst chatId = this.getNodeParameter('chatId', i) as string;\n\t\t\t\t\t\tconst messageType = this.getNodeParameter('messageType', i) as string;\n\t\t\t\t\t\tconst message = this.getNodeParameter('message', i) as string;\n\t\t\t\t\t\tconst options = this.getNodeParameter('options', i, {});\n\n\t\t\t\t\t\tconst includeLinkToWorkflow =\n\t\t\t\t\t\t\toptions.includeLinkToWorkflow !== false && nodeVersion >= 1.1;\n\n\t\t\t\t\t\tconst body: IDataObject = prepareMessage.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tmessageType,\n\t\t\t\t\t\t\tincludeLinkToWorkflow,\n\t\t\t\t\t\t\tinstanceId,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tresponseData = await microsoftApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'POST',\n\t\t\t\t\t\t\t`/v1.0/chats/${chatId}/messages`,\n\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\t// https://docs.microsoft.com/en-us/graph/api/chat-list-messages?view=graph-rest-1.0&tabs=http\n\t\t\t\t\tif (operation === 'get') {\n\t\t\t\t\t\tconst chatId = this.getNodeParameter('chatId', i) as string;\n\t\t\t\t\t\tconst messageId = this.getNodeParameter('messageId', i) as string;\n\t\t\t\t\t\tresponseData = await microsoftApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t`/v1.0/chats/${chatId}/messages/${messageId}`,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\t// https://docs.microsoft.com/en-us/graph/api/chat-list-messages?view=graph-rest-1.0&tabs=http\n\t\t\t\t\tif (operation === 'getAll') {\n\t\t\t\t\t\tconst chatId = this.getNodeParameter('chatId', i) as string;\n\t\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', i);\n\t\t\t\t\t\tif (returnAll) {\n\t\t\t\t\t\t\tresponseData = await microsoftApiRequestAllItems.call(\n\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t'value',\n\t\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t\t`/v1.0/chats/${chatId}/messages`,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tqs.limit = this.getNodeParameter('limit', i);\n\t\t\t\t\t\t\tresponseData = await microsoftApiRequestAllItems.call(\n\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t'value',\n\t\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t\t`/v1.0/chats/${chatId}/messages`,\n\t\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tresponseData = responseData.splice(0, qs.limit);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (resource === 'task') {\n\t\t\t\t\t//https://docs.microsoft.com/en-us/graph/api/planner-post-tasks?view=graph-rest-1.0&tabs=http\n\t\t\t\t\tif (operation === 'create') {\n\t\t\t\t\t\tconst planId = this.getNodeParameter('planId', i) as string;\n\t\t\t\t\t\tconst bucketId = this.getNodeParameter('bucketId', i) as string;\n\t\t\t\t\t\tconst title = this.getNodeParameter('title', i) as string;\n\t\t\t\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i);\n\t\t\t\t\t\tconst body: IDataObject = {\n\t\t\t\t\t\t\tplanId,\n\t\t\t\t\t\t\tbucketId,\n\t\t\t\t\t\t\ttitle,\n\t\t\t\t\t\t};\n\t\t\t\t\t\tObject.assign(body, additionalFields);\n\n\t\t\t\t\t\tif (body.assignedTo) {\n\t\t\t\t\t\t\tbody.assignments = {\n\t\t\t\t\t\t\t\t[body.assignedTo as string]: {\n\t\t\t\t\t\t\t\t\t'@odata.type': 'microsoft.graph.plannerAssignment',\n\t\t\t\t\t\t\t\t\torderHint: ' !',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tdelete body.assignedTo;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (Array.isArray(body.labels)) {\n\t\t\t\t\t\t\tbody.appliedCategories = (body.labels as string[]).map((label) => ({\n\t\t\t\t\t\t\t\t[label]: true,\n\t\t\t\t\t\t\t}));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await microsoftApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'POST',\n\t\t\t\t\t\t\t'/v1.0/planner/tasks',\n\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\t//https://docs.microsoft.com/en-us/graph/api/plannertask-delete?view=graph-rest-1.0&tabs=http\n\t\t\t\t\tif (operation === 'delete') {\n\t\t\t\t\t\tconst taskId = this.getNodeParameter('taskId', i) as string;\n\t\t\t\t\t\tconst task = await microsoftApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t`/v1.0/planner/tasks/${taskId}`,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tresponseData = await microsoftApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'DELETE',\n\t\t\t\t\t\t\t`/v1.0/planner/tasks/${taskId}`,\n\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\t{ 'If-Match': task['@odata.etag'] },\n\t\t\t\t\t\t);\n\t\t\t\t\t\tresponseData = { success: true };\n\t\t\t\t\t}\n\t\t\t\t\t//https://docs.microsoft.com/en-us/graph/api/plannertask-get?view=graph-rest-1.0&tabs=http\n\t\t\t\t\tif (operation === 'get') {\n\t\t\t\t\t\tconst taskId = this.getNodeParameter('taskId', i) as string;\n\t\t\t\t\t\tresponseData = await microsoftApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t`/v1.0/planner/tasks/${taskId}`,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tif (operation === 'getAll') {\n\t\t\t\t\t\tconst tasksFor = this.getNodeParameter('tasksFor', i) as string;\n\t\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', i);\n\t\t\t\t\t\tif (tasksFor === 'member') {\n\t\t\t\t\t\t\t//https://docs.microsoft.com/en-us/graph/api/planneruser-list-tasks?view=graph-rest-1.0&tabs=http\n\t\t\t\t\t\t\tconst memberId = this.getNodeParameter('memberId', i) as string;\n\t\t\t\t\t\t\tif (returnAll) {\n\t\t\t\t\t\t\t\tresponseData = await microsoftApiRequestAllItems.call(\n\t\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t\t'value',\n\t\t\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t\t\t`/v1.0/users/${memberId}/planner/tasks`,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tqs.limit = this.getNodeParameter('limit', i);\n\t\t\t\t\t\t\t\tresponseData = await microsoftApiRequestAllItems.call(\n\t\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t\t'value',\n\t\t\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t\t\t`/v1.0/users/${memberId}/planner/tasks`,\n\t\t\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tresponseData = responseData.splice(0, qs.limit);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t//https://docs.microsoft.com/en-us/graph/api/plannerplan-list-tasks?view=graph-rest-1.0&tabs=http\n\t\t\t\t\t\t\tconst planId = this.getNodeParameter('planId', i) as string;\n\t\t\t\t\t\t\tif (returnAll) {\n\t\t\t\t\t\t\t\tresponseData = await microsoftApiRequestAllItems.call(\n\t\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t\t'value',\n\t\t\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t\t\t`/v1.0/planner/plans/${planId}/tasks`,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tqs.limit = this.getNodeParameter('limit', i);\n\t\t\t\t\t\t\t\tresponseData = await microsoftApiRequestAllItems.call(\n\t\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t\t'value',\n\t\t\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t\t\t`/v1.0/planner/plans/${planId}/tasks`,\n\t\t\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tresponseData = responseData.splice(0, qs.limit);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t//https://docs.microsoft.com/en-us/graph/api/plannertask-update?view=graph-rest-1.0&tabs=http\n\t\t\t\t\tif (operation === 'update') {\n\t\t\t\t\t\tconst taskId = this.getNodeParameter('taskId', i) as string;\n\t\t\t\t\t\tconst updateFields = this.getNodeParameter('updateFields', i);\n\t\t\t\t\t\tconst body: IDataObject = {};\n\t\t\t\t\t\tObject.assign(body, updateFields);\n\n\t\t\t\t\t\tif (body.assignedTo) {\n\t\t\t\t\t\t\tbody.assignments = {\n\t\t\t\t\t\t\t\t[body.assignedTo as string]: {\n\t\t\t\t\t\t\t\t\t'@odata.type': 'microsoft.graph.plannerAssignment',\n\t\t\t\t\t\t\t\t\torderHint: ' !',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tdelete body.assignedTo;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (body.groupId) {\n\t\t\t\t\t\t\t// tasks are assigned to a plan and bucket, group is used for filtering\n\t\t\t\t\t\t\tdelete body.groupId;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (Array.isArray(body.labels)) {\n\t\t\t\t\t\t\tbody.appliedCategories = (body.labels as string[]).map((label) => ({\n\t\t\t\t\t\t\t\t[label]: true,\n\t\t\t\t\t\t\t}));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst task = await microsoftApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t`/v1.0/planner/tasks/${taskId}`,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tresponseData = await microsoftApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'PATCH',\n\t\t\t\t\t\t\t`/v1.0/planner/tasks/${taskId}`,\n\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\t{ 'If-Match': task['@odata.etag'] },\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tresponseData = { success: true };\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject),\n\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t);\n\n\t\t\t\treturnData.push(...executionData);\n\t\t\t} catch (error) {\n\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\tconst executionErrorData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\tthis.helpers.returnJsonArray({ error: error.message }),\n\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t);\n\t\t\t\t\treturnData.push(...executionErrorData);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\t\treturn [returnData];\n\t}\n}\n"],"mappings":"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","names":[]}