{"version":3,"sources":["../../../../nodes/Microsoft/Teams/MicrosoftTeamsTrigger.node.ts"],"sourcesContent":["import type {\n\tIExecuteFunctions,\n\tINodeType,\n\tINodeTypeDescription,\n\tIHookFunctions,\n\tIWebhookFunctions,\n\tIWebhookResponseData,\n\tIDataObject,\n\tILoadOptionsFunctions,\n\tJsonObject,\n} from 'n8n-workflow';\nimport { NodeApiError, NodeConnectionTypes } from 'n8n-workflow';\n\nimport type { WebhookNotification, SubscriptionResponse } from './v2/helpers/types';\nimport { createSubscription, getResourcePath } from './v2/helpers/utils-trigger';\nimport { listSearch } from './v2/methods';\nimport { microsoftApiRequest, microsoftApiRequestAllItems } from './v2/transport';\n\nexport class MicrosoftTeamsTrigger implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'Microsoft Teams Trigger',\n\t\tname: 'microsoftTeamsTrigger',\n\t\ticon: 'file:teams.svg',\n\t\tgroup: ['trigger'],\n\t\tversion: 1,\n\t\tdescription:\n\t\t\t'Triggers workflows in n8n based on events from Microsoft Teams, such as new messages or team updates, using specified configurations.',\n\t\tsubtitle: 'Microsoft Teams Trigger',\n\t\tdefaults: {\n\t\t\tname: 'Microsoft Teams Trigger',\n\t\t},\n\t\tcredentials: [\n\t\t\t{\n\t\t\t\tname: 'microsoftTeamsOAuth2Api',\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t],\n\t\tinputs: [],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\twebhooks: [\n\t\t\t{\n\t\t\t\tname: 'default',\n\t\t\t\thttpMethod: 'POST',\n\t\t\t\tresponseMode: 'onReceived',\n\t\t\t\tpath: 'webhook',\n\t\t\t},\n\t\t],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Trigger On',\n\t\t\t\tname: 'event',\n\t\t\t\ttype: 'options',\n\t\t\t\tdefault: 'newChannelMessage',\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'New Channel',\n\t\t\t\t\t\tvalue: 'newChannel',\n\t\t\t\t\t\tdescription: 'A new channel is created',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'New Channel Message',\n\t\t\t\t\t\tvalue: 'newChannelMessage',\n\t\t\t\t\t\tdescription: 'A message is posted to a channel',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'New Chat',\n\t\t\t\t\t\tvalue: 'newChat',\n\t\t\t\t\t\tdescription: 'A new chat is created',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'New Chat Message',\n\t\t\t\t\t\tvalue: 'newChatMessage',\n\t\t\t\t\t\tdescription: 'A message is posted to a chat',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'New Team Member',\n\t\t\t\t\t\tvalue: 'newTeamMember',\n\t\t\t\t\t\tdescription: 'A new member is added to a team',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdescription: 'Select the event to trigger the workflow',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Watch All Teams',\n\t\t\t\tname: 'watchAllTeams',\n\t\t\t\ttype: 'boolean',\n\t\t\t\tdefault: false,\n\t\t\t\tdescription: 'Whether to watch for the event in all the available teams',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tevent: ['newChannel', 'newChannelMessage', 'newTeamMember'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Team',\n\t\t\t\tname: 'teamId',\n\t\t\t\ttype: 'resourceLocator',\n\t\t\t\tdefault: {\n\t\t\t\t\tmode: 'list',\n\t\t\t\t\tvalue: '',\n\t\t\t\t},\n\t\t\t\trequired: true,\n\t\t\t\tdescription: 'Select a team from the list, enter an ID or a URL',\n\t\t\t\tmodes: [\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'From List',\n\t\t\t\t\t\tname: 'list',\n\t\t\t\t\t\ttype: 'list',\n\t\t\t\t\t\tplaceholder: 'Select a team...',\n\t\t\t\t\t\ttypeOptions: {\n\t\t\t\t\t\t\tsearchListMethod: 'getTeams',\n\t\t\t\t\t\t\tsearchable: true,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'By ID',\n\t\t\t\t\t\tname: 'id',\n\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\tplaceholder: 'e.g., 61165b04-e4cc-4026-b43f-926b4e2a7182',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'By URL',\n\t\t\t\t\t\tname: 'url',\n\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\tplaceholder:\n\t\t\t\t\t\t\t'e.g., https://teams.microsoft.com/l/team/19%3A...groupId=your-team-id&tenantId=...',\n\t\t\t\t\t\textractValue: {\n\t\t\t\t\t\t\ttype: 'regex',\n\t\t\t\t\t\t\tregex: /groupId=([0-9a-fA-F-]{36})/,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tevent: ['newChannel', 'newChannelMessage', 'newTeamMember'],\n\t\t\t\t\t\twatchAllTeams: [false],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Watch All Channels',\n\t\t\t\tname: 'watchAllChannels',\n\t\t\t\ttype: 'boolean',\n\t\t\t\tdefault: false,\n\t\t\t\tdescription: 'Whether to watch for the event in all the available channels',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tevent: ['newChannelMessage'],\n\t\t\t\t\t\twatchAllTeams: [false],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Channel',\n\t\t\t\tname: 'channelId',\n\t\t\t\ttype: 'resourceLocator',\n\t\t\t\tdefault: {\n\t\t\t\t\tmode: 'list',\n\t\t\t\t\tvalue: '',\n\t\t\t\t},\n\t\t\t\trequired: true,\n\t\t\t\tdescription: 'Select a channel from the list, enter an ID or a URL',\n\t\t\t\tmodes: [\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'From List',\n\t\t\t\t\t\tname: 'list',\n\t\t\t\t\t\ttype: 'list',\n\t\t\t\t\t\tplaceholder: 'Select a channel...',\n\t\t\t\t\t\ttypeOptions: {\n\t\t\t\t\t\t\tsearchListMethod: 'getChannels',\n\t\t\t\t\t\t\tsearchable: true,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'By ID',\n\t\t\t\t\t\tname: 'id',\n\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\tplaceholder: 'e.g., 19:-xlxyqXNSCxpI1SDzgQ_L9ZvzSR26pgphq1BJ9y7QJE1@thread.tacv2',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'By URL',\n\t\t\t\t\t\tname: 'url',\n\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\tplaceholder: 'e.g., https://teams.microsoft.com/l/channel/19%3A...@thread.tacv2/...',\n\t\t\t\t\t\textractValue: {\n\t\t\t\t\t\t\ttype: 'regex',\n\t\t\t\t\t\t\tregex: /channel\\/([^\\/?]+)/,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tevent: ['newChannelMessage'],\n\t\t\t\t\t\twatchAllTeams: [false],\n\t\t\t\t\t\twatchAllChannels: [false],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Watch All Chats',\n\t\t\t\tname: 'watchAllChats',\n\t\t\t\ttype: 'boolean',\n\t\t\t\tdefault: false,\n\t\t\t\tdescription: 'Whether to watch for the event in all the available chats',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tevent: ['newChatMessage'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Chat',\n\t\t\t\tname: 'chatId',\n\t\t\t\ttype: 'resourceLocator',\n\t\t\t\tdefault: {\n\t\t\t\t\tmode: 'list',\n\t\t\t\t\tvalue: '',\n\t\t\t\t},\n\t\t\t\trequired: true,\n\t\t\t\tdescription: 'Select a chat from the list, enter an ID or a URL',\n\t\t\t\tmodes: [\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'From List',\n\t\t\t\t\t\tname: 'list',\n\t\t\t\t\t\ttype: 'list',\n\t\t\t\t\t\tplaceholder: 'Select a chat...',\n\t\t\t\t\t\ttypeOptions: {\n\t\t\t\t\t\t\tsearchListMethod: 'getChats',\n\t\t\t\t\t\t\tsearchable: true,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'By ID',\n\t\t\t\t\t\tname: 'id',\n\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\tplaceholder: '19:7e2f1174-e8ee-4859-b8b1-a8d1cc63d276@unq.gbl.spaces',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'By URL',\n\t\t\t\t\t\tname: 'url',\n\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\tplaceholder: 'https://teams.microsoft.com/_#/conversations/CHAT_ID',\n\t\t\t\t\t\textractValue: {\n\t\t\t\t\t\t\ttype: 'regex',\n\t\t\t\t\t\t\tregex: /conversations\\/([^\\/?]+)/i,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tevent: ['newChatMessage'],\n\t\t\t\t\t\twatchAllChats: [false],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t};\n\n\tmethods = {\n\t\tlistSearch,\n\t};\n\n\twebhookMethods = {\n\t\tdefault: {\n\t\t\tasync checkExists(this: IHookFunctions): Promise<boolean> {\n\t\t\t\tconst event = this.getNodeParameter('event', 0) as string;\n\t\t\t\tconst webhookUrl = this.getNodeWebhookUrl('default');\n\t\t\t\tconst webhookData = this.getWorkflowStaticData('node');\n\n\t\t\t\ttry {\n\t\t\t\t\tconst subscriptions = (await microsoftApiRequestAllItems.call(\n\t\t\t\t\t\tthis as unknown as ILoadOptionsFunctions,\n\t\t\t\t\t\t'value',\n\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t'/v1.0/subscriptions',\n\t\t\t\t\t)) as SubscriptionResponse[];\n\n\t\t\t\t\tconst matchingSubscriptions = subscriptions.filter(\n\t\t\t\t\t\t(subscription) => subscription.notificationUrl === webhookUrl,\n\t\t\t\t\t);\n\n\t\t\t\t\tconst now = new Date();\n\t\t\t\t\tconst thresholdMs = 5 * 60 * 1000;\n\t\t\t\t\tconst validSubscriptions = matchingSubscriptions.filter((subscription) => {\n\t\t\t\t\t\tconst expiration = new Date(subscription.expirationDateTime);\n\t\t\t\t\t\treturn expiration.getTime() - now.getTime() > thresholdMs;\n\t\t\t\t\t});\n\n\t\t\t\t\tconst resourcePaths = await getResourcePath.call(this, event);\n\t\t\t\t\tconst requiredResources = Array.isArray(resourcePaths) ? resourcePaths : [resourcePaths];\n\n\t\t\t\t\tconst subscribedResources = validSubscriptions.map((sub) => sub.resource);\n\t\t\t\t\tconst allResourcesSubscribed = requiredResources.every((resource) =>\n\t\t\t\t\t\tsubscribedResources.includes(resource),\n\t\t\t\t\t);\n\n\t\t\t\t\tif (allResourcesSubscribed) {\n\t\t\t\t\t\twebhookData.subscriptionIds = validSubscriptions.map((sub) => sub.id);\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn false;\n\t\t\t\t} catch (error) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tasync create(this: IHookFunctions): Promise<boolean> {\n\t\t\t\tconst event = this.getNodeParameter('event', 0) as string;\n\t\t\t\tconst webhookUrl = this.getNodeWebhookUrl('default');\n\t\t\t\tconst webhookData = this.getWorkflowStaticData('node');\n\n\t\t\t\tif (!webhookUrl || !webhookUrl.startsWith('https://')) {\n\t\t\t\t\tthrow new NodeApiError(this.getNode(), {\n\t\t\t\t\t\tmessage: 'Invalid Notification URL',\n\t\t\t\t\t\tdescription: `The webhook URL \"${webhookUrl}\" is invalid. Microsoft Graph requires an HTTPS URL.`,\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tconst resourcePaths = await getResourcePath.call(this, event);\n\t\t\t\tconst subscriptionIds: string[] = [];\n\n\t\t\t\tif (Array.isArray(resourcePaths)) {\n\t\t\t\t\tawait Promise.all(\n\t\t\t\t\t\tresourcePaths.map(async (resource) => {\n\t\t\t\t\t\t\tconst subscription = await createSubscription.call(this, webhookUrl, resource);\n\t\t\t\t\t\t\tsubscriptionIds.push(subscription.id);\n\t\t\t\t\t\t\treturn subscription;\n\t\t\t\t\t\t}),\n\t\t\t\t\t);\n\n\t\t\t\t\twebhookData.subscriptionIds = subscriptionIds;\n\t\t\t\t} else {\n\t\t\t\t\tconst subscription = await createSubscription.call(this, webhookUrl, resourcePaths);\n\t\t\t\t\twebhookData.subscriptionIds = [subscription.id];\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\t\t\t},\n\n\t\t\tasync delete(this: IHookFunctions): Promise<boolean> {\n\t\t\t\tconst webhookData = this.getWorkflowStaticData('node');\n\t\t\t\tconst storedIds = webhookData.subscriptionIds as string[] | undefined;\n\n\t\t\t\tif (!Array.isArray(storedIds)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tawait Promise.all(\n\t\t\t\t\t\tstoredIds.map(async (subscriptionId) => {\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tawait microsoftApiRequest.call(\n\t\t\t\t\t\t\t\t\tthis as unknown as IExecuteFunctions,\n\t\t\t\t\t\t\t\t\t'DELETE',\n\t\t\t\t\t\t\t\t\t`/v1.0/subscriptions/${subscriptionId}`,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t\t\tif ((error as JsonObject).httpStatusCode !== 404) {\n\t\t\t\t\t\t\t\t\tthrow error;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}),\n\t\t\t\t\t);\n\n\t\t\t\t\tdelete webhookData.subscriptionIds;\n\t\t\t\t\treturn true;\n\t\t\t\t} catch (error) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t},\n\t\t},\n\t};\n\n\tasync webhook(this: IWebhookFunctions): Promise<IWebhookResponseData> {\n\t\tconst req = this.getRequestObject();\n\t\tconst res = this.getResponseObject();\n\n\t\t// Handle Microsoft Graph validation request\n\t\tif (req.query.validationToken) {\n\t\t\tres.status(200).send(req.query.validationToken);\n\t\t\treturn { noWebhookResponse: true };\n\t\t}\n\n\t\tconst eventNotifications = req.body.value as WebhookNotification[];\n\t\tconst response: IWebhookResponseData = {\n\t\t\tworkflowData: eventNotifications.map((event) => [\n\t\t\t\t{\n\t\t\t\t\tjson: (event.resourceData as IDataObject) ?? event,\n\t\t\t\t},\n\t\t\t]),\n\t\t};\n\n\t\treturn response;\n\t}\n}\n"],"mappings":"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","names":[]}