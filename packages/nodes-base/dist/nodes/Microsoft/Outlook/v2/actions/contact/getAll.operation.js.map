{"version":3,"sources":["../../../../../../../nodes/Microsoft/Outlook/v2/actions/contact/getAll.operation.ts"],"sourcesContent":["import type { IDataObject, IExecuteFunctions, INodeProperties } from 'n8n-workflow';\n\nimport { updateDisplayOptions } from '@utils/utilities';\n\nimport { returnAllOrLimit } from '../../descriptions';\nimport { contactFields } from '../../helpers/utils';\nimport { microsoftApiRequest, microsoftApiRequestAllItems } from '../../transport';\n\nexport const properties: INodeProperties[] = [\n\t...returnAllOrLimit,\n\t{\n\t\tdisplayName: 'Output',\n\t\tname: 'output',\n\t\ttype: 'options',\n\t\tdefault: 'simple',\n\t\toptions: [\n\t\t\t{\n\t\t\t\tname: 'Simplified',\n\t\t\t\tvalue: 'simple',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Raw',\n\t\t\t\tvalue: 'raw',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Select Included Fields',\n\t\t\t\tvalue: 'fields',\n\t\t\t},\n\t\t],\n\t},\n\t{\n\t\tdisplayName: 'Fields',\n\t\tname: 'fields',\n\t\ttype: 'multiOptions',\n\t\tdescription: 'The fields to add to the output',\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\toutput: ['fields'],\n\t\t\t},\n\t\t},\n\t\toptions: contactFields,\n\t\tdefault: [],\n\t},\n\t{\n\t\tdisplayName: 'Filters',\n\t\tname: 'filters',\n\t\ttype: 'collection',\n\t\tplaceholder: 'Add Filter',\n\t\tdefault: {},\n\t\toptions: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Filter Query',\n\t\t\t\tname: 'custom',\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: '',\n\t\t\t\tplaceholder: \"e.g. displayName eq 'John Doe'\",\n\t\t\t\thint: 'Search query to filter contacts. <a href=\"https://learn.microsoft.com/en-us/graph/filter-query-parameter\">More info</a>.',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Email Address',\n\t\t\t\tname: 'emailAddress',\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: '',\n\t\t\t\tdescription:\n\t\t\t\t\t'If contacts that you want to retrieve have multiple email addresses, you can enter them separated by commas',\n\t\t\t},\n\t\t],\n\t},\n];\n\nconst displayOptions = {\n\tshow: {\n\t\tresource: ['contact'],\n\t\toperation: ['getAll'],\n\t},\n};\n\nexport const description = updateDisplayOptions(displayOptions, properties);\n\nexport async function execute(this: IExecuteFunctions, index: number) {\n\tlet responseData;\n\tconst qs = {} as IDataObject;\n\n\tconst returnAll = this.getNodeParameter('returnAll', index);\n\tconst filters = this.getNodeParameter('filters', index, {});\n\tconst output = this.getNodeParameter('output', index) as string;\n\n\tif (output === 'fields') {\n\t\tconst fields = this.getNodeParameter('fields', index) as string[];\n\t\tqs.$select = fields.join(',');\n\t}\n\n\tif (output === 'simple') {\n\t\tqs.$select = 'id,displayName,emailAddresses,businessPhones,mobilePhone';\n\t}\n\n\tif (Object.keys(filters).length) {\n\t\tconst filterString: string[] = [];\n\n\t\tif (filters.emailAddress) {\n\t\t\tconst emails = (filters.emailAddress as string)\n\t\t\t\t.split(',')\n\t\t\t\t.map((email) => `emailAddresses/any(a:a/address eq '${email.trim()}')`);\n\t\t\tfilterString.push(emails.join(' and '));\n\t\t}\n\n\t\tif (filters.custom) {\n\t\t\tfilterString.push(filters.custom as string);\n\t\t}\n\n\t\tif (filterString.length) {\n\t\t\tqs.$filter = filterString.join(' and ');\n\t\t}\n\t}\n\n\tconst endpoint = '/contacts';\n\n\tif (returnAll) {\n\t\tresponseData = await microsoftApiRequestAllItems.call(\n\t\t\tthis,\n\t\t\t'value',\n\t\t\t'GET',\n\t\t\tendpoint,\n\t\t\tundefined,\n\t\t\tqs,\n\t\t);\n\t} else {\n\t\tqs.$top = this.getNodeParameter('limit', index);\n\t\tresponseData = await microsoftApiRequest.call(this, 'GET', endpoint, undefined, qs);\n\t\tresponseData = responseData.value;\n\t}\n\n\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\tthis.helpers.returnJsonArray(responseData as IDataObject[]),\n\t\t{ itemData: { item: index } },\n\t);\n\n\treturn executionData;\n}\n"],"mappings":"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","names":[]}