{"version":3,"sources":["../../../../../../../nodes/Microsoft/Outlook/v2/actions/draft/create.operation.ts"],"sourcesContent":["import type {\n\tIDataObject,\n\tIExecuteFunctions,\n\tINodeExecutionData,\n\tINodeProperties,\n} from 'n8n-workflow';\nimport { NodeOperationError } from 'n8n-workflow';\n\nimport { updateDisplayOptions } from '@utils/utilities';\n\nimport { createMessage } from '../../helpers/utils';\nimport { microsoftApiRequest } from '../../transport';\n\nexport const properties: INodeProperties[] = [\n\t{\n\t\tdisplayName: 'Subject',\n\t\tname: 'subject',\n\t\tdescription: 'The subject of the message',\n\t\ttype: 'string',\n\t\tdefault: '',\n\t},\n\t{\n\t\tdisplayName: 'Message',\n\t\tname: 'bodyContent',\n\t\tdescription: 'Message body content',\n\t\ttype: 'string',\n\t\ttypeOptions: {\n\t\t\trows: 2,\n\t\t},\n\t\tdefault: '',\n\t},\n\t{\n\t\tdisplayName: 'Additional Fields',\n\t\tname: 'additionalFields',\n\t\ttype: 'collection',\n\t\tplaceholder: 'Add Field',\n\t\tdefault: {},\n\t\toptions: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Attachments',\n\t\t\t\tname: 'attachments',\n\t\t\t\ttype: 'fixedCollection',\n\t\t\t\tplaceholder: 'Add Attachment',\n\t\t\t\tdefault: {},\n\t\t\t\ttypeOptions: {\n\t\t\t\t\tmultipleValues: true,\n\t\t\t\t},\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'attachments',\n\t\t\t\t\t\tdisplayName: 'Attachment',\n\t\t\t\t\t\tvalues: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdisplayName: 'Input Data Field Name',\n\t\t\t\t\t\t\t\tname: 'binaryPropertyName',\n\t\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\t\t\tplaceholder: 'e.g. data',\n\t\t\t\t\t\t\t\thint: 'The name of the input field containing the binary file data to be attached',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'BCC Recipients',\n\t\t\t\tname: 'bccRecipients',\n\t\t\t\tdescription: 'Comma-separated list of email addresses of BCC recipients',\n\t\t\t\ttype: 'string',\n\t\t\t\tplaceholder: 'e.g. john@example.com',\n\t\t\t\tdefault: '',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Category Names or IDs',\n\t\t\t\tname: 'categories',\n\t\t\t\ttype: 'multiOptions',\n\t\t\t\tdescription:\n\t\t\t\t\t'Choose from the list, or specify IDs using an <a href=\"https://docs.n8n.io/code/expressions/\">expression</a>',\n\t\t\t\ttypeOptions: {\n\t\t\t\t\tloadOptionsMethod: 'getCategoriesNames',\n\t\t\t\t},\n\t\t\t\tdefault: [],\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'CC Recipients',\n\t\t\t\tname: 'ccRecipients',\n\t\t\t\tdescription: 'Comma-separated list of email addresses of CC recipients',\n\t\t\t\ttype: 'string',\n\t\t\t\tplaceholder: 'e.g. john@example.com',\n\t\t\t\tdefault: '',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Custom Headers',\n\t\t\t\tname: 'internetMessageHeaders',\n\t\t\t\tplaceholder: 'Add Header',\n\t\t\t\ttype: 'fixedCollection',\n\t\t\t\ttypeOptions: {\n\t\t\t\t\tmultipleValues: true,\n\t\t\t\t},\n\t\t\t\tdefault: {},\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'headers',\n\t\t\t\t\t\tdisplayName: 'Header',\n\t\t\t\t\t\tvalues: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdisplayName: 'Name',\n\t\t\t\t\t\t\t\tname: 'name',\n\t\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\t\t\tdescription: 'Name of the header',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdisplayName: 'Value',\n\t\t\t\t\t\t\t\tname: 'value',\n\t\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\t\t\tdescription: 'Value to set for the header',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'From',\n\t\t\t\tname: 'from',\n\t\t\t\tdescription:\n\t\t\t\t\t'The owner of the mailbox from which the message is sent. Must correspond to the actual mailbox used.',\n\t\t\t\ttype: 'string',\n\t\t\t\tplaceholder: 'e.g. john@example.com',\n\t\t\t\tdefault: '',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Importance',\n\t\t\t\tname: 'importance',\n\t\t\t\tdescription: 'The importance of the message',\n\t\t\t\ttype: 'options',\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Low',\n\t\t\t\t\t\tvalue: 'Low',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Normal',\n\t\t\t\t\t\tvalue: 'Normal',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'High',\n\t\t\t\t\t\tvalue: 'High',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'Normal',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Message Type',\n\t\t\t\tname: 'bodyContentType',\n\t\t\t\tdescription: 'Message body content type',\n\t\t\t\ttype: 'options',\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'HTML',\n\t\t\t\t\t\tvalue: 'html',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Text',\n\t\t\t\t\t\tvalue: 'Text',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'html',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Read Receipt Requested',\n\t\t\t\tname: 'isReadReceiptRequested',\n\t\t\t\tdescription: 'Whether a read receipt is requested for the message',\n\t\t\t\ttype: 'boolean',\n\t\t\t\tdefault: false,\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Reply To',\n\t\t\t\tname: 'replyTo',\n\t\t\t\tdescription: 'Email address to use when replying',\n\t\t\t\ttype: 'string',\n\t\t\t\tplaceholder: 'e.g. replyto@example.com',\n\t\t\t\tdefault: '',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'To',\n\t\t\t\tname: 'toRecipients',\n\t\t\t\tdescription: 'Comma-separated list of email addresses of recipients',\n\t\t\t\ttype: 'string',\n\t\t\t\tplaceholder: 'e.g. john@example.com',\n\t\t\t\tdefault: '',\n\t\t\t},\n\t\t],\n\t},\n];\n\nconst displayOptions = {\n\tshow: {\n\t\tresource: ['draft'],\n\t\toperation: ['create'],\n\t},\n};\n\nexport const description = updateDisplayOptions(displayOptions, properties);\n\nexport async function execute(this: IExecuteFunctions, index: number, items: INodeExecutionData[]) {\n\tconst additionalFields = this.getNodeParameter('additionalFields', index);\n\tconst subject = this.getNodeParameter('subject', index) as string;\n\tconst bodyContent = this.getNodeParameter('bodyContent', index, '') as string;\n\n\tadditionalFields.subject = subject;\n\n\tadditionalFields.bodyContent = bodyContent || ' ';\n\n\t// Create message object from optional fields\n\tconst body: IDataObject = createMessage(additionalFields);\n\n\tif (additionalFields.attachments) {\n\t\tconst attachments = (additionalFields.attachments as IDataObject).attachments as IDataObject[];\n\n\t\t// // Handle attachments\n\t\tbody.attachments = attachments.map((attachment) => {\n\t\t\tconst binaryPropertyName = attachment.binaryPropertyName as string;\n\n\t\t\tif (items[index].binary === undefined) {\n\t\t\t\tthrow new NodeOperationError(this.getNode(), 'No binary data exists on item!', {\n\t\t\t\t\titemIndex: index,\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\titems[index].binary &&\n\t\t\t\t(items[index].binary as IDataObject)[binaryPropertyName] === undefined\n\t\t\t) {\n\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t`No binary data property \"${binaryPropertyName}\" does not exists on item!`,\n\t\t\t\t\t{ itemIndex: index },\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tconst binaryData = items[index].binary[binaryPropertyName];\n\t\t\treturn {\n\t\t\t\t'@odata.type': '#microsoft.graph.fileAttachment',\n\t\t\t\tname: binaryData.fileName,\n\t\t\t\tcontentBytes: binaryData.data,\n\t\t\t};\n\t\t});\n\t}\n\n\tconst responseData = await microsoftApiRequest.call(this, 'POST', '/messages', body, {});\n\n\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\tthis.helpers.returnJsonArray(responseData as IDataObject),\n\t\t{ itemData: { item: index } },\n\t);\n\n\treturn executionData;\n}\n"],"mappings":"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","names":[]}