{"version":3,"sources":["../../../../../../nodes/Microsoft/Outlook/v2/transport/index.ts"],"sourcesContent":["import type {\n\tIHttpRequestMethods,\n\tIRequestOptions,\n\tIDataObject,\n\tIExecuteFunctions,\n\tIExecuteSingleFunctions,\n\tILoadOptionsFunctions,\n\tINodeExecutionData,\n\tIPollFunctions,\n} from 'n8n-workflow';\n\nimport { prepareApiError } from '../helpers/utils';\n\nexport async function microsoftApiRequest(\n\tthis: IExecuteFunctions | IExecuteSingleFunctions | ILoadOptionsFunctions | IPollFunctions,\n\tmethod: IHttpRequestMethods,\n\tresource: string,\n\tbody: IDataObject = {},\n\tqs: IDataObject = {},\n\turi?: string,\n\theaders: IDataObject = {},\n\toption: IDataObject = { json: true },\n) {\n\tconst credentials = await this.getCredentials('microsoftOutlookOAuth2Api');\n\n\tlet apiUrl = `https://graph.microsoft.com/v1.0/me${resource}`;\n\t// If accessing shared mailbox\n\tif (credentials.useShared && credentials.userPrincipalName) {\n\t\tapiUrl = `https://graph.microsoft.com/v1.0/users/${credentials.userPrincipalName}${resource}`;\n\t}\n\n\tconst options: IRequestOptions = {\n\t\theaders: {\n\t\t\t'Content-Type': 'application/json',\n\t\t},\n\t\tmethod,\n\t\tbody,\n\t\tqs,\n\t\turi: uri || apiUrl,\n\t};\n\ttry {\n\t\tObject.assign(options, option);\n\n\t\tif (Object.keys(headers).length !== 0) {\n\t\t\toptions.headers = Object.assign({}, options.headers, headers);\n\t\t}\n\n\t\tif (Object.keys(body).length === 0) {\n\t\t\tdelete options.body;\n\t\t}\n\n\t\treturn await this.helpers.requestWithAuthentication.call(\n\t\t\tthis,\n\t\t\t'microsoftOutlookOAuth2Api',\n\t\t\toptions,\n\t\t);\n\t} catch (error) {\n\t\tif (\n\t\t\t((error.message || '').toLowerCase().includes('bad request') ||\n\t\t\t\t(error.message || '').toLowerCase().includes('unknown error')) &&\n\t\t\terror.description\n\t\t) {\n\t\t\tlet updatedError;\n\t\t\t// Try to return the error prettier, otherwise return the original one replacing the message with the description\n\t\t\ttry {\n\t\t\t\tupdatedError = prepareApiError.call(this, error);\n\t\t\t} catch (e) {}\n\n\t\t\tif (updatedError) throw updatedError;\n\n\t\t\terror.message = error.description;\n\t\t\terror.description = '';\n\t\t}\n\n\t\tthrow error;\n\t}\n}\n\nexport async function microsoftApiRequestAllItems(\n\tthis: IExecuteFunctions | ILoadOptionsFunctions | IPollFunctions,\n\tpropertyName: string,\n\tmethod: IHttpRequestMethods,\n\tendpoint: string,\n\tbody: IDataObject = {},\n\tquery: IDataObject = {},\n\theaders: IDataObject = {},\n) {\n\tconst returnData: IDataObject[] = [];\n\n\tlet responseData;\n\tlet nextLink: string | undefined;\n\tquery.$top = 100;\n\n\tdo {\n\t\tresponseData = await microsoftApiRequest.call(\n\t\t\tthis,\n\t\t\tmethod,\n\t\t\tendpoint,\n\t\t\tbody,\n\t\t\tnextLink ? undefined : query, // Do not add query parameters as nextLink already contains them\n\t\t\tnextLink,\n\t\t\theaders,\n\t\t);\n\t\tnextLink = responseData['@odata.nextLink'];\n\t\treturnData.push.apply(returnData, responseData[propertyName] as IDataObject[]);\n\t} while (responseData['@odata.nextLink'] !== undefined);\n\n\treturn returnData;\n}\n\nexport async function downloadAttachments(\n\tthis: IExecuteFunctions | IPollFunctions,\n\tmessages: IDataObject[] | IDataObject,\n\tprefix: string,\n) {\n\tconst elements: INodeExecutionData[] = [];\n\tif (!Array.isArray(messages)) {\n\t\tmessages = [messages];\n\t}\n\tfor (const message of messages) {\n\t\tconst element: INodeExecutionData = {\n\t\t\tjson: message,\n\t\t\tbinary: {},\n\t\t};\n\t\tif (message.hasAttachments === true) {\n\t\t\tconst attachments = await microsoftApiRequestAllItems.call(\n\t\t\t\tthis,\n\t\t\t\t'value',\n\t\t\t\t'GET',\n\t\t\t\t`/messages/${message.id}/attachments`,\n\t\t\t\t{},\n\t\t\t);\n\t\t\tfor (const [index, attachment] of attachments.entries()) {\n\t\t\t\tconst response = await microsoftApiRequest.call(\n\t\t\t\t\tthis,\n\t\t\t\t\t'GET',\n\t\t\t\t\t`/messages/${message.id}/attachments/${attachment.id}/$value`,\n\t\t\t\t\tundefined,\n\t\t\t\t\t{},\n\t\t\t\t\tundefined,\n\t\t\t\t\t{},\n\t\t\t\t\t{ encoding: null, resolveWithFullResponse: true },\n\t\t\t\t);\n\n\t\t\t\tconst data = Buffer.from(response.body as string, 'utf8');\n\t\t\t\telement.binary![`${prefix}${index}`] = await this.helpers.prepareBinaryData(\n\t\t\t\t\tdata as unknown as Buffer,\n\t\t\t\t\tattachment.name as string,\n\t\t\t\t\tattachment.contentType as string,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\tif (Object.keys(element.binary!).length === 0) {\n\t\t\tdelete element.binary;\n\t\t}\n\t\telements.push(element);\n\t}\n\treturn elements;\n}\n\nexport async function getMimeContent(\n\tthis: IExecuteFunctions,\n\tmessageId: string,\n\tbinaryPropertyName: string,\n\toutputFileName?: string,\n) {\n\tconst response = await microsoftApiRequest.call(\n\t\tthis,\n\t\t'GET',\n\t\t`/messages/${messageId}/$value`,\n\t\tundefined,\n\t\t{},\n\t\tundefined,\n\t\t{},\n\t\t{ encoding: null, resolveWithFullResponse: true },\n\t);\n\n\tlet mimeType: string | undefined;\n\tif (response.headers['content-type']) {\n\t\tmimeType = response.headers['content-type'];\n\t}\n\n\tconst fileName = `${outputFileName || messageId}.eml`;\n\tconst data = Buffer.from(response.body as string, 'utf8');\n\tconst binary: IDataObject = {};\n\tbinary[binaryPropertyName] = await this.helpers.prepareBinaryData(\n\t\tdata as unknown as Buffer,\n\t\tfileName,\n\t\tmimeType,\n\t);\n\n\treturn binary;\n}\n\nexport async function getSubfolders(\n\tthis: IExecuteFunctions | ILoadOptionsFunctions,\n\tfolders: IDataObject[],\n\taddPathToDisplayName = false,\n) {\n\tconst returnData: IDataObject[] = [...folders];\n\tfor (const folder of folders) {\n\t\tif ((folder.childFolderCount as number) > 0) {\n\t\t\tlet subfolders = await microsoftApiRequest.call(\n\t\t\t\tthis,\n\t\t\t\t'GET',\n\t\t\t\t`/mailFolders/${folder.id}/childFolders`,\n\t\t\t);\n\n\t\t\tif (addPathToDisplayName) {\n\t\t\t\tsubfolders = subfolders.value.map((subfolder: IDataObject) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t...subfolder,\n\t\t\t\t\t\tdisplayName: `${folder.displayName}/${subfolder.displayName}`,\n\t\t\t\t\t};\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tsubfolders = subfolders.value;\n\t\t\t}\n\n\t\t\treturnData.push(\n\t\t\t\t...(await getSubfolders.call(this, subfolders as IDataObject[], addPathToDisplayName)),\n\t\t\t);\n\t\t}\n\t}\n\treturn returnData;\n}\n"],"mappings":"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","names":[]}