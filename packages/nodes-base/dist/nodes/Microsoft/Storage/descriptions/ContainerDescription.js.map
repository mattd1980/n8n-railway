{"version":3,"sources":["../../../../../nodes/Microsoft/Storage/descriptions/ContainerDescription.ts"],"sourcesContent":["import type {\n\tDeclarativeRestApiSettings,\n\tIDataObject,\n\tIExecutePaginationFunctions,\n\tIExecuteSingleFunctions,\n\tIHttpRequestOptions,\n\tIN8nHttpFullResponse,\n\tINodeExecutionData,\n\tINodeProperties,\n\tResourceMapperValue,\n} from 'n8n-workflow';\nimport { NodeOperationError } from 'n8n-workflow';\n\nimport {\n\thandleErrorPostReceive,\n\tHeaderConstants,\n\tparseContainerList,\n\tparseHeaders,\n\tXMsVersion,\n} from '../GenericFunctions';\n\nexport const containerOperations: INodeProperties[] = [\n\t{\n\t\tdisplayName: 'Operation',\n\t\tname: 'operation',\n\t\ttype: 'options',\n\t\tnoDataExpression: true,\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tresource: ['container'],\n\t\t\t},\n\t\t},\n\t\toptions: [\n\t\t\t{\n\t\t\t\tname: 'Create',\n\t\t\t\tvalue: 'create',\n\t\t\t\tdescription: 'Create a container',\n\t\t\t\trouting: {\n\t\t\t\t\trequest: {\n\t\t\t\t\t\tignoreHttpStatusErrors: true,\n\t\t\t\t\t\tmethod: 'PUT',\n\t\t\t\t\t\tqs: {\n\t\t\t\t\t\t\trestype: 'container',\n\t\t\t\t\t\t},\n\t\t\t\t\t\turl: '=/{{ $parameter[\"containerCreate\"] }}',\n\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t[HeaderConstants.X_MS_DATE]: '={{ new Date().toUTCString() }}',\n\t\t\t\t\t\t\t[HeaderConstants.X_MS_VERSION]: XMsVersion,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\toutput: {\n\t\t\t\t\t\tpostReceive: [\n\t\t\t\t\t\t\thandleErrorPostReceive,\n\t\t\t\t\t\t\tasync function (\n\t\t\t\t\t\t\t\tthis: IExecuteSingleFunctions,\n\t\t\t\t\t\t\t\t_data: INodeExecutionData[],\n\t\t\t\t\t\t\t\tresponse: IN8nHttpFullResponse,\n\t\t\t\t\t\t\t): Promise<INodeExecutionData[]> {\n\t\t\t\t\t\t\t\treturn [\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tjson: parseHeaders(response.headers),\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t];\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\taction: 'Create container',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Delete',\n\t\t\t\tvalue: 'delete',\n\t\t\t\tdescription: 'Delete a container',\n\t\t\t\trouting: {\n\t\t\t\t\trequest: {\n\t\t\t\t\t\tignoreHttpStatusErrors: true,\n\t\t\t\t\t\tmethod: 'DELETE',\n\t\t\t\t\t\tqs: {\n\t\t\t\t\t\t\trestype: 'container',\n\t\t\t\t\t\t},\n\t\t\t\t\t\turl: '=/{{ $parameter[\"container\"] }}',\n\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t[HeaderConstants.X_MS_DATE]: '={{ new Date().toUTCString() }}',\n\t\t\t\t\t\t\t[HeaderConstants.X_MS_VERSION]: XMsVersion,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\toutput: {\n\t\t\t\t\t\tpostReceive: [\n\t\t\t\t\t\t\thandleErrorPostReceive,\n\t\t\t\t\t\t\tasync function (\n\t\t\t\t\t\t\t\tthis: IExecuteSingleFunctions,\n\t\t\t\t\t\t\t\t_data: INodeExecutionData[],\n\t\t\t\t\t\t\t\tresponse: IN8nHttpFullResponse,\n\t\t\t\t\t\t\t): Promise<INodeExecutionData[]> {\n\t\t\t\t\t\t\t\treturn [\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tjson: parseHeaders(response.headers),\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t];\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\taction: 'Delete container',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Get',\n\t\t\t\tvalue: 'get',\n\t\t\t\tdescription: 'Retrieve data for a specific container',\n\t\t\t\trouting: {\n\t\t\t\t\trequest: {\n\t\t\t\t\t\tignoreHttpStatusErrors: true,\n\t\t\t\t\t\tmethod: 'GET',\n\t\t\t\t\t\tqs: {\n\t\t\t\t\t\t\trestype: 'container',\n\t\t\t\t\t\t},\n\t\t\t\t\t\turl: '=/{{ $parameter[\"container\"] }}',\n\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t[HeaderConstants.X_MS_DATE]: '={{ new Date().toUTCString() }}',\n\t\t\t\t\t\t\t[HeaderConstants.X_MS_VERSION]: XMsVersion,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\toutput: {\n\t\t\t\t\t\tpostReceive: [\n\t\t\t\t\t\t\thandleErrorPostReceive,\n\t\t\t\t\t\t\tasync function (\n\t\t\t\t\t\t\t\tthis: IExecuteSingleFunctions,\n\t\t\t\t\t\t\t\t_data: INodeExecutionData[],\n\t\t\t\t\t\t\t\tresponse: IN8nHttpFullResponse,\n\t\t\t\t\t\t\t): Promise<INodeExecutionData[]> {\n\t\t\t\t\t\t\t\tconst { metadata, ...properties } = parseHeaders(response.headers);\n\t\t\t\t\t\t\t\tconst simplify = this.getNodeParameter('options.simplify', true) as boolean;\n\t\t\t\t\t\t\t\tif (simplify) {\n\t\t\t\t\t\t\t\t\tdelete properties.contentLength;\n\t\t\t\t\t\t\t\t\tdelete properties.server;\n\t\t\t\t\t\t\t\t\tdelete properties.requestId;\n\t\t\t\t\t\t\t\t\tdelete properties.version;\n\t\t\t\t\t\t\t\t\tdelete properties.date;\n\t\t\t\t\t\t\t\t\tdelete properties.connection;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\treturn [\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tjson: {\n\t\t\t\t\t\t\t\t\t\t\tname: (this.getNodeParameter('container') as ResourceMapperValue).value,\n\t\t\t\t\t\t\t\t\t\t\tproperties,\n\t\t\t\t\t\t\t\t\t\t\t...(metadata ? { metadata: metadata as IDataObject } : {}),\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t];\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\taction: 'Get container',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Get Many',\n\t\t\t\tvalue: 'getAll',\n\t\t\t\tdescription: 'Retrieve a list of containers',\n\t\t\t\trouting: {\n\t\t\t\t\trequest: {\n\t\t\t\t\t\tignoreHttpStatusErrors: true,\n\t\t\t\t\t\tmethod: 'GET',\n\t\t\t\t\t\tqs: {\n\t\t\t\t\t\t\tcomp: 'list',\n\t\t\t\t\t\t},\n\t\t\t\t\t\turl: '/',\n\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t[HeaderConstants.X_MS_DATE]: '={{ new Date().toUTCString() }}',\n\t\t\t\t\t\t\t[HeaderConstants.X_MS_VERSION]: XMsVersion,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\toutput: {\n\t\t\t\t\t\tpostReceive: [\n\t\t\t\t\t\t\thandleErrorPostReceive,\n\t\t\t\t\t\t\tasync function (\n\t\t\t\t\t\t\t\tthis: IExecuteSingleFunctions,\n\t\t\t\t\t\t\t\tdata: INodeExecutionData[],\n\t\t\t\t\t\t\t\t_response: IN8nHttpFullResponse,\n\t\t\t\t\t\t\t): Promise<INodeExecutionData[]> {\n\t\t\t\t\t\t\t\treturn [\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tjson: await parseContainerList(data[0].json as unknown as string),\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t];\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\taction: 'Get many container',\n\t\t\t},\n\t\t],\n\t\tdefault: 'getAll',\n\t},\n];\n\nconst createFields: INodeProperties[] = [\n\t{\n\t\tdisplayName: 'Container Name',\n\t\tname: 'containerCreate',\n\t\tdefault: '',\n\t\tdescription: 'The name of the new container',\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tresource: ['container'],\n\t\t\t\toperation: ['create'],\n\t\t\t},\n\t\t},\n\t\tplaceholder: 'e.g. mycontainer',\n\t\trequired: true,\n\t\trouting: {\n\t\t\tsend: {\n\t\t\t\tpreSend: [\n\t\t\t\t\tasync function (\n\t\t\t\t\t\tthis: IExecuteSingleFunctions,\n\t\t\t\t\t\trequestOptions: IHttpRequestOptions,\n\t\t\t\t\t): Promise<IHttpRequestOptions> {\n\t\t\t\t\t\tconst container = this.getNodeParameter('containerCreate') as string;\n\t\t\t\t\t\tif (container.length < 3 || container.length > 63) {\n\t\t\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t\t\t\"'Container Name' must be from 3 through 63 characters long\",\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (/[A-Z]/.test(container)) {\n\t\t\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t\t\t\"All letters  in 'Container Name' must be lowercase\",\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!/^[a-z0-9-]+$/.test(container)) {\n\t\t\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t\t\t\"'Container Name' can contain only letters, numbers, and the hyphen/minus (-) character\",\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!/^[a-z0-9].*[a-z0-9]$/.test(container)) {\n\t\t\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t\t\t\"'Container Name' must start or end with a letter or number\",\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (/--/.test(container)) {\n\t\t\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t\t\t\"Consecutive hyphens are not permitted in 'Container Name'\",\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn requestOptions;\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t},\n\t\ttype: 'string',\n\t\tvalidateType: 'string',\n\t},\n\t{\n\t\tdisplayName: 'Options',\n\t\tname: 'options',\n\t\tdefault: {},\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tresource: ['container'],\n\t\t\t\toperation: ['create'],\n\t\t\t},\n\t\t},\n\t\toptions: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Access Level',\n\t\t\t\tname: 'accessLevel',\n\t\t\t\tdefault: '',\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Blob',\n\t\t\t\t\t\tvalue: 'blob',\n\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t\"Specifies public read access for blobs. Blob data within this container can be read via anonymous request, but container data isn't available. Clients can't enumerate blobs within the container via anonymous request.\",\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Container',\n\t\t\t\t\t\tvalue: 'container',\n\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t\"Specifies full public read access for container and blob data. Clients can enumerate blobs within the container via anonymous request, but they can't enumerate containers within the storage account.\",\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Private',\n\t\t\t\t\t\tvalue: '',\n\t\t\t\t\t\tdescription: 'Container data is private to the account owner',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\trouting: {\n\t\t\t\t\trequest: {\n\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t[HeaderConstants.X_MS_BLOB_PUBLIC_ACCESS]: '={{ $value || undefined }}',\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\ttype: 'options',\n\t\t\t\tvalidateType: 'options',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Metadata',\n\t\t\t\tname: 'metadata',\n\t\t\t\tdefault: [],\n\t\t\t\tdescription: 'A name-value pair to associate with the container as metadata',\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'metadataValues',\n\t\t\t\t\t\tdisplayName: 'Metadata',\n\t\t\t\t\t\tvalues: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdisplayName: 'Field Name',\n\t\t\t\t\t\t\t\tname: 'fieldName',\n\t\t\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t\t\t'Names must adhere to the naming rules for <a href=\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/\">C# identifiers</a>',\n\t\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdisplayName: 'Field Value',\n\t\t\t\t\t\t\t\tname: 'fieldValue',\n\t\t\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tplaceholder: 'Add metadata',\n\t\t\t\trouting: {\n\t\t\t\t\tsend: {\n\t\t\t\t\t\tpreSend: [\n\t\t\t\t\t\t\tasync function (\n\t\t\t\t\t\t\t\tthis: IExecuteSingleFunctions,\n\t\t\t\t\t\t\t\trequestOptions: IHttpRequestOptions,\n\t\t\t\t\t\t\t): Promise<IHttpRequestOptions> {\n\t\t\t\t\t\t\t\trequestOptions.headers ??= {};\n\t\t\t\t\t\t\t\tconst metadata = this.getNodeParameter('options.metadata') as IDataObject;\n\t\t\t\t\t\t\t\tfor (const data of metadata.metadataValues as IDataObject[]) {\n\t\t\t\t\t\t\t\t\trequestOptions.headers[\n\t\t\t\t\t\t\t\t\t\t`${HeaderConstants.PREFIX_X_MS_META}${data.fieldName as string}`\n\t\t\t\t\t\t\t\t\t] = data.fieldValue as string;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\treturn requestOptions;\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\ttype: 'fixedCollection',\n\t\t\t\ttypeOptions: {\n\t\t\t\t\tmultipleValues: true,\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t\tplaceholder: 'Add option',\n\t\ttype: 'collection',\n\t},\n];\n\nconst deleteFields: INodeProperties[] = [\n\t{\n\t\tdisplayName: 'Container',\n\t\tname: 'container',\n\t\tdefault: {\n\t\t\tmode: 'list',\n\t\t\tvalue: '',\n\t\t},\n\t\tdescription: 'Select the container to delete',\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tresource: ['container'],\n\t\t\t\toperation: ['delete'],\n\t\t\t},\n\t\t},\n\t\tmodes: [\n\t\t\t{\n\t\t\t\tdisplayName: 'From List',\n\t\t\t\tname: 'list',\n\t\t\t\ttype: 'list',\n\t\t\t\ttypeOptions: {\n\t\t\t\t\tsearchListMethod: 'getContainers',\n\t\t\t\t\tsearchable: true,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'By Name',\n\t\t\t\tname: 'id',\n\t\t\t\tplaceholder: 'e.g. mycontainer',\n\t\t\t\ttype: 'string',\n\t\t\t},\n\t\t],\n\t\trequired: true,\n\t\ttype: 'resourceLocator',\n\t},\n];\n\nconst getFields: INodeProperties[] = [\n\t{\n\t\tdisplayName: 'Container',\n\t\tname: 'container',\n\t\tdefault: {\n\t\t\tmode: 'list',\n\t\t\tvalue: '',\n\t\t},\n\t\tdescription: 'Select the container to get',\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tresource: ['container'],\n\t\t\t\toperation: ['get'],\n\t\t\t},\n\t\t},\n\t\tmodes: [\n\t\t\t{\n\t\t\t\tdisplayName: 'From List',\n\t\t\t\tname: 'list',\n\t\t\t\ttype: 'list',\n\t\t\t\ttypeOptions: {\n\t\t\t\t\tsearchListMethod: 'getContainers',\n\t\t\t\t\tsearchable: true,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'By Name',\n\t\t\t\tname: 'id',\n\t\t\t\tplaceholder: 'e.g. mycontainer',\n\t\t\t\ttype: 'string',\n\t\t\t},\n\t\t],\n\t\trequired: true,\n\t\ttype: 'resourceLocator',\n\t},\n\t{\n\t\tdisplayName: 'Options',\n\t\tname: 'options',\n\t\tdefault: {},\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tresource: ['container'],\n\t\t\t\toperation: ['get'],\n\t\t\t},\n\t\t},\n\t\toptions: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Simplify',\n\t\t\t\tname: 'simplify',\n\t\t\t\ttype: 'boolean',\n\t\t\t\tdefault: true,\n\t\t\t\tdescription:\n\t\t\t\t\t'Whether to return a simplified version of the response instead of the raw data',\n\t\t\t},\n\t\t],\n\t\tplaceholder: 'Add option',\n\t\ttype: 'collection',\n\t},\n];\n\nconst getAllFields: INodeProperties[] = [\n\t{\n\t\tdisplayName: 'Return All',\n\t\tname: 'returnAll',\n\t\tdefault: false,\n\t\tdescription: 'Whether to return all results or only up to a given limit',\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tresource: ['container'],\n\t\t\t\toperation: ['getAll'],\n\t\t\t},\n\t\t},\n\t\trouting: {\n\t\t\tsend: {\n\t\t\t\tpaginate: '={{ $value }}',\n\t\t\t},\n\t\t\toperations: {\n\t\t\t\tasync pagination(\n\t\t\t\t\tthis: IExecutePaginationFunctions,\n\t\t\t\t\trequestOptions: DeclarativeRestApiSettings.ResultOptions,\n\t\t\t\t): Promise<INodeExecutionData[]> {\n\t\t\t\t\tlet executions: INodeExecutionData[] = [];\n\t\t\t\t\tlet marker: string | undefined = undefined;\n\t\t\t\t\trequestOptions.options.qs ??= {};\n\n\t\t\t\t\tdo {\n\t\t\t\t\t\trequestOptions.options.qs.marker = marker;\n\t\t\t\t\t\tconst responseData = await this.makeRoutingRequest(requestOptions);\n\t\t\t\t\t\tmarker = responseData[0].json.nextMarker as string | undefined;\n\t\t\t\t\t\texecutions = executions.concat(\n\t\t\t\t\t\t\t(responseData[0].json.containers as IDataObject[]).map((item) => ({ json: item })),\n\t\t\t\t\t\t);\n\t\t\t\t\t} while (marker);\n\n\t\t\t\t\treturn executions;\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\ttype: 'boolean',\n\t},\n\t{\n\t\tdisplayName: 'Limit',\n\t\tname: 'limit',\n\t\tdefault: 50,\n\t\tdescription: 'Max number of results to return',\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tresource: ['container'],\n\t\t\t\toperation: ['getAll'],\n\t\t\t\treturnAll: [false],\n\t\t\t},\n\t\t},\n\t\trouting: {\n\t\t\tsend: {\n\t\t\t\tproperty: 'maxresults',\n\t\t\t\ttype: 'query',\n\t\t\t\tvalue: '={{ $value }}',\n\t\t\t},\n\t\t\toutput: {\n\t\t\t\tpostReceive: [\n\t\t\t\t\tasync function (\n\t\t\t\t\t\tthis: IExecuteSingleFunctions,\n\t\t\t\t\t\tdata: INodeExecutionData[],\n\t\t\t\t\t\t_response: IN8nHttpFullResponse,\n\t\t\t\t\t): Promise<INodeExecutionData[]> {\n\t\t\t\t\t\treturn (data[0].json.containers as IDataObject[]).map((item) => ({ json: item }));\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t},\n\t\ttype: 'number',\n\t\ttypeOptions: {\n\t\t\tminValue: 1,\n\t\t},\n\t\tvalidateType: 'number',\n\t},\n\t{\n\t\tdisplayName: 'Options',\n\t\tname: 'options',\n\t\tdefault: {},\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tresource: ['container'],\n\t\t\t\toperation: ['getAll'],\n\t\t\t},\n\t\t},\n\t\toptions: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Fields',\n\t\t\t\tname: 'fields',\n\t\t\t\tdefault: [],\n\t\t\t\tdescription: 'The fields to add to the output',\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Metadata',\n\t\t\t\t\t\tvalue: 'metadata',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Deleted',\n\t\t\t\t\t\tvalue: 'deleted',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'System',\n\t\t\t\t\t\tvalue: 'system',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\trouting: {\n\t\t\t\t\tsend: {\n\t\t\t\t\t\tproperty: 'include',\n\t\t\t\t\t\ttype: 'query',\n\t\t\t\t\t\tvalue: '={{ $value.join(\",\") || undefined }}',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\ttype: 'multiOptions',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Filter',\n\t\t\t\tname: 'filter',\n\t\t\t\tdefault: '',\n\t\t\t\tdescription:\n\t\t\t\t\t'Filters the results to return only containers with a name that begins with the specified prefix',\n\t\t\t\tplaceholder: 'e.g. mycontainer',\n\t\t\t\trouting: {\n\t\t\t\t\tsend: {\n\t\t\t\t\t\tproperty: 'prefix',\n\t\t\t\t\t\ttype: 'query',\n\t\t\t\t\t\tvalue: '={{ $value ? $value : undefined }}',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\ttype: 'string',\n\t\t\t\tvalidateType: 'string',\n\t\t\t},\n\t\t],\n\t\tplaceholder: 'Add option',\n\t\ttype: 'collection',\n\t},\n];\n\nexport const containerFields: INodeProperties[] = [\n\t...createFields,\n\t...deleteFields,\n\t...getFields,\n\t...getAllFields,\n];\n"],"mappings":"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","names":[]}