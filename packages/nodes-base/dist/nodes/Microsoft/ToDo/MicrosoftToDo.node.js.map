{"version":3,"sources":["../../../../nodes/Microsoft/ToDo/MicrosoftToDo.node.ts"],"sourcesContent":["import moment from 'moment-timezone';\nimport type {\n\tIExecuteFunctions,\n\tIDataObject,\n\tILoadOptionsFunctions,\n\tINodeExecutionData,\n\tINodePropertyOptions,\n\tINodeType,\n\tINodeTypeDescription,\n} from 'n8n-workflow';\nimport { NodeConnectionTypes, NodeOperationError } from 'n8n-workflow';\n\nimport { microsoftApiRequest, microsoftApiRequestAllItems } from './GenericFunctions';\nimport { linkedResourceFields, linkedResourceOperations } from './LinkedResourceDescription';\nimport { listFields, listOperations } from './ListDescription';\nimport { taskFields, taskOperations } from './TaskDescription';\n\nexport class MicrosoftToDo implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'Microsoft To Do',\n\t\tname: 'microsoftToDo',\n\t\ticon: 'file:todo.svg',\n\t\tgroup: ['input'],\n\t\tversion: 1,\n\t\tsubtitle: '={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}',\n\t\tdescription: 'Consume Microsoft To Do API.',\n\t\tdefaults: {\n\t\t\tname: 'Microsoft To Do',\n\t\t},\n\t\tusableAsTool: true,\n\t\tinputs: [NodeConnectionTypes.Main],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tcredentials: [\n\t\t\t{\n\t\t\t\tname: 'microsoftToDoOAuth2Api',\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Resource',\n\t\t\t\tname: 'resource',\n\t\t\t\ttype: 'options',\n\t\t\t\tnoDataExpression: true,\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Linked Resource',\n\t\t\t\t\t\tvalue: 'linkedResource',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'List',\n\t\t\t\t\t\tvalue: 'list',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Task',\n\t\t\t\t\t\tvalue: 'task',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'task',\n\t\t\t},\n\t\t\t...linkedResourceOperations,\n\t\t\t...linkedResourceFields,\n\t\t\t...taskOperations,\n\t\t\t...taskFields,\n\t\t\t...listOperations,\n\t\t\t...listFields,\n\t\t],\n\t};\n\n\tmethods = {\n\t\tloadOptions: {\n\t\t\t// Get all the team's channels to display them to user so that they can\n\t\t\t// select them easily\n\t\t\tasync getTaskLists(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst returnData: INodePropertyOptions[] = [];\n\t\t\t\tconst lists = await microsoftApiRequestAllItems.call(this, 'value', 'GET', '/todo/lists');\n\t\t\t\tfor (const list of lists) {\n\t\t\t\t\treturnData.push({\n\t\t\t\t\t\tname: list.displayName as string,\n\t\t\t\t\t\tvalue: list.id as string,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn returnData;\n\t\t\t},\n\t\t},\n\t};\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t\tconst items = this.getInputData();\n\t\tconst returnData: INodeExecutionData[] = [];\n\t\tconst length = items.length;\n\t\tconst qs: IDataObject = {};\n\t\tlet responseData;\n\t\tconst timezone = this.getTimezone();\n\t\tconst resource = this.getNodeParameter('resource', 0);\n\t\tconst operation = this.getNodeParameter('operation', 0);\n\t\tfor (let i = 0; i < length; i++) {\n\t\t\ttry {\n\t\t\t\tif (resource === 'linkedResource') {\n\t\t\t\t\t// https://docs.microsoft.com/en-us/graph/api/todotask-post-linkedresources?view=graph-rest-1.0&tabs=http\n\t\t\t\t\tif (operation === 'create') {\n\t\t\t\t\t\tconst taskListId = this.getNodeParameter('taskListId', i) as string;\n\t\t\t\t\t\tconst taskId = this.getNodeParameter('taskId', i) as string;\n\t\t\t\t\t\tconst body: IDataObject = {\n\t\t\t\t\t\t\tapplicationName: this.getNodeParameter('applicationName', i) as string,\n\t\t\t\t\t\t\tdisplayName: this.getNodeParameter('displayName', i) as string,\n\t\t\t\t\t\t\t...this.getNodeParameter('additionalFields', i),\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tresponseData = await microsoftApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'POST',\n\t\t\t\t\t\t\t`/todo/lists/${taskListId}/tasks/${taskId}/linkedResources`,\n\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t// https://docs.microsoft.com/en-us/graph/api/linkedresource-delete?view=graph-rest-1.0&tabs=http\n\t\t\t\t\t} else if (operation === 'delete') {\n\t\t\t\t\t\tconst taskListId = this.getNodeParameter('taskListId', i) as string;\n\t\t\t\t\t\tconst taskId = this.getNodeParameter('taskId', i) as string;\n\t\t\t\t\t\tconst linkedResourceId = this.getNodeParameter('linkedResourceId', i) as string;\n\n\t\t\t\t\t\tresponseData = await microsoftApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'DELETE',\n\t\t\t\t\t\t\t`/todo/lists/${taskListId}/tasks/${taskId}/linkedResources/${linkedResourceId}`,\n\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tresponseData = { success: true };\n\n\t\t\t\t\t\t// https://docs.microsoft.com/en-us/graph/api/linkedresource-get?view=graph-rest-1.0&tabs=http\n\t\t\t\t\t} else if (operation === 'get') {\n\t\t\t\t\t\tconst taskListId = this.getNodeParameter('taskListId', i) as string;\n\t\t\t\t\t\tconst taskId = this.getNodeParameter('taskId', i) as string;\n\t\t\t\t\t\tconst linkedResourceId = this.getNodeParameter('linkedResourceId', i) as string;\n\n\t\t\t\t\t\tresponseData = await microsoftApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t`/todo/lists/${taskListId}/tasks/${taskId}/linkedResources/${linkedResourceId}`,\n\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t// https://docs.microsoft.com/en-us/graph/api/todotask-list-linkedresources?view=graph-rest-1.0&tabs=http\n\t\t\t\t\t} else if (operation === 'getAll') {\n\t\t\t\t\t\tconst taskListId = this.getNodeParameter('taskListId', i) as string;\n\t\t\t\t\t\tconst taskId = this.getNodeParameter('taskId', i) as string;\n\t\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', i);\n\n\t\t\t\t\t\tif (returnAll) {\n\t\t\t\t\t\t\tresponseData = await microsoftApiRequestAllItems.call(\n\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t'value',\n\t\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t\t`/todo/lists/${taskListId}/tasks/${taskId}/linkedResources`,\n\t\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tqs.$top = this.getNodeParameter('limit', i);\n\t\t\t\t\t\t\tresponseData = await microsoftApiRequest.call(\n\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t\t`/todo/lists/${taskListId}/tasks/${taskId}/linkedResources`,\n\t\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tresponseData = responseData.value;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// https://docs.microsoft.com/en-us/graph/api/linkedresource-update?view=graph-rest-1.0&tabs=http\n\t\t\t\t\t} else if (operation === 'update') {\n\t\t\t\t\t\tconst taskListId = this.getNodeParameter('taskListId', i) as string;\n\t\t\t\t\t\tconst taskId = this.getNodeParameter('taskId', i) as string;\n\t\t\t\t\t\tconst linkedResourceId = this.getNodeParameter('linkedResourceId', i) as string;\n\n\t\t\t\t\t\tconst body: IDataObject = {\n\t\t\t\t\t\t\t...this.getNodeParameter('updateFields', i),\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tresponseData = await microsoftApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'PATCH',\n\t\t\t\t\t\t\t`/todo/lists/${taskListId}/tasks/${taskId}/linkedResources/${linkedResourceId}`,\n\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t\t`The operation \"${operation}\" is not supported!`,\n\t\t\t\t\t\t\t{ itemIndex: i },\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t} else if (resource === 'task') {\n\t\t\t\t\t// https://docs.microsoft.com/en-us/graph/api/todotasklist-post-tasks?view=graph-rest-1.0&tabs=http\n\t\t\t\t\tif (operation === 'create') {\n\t\t\t\t\t\tconst taskListId = this.getNodeParameter('taskListId', i) as string;\n\t\t\t\t\t\tconst body: IDataObject = {\n\t\t\t\t\t\t\ttitle: this.getNodeParameter('title', i) as string,\n\t\t\t\t\t\t\t...this.getNodeParameter('additionalFields', i),\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tif (body.content) {\n\t\t\t\t\t\t\tbody.body = {\n\t\t\t\t\t\t\t\tcontent: body.content,\n\t\t\t\t\t\t\t\tcontentType: 'html',\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (body.dueDateTime) {\n\t\t\t\t\t\t\tbody.dueDateTime = {\n\t\t\t\t\t\t\t\tdateTime: moment.tz(body.dueDateTime, timezone).format(),\n\t\t\t\t\t\t\t\ttimeZone: timezone,\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (body.reminderDateTime) {\n\t\t\t\t\t\t\tbody.reminderDateTime = {\n\t\t\t\t\t\t\t\tdateTime: moment.tz(body.reminderDateTime, timezone).format(),\n\t\t\t\t\t\t\t\ttimeZone: timezone,\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tbody.isReminderOn = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await microsoftApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'POST',\n\t\t\t\t\t\t\t`/todo/lists/${taskListId}/tasks`,\n\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t// https://docs.microsoft.com/en-us/graph/api/todotask-delete?view=graph-rest-1.0&tabs=http\n\t\t\t\t\t} else if (operation === 'delete') {\n\t\t\t\t\t\tconst taskListId = this.getNodeParameter('taskListId', i) as string;\n\t\t\t\t\t\tconst taskId = this.getNodeParameter('taskId', i) as string;\n\n\t\t\t\t\t\tresponseData = await microsoftApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'DELETE',\n\t\t\t\t\t\t\t`/todo/lists/${taskListId}/tasks/${taskId}`,\n\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tresponseData = { success: true };\n\n\t\t\t\t\t\t// https://docs.microsoft.com/en-us/graph/api/todotask-get?view=graph-rest-1.0&tabs=http\n\t\t\t\t\t} else if (operation === 'get') {\n\t\t\t\t\t\tconst taskListId = this.getNodeParameter('taskListId', i) as string;\n\t\t\t\t\t\tconst taskId = this.getNodeParameter('taskId', i) as string;\n\n\t\t\t\t\t\tresponseData = await microsoftApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t`/todo/lists/${taskListId}/tasks/${taskId}`,\n\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t// https://docs.microsoft.com/en-us/graph/api/todotasklist-list-tasks?view=graph-rest-1.0&tabs=http\n\t\t\t\t\t} else if (operation === 'getAll') {\n\t\t\t\t\t\tconst taskListId = this.getNodeParameter('taskListId', i) as string;\n\t\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', i);\n\n\t\t\t\t\t\tif (returnAll) {\n\t\t\t\t\t\t\tresponseData = await microsoftApiRequestAllItems.call(\n\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t'value',\n\t\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t\t`/todo/lists/${taskListId}/tasks/`,\n\t\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tqs.$top = this.getNodeParameter('limit', i);\n\t\t\t\t\t\t\tresponseData = await microsoftApiRequest.call(\n\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t\t`/todo/lists/${taskListId}/tasks/`,\n\t\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tresponseData = responseData.value;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// https://docs.microsoft.com/en-us/graph/api/todotask-update?view=graph-rest-1.0&tabs=http\n\t\t\t\t\t} else if (operation === 'update') {\n\t\t\t\t\t\tconst taskListId = this.getNodeParameter('taskListId', i) as string;\n\t\t\t\t\t\tconst taskId = this.getNodeParameter('taskId', i) as string;\n\t\t\t\t\t\tconst body: IDataObject = {\n\t\t\t\t\t\t\t...this.getNodeParameter('updateFields', i),\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tif (body.content) {\n\t\t\t\t\t\t\tbody.body = {\n\t\t\t\t\t\t\t\tcontent: body.content,\n\t\t\t\t\t\t\t\tcontentType: 'html',\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (body.dueDateTime) {\n\t\t\t\t\t\t\tbody.dueDateTime = {\n\t\t\t\t\t\t\t\tdateTime: moment.tz(body.dueDateTime, timezone).format(),\n\t\t\t\t\t\t\t\ttimeZone: timezone,\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (body.reminderDateTime) {\n\t\t\t\t\t\t\tbody.reminderDateTime = {\n\t\t\t\t\t\t\t\tdateTime: moment.tz(body.reminderDateTime, timezone).format(),\n\t\t\t\t\t\t\t\ttimeZone: timezone,\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tbody.isReminderOn = true;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tbody.isReminderOn = false;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponseData = await microsoftApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'PATCH',\n\t\t\t\t\t\t\t`/todo/lists/${taskListId}/tasks/${taskId}`,\n\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t\t`The operation \"${operation}\" is not supported!`,\n\t\t\t\t\t\t\t{ itemIndex: i },\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t} else if (resource === 'list') {\n\t\t\t\t\t// https://docs.microsoft.com/en-us/graph/api/todo-post-lists?view=graph-rest-1.0&tabs=http\n\t\t\t\t\tif (operation === 'create') {\n\t\t\t\t\t\tconst body = {\n\t\t\t\t\t\t\tdisplayName: this.getNodeParameter('displayName', i) as string,\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tresponseData = await microsoftApiRequest.call(this, 'POST', '/todo/lists/', body, qs);\n\n\t\t\t\t\t\t// https://docs.microsoft.com/en-us/graph/api/todotasklist-delete?view=graph-rest-1.0&tabs=http\n\t\t\t\t\t} else if (operation === 'delete') {\n\t\t\t\t\t\tconst listId = this.getNodeParameter('listId', i) as string;\n\t\t\t\t\t\tresponseData = await microsoftApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'DELETE',\n\t\t\t\t\t\t\t`/todo/lists/${listId}`,\n\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tresponseData = { success: true };\n\n\t\t\t\t\t\t//https://docs.microsoft.com/en-us/graph/api/todotasklist-get?view=graph-rest-1.0&tabs=http\n\t\t\t\t\t} else if (operation === 'get') {\n\t\t\t\t\t\tconst listId = this.getNodeParameter('listId', i) as string;\n\t\t\t\t\t\tresponseData = await microsoftApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t`/todo/lists/${listId}`,\n\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t// https://docs.microsoft.com/en-us/graph/api/todo-list-lists?view=graph-rest-1.0&tabs=http\n\t\t\t\t\t} else if (operation === 'getAll') {\n\t\t\t\t\t\tconst returnAll = this.getNodeParameter('returnAll', i);\n\t\t\t\t\t\tif (returnAll) {\n\t\t\t\t\t\t\tresponseData = await microsoftApiRequestAllItems.call(\n\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t'value',\n\t\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t\t'/todo/lists',\n\t\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tqs.$top = this.getNodeParameter('limit', i);\n\t\t\t\t\t\t\tresponseData = await microsoftApiRequest.call(\n\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t\t'/todo/lists',\n\t\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tresponseData = responseData.value;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// https://docs.microsoft.com/en-us/graph/api/todotasklist-update?view=graph-rest-1.0&tabs=http\n\t\t\t\t\t} else if (operation === 'update') {\n\t\t\t\t\t\tconst listId = this.getNodeParameter('listId', i) as string;\n\t\t\t\t\t\tconst body = {\n\t\t\t\t\t\t\tdisplayName: this.getNodeParameter('displayName', i) as string,\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tresponseData = await microsoftApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'PATCH',\n\t\t\t\t\t\t\t`/todo/lists/${listId}`,\n\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t\tqs,\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t\t`The operation \"${operation}\" is not supported!`,\n\t\t\t\t\t\t\t{ itemIndex: i },\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tif (this.continueOnFail()) {\n\t\t\t\t\tconst executionErrorData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\t\tthis.helpers.returnJsonArray({ error: error.message }),\n\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t);\n\t\t\t\t\treturnData.push(...executionErrorData);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tthrow error;\n\t\t\t}\n\n\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\tthis.helpers.returnJsonArray(responseData as IDataObject),\n\t\t\t\t{ itemData: { item: i } },\n\t\t\t);\n\n\t\t\treturnData.push(...executionData);\n\t\t}\n\t\treturn [returnData];\n\t}\n}\n"],"mappings":"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","names":["moment"]}