{"version":3,"sources":["../../../nodes/SurveyMonkey/SurveyMonkeyTrigger.node.ts"],"sourcesContent":["import { createHmac } from 'crypto';\nimport type {\n\tIHookFunctions,\n\tIWebhookFunctions,\n\tIDataObject,\n\tILoadOptionsFunctions,\n\tINodeExecutionData,\n\tINodePropertyOptions,\n\tINodeType,\n\tINodeTypeDescription,\n\tIWebhookResponseData,\n} from 'n8n-workflow';\nimport { deepCopy, jsonParse, NodeConnectionTypes, NodeOperationError } from 'n8n-workflow';\n\nimport { idsExist, surveyMonkeyApiRequest, surveyMonkeyRequestAllItems } from './GenericFunctions';\nimport type { IAnswer, IChoice, IOther, IQuestion, IRow } from './Interfaces';\n\nexport class SurveyMonkeyTrigger implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'SurveyMonkey Trigger',\n\t\tname: 'surveyMonkeyTrigger',\n\t\ticon: 'file:surveyMonkey.svg',\n\t\tgroup: ['trigger'],\n\t\tversion: 1,\n\t\tdescription: 'Starts the workflow when Survey Monkey events occur',\n\t\tdefaults: {\n\t\t\tname: 'SurveyMonkey Trigger',\n\t\t},\n\t\tinputs: [],\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tcredentials: [\n\t\t\t{\n\t\t\t\tname: 'surveyMonkeyApi',\n\t\t\t\trequired: true,\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tauthentication: ['accessToken'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'surveyMonkeyOAuth2Api',\n\t\t\t\trequired: true,\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tauthentication: ['oAuth2'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t\twebhooks: [\n\t\t\t{\n\t\t\t\tname: 'setup',\n\t\t\t\thttpMethod: 'HEAD',\n\t\t\t\tresponseMode: 'onReceived',\n\t\t\t\tpath: 'webhook',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'default',\n\t\t\t\thttpMethod: 'POST',\n\t\t\t\tresponseMode: 'onReceived',\n\t\t\t\tpath: 'webhook',\n\t\t\t},\n\t\t],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Authentication',\n\t\t\t\tname: 'authentication',\n\t\t\t\ttype: 'options',\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Access Token',\n\t\t\t\t\t\tvalue: 'accessToken',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'OAuth2',\n\t\t\t\t\t\tvalue: 'oAuth2',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'accessToken',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Type',\n\t\t\t\tname: 'objectType',\n\t\t\t\ttype: 'options',\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Collector',\n\t\t\t\t\t\tvalue: 'collector',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Survey',\n\t\t\t\t\t\tvalue: 'survey',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: '',\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Event',\n\t\t\t\tname: 'event',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tobjectType: ['survey'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\ttype: 'options',\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Collector Created',\n\t\t\t\t\t\tvalue: 'collector_created',\n\t\t\t\t\t\tdescription: 'A collector is created',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Collector Deleted',\n\t\t\t\t\t\tvalue: 'collector_deleted',\n\t\t\t\t\t\tdescription: 'A collector is deleted',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Collector Updated',\n\t\t\t\t\t\tvalue: 'collector_updated',\n\t\t\t\t\t\tdescription: 'A collector is updated',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Response Completed',\n\t\t\t\t\t\tvalue: 'response_completed',\n\t\t\t\t\t\tdescription: 'A survey response is completed',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Response Created',\n\t\t\t\t\t\tvalue: 'response_created',\n\t\t\t\t\t\tdescription: 'A respondent begins a survey',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Response Deleted',\n\t\t\t\t\t\tvalue: 'response_deleted',\n\t\t\t\t\t\tdescription: 'A response is deleted',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Response Disqualified',\n\t\t\t\t\t\tvalue: 'response_disqualified',\n\t\t\t\t\t\tdescription: 'A survey response is disqualified',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Response Overquota',\n\t\t\t\t\t\tvalue: 'response_overquota',\n\t\t\t\t\t\tdescription: 'A response is over a survey’s quota',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Response Updated',\n\t\t\t\t\t\tvalue: 'response_updated',\n\t\t\t\t\t\tdescription: 'A survey response is updated',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Survey Created',\n\t\t\t\t\t\tvalue: 'survey_created',\n\t\t\t\t\t\tdescription: 'A survey is created',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Survey Deleted',\n\t\t\t\t\t\tvalue: 'survey_deleted',\n\t\t\t\t\t\tdescription: 'A survey is deleted',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Survey Updated',\n\t\t\t\t\t\tvalue: 'survey_updated',\n\t\t\t\t\t\tdescription: 'A survey is updated',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: '',\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Event',\n\t\t\t\tname: 'event',\n\t\t\t\ttype: 'options',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tobjectType: ['collector'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Collector Deleted',\n\t\t\t\t\t\tvalue: 'collector_deleted',\n\t\t\t\t\t\tdescription: 'A collector is deleted',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Collector Updated',\n\t\t\t\t\t\tvalue: 'collector_updated',\n\t\t\t\t\t\tdescription: 'A collector is updated',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Response Completed',\n\t\t\t\t\t\tvalue: 'response_completed',\n\t\t\t\t\t\tdescription: 'A survey response is completed',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Response Created',\n\t\t\t\t\t\tvalue: 'response_created',\n\t\t\t\t\t\tdescription: 'A respondent begins a survey',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Response Deleted',\n\t\t\t\t\t\tvalue: 'response_deleted',\n\t\t\t\t\t\tdescription: 'A response is deleted',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Response Disqualified',\n\t\t\t\t\t\tvalue: 'response_disqualified',\n\t\t\t\t\t\tdescription: 'A survey response is disqualified',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Response Overquota',\n\t\t\t\t\t\tvalue: 'response_overquota',\n\t\t\t\t\t\tdescription: 'A response is over a survey’s quota',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Response Updated',\n\t\t\t\t\t\tvalue: 'response_updated',\n\t\t\t\t\t\tdescription: 'A survey response is updated',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: '',\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Survey Names or IDs',\n\t\t\t\tname: 'surveyIds',\n\t\t\t\ttype: 'multiOptions',\n\t\t\t\tdescription:\n\t\t\t\t\t'Choose from the list, or specify IDs using an <a href=\"https://docs.n8n.io/code/expressions/\">expression</a>',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tobjectType: ['survey'],\n\t\t\t\t\t},\n\t\t\t\t\thide: {\n\t\t\t\t\t\tevent: ['survey_created'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\ttypeOptions: {\n\t\t\t\t\tloadOptionsMethod: 'getSurveys',\n\t\t\t\t},\n\t\t\t\toptions: [],\n\t\t\t\tdefault: [],\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Survey Name or ID',\n\t\t\t\tname: 'surveyId',\n\t\t\t\ttype: 'options',\n\t\t\t\tdescription:\n\t\t\t\t\t'Choose from the list, or specify an ID using an <a href=\"https://docs.n8n.io/code/expressions/\">expression</a>',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tobjectType: ['collector'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\ttypeOptions: {\n\t\t\t\t\tloadOptionsMethod: 'getSurveys',\n\t\t\t\t},\n\t\t\t\tdefault: [],\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Collector Names or IDs',\n\t\t\t\tname: 'collectorIds',\n\t\t\t\ttype: 'multiOptions',\n\t\t\t\tdescription:\n\t\t\t\t\t'Choose from the list, or specify IDs using an <a href=\"https://docs.n8n.io/code/expressions/\">expression</a>',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tobjectType: ['collector'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\ttypeOptions: {\n\t\t\t\t\tloadOptionsMethod: 'getCollectors',\n\t\t\t\t\tloadOptionsDependsOn: ['surveyId'],\n\t\t\t\t},\n\t\t\t\toptions: [],\n\t\t\t\tdefault: [],\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Resolve Data',\n\t\t\t\tname: 'resolveData',\n\t\t\t\ttype: 'boolean',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tevent: ['response_completed'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdefault: true,\n\t\t\t\t// eslint-disable-next-line n8n-nodes-base/node-param-description-boolean-without-whether\n\t\t\t\tdescription:\n\t\t\t\t\t'By default the webhook-data only contain the IDs. If this option gets activated, it will resolve the data automatically.',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Only Answers',\n\t\t\t\tname: 'onlyAnswers',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tresolveData: [true],\n\t\t\t\t\t\tevent: ['response_completed'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\ttype: 'boolean',\n\t\t\t\tdefault: true,\n\t\t\t\tdescription: 'Whether to return only the answers of the form and not any of the other data',\n\t\t\t},\n\t\t],\n\t};\n\n\tmethods = {\n\t\tloadOptions: {\n\t\t\t// Get all the survey's collectors to display them to user so that they can\n\t\t\t// select them easily\n\t\t\tasync getCollectors(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst surveyId = this.getCurrentNodeParameter('surveyId');\n\t\t\t\tconst returnData: INodePropertyOptions[] = [];\n\t\t\t\tconst collectors = await surveyMonkeyRequestAllItems.call(\n\t\t\t\t\tthis,\n\t\t\t\t\t'data',\n\t\t\t\t\t'GET',\n\t\t\t\t\t`/surveys/${surveyId}/collectors`,\n\t\t\t\t);\n\t\t\t\tfor (const collector of collectors) {\n\t\t\t\t\tconst collectorName = collector.name;\n\t\t\t\t\tconst collectorId = collector.id;\n\t\t\t\t\treturnData.push({\n\t\t\t\t\t\tname: collectorName,\n\t\t\t\t\t\tvalue: collectorId,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn returnData;\n\t\t\t},\n\n\t\t\t// Get all the surveys to display them to user so that they can\n\t\t\t// select them easily\n\t\t\tasync getSurveys(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n\t\t\t\tconst returnData: INodePropertyOptions[] = [];\n\t\t\t\tconst surveys = await surveyMonkeyRequestAllItems.call(this, 'data', 'GET', '/surveys');\n\t\t\t\tfor (const survey of surveys) {\n\t\t\t\t\tconst surveyName = survey.title;\n\t\t\t\t\tconst surveyId = survey.id;\n\t\t\t\t\treturnData.push({\n\t\t\t\t\t\tname: surveyName,\n\t\t\t\t\t\tvalue: surveyId,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn returnData;\n\t\t\t},\n\t\t},\n\t};\n\n\twebhookMethods = {\n\t\tdefault: {\n\t\t\tasync checkExists(this: IHookFunctions): Promise<boolean> {\n\t\t\t\tconst objectType = this.getNodeParameter('objectType') as string;\n\t\t\t\tconst event = this.getNodeParameter('event') as string;\n\t\t\t\t// Check all the webhooks which exist already if it is identical to the\n\t\t\t\t// one that is supposed to get created.\n\t\t\t\tconst endpoint = '/webhooks';\n\n\t\t\t\tconst responseData = await surveyMonkeyRequestAllItems.call(\n\t\t\t\t\tthis,\n\t\t\t\t\t'data',\n\t\t\t\t\t'GET',\n\t\t\t\t\tendpoint,\n\t\t\t\t\t{},\n\t\t\t\t);\n\n\t\t\t\tconst webhookUrl = this.getNodeWebhookUrl('default');\n\n\t\t\t\tconst ids: string[] = [];\n\n\t\t\t\tif (objectType === 'survey' && event !== 'survey_created') {\n\t\t\t\t\tconst surveyIds = this.getNodeParameter('surveyIds') as string[];\n\t\t\t\t\tids.push.apply(ids, surveyIds);\n\t\t\t\t} else if (objectType === 'collector') {\n\t\t\t\t\tconst collectorIds = this.getNodeParameter('collectorIds') as string[];\n\t\t\t\t\tids.push.apply(ids, collectorIds);\n\t\t\t\t}\n\n\t\t\t\tfor (const webhook of responseData) {\n\t\t\t\t\tconst webhookDetails = await surveyMonkeyApiRequest.call(\n\t\t\t\t\t\tthis,\n\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t`/webhooks/${webhook.id}`,\n\t\t\t\t\t);\n\t\t\t\t\tif (\n\t\t\t\t\t\twebhookDetails.subscription_url === webhookUrl &&\n\t\t\t\t\t\tidsExist(webhookDetails.object_ids as string[], ids) &&\n\t\t\t\t\t\twebhookDetails.event_type === event\n\t\t\t\t\t) {\n\t\t\t\t\t\t// Set webhook-id to be sure that it can be deleted\n\t\t\t\t\t\tconst webhookData = this.getWorkflowStaticData('node');\n\t\t\t\t\t\twebhookData.webhookId = webhook.id as string;\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn false;\n\t\t\t},\n\n\t\t\tasync create(this: IHookFunctions): Promise<boolean> {\n\t\t\t\tconst webhookUrl = this.getNodeWebhookUrl('default');\n\t\t\t\tconst event = this.getNodeParameter('event') as string;\n\t\t\t\tconst objectType = this.getNodeParameter('objectType') as string;\n\t\t\t\tconst endpoint = '/webhooks';\n\t\t\t\tconst ids: string[] = [];\n\n\t\t\t\tif (objectType === 'survey' && event !== 'survey_created') {\n\t\t\t\t\tconst surveyIds = this.getNodeParameter('surveyIds') as string[];\n\t\t\t\t\tids.push.apply(ids, surveyIds);\n\t\t\t\t} else if (objectType === 'collector') {\n\t\t\t\t\tconst collectorIds = this.getNodeParameter('collectorIds') as string[];\n\t\t\t\t\tids.push.apply(ids, collectorIds);\n\t\t\t\t}\n\n\t\t\t\tconst body: IDataObject = {\n\t\t\t\t\tname: `n8n - Webhook [${event}]`,\n\t\t\t\t\tobject_type: objectType,\n\t\t\t\t\tobject_ids: ids,\n\t\t\t\t\tsubscription_url: webhookUrl,\n\t\t\t\t\tevent_type: event,\n\t\t\t\t};\n\n\t\t\t\tif (objectType === 'survey' && event === 'survey_created') {\n\t\t\t\t\tdelete body.object_type;\n\t\t\t\t\tdelete body.object_ids;\n\t\t\t\t}\n\n\t\t\t\tlet responseData: IDataObject = {};\n\n\t\t\t\tresponseData = await surveyMonkeyApiRequest.call(this, 'POST', endpoint, body);\n\n\t\t\t\tif (responseData.id === undefined) {\n\t\t\t\t\t// Required data is missing so was not successful\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tconst webhookData = this.getWorkflowStaticData('node');\n\t\t\t\twebhookData.webhookId = responseData.id as string;\n\n\t\t\t\treturn true;\n\t\t\t},\n\t\t\tasync delete(this: IHookFunctions): Promise<boolean> {\n\t\t\t\tconst webhookData = this.getWorkflowStaticData('node');\n\t\t\t\tif (webhookData.webhookId !== undefined) {\n\t\t\t\t\tconst endpoint = `/webhooks/${webhookData.webhookId}`;\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tawait surveyMonkeyApiRequest.call(this, 'DELETE', endpoint);\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Remove from the static workflow data so that it is clear\n\t\t\t\t\t// that no webhooks are registered anymore\n\t\t\t\t\tdelete webhookData.webhookId;\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\t\t\t},\n\t\t},\n\t};\n\n\tasync webhook(this: IWebhookFunctions): Promise<IWebhookResponseData> {\n\t\tconst event = this.getNodeParameter('event') as string;\n\t\tconst objectType = this.getNodeParameter('objectType') as string;\n\t\tconst authenticationMethod = this.getNodeParameter('authentication') as string;\n\t\tlet credentials: IDataObject;\n\t\tconst headerData = this.getHeaderData() as IDataObject;\n\t\tconst req = this.getRequestObject();\n\t\tconst webhookName = this.getWebhookName();\n\n\t\tif (authenticationMethod === 'accessToken') {\n\t\t\tcredentials = await this.getCredentials('surveyMonkeyApi');\n\t\t} else {\n\t\t\tcredentials = await this.getCredentials('surveyMonkeyOAuth2Api');\n\t\t}\n\n\t\tif (webhookName === 'setup') {\n\t\t\t// It is a create webhook confirmation request\n\t\t\treturn {};\n\t\t}\n\n\t\tif (headerData['sm-signature'] === undefined) {\n\t\t\treturn {};\n\t\t}\n\n\t\treturn await new Promise((resolve, _reject) => {\n\t\t\tconst data: Buffer[] = [];\n\n\t\t\treq.on('data', (chunk) => {\n\t\t\t\tdata.push(chunk as Buffer);\n\t\t\t});\n\n\t\t\treq.on('end', async () => {\n\t\t\t\tconst computedSignature = createHmac(\n\t\t\t\t\t'sha1',\n\t\t\t\t\t`${credentials.clientId}&${credentials.clientSecret}`,\n\t\t\t\t)\n\t\t\t\t\t.update(data.join(''))\n\t\t\t\t\t.digest('base64');\n\t\t\t\tif (headerData['sm-signature'] !== computedSignature) {\n\t\t\t\t\t// Signature is not valid so ignore call\n\t\t\t\t\treturn {};\n\t\t\t\t}\n\n\t\t\t\tlet responseData = jsonParse<any>(data.join(''));\n\t\t\t\tlet endpoint = '';\n\n\t\t\t\tlet returnItem: INodeExecutionData[] = [\n\t\t\t\t\t{\n\t\t\t\t\t\tjson: responseData,\n\t\t\t\t\t},\n\t\t\t\t];\n\n\t\t\t\tif (event === 'response_completed') {\n\t\t\t\t\tconst resolveData = this.getNodeParameter('resolveData') as boolean;\n\t\t\t\t\tif (resolveData) {\n\t\t\t\t\t\tif (objectType === 'survey') {\n\t\t\t\t\t\t\tendpoint = `/surveys/${responseData.resources.survey_id}/responses/${responseData.object_id}/details`;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tendpoint = `/collectors/${responseData.resources.collector_id}/responses/${responseData.object_id}/details`;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresponseData = await surveyMonkeyApiRequest.call(this, 'GET', endpoint);\n\t\t\t\t\t\tconst surveyId = responseData.survey_id;\n\n\t\t\t\t\t\tconst questions: IQuestion[] = [];\n\t\t\t\t\t\tconst answers = new Map<string, IAnswer[]>();\n\n\t\t\t\t\t\tconst { pages } = await surveyMonkeyApiRequest.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t'GET',\n\t\t\t\t\t\t\t`/surveys/${surveyId}/details`,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tfor (const page of pages) {\n\t\t\t\t\t\t\tquestions.push.apply(questions, page.questions as IQuestion[]);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfor (const page of responseData.pages as IDataObject[]) {\n\t\t\t\t\t\t\tfor (const question of page.questions as IDataObject[]) {\n\t\t\t\t\t\t\t\tanswers.set(question.id as string, question.answers as IAnswer[]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst responseQuestions = new Map<string, number | string | string[] | IDataObject>();\n\n\t\t\t\t\t\tfor (const question of questions) {\n\t\t\t\t\t\t\t/*\n\t\t\t\t\t\t\tTODO: add support for premium components\n\t\t\t\t\t\t\t- File Upload\n\t\t\t\t\t\t\t- Matrix of dropdowm menus\n\t\t\t\t\t\t\t*/\n\n\t\t\t\t\t\t\t// if question does not have an answer ignore it\n\t\t\t\t\t\t\tif (!answers.get(question.id)) {\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tconst heading = question.headings![0].heading as string;\n\n\t\t\t\t\t\t\tif (question.family === 'open_ended' || question.family === 'datetime') {\n\t\t\t\t\t\t\t\tif (question.subtype !== 'multi') {\n\t\t\t\t\t\t\t\t\tresponseQuestions.set(heading, answers.get(question.id)![0].text as string);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tconst results: IDataObject = {};\n\t\t\t\t\t\t\t\t\tconst keys = (question.answers.rows as IRow[]).map((e) => e.text);\n\t\t\t\t\t\t\t\t\tconst values = answers.get(question.id)?.map((e) => e.text) as string[];\n\t\t\t\t\t\t\t\t\tfor (let i = 0; i < keys.length; i++) {\n\t\t\t\t\t\t\t\t\t\t// if for some reason there are questions texts repeted add the index to the key\n\t\t\t\t\t\t\t\t\t\tif (results[keys[i]] !== undefined) {\n\t\t\t\t\t\t\t\t\t\t\tresults[`${keys[i]}(${i})`] = values[i] || '';\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\tresults[keys[i]] = values[i] || '';\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tresponseQuestions.set(heading, results);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (question.family === 'single_choice') {\n\t\t\t\t\t\t\t\tconst other = question.answers.other as IOther;\n\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\tother?.visible &&\n\t\t\t\t\t\t\t\t\tother.is_answer_choice &&\n\t\t\t\t\t\t\t\t\tanswers.get(question.id)![0].other_id\n\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\tresponseQuestions.set(heading, answers.get(question.id)![0].text as string);\n\t\t\t\t\t\t\t\t} else if (other?.visible && !other.is_answer_choice) {\n\t\t\t\t\t\t\t\t\tconst choiceId = answers.get(question.id)![0].choice_id;\n\n\t\t\t\t\t\t\t\t\tconst choice = (question.answers.choices as IChoice[]).filter(\n\t\t\t\t\t\t\t\t\t\t(e) => e.id === choiceId,\n\t\t\t\t\t\t\t\t\t)[0];\n\n\t\t\t\t\t\t\t\t\tconst comment = answers.get(question.id)?.find((e) => e.other_id === other.id)\n\t\t\t\t\t\t\t\t\t\t?.text as string;\n\t\t\t\t\t\t\t\t\tresponseQuestions.set(heading, { value: choice.text, comment });\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tconst choiceId = answers.get(question.id)![0].choice_id;\n\t\t\t\t\t\t\t\t\tconst choice = (question.answers.choices as IChoice[]).filter(\n\t\t\t\t\t\t\t\t\t\t(e) => e.id === choiceId,\n\t\t\t\t\t\t\t\t\t)[0];\n\t\t\t\t\t\t\t\t\tresponseQuestions.set(heading, choice.text);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (question.family === 'multiple_choice') {\n\t\t\t\t\t\t\t\tconst other = question.answers.other as IOther;\n\t\t\t\t\t\t\t\tconst choiceIds = answers.get(question.id)?.map((e) => e.choice_id);\n\t\t\t\t\t\t\t\tconst value = (question.answers.choices as IChoice[])\n\t\t\t\t\t\t\t\t\t.filter((e) => choiceIds?.includes(e.id))\n\t\t\t\t\t\t\t\t\t.map((e) => e.text);\n\t\t\t\t\t\t\t\t// if \"Add an \"Other\" Answer Option for Comments\" is active and was selected\n\t\t\t\t\t\t\t\tif (other?.is_answer_choice && other.visible) {\n\t\t\t\t\t\t\t\t\tconst text = answers.get(question.id)?.find((e) => e.other_id === other.id)\n\t\t\t\t\t\t\t\t\t\t?.text as string;\n\t\t\t\t\t\t\t\t\tvalue.push(text);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tresponseQuestions.set(heading, value);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (question.family === 'matrix') {\n\t\t\t\t\t\t\t\t// if more than one row it's a matrix/rating-scale\n\t\t\t\t\t\t\t\tconst rows = question.answers.rows as IRow[];\n\n\t\t\t\t\t\t\t\tif (rows.length > 1) {\n\t\t\t\t\t\t\t\t\tconst results: IDataObject = {};\n\t\t\t\t\t\t\t\t\tconst choiceIds = answers.get(question.id)?.map((e) => e.choice_id) as string[];\n\t\t\t\t\t\t\t\t\tconst rowIds = answers.get(question.id)?.map((e) => e.row_id) as string[];\n\n\t\t\t\t\t\t\t\t\tconst rowsValues = (question.answers.rows as IRow[])\n\t\t\t\t\t\t\t\t\t\t.filter((e) => rowIds.includes(e.id))\n\t\t\t\t\t\t\t\t\t\t.map((e) => e.text);\n\n\t\t\t\t\t\t\t\t\tconst choicesValues = (question.answers.choices as IChoice[])\n\t\t\t\t\t\t\t\t\t\t.filter((e) => choiceIds.includes(e.id))\n\t\t\t\t\t\t\t\t\t\t.map((e) => e.text);\n\n\t\t\t\t\t\t\t\t\tfor (let i = 0; i < rowsValues.length; i++) {\n\t\t\t\t\t\t\t\t\t\tresults[rowsValues[i]] = choicesValues[i] || '';\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t// add the rows that were not answered\n\t\t\t\t\t\t\t\t\tfor (const row of question.answers.rows as IDataObject[]) {\n\t\t\t\t\t\t\t\t\t\tif (!rowIds.includes(row.id as string)) {\n\t\t\t\t\t\t\t\t\t\t\tresults[row.text as string] = '';\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t// the comment then add the comment\n\t\t\t\t\t\t\t\t\tconst other = question.answers.other as IOther;\n\t\t\t\t\t\t\t\t\tif (other?.visible) {\n\t\t\t\t\t\t\t\t\t\tresults.comment = answers.get(question.id)?.filter((e) => e.other_id)[0].text;\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tresponseQuestions.set(heading, results);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tconst choiceIds = answers.get(question.id)?.map((e) => e.choice_id);\n\t\t\t\t\t\t\t\t\tconst value = (question.answers.choices as IChoice[])\n\t\t\t\t\t\t\t\t\t\t.filter((e) => choiceIds!.includes(e.id))\n\t\t\t\t\t\t\t\t\t\t.map((e) => (e.text === '' ? e.weight : e.text))[0];\n\t\t\t\t\t\t\t\t\tresponseQuestions.set(heading, value);\n\n\t\t\t\t\t\t\t\t\t// if \"Add an Other Answer Option for Comments\" is active then add comment to the answer\n\t\t\t\t\t\t\t\t\tconst other = question.answers.other as IOther;\n\t\t\t\t\t\t\t\t\tif (other?.visible) {\n\t\t\t\t\t\t\t\t\t\tconst response: IDataObject = {};\n\t\t\t\t\t\t\t\t\t\t//const questionName = (question.answers.other as IOther).text as string;\n\t\t\t\t\t\t\t\t\t\tconst text = answers.get(question.id)?.filter((e) => e.other_id)[0].text;\n\t\t\t\t\t\t\t\t\t\tresponse.value = value;\n\t\t\t\t\t\t\t\t\t\tresponse.comment = text;\n\t\t\t\t\t\t\t\t\t\tresponseQuestions.set(heading, response);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (question.family === 'demographic') {\n\t\t\t\t\t\t\t\tconst rows: IDataObject = {};\n\t\t\t\t\t\t\t\tfor (const row of answers.get(question.id) as IAnswer[]) {\n\t\t\t\t\t\t\t\t\trows[row.row_id as string] = row.text;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tconst addressInfo: IDataObject = {};\n\t\t\t\t\t\t\t\tfor (const answer of question.answers.rows as IDataObject[]) {\n\t\t\t\t\t\t\t\t\taddressInfo[answer.type as string] = rows[answer.id as string] || '';\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tresponseQuestions.set(heading, addressInfo);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (question.family === 'presentation') {\n\t\t\t\t\t\t\t\tif (question.subtype === 'image') {\n\t\t\t\t\t\t\t\t\tconst { url } = question.headings![0].image as IDataObject;\n\t\t\t\t\t\t\t\t\tresponseQuestions.set(heading, url as string);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdelete responseData.pages;\n\t\t\t\t\t\tresponseData.questions = {};\n\n\t\t\t\t\t\t// Map the \"Map\" to JSON\n\t\t\t\t\t\tconst tuples = deepCopy([...responseQuestions]);\n\t\t\t\t\t\tfor (const [key, value] of tuples) {\n\t\t\t\t\t\t\tresponseData.questions[key] = value;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst onlyAnswers = this.getNodeParameter('onlyAnswers') as boolean;\n\t\t\t\t\t\tif (onlyAnswers) {\n\t\t\t\t\t\t\tresponseData = responseData.questions;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturnItem = [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tjson: responseData,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn resolve({\n\t\t\t\t\tworkflowData: [returnItem],\n\t\t\t\t});\n\t\t\t});\n\n\t\t\treq.on('error', (error) => {\n\t\t\t\tthrow new NodeOperationError(this.getNode(), error);\n\t\t\t});\n\t\t});\n\t}\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAA2B;AAY3B,0BAA6E;AAE7E,8BAA8E;AAGvE,MAAM,oBAAyC;AAAA,EAA/C;AACN,uBAAoC;AAAA,MACnC,aAAa;AAAA,MACb,MAAM;AAAA,MACN,MAAM;AAAA,MACN,OAAO,CAAC,SAAS;AAAA,MACjB,SAAS;AAAA,MACT,aAAa;AAAA,MACb,UAAU;AAAA,QACT,MAAM;AAAA,MACP;AAAA,MACA,QAAQ,CAAC;AAAA,MACT,SAAS,CAAC,wCAAoB,IAAI;AAAA,MAClC,aAAa;AAAA,QACZ;AAAA,UACC,MAAM;AAAA,UACN,UAAU;AAAA,UACV,gBAAgB;AAAA,YACf,MAAM;AAAA,cACL,gBAAgB,CAAC,aAAa;AAAA,YAC/B;AAAA,UACD;AAAA,QACD;AAAA,QACA;AAAA,UACC,MAAM;AAAA,UACN,UAAU;AAAA,UACV,gBAAgB;AAAA,YACf,MAAM;AAAA,cACL,gBAAgB,CAAC,QAAQ;AAAA,YAC1B;AAAA,UACD;AAAA,QACD;AAAA,MACD;AAAA,MACA,UAAU;AAAA,QACT;AAAA,UACC,MAAM;AAAA,UACN,YAAY;AAAA,UACZ,cAAc;AAAA,UACd,MAAM;AAAA,QACP;AAAA,QACA;AAAA,UACC,MAAM;AAAA,UACN,YAAY;AAAA,UACZ,cAAc;AAAA,UACd,MAAM;AAAA,QACP;AAAA,MACD;AAAA,MACA,YAAY;AAAA,QACX;AAAA,UACC,aAAa;AAAA,UACb,MAAM;AAAA,UACN,MAAM;AAAA,UACN,SAAS;AAAA,YACR;AAAA,cACC,MAAM;AAAA,cACN,OAAO;AAAA,YACR;AAAA,YACA;AAAA,cACC,MAAM;AAAA,cACN,OAAO;AAAA,YACR;AAAA,UACD;AAAA,UACA,SAAS;AAAA,QACV;AAAA,QACA;AAAA,UACC,aAAa;AAAA,UACb,MAAM;AAAA,UACN,MAAM;AAAA,UACN,SAAS;AAAA,YACR;AAAA,cACC,MAAM;AAAA,cACN,OAAO;AAAA,YACR;AAAA,YACA;AAAA,cACC,MAAM;AAAA,cACN,OAAO;AAAA,YACR;AAAA,UACD;AAAA,UACA,SAAS;AAAA,UACT,UAAU;AAAA,QACX;AAAA,QACA;AAAA,UACC,aAAa;AAAA,UACb,MAAM;AAAA,UACN,gBAAgB;AAAA,YACf,MAAM;AAAA,cACL,YAAY,CAAC,QAAQ;AAAA,YACtB;AAAA,UACD;AAAA,UACA,MAAM;AAAA,UACN,SAAS;AAAA,YACR;AAAA,cACC,MAAM;AAAA,cACN,OAAO;AAAA,cACP,aAAa;AAAA,YACd;AAAA,YACA;AAAA,cACC,MAAM;AAAA,cACN,OAAO;AAAA,cACP,aAAa;AAAA,YACd;AAAA,YACA;AAAA,cACC,MAAM;AAAA,cACN,OAAO;AAAA,cACP,aAAa;AAAA,YACd;AAAA,YACA;AAAA,cACC,MAAM;AAAA,cACN,OAAO;AAAA,cACP,aAAa;AAAA,YACd;AAAA,YACA;AAAA,cACC,MAAM;AAAA,cACN,OAAO;AAAA,cACP,aAAa;AAAA,YACd;AAAA,YACA;AAAA,cACC,MAAM;AAAA,cACN,OAAO;AAAA,cACP,aAAa;AAAA,YACd;AAAA,YACA;AAAA,cACC,MAAM;AAAA,cACN,OAAO;AAAA,cACP,aAAa;AAAA,YACd;AAAA,YACA;AAAA,cACC,MAAM;AAAA,cACN,OAAO;AAAA,cACP,aAAa;AAAA,YACd;AAAA,YACA;AAAA,cACC,MAAM;AAAA,cACN,OAAO;AAAA,cACP,aAAa;AAAA,YACd;AAAA,YACA;AAAA,cACC,MAAM;AAAA,cACN,OAAO;AAAA,cACP,aAAa;AAAA,YACd;AAAA,YACA;AAAA,cACC,MAAM;AAAA,cACN,OAAO;AAAA,cACP,aAAa;AAAA,YACd;AAAA,YACA;AAAA,cACC,MAAM;AAAA,cACN,OAAO;AAAA,cACP,aAAa;AAAA,YACd;AAAA,UACD;AAAA,UACA,SAAS;AAAA,UACT,UAAU;AAAA,QACX;AAAA,QACA;AAAA,UACC,aAAa;AAAA,UACb,MAAM;AAAA,UACN,MAAM;AAAA,UACN,gBAAgB;AAAA,YACf,MAAM;AAAA,cACL,YAAY,CAAC,WAAW;AAAA,YACzB;AAAA,UACD;AAAA,UACA,SAAS;AAAA,YACR;AAAA,cACC,MAAM;AAAA,cACN,OAAO;AAAA,cACP,aAAa;AAAA,YACd;AAAA,YACA;AAAA,cACC,MAAM;AAAA,cACN,OAAO;AAAA,cACP,aAAa;AAAA,YACd;AAAA,YACA;AAAA,cACC,MAAM;AAAA,cACN,OAAO;AAAA,cACP,aAAa;AAAA,YACd;AAAA,YACA;AAAA,cACC,MAAM;AAAA,cACN,OAAO;AAAA,cACP,aAAa;AAAA,YACd;AAAA,YACA;AAAA,cACC,MAAM;AAAA,cACN,OAAO;AAAA,cACP,aAAa;AAAA,YACd;AAAA,YACA;AAAA,cACC,MAAM;AAAA,cACN,OAAO;AAAA,cACP,aAAa;AAAA,YACd;AAAA,YACA;AAAA,cACC,MAAM;AAAA,cACN,OAAO;AAAA,cACP,aAAa;AAAA,YACd;AAAA,YACA;AAAA,cACC,MAAM;AAAA,cACN,OAAO;AAAA,cACP,aAAa;AAAA,YACd;AAAA,UACD;AAAA,UACA,SAAS;AAAA,UACT,UAAU;AAAA,QACX;AAAA,QACA;AAAA,UACC,aAAa;AAAA,UACb,MAAM;AAAA,UACN,MAAM;AAAA,UACN,aACC;AAAA,UACD,gBAAgB;AAAA,YACf,MAAM;AAAA,cACL,YAAY,CAAC,QAAQ;AAAA,YACtB;AAAA,YACA,MAAM;AAAA,cACL,OAAO,CAAC,gBAAgB;AAAA,YACzB;AAAA,UACD;AAAA,UACA,aAAa;AAAA,YACZ,mBAAmB;AAAA,UACpB;AAAA,UACA,SAAS,CAAC;AAAA,UACV,SAAS,CAAC;AAAA,UACV,UAAU;AAAA,QACX;AAAA,QACA;AAAA,UACC,aAAa;AAAA,UACb,MAAM;AAAA,UACN,MAAM;AAAA,UACN,aACC;AAAA,UACD,gBAAgB;AAAA,YACf,MAAM;AAAA,cACL,YAAY,CAAC,WAAW;AAAA,YACzB;AAAA,UACD;AAAA,UACA,aAAa;AAAA,YACZ,mBAAmB;AAAA,UACpB;AAAA,UACA,SAAS,CAAC;AAAA,UACV,UAAU;AAAA,QACX;AAAA,QACA;AAAA,UACC,aAAa;AAAA,UACb,MAAM;AAAA,UACN,MAAM;AAAA,UACN,aACC;AAAA,UACD,gBAAgB;AAAA,YACf,MAAM;AAAA,cACL,YAAY,CAAC,WAAW;AAAA,YACzB;AAAA,UACD;AAAA,UACA,aAAa;AAAA,YACZ,mBAAmB;AAAA,YACnB,sBAAsB,CAAC,UAAU;AAAA,UAClC;AAAA,UACA,SAAS,CAAC;AAAA,UACV,SAAS,CAAC;AAAA,UACV,UAAU;AAAA,QACX;AAAA,QACA;AAAA,UACC,aAAa;AAAA,UACb,MAAM;AAAA,UACN,MAAM;AAAA,UACN,gBAAgB;AAAA,YACf,MAAM;AAAA,cACL,OAAO,CAAC,oBAAoB;AAAA,YAC7B;AAAA,UACD;AAAA,UACA,SAAS;AAAA;AAAA,UAET,aACC;AAAA,QACF;AAAA,QACA;AAAA,UACC,aAAa;AAAA,UACb,MAAM;AAAA,UACN,gBAAgB;AAAA,YACf,MAAM;AAAA,cACL,aAAa,CAAC,IAAI;AAAA,cAClB,OAAO,CAAC,oBAAoB;AAAA,YAC7B;AAAA,UACD;AAAA,UACA,MAAM;AAAA,UACN,SAAS;AAAA,UACT,aAAa;AAAA,QACd;AAAA,MACD;AAAA,IACD;AAEA,mBAAU;AAAA,MACT,aAAa;AAAA;AAAA;AAAA,QAGZ,MAAM,gBAA4E;AACjF,gBAAM,WAAW,KAAK,wBAAwB,UAAU;AACxD,gBAAM,aAAqC,CAAC;AAC5C,gBAAM,aAAa,MAAM,oDAA4B;AAAA,YACpD;AAAA,YACA;AAAA,YACA;AAAA,YACA,YAAY,QAAQ;AAAA,UACrB;AACA,qBAAW,aAAa,YAAY;AACnC,kBAAM,gBAAgB,UAAU;AAChC,kBAAM,cAAc,UAAU;AAC9B,uBAAW,KAAK;AAAA,cACf,MAAM;AAAA,cACN,OAAO;AAAA,YACR,CAAC;AAAA,UACF;AACA,iBAAO;AAAA,QACR;AAAA;AAAA;AAAA,QAIA,MAAM,aAAyE;AAC9E,gBAAM,aAAqC,CAAC;AAC5C,gBAAM,UAAU,MAAM,oDAA4B,KAAK,MAAM,QAAQ,OAAO,UAAU;AACtF,qBAAW,UAAU,SAAS;AAC7B,kBAAM,aAAa,OAAO;AAC1B,kBAAM,WAAW,OAAO;AACxB,uBAAW,KAAK;AAAA,cACf,MAAM;AAAA,cACN,OAAO;AAAA,YACR,CAAC;AAAA,UACF;AACA,iBAAO;AAAA,QACR;AAAA,MACD;AAAA,IACD;AAEA,0BAAiB;AAAA,MAChB,SAAS;AAAA,QACR,MAAM,cAAoD;AACzD,gBAAM,aAAa,KAAK,iBAAiB,YAAY;AACrD,gBAAM,QAAQ,KAAK,iBAAiB,OAAO;AAG3C,gBAAM,WAAW;AAEjB,gBAAM,eAAe,MAAM,oDAA4B;AAAA,YACtD;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,YACA,CAAC;AAAA,UACF;AAEA,gBAAM,aAAa,KAAK,kBAAkB,SAAS;AAEnD,gBAAM,MAAgB,CAAC;AAEvB,cAAI,eAAe,YAAY,UAAU,kBAAkB;AAC1D,kBAAM,YAAY,KAAK,iBAAiB,WAAW;AACnD,gBAAI,KAAK,MAAM,KAAK,SAAS;AAAA,UAC9B,WAAW,eAAe,aAAa;AACtC,kBAAM,eAAe,KAAK,iBAAiB,cAAc;AACzD,gBAAI,KAAK,MAAM,KAAK,YAAY;AAAA,UACjC;AAEA,qBAAW,WAAW,cAAc;AACnC,kBAAM,iBAAiB,MAAM,+CAAuB;AAAA,cACnD;AAAA,cACA;AAAA,cACA,aAAa,QAAQ,EAAE;AAAA,YACxB;AACA,gBACC,eAAe,qBAAqB,kBACpC,kCAAS,eAAe,YAAwB,GAAG,KACnD,eAAe,eAAe,OAC7B;AAED,oBAAM,cAAc,KAAK,sBAAsB,MAAM;AACrD,0BAAY,YAAY,QAAQ;AAChC,qBAAO;AAAA,YACR;AAAA,UACD;AAEA,iBAAO;AAAA,QACR;AAAA,QAEA,MAAM,SAA+C;AACpD,gBAAM,aAAa,KAAK,kBAAkB,SAAS;AACnD,gBAAM,QAAQ,KAAK,iBAAiB,OAAO;AAC3C,gBAAM,aAAa,KAAK,iBAAiB,YAAY;AACrD,gBAAM,WAAW;AACjB,gBAAM,MAAgB,CAAC;AAEvB,cAAI,eAAe,YAAY,UAAU,kBAAkB;AAC1D,kBAAM,YAAY,KAAK,iBAAiB,WAAW;AACnD,gBAAI,KAAK,MAAM,KAAK,SAAS;AAAA,UAC9B,WAAW,eAAe,aAAa;AACtC,kBAAM,eAAe,KAAK,iBAAiB,cAAc;AACzD,gBAAI,KAAK,MAAM,KAAK,YAAY;AAAA,UACjC;AAEA,gBAAM,OAAoB;AAAA,YACzB,MAAM,kBAAkB,KAAK;AAAA,YAC7B,aAAa;AAAA,YACb,YAAY;AAAA,YACZ,kBAAkB;AAAA,YAClB,YAAY;AAAA,UACb;AAEA,cAAI,eAAe,YAAY,UAAU,kBAAkB;AAC1D,mBAAO,KAAK;AACZ,mBAAO,KAAK;AAAA,UACb;AAEA,cAAI,eAA4B,CAAC;AAEjC,yBAAe,MAAM,+CAAuB,KAAK,MAAM,QAAQ,UAAU,IAAI;AAE7E,cAAI,aAAa,OAAO,QAAW;AAElC,mBAAO;AAAA,UACR;AAEA,gBAAM,cAAc,KAAK,sBAAsB,MAAM;AACrD,sBAAY,YAAY,aAAa;AAErC,iBAAO;AAAA,QACR;AAAA,QACA,MAAM,SAA+C;AACpD,gBAAM,cAAc,KAAK,sBAAsB,MAAM;AACrD,cAAI,YAAY,cAAc,QAAW;AACxC,kBAAM,WAAW,aAAa,YAAY,SAAS;AAEnD,gBAAI;AACH,oBAAM,+CAAuB,KAAK,MAAM,UAAU,QAAQ;AAAA,YAC3D,SAAS,OAAO;AACf,qBAAO;AAAA,YACR;AAIA,mBAAO,YAAY;AAAA,UACpB;AAEA,iBAAO;AAAA,QACR;AAAA,MACD;AAAA,IACD;AAAA;AAAA,EAEA,MAAM,UAAgE;AACrE,UAAM,QAAQ,KAAK,iBAAiB,OAAO;AAC3C,UAAM,aAAa,KAAK,iBAAiB,YAAY;AACrD,UAAM,uBAAuB,KAAK,iBAAiB,gBAAgB;AACnE,QAAI;AACJ,UAAM,aAAa,KAAK,cAAc;AACtC,UAAM,MAAM,KAAK,iBAAiB;AAClC,UAAM,cAAc,KAAK,eAAe;AAExC,QAAI,yBAAyB,eAAe;AAC3C,oBAAc,MAAM,KAAK,eAAe,iBAAiB;AAAA,IAC1D,OAAO;AACN,oBAAc,MAAM,KAAK,eAAe,uBAAuB;AAAA,IAChE;AAEA,QAAI,gBAAgB,SAAS;AAE5B,aAAO,CAAC;AAAA,IACT;AAEA,QAAI,WAAW,cAAc,MAAM,QAAW;AAC7C,aAAO,CAAC;AAAA,IACT;AAEA,WAAO,MAAM,IAAI,QAAQ,CAAC,SAAS,YAAY;AAC9C,YAAM,OAAiB,CAAC;AAExB,UAAI,GAAG,QAAQ,CAAC,UAAU;AACzB,aAAK,KAAK,KAAe;AAAA,MAC1B,CAAC;AAED,UAAI,GAAG,OAAO,YAAY;AACzB,cAAM,wBAAoB;AAAA,UACzB;AAAA,UACA,GAAG,YAAY,QAAQ,IAAI,YAAY,YAAY;AAAA,QACpD,EACE,OAAO,KAAK,KAAK,EAAE,CAAC,EACpB,OAAO,QAAQ;AACjB,YAAI,WAAW,cAAc,MAAM,mBAAmB;AAErD,iBAAO,CAAC;AAAA,QACT;AAEA,YAAI,mBAAe,+BAAe,KAAK,KAAK,EAAE,CAAC;AAC/C,YAAI,WAAW;AAEf,YAAI,aAAmC;AAAA,UACtC;AAAA,YACC,MAAM;AAAA,UACP;AAAA,QACD;AAEA,YAAI,UAAU,sBAAsB;AACnC,gBAAM,cAAc,KAAK,iBAAiB,aAAa;AACvD,cAAI,aAAa;AAChB,gBAAI,eAAe,UAAU;AAC5B,yBAAW,YAAY,aAAa,UAAU,SAAS,cAAc,aAAa,SAAS;AAAA,YAC5F,OAAO;AACN,yBAAW,eAAe,aAAa,UAAU,YAAY,cAAc,aAAa,SAAS;AAAA,YAClG;AACA,2BAAe,MAAM,+CAAuB,KAAK,MAAM,OAAO,QAAQ;AACtE,kBAAM,WAAW,aAAa;AAE9B,kBAAM,YAAyB,CAAC;AAChC,kBAAM,UAAU,oBAAI,IAAuB;AAE3C,kBAAM,EAAE,MAAM,IAAI,MAAM,+CAAuB;AAAA,cAC9C;AAAA,cACA;AAAA,cACA,YAAY,QAAQ;AAAA,YACrB;AAEA,uBAAW,QAAQ,OAAO;AACzB,wBAAU,KAAK,MAAM,WAAW,KAAK,SAAwB;AAAA,YAC9D;AAEA,uBAAW,QAAQ,aAAa,OAAwB;AACvD,yBAAW,YAAY,KAAK,WAA4B;AACvD,wBAAQ,IAAI,SAAS,IAAc,SAAS,OAAoB;AAAA,cACjE;AAAA,YACD;AAEA,kBAAM,oBAAoB,oBAAI,IAAsD;AAEpF,uBAAW,YAAY,WAAW;AAQjC,kBAAI,CAAC,QAAQ,IAAI,SAAS,EAAE,GAAG;AAC9B;AAAA,cACD;AAEA,oBAAM,UAAU,SAAS,SAAU,CAAC,EAAE;AAEtC,kBAAI,SAAS,WAAW,gBAAgB,SAAS,WAAW,YAAY;AACvE,oBAAI,SAAS,YAAY,SAAS;AACjC,oCAAkB,IAAI,SAAS,QAAQ,IAAI,SAAS,EAAE,EAAG,CAAC,EAAE,IAAc;AAAA,gBAC3E,OAAO;AACN,wBAAM,UAAuB,CAAC;AAC9B,wBAAM,OAAQ,SAAS,QAAQ,KAAgB,IAAI,CAAC,MAAM,EAAE,IAAI;AAChE,wBAAM,SAAS,QAAQ,IAAI,SAAS,EAAE,GAAG,IAAI,CAAC,MAAM,EAAE,IAAI;AAC1D,2BAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,KAAK;AAErC,wBAAI,QAAQ,KAAK,CAAC,CAAC,MAAM,QAAW;AACnC,8BAAQ,GAAG,KAAK,CAAC,CAAC,IAAI,CAAC,GAAG,IAAI,OAAO,CAAC,KAAK;AAAA,oBAC5C,OAAO;AACN,8BAAQ,KAAK,CAAC,CAAC,IAAI,OAAO,CAAC,KAAK;AAAA,oBACjC;AAAA,kBACD;AACA,oCAAkB,IAAI,SAAS,OAAO;AAAA,gBACvC;AAAA,cACD;AAEA,kBAAI,SAAS,WAAW,iBAAiB;AACxC,sBAAM,QAAQ,SAAS,QAAQ;AAC/B,oBACC,OAAO,WACP,MAAM,oBACN,QAAQ,IAAI,SAAS,EAAE,EAAG,CAAC,EAAE,UAC5B;AACD,oCAAkB,IAAI,SAAS,QAAQ,IAAI,SAAS,EAAE,EAAG,CAAC,EAAE,IAAc;AAAA,gBAC3E,WAAW,OAAO,WAAW,CAAC,MAAM,kBAAkB;AACrD,wBAAM,WAAW,QAAQ,IAAI,SAAS,EAAE,EAAG,CAAC,EAAE;AAE9C,wBAAM,SAAU,SAAS,QAAQ,QAAsB;AAAA,oBACtD,CAAC,MAAM,EAAE,OAAO;AAAA,kBACjB,EAAE,CAAC;AAEH,wBAAM,UAAU,QAAQ,IAAI,SAAS,EAAE,GAAG,KAAK,CAAC,MAAM,EAAE,aAAa,MAAM,EAAE,GAC1E;AACH,oCAAkB,IAAI,SAAS,EAAE,OAAO,OAAO,MAAM,QAAQ,CAAC;AAAA,gBAC/D,OAAO;AACN,wBAAM,WAAW,QAAQ,IAAI,SAAS,EAAE,EAAG,CAAC,EAAE;AAC9C,wBAAM,SAAU,SAAS,QAAQ,QAAsB;AAAA,oBACtD,CAAC,MAAM,EAAE,OAAO;AAAA,kBACjB,EAAE,CAAC;AACH,oCAAkB,IAAI,SAAS,OAAO,IAAI;AAAA,gBAC3C;AAAA,cACD;AAEA,kBAAI,SAAS,WAAW,mBAAmB;AAC1C,sBAAM,QAAQ,SAAS,QAAQ;AAC/B,sBAAM,YAAY,QAAQ,IAAI,SAAS,EAAE,GAAG,IAAI,CAAC,MAAM,EAAE,SAAS;AAClE,sBAAM,QAAS,SAAS,QAAQ,QAC9B,OAAO,CAAC,MAAM,WAAW,SAAS,EAAE,EAAE,CAAC,EACvC,IAAI,CAAC,MAAM,EAAE,IAAI;AAEnB,oBAAI,OAAO,oBAAoB,MAAM,SAAS;AAC7C,wBAAM,OAAO,QAAQ,IAAI,SAAS,EAAE,GAAG,KAAK,CAAC,MAAM,EAAE,aAAa,MAAM,EAAE,GACvE;AACH,wBAAM,KAAK,IAAI;AAAA,gBAChB;AACA,kCAAkB,IAAI,SAAS,KAAK;AAAA,cACrC;AAEA,kBAAI,SAAS,WAAW,UAAU;AAEjC,sBAAM,OAAO,SAAS,QAAQ;AAE9B,oBAAI,KAAK,SAAS,GAAG;AACpB,wBAAM,UAAuB,CAAC;AAC9B,wBAAM,YAAY,QAAQ,IAAI,SAAS,EAAE,GAAG,IAAI,CAAC,MAAM,EAAE,SAAS;AAClE,wBAAM,SAAS,QAAQ,IAAI,SAAS,EAAE,GAAG,IAAI,CAAC,MAAM,EAAE,MAAM;AAE5D,wBAAM,aAAc,SAAS,QAAQ,KACnC,OAAO,CAAC,MAAM,OAAO,SAAS,EAAE,EAAE,CAAC,EACnC,IAAI,CAAC,MAAM,EAAE,IAAI;AAEnB,wBAAM,gBAAiB,SAAS,QAAQ,QACtC,OAAO,CAAC,MAAM,UAAU,SAAS,EAAE,EAAE,CAAC,EACtC,IAAI,CAAC,MAAM,EAAE,IAAI;AAEnB,2BAAS,IAAI,GAAG,IAAI,WAAW,QAAQ,KAAK;AAC3C,4BAAQ,WAAW,CAAC,CAAC,IAAI,cAAc,CAAC,KAAK;AAAA,kBAC9C;AAGA,6BAAW,OAAO,SAAS,QAAQ,MAAuB;AACzD,wBAAI,CAAC,OAAO,SAAS,IAAI,EAAY,GAAG;AACvC,8BAAQ,IAAI,IAAc,IAAI;AAAA,oBAC/B;AAAA,kBACD;AAEA,wBAAM,QAAQ,SAAS,QAAQ;AAC/B,sBAAI,OAAO,SAAS;AACnB,4BAAQ,UAAU,QAAQ,IAAI,SAAS,EAAE,GAAG,OAAO,CAAC,MAAM,EAAE,QAAQ,EAAE,CAAC,EAAE;AAAA,kBAC1E;AAEA,oCAAkB,IAAI,SAAS,OAAO;AAAA,gBACvC,OAAO;AACN,wBAAM,YAAY,QAAQ,IAAI,SAAS,EAAE,GAAG,IAAI,CAAC,MAAM,EAAE,SAAS;AAClE,wBAAM,QAAS,SAAS,QAAQ,QAC9B,OAAO,CAAC,MAAM,UAAW,SAAS,EAAE,EAAE,CAAC,EACvC,IAAI,CAAC,MAAO,EAAE,SAAS,KAAK,EAAE,SAAS,EAAE,IAAK,EAAE,CAAC;AACnD,oCAAkB,IAAI,SAAS,KAAK;AAGpC,wBAAM,QAAQ,SAAS,QAAQ;AAC/B,sBAAI,OAAO,SAAS;AACnB,0BAAM,WAAwB,CAAC;AAE/B,0BAAM,OAAO,QAAQ,IAAI,SAAS,EAAE,GAAG,OAAO,CAAC,MAAM,EAAE,QAAQ,EAAE,CAAC,EAAE;AACpE,6BAAS,QAAQ;AACjB,6BAAS,UAAU;AACnB,sCAAkB,IAAI,SAAS,QAAQ;AAAA,kBACxC;AAAA,gBACD;AAAA,cACD;AAEA,kBAAI,SAAS,WAAW,eAAe;AACtC,sBAAM,OAAoB,CAAC;AAC3B,2BAAW,OAAO,QAAQ,IAAI,SAAS,EAAE,GAAgB;AACxD,uBAAK,IAAI,MAAgB,IAAI,IAAI;AAAA,gBAClC;AACA,sBAAM,cAA2B,CAAC;AAClC,2BAAW,UAAU,SAAS,QAAQ,MAAuB;AAC5D,8BAAY,OAAO,IAAc,IAAI,KAAK,OAAO,EAAY,KAAK;AAAA,gBACnE;AACA,kCAAkB,IAAI,SAAS,WAAW;AAAA,cAC3C;AAEA,kBAAI,SAAS,WAAW,gBAAgB;AACvC,oBAAI,SAAS,YAAY,SAAS;AACjC,wBAAM,EAAE,IAAI,IAAI,SAAS,SAAU,CAAC,EAAE;AACtC,oCAAkB,IAAI,SAAS,GAAa;AAAA,gBAC7C;AAAA,cACD;AAAA,YACD;AACA,mBAAO,aAAa;AACpB,yBAAa,YAAY,CAAC;AAG1B,kBAAM,aAAS,8BAAS,CAAC,GAAG,iBAAiB,CAAC;AAC9C,uBAAW,CAAC,KAAK,KAAK,KAAK,QAAQ;AAClC,2BAAa,UAAU,GAAG,IAAI;AAAA,YAC/B;AAEA,kBAAM,cAAc,KAAK,iBAAiB,aAAa;AACvD,gBAAI,aAAa;AAChB,6BAAe,aAAa;AAAA,YAC7B;AAEA,yBAAa;AAAA,cACZ;AAAA,gBACC,MAAM;AAAA,cACP;AAAA,YACD;AAAA,UACD;AAAA,QACD;AAEA,eAAO,QAAQ;AAAA,UACd,cAAc,CAAC,UAAU;AAAA,QAC1B,CAAC;AAAA,MACF,CAAC;AAED,UAAI,GAAG,SAAS,CAAC,UAAU;AAC1B,cAAM,IAAI,uCAAmB,KAAK,QAAQ,GAAG,KAAK;AAAA,MACnD,CAAC;AAAA,IACF,CAAC;AAAA,EACF;AACD;","names":[]}