{"version":3,"sources":["../../../../nodes/HttpRequest/V1/HttpRequestV1.node.ts"],"sourcesContent":["import type {\n\tIExecuteFunctions,\n\tIDataObject,\n\tINodeExecutionData,\n\tINodeType,\n\tINodeTypeBaseDescription,\n\tINodeTypeDescription,\n\tJsonObject,\n\tIHttpRequestMethods,\n\tIRequestOptions,\n} from 'n8n-workflow';\nimport {\n\tNodeApiError,\n\tNodeOperationError,\n\tsleep,\n\tremoveCircularRefs,\n\tNodeConnectionTypes,\n} from 'n8n-workflow';\nimport type { Readable } from 'stream';\n\nimport type { IAuthDataSanitizeKeys } from '../GenericFunctions';\nimport { replaceNullValues, sanitizeUiMessage } from '../GenericFunctions';\ninterface OptionData {\n\tname: string;\n\tdisplayName: string;\n}\n\ninterface OptionDataParameters {\n\t[key: string]: OptionData;\n}\n\ntype IRequestOptionsKeys = keyof IRequestOptions;\n\nexport class HttpRequestV1 implements INodeType {\n\tdescription: INodeTypeDescription;\n\n\tconstructor(baseDescription: INodeTypeBaseDescription) {\n\t\tthis.description = {\n\t\t\t...baseDescription,\n\t\t\tversion: 1,\n\t\t\tdefaults: {\n\t\t\t\tname: 'HTTP Request',\n\t\t\t\tcolor: '#2200DD',\n\t\t\t},\n\t\t\tinputs: [NodeConnectionTypes.Main],\n\t\t\toutputs: [NodeConnectionTypes.Main],\n\t\t\tcredentials: [\n\t\t\t\t// ----------------------------------\n\t\t\t\t//            v1 creds\n\t\t\t\t// ----------------------------------\n\t\t\t\t{\n\t\t\t\t\tname: 'httpBasicAuth',\n\t\t\t\t\trequired: true,\n\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\tauthentication: ['basicAuth'],\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'httpDigestAuth',\n\t\t\t\t\trequired: true,\n\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\tauthentication: ['digestAuth'],\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'httpHeaderAuth',\n\t\t\t\t\trequired: true,\n\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\tauthentication: ['headerAuth'],\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'httpQueryAuth',\n\t\t\t\t\trequired: true,\n\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\tauthentication: ['queryAuth'],\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'oAuth1Api',\n\t\t\t\t\trequired: true,\n\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\tauthentication: ['oAuth1'],\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'oAuth2Api',\n\t\t\t\t\trequired: true,\n\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\tauthentication: ['oAuth2'],\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t],\n\t\t\tproperties: [\n\t\t\t\t// ----------------------------------\n\t\t\t\t//           v1 params\n\t\t\t\t// ----------------------------------\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'Authentication',\n\t\t\t\t\tname: 'authentication',\n\t\t\t\t\ttype: 'options',\n\t\t\t\t\toptions: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'Basic Auth',\n\t\t\t\t\t\t\tvalue: 'basicAuth',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'Digest Auth',\n\t\t\t\t\t\t\tvalue: 'digestAuth',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'Header Auth',\n\t\t\t\t\t\t\tvalue: 'headerAuth',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'None',\n\t\t\t\t\t\t\tvalue: 'none',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'OAuth1',\n\t\t\t\t\t\t\tvalue: 'oAuth1',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'OAuth2',\n\t\t\t\t\t\t\tvalue: 'oAuth2',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'Query Auth',\n\t\t\t\t\t\t\tvalue: 'queryAuth',\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t\tdefault: 'none',\n\t\t\t\t\tdescription: 'The way to authenticate',\n\t\t\t\t},\n\n\t\t\t\t// ----------------------------------\n\t\t\t\t//        versionless params\n\t\t\t\t// ----------------------------------\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'Request Method',\n\t\t\t\t\tname: 'requestMethod',\n\t\t\t\t\ttype: 'options',\n\t\t\t\t\toptions: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'DELETE',\n\t\t\t\t\t\t\tvalue: 'DELETE',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'GET',\n\t\t\t\t\t\t\tvalue: 'GET',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'HEAD',\n\t\t\t\t\t\t\tvalue: 'HEAD',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'OPTIONS',\n\t\t\t\t\t\t\tvalue: 'OPTIONS',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'PATCH',\n\t\t\t\t\t\t\tvalue: 'PATCH',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'POST',\n\t\t\t\t\t\t\tvalue: 'POST',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'PUT',\n\t\t\t\t\t\t\tvalue: 'PUT',\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t\tdefault: 'GET',\n\t\t\t\t\tdescription: 'The request method to use',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'URL',\n\t\t\t\t\tname: 'url',\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tdefault: '',\n\t\t\t\t\tplaceholder: 'http://example.com/index.html',\n\t\t\t\t\tdescription: 'The URL to make the request to',\n\t\t\t\t\trequired: true,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'Ignore SSL Issues (Insecure)',\n\t\t\t\t\tname: 'allowUnauthorizedCerts',\n\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\tdefault: false,\n\t\t\t\t\t// eslint-disable-next-line n8n-nodes-base/node-param-description-wrong-for-ignore-ssl-issues\n\t\t\t\t\tdescription:\n\t\t\t\t\t\t'Whether to download the response even if SSL certificate validation is not possible',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'Response Format',\n\t\t\t\t\tname: 'responseFormat',\n\t\t\t\t\ttype: 'options',\n\t\t\t\t\toptions: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'File',\n\t\t\t\t\t\t\tvalue: 'file',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'JSON',\n\t\t\t\t\t\t\tvalue: 'json',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'String',\n\t\t\t\t\t\t\tvalue: 'string',\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t\tdefault: 'json',\n\t\t\t\t\tdescription: 'The format in which the data gets returned from the URL',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'Property Name',\n\t\t\t\t\tname: 'dataPropertyName',\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tdefault: 'data',\n\t\t\t\t\trequired: true,\n\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\tresponseFormat: ['string'],\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tdescription: 'Name of the property to which to write the response data',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'Put Output File in Field',\n\t\t\t\t\tname: 'dataPropertyName',\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tdefault: 'data',\n\t\t\t\t\trequired: true,\n\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\tresponseFormat: ['file'],\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\thint: 'The name of the output binary field to put the file in',\n\t\t\t\t},\n\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'JSON/RAW Parameters',\n\t\t\t\t\tname: 'jsonParameters',\n\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\tdefault: false,\n\t\t\t\t\tdescription:\n\t\t\t\t\t\t'Whether the query and/or body parameter should be set via the value-key pair UI or JSON/RAW',\n\t\t\t\t},\n\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'Options',\n\t\t\t\t\tname: 'options',\n\t\t\t\t\ttype: 'collection',\n\t\t\t\t\tplaceholder: 'Add option',\n\t\t\t\t\tdefault: {},\n\t\t\t\t\toptions: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tdisplayName: 'Batch Interval',\n\t\t\t\t\t\t\tname: 'batchInterval',\n\t\t\t\t\t\t\ttype: 'number',\n\t\t\t\t\t\t\ttypeOptions: {\n\t\t\t\t\t\t\t\tminValue: 0,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tdefault: 1000,\n\t\t\t\t\t\t\tdescription: 'Time (in milliseconds) between each batch of requests. 0 for disabled.',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tdisplayName: 'Batch Size',\n\t\t\t\t\t\t\tname: 'batchSize',\n\t\t\t\t\t\t\ttype: 'number',\n\t\t\t\t\t\t\ttypeOptions: {\n\t\t\t\t\t\t\t\tminValue: -1,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tdefault: 50,\n\t\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t\t'Input will be split in batches to throttle requests. -1 for disabled. 0 will be treated as 1.',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tdisplayName: 'Body Content Type',\n\t\t\t\t\t\t\tname: 'bodyContentType',\n\t\t\t\t\t\t\ttype: 'options',\n\t\t\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\t\t\t'/requestMethod': ['PATCH', 'POST', 'PUT'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\toptions: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: 'JSON',\n\t\t\t\t\t\t\t\t\tvalue: 'json',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: 'RAW/Custom',\n\t\t\t\t\t\t\t\t\tvalue: 'raw',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: 'Form-Data Multipart',\n\t\t\t\t\t\t\t\t\tvalue: 'multipart-form-data',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: 'Form Urlencoded',\n\t\t\t\t\t\t\t\t\tvalue: 'form-urlencoded',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\tdefault: 'json',\n\t\t\t\t\t\t\tdescription: 'Content-Type to use to send body parameters',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tdisplayName: 'Full Response',\n\t\t\t\t\t\t\tname: 'fullResponse',\n\t\t\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\t\t\tdefault: false,\n\t\t\t\t\t\t\tdescription: 'Whether to return the full response data instead of only the body',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tdisplayName: 'Follow All Redirects',\n\t\t\t\t\t\t\tname: 'followAllRedirects',\n\t\t\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\t\t\tdefault: false,\n\t\t\t\t\t\t\tdescription: 'Whether to follow All HTTP 3xx redirects',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tdisplayName: 'Follow GET/HEAD Redirect',\n\t\t\t\t\t\t\tname: 'followRedirect',\n\t\t\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\t\t\tdefault: true,\n\t\t\t\t\t\t\tdescription: 'Whether to follow GET or HEAD HTTP 3xx redirects',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tdisplayName: 'Ignore Response Code',\n\t\t\t\t\t\t\tname: 'ignoreResponseCode',\n\t\t\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\t\t\tdefault: false,\n\t\t\t\t\t\t\tdescription: 'Whether to succeeds also when status code is not 2xx',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tdisplayName: 'MIME Type',\n\t\t\t\t\t\t\tname: 'bodyContentCustomMimeType',\n\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\t\tplaceholder: 'text/xml',\n\t\t\t\t\t\t\tdescription: 'Specify the mime type for raw/custom body type',\n\t\t\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\t\t\t'/requestMethod': ['PATCH', 'POST', 'PUT'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tdisplayName: 'Proxy',\n\t\t\t\t\t\t\tname: 'proxy',\n\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\t\tplaceholder: 'http://myproxy:3128',\n\t\t\t\t\t\t\tdescription: 'HTTP proxy to use',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tdisplayName: 'Split Into Items',\n\t\t\t\t\t\t\tname: 'splitIntoItems',\n\t\t\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\t\t\tdefault: false,\n\t\t\t\t\t\t\tdescription: 'Whether to output each element of an array as own item',\n\t\t\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\t\t\t'/responseFormat': ['json'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tdisplayName: 'Timeout',\n\t\t\t\t\t\t\tname: 'timeout',\n\t\t\t\t\t\t\ttype: 'number',\n\t\t\t\t\t\t\ttypeOptions: {\n\t\t\t\t\t\t\t\tminValue: 1,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tdefault: 10000,\n\t\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t\t'Time in ms to wait for the server to send response headers (and start the response body) before aborting the request',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tdisplayName: 'Use Querystring',\n\t\t\t\t\t\t\tname: 'useQueryString',\n\t\t\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\t\t\tdefault: false,\n\t\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t\t'Whether you need arrays to be serialized as foo=bar&foo=baz instead of the default foo[0]=bar&foo[1]=baz',\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\n\t\t\t\t// Body Parameter\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'Send Binary File',\n\t\t\t\t\tname: 'sendBinaryData',\n\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\t// TODO: Make it possible to use dot-notation\n\t\t\t\t\t\t\t// 'options.bodyContentType': [\n\t\t\t\t\t\t\t// \t'raw',\n\t\t\t\t\t\t\t// ],\n\t\t\t\t\t\t\tjsonParameters: [true],\n\t\t\t\t\t\t\trequestMethod: ['PATCH', 'POST', 'PUT'],\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tdefault: false,\n\t\t\t\t\tdescription: 'Whether binary data should be send as body',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'Input Binary Field',\n\t\t\t\t\tname: 'binaryPropertyName',\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\trequired: true,\n\t\t\t\t\tdefault: 'data',\n\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\thide: {\n\t\t\t\t\t\t\tsendBinaryData: [false],\n\t\t\t\t\t\t},\n\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\tjsonParameters: [true],\n\t\t\t\t\t\t\trequestMethod: ['PATCH', 'POST', 'PUT'],\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\thint: 'The name of the input binary field containing the file to be uploaded',\n\t\t\t\t\tdescription:\n\t\t\t\t\t\t'For Form-Data Multipart, they can be provided in the format: <code>\"sendKey1:binaryProperty1,sendKey2:binaryProperty2</code>',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'Body Parameters',\n\t\t\t\t\tname: 'bodyParametersJson',\n\t\t\t\t\ttype: 'json',\n\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\thide: {\n\t\t\t\t\t\t\tsendBinaryData: [true],\n\t\t\t\t\t\t},\n\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\tjsonParameters: [true],\n\t\t\t\t\t\t\trequestMethod: ['PATCH', 'POST', 'PUT', 'DELETE'],\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tdefault: '',\n\t\t\t\t\tdescription: 'Body parameters as JSON or RAW',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'Body Parameters',\n\t\t\t\t\tname: 'bodyParametersUi',\n\t\t\t\t\tplaceholder: 'Add Parameter',\n\t\t\t\t\ttype: 'fixedCollection',\n\t\t\t\t\ttypeOptions: {\n\t\t\t\t\t\tmultipleValues: true,\n\t\t\t\t\t},\n\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\tjsonParameters: [false],\n\t\t\t\t\t\t\trequestMethod: ['PATCH', 'POST', 'PUT', 'DELETE'],\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tdescription: 'The body parameter to send',\n\t\t\t\t\tdefault: {},\n\t\t\t\t\toptions: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'parameter',\n\t\t\t\t\t\t\tdisplayName: 'Parameter',\n\t\t\t\t\t\t\tvalues: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tdisplayName: 'Name',\n\t\t\t\t\t\t\t\t\tname: 'name',\n\t\t\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\t\t\t\tdescription: 'Name of the parameter',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tdisplayName: 'Value',\n\t\t\t\t\t\t\t\t\tname: 'value',\n\t\t\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\t\t\t\tdescription: 'Value of the parameter',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\n\t\t\t\t// Header Parameters\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'Headers',\n\t\t\t\t\tname: 'headerParametersJson',\n\t\t\t\t\ttype: 'json',\n\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\tjsonParameters: [true],\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tdefault: '',\n\t\t\t\t\tdescription: 'Header parameters as JSON or RAW',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'Headers',\n\t\t\t\t\tname: 'headerParametersUi',\n\t\t\t\t\tplaceholder: 'Add Header',\n\t\t\t\t\ttype: 'fixedCollection',\n\t\t\t\t\ttypeOptions: {\n\t\t\t\t\t\tmultipleValues: true,\n\t\t\t\t\t},\n\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\tjsonParameters: [false],\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tdescription: 'The headers to send',\n\t\t\t\t\tdefault: {},\n\t\t\t\t\toptions: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'parameter',\n\t\t\t\t\t\t\tdisplayName: 'Header',\n\t\t\t\t\t\t\tvalues: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tdisplayName: 'Name',\n\t\t\t\t\t\t\t\t\tname: 'name',\n\t\t\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\t\t\t\tdescription: 'Name of the header',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tdisplayName: 'Value',\n\t\t\t\t\t\t\t\t\tname: 'value',\n\t\t\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\t\t\t\tdescription: 'Value to set for the header',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\n\t\t\t\t// Query Parameter\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'Query Parameters',\n\t\t\t\t\tname: 'queryParametersJson',\n\t\t\t\t\ttype: 'json',\n\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\tjsonParameters: [true],\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tdefault: '',\n\t\t\t\t\tdescription: 'Query parameters as JSON (flat object)',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'Query Parameters',\n\t\t\t\t\tname: 'queryParametersUi',\n\t\t\t\t\tplaceholder: 'Add Parameter',\n\t\t\t\t\ttype: 'fixedCollection',\n\t\t\t\t\ttypeOptions: {\n\t\t\t\t\t\tmultipleValues: true,\n\t\t\t\t\t},\n\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\tjsonParameters: [false],\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tdescription: 'The query parameter to send',\n\t\t\t\t\tdefault: {},\n\t\t\t\t\toptions: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'parameter',\n\t\t\t\t\t\t\tdisplayName: 'Parameter',\n\t\t\t\t\t\t\tvalues: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tdisplayName: 'Name',\n\t\t\t\t\t\t\t\t\tname: 'name',\n\t\t\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\t\t\t\tdescription: 'Name of the parameter',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tdisplayName: 'Value',\n\t\t\t\t\t\t\t\t\tname: 'value',\n\t\t\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\t\t\t\tdescription: 'Value of the parameter',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tdisplayName:\n\t\t\t\t\t\t\"You can view the raw requests this node makes in your browser's developer console\",\n\t\t\t\t\tname: 'infoMessage',\n\t\t\t\t\ttype: 'notice',\n\t\t\t\t\tdefault: '',\n\t\t\t\t},\n\t\t\t],\n\t\t};\n\t}\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t\tconst items = this.getInputData();\n\n\t\tconst fullResponseProperties = ['body', 'headers', 'statusCode', 'statusMessage'];\n\n\t\tconst responseFormat = this.getNodeParameter('responseFormat', 0) as string;\n\n\t\tlet httpBasicAuth;\n\t\tlet httpDigestAuth;\n\t\tlet httpHeaderAuth;\n\t\tlet httpQueryAuth;\n\t\tlet oAuth1Api;\n\t\tlet oAuth2Api;\n\n\t\ttry {\n\t\t\thttpBasicAuth = await this.getCredentials('httpBasicAuth');\n\t\t} catch {}\n\t\ttry {\n\t\t\thttpDigestAuth = await this.getCredentials('httpDigestAuth');\n\t\t} catch {}\n\t\ttry {\n\t\t\thttpHeaderAuth = await this.getCredentials('httpHeaderAuth');\n\t\t} catch {}\n\t\ttry {\n\t\t\thttpQueryAuth = await this.getCredentials('httpQueryAuth');\n\t\t} catch {}\n\t\ttry {\n\t\t\toAuth1Api = await this.getCredentials('oAuth1Api');\n\t\t} catch {}\n\t\ttry {\n\t\t\toAuth2Api = await this.getCredentials('oAuth2Api');\n\t\t} catch {}\n\n\t\tlet requestOptions: IRequestOptions;\n\t\tlet setUiParameter: IDataObject;\n\n\t\tconst uiParameters: IDataObject = {\n\t\t\tbodyParametersUi: 'body',\n\t\t\theaderParametersUi: 'headers',\n\t\t\tqueryParametersUi: 'qs',\n\t\t};\n\n\t\tconst jsonParameters: OptionDataParameters = {\n\t\t\tbodyParametersJson: {\n\t\t\t\tname: 'body',\n\t\t\t\tdisplayName: 'Body Parameters',\n\t\t\t},\n\t\t\theaderParametersJson: {\n\t\t\t\tname: 'headers',\n\t\t\t\tdisplayName: 'Headers',\n\t\t\t},\n\t\t\tqueryParametersJson: {\n\t\t\t\tname: 'qs',\n\t\t\t\tdisplayName: 'Query Parameters',\n\t\t\t},\n\t\t};\n\t\tlet returnItems: INodeExecutionData[] = [];\n\t\tconst requestPromises = [];\n\t\tfor (let itemIndex = 0; itemIndex < items.length; itemIndex++) {\n\t\t\tconst requestMethod = this.getNodeParameter(\n\t\t\t\t'requestMethod',\n\t\t\t\titemIndex,\n\t\t\t) as IHttpRequestMethods;\n\t\t\tconst parametersAreJson = this.getNodeParameter('jsonParameters', itemIndex);\n\n\t\t\tconst options = this.getNodeParameter('options', itemIndex, {});\n\t\t\tconst url = this.getNodeParameter('url', itemIndex) as string;\n\n\t\t\tif (\n\t\t\t\titemIndex > 0 &&\n\t\t\t\t(options.batchSize as number) >= 0 &&\n\t\t\t\t(options.batchInterval as number) > 0\n\t\t\t) {\n\t\t\t\t// defaults batch size to 1 of it's set to 0\n\t\t\t\tconst batchSize: number =\n\t\t\t\t\t(options.batchSize as number) > 0 ? (options.batchSize as number) : 1;\n\t\t\t\tif (itemIndex % batchSize === 0) {\n\t\t\t\t\tawait sleep(options.batchInterval as number);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst fullResponse = !!options.fullResponse;\n\n\t\t\trequestOptions = {\n\t\t\t\theaders: {},\n\t\t\t\tmethod: requestMethod,\n\t\t\t\turi: url,\n\t\t\t\tgzip: true,\n\t\t\t\trejectUnauthorized: !this.getNodeParameter('allowUnauthorizedCerts', itemIndex, false),\n\t\t\t} satisfies IRequestOptions;\n\n\t\t\tif (fullResponse) {\n\t\t\t\trequestOptions.resolveWithFullResponse = true;\n\t\t\t}\n\n\t\t\tif (options.followRedirect !== undefined) {\n\t\t\t\trequestOptions.followRedirect = options.followRedirect as boolean;\n\t\t\t}\n\n\t\t\tif (options.followAllRedirects !== undefined) {\n\t\t\t\trequestOptions.followAllRedirects = options.followAllRedirects as boolean;\n\t\t\t}\n\n\t\t\tif (options.ignoreResponseCode === true) {\n\t\t\t\trequestOptions.simple = false;\n\t\t\t}\n\t\t\tif (options.proxy !== undefined) {\n\t\t\t\trequestOptions.proxy = options.proxy as string;\n\t\t\t}\n\t\t\tif (options.timeout !== undefined) {\n\t\t\t\trequestOptions.timeout = options.timeout as number;\n\t\t\t} else {\n\t\t\t\trequestOptions.timeout = 3600000; // 1 hour\n\t\t\t}\n\n\t\t\tif (options.useQueryString === true) {\n\t\t\t\trequestOptions.useQuerystring = true;\n\t\t\t}\n\n\t\t\tif (parametersAreJson) {\n\t\t\t\t// Parameters are defined as JSON\n\t\t\t\tlet optionData: OptionData;\n\t\t\t\tfor (const parameterName of Object.keys(jsonParameters)) {\n\t\t\t\t\toptionData = jsonParameters[parameterName];\n\t\t\t\t\tconst tempValue = this.getNodeParameter(parameterName, itemIndex, '') as string | object;\n\t\t\t\t\tconst sendBinaryData = this.getNodeParameter(\n\t\t\t\t\t\t'sendBinaryData',\n\t\t\t\t\t\titemIndex,\n\t\t\t\t\t\tfalse,\n\t\t\t\t\t) as boolean;\n\n\t\t\t\t\tif (optionData.name === 'body' && parametersAreJson) {\n\t\t\t\t\t\tif (sendBinaryData) {\n\t\t\t\t\t\t\tconst contentTypesAllowed = ['raw', 'multipart-form-data'];\n\n\t\t\t\t\t\t\tif (!contentTypesAllowed.includes(options.bodyContentType as string)) {\n\t\t\t\t\t\t\t\t// As n8n-workflow.NodeHelpers.getParameterResolveOrder can not be changed\n\t\t\t\t\t\t\t\t// easily to handle parameters in dot.notation simply error for now.\n\t\t\t\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t\t\t\t'Sending binary data is only supported when option \"Body Content Type\" is set to \"RAW/CUSTOM\" or \"FORM-DATA/MULTIPART\"!',\n\t\t\t\t\t\t\t\t\t{ itemIndex },\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (options.bodyContentType === 'raw') {\n\t\t\t\t\t\t\t\tconst binaryPropertyName = this.getNodeParameter('binaryPropertyName', itemIndex);\n\t\t\t\t\t\t\t\tthis.helpers.assertBinaryData(itemIndex, binaryPropertyName);\n\t\t\t\t\t\t\t\tconst binaryDataBuffer = await this.helpers.getBinaryDataBuffer(\n\t\t\t\t\t\t\t\t\titemIndex,\n\t\t\t\t\t\t\t\t\tbinaryPropertyName,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\trequestOptions.body = binaryDataBuffer;\n\t\t\t\t\t\t\t} else if (options.bodyContentType === 'multipart-form-data') {\n\t\t\t\t\t\t\t\trequestOptions.body = {};\n\t\t\t\t\t\t\t\tconst binaryPropertyNameFull = this.getNodeParameter(\n\t\t\t\t\t\t\t\t\t'binaryPropertyName',\n\t\t\t\t\t\t\t\t\titemIndex,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tconst binaryPropertyNames = binaryPropertyNameFull\n\t\t\t\t\t\t\t\t\t.split(',')\n\t\t\t\t\t\t\t\t\t.map((key) => key.trim());\n\n\t\t\t\t\t\t\t\tfor (const propertyData of binaryPropertyNames) {\n\t\t\t\t\t\t\t\t\tlet propertyName = 'file';\n\t\t\t\t\t\t\t\t\tlet binaryPropertyName = propertyData;\n\t\t\t\t\t\t\t\t\tif (propertyData.includes(':')) {\n\t\t\t\t\t\t\t\t\t\tconst propertyDataParts = propertyData.split(':');\n\t\t\t\t\t\t\t\t\t\tpropertyName = propertyDataParts[0];\n\t\t\t\t\t\t\t\t\t\tbinaryPropertyName = propertyDataParts[1];\n\t\t\t\t\t\t\t\t\t} else if (binaryPropertyNames.length > 1) {\n\t\t\t\t\t\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t\t\t\t\t\t'If more than one property should be send it is needed to define the in the format:<code>\"sendKey1:binaryProperty1,sendKey2:binaryProperty2\"</code>',\n\t\t\t\t\t\t\t\t\t\t\t{ itemIndex },\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tconst binaryData = this.helpers.assertBinaryData(itemIndex, binaryPropertyName);\n\t\t\t\t\t\t\t\t\tconst binaryDataBuffer = await this.helpers.getBinaryDataBuffer(\n\t\t\t\t\t\t\t\t\t\titemIndex,\n\t\t\t\t\t\t\t\t\t\tbinaryPropertyName,\n\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\trequestOptions.body[propertyName] = {\n\t\t\t\t\t\t\t\t\t\tvalue: binaryDataBuffer,\n\t\t\t\t\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\t\t\t\t\tfilename: binaryData.fileName,\n\t\t\t\t\t\t\t\t\t\t\tcontentType: binaryData.mimeType,\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (tempValue === '') {\n\t\t\t\t\t\t// Parameter is empty so skip it\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\trequestOptions[optionData.name] = tempValue;\n\n\t\t\t\t\tif (\n\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\ttypeof requestOptions[optionData.name] !== 'object' &&\n\t\t\t\t\t\toptions.bodyContentType !== 'raw'\n\t\t\t\t\t) {\n\t\t\t\t\t\t// If it is not an object && bodyContentType is not 'raw' it must be JSON so parse it\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\t\trequestOptions[optionData.name] = JSON.parse(\n\t\t\t\t\t\t\t\trequestOptions[optionData.name as IRequestOptionsKeys] as string,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t\t\t`The data in \"${optionData.displayName}\" is no valid JSON. Set Body Content Type to \"RAW/Custom\" for XML or other types of payloads`,\n\t\t\t\t\t\t\t\t{ itemIndex },\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Parameters are defined in UI\n\t\t\t\tlet optionName: string;\n\t\t\t\tfor (const parameterName of Object.keys(uiParameters)) {\n\t\t\t\t\tsetUiParameter = this.getNodeParameter(parameterName, itemIndex, {}) as IDataObject;\n\t\t\t\t\toptionName = uiParameters[parameterName] as string;\n\t\t\t\t\tif (setUiParameter.parameter !== undefined) {\n\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\trequestOptions[optionName] = {};\n\t\t\t\t\t\tfor (const parameterData of setUiParameter!.parameter as IDataObject[]) {\n\t\t\t\t\t\t\tconst parameterDataName = parameterData.name as string;\n\t\t\t\t\t\t\tconst newValue = parameterData.value;\n\t\t\t\t\t\t\tif (optionName === 'qs') {\n\t\t\t\t\t\t\t\tconst computeNewValue = (oldValue: unknown) => {\n\t\t\t\t\t\t\t\t\tif (typeof oldValue === 'string') {\n\t\t\t\t\t\t\t\t\t\treturn [oldValue, newValue];\n\t\t\t\t\t\t\t\t\t} else if (Array.isArray(oldValue)) {\n\t\t\t\t\t\t\t\t\t\treturn [...oldValue, newValue];\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\treturn newValue;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\trequestOptions[optionName]![parameterDataName] = computeNewValue(\n\t\t\t\t\t\t\t\t\trequestOptions[optionName]![parameterDataName],\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t} else if (optionName === 'headers') {\n\t\t\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\t\t\trequestOptions[optionName][parameterDataName.toString().toLowerCase()] = newValue;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\t\t\trequestOptions[optionName][parameterDataName] = newValue;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Change the way data get send in case a different content-type than JSON got selected\n\t\t\tif (['PATCH', 'POST', 'PUT'].includes(requestMethod)) {\n\t\t\t\tif (options.bodyContentType === 'multipart-form-data') {\n\t\t\t\t\trequestOptions.formData = requestOptions.body;\n\t\t\t\t\tdelete requestOptions.body;\n\t\t\t\t} else if (options.bodyContentType === 'form-urlencoded') {\n\t\t\t\t\trequestOptions.form = requestOptions.body;\n\t\t\t\t\tdelete requestOptions.body;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (responseFormat === 'file') {\n\t\t\t\trequestOptions.encoding = null;\n\t\t\t\trequestOptions.useStream = true;\n\n\t\t\t\tif (options.bodyContentType !== 'raw') {\n\t\t\t\t\trequestOptions.body = JSON.stringify(requestOptions.body);\n\t\t\t\t\tif (requestOptions.headers === undefined) {\n\t\t\t\t\t\trequestOptions.headers = {};\n\t\t\t\t\t}\n\t\t\t\t\tif (['POST', 'PUT', 'PATCH'].includes(requestMethod)) {\n\t\t\t\t\t\trequestOptions.headers['Content-Type'] = 'application/json';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (options.bodyContentType === 'raw') {\n\t\t\t\trequestOptions.json = false;\n\t\t\t\trequestOptions.useStream = true;\n\t\t\t} else {\n\t\t\t\trequestOptions.json = true;\n\t\t\t}\n\n\t\t\t// Add Content Type if any are set\n\t\t\tif (options.bodyContentCustomMimeType) {\n\t\t\t\tif (requestOptions.headers === undefined) {\n\t\t\t\t\trequestOptions.headers = {};\n\t\t\t\t}\n\t\t\t\trequestOptions.headers['Content-Type'] = options.bodyContentCustomMimeType;\n\t\t\t}\n\n\t\t\tconst authDataKeys: IAuthDataSanitizeKeys = {};\n\n\t\t\t// Add credentials if any are set\n\t\t\tif (httpBasicAuth !== undefined) {\n\t\t\t\trequestOptions.auth = {\n\t\t\t\t\tuser: httpBasicAuth.user as string,\n\t\t\t\t\tpass: httpBasicAuth.password as string,\n\t\t\t\t};\n\t\t\t\tauthDataKeys.auth = ['pass'];\n\t\t\t}\n\t\t\tif (httpHeaderAuth !== undefined) {\n\t\t\t\trequestOptions.headers![httpHeaderAuth.name as string] = httpHeaderAuth.value;\n\t\t\t\tauthDataKeys.headers = [httpHeaderAuth.name as string];\n\t\t\t}\n\t\t\tif (httpQueryAuth !== undefined) {\n\t\t\t\tif (!requestOptions.qs) {\n\t\t\t\t\trequestOptions.qs = {};\n\t\t\t\t}\n\t\t\t\trequestOptions.qs[httpQueryAuth.name as string] = httpQueryAuth.value;\n\t\t\t\tauthDataKeys.qs = [httpQueryAuth.name as string];\n\t\t\t}\n\t\t\tif (httpDigestAuth !== undefined) {\n\t\t\t\trequestOptions.auth = {\n\t\t\t\t\tuser: httpDigestAuth.user as string,\n\t\t\t\t\tpass: httpDigestAuth.password as string,\n\t\t\t\t\tsendImmediately: false,\n\t\t\t\t};\n\t\t\t\tauthDataKeys.auth = ['pass'];\n\t\t\t}\n\n\t\t\tif (requestOptions.headers!.accept === undefined) {\n\t\t\t\tif (responseFormat === 'json') {\n\t\t\t\t\trequestOptions.headers!.accept = 'application/json,text/*;q=0.99';\n\t\t\t\t} else if (responseFormat === 'string') {\n\t\t\t\t\trequestOptions.headers!.accept =\n\t\t\t\t\t\t'application/json,text/html,application/xhtml+xml,application/xml,text/*;q=0.9, */*;q=0.1';\n\t\t\t\t} else {\n\t\t\t\t\trequestOptions.headers!.accept =\n\t\t\t\t\t\t'application/json,text/html,application/xhtml+xml,application/xml,text/*;q=0.9, image/*;q=0.8, */*;q=0.7';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tthis.sendMessageToUI(sanitizeUiMessage(requestOptions, authDataKeys));\n\t\t\t} catch (e) {}\n\n\t\t\tif (oAuth1Api) {\n\t\t\t\tconst requestOAuth1 = this.helpers.requestOAuth1.call(this, 'oAuth1Api', requestOptions);\n\t\t\t\trequestOAuth1.catch(() => {});\n\t\t\t\trequestPromises.push(requestOAuth1);\n\t\t\t} else if (oAuth2Api) {\n\t\t\t\tconst requestOAuth2 = this.helpers.requestOAuth2.call(this, 'oAuth2Api', requestOptions, {\n\t\t\t\t\ttokenType: 'Bearer',\n\t\t\t\t});\n\t\t\t\trequestOAuth2.catch(() => {});\n\t\t\t\trequestPromises.push(requestOAuth2);\n\t\t\t} else {\n\t\t\t\t// bearerAuth, queryAuth, headerAuth, digestAuth, none\n\t\t\t\tconst request = this.helpers.request(requestOptions);\n\t\t\t\trequest.catch(() => {});\n\t\t\t\trequestPromises.push(request);\n\t\t\t}\n\t\t}\n\n\t\tconst promisesResponses = await Promise.allSettled(requestPromises);\n\n\t\tlet response: any;\n\t\tfor (let itemIndex = 0; itemIndex < items.length; itemIndex++) {\n\t\t\tresponse = promisesResponses.shift();\n\n\t\t\tif (response!.status !== 'fulfilled') {\n\t\t\t\tif (!this.continueOnFail()) {\n\t\t\t\t\t// throw error;\n\t\t\t\t\tthrow new NodeApiError(this.getNode(), response as JsonObject, { itemIndex });\n\t\t\t\t} else {\n\t\t\t\t\tremoveCircularRefs(response.reason as JsonObject);\n\t\t\t\t\t// Return the actual reason as error\n\t\t\t\t\treturnItems.push({\n\t\t\t\t\t\tjson: {\n\t\t\t\t\t\t\terror: response.reason,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tpairedItem: {\n\t\t\t\t\t\t\titem: itemIndex,\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tresponse = response.value;\n\t\t\tif (response?.request?.constructor.name === 'ClientRequest') delete response.request;\n\n\t\t\tconst options = this.getNodeParameter('options', itemIndex, {});\n\n\t\t\tconst fullResponse = !!options.fullResponse;\n\n\t\t\tif (responseFormat === 'file') {\n\t\t\t\tconst dataPropertyName = this.getNodeParameter('dataPropertyName', 0);\n\n\t\t\t\tconst newItem: INodeExecutionData = {\n\t\t\t\t\tjson: {},\n\t\t\t\t\tbinary: {},\n\t\t\t\t\tpairedItem: {\n\t\t\t\t\t\titem: itemIndex,\n\t\t\t\t\t},\n\t\t\t\t};\n\n\t\t\t\tif (items[itemIndex].binary !== undefined) {\n\t\t\t\t\t// Create a shallow copy of the binary data so that the old\n\t\t\t\t\t// data references which do not get changed still stay behind\n\t\t\t\t\t// but the incoming data does not get changed.\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\tObject.assign(newItem.binary, items[itemIndex].binary);\n\t\t\t\t}\n\n\t\t\t\tlet binaryData: Buffer | Readable;\n\t\t\t\tif (fullResponse) {\n\t\t\t\t\tconst returnItem: IDataObject = {};\n\t\t\t\t\tfor (const property of fullResponseProperties) {\n\t\t\t\t\t\tif (property === 'body') {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturnItem[property] = response![property];\n\t\t\t\t\t}\n\n\t\t\t\t\tnewItem.json = returnItem;\n\t\t\t\t\tbinaryData = response!.body;\n\t\t\t\t} else {\n\t\t\t\t\tnewItem.json = items[itemIndex].json;\n\t\t\t\t\tbinaryData = response;\n\t\t\t\t}\n\n\t\t\t\tnewItem.binary![dataPropertyName] = await this.helpers.prepareBinaryData(binaryData);\n\t\t\t\treturnItems.push(newItem);\n\t\t\t} else if (responseFormat === 'string') {\n\t\t\t\tconst dataPropertyName = this.getNodeParameter('dataPropertyName', 0);\n\n\t\t\t\tif (fullResponse) {\n\t\t\t\t\tconst returnItem: IDataObject = {};\n\t\t\t\t\tfor (const property of fullResponseProperties) {\n\t\t\t\t\t\tif (property === 'body') {\n\t\t\t\t\t\t\treturnItem[dataPropertyName] = response![property];\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturnItem[property] = response![property];\n\t\t\t\t\t}\n\t\t\t\t\treturnItems.push({\n\t\t\t\t\t\tjson: returnItem,\n\t\t\t\t\t\tpairedItem: {\n\t\t\t\t\t\t\titem: itemIndex,\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\treturnItems.push({\n\t\t\t\t\t\tjson: {\n\t\t\t\t\t\t\t[dataPropertyName]: response,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tpairedItem: {\n\t\t\t\t\t\t\titem: itemIndex,\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// responseFormat: 'json'\n\t\t\t\tif (fullResponse) {\n\t\t\t\t\tconst returnItem: IDataObject = {};\n\t\t\t\t\tfor (const property of fullResponseProperties) {\n\t\t\t\t\t\treturnItem[property] = response![property];\n\t\t\t\t\t}\n\n\t\t\t\t\tif (responseFormat === 'json' && typeof returnItem.body === 'string') {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\treturnItem.body = JSON.parse(returnItem.body);\n\t\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t\t\t'Response body is not valid JSON. Change \"Response Format\" to \"String\"',\n\t\t\t\t\t\t\t\t{ itemIndex },\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturnItems.push({\n\t\t\t\t\t\tjson: returnItem,\n\t\t\t\t\t\tpairedItem: {\n\t\t\t\t\t\t\titem: itemIndex,\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tif (responseFormat === 'json' && typeof response === 'string') {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tresponse = JSON.parse(response);\n\t\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t\t\t'Response body is not valid JSON. Change \"Response Format\" to \"String\"',\n\t\t\t\t\t\t\t\t{ itemIndex },\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (options.splitIntoItems === true && Array.isArray(response)) {\n\t\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-loop-func\n\t\t\t\t\t\tresponse.forEach((item) =>\n\t\t\t\t\t\t\treturnItems.push({\n\t\t\t\t\t\t\t\tjson: item,\n\t\t\t\t\t\t\t\tpairedItem: {\n\t\t\t\t\t\t\t\t\titem: itemIndex,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturnItems.push({\n\t\t\t\t\t\t\tjson: response,\n\t\t\t\t\t\t\tpairedItem: {\n\t\t\t\t\t\t\t\titem: itemIndex,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturnItems = returnItems.map(replaceNullValues);\n\n\t\treturn [returnItems];\n\t}\n}\n"],"mappings":"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","names":[]}