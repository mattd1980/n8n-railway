{"version":3,"sources":["../../../../nodes/HttpRequest/shared/optimizeResponse.ts"],"sourcesContent":["import { Readability } from '@mozilla/readability';\nimport * as cheerio from 'cheerio';\nimport { convert } from 'html-to-text';\nimport { JSDOM } from 'jsdom';\nimport { get, set, unset } from 'lodash';\nimport {\n\ttype INodeProperties,\n\tjsonParse,\n\tNodeOperationError,\n\ttype IDataObject,\n\ttype IExecuteFunctions,\n} from 'n8n-workflow';\n\ntype ResponseOptimizerFn = (\n\tx: IDataObject | IDataObject[] | string,\n) => IDataObject | IDataObject[] | string;\n\nfunction htmlOptimizer(\n\tctx: IExecuteFunctions,\n\titemIndex: number,\n\tmaxLength: number,\n): ResponseOptimizerFn {\n\tconst cssSelector = ctx.getNodeParameter('cssSelector', itemIndex, '') as string;\n\tconst onlyContent = ctx.getNodeParameter('onlyContent', itemIndex, false) as boolean;\n\tlet elementsToOmit: string[] = [];\n\n\tif (onlyContent) {\n\t\tconst elementsToOmitUi = ctx.getNodeParameter('elementsToOmit', itemIndex, '') as\n\t\t\t| string\n\t\t\t| string[];\n\n\t\tif (typeof elementsToOmitUi === 'string') {\n\t\t\telementsToOmit = elementsToOmitUi\n\t\t\t\t.split(',')\n\t\t\t\t.filter((s) => s)\n\t\t\t\t.map((s) => s.trim());\n\t\t}\n\t}\n\n\treturn (response) => {\n\t\tif (typeof response !== 'string') {\n\t\t\tthrow new NodeOperationError(\n\t\t\t\tctx.getNode(),\n\t\t\t\t`The response type must be a string. Received: ${typeof response}`,\n\t\t\t\t{ itemIndex },\n\t\t\t);\n\t\t}\n\t\tconst returnData: string[] = [];\n\n\t\tconst html = cheerio.load(response);\n\t\tconst htmlElements = html(cssSelector);\n\n\t\thtmlElements.each((_, el) => {\n\t\t\tlet value = html(el).html() || '';\n\n\t\t\tif (onlyContent) {\n\t\t\t\tlet htmlToTextOptions;\n\n\t\t\t\tif (elementsToOmit?.length) {\n\t\t\t\t\thtmlToTextOptions = {\n\t\t\t\t\t\tselectors: elementsToOmit.map((selector) => ({\n\t\t\t\t\t\t\tselector,\n\t\t\t\t\t\t\tformat: 'skip',\n\t\t\t\t\t\t})),\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\tvalue = convert(value, htmlToTextOptions);\n\t\t\t}\n\n\t\t\tvalue = value\n\t\t\t\t.trim()\n\t\t\t\t.replace(/^\\s+|\\s+$/g, '')\n\t\t\t\t.replace(/(\\r\\n|\\n|\\r)/gm, '')\n\t\t\t\t.replace(/\\s+/g, ' ');\n\n\t\t\treturnData.push(value);\n\t\t});\n\n\t\tconst text = JSON.stringify(returnData, null, 2);\n\n\t\tif (maxLength > 0 && text.length > maxLength) {\n\t\t\treturn text.substring(0, maxLength);\n\t\t}\n\n\t\treturn text;\n\t};\n}\n\nconst textOptimizer = (\n\tctx: IExecuteFunctions,\n\titemIndex: number,\n\tmaxLength: number,\n): ResponseOptimizerFn => {\n\treturn (response) => {\n\t\tif (typeof response === 'object') {\n\t\t\ttry {\n\t\t\t\tresponse = JSON.stringify(response, null, 2);\n\t\t\t} catch (error) {}\n\t\t}\n\n\t\tif (typeof response !== 'string') {\n\t\t\tthrow new NodeOperationError(\n\t\t\t\tctx.getNode(),\n\t\t\t\t`The response type must be a string. Received: ${typeof response}`,\n\t\t\t\t{ itemIndex },\n\t\t\t);\n\t\t}\n\n\t\tconst dom = new JSDOM(response);\n\t\tconst article = new Readability(dom.window.document, {\n\t\t\tkeepClasses: true,\n\t\t}).parse();\n\n\t\tconst text = article?.textContent || '';\n\n\t\tif (maxLength > 0 && text.length > maxLength) {\n\t\t\treturn text.substring(0, maxLength);\n\t\t}\n\n\t\treturn text;\n\t};\n};\n\nconst jsonOptimizer = (ctx: IExecuteFunctions, itemIndex: number): ResponseOptimizerFn => {\n\treturn (response) => {\n\t\tlet responseData: IDataObject | IDataObject[] | string | null = response;\n\n\t\tif (typeof response === 'string') {\n\t\t\ttry {\n\t\t\t\tresponseData = jsonParse(response, { errorMessage: 'Invalid JSON response' });\n\t\t\t} catch (error) {\n\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\tctx.getNode(),\n\t\t\t\t\t`Received invalid JSON from response '${response}'`,\n\t\t\t\t\t{ itemIndex },\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tif (typeof responseData !== 'object' || !responseData) {\n\t\t\tthrow new NodeOperationError(\n\t\t\t\tctx.getNode(),\n\t\t\t\t'The response type must be an object or an array of objects',\n\t\t\t\t{ itemIndex },\n\t\t\t);\n\t\t}\n\n\t\tconst dataField = ctx.getNodeParameter('dataField', itemIndex, '') as string;\n\t\tlet returnData: IDataObject[] = [];\n\n\t\tif (!Array.isArray(responseData)) {\n\t\t\tif (dataField) {\n\t\t\t\tif (!Object.prototype.hasOwnProperty.call(responseData, dataField)) {\n\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\tctx.getNode(),\n\t\t\t\t\t\t`Target field \"${dataField}\" not found in response.`,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\titemIndex,\n\t\t\t\t\t\t\tdescription: `The response contained these fields: [${Object.keys(responseData).join(', ')}]`,\n\t\t\t\t\t\t},\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tconst data = responseData[dataField] as IDataObject | IDataObject[];\n\n\t\t\t\tif (Array.isArray(data)) {\n\t\t\t\t\tresponseData = data;\n\t\t\t\t} else {\n\t\t\t\t\tresponseData = [data];\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tresponseData = [responseData];\n\t\t\t}\n\t\t} else {\n\t\t\tif (dataField) {\n\t\t\t\tresponseData = responseData.map((data) => data[dataField]) as IDataObject[];\n\t\t\t}\n\t\t}\n\n\t\tconst fieldsToInclude = ctx.getNodeParameter('fieldsToInclude', itemIndex, 'all') as\n\t\t\t| 'all'\n\t\t\t| 'selected'\n\t\t\t| 'except';\n\n\t\tlet fields: string | string[] = [];\n\n\t\tif (fieldsToInclude !== 'all') {\n\t\t\tfields = ctx.getNodeParameter('fields', itemIndex, []) as string[] | string;\n\n\t\t\tif (typeof fields === 'string') {\n\t\t\t\tfields = fields.split(',').map((field) => field.trim());\n\t\t\t}\n\t\t} else {\n\t\t\treturnData = responseData;\n\t\t}\n\n\t\tif (fieldsToInclude === 'selected') {\n\t\t\tfor (const item of responseData) {\n\t\t\t\tconst newItem: IDataObject = {};\n\n\t\t\t\tfor (const field of fields) {\n\t\t\t\t\tset(newItem, field, get(item, field));\n\t\t\t\t}\n\n\t\t\t\treturnData.push(newItem);\n\t\t\t}\n\t\t}\n\n\t\tif (fieldsToInclude === 'except') {\n\t\t\tfor (const item of responseData) {\n\t\t\t\tfor (const field of fields) {\n\t\t\t\t\tunset(item, field);\n\t\t\t\t}\n\n\t\t\t\treturnData.push(item);\n\t\t\t}\n\t\t}\n\n\t\treturn returnData;\n\t};\n};\n\nexport const configureResponseOptimizer = (\n\tctx: IExecuteFunctions,\n\titemIndex: number,\n): ResponseOptimizerFn => {\n\tconst optimizeResponse = ctx.getNodeParameter('optimizeResponse', itemIndex, false) as boolean;\n\n\tif (optimizeResponse) {\n\t\tconst responseType = ctx.getNodeParameter('responseType', itemIndex) as\n\t\t\t| 'json'\n\t\t\t| 'text'\n\t\t\t| 'html';\n\n\t\tlet maxLength = 0;\n\t\tconst truncateResponse = ctx.getNodeParameter('truncateResponse', itemIndex, false) as boolean;\n\n\t\tif (truncateResponse) {\n\t\t\tmaxLength = ctx.getNodeParameter('maxLength', itemIndex, 0) as number;\n\t\t}\n\n\t\tswitch (responseType) {\n\t\t\tcase 'html':\n\t\t\t\treturn htmlOptimizer(ctx, itemIndex, maxLength);\n\t\t\tcase 'text':\n\t\t\t\treturn textOptimizer(ctx, itemIndex, maxLength);\n\t\t\tcase 'json':\n\t\t\t\treturn jsonOptimizer(ctx, itemIndex);\n\t\t}\n\t}\n\n\treturn (x) => x;\n};\n\nexport const optimizeResponseProperties: INodeProperties[] = [\n\t{\n\t\tdisplayName: 'Optimize Response',\n\t\tname: 'optimizeResponse',\n\t\ttype: 'boolean',\n\t\tdefault: false,\n\t\tnoDataExpression: true,\n\t\tdescription:\n\t\t\t'Whether the optimize the tool response to reduce amount of data passed to the LLM that could lead to better result and reduce cost',\n\t},\n\t{\n\t\tdisplayName: 'Expected Response Type',\n\t\tname: 'responseType',\n\t\ttype: 'options',\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\toptimizeResponse: [true],\n\t\t\t},\n\t\t},\n\t\toptions: [\n\t\t\t{\n\t\t\t\tname: 'JSON',\n\t\t\t\tvalue: 'json',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'HTML',\n\t\t\t\tvalue: 'html',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Text',\n\t\t\t\tvalue: 'text',\n\t\t\t},\n\t\t],\n\t\tdefault: 'json',\n\t},\n\t{\n\t\tdisplayName: 'Field Containing Data',\n\t\tname: 'dataField',\n\t\ttype: 'string',\n\t\tdefault: '',\n\t\tplaceholder: 'e.g. records',\n\t\tdescription: 'Specify the name of the field in the response containing the data',\n\t\thint: 'leave blank to use whole response',\n\t\trequiresDataPath: 'single',\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\toptimizeResponse: [true],\n\t\t\t\tresponseType: ['json'],\n\t\t\t},\n\t\t},\n\t},\n\t{\n\t\tdisplayName: 'Include Fields',\n\t\tname: 'fieldsToInclude',\n\t\ttype: 'options',\n\t\tdescription: 'What fields response object should include',\n\t\tdefault: 'all',\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\toptimizeResponse: [true],\n\t\t\t\tresponseType: ['json'],\n\t\t\t},\n\t\t},\n\t\toptions: [\n\t\t\t{\n\t\t\t\tname: 'All',\n\t\t\t\tvalue: 'all',\n\t\t\t\tdescription: 'Include all fields',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Selected',\n\t\t\t\tvalue: 'selected',\n\t\t\t\tdescription: 'Include only fields specified below',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Except',\n\t\t\t\tvalue: 'except',\n\t\t\t\tdescription: 'Exclude fields specified below',\n\t\t\t},\n\t\t],\n\t},\n\t{\n\t\tdisplayName: 'Fields',\n\t\tname: 'fields',\n\t\ttype: 'string',\n\t\tdefault: '',\n\t\tplaceholder: 'e.g. field1,field2',\n\t\tdescription:\n\t\t\t'Comma-separated list of the field names. Supports dot notation. You can drag the selected fields from the input panel.',\n\t\trequiresDataPath: 'multiple',\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\toptimizeResponse: [true],\n\t\t\t\tresponseType: ['json'],\n\t\t\t},\n\t\t\thide: {\n\t\t\t\tfieldsToInclude: ['all'],\n\t\t\t},\n\t\t},\n\t},\n\t{\n\t\tdisplayName: 'Selector (CSS)',\n\t\tname: 'cssSelector',\n\t\ttype: 'string',\n\t\tdescription:\n\t\t\t'Select specific element(e.g. body) or multiple elements(e.g. div) of chosen type in the response HTML.',\n\t\tplaceholder: 'e.g. body',\n\t\tdefault: 'body',\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\toptimizeResponse: [true],\n\t\t\t\tresponseType: ['html'],\n\t\t\t},\n\t\t},\n\t},\n\t{\n\t\tdisplayName: 'Return Only Content',\n\t\tname: 'onlyContent',\n\t\ttype: 'boolean',\n\t\tdefault: false,\n\t\tdescription:\n\t\t\t'Whether to return only content of html elements, stripping html tags and attributes',\n\t\thint: 'Uses less tokens and may be easier for model to understand',\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\toptimizeResponse: [true],\n\t\t\t\tresponseType: ['html'],\n\t\t\t},\n\t\t},\n\t},\n\t{\n\t\tdisplayName: 'Elements To Omit',\n\t\tname: 'elementsToOmit',\n\t\ttype: 'string',\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\toptimizeResponse: [true],\n\t\t\t\tresponseType: ['html'],\n\t\t\t\tonlyContent: [true],\n\t\t\t},\n\t\t},\n\t\tdefault: '',\n\t\tplaceholder: 'e.g. img, .className, #ItemId',\n\t\tdescription: 'Comma-separated list of selectors that would be excluded when extracting content',\n\t},\n\t{\n\t\tdisplayName: 'Truncate Response',\n\t\tname: 'truncateResponse',\n\t\ttype: 'boolean',\n\t\tdefault: false,\n\t\thint: 'Helps save tokens',\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\toptimizeResponse: [true],\n\t\t\t\tresponseType: ['text', 'html'],\n\t\t\t},\n\t\t},\n\t},\n\t{\n\t\tdisplayName: 'Max Response Characters',\n\t\tname: 'maxLength',\n\t\ttype: 'number',\n\t\tdefault: 1000,\n\t\ttypeOptions: {\n\t\t\tminValue: 1,\n\t\t},\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\toptimizeResponse: [true],\n\t\t\t\tresponseType: ['text', 'html'],\n\t\t\t\ttruncateResponse: [true],\n\t\t\t},\n\t\t},\n\t},\n];\n"],"mappings":"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","names":[]}